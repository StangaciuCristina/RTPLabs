
RTPLabs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008180  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008310  08008310  00009310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008370  08008370  0000a060  2**0
                  CONTENTS
  4 .ARM          00000008  08008370  08008370  00009370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008378  08008378  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008378  08008378  00009378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800837c  0800837c  0000937c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08008380  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a060  2**0
                  CONTENTS
 10 .bss          000050ac  20000060  20000060  0000a060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000510c  2000510c  0000a060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021c41  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049d6  00000000  00000000  0002bcd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cd0  00000000  00000000  000306a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000165e  00000000  00000000  00032378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004cf4  00000000  00000000  000339d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022b37  00000000  00000000  000386ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd6ca  00000000  00000000  0005b201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001388cb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007e6c  00000000  00000000  00138910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  0014077c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080082f8 	.word	0x080082f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080082f8 	.word	0x080082f8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <Task1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END My task */
void Task1(void *argument)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  volatile uint32_t ul;
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 80004c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004cc:	4807      	ldr	r0, [pc, #28]	@ (80004ec <Task1+0x2c>)
 80004ce:	f000 ffda 	bl	8001486 <HAL_GPIO_TogglePin>
	for( ul=0; ul<mainDELAY_LOOP_COUNT; ul++)
 80004d2:	2300      	movs	r3, #0
 80004d4:	60fb      	str	r3, [r7, #12]
 80004d6:	e002      	b.n	80004de <Task1+0x1e>
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	3301      	adds	r3, #1
 80004dc:	60fb      	str	r3, [r7, #12]
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d3f7      	bcc.n	80004d8 <Task1+0x18>
	HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 80004e8:	e7ee      	b.n	80004c8 <Task1+0x8>
 80004ea:	bf00      	nop
 80004ec:	40020c00 	.word	0x40020c00

080004f0 <Task2>:
  }
  /* USER CODE END 5 */
}

void Task2(void *argument)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  volatile uint32_t ul;
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 80004f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004fc:	4807      	ldr	r0, [pc, #28]	@ (800051c <Task2+0x2c>)
 80004fe:	f000 ffc2 	bl	8001486 <HAL_GPIO_TogglePin>
	for( ul=0; ul<mainDELAY_LOOP_COUNT; ul++)
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	e002      	b.n	800050e <Task2+0x1e>
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	3301      	adds	r3, #1
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8000514:	4293      	cmp	r3, r2
 8000516:	d3f7      	bcc.n	8000508 <Task2+0x18>
	HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8000518:	e7ee      	b.n	80004f8 <Task2+0x8>
 800051a:	bf00      	nop
 800051c:	40020c00 	.word	0x40020c00

08000520 <Task3>:
  }
  /* USER CODE END 5 */
}

void Task3(void *argument)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  volatile uint32_t ul;
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8000528:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800052c:	4807      	ldr	r0, [pc, #28]	@ (800054c <Task3+0x2c>)
 800052e:	f000 ffaa 	bl	8001486 <HAL_GPIO_TogglePin>
	for( ul=0; ul<mainDELAY_LOOP_COUNT; ul++)
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	e002      	b.n	800053e <Task3+0x1e>
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	3301      	adds	r3, #1
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8000544:	4293      	cmp	r3, r2
 8000546:	d3f7      	bcc.n	8000538 <Task3+0x18>
	HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8000548:	e7ee      	b.n	8000528 <Task3+0x8>
 800054a:	bf00      	nop
 800054c:	40020c00 	.word	0x40020c00

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000556:	f000 fcbd 	bl	8000ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055a:	f000 f83d 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055e:	f000 f95d 	bl	800081c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000562:	f000 f8a3 	bl	80006ac <MX_I2C1_Init>
  MX_I2S3_Init();
 8000566:	f000 f8cf 	bl	8000708 <MX_I2S3_Init>
  MX_SPI1_Init();
 800056a:	f000 f8fd 	bl	8000768 <MX_SPI1_Init>
  MX_TIM11_Init();
 800056e:	f000 f931 	bl	80007d4 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000572:	f005 f833 	bl	80055dc <osKernelInitialize>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  //defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
  xTaskCreate(Task1,"Green Led",1000,NULL,1,NULL);
 8000576:	2300      	movs	r3, #0
 8000578:	9301      	str	r3, [sp, #4]
 800057a:	2301      	movs	r3, #1
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2300      	movs	r3, #0
 8000580:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000584:	490e      	ldr	r1, [pc, #56]	@ (80005c0 <main+0x70>)
 8000586:	480f      	ldr	r0, [pc, #60]	@ (80005c4 <main+0x74>)
 8000588:	f005 feee 	bl	8006368 <xTaskCreate>
  xTaskCreate(Task2,"Orange Led",1000,NULL,1,NULL);
 800058c:	2300      	movs	r3, #0
 800058e:	9301      	str	r3, [sp, #4]
 8000590:	2301      	movs	r3, #1
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	2300      	movs	r3, #0
 8000596:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800059a:	490b      	ldr	r1, [pc, #44]	@ (80005c8 <main+0x78>)
 800059c:	480b      	ldr	r0, [pc, #44]	@ (80005cc <main+0x7c>)
 800059e:	f005 fee3 	bl	8006368 <xTaskCreate>
  xTaskCreate(Task3,"Orange Red",1000,NULL,1,NULL);
 80005a2:	2300      	movs	r3, #0
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2301      	movs	r3, #1
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2300      	movs	r3, #0
 80005ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005b0:	4907      	ldr	r1, [pc, #28]	@ (80005d0 <main+0x80>)
 80005b2:	4808      	ldr	r0, [pc, #32]	@ (80005d4 <main+0x84>)
 80005b4:	f005 fed8 	bl	8006368 <xTaskCreate>
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  //osKernelStart();
  vTaskStartScheduler();
 80005b8:	f006 f834 	bl	8006624 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <main+0x6c>
 80005c0:	0800831c 	.word	0x0800831c
 80005c4:	080004c1 	.word	0x080004c1
 80005c8:	08008328 	.word	0x08008328
 80005cc:	080004f1 	.word	0x080004f1
 80005d0:	08008334 	.word	0x08008334
 80005d4:	08000521 	.word	0x08000521

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	@ 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2230      	movs	r2, #48	@ 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f007 fdaa 	bl	8008140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	4b28      	ldr	r3, [pc, #160]	@ (80006a4 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	4a27      	ldr	r2, [pc, #156]	@ (80006a4 <SystemClock_Config+0xcc>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	@ 0x40
 800060c:	4b25      	ldr	r3, [pc, #148]	@ (80006a4 <SystemClock_Config+0xcc>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	4b22      	ldr	r3, [pc, #136]	@ (80006a8 <SystemClock_Config+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a21      	ldr	r2, [pc, #132]	@ (80006a8 <SystemClock_Config+0xd0>)
 8000622:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b1f      	ldr	r3, [pc, #124]	@ (80006a8 <SystemClock_Config+0xd0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000634:	2301      	movs	r3, #1
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000638:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800063c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000642:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000648:	2308      	movs	r3, #8
 800064a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800064c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000650:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000652:	2302      	movs	r3, #2
 8000654:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000656:	2307      	movs	r3, #7
 8000658:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	4618      	mov	r0, r3
 8000660:	f003 fa9c 	bl	8003b9c <HAL_RCC_OscConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800066a:	f000 f9e7 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	2302      	movs	r3, #2
 8000674:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800067a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800067e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000680:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000684:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	2105      	movs	r1, #5
 800068c:	4618      	mov	r0, r3
 800068e:	f003 fcfd 	bl	800408c <HAL_RCC_ClockConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000698:	f000 f9d0 	bl	8000a3c <Error_Handler>
  }
}
 800069c:	bf00      	nop
 800069e:	3750      	adds	r7, #80	@ 0x50
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b0:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006b2:	4a13      	ldr	r2, [pc, #76]	@ (8000700 <MX_I2C1_Init+0x54>)
 80006b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006b8:	4a12      	ldr	r2, [pc, #72]	@ (8000704 <MX_I2C1_Init+0x58>)
 80006ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006ea:	f002 fc73 	bl	8002fd4 <HAL_I2C_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006f4:	f000 f9a2 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	2000007c 	.word	0x2000007c
 8000700:	40005400 	.word	0x40005400
 8000704:	000186a0 	.word	0x000186a0

08000708 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800070c:	4b13      	ldr	r3, [pc, #76]	@ (800075c <MX_I2S3_Init+0x54>)
 800070e:	4a14      	ldr	r2, [pc, #80]	@ (8000760 <MX_I2S3_Init+0x58>)
 8000710:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000712:	4b12      	ldr	r3, [pc, #72]	@ (800075c <MX_I2S3_Init+0x54>)
 8000714:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000718:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <MX_I2S3_Init+0x54>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000720:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <MX_I2S3_Init+0x54>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <MX_I2S3_Init+0x54>)
 8000728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800072c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800072e:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <MX_I2S3_Init+0x54>)
 8000730:	4a0c      	ldr	r2, [pc, #48]	@ (8000764 <MX_I2S3_Init+0x5c>)
 8000732:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000734:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_I2S3_Init+0x54>)
 8000736:	2200      	movs	r2, #0
 8000738:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800073a:	4b08      	ldr	r3, [pc, #32]	@ (800075c <MX_I2S3_Init+0x54>)
 800073c:	2200      	movs	r2, #0
 800073e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_I2S3_Init+0x54>)
 8000742:	2200      	movs	r2, #0
 8000744:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	@ (800075c <MX_I2S3_Init+0x54>)
 8000748:	f002 fd88 	bl	800325c <HAL_I2S_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000752:	f000 f973 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	200000d0 	.word	0x200000d0
 8000760:	40003c00 	.word	0x40003c00
 8000764:	00017700 	.word	0x00017700

08000768 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800076c:	4b17      	ldr	r3, [pc, #92]	@ (80007cc <MX_SPI1_Init+0x64>)
 800076e:	4a18      	ldr	r2, [pc, #96]	@ (80007d0 <MX_SPI1_Init+0x68>)
 8000770:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000772:	4b16      	ldr	r3, [pc, #88]	@ (80007cc <MX_SPI1_Init+0x64>)
 8000774:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000778:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800077a:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <MX_SPI1_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000780:	4b12      	ldr	r3, [pc, #72]	@ (80007cc <MX_SPI1_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000786:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <MX_SPI1_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800078c:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <MX_SPI1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000792:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <MX_SPI1_Init+0x64>)
 8000794:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000798:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800079a:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <MX_SPI1_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	@ (80007cc <MX_SPI1_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a6:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <MX_SPI1_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ac:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <MX_SPI1_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007b2:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <MX_SPI1_Init+0x64>)
 80007b4:	220a      	movs	r2, #10
 80007b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	@ (80007cc <MX_SPI1_Init+0x64>)
 80007ba:	f003 ffe7 	bl	800478c <HAL_SPI_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007c4:	f000 f93a 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000118 	.word	0x20000118
 80007d0:	40013000 	.word	0x40013000

080007d4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80007d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_TIM11_Init+0x40>)
 80007da:	4a0f      	ldr	r2, [pc, #60]	@ (8000818 <MX_TIM11_Init+0x44>)
 80007dc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80007de:	4b0d      	ldr	r3, [pc, #52]	@ (8000814 <MX_TIM11_Init+0x40>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <MX_TIM11_Init+0x40>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80007ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000814 <MX_TIM11_Init+0x40>)
 80007ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007f0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f2:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <MX_TIM11_Init+0x40>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <MX_TIM11_Init+0x40>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	@ (8000814 <MX_TIM11_Init+0x40>)
 8000800:	f004 f84d 	bl	800489e <HAL_TIM_Base_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800080a:	f000 f917 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000170 	.word	0x20000170
 8000818:	40014800 	.word	0x40014800

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08c      	sub	sp, #48	@ 0x30
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
 8000836:	4b72      	ldr	r3, [pc, #456]	@ (8000a00 <MX_GPIO_Init+0x1e4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a71      	ldr	r2, [pc, #452]	@ (8000a00 <MX_GPIO_Init+0x1e4>)
 800083c:	f043 0310 	orr.w	r3, r3, #16
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b6f      	ldr	r3, [pc, #444]	@ (8000a00 <MX_GPIO_Init+0x1e4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0310 	and.w	r3, r3, #16
 800084a:	61bb      	str	r3, [r7, #24]
 800084c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
 8000852:	4b6b      	ldr	r3, [pc, #428]	@ (8000a00 <MX_GPIO_Init+0x1e4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a6a      	ldr	r2, [pc, #424]	@ (8000a00 <MX_GPIO_Init+0x1e4>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b68      	ldr	r3, [pc, #416]	@ (8000a00 <MX_GPIO_Init+0x1e4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	4b64      	ldr	r3, [pc, #400]	@ (8000a00 <MX_GPIO_Init+0x1e4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a63      	ldr	r2, [pc, #396]	@ (8000a00 <MX_GPIO_Init+0x1e4>)
 8000874:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b61      	ldr	r3, [pc, #388]	@ (8000a00 <MX_GPIO_Init+0x1e4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	4b5d      	ldr	r3, [pc, #372]	@ (8000a00 <MX_GPIO_Init+0x1e4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a5c      	ldr	r2, [pc, #368]	@ (8000a00 <MX_GPIO_Init+0x1e4>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b5a      	ldr	r3, [pc, #360]	@ (8000a00 <MX_GPIO_Init+0x1e4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	4b56      	ldr	r3, [pc, #344]	@ (8000a00 <MX_GPIO_Init+0x1e4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a55      	ldr	r2, [pc, #340]	@ (8000a00 <MX_GPIO_Init+0x1e4>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b53      	ldr	r3, [pc, #332]	@ (8000a00 <MX_GPIO_Init+0x1e4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	4b4f      	ldr	r3, [pc, #316]	@ (8000a00 <MX_GPIO_Init+0x1e4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a4e      	ldr	r2, [pc, #312]	@ (8000a00 <MX_GPIO_Init+0x1e4>)
 80008c8:	f043 0308 	orr.w	r3, r3, #8
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b4c      	ldr	r3, [pc, #304]	@ (8000a00 <MX_GPIO_Init+0x1e4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0308 	and.w	r3, r3, #8
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2108      	movs	r1, #8
 80008de:	4849      	ldr	r0, [pc, #292]	@ (8000a04 <MX_GPIO_Init+0x1e8>)
 80008e0:	f000 fdb8 	bl	8001454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	2101      	movs	r1, #1
 80008e8:	4847      	ldr	r0, [pc, #284]	@ (8000a08 <MX_GPIO_Init+0x1ec>)
 80008ea:	f000 fdb3 	bl	8001454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ee:	2200      	movs	r2, #0
 80008f0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008f4:	4845      	ldr	r0, [pc, #276]	@ (8000a0c <MX_GPIO_Init+0x1f0>)
 80008f6:	f000 fdad 	bl	8001454 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008fa:	2308      	movs	r3, #8
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	483c      	ldr	r0, [pc, #240]	@ (8000a04 <MX_GPIO_Init+0x1e8>)
 8000912:	f000 fc03 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000916:	2301      	movs	r3, #1
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4836      	ldr	r0, [pc, #216]	@ (8000a08 <MX_GPIO_Init+0x1ec>)
 800092e:	f000 fbf5 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000932:	2308      	movs	r3, #8
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000942:	2305      	movs	r3, #5
 8000944:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	482e      	ldr	r0, [pc, #184]	@ (8000a08 <MX_GPIO_Init+0x1ec>)
 800094e:	f000 fbe5 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000952:	2301      	movs	r3, #1
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000956:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	482a      	ldr	r0, [pc, #168]	@ (8000a10 <MX_GPIO_Init+0x1f4>)
 8000968:	f000 fbd8 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800096c:	2304      	movs	r3, #4
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4825      	ldr	r0, [pc, #148]	@ (8000a14 <MX_GPIO_Init+0x1f8>)
 8000980:	f000 fbcc 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000984:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000996:	2305      	movs	r3, #5
 8000998:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	481c      	ldr	r0, [pc, #112]	@ (8000a14 <MX_GPIO_Init+0x1f8>)
 80009a2:	f000 fbbb 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009a6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80009aa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	4813      	ldr	r0, [pc, #76]	@ (8000a0c <MX_GPIO_Init+0x1f0>)
 80009c0:	f000 fbac 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009c4:	2320      	movs	r3, #32
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	480d      	ldr	r0, [pc, #52]	@ (8000a0c <MX_GPIO_Init+0x1f0>)
 80009d8:	f000 fba0 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009dc:	2302      	movs	r3, #2
 80009de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009e0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	4804      	ldr	r0, [pc, #16]	@ (8000a04 <MX_GPIO_Init+0x1e8>)
 80009f2:	f000 fb93 	bl	800111c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009f6:	bf00      	nop
 80009f8:	3730      	adds	r7, #48	@ 0x30
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40020800 	.word	0x40020800
 8000a0c:	40020c00 	.word	0x40020c00
 8000a10:	40020000 	.word	0x40020000
 8000a14:	40020400 	.word	0x40020400

08000a18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a04      	ldr	r2, [pc, #16]	@ (8000a38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d101      	bne.n	8000a2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a2a:	f000 fa75 	bl	8000f18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40001000 	.word	0x40001000

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <Error_Handler+0x8>

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <HAL_MspInit+0x54>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a56:	4a11      	ldr	r2, [pc, #68]	@ (8000a9c <HAL_MspInit+0x54>)
 8000a58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <HAL_MspInit+0x54>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a9c <HAL_MspInit+0x54>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a72:	4a0a      	ldr	r2, [pc, #40]	@ (8000a9c <HAL_MspInit+0x54>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a7a:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <HAL_MspInit+0x54>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	210f      	movs	r1, #15
 8000a8a:	f06f 0001 	mvn.w	r0, #1
 8000a8e:	f000 fb1b 	bl	80010c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	@ 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a19      	ldr	r2, [pc, #100]	@ (8000b24 <HAL_I2C_MspInit+0x84>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d12c      	bne.n	8000b1c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b18      	ldr	r3, [pc, #96]	@ (8000b28 <HAL_I2C_MspInit+0x88>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	4a17      	ldr	r2, [pc, #92]	@ (8000b28 <HAL_I2C_MspInit+0x88>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad2:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <HAL_I2C_MspInit+0x88>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ade:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae4:	2312      	movs	r3, #18
 8000ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000af0:	2304      	movs	r3, #4
 8000af2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4619      	mov	r1, r3
 8000afa:	480c      	ldr	r0, [pc, #48]	@ (8000b2c <HAL_I2C_MspInit+0x8c>)
 8000afc:	f000 fb0e 	bl	800111c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <HAL_I2C_MspInit+0x88>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b08:	4a07      	ldr	r2, [pc, #28]	@ (8000b28 <HAL_I2C_MspInit+0x88>)
 8000b0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b10:	4b05      	ldr	r3, [pc, #20]	@ (8000b28 <HAL_I2C_MspInit+0x88>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b1c:	bf00      	nop
 8000b1e:	3728      	adds	r7, #40	@ 0x28
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40005400 	.word	0x40005400
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020400 	.word	0x40020400

08000b30 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08e      	sub	sp, #56	@ 0x38
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a31      	ldr	r2, [pc, #196]	@ (8000c20 <HAL_I2S_MspInit+0xf0>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d15a      	bne.n	8000c16 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b60:	2301      	movs	r3, #1
 8000b62:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b64:	23c0      	movs	r3, #192	@ 0xc0
 8000b66:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4618      	mov	r0, r3
 8000b72:	f003 fcc9 	bl	8004508 <HAL_RCCEx_PeriphCLKConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b7c:	f7ff ff5e 	bl	8000a3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	4b27      	ldr	r3, [pc, #156]	@ (8000c24 <HAL_I2S_MspInit+0xf4>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b88:	4a26      	ldr	r2, [pc, #152]	@ (8000c24 <HAL_I2S_MspInit+0xf4>)
 8000b8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b90:	4b24      	ldr	r3, [pc, #144]	@ (8000c24 <HAL_I2S_MspInit+0xf4>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	4b20      	ldr	r3, [pc, #128]	@ (8000c24 <HAL_I2S_MspInit+0xf4>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba4:	4a1f      	ldr	r2, [pc, #124]	@ (8000c24 <HAL_I2S_MspInit+0xf4>)
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bac:	4b1d      	ldr	r3, [pc, #116]	@ (8000c24 <HAL_I2S_MspInit+0xf4>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	4b19      	ldr	r3, [pc, #100]	@ (8000c24 <HAL_I2S_MspInit+0xf4>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc0:	4a18      	ldr	r2, [pc, #96]	@ (8000c24 <HAL_I2S_MspInit+0xf4>)
 8000bc2:	f043 0304 	orr.w	r3, r3, #4
 8000bc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc8:	4b16      	ldr	r3, [pc, #88]	@ (8000c24 <HAL_I2S_MspInit+0xf4>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bcc:	f003 0304 	and.w	r3, r3, #4
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bd4:	2310      	movs	r3, #16
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000be4:	2306      	movs	r3, #6
 8000be6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	480e      	ldr	r0, [pc, #56]	@ (8000c28 <HAL_I2S_MspInit+0xf8>)
 8000bf0:	f000 fa94 	bl	800111c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bf4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000bf8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c06:	2306      	movs	r3, #6
 8000c08:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4806      	ldr	r0, [pc, #24]	@ (8000c2c <HAL_I2S_MspInit+0xfc>)
 8000c12:	f000 fa83 	bl	800111c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c16:	bf00      	nop
 8000c18:	3738      	adds	r7, #56	@ 0x38
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40003c00 	.word	0x40003c00
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	40020800 	.word	0x40020800

08000c30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	@ 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a19      	ldr	r2, [pc, #100]	@ (8000cb4 <HAL_SPI_MspInit+0x84>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d12b      	bne.n	8000caa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <HAL_SPI_MspInit+0x88>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5a:	4a17      	ldr	r2, [pc, #92]	@ (8000cb8 <HAL_SPI_MspInit+0x88>)
 8000c5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c62:	4b15      	ldr	r3, [pc, #84]	@ (8000cb8 <HAL_SPI_MspInit+0x88>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <HAL_SPI_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	4a10      	ldr	r2, [pc, #64]	@ (8000cb8 <HAL_SPI_MspInit+0x88>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <HAL_SPI_MspInit+0x88>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c8a:	23e0      	movs	r3, #224	@ 0xe0
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c9a:	2305      	movs	r3, #5
 8000c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4805      	ldr	r0, [pc, #20]	@ (8000cbc <HAL_SPI_MspInit+0x8c>)
 8000ca6:	f000 fa39 	bl	800111c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000caa:	bf00      	nop
 8000cac:	3728      	adds	r7, #40	@ 0x28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40013000 	.word	0x40013000
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020000 	.word	0x40020000

08000cc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0b      	ldr	r2, [pc, #44]	@ (8000cfc <HAL_TIM_Base_MspInit+0x3c>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d10d      	bne.n	8000cee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d00 <HAL_TIM_Base_MspInit+0x40>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cda:	4a09      	ldr	r2, [pc, #36]	@ (8000d00 <HAL_TIM_Base_MspInit+0x40>)
 8000cdc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ce2:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <HAL_TIM_Base_MspInit+0x40>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000cee:	bf00      	nop
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40014800 	.word	0x40014800
 8000d00:	40023800 	.word	0x40023800

08000d04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08e      	sub	sp, #56	@ 0x38
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	4b33      	ldr	r3, [pc, #204]	@ (8000de8 <HAL_InitTick+0xe4>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1c:	4a32      	ldr	r2, [pc, #200]	@ (8000de8 <HAL_InitTick+0xe4>)
 8000d1e:	f043 0310 	orr.w	r3, r3, #16
 8000d22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d24:	4b30      	ldr	r3, [pc, #192]	@ (8000de8 <HAL_InitTick+0xe4>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d28:	f003 0310 	and.w	r3, r3, #16
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d30:	f107 0210 	add.w	r2, r7, #16
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4611      	mov	r1, r2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f003 fbb2 	bl	80044a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d40:	6a3b      	ldr	r3, [r7, #32]
 8000d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d103      	bne.n	8000d52 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d4a:	f003 fb97 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 8000d4e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000d50:	e004      	b.n	8000d5c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d52:	f003 fb93 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 8000d56:	4603      	mov	r3, r0
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d5e:	4a23      	ldr	r2, [pc, #140]	@ (8000dec <HAL_InitTick+0xe8>)
 8000d60:	fba2 2303 	umull	r2, r3, r2, r3
 8000d64:	0c9b      	lsrs	r3, r3, #18
 8000d66:	3b01      	subs	r3, #1
 8000d68:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d6a:	4b21      	ldr	r3, [pc, #132]	@ (8000df0 <HAL_InitTick+0xec>)
 8000d6c:	4a21      	ldr	r2, [pc, #132]	@ (8000df4 <HAL_InitTick+0xf0>)
 8000d6e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d70:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <HAL_InitTick+0xec>)
 8000d72:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d76:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d78:	4a1d      	ldr	r2, [pc, #116]	@ (8000df0 <HAL_InitTick+0xec>)
 8000d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d7c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000df0 <HAL_InitTick+0xec>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d84:	4b1a      	ldr	r3, [pc, #104]	@ (8000df0 <HAL_InitTick+0xec>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8a:	4b19      	ldr	r3, [pc, #100]	@ (8000df0 <HAL_InitTick+0xec>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d90:	4817      	ldr	r0, [pc, #92]	@ (8000df0 <HAL_InitTick+0xec>)
 8000d92:	f003 fd84 	bl	800489e <HAL_TIM_Base_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000d9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d11b      	bne.n	8000ddc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000da4:	4812      	ldr	r0, [pc, #72]	@ (8000df0 <HAL_InitTick+0xec>)
 8000da6:	f003 fdc9 	bl	800493c <HAL_TIM_Base_Start_IT>
 8000daa:	4603      	mov	r3, r0
 8000dac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000db0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d111      	bne.n	8000ddc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000db8:	2036      	movs	r0, #54	@ 0x36
 8000dba:	f000 f9a1 	bl	8001100 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b0f      	cmp	r3, #15
 8000dc2:	d808      	bhi.n	8000dd6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	2036      	movs	r0, #54	@ 0x36
 8000dca:	f000 f97d 	bl	80010c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dce:	4a0a      	ldr	r2, [pc, #40]	@ (8000df8 <HAL_InitTick+0xf4>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	e002      	b.n	8000ddc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ddc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3738      	adds	r7, #56	@ 0x38
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40023800 	.word	0x40023800
 8000dec:	431bde83 	.word	0x431bde83
 8000df0:	200001b8 	.word	0x200001b8
 8000df4:	40001000 	.word	0x40001000
 8000df8:	20000004 	.word	0x20000004

08000dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <NMI_Handler+0x4>

08000e04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <HardFault_Handler+0x4>

08000e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <MemManage_Handler+0x4>

08000e14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e38:	4802      	ldr	r0, [pc, #8]	@ (8000e44 <TIM6_DAC_IRQHandler+0x10>)
 8000e3a:	f003 fdef 	bl	8004a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200001b8 	.word	0x200001b8

08000e48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e4c:	4802      	ldr	r0, [pc, #8]	@ (8000e58 <OTG_FS_IRQHandler+0x10>)
 8000e4e:	f000 fb34 	bl	80014ba <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20004bec 	.word	0x20004bec

08000e5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e60:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <SystemInit+0x20>)
 8000e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e66:	4a05      	ldr	r2, [pc, #20]	@ (8000e7c <SystemInit+0x20>)
 8000e68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eb8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e84:	f7ff ffea 	bl	8000e5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e88:	480c      	ldr	r0, [pc, #48]	@ (8000ebc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e8a:	490d      	ldr	r1, [pc, #52]	@ (8000ec0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e90:	e002      	b.n	8000e98 <LoopCopyDataInit>

08000e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e96:	3304      	adds	r3, #4

08000e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e9c:	d3f9      	bcc.n	8000e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ea0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ecc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea4:	e001      	b.n	8000eaa <LoopFillZerobss>

08000ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea8:	3204      	adds	r2, #4

08000eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eac:	d3fb      	bcc.n	8000ea6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eae:	f007 f9a5 	bl	80081fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb2:	f7ff fb4d 	bl	8000550 <main>
  bx  lr    
 8000eb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000eb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ec4:	08008380 	.word	0x08008380
  ldr r2, =_sbss
 8000ec8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ecc:	2000510c 	.word	0x2000510c

08000ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC_IRQHandler>
	...

08000ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f14 <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f14 <HAL_Init+0x40>)
 8000ede:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f14 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8000f14 <HAL_Init+0x40>)
 8000eea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef0:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a07      	ldr	r2, [pc, #28]	@ (8000f14 <HAL_Init+0x40>)
 8000ef6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000efc:	2003      	movs	r0, #3
 8000efe:	f000 f8d8 	bl	80010b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f02:	200f      	movs	r0, #15
 8000f04:	f7ff fefe 	bl	8000d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f08:	f7ff fd9e 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023c00 	.word	0x40023c00

08000f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <HAL_IncTick+0x20>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <HAL_IncTick+0x24>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	4a04      	ldr	r2, [pc, #16]	@ (8000f3c <HAL_IncTick+0x24>)
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	20000200 	.word	0x20000200

08000f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return uwTick;
 8000f44:	4b03      	ldr	r3, [pc, #12]	@ (8000f54 <HAL_GetTick+0x14>)
 8000f46:	681b      	ldr	r3, [r3, #0]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000200 	.word	0x20000200

08000f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f68:	4b0c      	ldr	r3, [pc, #48]	@ (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f74:	4013      	ands	r3, r2
 8000f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8a:	4a04      	ldr	r2, [pc, #16]	@ (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	60d3      	str	r3, [r2, #12]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa4:	4b04      	ldr	r3, [pc, #16]	@ (8000fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	f003 0307 	and.w	r3, r3, #7
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	db0b      	blt.n	8000fe6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f003 021f 	and.w	r2, r3, #31
 8000fd4:	4907      	ldr	r1, [pc, #28]	@ (8000ff4 <__NVIC_EnableIRQ+0x38>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	095b      	lsrs	r3, r3, #5
 8000fdc:	2001      	movs	r0, #1
 8000fde:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000e100 	.word	0xe000e100

08000ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	2b00      	cmp	r3, #0
 800100a:	db0a      	blt.n	8001022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	b2da      	uxtb	r2, r3
 8001010:	490c      	ldr	r1, [pc, #48]	@ (8001044 <__NVIC_SetPriority+0x4c>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	0112      	lsls	r2, r2, #4
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	440b      	add	r3, r1
 800101c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001020:	e00a      	b.n	8001038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4908      	ldr	r1, [pc, #32]	@ (8001048 <__NVIC_SetPriority+0x50>)
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	3b04      	subs	r3, #4
 8001030:	0112      	lsls	r2, r2, #4
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	440b      	add	r3, r1
 8001036:	761a      	strb	r2, [r3, #24]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000e100 	.word	0xe000e100
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	@ 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f1c3 0307 	rsb	r3, r3, #7
 8001066:	2b04      	cmp	r3, #4
 8001068:	bf28      	it	cs
 800106a:	2304      	movcs	r3, #4
 800106c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3304      	adds	r3, #4
 8001072:	2b06      	cmp	r3, #6
 8001074:	d902      	bls.n	800107c <NVIC_EncodePriority+0x30>
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3b03      	subs	r3, #3
 800107a:	e000      	b.n	800107e <NVIC_EncodePriority+0x32>
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	f04f 32ff 	mov.w	r2, #4294967295
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43da      	mvns	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	401a      	ands	r2, r3
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001094:	f04f 31ff 	mov.w	r1, #4294967295
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	43d9      	mvns	r1, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	4313      	orrs	r3, r2
         );
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3724      	adds	r7, #36	@ 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ff4c 	bl	8000f58 <__NVIC_SetPriorityGrouping>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010da:	f7ff ff61 	bl	8000fa0 <__NVIC_GetPriorityGrouping>
 80010de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	68b9      	ldr	r1, [r7, #8]
 80010e4:	6978      	ldr	r0, [r7, #20]
 80010e6:	f7ff ffb1 	bl	800104c <NVIC_EncodePriority>
 80010ea:	4602      	mov	r2, r0
 80010ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f0:	4611      	mov	r1, r2
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ff80 	bl	8000ff8 <__NVIC_SetPriority>
}
 80010f8:	bf00      	nop
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff54 	bl	8000fbc <__NVIC_EnableIRQ>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	@ 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
 8001136:	e16b      	b.n	8001410 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001138:	2201      	movs	r2, #1
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	429a      	cmp	r2, r3
 8001152:	f040 815a 	bne.w	800140a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	2b01      	cmp	r3, #1
 8001160:	d005      	beq.n	800116e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800116a:	2b02      	cmp	r3, #2
 800116c:	d130      	bne.n	80011d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	2203      	movs	r2, #3
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	68da      	ldr	r2, [r3, #12]
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a4:	2201      	movs	r2, #1
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	091b      	lsrs	r3, r3, #4
 80011ba:	f003 0201 	and.w	r2, r3, #1
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	2b03      	cmp	r3, #3
 80011da:	d017      	beq.n	800120c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	2203      	movs	r2, #3
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d123      	bne.n	8001260 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	08da      	lsrs	r2, r3, #3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3208      	adds	r2, #8
 8001220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	220f      	movs	r2, #15
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	691a      	ldr	r2, [r3, #16]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	08da      	lsrs	r2, r3, #3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3208      	adds	r2, #8
 800125a:	69b9      	ldr	r1, [r7, #24]
 800125c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	2203      	movs	r2, #3
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 0203 	and.w	r2, r3, #3
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 80b4 	beq.w	800140a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b60      	ldr	r3, [pc, #384]	@ (8001428 <HAL_GPIO_Init+0x30c>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012aa:	4a5f      	ldr	r2, [pc, #380]	@ (8001428 <HAL_GPIO_Init+0x30c>)
 80012ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012b2:	4b5d      	ldr	r3, [pc, #372]	@ (8001428 <HAL_GPIO_Init+0x30c>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012be:	4a5b      	ldr	r2, [pc, #364]	@ (800142c <HAL_GPIO_Init+0x310>)
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	089b      	lsrs	r3, r3, #2
 80012c4:	3302      	adds	r3, #2
 80012c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	220f      	movs	r2, #15
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a52      	ldr	r2, [pc, #328]	@ (8001430 <HAL_GPIO_Init+0x314>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d02b      	beq.n	8001342 <HAL_GPIO_Init+0x226>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a51      	ldr	r2, [pc, #324]	@ (8001434 <HAL_GPIO_Init+0x318>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d025      	beq.n	800133e <HAL_GPIO_Init+0x222>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a50      	ldr	r2, [pc, #320]	@ (8001438 <HAL_GPIO_Init+0x31c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d01f      	beq.n	800133a <HAL_GPIO_Init+0x21e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4f      	ldr	r2, [pc, #316]	@ (800143c <HAL_GPIO_Init+0x320>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d019      	beq.n	8001336 <HAL_GPIO_Init+0x21a>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4e      	ldr	r2, [pc, #312]	@ (8001440 <HAL_GPIO_Init+0x324>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d013      	beq.n	8001332 <HAL_GPIO_Init+0x216>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4d      	ldr	r2, [pc, #308]	@ (8001444 <HAL_GPIO_Init+0x328>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d00d      	beq.n	800132e <HAL_GPIO_Init+0x212>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4c      	ldr	r2, [pc, #304]	@ (8001448 <HAL_GPIO_Init+0x32c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d007      	beq.n	800132a <HAL_GPIO_Init+0x20e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4b      	ldr	r2, [pc, #300]	@ (800144c <HAL_GPIO_Init+0x330>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d101      	bne.n	8001326 <HAL_GPIO_Init+0x20a>
 8001322:	2307      	movs	r3, #7
 8001324:	e00e      	b.n	8001344 <HAL_GPIO_Init+0x228>
 8001326:	2308      	movs	r3, #8
 8001328:	e00c      	b.n	8001344 <HAL_GPIO_Init+0x228>
 800132a:	2306      	movs	r3, #6
 800132c:	e00a      	b.n	8001344 <HAL_GPIO_Init+0x228>
 800132e:	2305      	movs	r3, #5
 8001330:	e008      	b.n	8001344 <HAL_GPIO_Init+0x228>
 8001332:	2304      	movs	r3, #4
 8001334:	e006      	b.n	8001344 <HAL_GPIO_Init+0x228>
 8001336:	2303      	movs	r3, #3
 8001338:	e004      	b.n	8001344 <HAL_GPIO_Init+0x228>
 800133a:	2302      	movs	r3, #2
 800133c:	e002      	b.n	8001344 <HAL_GPIO_Init+0x228>
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <HAL_GPIO_Init+0x228>
 8001342:	2300      	movs	r3, #0
 8001344:	69fa      	ldr	r2, [r7, #28]
 8001346:	f002 0203 	and.w	r2, r2, #3
 800134a:	0092      	lsls	r2, r2, #2
 800134c:	4093      	lsls	r3, r2
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001354:	4935      	ldr	r1, [pc, #212]	@ (800142c <HAL_GPIO_Init+0x310>)
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	089b      	lsrs	r3, r3, #2
 800135a:	3302      	adds	r3, #2
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001362:	4b3b      	ldr	r3, [pc, #236]	@ (8001450 <HAL_GPIO_Init+0x334>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001386:	4a32      	ldr	r2, [pc, #200]	@ (8001450 <HAL_GPIO_Init+0x334>)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800138c:	4b30      	ldr	r3, [pc, #192]	@ (8001450 <HAL_GPIO_Init+0x334>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013b0:	4a27      	ldr	r2, [pc, #156]	@ (8001450 <HAL_GPIO_Init+0x334>)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013b6:	4b26      	ldr	r3, [pc, #152]	@ (8001450 <HAL_GPIO_Init+0x334>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013da:	4a1d      	ldr	r2, [pc, #116]	@ (8001450 <HAL_GPIO_Init+0x334>)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001450 <HAL_GPIO_Init+0x334>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001404:	4a12      	ldr	r2, [pc, #72]	@ (8001450 <HAL_GPIO_Init+0x334>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3301      	adds	r3, #1
 800140e:	61fb      	str	r3, [r7, #28]
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	2b0f      	cmp	r3, #15
 8001414:	f67f ae90 	bls.w	8001138 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3724      	adds	r7, #36	@ 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800
 800142c:	40013800 	.word	0x40013800
 8001430:	40020000 	.word	0x40020000
 8001434:	40020400 	.word	0x40020400
 8001438:	40020800 	.word	0x40020800
 800143c:	40020c00 	.word	0x40020c00
 8001440:	40021000 	.word	0x40021000
 8001444:	40021400 	.word	0x40021400
 8001448:	40021800 	.word	0x40021800
 800144c:	40021c00 	.word	0x40021c00
 8001450:	40013c00 	.word	0x40013c00

08001454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
 8001460:	4613      	mov	r3, r2
 8001462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001464:	787b      	ldrb	r3, [r7, #1]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800146a:	887a      	ldrh	r2, [r7, #2]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001470:	e003      	b.n	800147a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001472:	887b      	ldrh	r3, [r7, #2]
 8001474:	041a      	lsls	r2, r3, #16
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	619a      	str	r2, [r3, #24]
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001486:	b480      	push	{r7}
 8001488:	b085      	sub	sp, #20
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	460b      	mov	r3, r1
 8001490:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001498:	887a      	ldrh	r2, [r7, #2]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4013      	ands	r3, r2
 800149e:	041a      	lsls	r2, r3, #16
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	43d9      	mvns	r1, r3
 80014a4:	887b      	ldrh	r3, [r7, #2]
 80014a6:	400b      	ands	r3, r1
 80014a8:	431a      	orrs	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	619a      	str	r2, [r3, #24]
}
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f003 fd89 	bl	8004fe8 <USB_GetMode>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b01      	cmp	r3, #1
 80014da:	f040 80fb 	bne.w	80016d4 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f003 fd4c 	bl	8004f80 <USB_ReadInterrupts>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 80f1 	beq.w	80016d2 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f003 fd43 	bl	8004f80 <USB_ReadInterrupts>
 80014fa:	4603      	mov	r3, r0
 80014fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001500:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001504:	d104      	bne.n	8001510 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800150e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f003 fd33 	bl	8004f80 <USB_ReadInterrupts>
 800151a:	4603      	mov	r3, r0
 800151c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001520:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001524:	d104      	bne.n	8001530 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800152e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f003 fd23 	bl	8004f80 <USB_ReadInterrupts>
 800153a:	4603      	mov	r3, r0
 800153c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001540:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001544:	d104      	bne.n	8001550 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800154e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f003 fd13 	bl	8004f80 <USB_ReadInterrupts>
 800155a:	4603      	mov	r3, r0
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b02      	cmp	r3, #2
 8001562:	d103      	bne.n	800156c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2202      	movs	r2, #2
 800156a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f003 fd05 	bl	8004f80 <USB_ReadInterrupts>
 8001576:	4603      	mov	r3, r0
 8001578:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800157c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001580:	d120      	bne.n	80015c4 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800158a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	d113      	bne.n	80015c4 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800159c:	2110      	movs	r1, #16
 800159e:	6938      	ldr	r0, [r7, #16]
 80015a0:	f003 fc36 	bl	8004e10 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80015a4:	6938      	ldr	r0, [r7, #16]
 80015a6:	f003 fc65 	bl	8004e74 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	7a5b      	ldrb	r3, [r3, #9]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d105      	bne.n	80015be <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2101      	movs	r1, #1
 80015b8:	4618      	mov	r0, r3
 80015ba:	f003 fd23 	bl	8005004 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f006 fd2e 	bl	8008020 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f003 fcd9 	bl	8004f80 <USB_ReadInterrupts>
 80015ce:	4603      	mov	r3, r0
 80015d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80015d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015d8:	d102      	bne.n	80015e0 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f001 fc87 	bl	8002eee <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f003 fccb 	bl	8004f80 <USB_ReadInterrupts>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b08      	cmp	r3, #8
 80015f2:	d106      	bne.n	8001602 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f006 fcf7 	bl	8007fe8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2208      	movs	r2, #8
 8001600:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f003 fcba 	bl	8004f80 <USB_ReadInterrupts>
 800160c:	4603      	mov	r3, r0
 800160e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001612:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001616:	d139      	bne.n	800168c <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f003 fd2e 	bl	800507e <USB_HC_ReadInterrupt>
 8001622:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	e025      	b.n	8001676 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f003 030f 	and.w	r3, r3, #15
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	fa22 f303 	lsr.w	r3, r2, r3
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d018      	beq.n	8001670 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	015a      	lsls	r2, r3, #5
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4413      	add	r3, r2
 8001646:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001650:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001654:	d106      	bne.n	8001664 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	4619      	mov	r1, r3
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f000 f859 	bl	8001714 <HCD_HC_IN_IRQHandler>
 8001662:	e005      	b.n	8001670 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	b2db      	uxtb	r3, r3
 8001668:	4619      	mov	r1, r3
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 febb 	bl	80023e6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	3301      	adds	r3, #1
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	795b      	ldrb	r3, [r3, #5]
 800167a:	461a      	mov	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	4293      	cmp	r3, r2
 8001680:	d3d3      	bcc.n	800162a <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800168a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f003 fc75 	bl	8004f80 <USB_ReadInterrupts>
 8001696:	4603      	mov	r3, r0
 8001698:	f003 0310 	and.w	r3, r3, #16
 800169c:	2b10      	cmp	r3, #16
 800169e:	d101      	bne.n	80016a4 <HAL_HCD_IRQHandler+0x1ea>
 80016a0:	2301      	movs	r3, #1
 80016a2:	e000      	b.n	80016a6 <HAL_HCD_IRQHandler+0x1ec>
 80016a4:	2300      	movs	r3, #0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d014      	beq.n	80016d4 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	699a      	ldr	r2, [r3, #24]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0210 	bic.w	r2, r2, #16
 80016b8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f001 fb38 	bl	8002d30 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	699a      	ldr	r2, [r3, #24]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0210 	orr.w	r2, r2, #16
 80016ce:	619a      	str	r2, [r3, #24]
 80016d0:	e000      	b.n	80016d4 <HAL_HCD_IRQHandler+0x21a>
      return;
 80016d2:	bf00      	nop
    }
  }
}
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d101      	bne.n	80016f0 <HAL_HCD_Stop+0x16>
 80016ec:	2302      	movs	r3, #2
 80016ee:	e00d      	b.n	800170c <HAL_HCD_Stop+0x32>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f003 fdef 	bl	80052e0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	78fa      	ldrb	r2, [r7, #3]
 8001730:	4611      	mov	r1, r2
 8001732:	4618      	mov	r0, r3
 8001734:	f003 fc37 	bl	8004fa6 <USB_ReadChInterrupts>
 8001738:	4603      	mov	r3, r0
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	2b04      	cmp	r3, #4
 8001740:	d11a      	bne.n	8001778 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001742:	78fb      	ldrb	r3, [r7, #3]
 8001744:	015a      	lsls	r2, r3, #5
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	4413      	add	r3, r2
 800174a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800174e:	461a      	mov	r2, r3
 8001750:	2304      	movs	r3, #4
 8001752:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001754:	78fa      	ldrb	r2, [r7, #3]
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	4613      	mov	r3, r2
 800175a:	011b      	lsls	r3, r3, #4
 800175c:	1a9b      	subs	r3, r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	440b      	add	r3, r1
 8001762:	334d      	adds	r3, #77	@ 0x4d
 8001764:	2207      	movs	r2, #7
 8001766:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	78fa      	ldrb	r2, [r7, #3]
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f003 fc95 	bl	80050a0 <USB_HC_Halt>
 8001776:	e09e      	b.n	80018b6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	78fa      	ldrb	r2, [r7, #3]
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f003 fc10 	bl	8004fa6 <USB_ReadChInterrupts>
 8001786:	4603      	mov	r3, r0
 8001788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800178c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001790:	d11b      	bne.n	80017ca <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	015a      	lsls	r2, r3, #5
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4413      	add	r3, r2
 800179a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800179e:	461a      	mov	r2, r3
 80017a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80017a6:	78fa      	ldrb	r2, [r7, #3]
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	011b      	lsls	r3, r3, #4
 80017ae:	1a9b      	subs	r3, r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	440b      	add	r3, r1
 80017b4:	334d      	adds	r3, #77	@ 0x4d
 80017b6:	2208      	movs	r2, #8
 80017b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	78fa      	ldrb	r2, [r7, #3]
 80017c0:	4611      	mov	r1, r2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f003 fc6c 	bl	80050a0 <USB_HC_Halt>
 80017c8:	e075      	b.n	80018b6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	78fa      	ldrb	r2, [r7, #3]
 80017d0:	4611      	mov	r1, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f003 fbe7 	bl	8004fa6 <USB_ReadChInterrupts>
 80017d8:	4603      	mov	r3, r0
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b08      	cmp	r3, #8
 80017e0:	d11a      	bne.n	8001818 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	015a      	lsls	r2, r3, #5
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	4413      	add	r3, r2
 80017ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80017ee:	461a      	mov	r2, r3
 80017f0:	2308      	movs	r3, #8
 80017f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80017f4:	78fa      	ldrb	r2, [r7, #3]
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	011b      	lsls	r3, r3, #4
 80017fc:	1a9b      	subs	r3, r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	334d      	adds	r3, #77	@ 0x4d
 8001804:	2206      	movs	r2, #6
 8001806:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	78fa      	ldrb	r2, [r7, #3]
 800180e:	4611      	mov	r1, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f003 fc45 	bl	80050a0 <USB_HC_Halt>
 8001816:	e04e      	b.n	80018b6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	78fa      	ldrb	r2, [r7, #3]
 800181e:	4611      	mov	r1, r2
 8001820:	4618      	mov	r0, r3
 8001822:	f003 fbc0 	bl	8004fa6 <USB_ReadChInterrupts>
 8001826:	4603      	mov	r3, r0
 8001828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800182c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001830:	d11b      	bne.n	800186a <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001832:	78fb      	ldrb	r3, [r7, #3]
 8001834:	015a      	lsls	r2, r3, #5
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	4413      	add	r3, r2
 800183a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800183e:	461a      	mov	r2, r3
 8001840:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001844:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001846:	78fa      	ldrb	r2, [r7, #3]
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	1a9b      	subs	r3, r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	440b      	add	r3, r1
 8001854:	334d      	adds	r3, #77	@ 0x4d
 8001856:	2209      	movs	r2, #9
 8001858:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	78fa      	ldrb	r2, [r7, #3]
 8001860:	4611      	mov	r1, r2
 8001862:	4618      	mov	r0, r3
 8001864:	f003 fc1c 	bl	80050a0 <USB_HC_Halt>
 8001868:	e025      	b.n	80018b6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	78fa      	ldrb	r2, [r7, #3]
 8001870:	4611      	mov	r1, r2
 8001872:	4618      	mov	r0, r3
 8001874:	f003 fb97 	bl	8004fa6 <USB_ReadChInterrupts>
 8001878:	4603      	mov	r3, r0
 800187a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800187e:	2b80      	cmp	r3, #128	@ 0x80
 8001880:	d119      	bne.n	80018b6 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	015a      	lsls	r2, r3, #5
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4413      	add	r3, r2
 800188a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800188e:	461a      	mov	r2, r3
 8001890:	2380      	movs	r3, #128	@ 0x80
 8001892:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001894:	78fa      	ldrb	r2, [r7, #3]
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	1a9b      	subs	r3, r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	334d      	adds	r3, #77	@ 0x4d
 80018a4:	2207      	movs	r2, #7
 80018a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	78fa      	ldrb	r2, [r7, #3]
 80018ae:	4611      	mov	r1, r2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f003 fbf5 	bl	80050a0 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	78fa      	ldrb	r2, [r7, #3]
 80018bc:	4611      	mov	r1, r2
 80018be:	4618      	mov	r0, r3
 80018c0:	f003 fb71 	bl	8004fa6 <USB_ReadChInterrupts>
 80018c4:	4603      	mov	r3, r0
 80018c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018ce:	d112      	bne.n	80018f6 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	78fa      	ldrb	r2, [r7, #3]
 80018d6:	4611      	mov	r1, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f003 fbe1 	bl	80050a0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80018de:	78fb      	ldrb	r3, [r7, #3]
 80018e0:	015a      	lsls	r2, r3, #5
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4413      	add	r3, r2
 80018e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80018ea:	461a      	mov	r2, r3
 80018ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018f0:	6093      	str	r3, [r2, #8]
 80018f2:	f000 bd75 	b.w	80023e0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	78fa      	ldrb	r2, [r7, #3]
 80018fc:	4611      	mov	r1, r2
 80018fe:	4618      	mov	r0, r3
 8001900:	f003 fb51 	bl	8004fa6 <USB_ReadChInterrupts>
 8001904:	4603      	mov	r3, r0
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b01      	cmp	r3, #1
 800190c:	f040 8128 	bne.w	8001b60 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001910:	78fb      	ldrb	r3, [r7, #3]
 8001912:	015a      	lsls	r2, r3, #5
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	4413      	add	r3, r2
 8001918:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800191c:	461a      	mov	r2, r3
 800191e:	2320      	movs	r3, #32
 8001920:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001922:	78fa      	ldrb	r2, [r7, #3]
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	011b      	lsls	r3, r3, #4
 800192a:	1a9b      	subs	r3, r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	331b      	adds	r3, #27
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d119      	bne.n	800196c <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001938:	78fa      	ldrb	r2, [r7, #3]
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	1a9b      	subs	r3, r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	331b      	adds	r3, #27
 8001948:	2200      	movs	r2, #0
 800194a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	015a      	lsls	r2, r3, #5
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	4413      	add	r3, r2
 8001954:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	78fa      	ldrb	r2, [r7, #3]
 800195c:	0151      	lsls	r1, r2, #5
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	440a      	add	r2, r1
 8001962:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001966:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800196a:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	799b      	ldrb	r3, [r3, #6]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d01b      	beq.n	80019ac <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001974:	78fa      	ldrb	r2, [r7, #3]
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	011b      	lsls	r3, r3, #4
 800197c:	1a9b      	subs	r3, r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	3330      	adds	r3, #48	@ 0x30
 8001984:	6819      	ldr	r1, [r3, #0]
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	015a      	lsls	r2, r3, #5
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4413      	add	r3, r2
 800198e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001998:	78fa      	ldrb	r2, [r7, #3]
 800199a:	1ac9      	subs	r1, r1, r3
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	011b      	lsls	r3, r3, #4
 80019a2:	1a9b      	subs	r3, r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4403      	add	r3, r0
 80019a8:	3338      	adds	r3, #56	@ 0x38
 80019aa:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80019ac:	78fa      	ldrb	r2, [r7, #3]
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	011b      	lsls	r3, r3, #4
 80019b4:	1a9b      	subs	r3, r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	334d      	adds	r3, #77	@ 0x4d
 80019bc:	2201      	movs	r2, #1
 80019be:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80019c0:	78fa      	ldrb	r2, [r7, #3]
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	011b      	lsls	r3, r3, #4
 80019c8:	1a9b      	subs	r3, r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	440b      	add	r3, r1
 80019ce:	3344      	adds	r3, #68	@ 0x44
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	015a      	lsls	r2, r3, #5
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	4413      	add	r3, r2
 80019dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80019e0:	461a      	mov	r2, r3
 80019e2:	2301      	movs	r3, #1
 80019e4:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80019e6:	78fa      	ldrb	r2, [r7, #3]
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	1a9b      	subs	r3, r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	3326      	adds	r3, #38	@ 0x26
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00a      	beq.n	8001a12 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80019fc:	78fa      	ldrb	r2, [r7, #3]
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	1a9b      	subs	r3, r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	3326      	adds	r3, #38	@ 0x26
 8001a0c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d110      	bne.n	8001a34 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	78fa      	ldrb	r2, [r7, #3]
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f003 fb40 	bl	80050a0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	015a      	lsls	r2, r3, #5
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	4413      	add	r3, r2
 8001a28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	2310      	movs	r3, #16
 8001a30:	6093      	str	r3, [r2, #8]
 8001a32:	e03d      	b.n	8001ab0 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001a34:	78fa      	ldrb	r2, [r7, #3]
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	1a9b      	subs	r3, r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	3326      	adds	r3, #38	@ 0x26
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d00a      	beq.n	8001a60 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001a4a:	78fa      	ldrb	r2, [r7, #3]
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	011b      	lsls	r3, r3, #4
 8001a52:	1a9b      	subs	r3, r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	3326      	adds	r3, #38	@ 0x26
 8001a5a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d127      	bne.n	8001ab0 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001a60:	78fb      	ldrb	r3, [r7, #3]
 8001a62:	015a      	lsls	r2, r3, #5
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4413      	add	r3, r2
 8001a68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	78fa      	ldrb	r2, [r7, #3]
 8001a70:	0151      	lsls	r1, r2, #5
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	440a      	add	r2, r1
 8001a76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001a7a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001a7e:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001a80:	78fa      	ldrb	r2, [r7, #3]
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	1a9b      	subs	r3, r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	334c      	adds	r3, #76	@ 0x4c
 8001a90:	2201      	movs	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001a94:	78fa      	ldrb	r2, [r7, #3]
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	1a9b      	subs	r3, r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	334c      	adds	r3, #76	@ 0x4c
 8001aa4:	781a      	ldrb	r2, [r3, #0]
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f006 fac6 	bl	800803c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	799b      	ldrb	r3, [r3, #6]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d13b      	bne.n	8001b30 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001ab8:	78fa      	ldrb	r2, [r7, #3]
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	1a9b      	subs	r3, r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	3338      	adds	r3, #56	@ 0x38
 8001ac8:	6819      	ldr	r1, [r3, #0]
 8001aca:	78fa      	ldrb	r2, [r7, #3]
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	011b      	lsls	r3, r3, #4
 8001ad2:	1a9b      	subs	r3, r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4403      	add	r3, r0
 8001ad8:	3328      	adds	r3, #40	@ 0x28
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	440b      	add	r3, r1
 8001ade:	1e59      	subs	r1, r3, #1
 8001ae0:	78fa      	ldrb	r2, [r7, #3]
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	1a9b      	subs	r3, r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4403      	add	r3, r0
 8001aee:	3328      	adds	r3, #40	@ 0x28
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8470 	beq.w	80023e0 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001b00:	78fa      	ldrb	r2, [r7, #3]
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	011b      	lsls	r3, r3, #4
 8001b08:	1a9b      	subs	r3, r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	333c      	adds	r3, #60	@ 0x3c
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	78fa      	ldrb	r2, [r7, #3]
 8001b14:	f083 0301 	eor.w	r3, r3, #1
 8001b18:	b2d8      	uxtb	r0, r3
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	011b      	lsls	r3, r3, #4
 8001b20:	1a9b      	subs	r3, r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	333c      	adds	r3, #60	@ 0x3c
 8001b28:	4602      	mov	r2, r0
 8001b2a:	701a      	strb	r2, [r3, #0]
 8001b2c:	f000 bc58 	b.w	80023e0 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001b30:	78fa      	ldrb	r2, [r7, #3]
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	1a9b      	subs	r3, r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	333c      	adds	r3, #60	@ 0x3c
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	78fa      	ldrb	r2, [r7, #3]
 8001b44:	f083 0301 	eor.w	r3, r3, #1
 8001b48:	b2d8      	uxtb	r0, r3
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	1a9b      	subs	r3, r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	333c      	adds	r3, #60	@ 0x3c
 8001b58:	4602      	mov	r2, r0
 8001b5a:	701a      	strb	r2, [r3, #0]
 8001b5c:	f000 bc40 	b.w	80023e0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	78fa      	ldrb	r2, [r7, #3]
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f003 fa1c 	bl	8004fa6 <USB_ReadChInterrupts>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f003 0320 	and.w	r3, r3, #32
 8001b74:	2b20      	cmp	r3, #32
 8001b76:	d131      	bne.n	8001bdc <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	015a      	lsls	r2, r3, #5
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	4413      	add	r3, r2
 8001b80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b84:	461a      	mov	r2, r3
 8001b86:	2320      	movs	r3, #32
 8001b88:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8001b8a:	78fa      	ldrb	r2, [r7, #3]
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	1a9b      	subs	r3, r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	331a      	adds	r3, #26
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	f040 841f 	bne.w	80023e0 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8001ba2:	78fa      	ldrb	r2, [r7, #3]
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	011b      	lsls	r3, r3, #4
 8001baa:	1a9b      	subs	r3, r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	440b      	add	r3, r1
 8001bb0:	331b      	adds	r3, #27
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001bb6:	78fa      	ldrb	r2, [r7, #3]
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	1a9b      	subs	r3, r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	334d      	adds	r3, #77	@ 0x4d
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	78fa      	ldrb	r2, [r7, #3]
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f003 fa64 	bl	80050a0 <USB_HC_Halt>
 8001bd8:	f000 bc02 	b.w	80023e0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	78fa      	ldrb	r2, [r7, #3]
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f003 f9de 	bl	8004fa6 <USB_ReadChInterrupts>
 8001bea:	4603      	mov	r3, r0
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	f040 8305 	bne.w	8002200 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001bf6:	78fb      	ldrb	r3, [r7, #3]
 8001bf8:	015a      	lsls	r2, r3, #5
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c02:	461a      	mov	r2, r3
 8001c04:	2302      	movs	r3, #2
 8001c06:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001c08:	78fa      	ldrb	r2, [r7, #3]
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	011b      	lsls	r3, r3, #4
 8001c10:	1a9b      	subs	r3, r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	334d      	adds	r3, #77	@ 0x4d
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d114      	bne.n	8001c48 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001c1e:	78fa      	ldrb	r2, [r7, #3]
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	011b      	lsls	r3, r3, #4
 8001c26:	1a9b      	subs	r3, r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	440b      	add	r3, r1
 8001c2c:	334d      	adds	r3, #77	@ 0x4d
 8001c2e:	2202      	movs	r2, #2
 8001c30:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001c32:	78fa      	ldrb	r2, [r7, #3]
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	011b      	lsls	r3, r3, #4
 8001c3a:	1a9b      	subs	r3, r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	440b      	add	r3, r1
 8001c40:	334c      	adds	r3, #76	@ 0x4c
 8001c42:	2201      	movs	r2, #1
 8001c44:	701a      	strb	r2, [r3, #0]
 8001c46:	e2cc      	b.n	80021e2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001c48:	78fa      	ldrb	r2, [r7, #3]
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	1a9b      	subs	r3, r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	334d      	adds	r3, #77	@ 0x4d
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b06      	cmp	r3, #6
 8001c5c:	d114      	bne.n	8001c88 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001c5e:	78fa      	ldrb	r2, [r7, #3]
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	011b      	lsls	r3, r3, #4
 8001c66:	1a9b      	subs	r3, r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	334d      	adds	r3, #77	@ 0x4d
 8001c6e:	2202      	movs	r2, #2
 8001c70:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8001c72:	78fa      	ldrb	r2, [r7, #3]
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	4613      	mov	r3, r2
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	1a9b      	subs	r3, r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	440b      	add	r3, r1
 8001c80:	334c      	adds	r3, #76	@ 0x4c
 8001c82:	2205      	movs	r2, #5
 8001c84:	701a      	strb	r2, [r3, #0]
 8001c86:	e2ac      	b.n	80021e2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001c88:	78fa      	ldrb	r2, [r7, #3]
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	011b      	lsls	r3, r3, #4
 8001c90:	1a9b      	subs	r3, r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	334d      	adds	r3, #77	@ 0x4d
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b07      	cmp	r3, #7
 8001c9c:	d00b      	beq.n	8001cb6 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001c9e:	78fa      	ldrb	r2, [r7, #3]
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	011b      	lsls	r3, r3, #4
 8001ca6:	1a9b      	subs	r3, r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	334d      	adds	r3, #77	@ 0x4d
 8001cae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001cb0:	2b09      	cmp	r3, #9
 8001cb2:	f040 80a6 	bne.w	8001e02 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001cb6:	78fa      	ldrb	r2, [r7, #3]
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	011b      	lsls	r3, r3, #4
 8001cbe:	1a9b      	subs	r3, r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	334d      	adds	r3, #77	@ 0x4d
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001cca:	78fa      	ldrb	r2, [r7, #3]
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	1a9b      	subs	r3, r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	3344      	adds	r3, #68	@ 0x44
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	1c59      	adds	r1, r3, #1
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	011b      	lsls	r3, r3, #4
 8001ce4:	1a9b      	subs	r3, r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4403      	add	r3, r0
 8001cea:	3344      	adds	r3, #68	@ 0x44
 8001cec:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001cee:	78fa      	ldrb	r2, [r7, #3]
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	011b      	lsls	r3, r3, #4
 8001cf6:	1a9b      	subs	r3, r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	3344      	adds	r3, #68	@ 0x44
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d943      	bls.n	8001d8c <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001d04:	78fa      	ldrb	r2, [r7, #3]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	1a9b      	subs	r3, r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	3344      	adds	r3, #68	@ 0x44
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8001d18:	78fa      	ldrb	r2, [r7, #3]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	011b      	lsls	r3, r3, #4
 8001d20:	1a9b      	subs	r3, r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	331a      	adds	r3, #26
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d123      	bne.n	8001d76 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8001d2e:	78fa      	ldrb	r2, [r7, #3]
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	1a9b      	subs	r3, r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	331b      	adds	r3, #27
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8001d42:	78fa      	ldrb	r2, [r7, #3]
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	011b      	lsls	r3, r3, #4
 8001d4a:	1a9b      	subs	r3, r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	440b      	add	r3, r1
 8001d50:	331c      	adds	r3, #28
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001d56:	78fb      	ldrb	r3, [r7, #3]
 8001d58:	015a      	lsls	r2, r3, #5
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	78fa      	ldrb	r2, [r7, #3]
 8001d66:	0151      	lsls	r1, r2, #5
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	440a      	add	r2, r1
 8001d6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001d70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d74:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001d76:	78fa      	ldrb	r2, [r7, #3]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	1a9b      	subs	r3, r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	334c      	adds	r3, #76	@ 0x4c
 8001d86:	2204      	movs	r2, #4
 8001d88:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001d8a:	e229      	b.n	80021e0 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001d8c:	78fa      	ldrb	r2, [r7, #3]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	334c      	adds	r3, #76	@ 0x4c
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001da0:	78fa      	ldrb	r2, [r7, #3]
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	011b      	lsls	r3, r3, #4
 8001da8:	1a9b      	subs	r3, r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	440b      	add	r3, r1
 8001dae:	3326      	adds	r3, #38	@ 0x26
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00b      	beq.n	8001dce <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001db6:	78fa      	ldrb	r2, [r7, #3]
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	011b      	lsls	r3, r3, #4
 8001dbe:	1a9b      	subs	r3, r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	3326      	adds	r3, #38	@ 0x26
 8001dc6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	f040 8209 	bne.w	80021e0 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	015a      	lsls	r2, r3, #5
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001de4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001dec:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	015a      	lsls	r2, r3, #5
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4413      	add	r3, r2
 8001df6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001e00:	e1ee      	b.n	80021e0 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8001e02:	78fa      	ldrb	r2, [r7, #3]
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	011b      	lsls	r3, r3, #4
 8001e0a:	1a9b      	subs	r3, r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	334d      	adds	r3, #77	@ 0x4d
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b05      	cmp	r3, #5
 8001e16:	f040 80c8 	bne.w	8001faa <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001e1a:	78fa      	ldrb	r2, [r7, #3]
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	011b      	lsls	r3, r3, #4
 8001e22:	1a9b      	subs	r3, r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	440b      	add	r3, r1
 8001e28:	334d      	adds	r3, #77	@ 0x4d
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001e2e:	78fa      	ldrb	r2, [r7, #3]
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	331b      	adds	r3, #27
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	f040 81ce 	bne.w	80021e2 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001e46:	78fa      	ldrb	r2, [r7, #3]
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	011b      	lsls	r3, r3, #4
 8001e4e:	1a9b      	subs	r3, r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	440b      	add	r3, r1
 8001e54:	3326      	adds	r3, #38	@ 0x26
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d16b      	bne.n	8001f34 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8001e5c:	78fa      	ldrb	r2, [r7, #3]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	011b      	lsls	r3, r3, #4
 8001e64:	1a9b      	subs	r3, r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	3348      	adds	r3, #72	@ 0x48
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	1c59      	adds	r1, r3, #1
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	4613      	mov	r3, r2
 8001e74:	011b      	lsls	r3, r3, #4
 8001e76:	1a9b      	subs	r3, r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4403      	add	r3, r0
 8001e7c:	3348      	adds	r3, #72	@ 0x48
 8001e7e:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8001e80:	78fa      	ldrb	r2, [r7, #3]
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	1a9b      	subs	r3, r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	3348      	adds	r3, #72	@ 0x48
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d943      	bls.n	8001f1e <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8001e96:	78fa      	ldrb	r2, [r7, #3]
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	011b      	lsls	r3, r3, #4
 8001e9e:	1a9b      	subs	r3, r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	3348      	adds	r3, #72	@ 0x48
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8001eaa:	78fa      	ldrb	r2, [r7, #3]
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	011b      	lsls	r3, r3, #4
 8001eb2:	1a9b      	subs	r3, r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	331b      	adds	r3, #27
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8001ebe:	78fa      	ldrb	r2, [r7, #3]
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	1a9b      	subs	r3, r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	3344      	adds	r3, #68	@ 0x44
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d809      	bhi.n	8001ee8 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8001ed4:	78fa      	ldrb	r2, [r7, #3]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	1a9b      	subs	r3, r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	331c      	adds	r3, #28
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	015a      	lsls	r2, r3, #5
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4413      	add	r3, r2
 8001ef0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	78fa      	ldrb	r2, [r7, #3]
 8001ef8:	0151      	lsls	r1, r2, #5
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	440a      	add	r2, r1
 8001efe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001f02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f06:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8001f08:	78fa      	ldrb	r2, [r7, #3]
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	1a9b      	subs	r3, r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	334c      	adds	r3, #76	@ 0x4c
 8001f18:	2204      	movs	r2, #4
 8001f1a:	701a      	strb	r2, [r3, #0]
 8001f1c:	e014      	b.n	8001f48 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001f1e:	78fa      	ldrb	r2, [r7, #3]
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	011b      	lsls	r3, r3, #4
 8001f26:	1a9b      	subs	r3, r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	334c      	adds	r3, #76	@ 0x4c
 8001f2e:	2202      	movs	r2, #2
 8001f30:	701a      	strb	r2, [r3, #0]
 8001f32:	e009      	b.n	8001f48 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001f34:	78fa      	ldrb	r2, [r7, #3]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	1a9b      	subs	r3, r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	334c      	adds	r3, #76	@ 0x4c
 8001f44:	2202      	movs	r2, #2
 8001f46:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001f48:	78fa      	ldrb	r2, [r7, #3]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	1a9b      	subs	r3, r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	3326      	adds	r3, #38	@ 0x26
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00b      	beq.n	8001f76 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001f5e:	78fa      	ldrb	r2, [r7, #3]
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	1a9b      	subs	r3, r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	3326      	adds	r3, #38	@ 0x26
 8001f6e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	f040 8136 	bne.w	80021e2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	015a      	lsls	r2, r3, #5
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001f8c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001f94:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	015a      	lsls	r2, r3, #5
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6013      	str	r3, [r2, #0]
 8001fa8:	e11b      	b.n	80021e2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8001faa:	78fa      	ldrb	r2, [r7, #3]
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	1a9b      	subs	r3, r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	334d      	adds	r3, #77	@ 0x4d
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	f040 8081 	bne.w	80020c4 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001fc2:	78fa      	ldrb	r2, [r7, #3]
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	1a9b      	subs	r3, r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	334d      	adds	r3, #77	@ 0x4d
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001fd6:	78fa      	ldrb	r2, [r7, #3]
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	011b      	lsls	r3, r3, #4
 8001fde:	1a9b      	subs	r3, r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	331b      	adds	r3, #27
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	f040 80fa 	bne.w	80021e2 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001fee:	78fa      	ldrb	r2, [r7, #3]
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	1a9b      	subs	r3, r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	334c      	adds	r3, #76	@ 0x4c
 8001ffe:	2202      	movs	r2, #2
 8002000:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	015a      	lsls	r2, r3, #5
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4413      	add	r3, r2
 800200a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	78fa      	ldrb	r2, [r7, #3]
 8002012:	0151      	lsls	r1, r2, #5
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	440a      	add	r2, r1
 8002018:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800201c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002020:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002022:	78fb      	ldrb	r3, [r7, #3]
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4413      	add	r3, r2
 800202a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	78fa      	ldrb	r2, [r7, #3]
 8002032:	0151      	lsls	r1, r2, #5
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	440a      	add	r2, r1
 8002038:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800203c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002040:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002042:	78fb      	ldrb	r3, [r7, #3]
 8002044:	015a      	lsls	r2, r3, #5
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4413      	add	r3, r2
 800204a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	78fa      	ldrb	r2, [r7, #3]
 8002052:	0151      	lsls	r1, r2, #5
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	440a      	add	r2, r1
 8002058:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800205c:	f023 0320 	bic.w	r3, r3, #32
 8002060:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002062:	78fa      	ldrb	r2, [r7, #3]
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	1a9b      	subs	r3, r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	440b      	add	r3, r1
 8002070:	3326      	adds	r3, #38	@ 0x26
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00b      	beq.n	8002090 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002078:	78fa      	ldrb	r2, [r7, #3]
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	011b      	lsls	r3, r3, #4
 8002080:	1a9b      	subs	r3, r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	3326      	adds	r3, #38	@ 0x26
 8002088:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800208a:	2b02      	cmp	r3, #2
 800208c:	f040 80a9 	bne.w	80021e2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	015a      	lsls	r2, r3, #5
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4413      	add	r3, r2
 8002098:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80020a6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80020ae:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020bc:	461a      	mov	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e08e      	b.n	80021e2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80020c4:	78fa      	ldrb	r2, [r7, #3]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	1a9b      	subs	r3, r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	334d      	adds	r3, #77	@ 0x4d
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d143      	bne.n	8002162 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80020da:	78fa      	ldrb	r2, [r7, #3]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	011b      	lsls	r3, r3, #4
 80020e2:	1a9b      	subs	r3, r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	334d      	adds	r3, #77	@ 0x4d
 80020ea:	2202      	movs	r2, #2
 80020ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80020ee:	78fa      	ldrb	r2, [r7, #3]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	011b      	lsls	r3, r3, #4
 80020f6:	1a9b      	subs	r3, r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	334c      	adds	r3, #76	@ 0x4c
 80020fe:	2202      	movs	r2, #2
 8002100:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002102:	78fa      	ldrb	r2, [r7, #3]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	3326      	adds	r3, #38	@ 0x26
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00a      	beq.n	800212e <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002118:	78fa      	ldrb	r2, [r7, #3]
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	1a9b      	subs	r3, r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	3326      	adds	r3, #38	@ 0x26
 8002128:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800212a:	2b02      	cmp	r3, #2
 800212c:	d159      	bne.n	80021e2 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800212e:	78fb      	ldrb	r3, [r7, #3]
 8002130:	015a      	lsls	r2, r3, #5
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4413      	add	r3, r2
 8002136:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002144:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800214c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	015a      	lsls	r2, r3, #5
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4413      	add	r3, r2
 8002156:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800215a:	461a      	mov	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	e03f      	b.n	80021e2 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002162:	78fa      	ldrb	r2, [r7, #3]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	1a9b      	subs	r3, r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	334d      	adds	r3, #77	@ 0x4d
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b08      	cmp	r3, #8
 8002176:	d126      	bne.n	80021c6 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002178:	78fa      	ldrb	r2, [r7, #3]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	334d      	adds	r3, #77	@ 0x4d
 8002188:	2202      	movs	r2, #2
 800218a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	1a9b      	subs	r3, r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	3344      	adds	r3, #68	@ 0x44
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	1c59      	adds	r1, r3, #1
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	1a9b      	subs	r3, r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4403      	add	r3, r0
 80021ac:	3344      	adds	r3, #68	@ 0x44
 80021ae:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80021b0:	78fa      	ldrb	r2, [r7, #3]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	1a9b      	subs	r3, r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	334c      	adds	r3, #76	@ 0x4c
 80021c0:	2204      	movs	r2, #4
 80021c2:	701a      	strb	r2, [r3, #0]
 80021c4:	e00d      	b.n	80021e2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80021c6:	78fa      	ldrb	r2, [r7, #3]
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	011b      	lsls	r3, r3, #4
 80021ce:	1a9b      	subs	r3, r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	440b      	add	r3, r1
 80021d4:	334d      	adds	r3, #77	@ 0x4d
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	f000 8100 	beq.w	80023de <HCD_HC_IN_IRQHandler+0xcca>
 80021de:	e000      	b.n	80021e2 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80021e0:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80021e2:	78fa      	ldrb	r2, [r7, #3]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	334c      	adds	r3, #76	@ 0x4c
 80021f2:	781a      	ldrb	r2, [r3, #0]
 80021f4:	78fb      	ldrb	r3, [r7, #3]
 80021f6:	4619      	mov	r1, r3
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f005 ff1f 	bl	800803c <HAL_HCD_HC_NotifyURBChange_Callback>
 80021fe:	e0ef      	b.n	80023e0 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	78fa      	ldrb	r2, [r7, #3]
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f002 fecc 	bl	8004fa6 <USB_ReadChInterrupts>
 800220e:	4603      	mov	r3, r0
 8002210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002214:	2b40      	cmp	r3, #64	@ 0x40
 8002216:	d12f      	bne.n	8002278 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002218:	78fb      	ldrb	r3, [r7, #3]
 800221a:	015a      	lsls	r2, r3, #5
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4413      	add	r3, r2
 8002220:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002224:	461a      	mov	r2, r3
 8002226:	2340      	movs	r3, #64	@ 0x40
 8002228:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800222a:	78fa      	ldrb	r2, [r7, #3]
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	1a9b      	subs	r3, r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	440b      	add	r3, r1
 8002238:	334d      	adds	r3, #77	@ 0x4d
 800223a:	2205      	movs	r2, #5
 800223c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800223e:	78fa      	ldrb	r2, [r7, #3]
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	1a9b      	subs	r3, r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	440b      	add	r3, r1
 800224c:	331a      	adds	r3, #26
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d109      	bne.n	8002268 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002254:	78fa      	ldrb	r2, [r7, #3]
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	1a9b      	subs	r3, r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	3344      	adds	r3, #68	@ 0x44
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	78fa      	ldrb	r2, [r7, #3]
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f002 ff15 	bl	80050a0 <USB_HC_Halt>
 8002276:	e0b3      	b.n	80023e0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	4611      	mov	r1, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f002 fe90 	bl	8004fa6 <USB_ReadChInterrupts>
 8002286:	4603      	mov	r3, r0
 8002288:	f003 0310 	and.w	r3, r3, #16
 800228c:	2b10      	cmp	r3, #16
 800228e:	f040 80a7 	bne.w	80023e0 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002292:	78fa      	ldrb	r2, [r7, #3]
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	1a9b      	subs	r3, r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	440b      	add	r3, r1
 80022a0:	3326      	adds	r3, #38	@ 0x26
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d11b      	bne.n	80022e0 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80022a8:	78fa      	ldrb	r2, [r7, #3]
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	011b      	lsls	r3, r3, #4
 80022b0:	1a9b      	subs	r3, r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	3344      	adds	r3, #68	@ 0x44
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80022bc:	78fa      	ldrb	r2, [r7, #3]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	334d      	adds	r3, #77	@ 0x4d
 80022cc:	2204      	movs	r2, #4
 80022ce:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	78fa      	ldrb	r2, [r7, #3]
 80022d6:	4611      	mov	r1, r2
 80022d8:	4618      	mov	r0, r3
 80022da:	f002 fee1 	bl	80050a0 <USB_HC_Halt>
 80022de:	e03f      	b.n	8002360 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	3326      	adds	r3, #38	@ 0x26
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80022f6:	78fa      	ldrb	r2, [r7, #3]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	1a9b      	subs	r3, r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	3326      	adds	r3, #38	@ 0x26
 8002306:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002308:	2b02      	cmp	r3, #2
 800230a:	d129      	bne.n	8002360 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800230c:	78fa      	ldrb	r2, [r7, #3]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	3344      	adds	r3, #68	@ 0x44
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	799b      	ldrb	r3, [r3, #6]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00a      	beq.n	800233e <HCD_HC_IN_IRQHandler+0xc2a>
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	331b      	adds	r3, #27
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d110      	bne.n	8002360 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800233e:	78fa      	ldrb	r2, [r7, #3]
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	011b      	lsls	r3, r3, #4
 8002346:	1a9b      	subs	r3, r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	440b      	add	r3, r1
 800234c:	334d      	adds	r3, #77	@ 0x4d
 800234e:	2204      	movs	r2, #4
 8002350:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	78fa      	ldrb	r2, [r7, #3]
 8002358:	4611      	mov	r1, r2
 800235a:	4618      	mov	r0, r3
 800235c:	f002 fea0 	bl	80050a0 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002360:	78fa      	ldrb	r2, [r7, #3]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	331b      	adds	r3, #27
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d129      	bne.n	80023ca <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002376:	78fa      	ldrb	r2, [r7, #3]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	1a9b      	subs	r3, r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	331b      	adds	r3, #27
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800238a:	78fb      	ldrb	r3, [r7, #3]
 800238c:	015a      	lsls	r2, r3, #5
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4413      	add	r3, r2
 8002392:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	78fa      	ldrb	r2, [r7, #3]
 800239a:	0151      	lsls	r1, r2, #5
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	440a      	add	r2, r1
 80023a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80023a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023a8:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80023aa:	78fb      	ldrb	r3, [r7, #3]
 80023ac:	015a      	lsls	r2, r3, #5
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	78fa      	ldrb	r2, [r7, #3]
 80023ba:	0151      	lsls	r1, r2, #5
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	440a      	add	r2, r1
 80023c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80023c4:	f043 0320 	orr.w	r3, r3, #32
 80023c8:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80023ca:	78fb      	ldrb	r3, [r7, #3]
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023d6:	461a      	mov	r2, r3
 80023d8:	2310      	movs	r3, #16
 80023da:	6093      	str	r3, [r2, #8]
 80023dc:	e000      	b.n	80023e0 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80023de:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b086      	sub	sp, #24
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	460b      	mov	r3, r1
 80023f0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	78fa      	ldrb	r2, [r7, #3]
 8002402:	4611      	mov	r1, r2
 8002404:	4618      	mov	r0, r3
 8002406:	f002 fdce 	bl	8004fa6 <USB_ReadChInterrupts>
 800240a:	4603      	mov	r3, r0
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b04      	cmp	r3, #4
 8002412:	d11b      	bne.n	800244c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002414:	78fb      	ldrb	r3, [r7, #3]
 8002416:	015a      	lsls	r2, r3, #5
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4413      	add	r3, r2
 800241c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002420:	461a      	mov	r2, r3
 8002422:	2304      	movs	r3, #4
 8002424:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002426:	78fa      	ldrb	r2, [r7, #3]
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	1a9b      	subs	r3, r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	440b      	add	r3, r1
 8002434:	334d      	adds	r3, #77	@ 0x4d
 8002436:	2207      	movs	r2, #7
 8002438:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	78fa      	ldrb	r2, [r7, #3]
 8002440:	4611      	mov	r1, r2
 8002442:	4618      	mov	r0, r3
 8002444:	f002 fe2c 	bl	80050a0 <USB_HC_Halt>
 8002448:	f000 bc6f 	b.w	8002d2a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	78fa      	ldrb	r2, [r7, #3]
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f002 fda6 	bl	8004fa6 <USB_ReadChInterrupts>
 800245a:	4603      	mov	r3, r0
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	2b20      	cmp	r3, #32
 8002462:	f040 8082 	bne.w	800256a <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002466:	78fb      	ldrb	r3, [r7, #3]
 8002468:	015a      	lsls	r2, r3, #5
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4413      	add	r3, r2
 800246e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002472:	461a      	mov	r2, r3
 8002474:	2320      	movs	r3, #32
 8002476:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002478:	78fa      	ldrb	r2, [r7, #3]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	3319      	adds	r3, #25
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d124      	bne.n	80024d8 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800248e:	78fa      	ldrb	r2, [r7, #3]
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	1a9b      	subs	r3, r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	3319      	adds	r3, #25
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024a2:	78fa      	ldrb	r2, [r7, #3]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	1a9b      	subs	r3, r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	334c      	adds	r3, #76	@ 0x4c
 80024b2:	2202      	movs	r2, #2
 80024b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80024b6:	78fa      	ldrb	r2, [r7, #3]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	1a9b      	subs	r3, r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	334d      	adds	r3, #77	@ 0x4d
 80024c6:	2203      	movs	r2, #3
 80024c8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	4611      	mov	r1, r2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f002 fde4 	bl	80050a0 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80024d8:	78fa      	ldrb	r2, [r7, #3]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	331a      	adds	r3, #26
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	f040 841d 	bne.w	8002d2a <HCD_HC_OUT_IRQHandler+0x944>
 80024f0:	78fa      	ldrb	r2, [r7, #3]
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	331b      	adds	r3, #27
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	f040 8411 	bne.w	8002d2a <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002508:	78fa      	ldrb	r2, [r7, #3]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	3326      	adds	r3, #38	@ 0x26
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d009      	beq.n	8002532 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800251e:	78fa      	ldrb	r2, [r7, #3]
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	011b      	lsls	r3, r3, #4
 8002526:	1a9b      	subs	r3, r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	331b      	adds	r3, #27
 800252e:	2201      	movs	r2, #1
 8002530:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002532:	78fa      	ldrb	r2, [r7, #3]
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	1a9b      	subs	r3, r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	440b      	add	r3, r1
 8002540:	334d      	adds	r3, #77	@ 0x4d
 8002542:	2203      	movs	r2, #3
 8002544:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	78fa      	ldrb	r2, [r7, #3]
 800254c:	4611      	mov	r1, r2
 800254e:	4618      	mov	r0, r3
 8002550:	f002 fda6 	bl	80050a0 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	3344      	adds	r3, #68	@ 0x44
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	e3df      	b.n	8002d2a <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	78fa      	ldrb	r2, [r7, #3]
 8002570:	4611      	mov	r1, r2
 8002572:	4618      	mov	r0, r3
 8002574:	f002 fd17 	bl	8004fa6 <USB_ReadChInterrupts>
 8002578:	4603      	mov	r3, r0
 800257a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800257e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002582:	d111      	bne.n	80025a8 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	4413      	add	r3, r2
 800258c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002590:	461a      	mov	r2, r3
 8002592:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002596:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f002 fd7d 	bl	80050a0 <USB_HC_Halt>
 80025a6:	e3c0      	b.n	8002d2a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	78fa      	ldrb	r2, [r7, #3]
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f002 fcf8 	bl	8004fa6 <USB_ReadChInterrupts>
 80025b6:	4603      	mov	r3, r0
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d168      	bne.n	8002692 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80025c0:	78fa      	ldrb	r2, [r7, #3]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	1a9b      	subs	r3, r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	3344      	adds	r3, #68	@ 0x44
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	78fa      	ldrb	r2, [r7, #3]
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f002 fce2 	bl	8004fa6 <USB_ReadChInterrupts>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025e8:	2b40      	cmp	r3, #64	@ 0x40
 80025ea:	d112      	bne.n	8002612 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80025ec:	78fa      	ldrb	r2, [r7, #3]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	3319      	adds	r3, #25
 80025fc:	2201      	movs	r2, #1
 80025fe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002600:	78fb      	ldrb	r3, [r7, #3]
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4413      	add	r3, r2
 8002608:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800260c:	461a      	mov	r2, r3
 800260e:	2340      	movs	r3, #64	@ 0x40
 8002610:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002612:	78fa      	ldrb	r2, [r7, #3]
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	331b      	adds	r3, #27
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d019      	beq.n	800265c <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	331b      	adds	r3, #27
 8002638:	2200      	movs	r2, #0
 800263a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	015a      	lsls	r2, r3, #5
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4413      	add	r3, r2
 8002644:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	78fa      	ldrb	r2, [r7, #3]
 800264c:	0151      	lsls	r1, r2, #5
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	440a      	add	r2, r1
 8002652:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002656:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800265a:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800265c:	78fb      	ldrb	r3, [r7, #3]
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4413      	add	r3, r2
 8002664:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002668:	461a      	mov	r2, r3
 800266a:	2301      	movs	r3, #1
 800266c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800266e:	78fa      	ldrb	r2, [r7, #3]
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	1a9b      	subs	r3, r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	440b      	add	r3, r1
 800267c:	334d      	adds	r3, #77	@ 0x4d
 800267e:	2201      	movs	r2, #1
 8002680:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f002 fd08 	bl	80050a0 <USB_HC_Halt>
 8002690:	e34b      	b.n	8002d2a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	78fa      	ldrb	r2, [r7, #3]
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f002 fc83 	bl	8004fa6 <USB_ReadChInterrupts>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a6:	2b40      	cmp	r3, #64	@ 0x40
 80026a8:	d139      	bne.n	800271e <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80026aa:	78fa      	ldrb	r2, [r7, #3]
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	1a9b      	subs	r3, r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	440b      	add	r3, r1
 80026b8:	334d      	adds	r3, #77	@ 0x4d
 80026ba:	2205      	movs	r2, #5
 80026bc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80026be:	78fa      	ldrb	r2, [r7, #3]
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	1a9b      	subs	r3, r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	331a      	adds	r3, #26
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d109      	bne.n	80026e8 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80026d4:	78fa      	ldrb	r2, [r7, #3]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	1a9b      	subs	r3, r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	3319      	adds	r3, #25
 80026e4:	2201      	movs	r2, #1
 80026e6:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80026e8:	78fa      	ldrb	r2, [r7, #3]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	1a9b      	subs	r3, r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	3344      	adds	r3, #68	@ 0x44
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	78fa      	ldrb	r2, [r7, #3]
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f002 fccb 	bl	80050a0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800270a:	78fb      	ldrb	r3, [r7, #3]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4413      	add	r3, r2
 8002712:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002716:	461a      	mov	r2, r3
 8002718:	2340      	movs	r3, #64	@ 0x40
 800271a:	6093      	str	r3, [r2, #8]
 800271c:	e305      	b.n	8002d2a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	78fa      	ldrb	r2, [r7, #3]
 8002724:	4611      	mov	r1, r2
 8002726:	4618      	mov	r0, r3
 8002728:	f002 fc3d 	bl	8004fa6 <USB_ReadChInterrupts>
 800272c:	4603      	mov	r3, r0
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b08      	cmp	r3, #8
 8002734:	d11a      	bne.n	800276c <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002736:	78fb      	ldrb	r3, [r7, #3]
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4413      	add	r3, r2
 800273e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002742:	461a      	mov	r2, r3
 8002744:	2308      	movs	r3, #8
 8002746:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002748:	78fa      	ldrb	r2, [r7, #3]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	334d      	adds	r3, #77	@ 0x4d
 8002758:	2206      	movs	r2, #6
 800275a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	4611      	mov	r1, r2
 8002764:	4618      	mov	r0, r3
 8002766:	f002 fc9b 	bl	80050a0 <USB_HC_Halt>
 800276a:	e2de      	b.n	8002d2a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	78fa      	ldrb	r2, [r7, #3]
 8002772:	4611      	mov	r1, r2
 8002774:	4618      	mov	r0, r3
 8002776:	f002 fc16 	bl	8004fa6 <USB_ReadChInterrupts>
 800277a:	4603      	mov	r3, r0
 800277c:	f003 0310 	and.w	r3, r3, #16
 8002780:	2b10      	cmp	r3, #16
 8002782:	d144      	bne.n	800280e <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002784:	78fa      	ldrb	r2, [r7, #3]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	1a9b      	subs	r3, r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	3344      	adds	r3, #68	@ 0x44
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002798:	78fa      	ldrb	r2, [r7, #3]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	334d      	adds	r3, #77	@ 0x4d
 80027a8:	2204      	movs	r2, #4
 80027aa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80027ac:	78fa      	ldrb	r2, [r7, #3]
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	3319      	adds	r3, #25
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d114      	bne.n	80027ec <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80027c2:	78fa      	ldrb	r2, [r7, #3]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	1a9b      	subs	r3, r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	3318      	adds	r3, #24
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d109      	bne.n	80027ec <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80027d8:	78fa      	ldrb	r2, [r7, #3]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	3319      	adds	r3, #25
 80027e8:	2201      	movs	r2, #1
 80027ea:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	4611      	mov	r1, r2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f002 fc53 	bl	80050a0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4413      	add	r3, r2
 8002802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002806:	461a      	mov	r2, r3
 8002808:	2310      	movs	r3, #16
 800280a:	6093      	str	r3, [r2, #8]
 800280c:	e28d      	b.n	8002d2a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	78fa      	ldrb	r2, [r7, #3]
 8002814:	4611      	mov	r1, r2
 8002816:	4618      	mov	r0, r3
 8002818:	f002 fbc5 	bl	8004fa6 <USB_ReadChInterrupts>
 800281c:	4603      	mov	r3, r0
 800281e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002822:	2b80      	cmp	r3, #128	@ 0x80
 8002824:	d169      	bne.n	80028fa <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	799b      	ldrb	r3, [r3, #6]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d111      	bne.n	8002852 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800282e:	78fa      	ldrb	r2, [r7, #3]
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	1a9b      	subs	r3, r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	334d      	adds	r3, #77	@ 0x4d
 800283e:	2207      	movs	r2, #7
 8002840:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	78fa      	ldrb	r2, [r7, #3]
 8002848:	4611      	mov	r1, r2
 800284a:	4618      	mov	r0, r3
 800284c:	f002 fc28 	bl	80050a0 <USB_HC_Halt>
 8002850:	e049      	b.n	80028e6 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002852:	78fa      	ldrb	r2, [r7, #3]
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	1a9b      	subs	r3, r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	3344      	adds	r3, #68	@ 0x44
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	1c59      	adds	r1, r3, #1
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	1a9b      	subs	r3, r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4403      	add	r3, r0
 8002872:	3344      	adds	r3, #68	@ 0x44
 8002874:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002876:	78fa      	ldrb	r2, [r7, #3]
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	1a9b      	subs	r3, r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	3344      	adds	r3, #68	@ 0x44
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d922      	bls.n	80028d2 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	3344      	adds	r3, #68	@ 0x44
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	334c      	adds	r3, #76	@ 0x4c
 80028b0:	2204      	movs	r2, #4
 80028b2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80028b4:	78fa      	ldrb	r2, [r7, #3]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	1a9b      	subs	r3, r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	334c      	adds	r3, #76	@ 0x4c
 80028c4:	781a      	ldrb	r2, [r3, #0]
 80028c6:	78fb      	ldrb	r3, [r7, #3]
 80028c8:	4619      	mov	r1, r3
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f005 fbb6 	bl	800803c <HAL_HCD_HC_NotifyURBChange_Callback>
 80028d0:	e009      	b.n	80028e6 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80028d2:	78fa      	ldrb	r2, [r7, #3]
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	1a9b      	subs	r3, r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	334c      	adds	r3, #76	@ 0x4c
 80028e2:	2202      	movs	r2, #2
 80028e4:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80028e6:	78fb      	ldrb	r3, [r7, #3]
 80028e8:	015a      	lsls	r2, r3, #5
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	4413      	add	r3, r2
 80028ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028f2:	461a      	mov	r2, r3
 80028f4:	2380      	movs	r3, #128	@ 0x80
 80028f6:	6093      	str	r3, [r2, #8]
 80028f8:	e217      	b.n	8002d2a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	78fa      	ldrb	r2, [r7, #3]
 8002900:	4611      	mov	r1, r2
 8002902:	4618      	mov	r0, r3
 8002904:	f002 fb4f 	bl	8004fa6 <USB_ReadChInterrupts>
 8002908:	4603      	mov	r3, r0
 800290a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800290e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002912:	d11b      	bne.n	800294c <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	334d      	adds	r3, #77	@ 0x4d
 8002924:	2209      	movs	r2, #9
 8002926:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	78fa      	ldrb	r2, [r7, #3]
 800292e:	4611      	mov	r1, r2
 8002930:	4618      	mov	r0, r3
 8002932:	f002 fbb5 	bl	80050a0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002936:	78fb      	ldrb	r3, [r7, #3]
 8002938:	015a      	lsls	r2, r3, #5
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4413      	add	r3, r2
 800293e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002942:	461a      	mov	r2, r3
 8002944:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002948:	6093      	str	r3, [r2, #8]
 800294a:	e1ee      	b.n	8002d2a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	78fa      	ldrb	r2, [r7, #3]
 8002952:	4611      	mov	r1, r2
 8002954:	4618      	mov	r0, r3
 8002956:	f002 fb26 	bl	8004fa6 <USB_ReadChInterrupts>
 800295a:	4603      	mov	r3, r0
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b02      	cmp	r3, #2
 8002962:	f040 81df 	bne.w	8002d24 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002966:	78fb      	ldrb	r3, [r7, #3]
 8002968:	015a      	lsls	r2, r3, #5
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4413      	add	r3, r2
 800296e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002972:	461a      	mov	r2, r3
 8002974:	2302      	movs	r3, #2
 8002976:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	334d      	adds	r3, #77	@ 0x4d
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b01      	cmp	r3, #1
 800298c:	f040 8093 	bne.w	8002ab6 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002990:	78fa      	ldrb	r2, [r7, #3]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	334d      	adds	r3, #77	@ 0x4d
 80029a0:	2202      	movs	r2, #2
 80029a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80029a4:	78fa      	ldrb	r2, [r7, #3]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	1a9b      	subs	r3, r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	334c      	adds	r3, #76	@ 0x4c
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80029b8:	78fa      	ldrb	r2, [r7, #3]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	3326      	adds	r3, #38	@ 0x26
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d00b      	beq.n	80029e6 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80029ce:	78fa      	ldrb	r2, [r7, #3]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	1a9b      	subs	r3, r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	3326      	adds	r3, #38	@ 0x26
 80029de:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	f040 8190 	bne.w	8002d06 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	799b      	ldrb	r3, [r3, #6]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d115      	bne.n	8002a1a <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80029ee:	78fa      	ldrb	r2, [r7, #3]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	1a9b      	subs	r3, r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	333d      	adds	r3, #61	@ 0x3d
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	78fa      	ldrb	r2, [r7, #3]
 8002a02:	f083 0301 	eor.w	r3, r3, #1
 8002a06:	b2d8      	uxtb	r0, r3
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	333d      	adds	r3, #61	@ 0x3d
 8002a16:	4602      	mov	r2, r0
 8002a18:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	799b      	ldrb	r3, [r3, #6]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	f040 8171 	bne.w	8002d06 <HCD_HC_OUT_IRQHandler+0x920>
 8002a24:	78fa      	ldrb	r2, [r7, #3]
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	1a9b      	subs	r3, r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	3334      	adds	r3, #52	@ 0x34
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 8165 	beq.w	8002d06 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002a3c:	78fa      	ldrb	r2, [r7, #3]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	1a9b      	subs	r3, r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	3334      	adds	r3, #52	@ 0x34
 8002a4c:	6819      	ldr	r1, [r3, #0]
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	1a9b      	subs	r3, r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4403      	add	r3, r0
 8002a5c:	3328      	adds	r3, #40	@ 0x28
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	440b      	add	r3, r1
 8002a62:	1e59      	subs	r1, r3, #1
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4403      	add	r3, r0
 8002a72:	3328      	adds	r3, #40	@ 0x28
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a7a:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 813f 	beq.w	8002d06 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002a88:	78fa      	ldrb	r2, [r7, #3]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	1a9b      	subs	r3, r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	333d      	adds	r3, #61	@ 0x3d
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	78fa      	ldrb	r2, [r7, #3]
 8002a9c:	f083 0301 	eor.w	r3, r3, #1
 8002aa0:	b2d8      	uxtb	r0, r3
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	333d      	adds	r3, #61	@ 0x3d
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	701a      	strb	r2, [r3, #0]
 8002ab4:	e127      	b.n	8002d06 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002ab6:	78fa      	ldrb	r2, [r7, #3]
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	1a9b      	subs	r3, r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	334d      	adds	r3, #77	@ 0x4d
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d120      	bne.n	8002b0e <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002acc:	78fa      	ldrb	r2, [r7, #3]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	334d      	adds	r3, #77	@ 0x4d
 8002adc:	2202      	movs	r2, #2
 8002ade:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	331b      	adds	r3, #27
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	f040 8107 	bne.w	8002d06 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002af8:	78fa      	ldrb	r2, [r7, #3]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	1a9b      	subs	r3, r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	334c      	adds	r3, #76	@ 0x4c
 8002b08:	2202      	movs	r2, #2
 8002b0a:	701a      	strb	r2, [r3, #0]
 8002b0c:	e0fb      	b.n	8002d06 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002b0e:	78fa      	ldrb	r2, [r7, #3]
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	334d      	adds	r3, #77	@ 0x4d
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d13a      	bne.n	8002b9a <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b24:	78fa      	ldrb	r2, [r7, #3]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	334d      	adds	r3, #77	@ 0x4d
 8002b34:	2202      	movs	r2, #2
 8002b36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b38:	78fa      	ldrb	r2, [r7, #3]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	334c      	adds	r3, #76	@ 0x4c
 8002b48:	2202      	movs	r2, #2
 8002b4a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002b4c:	78fa      	ldrb	r2, [r7, #3]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	331b      	adds	r3, #27
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	f040 80d1 	bne.w	8002d06 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	331b      	adds	r3, #27
 8002b74:	2200      	movs	r2, #0
 8002b76:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	015a      	lsls	r2, r3, #5
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	78fa      	ldrb	r2, [r7, #3]
 8002b88:	0151      	lsls	r1, r2, #5
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	440a      	add	r2, r1
 8002b8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b96:	6053      	str	r3, [r2, #4]
 8002b98:	e0b5      	b.n	8002d06 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002b9a:	78fa      	ldrb	r2, [r7, #3]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	334d      	adds	r3, #77	@ 0x4d
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b05      	cmp	r3, #5
 8002bae:	d114      	bne.n	8002bda <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002bb0:	78fa      	ldrb	r2, [r7, #3]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	334d      	adds	r3, #77	@ 0x4d
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002bc4:	78fa      	ldrb	r2, [r7, #3]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	334c      	adds	r3, #76	@ 0x4c
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	701a      	strb	r2, [r3, #0]
 8002bd8:	e095      	b.n	8002d06 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002bda:	78fa      	ldrb	r2, [r7, #3]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	1a9b      	subs	r3, r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	334d      	adds	r3, #77	@ 0x4d
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b06      	cmp	r3, #6
 8002bee:	d114      	bne.n	8002c1a <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002bf0:	78fa      	ldrb	r2, [r7, #3]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	334d      	adds	r3, #77	@ 0x4d
 8002c00:	2202      	movs	r2, #2
 8002c02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002c04:	78fa      	ldrb	r2, [r7, #3]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	1a9b      	subs	r3, r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	334c      	adds	r3, #76	@ 0x4c
 8002c14:	2205      	movs	r2, #5
 8002c16:	701a      	strb	r2, [r3, #0]
 8002c18:	e075      	b.n	8002d06 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002c1a:	78fa      	ldrb	r2, [r7, #3]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	1a9b      	subs	r3, r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	334d      	adds	r3, #77	@ 0x4d
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b07      	cmp	r3, #7
 8002c2e:	d00a      	beq.n	8002c46 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002c30:	78fa      	ldrb	r2, [r7, #3]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	1a9b      	subs	r3, r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	334d      	adds	r3, #77	@ 0x4d
 8002c40:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002c42:	2b09      	cmp	r3, #9
 8002c44:	d170      	bne.n	8002d28 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	334d      	adds	r3, #77	@ 0x4d
 8002c56:	2202      	movs	r2, #2
 8002c58:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	3344      	adds	r3, #68	@ 0x44
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	1c59      	adds	r1, r3, #1
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	1a9b      	subs	r3, r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4403      	add	r3, r0
 8002c7a:	3344      	adds	r3, #68	@ 0x44
 8002c7c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002c7e:	78fa      	ldrb	r2, [r7, #3]
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	1a9b      	subs	r3, r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	3344      	adds	r3, #68	@ 0x44
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d914      	bls.n	8002cbe <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002c94:	78fa      	ldrb	r2, [r7, #3]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	3344      	adds	r3, #68	@ 0x44
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	1a9b      	subs	r3, r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	334c      	adds	r3, #76	@ 0x4c
 8002cb8:	2204      	movs	r2, #4
 8002cba:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002cbc:	e022      	b.n	8002d04 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	334c      	adds	r3, #76	@ 0x4c
 8002cce:	2202      	movs	r2, #2
 8002cd0:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002cd2:	78fb      	ldrb	r3, [r7, #3]
 8002cd4:	015a      	lsls	r2, r3, #5
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002ce8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002cf0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002cf2:	78fb      	ldrb	r3, [r7, #3]
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cfe:	461a      	mov	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d04:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	1a9b      	subs	r3, r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	334c      	adds	r3, #76	@ 0x4c
 8002d16:	781a      	ldrb	r2, [r3, #0]
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f005 f98d 	bl	800803c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002d22:	e002      	b.n	8002d2a <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8002d24:	bf00      	nop
 8002d26:	e000      	b.n	8002d2a <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8002d28:	bf00      	nop
  }
}
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08a      	sub	sp, #40	@ 0x28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d40:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	0c5b      	lsrs	r3, r3, #17
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	091b      	lsrs	r3, r3, #4
 8002d60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d64:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d004      	beq.n	8002d76 <HCD_RXQLVL_IRQHandler+0x46>
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2b05      	cmp	r3, #5
 8002d70:	f000 80b6 	beq.w	8002ee0 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002d74:	e0b7      	b.n	8002ee6 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 80b3 	beq.w	8002ee4 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4613      	mov	r3, r2
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	332c      	adds	r3, #44	@ 0x2c
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80a7 	beq.w	8002ee4 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	1a9b      	subs	r3, r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	440b      	add	r3, r1
 8002da4:	3338      	adds	r3, #56	@ 0x38
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	18d1      	adds	r1, r2, r3
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4613      	mov	r3, r2
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	1a9b      	subs	r3, r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4403      	add	r3, r0
 8002dba:	3334      	adds	r3, #52	@ 0x34
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4299      	cmp	r1, r3
 8002dc0:	f200 8083 	bhi.w	8002eca <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6818      	ldr	r0, [r3, #0]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	1a9b      	subs	r3, r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	332c      	adds	r3, #44	@ 0x2c
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	b292      	uxth	r2, r2
 8002dde:	4619      	mov	r1, r3
 8002de0:	f002 f876 	bl	8004ed0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4613      	mov	r3, r2
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	332c      	adds	r3, #44	@ 0x2c
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	18d1      	adds	r1, r2, r3
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	1a9b      	subs	r3, r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4403      	add	r3, r0
 8002e08:	332c      	adds	r3, #44	@ 0x2c
 8002e0a:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4613      	mov	r3, r2
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	1a9b      	subs	r3, r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	3338      	adds	r3, #56	@ 0x38
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	18d1      	adds	r1, r2, r3
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4613      	mov	r3, r2
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4403      	add	r3, r0
 8002e30:	3338      	adds	r3, #56	@ 0x38
 8002e32:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	0cdb      	lsrs	r3, r3, #19
 8002e44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e48:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	1a9b      	subs	r3, r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	3328      	adds	r3, #40	@ 0x28
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d13f      	bne.n	8002ee4 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d03c      	beq.n	8002ee4 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002e80:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e88:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e96:	461a      	mov	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	333c      	adds	r3, #60	@ 0x3c
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	f083 0301 	eor.w	r3, r3, #1
 8002eb2:	b2d8      	uxtb	r0, r3
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	1a9b      	subs	r3, r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	333c      	adds	r3, #60	@ 0x3c
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	701a      	strb	r2, [r3, #0]
      break;
 8002ec8:	e00c      	b.n	8002ee4 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	1a9b      	subs	r3, r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	334c      	adds	r3, #76	@ 0x4c
 8002eda:	2204      	movs	r2, #4
 8002edc:	701a      	strb	r2, [r3, #0]
      break;
 8002ede:	e001      	b.n	8002ee4 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8002ee0:	bf00      	nop
 8002ee2:	e000      	b.n	8002ee6 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8002ee4:	bf00      	nop
  }
}
 8002ee6:	bf00      	nop
 8002ee8:	3728      	adds	r7, #40	@ 0x28
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b086      	sub	sp, #24
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8002f1a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d10b      	bne.n	8002f3e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d102      	bne.n	8002f36 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f005 f867 	bl	8008004 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f043 0302 	orr.w	r3, r3, #2
 8002f3c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d132      	bne.n	8002fae <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f043 0308 	orr.w	r3, r3, #8
 8002f4e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f003 0304 	and.w	r3, r3, #4
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d126      	bne.n	8002fa8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	7a5b      	ldrb	r3, [r3, #9]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d113      	bne.n	8002f8a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8002f68:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f6c:	d106      	bne.n	8002f7c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2102      	movs	r1, #2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f002 f845 	bl	8005004 <USB_InitFSLSPClkSel>
 8002f7a:	e011      	b.n	8002fa0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2101      	movs	r1, #1
 8002f82:	4618      	mov	r0, r3
 8002f84:	f002 f83e 	bl	8005004 <USB_InitFSLSPClkSel>
 8002f88:	e00a      	b.n	8002fa0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	79db      	ldrb	r3, [r3, #7]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d106      	bne.n	8002fa0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f98:	461a      	mov	r2, r3
 8002f9a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002f9e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f005 f85d 	bl	8008060 <HAL_HCD_PortEnabled_Callback>
 8002fa6:	e002      	b.n	8002fae <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f005 f867 	bl	800807c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	2b20      	cmp	r3, #32
 8002fb6:	d103      	bne.n	8002fc0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f043 0320 	orr.w	r3, r3, #32
 8002fbe:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	6013      	str	r3, [r2, #0]
}
 8002fcc:	bf00      	nop
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e12b      	b.n	800323e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fd fd50 	bl	8000aa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2224      	movs	r2, #36	@ 0x24
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0201 	bic.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003026:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003036:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003038:	f001 fa20 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 800303c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	4a81      	ldr	r2, [pc, #516]	@ (8003248 <HAL_I2C_Init+0x274>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d807      	bhi.n	8003058 <HAL_I2C_Init+0x84>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4a80      	ldr	r2, [pc, #512]	@ (800324c <HAL_I2C_Init+0x278>)
 800304c:	4293      	cmp	r3, r2
 800304e:	bf94      	ite	ls
 8003050:	2301      	movls	r3, #1
 8003052:	2300      	movhi	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	e006      	b.n	8003066 <HAL_I2C_Init+0x92>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4a7d      	ldr	r2, [pc, #500]	@ (8003250 <HAL_I2C_Init+0x27c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	bf94      	ite	ls
 8003060:	2301      	movls	r3, #1
 8003062:	2300      	movhi	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e0e7      	b.n	800323e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4a78      	ldr	r2, [pc, #480]	@ (8003254 <HAL_I2C_Init+0x280>)
 8003072:	fba2 2303 	umull	r2, r3, r2, r3
 8003076:	0c9b      	lsrs	r3, r3, #18
 8003078:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	430a      	orrs	r2, r1
 800308c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	4a6a      	ldr	r2, [pc, #424]	@ (8003248 <HAL_I2C_Init+0x274>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d802      	bhi.n	80030a8 <HAL_I2C_Init+0xd4>
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	3301      	adds	r3, #1
 80030a6:	e009      	b.n	80030bc <HAL_I2C_Init+0xe8>
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80030ae:	fb02 f303 	mul.w	r3, r2, r3
 80030b2:	4a69      	ldr	r2, [pc, #420]	@ (8003258 <HAL_I2C_Init+0x284>)
 80030b4:	fba2 2303 	umull	r2, r3, r2, r3
 80030b8:	099b      	lsrs	r3, r3, #6
 80030ba:	3301      	adds	r3, #1
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	430b      	orrs	r3, r1
 80030c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80030ce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	495c      	ldr	r1, [pc, #368]	@ (8003248 <HAL_I2C_Init+0x274>)
 80030d8:	428b      	cmp	r3, r1
 80030da:	d819      	bhi.n	8003110 <HAL_I2C_Init+0x13c>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	1e59      	subs	r1, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ea:	1c59      	adds	r1, r3, #1
 80030ec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030f0:	400b      	ands	r3, r1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <HAL_I2C_Init+0x138>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1e59      	subs	r1, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	fbb1 f3f3 	udiv	r3, r1, r3
 8003104:	3301      	adds	r3, #1
 8003106:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800310a:	e051      	b.n	80031b0 <HAL_I2C_Init+0x1dc>
 800310c:	2304      	movs	r3, #4
 800310e:	e04f      	b.n	80031b0 <HAL_I2C_Init+0x1dc>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d111      	bne.n	800313c <HAL_I2C_Init+0x168>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	1e58      	subs	r0, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6859      	ldr	r1, [r3, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	440b      	add	r3, r1
 8003126:	fbb0 f3f3 	udiv	r3, r0, r3
 800312a:	3301      	adds	r3, #1
 800312c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003130:	2b00      	cmp	r3, #0
 8003132:	bf0c      	ite	eq
 8003134:	2301      	moveq	r3, #1
 8003136:	2300      	movne	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	e012      	b.n	8003162 <HAL_I2C_Init+0x18e>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1e58      	subs	r0, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6859      	ldr	r1, [r3, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	0099      	lsls	r1, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003152:	3301      	adds	r3, #1
 8003154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003158:	2b00      	cmp	r3, #0
 800315a:	bf0c      	ite	eq
 800315c:	2301      	moveq	r3, #1
 800315e:	2300      	movne	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_Init+0x196>
 8003166:	2301      	movs	r3, #1
 8003168:	e022      	b.n	80031b0 <HAL_I2C_Init+0x1dc>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10e      	bne.n	8003190 <HAL_I2C_Init+0x1bc>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	1e58      	subs	r0, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6859      	ldr	r1, [r3, #4]
 800317a:	460b      	mov	r3, r1
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	440b      	add	r3, r1
 8003180:	fbb0 f3f3 	udiv	r3, r0, r3
 8003184:	3301      	adds	r3, #1
 8003186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800318a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800318e:	e00f      	b.n	80031b0 <HAL_I2C_Init+0x1dc>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	1e58      	subs	r0, r3, #1
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6859      	ldr	r1, [r3, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	0099      	lsls	r1, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031a6:	3301      	adds	r3, #1
 80031a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	6809      	ldr	r1, [r1, #0]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69da      	ldr	r2, [r3, #28]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6911      	ldr	r1, [r2, #16]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68d2      	ldr	r2, [r2, #12]
 80031ea:	4311      	orrs	r1, r2
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	430b      	orrs	r3, r1
 80031f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695a      	ldr	r2, [r3, #20]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2220      	movs	r2, #32
 800322a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	000186a0 	.word	0x000186a0
 800324c:	001e847f 	.word	0x001e847f
 8003250:	003d08ff 	.word	0x003d08ff
 8003254:	431bde83 	.word	0x431bde83
 8003258:	10624dd3 	.word	0x10624dd3

0800325c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e128      	b.n	80034c0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a90      	ldr	r2, [pc, #576]	@ (80034c8 <HAL_I2S_Init+0x26c>)
 8003286:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7fd fc51 	bl	8000b30 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2202      	movs	r2, #2
 8003292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80032a4:	f023 030f 	bic.w	r3, r3, #15
 80032a8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2202      	movs	r2, #2
 80032b0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d060      	beq.n	800337c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d102      	bne.n	80032c8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80032c2:	2310      	movs	r3, #16
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	e001      	b.n	80032cc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80032c8:	2320      	movs	r3, #32
 80032ca:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	d802      	bhi.n	80032da <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80032da:	2001      	movs	r0, #1
 80032dc:	f001 f9f6 	bl	80046cc <HAL_RCCEx_GetPeriphCLKFreq>
 80032e0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032ea:	d125      	bne.n	8003338 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d010      	beq.n	8003316 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	461a      	mov	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003310:	3305      	adds	r3, #5
 8003312:	613b      	str	r3, [r7, #16]
 8003314:	e01f      	b.n	8003356 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	461a      	mov	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003332:	3305      	adds	r3, #5
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	e00e      	b.n	8003356 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	461a      	mov	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003352:	3305      	adds	r3, #5
 8003354:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	4a5c      	ldr	r2, [pc, #368]	@ (80034cc <HAL_I2S_Init+0x270>)
 800335a:	fba2 2303 	umull	r2, r3, r2, r3
 800335e:	08db      	lsrs	r3, r3, #3
 8003360:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	085b      	lsrs	r3, r3, #1
 8003372:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	021b      	lsls	r3, r3, #8
 8003378:	61bb      	str	r3, [r7, #24]
 800337a:	e003      	b.n	8003384 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800337c:	2302      	movs	r3, #2
 800337e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d902      	bls.n	8003390 <HAL_I2S_Init+0x134>
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	2bff      	cmp	r3, #255	@ 0xff
 800338e:	d907      	bls.n	80033a0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003394:	f043 0210 	orr.w	r2, r3, #16
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e08f      	b.n	80034c0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691a      	ldr	r2, [r3, #16]
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	ea42 0103 	orr.w	r1, r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	69fa      	ldr	r2, [r7, #28]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80033be:	f023 030f 	bic.w	r3, r3, #15
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6851      	ldr	r1, [r2, #4]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6892      	ldr	r2, [r2, #8]
 80033ca:	4311      	orrs	r1, r2
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	68d2      	ldr	r2, [r2, #12]
 80033d0:	4311      	orrs	r1, r2
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6992      	ldr	r2, [r2, #24]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	431a      	orrs	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033e2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d161      	bne.n	80034b0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a38      	ldr	r2, [pc, #224]	@ (80034d0 <HAL_I2S_Init+0x274>)
 80033f0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a37      	ldr	r2, [pc, #220]	@ (80034d4 <HAL_I2S_Init+0x278>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d101      	bne.n	8003400 <HAL_I2S_Init+0x1a4>
 80033fc:	4b36      	ldr	r3, [pc, #216]	@ (80034d8 <HAL_I2S_Init+0x27c>)
 80033fe:	e001      	b.n	8003404 <HAL_I2S_Init+0x1a8>
 8003400:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6812      	ldr	r2, [r2, #0]
 800340a:	4932      	ldr	r1, [pc, #200]	@ (80034d4 <HAL_I2S_Init+0x278>)
 800340c:	428a      	cmp	r2, r1
 800340e:	d101      	bne.n	8003414 <HAL_I2S_Init+0x1b8>
 8003410:	4a31      	ldr	r2, [pc, #196]	@ (80034d8 <HAL_I2S_Init+0x27c>)
 8003412:	e001      	b.n	8003418 <HAL_I2S_Init+0x1bc>
 8003414:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003418:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800341c:	f023 030f 	bic.w	r3, r3, #15
 8003420:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a2b      	ldr	r2, [pc, #172]	@ (80034d4 <HAL_I2S_Init+0x278>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d101      	bne.n	8003430 <HAL_I2S_Init+0x1d4>
 800342c:	4b2a      	ldr	r3, [pc, #168]	@ (80034d8 <HAL_I2S_Init+0x27c>)
 800342e:	e001      	b.n	8003434 <HAL_I2S_Init+0x1d8>
 8003430:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003434:	2202      	movs	r2, #2
 8003436:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a25      	ldr	r2, [pc, #148]	@ (80034d4 <HAL_I2S_Init+0x278>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d101      	bne.n	8003446 <HAL_I2S_Init+0x1ea>
 8003442:	4b25      	ldr	r3, [pc, #148]	@ (80034d8 <HAL_I2S_Init+0x27c>)
 8003444:	e001      	b.n	800344a <HAL_I2S_Init+0x1ee>
 8003446:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003456:	d003      	beq.n	8003460 <HAL_I2S_Init+0x204>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d103      	bne.n	8003468 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003460:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	e001      	b.n	800346c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003468:	2300      	movs	r3, #0
 800346a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003476:	4313      	orrs	r3, r2
 8003478:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003480:	4313      	orrs	r3, r2
 8003482:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800348a:	4313      	orrs	r3, r2
 800348c:	b29a      	uxth	r2, r3
 800348e:	897b      	ldrh	r3, [r7, #10]
 8003490:	4313      	orrs	r3, r2
 8003492:	b29b      	uxth	r3, r3
 8003494:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003498:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a0d      	ldr	r2, [pc, #52]	@ (80034d4 <HAL_I2S_Init+0x278>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d101      	bne.n	80034a8 <HAL_I2S_Init+0x24c>
 80034a4:	4b0c      	ldr	r3, [pc, #48]	@ (80034d8 <HAL_I2S_Init+0x27c>)
 80034a6:	e001      	b.n	80034ac <HAL_I2S_Init+0x250>
 80034a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034ac:	897a      	ldrh	r2, [r7, #10]
 80034ae:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3720      	adds	r7, #32
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	080035d3 	.word	0x080035d3
 80034cc:	cccccccd 	.word	0xcccccccd
 80034d0:	080036e9 	.word	0x080036e9
 80034d4:	40003800 	.word	0x40003800
 80034d8:	40003400 	.word	0x40003400

080034dc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003524:	881a      	ldrh	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003530:	1c9a      	adds	r2, r3, #2
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10e      	bne.n	800356c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800355c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff ffb8 	bl	80034dc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800356c:	bf00      	nop
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003586:	b292      	uxth	r2, r2
 8003588:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358e:	1c9a      	adds	r2, r3, #2
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10e      	bne.n	80035ca <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80035ba:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff ff93 	bl	80034f0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80035ca:	bf00      	nop
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b086      	sub	sp, #24
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	d13a      	bne.n	8003664 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d109      	bne.n	800360c <I2S_IRQHandler+0x3a>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003602:	2b40      	cmp	r3, #64	@ 0x40
 8003604:	d102      	bne.n	800360c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff ffb4 	bl	8003574 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003612:	2b40      	cmp	r3, #64	@ 0x40
 8003614:	d126      	bne.n	8003664 <I2S_IRQHandler+0x92>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b20      	cmp	r3, #32
 8003622:	d11f      	bne.n	8003664 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003632:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003634:	2300      	movs	r3, #0
 8003636:	613b      	str	r3, [r7, #16]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	613b      	str	r3, [r7, #16]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	613b      	str	r3, [r7, #16]
 8003648:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003656:	f043 0202 	orr.w	r2, r3, #2
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7ff ff50 	bl	8003504 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b03      	cmp	r3, #3
 800366e:	d136      	bne.n	80036de <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b02      	cmp	r3, #2
 8003678:	d109      	bne.n	800368e <I2S_IRQHandler+0xbc>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003684:	2b80      	cmp	r3, #128	@ 0x80
 8003686:	d102      	bne.n	800368e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff ff45 	bl	8003518 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b08      	cmp	r3, #8
 8003696:	d122      	bne.n	80036de <I2S_IRQHandler+0x10c>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	d11b      	bne.n	80036de <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80036b4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036b6:	2300      	movs	r3, #0
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d0:	f043 0204 	orr.w	r2, r3, #4
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7ff ff13 	bl	8003504 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036de:	bf00      	nop
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
	...

080036e8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a92      	ldr	r2, [pc, #584]	@ (8003948 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d101      	bne.n	8003706 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003702:	4b92      	ldr	r3, [pc, #584]	@ (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003704:	e001      	b.n	800370a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003706:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a8b      	ldr	r2, [pc, #556]	@ (8003948 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d101      	bne.n	8003724 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003720:	4b8a      	ldr	r3, [pc, #552]	@ (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003722:	e001      	b.n	8003728 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003724:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003734:	d004      	beq.n	8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	f040 8099 	bne.w	8003872 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b02      	cmp	r3, #2
 8003748:	d107      	bne.n	800375a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f925 	bl	80039a4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b01      	cmp	r3, #1
 8003762:	d107      	bne.n	8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800376a:	2b00      	cmp	r3, #0
 800376c:	d002      	beq.n	8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f9c8 	bl	8003b04 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800377a:	2b40      	cmp	r3, #64	@ 0x40
 800377c:	d13a      	bne.n	80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f003 0320 	and.w	r3, r3, #32
 8003784:	2b00      	cmp	r3, #0
 8003786:	d035      	beq.n	80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a6e      	ldr	r2, [pc, #440]	@ (8003948 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d101      	bne.n	8003796 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003792:	4b6e      	ldr	r3, [pc, #440]	@ (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003794:	e001      	b.n	800379a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003796:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4969      	ldr	r1, [pc, #420]	@ (8003948 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037a2:	428b      	cmp	r3, r1
 80037a4:	d101      	bne.n	80037aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80037a6:	4b69      	ldr	r3, [pc, #420]	@ (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037a8:	e001      	b.n	80037ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80037aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037ae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80037b2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80037c2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e6:	f043 0202 	orr.w	r2, r3, #2
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff fe88 	bl	8003504 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	f040 80c3 	bne.w	8003986 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 80bd 	beq.w	8003986 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800381a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a49      	ldr	r2, [pc, #292]	@ (8003948 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d101      	bne.n	800382a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003826:	4b49      	ldr	r3, [pc, #292]	@ (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003828:	e001      	b.n	800382e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800382a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4944      	ldr	r1, [pc, #272]	@ (8003948 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003836:	428b      	cmp	r3, r1
 8003838:	d101      	bne.n	800383e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800383a:	4b44      	ldr	r3, [pc, #272]	@ (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800383c:	e001      	b.n	8003842 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800383e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003842:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003846:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003848:	2300      	movs	r3, #0
 800384a:	60bb      	str	r3, [r7, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	60bb      	str	r3, [r7, #8]
 8003854:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003862:	f043 0204 	orr.w	r2, r3, #4
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff fe4a 	bl	8003504 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003870:	e089      	b.n	8003986 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b02      	cmp	r3, #2
 800387a:	d107      	bne.n	800388c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f8be 	bl	8003a08 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b01      	cmp	r3, #1
 8003894:	d107      	bne.n	80038a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f8fd 	bl	8003aa0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ac:	2b40      	cmp	r3, #64	@ 0x40
 80038ae:	d12f      	bne.n	8003910 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d02a      	beq.n	8003910 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80038c8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003948 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d101      	bne.n	80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80038d4:	4b1d      	ldr	r3, [pc, #116]	@ (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038d6:	e001      	b.n	80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80038d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4919      	ldr	r1, [pc, #100]	@ (8003948 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038e4:	428b      	cmp	r3, r1
 80038e6:	d101      	bne.n	80038ec <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80038e8:	4b18      	ldr	r3, [pc, #96]	@ (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038ea:	e001      	b.n	80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80038ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038f0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80038f4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003902:	f043 0202 	orr.w	r2, r3, #2
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff fdfa 	bl	8003504 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b08      	cmp	r3, #8
 8003918:	d136      	bne.n	8003988 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f003 0320 	and.w	r3, r3, #32
 8003920:	2b00      	cmp	r3, #0
 8003922:	d031      	beq.n	8003988 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a07      	ldr	r2, [pc, #28]	@ (8003948 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d101      	bne.n	8003932 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800392e:	4b07      	ldr	r3, [pc, #28]	@ (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003930:	e001      	b.n	8003936 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003932:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4902      	ldr	r1, [pc, #8]	@ (8003948 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800393e:	428b      	cmp	r3, r1
 8003940:	d106      	bne.n	8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003942:	4b02      	ldr	r3, [pc, #8]	@ (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003944:	e006      	b.n	8003954 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003946:	bf00      	nop
 8003948:	40003800 	.word	0x40003800
 800394c:	40003400 	.word	0x40003400
 8003950:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003954:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003958:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003968:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003976:	f043 0204 	orr.w	r2, r3, #4
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff fdc0 	bl	8003504 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003984:	e000      	b.n	8003988 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003986:	bf00      	nop
}
 8003988:	bf00      	nop
 800398a:	3720      	adds	r7, #32
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b0:	1c99      	adds	r1, r3, #2
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6251      	str	r1, [r2, #36]	@ 0x24
 80039b6:	881a      	ldrh	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d113      	bne.n	80039fe <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80039e4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d106      	bne.n	80039fe <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff ffc9 	bl	8003990 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039fe:	bf00      	nop
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a14:	1c99      	adds	r1, r3, #2
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6251      	str	r1, [r2, #36]	@ 0x24
 8003a1a:	8819      	ldrh	r1, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a1d      	ldr	r2, [pc, #116]	@ (8003a98 <I2SEx_TxISR_I2SExt+0x90>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d101      	bne.n	8003a2a <I2SEx_TxISR_I2SExt+0x22>
 8003a26:	4b1d      	ldr	r3, [pc, #116]	@ (8003a9c <I2SEx_TxISR_I2SExt+0x94>)
 8003a28:	e001      	b.n	8003a2e <I2SEx_TxISR_I2SExt+0x26>
 8003a2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a2e:	460a      	mov	r2, r1
 8003a30:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d121      	bne.n	8003a8e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a12      	ldr	r2, [pc, #72]	@ (8003a98 <I2SEx_TxISR_I2SExt+0x90>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d101      	bne.n	8003a58 <I2SEx_TxISR_I2SExt+0x50>
 8003a54:	4b11      	ldr	r3, [pc, #68]	@ (8003a9c <I2SEx_TxISR_I2SExt+0x94>)
 8003a56:	e001      	b.n	8003a5c <I2SEx_TxISR_I2SExt+0x54>
 8003a58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	490d      	ldr	r1, [pc, #52]	@ (8003a98 <I2SEx_TxISR_I2SExt+0x90>)
 8003a64:	428b      	cmp	r3, r1
 8003a66:	d101      	bne.n	8003a6c <I2SEx_TxISR_I2SExt+0x64>
 8003a68:	4b0c      	ldr	r3, [pc, #48]	@ (8003a9c <I2SEx_TxISR_I2SExt+0x94>)
 8003a6a:	e001      	b.n	8003a70 <I2SEx_TxISR_I2SExt+0x68>
 8003a6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a70:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003a74:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d106      	bne.n	8003a8e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7ff ff81 	bl	8003990 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a8e:	bf00      	nop
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40003800 	.word	0x40003800
 8003a9c:	40003400 	.word	0x40003400

08003aa0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68d8      	ldr	r0, [r3, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab2:	1c99      	adds	r1, r3, #2
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003ab8:	b282      	uxth	r2, r0
 8003aba:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d113      	bne.n	8003afc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ae2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d106      	bne.n	8003afc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7ff ff4a 	bl	8003990 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003afc:	bf00      	nop
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a20      	ldr	r2, [pc, #128]	@ (8003b94 <I2SEx_RxISR_I2SExt+0x90>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d101      	bne.n	8003b1a <I2SEx_RxISR_I2SExt+0x16>
 8003b16:	4b20      	ldr	r3, [pc, #128]	@ (8003b98 <I2SEx_RxISR_I2SExt+0x94>)
 8003b18:	e001      	b.n	8003b1e <I2SEx_RxISR_I2SExt+0x1a>
 8003b1a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b1e:	68d8      	ldr	r0, [r3, #12]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b24:	1c99      	adds	r1, r3, #2
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003b2a:	b282      	uxth	r2, r0
 8003b2c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d121      	bne.n	8003b8a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a12      	ldr	r2, [pc, #72]	@ (8003b94 <I2SEx_RxISR_I2SExt+0x90>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d101      	bne.n	8003b54 <I2SEx_RxISR_I2SExt+0x50>
 8003b50:	4b11      	ldr	r3, [pc, #68]	@ (8003b98 <I2SEx_RxISR_I2SExt+0x94>)
 8003b52:	e001      	b.n	8003b58 <I2SEx_RxISR_I2SExt+0x54>
 8003b54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	490d      	ldr	r1, [pc, #52]	@ (8003b94 <I2SEx_RxISR_I2SExt+0x90>)
 8003b60:	428b      	cmp	r3, r1
 8003b62:	d101      	bne.n	8003b68 <I2SEx_RxISR_I2SExt+0x64>
 8003b64:	4b0c      	ldr	r3, [pc, #48]	@ (8003b98 <I2SEx_RxISR_I2SExt+0x94>)
 8003b66:	e001      	b.n	8003b6c <I2SEx_RxISR_I2SExt+0x68>
 8003b68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b6c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003b70:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d106      	bne.n	8003b8a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7ff ff03 	bl	8003990 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40003800 	.word	0x40003800
 8003b98:	40003400 	.word	0x40003400

08003b9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e267      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d075      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bba:	4b88      	ldr	r3, [pc, #544]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d00c      	beq.n	8003be0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bc6:	4b85      	ldr	r3, [pc, #532]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d112      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bd2:	4b82      	ldr	r3, [pc, #520]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bde:	d10b      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be0:	4b7e      	ldr	r3, [pc, #504]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d05b      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x108>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d157      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e242      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c00:	d106      	bne.n	8003c10 <HAL_RCC_OscConfig+0x74>
 8003c02:	4b76      	ldr	r3, [pc, #472]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a75      	ldr	r2, [pc, #468]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	e01d      	b.n	8003c4c <HAL_RCC_OscConfig+0xb0>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c18:	d10c      	bne.n	8003c34 <HAL_RCC_OscConfig+0x98>
 8003c1a:	4b70      	ldr	r3, [pc, #448]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a6f      	ldr	r2, [pc, #444]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003c20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	4b6d      	ldr	r3, [pc, #436]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a6c      	ldr	r2, [pc, #432]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003c2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	e00b      	b.n	8003c4c <HAL_RCC_OscConfig+0xb0>
 8003c34:	4b69      	ldr	r3, [pc, #420]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a68      	ldr	r2, [pc, #416]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003c3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	4b66      	ldr	r3, [pc, #408]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a65      	ldr	r2, [pc, #404]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003c46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d013      	beq.n	8003c7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c54:	f7fd f974 	bl	8000f40 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c5c:	f7fd f970 	bl	8000f40 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b64      	cmp	r3, #100	@ 0x64
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e207      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6e:	4b5b      	ldr	r3, [pc, #364]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f0      	beq.n	8003c5c <HAL_RCC_OscConfig+0xc0>
 8003c7a:	e014      	b.n	8003ca6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7c:	f7fd f960 	bl	8000f40 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c84:	f7fd f95c 	bl	8000f40 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b64      	cmp	r3, #100	@ 0x64
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e1f3      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c96:	4b51      	ldr	r3, [pc, #324]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0xe8>
 8003ca2:	e000      	b.n	8003ca6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d063      	beq.n	8003d7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cb2:	4b4a      	ldr	r3, [pc, #296]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00b      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cbe:	4b47      	ldr	r3, [pc, #284]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d11c      	bne.n	8003d04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cca:	4b44      	ldr	r3, [pc, #272]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d116      	bne.n	8003d04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd6:	4b41      	ldr	r3, [pc, #260]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d005      	beq.n	8003cee <HAL_RCC_OscConfig+0x152>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d001      	beq.n	8003cee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e1c7      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cee:	4b3b      	ldr	r3, [pc, #236]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	4937      	ldr	r1, [pc, #220]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d02:	e03a      	b.n	8003d7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d020      	beq.n	8003d4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d0c:	4b34      	ldr	r3, [pc, #208]	@ (8003de0 <HAL_RCC_OscConfig+0x244>)
 8003d0e:	2201      	movs	r2, #1
 8003d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d12:	f7fd f915 	bl	8000f40 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d1a:	f7fd f911 	bl	8000f40 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e1a8      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0f0      	beq.n	8003d1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d38:	4b28      	ldr	r3, [pc, #160]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	4925      	ldr	r1, [pc, #148]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	600b      	str	r3, [r1, #0]
 8003d4c:	e015      	b.n	8003d7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d4e:	4b24      	ldr	r3, [pc, #144]	@ (8003de0 <HAL_RCC_OscConfig+0x244>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d54:	f7fd f8f4 	bl	8000f40 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d5c:	f7fd f8f0 	bl	8000f40 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e187      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d036      	beq.n	8003df4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d016      	beq.n	8003dbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d8e:	4b15      	ldr	r3, [pc, #84]	@ (8003de4 <HAL_RCC_OscConfig+0x248>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d94:	f7fd f8d4 	bl	8000f40 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d9c:	f7fd f8d0 	bl	8000f40 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e167      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dae:	4b0b      	ldr	r3, [pc, #44]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003db0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0x200>
 8003dba:	e01b      	b.n	8003df4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dbc:	4b09      	ldr	r3, [pc, #36]	@ (8003de4 <HAL_RCC_OscConfig+0x248>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc2:	f7fd f8bd 	bl	8000f40 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc8:	e00e      	b.n	8003de8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dca:	f7fd f8b9 	bl	8000f40 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d907      	bls.n	8003de8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e150      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	42470000 	.word	0x42470000
 8003de4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de8:	4b88      	ldr	r3, [pc, #544]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003dea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1ea      	bne.n	8003dca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 8097 	beq.w	8003f30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e02:	2300      	movs	r3, #0
 8003e04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e06:	4b81      	ldr	r3, [pc, #516]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10f      	bne.n	8003e32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e12:	2300      	movs	r3, #0
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	4b7d      	ldr	r3, [pc, #500]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1a:	4a7c      	ldr	r2, [pc, #496]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e20:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e22:	4b7a      	ldr	r3, [pc, #488]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e2a:	60bb      	str	r3, [r7, #8]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e32:	4b77      	ldr	r3, [pc, #476]	@ (8004010 <HAL_RCC_OscConfig+0x474>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d118      	bne.n	8003e70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e3e:	4b74      	ldr	r3, [pc, #464]	@ (8004010 <HAL_RCC_OscConfig+0x474>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a73      	ldr	r2, [pc, #460]	@ (8004010 <HAL_RCC_OscConfig+0x474>)
 8003e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e4a:	f7fd f879 	bl	8000f40 <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e52:	f7fd f875 	bl	8000f40 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e10c      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e64:	4b6a      	ldr	r3, [pc, #424]	@ (8004010 <HAL_RCC_OscConfig+0x474>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0f0      	beq.n	8003e52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d106      	bne.n	8003e86 <HAL_RCC_OscConfig+0x2ea>
 8003e78:	4b64      	ldr	r3, [pc, #400]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e7c:	4a63      	ldr	r2, [pc, #396]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003e7e:	f043 0301 	orr.w	r3, r3, #1
 8003e82:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e84:	e01c      	b.n	8003ec0 <HAL_RCC_OscConfig+0x324>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b05      	cmp	r3, #5
 8003e8c:	d10c      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x30c>
 8003e8e:	4b5f      	ldr	r3, [pc, #380]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e92:	4a5e      	ldr	r2, [pc, #376]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003e94:	f043 0304 	orr.w	r3, r3, #4
 8003e98:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e9a:	4b5c      	ldr	r3, [pc, #368]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e9e:	4a5b      	ldr	r2, [pc, #364]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003ea0:	f043 0301 	orr.w	r3, r3, #1
 8003ea4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ea6:	e00b      	b.n	8003ec0 <HAL_RCC_OscConfig+0x324>
 8003ea8:	4b58      	ldr	r3, [pc, #352]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eac:	4a57      	ldr	r2, [pc, #348]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003eae:	f023 0301 	bic.w	r3, r3, #1
 8003eb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eb4:	4b55      	ldr	r3, [pc, #340]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb8:	4a54      	ldr	r2, [pc, #336]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003eba:	f023 0304 	bic.w	r3, r3, #4
 8003ebe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d015      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec8:	f7fd f83a 	bl	8000f40 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ece:	e00a      	b.n	8003ee6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed0:	f7fd f836 	bl	8000f40 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e0cb      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee6:	4b49      	ldr	r3, [pc, #292]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0ee      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x334>
 8003ef2:	e014      	b.n	8003f1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef4:	f7fd f824 	bl	8000f40 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003efa:	e00a      	b.n	8003f12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003efc:	f7fd f820 	bl	8000f40 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e0b5      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f12:	4b3e      	ldr	r3, [pc, #248]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1ee      	bne.n	8003efc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f1e:	7dfb      	ldrb	r3, [r7, #23]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d105      	bne.n	8003f30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f24:	4b39      	ldr	r3, [pc, #228]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f28:	4a38      	ldr	r2, [pc, #224]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003f2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 80a1 	beq.w	800407c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f3a:	4b34      	ldr	r3, [pc, #208]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 030c 	and.w	r3, r3, #12
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d05c      	beq.n	8004000 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d141      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f4e:	4b31      	ldr	r3, [pc, #196]	@ (8004014 <HAL_RCC_OscConfig+0x478>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f54:	f7fc fff4 	bl	8000f40 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f5c:	f7fc fff0 	bl	8000f40 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e087      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6e:	4b27      	ldr	r3, [pc, #156]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f0      	bne.n	8003f5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69da      	ldr	r2, [r3, #28]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f88:	019b      	lsls	r3, r3, #6
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f90:	085b      	lsrs	r3, r3, #1
 8003f92:	3b01      	subs	r3, #1
 8003f94:	041b      	lsls	r3, r3, #16
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9c:	061b      	lsls	r3, r3, #24
 8003f9e:	491b      	ldr	r1, [pc, #108]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8004014 <HAL_RCC_OscConfig+0x478>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003faa:	f7fc ffc9 	bl	8000f40 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb2:	f7fc ffc5 	bl	8000f40 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e05c      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc4:	4b11      	ldr	r3, [pc, #68]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0f0      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x416>
 8003fd0:	e054      	b.n	800407c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd2:	4b10      	ldr	r3, [pc, #64]	@ (8004014 <HAL_RCC_OscConfig+0x478>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd8:	f7fc ffb2 	bl	8000f40 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe0:	f7fc ffae 	bl	8000f40 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e045      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff2:	4b06      	ldr	r3, [pc, #24]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1f0      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x444>
 8003ffe:	e03d      	b.n	800407c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d107      	bne.n	8004018 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e038      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
 800400c:	40023800 	.word	0x40023800
 8004010:	40007000 	.word	0x40007000
 8004014:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004018:	4b1b      	ldr	r3, [pc, #108]	@ (8004088 <HAL_RCC_OscConfig+0x4ec>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d028      	beq.n	8004078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004030:	429a      	cmp	r2, r3
 8004032:	d121      	bne.n	8004078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800403e:	429a      	cmp	r2, r3
 8004040:	d11a      	bne.n	8004078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004048:	4013      	ands	r3, r2
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800404e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004050:	4293      	cmp	r3, r2
 8004052:	d111      	bne.n	8004078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405e:	085b      	lsrs	r3, r3, #1
 8004060:	3b01      	subs	r3, #1
 8004062:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004064:	429a      	cmp	r2, r3
 8004066:	d107      	bne.n	8004078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004072:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004074:	429a      	cmp	r2, r3
 8004076:	d001      	beq.n	800407c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e000      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40023800 	.word	0x40023800

0800408c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0cc      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040a0:	4b68      	ldr	r3, [pc, #416]	@ (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d90c      	bls.n	80040c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ae:	4b65      	ldr	r3, [pc, #404]	@ (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b6:	4b63      	ldr	r3, [pc, #396]	@ (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d001      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e0b8      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d020      	beq.n	8004116 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040e0:	4b59      	ldr	r3, [pc, #356]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	4a58      	ldr	r2, [pc, #352]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040f8:	4b53      	ldr	r3, [pc, #332]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	4a52      	ldr	r2, [pc, #328]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004102:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004104:	4b50      	ldr	r3, [pc, #320]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	494d      	ldr	r1, [pc, #308]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 8004112:	4313      	orrs	r3, r2
 8004114:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d044      	beq.n	80041ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d107      	bne.n	800413a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412a:	4b47      	ldr	r3, [pc, #284]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d119      	bne.n	800416a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e07f      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d003      	beq.n	800414a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004146:	2b03      	cmp	r3, #3
 8004148:	d107      	bne.n	800415a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414a:	4b3f      	ldr	r3, [pc, #252]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d109      	bne.n	800416a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e06f      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800415a:	4b3b      	ldr	r3, [pc, #236]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e067      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800416a:	4b37      	ldr	r3, [pc, #220]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f023 0203 	bic.w	r2, r3, #3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	4934      	ldr	r1, [pc, #208]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 8004178:	4313      	orrs	r3, r2
 800417a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800417c:	f7fc fee0 	bl	8000f40 <HAL_GetTick>
 8004180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004182:	e00a      	b.n	800419a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004184:	f7fc fedc 	bl	8000f40 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e04f      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419a:	4b2b      	ldr	r3, [pc, #172]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 020c 	and.w	r2, r3, #12
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d1eb      	bne.n	8004184 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041ac:	4b25      	ldr	r3, [pc, #148]	@ (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d20c      	bcs.n	80041d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ba:	4b22      	ldr	r3, [pc, #136]	@ (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c2:	4b20      	ldr	r3, [pc, #128]	@ (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e032      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041e0:	4b19      	ldr	r3, [pc, #100]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	4916      	ldr	r1, [pc, #88]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d009      	beq.n	8004212 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041fe:	4b12      	ldr	r3, [pc, #72]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	490e      	ldr	r1, [pc, #56]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	4313      	orrs	r3, r2
 8004210:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004212:	f000 f821 	bl	8004258 <HAL_RCC_GetSysClockFreq>
 8004216:	4602      	mov	r2, r0
 8004218:	4b0b      	ldr	r3, [pc, #44]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	091b      	lsrs	r3, r3, #4
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	490a      	ldr	r1, [pc, #40]	@ (800424c <HAL_RCC_ClockConfig+0x1c0>)
 8004224:	5ccb      	ldrb	r3, [r1, r3]
 8004226:	fa22 f303 	lsr.w	r3, r2, r3
 800422a:	4a09      	ldr	r2, [pc, #36]	@ (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 800422c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800422e:	4b09      	ldr	r3, [pc, #36]	@ (8004254 <HAL_RCC_ClockConfig+0x1c8>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f7fc fd66 	bl	8000d04 <HAL_InitTick>

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40023c00 	.word	0x40023c00
 8004248:	40023800 	.word	0x40023800
 800424c:	08008358 	.word	0x08008358
 8004250:	20000000 	.word	0x20000000
 8004254:	20000004 	.word	0x20000004

08004258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800425c:	b094      	sub	sp, #80	@ 0x50
 800425e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	647b      	str	r3, [r7, #68]	@ 0x44
 8004264:	2300      	movs	r3, #0
 8004266:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004268:	2300      	movs	r3, #0
 800426a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004270:	4b79      	ldr	r3, [pc, #484]	@ (8004458 <HAL_RCC_GetSysClockFreq+0x200>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 030c 	and.w	r3, r3, #12
 8004278:	2b08      	cmp	r3, #8
 800427a:	d00d      	beq.n	8004298 <HAL_RCC_GetSysClockFreq+0x40>
 800427c:	2b08      	cmp	r3, #8
 800427e:	f200 80e1 	bhi.w	8004444 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <HAL_RCC_GetSysClockFreq+0x34>
 8004286:	2b04      	cmp	r3, #4
 8004288:	d003      	beq.n	8004292 <HAL_RCC_GetSysClockFreq+0x3a>
 800428a:	e0db      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800428c:	4b73      	ldr	r3, [pc, #460]	@ (800445c <HAL_RCC_GetSysClockFreq+0x204>)
 800428e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004290:	e0db      	b.n	800444a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004292:	4b73      	ldr	r3, [pc, #460]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x208>)
 8004294:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004296:	e0d8      	b.n	800444a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004298:	4b6f      	ldr	r3, [pc, #444]	@ (8004458 <HAL_RCC_GetSysClockFreq+0x200>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004458 <HAL_RCC_GetSysClockFreq+0x200>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d063      	beq.n	8004376 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ae:	4b6a      	ldr	r3, [pc, #424]	@ (8004458 <HAL_RCC_GetSysClockFreq+0x200>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	099b      	lsrs	r3, r3, #6
 80042b4:	2200      	movs	r2, #0
 80042b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80042ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80042c2:	2300      	movs	r3, #0
 80042c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80042c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80042ca:	4622      	mov	r2, r4
 80042cc:	462b      	mov	r3, r5
 80042ce:	f04f 0000 	mov.w	r0, #0
 80042d2:	f04f 0100 	mov.w	r1, #0
 80042d6:	0159      	lsls	r1, r3, #5
 80042d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042dc:	0150      	lsls	r0, r2, #5
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	4621      	mov	r1, r4
 80042e4:	1a51      	subs	r1, r2, r1
 80042e6:	6139      	str	r1, [r7, #16]
 80042e8:	4629      	mov	r1, r5
 80042ea:	eb63 0301 	sbc.w	r3, r3, r1
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042fc:	4659      	mov	r1, fp
 80042fe:	018b      	lsls	r3, r1, #6
 8004300:	4651      	mov	r1, sl
 8004302:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004306:	4651      	mov	r1, sl
 8004308:	018a      	lsls	r2, r1, #6
 800430a:	4651      	mov	r1, sl
 800430c:	ebb2 0801 	subs.w	r8, r2, r1
 8004310:	4659      	mov	r1, fp
 8004312:	eb63 0901 	sbc.w	r9, r3, r1
 8004316:	f04f 0200 	mov.w	r2, #0
 800431a:	f04f 0300 	mov.w	r3, #0
 800431e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004322:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004326:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800432a:	4690      	mov	r8, r2
 800432c:	4699      	mov	r9, r3
 800432e:	4623      	mov	r3, r4
 8004330:	eb18 0303 	adds.w	r3, r8, r3
 8004334:	60bb      	str	r3, [r7, #8]
 8004336:	462b      	mov	r3, r5
 8004338:	eb49 0303 	adc.w	r3, r9, r3
 800433c:	60fb      	str	r3, [r7, #12]
 800433e:	f04f 0200 	mov.w	r2, #0
 8004342:	f04f 0300 	mov.w	r3, #0
 8004346:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800434a:	4629      	mov	r1, r5
 800434c:	024b      	lsls	r3, r1, #9
 800434e:	4621      	mov	r1, r4
 8004350:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004354:	4621      	mov	r1, r4
 8004356:	024a      	lsls	r2, r1, #9
 8004358:	4610      	mov	r0, r2
 800435a:	4619      	mov	r1, r3
 800435c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800435e:	2200      	movs	r2, #0
 8004360:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004362:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004364:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004368:	f7fb ff32 	bl	80001d0 <__aeabi_uldivmod>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	4613      	mov	r3, r2
 8004372:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004374:	e058      	b.n	8004428 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004376:	4b38      	ldr	r3, [pc, #224]	@ (8004458 <HAL_RCC_GetSysClockFreq+0x200>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	099b      	lsrs	r3, r3, #6
 800437c:	2200      	movs	r2, #0
 800437e:	4618      	mov	r0, r3
 8004380:	4611      	mov	r1, r2
 8004382:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004386:	623b      	str	r3, [r7, #32]
 8004388:	2300      	movs	r3, #0
 800438a:	627b      	str	r3, [r7, #36]	@ 0x24
 800438c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004390:	4642      	mov	r2, r8
 8004392:	464b      	mov	r3, r9
 8004394:	f04f 0000 	mov.w	r0, #0
 8004398:	f04f 0100 	mov.w	r1, #0
 800439c:	0159      	lsls	r1, r3, #5
 800439e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043a2:	0150      	lsls	r0, r2, #5
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4641      	mov	r1, r8
 80043aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80043ae:	4649      	mov	r1, r9
 80043b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043c8:	ebb2 040a 	subs.w	r4, r2, sl
 80043cc:	eb63 050b 	sbc.w	r5, r3, fp
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	00eb      	lsls	r3, r5, #3
 80043da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043de:	00e2      	lsls	r2, r4, #3
 80043e0:	4614      	mov	r4, r2
 80043e2:	461d      	mov	r5, r3
 80043e4:	4643      	mov	r3, r8
 80043e6:	18e3      	adds	r3, r4, r3
 80043e8:	603b      	str	r3, [r7, #0]
 80043ea:	464b      	mov	r3, r9
 80043ec:	eb45 0303 	adc.w	r3, r5, r3
 80043f0:	607b      	str	r3, [r7, #4]
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043fe:	4629      	mov	r1, r5
 8004400:	028b      	lsls	r3, r1, #10
 8004402:	4621      	mov	r1, r4
 8004404:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004408:	4621      	mov	r1, r4
 800440a:	028a      	lsls	r2, r1, #10
 800440c:	4610      	mov	r0, r2
 800440e:	4619      	mov	r1, r3
 8004410:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004412:	2200      	movs	r2, #0
 8004414:	61bb      	str	r3, [r7, #24]
 8004416:	61fa      	str	r2, [r7, #28]
 8004418:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800441c:	f7fb fed8 	bl	80001d0 <__aeabi_uldivmod>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	4613      	mov	r3, r2
 8004426:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004428:	4b0b      	ldr	r3, [pc, #44]	@ (8004458 <HAL_RCC_GetSysClockFreq+0x200>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	0c1b      	lsrs	r3, r3, #16
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	3301      	adds	r3, #1
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004438:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800443a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800443c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004440:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004442:	e002      	b.n	800444a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004444:	4b05      	ldr	r3, [pc, #20]	@ (800445c <HAL_RCC_GetSysClockFreq+0x204>)
 8004446:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800444a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800444c:	4618      	mov	r0, r3
 800444e:	3750      	adds	r7, #80	@ 0x50
 8004450:	46bd      	mov	sp, r7
 8004452:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004456:	bf00      	nop
 8004458:	40023800 	.word	0x40023800
 800445c:	00f42400 	.word	0x00f42400
 8004460:	007a1200 	.word	0x007a1200

08004464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004468:	4b03      	ldr	r3, [pc, #12]	@ (8004478 <HAL_RCC_GetHCLKFreq+0x14>)
 800446a:	681b      	ldr	r3, [r3, #0]
}
 800446c:	4618      	mov	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000000 	.word	0x20000000

0800447c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004480:	f7ff fff0 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 8004484:	4602      	mov	r2, r0
 8004486:	4b05      	ldr	r3, [pc, #20]	@ (800449c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	0a9b      	lsrs	r3, r3, #10
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	4903      	ldr	r1, [pc, #12]	@ (80044a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004492:	5ccb      	ldrb	r3, [r1, r3]
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004498:	4618      	mov	r0, r3
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40023800 	.word	0x40023800
 80044a0:	08008368 	.word	0x08008368

080044a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	220f      	movs	r2, #15
 80044b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80044b4:	4b12      	ldr	r3, [pc, #72]	@ (8004500 <HAL_RCC_GetClockConfig+0x5c>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 0203 	and.w	r2, r3, #3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80044c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004500 <HAL_RCC_GetClockConfig+0x5c>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80044cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004500 <HAL_RCC_GetClockConfig+0x5c>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80044d8:	4b09      	ldr	r3, [pc, #36]	@ (8004500 <HAL_RCC_GetClockConfig+0x5c>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	08db      	lsrs	r3, r3, #3
 80044de:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044e6:	4b07      	ldr	r3, [pc, #28]	@ (8004504 <HAL_RCC_GetClockConfig+0x60>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0207 	and.w	r2, r3, #7
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	601a      	str	r2, [r3, #0]
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	40023800 	.word	0x40023800
 8004504:	40023c00 	.word	0x40023c00

08004508 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d105      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800452c:	2b00      	cmp	r3, #0
 800452e:	d035      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004530:	4b62      	ldr	r3, [pc, #392]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004536:	f7fc fd03 	bl	8000f40 <HAL_GetTick>
 800453a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800453c:	e008      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800453e:	f7fc fcff 	bl	8000f40 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e0b0      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004550:	4b5b      	ldr	r3, [pc, #364]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1f0      	bne.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	019a      	lsls	r2, r3, #6
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	071b      	lsls	r3, r3, #28
 8004568:	4955      	ldr	r1, [pc, #340]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800456a:	4313      	orrs	r3, r2
 800456c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004570:	4b52      	ldr	r3, [pc, #328]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004572:	2201      	movs	r2, #1
 8004574:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004576:	f7fc fce3 	bl	8000f40 <HAL_GetTick>
 800457a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800457c:	e008      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800457e:	f7fc fcdf 	bl	8000f40 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e090      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004590:	4b4b      	ldr	r3, [pc, #300]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0f0      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 8083 	beq.w	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045aa:	2300      	movs	r3, #0
 80045ac:	60fb      	str	r3, [r7, #12]
 80045ae:	4b44      	ldr	r3, [pc, #272]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b2:	4a43      	ldr	r2, [pc, #268]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80045ba:	4b41      	ldr	r3, [pc, #260]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80045c6:	4b3f      	ldr	r3, [pc, #252]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a3e      	ldr	r2, [pc, #248]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045d2:	f7fc fcb5 	bl	8000f40 <HAL_GetTick>
 80045d6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045d8:	e008      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80045da:	f7fc fcb1 	bl	8000f40 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e062      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045ec:	4b35      	ldr	r3, [pc, #212]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0f0      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045f8:	4b31      	ldr	r3, [pc, #196]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004600:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d02f      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	429a      	cmp	r2, r3
 8004614:	d028      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004616:	4b2a      	ldr	r3, [pc, #168]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800461e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004620:	4b29      	ldr	r3, [pc, #164]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004622:	2201      	movs	r2, #1
 8004624:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004626:	4b28      	ldr	r3, [pc, #160]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800462c:	4a24      	ldr	r2, [pc, #144]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004632:	4b23      	ldr	r3, [pc, #140]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b01      	cmp	r3, #1
 800463c:	d114      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800463e:	f7fc fc7f 	bl	8000f40 <HAL_GetTick>
 8004642:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004644:	e00a      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004646:	f7fc fc7b 	bl	8000f40 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004654:	4293      	cmp	r3, r2
 8004656:	d901      	bls.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e02a      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800465c:	4b18      	ldr	r3, [pc, #96]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800465e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0ee      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004670:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004674:	d10d      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004676:	4b12      	ldr	r3, [pc, #72]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004686:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800468a:	490d      	ldr	r1, [pc, #52]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800468c:	4313      	orrs	r3, r2
 800468e:	608b      	str	r3, [r1, #8]
 8004690:	e005      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004692:	4b0b      	ldr	r3, [pc, #44]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	4a0a      	ldr	r2, [pc, #40]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004698:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800469c:	6093      	str	r3, [r2, #8]
 800469e:	4b08      	ldr	r3, [pc, #32]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046aa:	4905      	ldr	r1, [pc, #20]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	42470068 	.word	0x42470068
 80046c0:	40023800 	.word	0x40023800
 80046c4:	40007000 	.word	0x40007000
 80046c8:	42470e40 	.word	0x42470e40

080046cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d13f      	bne.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80046ea:	4b24      	ldr	r3, [pc, #144]	@ (800477c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d006      	beq.n	8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004700:	d12f      	bne.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004702:	4b1f      	ldr	r3, [pc, #124]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004704:	617b      	str	r3, [r7, #20]
          break;
 8004706:	e02f      	b.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004708:	4b1c      	ldr	r3, [pc, #112]	@ (800477c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004710:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004714:	d108      	bne.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004716:	4b19      	ldr	r3, [pc, #100]	@ (800477c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800471e:	4a19      	ldr	r2, [pc, #100]	@ (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004720:	fbb2 f3f3 	udiv	r3, r2, r3
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	e007      	b.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004728:	4b14      	ldr	r3, [pc, #80]	@ (800477c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004730:	4a15      	ldr	r2, [pc, #84]	@ (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004732:	fbb2 f3f3 	udiv	r3, r2, r3
 8004736:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004738:	4b10      	ldr	r3, [pc, #64]	@ (800477c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800473a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800473e:	099b      	lsrs	r3, r3, #6
 8004740:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	fb02 f303 	mul.w	r3, r2, r3
 800474a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800474c:	4b0b      	ldr	r3, [pc, #44]	@ (800477c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800474e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004752:	0f1b      	lsrs	r3, r3, #28
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	fbb2 f3f3 	udiv	r3, r2, r3
 800475e:	617b      	str	r3, [r7, #20]
          break;
 8004760:	e002      	b.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	617b      	str	r3, [r7, #20]
          break;
 8004766:	bf00      	nop
        }
      }
      break;
 8004768:	e000      	b.n	800476c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 800476a:	bf00      	nop
    }
  }
  return frequency;
 800476c:	697b      	ldr	r3, [r7, #20]
}
 800476e:	4618      	mov	r0, r3
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40023800 	.word	0x40023800
 8004780:	00bb8000 	.word	0x00bb8000
 8004784:	007a1200 	.word	0x007a1200
 8004788:	00f42400 	.word	0x00f42400

0800478c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e07b      	b.n	8004896 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d108      	bne.n	80047b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047ae:	d009      	beq.n	80047c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	61da      	str	r2, [r3, #28]
 80047b6:	e005      	b.n	80047c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d106      	bne.n	80047e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7fc fa26 	bl	8000c30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800480c:	431a      	orrs	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	431a      	orrs	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004834:	431a      	orrs	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004848:	ea42 0103 	orr.w	r1, r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004850:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	0c1b      	lsrs	r3, r3, #16
 8004862:	f003 0104 	and.w	r1, r3, #4
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486a:	f003 0210 	and.w	r2, r3, #16
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	69da      	ldr	r2, [r3, #28]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004884:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b082      	sub	sp, #8
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e041      	b.n	8004934 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d106      	bne.n	80048ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7fc f9fb 	bl	8000cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2202      	movs	r2, #2
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3304      	adds	r3, #4
 80048da:	4619      	mov	r1, r3
 80048dc:	4610      	mov	r0, r2
 80048de:	f000 f9b5 	bl	8004c4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b01      	cmp	r3, #1
 800494e:	d001      	beq.n	8004954 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e04e      	b.n	80049f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a23      	ldr	r2, [pc, #140]	@ (8004a00 <HAL_TIM_Base_Start_IT+0xc4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d022      	beq.n	80049bc <HAL_TIM_Base_Start_IT+0x80>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800497e:	d01d      	beq.n	80049bc <HAL_TIM_Base_Start_IT+0x80>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a1f      	ldr	r2, [pc, #124]	@ (8004a04 <HAL_TIM_Base_Start_IT+0xc8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d018      	beq.n	80049bc <HAL_TIM_Base_Start_IT+0x80>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a1e      	ldr	r2, [pc, #120]	@ (8004a08 <HAL_TIM_Base_Start_IT+0xcc>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d013      	beq.n	80049bc <HAL_TIM_Base_Start_IT+0x80>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a1c      	ldr	r2, [pc, #112]	@ (8004a0c <HAL_TIM_Base_Start_IT+0xd0>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00e      	beq.n	80049bc <HAL_TIM_Base_Start_IT+0x80>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004a10 <HAL_TIM_Base_Start_IT+0xd4>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d009      	beq.n	80049bc <HAL_TIM_Base_Start_IT+0x80>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a19      	ldr	r2, [pc, #100]	@ (8004a14 <HAL_TIM_Base_Start_IT+0xd8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d004      	beq.n	80049bc <HAL_TIM_Base_Start_IT+0x80>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a18      	ldr	r2, [pc, #96]	@ (8004a18 <HAL_TIM_Base_Start_IT+0xdc>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d111      	bne.n	80049e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2b06      	cmp	r3, #6
 80049cc:	d010      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f042 0201 	orr.w	r2, r2, #1
 80049dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049de:	e007      	b.n	80049f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0201 	orr.w	r2, r2, #1
 80049ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40010000 	.word	0x40010000
 8004a04:	40000400 	.word	0x40000400
 8004a08:	40000800 	.word	0x40000800
 8004a0c:	40000c00 	.word	0x40000c00
 8004a10:	40010400 	.word	0x40010400
 8004a14:	40014000 	.word	0x40014000
 8004a18:	40001800 	.word	0x40001800

08004a1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d020      	beq.n	8004a80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d01b      	beq.n	8004a80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0202 	mvn.w	r2, #2
 8004a50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f8d2 	bl	8004c10 <HAL_TIM_IC_CaptureCallback>
 8004a6c:	e005      	b.n	8004a7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f8c4 	bl	8004bfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f8d5 	bl	8004c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f003 0304 	and.w	r3, r3, #4
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d020      	beq.n	8004acc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d01b      	beq.n	8004acc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0204 	mvn.w	r2, #4
 8004a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f8ac 	bl	8004c10 <HAL_TIM_IC_CaptureCallback>
 8004ab8:	e005      	b.n	8004ac6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f89e 	bl	8004bfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f8af 	bl	8004c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d020      	beq.n	8004b18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f003 0308 	and.w	r3, r3, #8
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d01b      	beq.n	8004b18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f06f 0208 	mvn.w	r2, #8
 8004ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2204      	movs	r2, #4
 8004aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f886 	bl	8004c10 <HAL_TIM_IC_CaptureCallback>
 8004b04:	e005      	b.n	8004b12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f878 	bl	8004bfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f889 	bl	8004c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f003 0310 	and.w	r3, r3, #16
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d020      	beq.n	8004b64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f003 0310 	and.w	r3, r3, #16
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01b      	beq.n	8004b64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f06f 0210 	mvn.w	r2, #16
 8004b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2208      	movs	r2, #8
 8004b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f860 	bl	8004c10 <HAL_TIM_IC_CaptureCallback>
 8004b50:	e005      	b.n	8004b5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f852 	bl	8004bfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f863 	bl	8004c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00c      	beq.n	8004b88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d007      	beq.n	8004b88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0201 	mvn.w	r2, #1
 8004b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7fb ff48 	bl	8000a18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00c      	beq.n	8004bac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d007      	beq.n	8004bac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f906 	bl	8004db8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00c      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d007      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f834 	bl	8004c38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f003 0320 	and.w	r3, r3, #32
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00c      	beq.n	8004bf4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f003 0320 	and.w	r3, r3, #32
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d007      	beq.n	8004bf4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0220 	mvn.w	r2, #32
 8004bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f8d8 	bl	8004da4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bf4:	bf00      	nop
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a46      	ldr	r2, [pc, #280]	@ (8004d78 <TIM_Base_SetConfig+0x12c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d013      	beq.n	8004c8c <TIM_Base_SetConfig+0x40>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c6a:	d00f      	beq.n	8004c8c <TIM_Base_SetConfig+0x40>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a43      	ldr	r2, [pc, #268]	@ (8004d7c <TIM_Base_SetConfig+0x130>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d00b      	beq.n	8004c8c <TIM_Base_SetConfig+0x40>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a42      	ldr	r2, [pc, #264]	@ (8004d80 <TIM_Base_SetConfig+0x134>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d007      	beq.n	8004c8c <TIM_Base_SetConfig+0x40>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a41      	ldr	r2, [pc, #260]	@ (8004d84 <TIM_Base_SetConfig+0x138>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d003      	beq.n	8004c8c <TIM_Base_SetConfig+0x40>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a40      	ldr	r2, [pc, #256]	@ (8004d88 <TIM_Base_SetConfig+0x13c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d108      	bne.n	8004c9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a35      	ldr	r2, [pc, #212]	@ (8004d78 <TIM_Base_SetConfig+0x12c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d02b      	beq.n	8004cfe <TIM_Base_SetConfig+0xb2>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cac:	d027      	beq.n	8004cfe <TIM_Base_SetConfig+0xb2>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a32      	ldr	r2, [pc, #200]	@ (8004d7c <TIM_Base_SetConfig+0x130>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d023      	beq.n	8004cfe <TIM_Base_SetConfig+0xb2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a31      	ldr	r2, [pc, #196]	@ (8004d80 <TIM_Base_SetConfig+0x134>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d01f      	beq.n	8004cfe <TIM_Base_SetConfig+0xb2>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a30      	ldr	r2, [pc, #192]	@ (8004d84 <TIM_Base_SetConfig+0x138>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d01b      	beq.n	8004cfe <TIM_Base_SetConfig+0xb2>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a2f      	ldr	r2, [pc, #188]	@ (8004d88 <TIM_Base_SetConfig+0x13c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d017      	beq.n	8004cfe <TIM_Base_SetConfig+0xb2>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a2e      	ldr	r2, [pc, #184]	@ (8004d8c <TIM_Base_SetConfig+0x140>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d013      	beq.n	8004cfe <TIM_Base_SetConfig+0xb2>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a2d      	ldr	r2, [pc, #180]	@ (8004d90 <TIM_Base_SetConfig+0x144>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d00f      	beq.n	8004cfe <TIM_Base_SetConfig+0xb2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a2c      	ldr	r2, [pc, #176]	@ (8004d94 <TIM_Base_SetConfig+0x148>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d00b      	beq.n	8004cfe <TIM_Base_SetConfig+0xb2>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a2b      	ldr	r2, [pc, #172]	@ (8004d98 <TIM_Base_SetConfig+0x14c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d007      	beq.n	8004cfe <TIM_Base_SetConfig+0xb2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a2a      	ldr	r2, [pc, #168]	@ (8004d9c <TIM_Base_SetConfig+0x150>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d003      	beq.n	8004cfe <TIM_Base_SetConfig+0xb2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a29      	ldr	r2, [pc, #164]	@ (8004da0 <TIM_Base_SetConfig+0x154>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d108      	bne.n	8004d10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a10      	ldr	r2, [pc, #64]	@ (8004d78 <TIM_Base_SetConfig+0x12c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d003      	beq.n	8004d44 <TIM_Base_SetConfig+0xf8>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a12      	ldr	r2, [pc, #72]	@ (8004d88 <TIM_Base_SetConfig+0x13c>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d103      	bne.n	8004d4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d105      	bne.n	8004d6a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	f023 0201 	bic.w	r2, r3, #1
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	611a      	str	r2, [r3, #16]
  }
}
 8004d6a:	bf00      	nop
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	40010000 	.word	0x40010000
 8004d7c:	40000400 	.word	0x40000400
 8004d80:	40000800 	.word	0x40000800
 8004d84:	40000c00 	.word	0x40000c00
 8004d88:	40010400 	.word	0x40010400
 8004d8c:	40014000 	.word	0x40014000
 8004d90:	40014400 	.word	0x40014400
 8004d94:	40014800 	.word	0x40014800
 8004d98:	40001800 	.word	0x40001800
 8004d9c:	40001c00 	.word	0x40001c00
 8004da0:	40002000 	.word	0x40002000

08004da4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f043 0201 	orr.w	r2, r3, #1
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b083      	sub	sp, #12
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f023 0201 	bic.w	r2, r3, #1
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	3301      	adds	r3, #1
 8004e22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e2a:	d901      	bls.n	8004e30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e01b      	b.n	8004e68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	daf2      	bge.n	8004e1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	019b      	lsls	r3, r3, #6
 8004e40:	f043 0220 	orr.w	r2, r3, #32
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e54:	d901      	bls.n	8004e5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e006      	b.n	8004e68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	f003 0320 	and.w	r3, r3, #32
 8004e62:	2b20      	cmp	r3, #32
 8004e64:	d0f0      	beq.n	8004e48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	3301      	adds	r3, #1
 8004e84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e8c:	d901      	bls.n	8004e92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e018      	b.n	8004ec4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	daf2      	bge.n	8004e80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2210      	movs	r2, #16
 8004ea2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004eb0:	d901      	bls.n	8004eb6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e006      	b.n	8004ec4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0310 	and.w	r3, r3, #16
 8004ebe:	2b10      	cmp	r3, #16
 8004ec0:	d0f0      	beq.n	8004ea4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b08b      	sub	sp, #44	@ 0x2c
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	4613      	mov	r3, r2
 8004edc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004ee6:	88fb      	ldrh	r3, [r7, #6]
 8004ee8:	089b      	lsrs	r3, r3, #2
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004eee:	88fb      	ldrh	r3, [r7, #6]
 8004ef0:	f003 0303 	and.w	r3, r3, #3
 8004ef4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	623b      	str	r3, [r7, #32]
 8004efa:	e014      	b.n	8004f26 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f06:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f10:	3301      	adds	r3, #1
 8004f12:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f16:	3301      	adds	r3, #1
 8004f18:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004f20:	6a3b      	ldr	r3, [r7, #32]
 8004f22:	3301      	adds	r3, #1
 8004f24:	623b      	str	r3, [r7, #32]
 8004f26:	6a3a      	ldr	r2, [r7, #32]
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d3e6      	bcc.n	8004efc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004f2e:	8bfb      	ldrh	r3, [r7, #30]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d01e      	beq.n	8004f72 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f3e:	461a      	mov	r2, r3
 8004f40:	f107 0310 	add.w	r3, r7, #16
 8004f44:	6812      	ldr	r2, [r2, #0]
 8004f46:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	fa22 f303 	lsr.w	r3, r2, r3
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f58:	701a      	strb	r2, [r3, #0]
      i++;
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f62:	3301      	adds	r3, #1
 8004f64:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004f66:	8bfb      	ldrh	r3, [r7, #30]
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004f6c:	8bfb      	ldrh	r3, [r7, #30]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1ea      	bne.n	8004f48 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	372c      	adds	r7, #44	@ 0x2c
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	4013      	ands	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004f98:	68fb      	ldr	r3, [r7, #12]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b085      	sub	sp, #20
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	460b      	mov	r3, r1
 8004fb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8004fb6:	78fb      	ldrb	r3, [r7, #3]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8004fc6:	78fb      	ldrb	r3, [r7, #3]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004fda:	68bb      	ldr	r3, [r7, #8]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	460b      	mov	r3, r1
 800500e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005022:	f023 0303 	bic.w	r3, r3, #3
 8005026:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	68f9      	ldr	r1, [r7, #12]
 8005038:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800503c:	4313      	orrs	r3, r2
 800503e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005040:	78fb      	ldrb	r3, [r7, #3]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d107      	bne.n	8005056 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800504c:	461a      	mov	r2, r3
 800504e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005052:	6053      	str	r3, [r2, #4]
 8005054:	e00c      	b.n	8005070 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005056:	78fb      	ldrb	r3, [r7, #3]
 8005058:	2b02      	cmp	r3, #2
 800505a:	d107      	bne.n	800506c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005062:	461a      	mov	r2, r3
 8005064:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005068:	6053      	str	r3, [r2, #4]
 800506a:	e001      	b.n	8005070 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e000      	b.n	8005072 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800507e:	b480      	push	{r7}
 8005080:	b085      	sub	sp, #20
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	b29b      	uxth	r3, r3
}
 8005094:	4618      	mov	r0, r3
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b089      	sub	sp, #36	@ 0x24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	460b      	mov	r3, r1
 80050aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80050b0:	78fb      	ldrb	r3, [r7, #3]
 80050b2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	0c9b      	lsrs	r3, r3, #18
 80050c8:	f003 0303 	and.w	r3, r3, #3
 80050cc:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	0fdb      	lsrs	r3, r3, #31
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	0fdb      	lsrs	r3, r3, #31
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 0320 	and.w	r3, r3, #32
 8005102:	2b20      	cmp	r3, #32
 8005104:	d10d      	bne.n	8005122 <USB_HC_Halt+0x82>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10a      	bne.n	8005122 <USB_HC_Halt+0x82>
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d005      	beq.n	800511e <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d002      	beq.n	800511e <USB_HC_Halt+0x7e>
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	2b03      	cmp	r3, #3
 800511c:	d101      	bne.n	8005122 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800511e:	2300      	movs	r3, #0
 8005120:	e0d8      	b.n	80052d4 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d002      	beq.n	800512e <USB_HC_Halt+0x8e>
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2b02      	cmp	r3, #2
 800512c:	d173      	bne.n	8005216 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	4413      	add	r3, r2
 8005136:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	0151      	lsls	r1, r2, #5
 8005140:	69fa      	ldr	r2, [r7, #28]
 8005142:	440a      	add	r2, r1
 8005144:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005148:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800514c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 0320 	and.w	r3, r3, #32
 8005156:	2b00      	cmp	r3, #0
 8005158:	d14a      	bne.n	80051f0 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d133      	bne.n	80051ce <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	4413      	add	r3, r2
 800516e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	0151      	lsls	r1, r2, #5
 8005178:	69fa      	ldr	r2, [r7, #28]
 800517a:	440a      	add	r2, r1
 800517c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005180:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005184:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	4413      	add	r3, r2
 800518e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	0151      	lsls	r1, r2, #5
 8005198:	69fa      	ldr	r2, [r7, #28]
 800519a:	440a      	add	r2, r1
 800519c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80051a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80051a4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	3301      	adds	r3, #1
 80051aa:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80051b2:	d82e      	bhi.n	8005212 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051ca:	d0ec      	beq.n	80051a6 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051cc:	e081      	b.n	80052d2 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	0151      	lsls	r1, r2, #5
 80051e0:	69fa      	ldr	r2, [r7, #28]
 80051e2:	440a      	add	r2, r1
 80051e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80051e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80051ec:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051ee:	e070      	b.n	80052d2 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	0151      	lsls	r1, r2, #5
 8005202:	69fa      	ldr	r2, [r7, #28]
 8005204:	440a      	add	r2, r1
 8005206:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800520a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800520e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005210:	e05f      	b.n	80052d2 <USB_HC_Halt+0x232>
            break;
 8005212:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005214:	e05d      	b.n	80052d2 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	4413      	add	r3, r2
 800521e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	0151      	lsls	r1, r2, #5
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	440a      	add	r2, r1
 800522c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005230:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005234:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d133      	bne.n	80052ae <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	4413      	add	r3, r2
 800524e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	0151      	lsls	r1, r2, #5
 8005258:	69fa      	ldr	r2, [r7, #28]
 800525a:	440a      	add	r2, r1
 800525c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005260:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005264:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	4413      	add	r3, r2
 800526e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	0151      	lsls	r1, r2, #5
 8005278:	69fa      	ldr	r2, [r7, #28]
 800527a:	440a      	add	r2, r1
 800527c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005280:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005284:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	3301      	adds	r3, #1
 800528a:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005292:	d81d      	bhi.n	80052d0 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	4413      	add	r3, r2
 800529c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052aa:	d0ec      	beq.n	8005286 <USB_HC_Halt+0x1e6>
 80052ac:	e011      	b.n	80052d2 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	0151      	lsls	r1, r2, #5
 80052c0:	69fa      	ldr	r2, [r7, #28]
 80052c2:	440a      	add	r2, r1
 80052c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80052c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	e000      	b.n	80052d2 <USB_HC_Halt+0x232>
          break;
 80052d0:	bf00      	nop
    }
  }

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3724      	adds	r7, #36	@ 0x24
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b088      	sub	sp, #32
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80052e8:	2300      	movs	r3, #0
 80052ea:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7ff fd7a 	bl	8004dee <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052fa:	2110      	movs	r1, #16
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7ff fd87 	bl	8004e10 <USB_FlushTxFifo>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7ff fdb1 	bl	8004e74 <USB_FlushRxFifo>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800531c:	2300      	movs	r3, #0
 800531e:	61bb      	str	r3, [r7, #24]
 8005320:	e01f      	b.n	8005362 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	4413      	add	r3, r2
 800532a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005338:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005340:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005348:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	4413      	add	r3, r2
 8005352:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005356:	461a      	mov	r2, r3
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	3301      	adds	r3, #1
 8005360:	61bb      	str	r3, [r7, #24]
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	2b0f      	cmp	r3, #15
 8005366:	d9dc      	bls.n	8005322 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005368:	2300      	movs	r3, #0
 800536a:	61bb      	str	r3, [r7, #24]
 800536c:	e034      	b.n	80053d8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	4413      	add	r3, r2
 8005376:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005384:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800538c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005394:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	4413      	add	r3, r2
 800539e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053a2:	461a      	mov	r2, r3
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	3301      	adds	r3, #1
 80053ac:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80053b4:	d80c      	bhi.n	80053d0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053cc:	d0ec      	beq.n	80053a8 <USB_StopHost+0xc8>
 80053ce:	e000      	b.n	80053d2 <USB_StopHost+0xf2>
        break;
 80053d0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	3301      	adds	r3, #1
 80053d6:	61bb      	str	r3, [r7, #24]
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	2b0f      	cmp	r3, #15
 80053dc:	d9c7      	bls.n	800536e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053e4:	461a      	mov	r2, r3
 80053e6:	f04f 33ff 	mov.w	r3, #4294967295
 80053ea:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f04f 32ff 	mov.w	r2, #4294967295
 80053f2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7ff fce9 	bl	8004dcc <USB_EnableGlobalInt>

  return ret;
 80053fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3720      	adds	r7, #32
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f804 	bl	8005428 <USBH_HandleSof>
}
 8005420:	bf00      	nop
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b0b      	cmp	r3, #11
 8005438:	d10a      	bne.n	8005450 <USBH_HandleSof+0x28>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005440:	2b00      	cmp	r3, #0
 8005442:	d005      	beq.n	8005450 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	4798      	blx	r3
  }
}
 8005450:	bf00      	nop
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800547c:	2300      	movs	r3, #0
 800547e:	2200      	movs	r2, #0
 8005480:	f000 f8d0 	bl	8005624 <osMessageQueuePut>
#endif
#endif

  return;
 8005484:	bf00      	nop
}
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800549c:	bf00      	nop
}
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80054dc:	2300      	movs	r3, #0
 80054de:	2200      	movs	r2, #0
 80054e0:	f000 f8a0 	bl	8005624 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b082      	sub	sp, #8
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f002 fdc2 	bl	8008098 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	791b      	ldrb	r3, [r3, #4]
 8005518:	4619      	mov	r1, r3
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f830 	bl	8005580 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	795b      	ldrb	r3, [r3, #5]
 8005524:	4619      	mov	r1, r3
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f82a 	bl	8005580 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8005540:	2300      	movs	r3, #0
 8005542:	2200      	movs	r2, #0
 8005544:	f000 f86e 	bl	8005624 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b082      	sub	sp, #8
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800556e:	2300      	movs	r3, #0
 8005570:	2200      	movs	r2, #0
 8005572:	f000 f857 	bl	8005624 <osMessageQueuePut>
#endif

  return USBH_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	460b      	mov	r3, r1
 800558a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800558c:	78fb      	ldrb	r3, [r7, #3]
 800558e:	2b0f      	cmp	r3, #15
 8005590:	d80d      	bhi.n	80055ae <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8005592:	78fb      	ldrb	r3, [r7, #3]
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	33e0      	adds	r3, #224	@ 0xe0
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	78fb      	ldrb	r3, [r7, #3]
 80055a0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	33e0      	adds	r3, #224	@ 0xe0
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	440b      	add	r3, r1
 80055ac:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80055bc:	b580      	push	{r7, lr}
 80055be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80055c0:	4b05      	ldr	r3, [pc, #20]	@ (80055d8 <SysTick_Handler+0x1c>)
 80055c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80055c4:	f001 fc92 	bl	8006eec <xTaskGetSchedulerState>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d001      	beq.n	80055d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80055ce:	f002 fa8b 	bl	8007ae8 <xPortSysTickHandler>
  }
}
 80055d2:	bf00      	nop
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	e000e010 	.word	0xe000e010

080055dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055e2:	f3ef 8305 	mrs	r3, IPSR
 80055e6:	603b      	str	r3, [r7, #0]
  return(result);
 80055e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80055ee:	f06f 0305 	mvn.w	r3, #5
 80055f2:	607b      	str	r3, [r7, #4]
 80055f4:	e00c      	b.n	8005610 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80055f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005620 <osKernelInitialize+0x44>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d105      	bne.n	800560a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80055fe:	4b08      	ldr	r3, [pc, #32]	@ (8005620 <osKernelInitialize+0x44>)
 8005600:	2201      	movs	r2, #1
 8005602:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005604:	2300      	movs	r3, #0
 8005606:	607b      	str	r3, [r7, #4]
 8005608:	e002      	b.n	8005610 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800560a:	f04f 33ff 	mov.w	r3, #4294967295
 800560e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005610:	687b      	ldr	r3, [r7, #4]
}
 8005612:	4618      	mov	r0, r3
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	20000204 	.word	0x20000204

08005624 <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005624:	b580      	push	{r7, lr}
 8005626:	b088      	sub	sp, #32
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	603b      	str	r3, [r7, #0]
 8005630:	4613      	mov	r3, r2
 8005632:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005638:	2300      	movs	r3, #0
 800563a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800563c:	f3ef 8305 	mrs	r3, IPSR
 8005640:	617b      	str	r3, [r7, #20]
  return(result);
 8005642:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005644:	2b00      	cmp	r3, #0
 8005646:	d028      	beq.n	800569a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d005      	beq.n	800565a <osMessageQueuePut+0x36>
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d002      	beq.n	800565a <osMessageQueuePut+0x36>
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800565a:	f06f 0303 	mvn.w	r3, #3
 800565e:	61fb      	str	r3, [r7, #28]
 8005660:	e038      	b.n	80056d4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005662:	2300      	movs	r3, #0
 8005664:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005666:	f107 0210 	add.w	r2, r7, #16
 800566a:	2300      	movs	r3, #0
 800566c:	68b9      	ldr	r1, [r7, #8]
 800566e:	69b8      	ldr	r0, [r7, #24]
 8005670:	f000 fb2c 	bl	8005ccc <xQueueGenericSendFromISR>
 8005674:	4603      	mov	r3, r0
 8005676:	2b01      	cmp	r3, #1
 8005678:	d003      	beq.n	8005682 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800567a:	f06f 0302 	mvn.w	r3, #2
 800567e:	61fb      	str	r3, [r7, #28]
 8005680:	e028      	b.n	80056d4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d025      	beq.n	80056d4 <osMessageQueuePut+0xb0>
 8005688:	4b15      	ldr	r3, [pc, #84]	@ (80056e0 <osMessageQueuePut+0xbc>)
 800568a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	e01c      	b.n	80056d4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <osMessageQueuePut+0x82>
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d103      	bne.n	80056ae <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80056a6:	f06f 0303 	mvn.w	r3, #3
 80056aa:	61fb      	str	r3, [r7, #28]
 80056ac:	e012      	b.n	80056d4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80056ae:	2300      	movs	r3, #0
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	68b9      	ldr	r1, [r7, #8]
 80056b4:	69b8      	ldr	r0, [r7, #24]
 80056b6:	f000 fa07 	bl	8005ac8 <xQueueGenericSend>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d009      	beq.n	80056d4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80056c6:	f06f 0301 	mvn.w	r3, #1
 80056ca:	61fb      	str	r3, [r7, #28]
 80056cc:	e002      	b.n	80056d4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80056ce:	f06f 0302 	mvn.w	r3, #2
 80056d2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80056d4:	69fb      	ldr	r3, [r7, #28]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3720      	adds	r7, #32
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	e000ed04 	.word	0xe000ed04

080056e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	4a07      	ldr	r2, [pc, #28]	@ (8005710 <vApplicationGetIdleTaskMemory+0x2c>)
 80056f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	4a06      	ldr	r2, [pc, #24]	@ (8005714 <vApplicationGetIdleTaskMemory+0x30>)
 80056fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2280      	movs	r2, #128	@ 0x80
 8005700:	601a      	str	r2, [r3, #0]
}
 8005702:	bf00      	nop
 8005704:	3714      	adds	r7, #20
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	20000208 	.word	0x20000208
 8005714:	200002b0 	.word	0x200002b0

08005718 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4a07      	ldr	r2, [pc, #28]	@ (8005744 <vApplicationGetTimerTaskMemory+0x2c>)
 8005728:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	4a06      	ldr	r2, [pc, #24]	@ (8005748 <vApplicationGetTimerTaskMemory+0x30>)
 800572e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005736:	601a      	str	r2, [r3, #0]
}
 8005738:	bf00      	nop
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	200004b0 	.word	0x200004b0
 8005748:	20000558 	.word	0x20000558

0800574c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f103 0208 	add.w	r2, r3, #8
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f04f 32ff 	mov.w	r2, #4294967295
 8005764:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f103 0208 	add.w	r2, r3, #8
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f103 0208 	add.w	r2, r3, #8
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057a6:	b480      	push	{r7}
 80057a8:	b085      	sub	sp, #20
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	601a      	str	r2, [r3, #0]
}
 80057e2:	bf00      	nop
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057ee:	b480      	push	{r7}
 80057f0:	b085      	sub	sp, #20
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005804:	d103      	bne.n	800580e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	e00c      	b.n	8005828 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	3308      	adds	r3, #8
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	e002      	b.n	800581c <vListInsert+0x2e>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	60fb      	str	r3, [r7, #12]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	429a      	cmp	r2, r3
 8005826:	d2f6      	bcs.n	8005816 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	601a      	str	r2, [r3, #0]
}
 8005854:	bf00      	nop
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6892      	ldr	r2, [r2, #8]
 8005876:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6852      	ldr	r2, [r2, #4]
 8005880:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	429a      	cmp	r2, r3
 800588a:	d103      	bne.n	8005894 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689a      	ldr	r2, [r3, #8]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	1e5a      	subs	r2, r3, #1
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3714      	adds	r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10b      	bne.n	80058e0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80058c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058cc:	f383 8811 	msr	BASEPRI, r3
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80058da:	bf00      	nop
 80058dc:	bf00      	nop
 80058de:	e7fd      	b.n	80058dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80058e0:	f002 f872 	bl	80079c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ec:	68f9      	ldr	r1, [r7, #12]
 80058ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80058f0:	fb01 f303 	mul.w	r3, r1, r3
 80058f4:	441a      	add	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005910:	3b01      	subs	r3, #1
 8005912:	68f9      	ldr	r1, [r7, #12]
 8005914:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005916:	fb01 f303 	mul.w	r3, r1, r3
 800591a:	441a      	add	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	22ff      	movs	r2, #255	@ 0xff
 8005924:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	22ff      	movs	r2, #255	@ 0xff
 800592c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d114      	bne.n	8005960 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d01a      	beq.n	8005974 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	3310      	adds	r3, #16
 8005942:	4618      	mov	r0, r3
 8005944:	f001 f90c 	bl	8006b60 <xTaskRemoveFromEventList>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d012      	beq.n	8005974 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800594e:	4b0d      	ldr	r3, [pc, #52]	@ (8005984 <xQueueGenericReset+0xd0>)
 8005950:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005954:	601a      	str	r2, [r3, #0]
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	e009      	b.n	8005974 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	3310      	adds	r3, #16
 8005964:	4618      	mov	r0, r3
 8005966:	f7ff fef1 	bl	800574c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	3324      	adds	r3, #36	@ 0x24
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff feec 	bl	800574c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005974:	f002 f85a 	bl	8007a2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005978:	2301      	movs	r3, #1
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	e000ed04 	.word	0xe000ed04

08005988 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005988:	b580      	push	{r7, lr}
 800598a:	b08e      	sub	sp, #56	@ 0x38
 800598c:	af02      	add	r7, sp, #8
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
 8005994:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10b      	bne.n	80059b4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80059ae:	bf00      	nop
 80059b0:	bf00      	nop
 80059b2:	e7fd      	b.n	80059b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10b      	bne.n	80059d2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80059ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80059cc:	bf00      	nop
 80059ce:	bf00      	nop
 80059d0:	e7fd      	b.n	80059ce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <xQueueGenericCreateStatic+0x56>
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <xQueueGenericCreateStatic+0x5a>
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <xQueueGenericCreateStatic+0x5c>
 80059e2:	2300      	movs	r3, #0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10b      	bne.n	8005a00 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	623b      	str	r3, [r7, #32]
}
 80059fa:	bf00      	nop
 80059fc:	bf00      	nop
 80059fe:	e7fd      	b.n	80059fc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d102      	bne.n	8005a0c <xQueueGenericCreateStatic+0x84>
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <xQueueGenericCreateStatic+0x88>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e000      	b.n	8005a12 <xQueueGenericCreateStatic+0x8a>
 8005a10:	2300      	movs	r3, #0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10b      	bne.n	8005a2e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	61fb      	str	r3, [r7, #28]
}
 8005a28:	bf00      	nop
 8005a2a:	bf00      	nop
 8005a2c:	e7fd      	b.n	8005a2a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a2e:	2350      	movs	r3, #80	@ 0x50
 8005a30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2b50      	cmp	r3, #80	@ 0x50
 8005a36:	d00b      	beq.n	8005a50 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a3c:	f383 8811 	msr	BASEPRI, r3
 8005a40:	f3bf 8f6f 	isb	sy
 8005a44:	f3bf 8f4f 	dsb	sy
 8005a48:	61bb      	str	r3, [r7, #24]
}
 8005a4a:	bf00      	nop
 8005a4c:	bf00      	nop
 8005a4e:	e7fd      	b.n	8005a4c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a50:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00d      	beq.n	8005a78 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a64:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	68b9      	ldr	r1, [r7, #8]
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 f805 	bl	8005a82 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3730      	adds	r7, #48	@ 0x30
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b084      	sub	sp, #16
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	60f8      	str	r0, [r7, #12]
 8005a8a:	60b9      	str	r1, [r7, #8]
 8005a8c:	607a      	str	r2, [r7, #4]
 8005a8e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d103      	bne.n	8005a9e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	e002      	b.n	8005aa4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	69b8      	ldr	r0, [r7, #24]
 8005ab4:	f7ff fefe 	bl	80058b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	78fa      	ldrb	r2, [r7, #3]
 8005abc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005ac0:	bf00      	nop
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b08e      	sub	sp, #56	@ 0x38
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
 8005ad4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10b      	bne.n	8005afc <xQueueGenericSend+0x34>
	__asm volatile
 8005ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005af6:	bf00      	nop
 8005af8:	bf00      	nop
 8005afa:	e7fd      	b.n	8005af8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d103      	bne.n	8005b0a <xQueueGenericSend+0x42>
 8005b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <xQueueGenericSend+0x46>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e000      	b.n	8005b10 <xQueueGenericSend+0x48>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10b      	bne.n	8005b2c <xQueueGenericSend+0x64>
	__asm volatile
 8005b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b26:	bf00      	nop
 8005b28:	bf00      	nop
 8005b2a:	e7fd      	b.n	8005b28 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d103      	bne.n	8005b3a <xQueueGenericSend+0x72>
 8005b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d101      	bne.n	8005b3e <xQueueGenericSend+0x76>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e000      	b.n	8005b40 <xQueueGenericSend+0x78>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10b      	bne.n	8005b5c <xQueueGenericSend+0x94>
	__asm volatile
 8005b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	623b      	str	r3, [r7, #32]
}
 8005b56:	bf00      	nop
 8005b58:	bf00      	nop
 8005b5a:	e7fd      	b.n	8005b58 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b5c:	f001 f9c6 	bl	8006eec <xTaskGetSchedulerState>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d102      	bne.n	8005b6c <xQueueGenericSend+0xa4>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <xQueueGenericSend+0xa8>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e000      	b.n	8005b72 <xQueueGenericSend+0xaa>
 8005b70:	2300      	movs	r3, #0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10b      	bne.n	8005b8e <xQueueGenericSend+0xc6>
	__asm volatile
 8005b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	61fb      	str	r3, [r7, #28]
}
 8005b88:	bf00      	nop
 8005b8a:	bf00      	nop
 8005b8c:	e7fd      	b.n	8005b8a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b8e:	f001 ff1b 	bl	80079c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d302      	bcc.n	8005ba4 <xQueueGenericSend+0xdc>
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d129      	bne.n	8005bf8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	68b9      	ldr	r1, [r7, #8]
 8005ba8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005baa:	f000 fa0f 	bl	8005fcc <prvCopyDataToQueue>
 8005bae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d010      	beq.n	8005bda <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bba:	3324      	adds	r3, #36	@ 0x24
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 ffcf 	bl	8006b60 <xTaskRemoveFromEventList>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d013      	beq.n	8005bf0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005bc8:	4b3f      	ldr	r3, [pc, #252]	@ (8005cc8 <xQueueGenericSend+0x200>)
 8005bca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bce:	601a      	str	r2, [r3, #0]
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	e00a      	b.n	8005bf0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d007      	beq.n	8005bf0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005be0:	4b39      	ldr	r3, [pc, #228]	@ (8005cc8 <xQueueGenericSend+0x200>)
 8005be2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005bf0:	f001 ff1c 	bl	8007a2c <vPortExitCritical>
				return pdPASS;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e063      	b.n	8005cc0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d103      	bne.n	8005c06 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005bfe:	f001 ff15 	bl	8007a2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c02:	2300      	movs	r3, #0
 8005c04:	e05c      	b.n	8005cc0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d106      	bne.n	8005c1a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c0c:	f107 0314 	add.w	r3, r7, #20
 8005c10:	4618      	mov	r0, r3
 8005c12:	f001 f809 	bl	8006c28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c16:	2301      	movs	r3, #1
 8005c18:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c1a:	f001 ff07 	bl	8007a2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c1e:	f000 fd71 	bl	8006704 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c22:	f001 fed1 	bl	80079c8 <vPortEnterCritical>
 8005c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c2c:	b25b      	sxtb	r3, r3
 8005c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c32:	d103      	bne.n	8005c3c <xQueueGenericSend+0x174>
 8005c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c42:	b25b      	sxtb	r3, r3
 8005c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c48:	d103      	bne.n	8005c52 <xQueueGenericSend+0x18a>
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c52:	f001 feeb 	bl	8007a2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c56:	1d3a      	adds	r2, r7, #4
 8005c58:	f107 0314 	add.w	r3, r7, #20
 8005c5c:	4611      	mov	r1, r2
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 fff8 	bl	8006c54 <xTaskCheckForTimeOut>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d124      	bne.n	8005cb4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c6c:	f000 faa6 	bl	80061bc <prvIsQueueFull>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d018      	beq.n	8005ca8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c78:	3310      	adds	r3, #16
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	4611      	mov	r1, r2
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f000 ff1c 	bl	8006abc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005c84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c86:	f000 fa31 	bl	80060ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005c8a:	f000 fd49 	bl	8006720 <xTaskResumeAll>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f47f af7c 	bne.w	8005b8e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005c96:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc8 <xQueueGenericSend+0x200>)
 8005c98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c9c:	601a      	str	r2, [r3, #0]
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	e772      	b.n	8005b8e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ca8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005caa:	f000 fa1f 	bl	80060ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cae:	f000 fd37 	bl	8006720 <xTaskResumeAll>
 8005cb2:	e76c      	b.n	8005b8e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005cb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005cb6:	f000 fa19 	bl	80060ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cba:	f000 fd31 	bl	8006720 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005cbe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3738      	adds	r7, #56	@ 0x38
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	e000ed04 	.word	0xe000ed04

08005ccc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b090      	sub	sp, #64	@ 0x40
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
 8005cd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10b      	bne.n	8005cfc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005cf6:	bf00      	nop
 8005cf8:	bf00      	nop
 8005cfa:	e7fd      	b.n	8005cf8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d103      	bne.n	8005d0a <xQueueGenericSendFromISR+0x3e>
 8005d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <xQueueGenericSendFromISR+0x42>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e000      	b.n	8005d10 <xQueueGenericSendFromISR+0x44>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10b      	bne.n	8005d2c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d26:	bf00      	nop
 8005d28:	bf00      	nop
 8005d2a:	e7fd      	b.n	8005d28 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d103      	bne.n	8005d3a <xQueueGenericSendFromISR+0x6e>
 8005d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d101      	bne.n	8005d3e <xQueueGenericSendFromISR+0x72>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e000      	b.n	8005d40 <xQueueGenericSendFromISR+0x74>
 8005d3e:	2300      	movs	r3, #0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10b      	bne.n	8005d5c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	623b      	str	r3, [r7, #32]
}
 8005d56:	bf00      	nop
 8005d58:	bf00      	nop
 8005d5a:	e7fd      	b.n	8005d58 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d5c:	f001 ff14 	bl	8007b88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d60:	f3ef 8211 	mrs	r2, BASEPRI
 8005d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	61fa      	str	r2, [r7, #28]
 8005d76:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005d78:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d7a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d302      	bcc.n	8005d8e <xQueueGenericSendFromISR+0xc2>
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d12f      	bne.n	8005dee <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	68b9      	ldr	r1, [r7, #8]
 8005da2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005da4:	f000 f912 	bl	8005fcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005da8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db0:	d112      	bne.n	8005dd8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d016      	beq.n	8005de8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dbc:	3324      	adds	r3, #36	@ 0x24
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 fece 	bl	8006b60 <xTaskRemoveFromEventList>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00e      	beq.n	8005de8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00b      	beq.n	8005de8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	e007      	b.n	8005de8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005dd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005ddc:	3301      	adds	r3, #1
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	b25a      	sxtb	r2, r3
 8005de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005de8:	2301      	movs	r3, #1
 8005dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005dec:	e001      	b.n	8005df2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005dee:	2300      	movs	r3, #0
 8005df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005df4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005dfc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005dfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3740      	adds	r7, #64	@ 0x40
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08c      	sub	sp, #48	@ 0x30
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e14:	2300      	movs	r3, #0
 8005e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10b      	bne.n	8005e3a <xQueueReceive+0x32>
	__asm volatile
 8005e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e26:	f383 8811 	msr	BASEPRI, r3
 8005e2a:	f3bf 8f6f 	isb	sy
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	623b      	str	r3, [r7, #32]
}
 8005e34:	bf00      	nop
 8005e36:	bf00      	nop
 8005e38:	e7fd      	b.n	8005e36 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d103      	bne.n	8005e48 <xQueueReceive+0x40>
 8005e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <xQueueReceive+0x44>
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e000      	b.n	8005e4e <xQueueReceive+0x46>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10b      	bne.n	8005e6a <xQueueReceive+0x62>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	61fb      	str	r3, [r7, #28]
}
 8005e64:	bf00      	nop
 8005e66:	bf00      	nop
 8005e68:	e7fd      	b.n	8005e66 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e6a:	f001 f83f 	bl	8006eec <xTaskGetSchedulerState>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d102      	bne.n	8005e7a <xQueueReceive+0x72>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <xQueueReceive+0x76>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e000      	b.n	8005e80 <xQueueReceive+0x78>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10b      	bne.n	8005e9c <xQueueReceive+0x94>
	__asm volatile
 8005e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e88:	f383 8811 	msr	BASEPRI, r3
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	61bb      	str	r3, [r7, #24]
}
 8005e96:	bf00      	nop
 8005e98:	bf00      	nop
 8005e9a:	e7fd      	b.n	8005e98 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e9c:	f001 fd94 	bl	80079c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d01f      	beq.n	8005eec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005eac:	68b9      	ldr	r1, [r7, #8]
 8005eae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005eb0:	f000 f8f6 	bl	80060a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb6:	1e5a      	subs	r2, r3, #1
 8005eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00f      	beq.n	8005ee4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec6:	3310      	adds	r3, #16
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f000 fe49 	bl	8006b60 <xTaskRemoveFromEventList>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d007      	beq.n	8005ee4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ed4:	4b3c      	ldr	r3, [pc, #240]	@ (8005fc8 <xQueueReceive+0x1c0>)
 8005ed6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005eda:	601a      	str	r2, [r3, #0]
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ee4:	f001 fda2 	bl	8007a2c <vPortExitCritical>
				return pdPASS;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e069      	b.n	8005fc0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d103      	bne.n	8005efa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ef2:	f001 fd9b 	bl	8007a2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	e062      	b.n	8005fc0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d106      	bne.n	8005f0e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f00:	f107 0310 	add.w	r3, r7, #16
 8005f04:	4618      	mov	r0, r3
 8005f06:	f000 fe8f 	bl	8006c28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f0e:	f001 fd8d 	bl	8007a2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f12:	f000 fbf7 	bl	8006704 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f16:	f001 fd57 	bl	80079c8 <vPortEnterCritical>
 8005f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f20:	b25b      	sxtb	r3, r3
 8005f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f26:	d103      	bne.n	8005f30 <xQueueReceive+0x128>
 8005f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f36:	b25b      	sxtb	r3, r3
 8005f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3c:	d103      	bne.n	8005f46 <xQueueReceive+0x13e>
 8005f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f46:	f001 fd71 	bl	8007a2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f4a:	1d3a      	adds	r2, r7, #4
 8005f4c:	f107 0310 	add.w	r3, r7, #16
 8005f50:	4611      	mov	r1, r2
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 fe7e 	bl	8006c54 <xTaskCheckForTimeOut>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d123      	bne.n	8005fa6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f60:	f000 f916 	bl	8006190 <prvIsQueueEmpty>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d017      	beq.n	8005f9a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6c:	3324      	adds	r3, #36	@ 0x24
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	4611      	mov	r1, r2
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 fda2 	bl	8006abc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f7a:	f000 f8b7 	bl	80060ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f7e:	f000 fbcf 	bl	8006720 <xTaskResumeAll>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d189      	bne.n	8005e9c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005f88:	4b0f      	ldr	r3, [pc, #60]	@ (8005fc8 <xQueueReceive+0x1c0>)
 8005f8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	e780      	b.n	8005e9c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005f9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f9c:	f000 f8a6 	bl	80060ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fa0:	f000 fbbe 	bl	8006720 <xTaskResumeAll>
 8005fa4:	e77a      	b.n	8005e9c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005fa6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fa8:	f000 f8a0 	bl	80060ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fac:	f000 fbb8 	bl	8006720 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fb2:	f000 f8ed 	bl	8006190 <prvIsQueueEmpty>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f43f af6f 	beq.w	8005e9c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005fbe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3730      	adds	r7, #48	@ 0x30
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	e000ed04 	.word	0xe000ed04

08005fcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10d      	bne.n	8006006 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d14d      	bne.n	800608e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 ff96 	bl	8006f28 <xTaskPriorityDisinherit>
 8005ffc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	609a      	str	r2, [r3, #8]
 8006004:	e043      	b.n	800608e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d119      	bne.n	8006040 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6858      	ldr	r0, [r3, #4]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006014:	461a      	mov	r2, r3
 8006016:	68b9      	ldr	r1, [r7, #8]
 8006018:	f002 f916 	bl	8008248 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006024:	441a      	add	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	429a      	cmp	r2, r3
 8006034:	d32b      	bcc.n	800608e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	605a      	str	r2, [r3, #4]
 800603e:	e026      	b.n	800608e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	68d8      	ldr	r0, [r3, #12]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006048:	461a      	mov	r2, r3
 800604a:	68b9      	ldr	r1, [r7, #8]
 800604c:	f002 f8fc 	bl	8008248 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	68da      	ldr	r2, [r3, #12]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006058:	425b      	negs	r3, r3
 800605a:	441a      	add	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	68da      	ldr	r2, [r3, #12]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	429a      	cmp	r2, r3
 800606a:	d207      	bcs.n	800607c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006074:	425b      	negs	r3, r3
 8006076:	441a      	add	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b02      	cmp	r3, #2
 8006080:	d105      	bne.n	800608e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d002      	beq.n	800608e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	3b01      	subs	r3, #1
 800608c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006096:	697b      	ldr	r3, [r7, #20]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d018      	beq.n	80060e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ba:	441a      	add	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68da      	ldr	r2, [r3, #12]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d303      	bcc.n	80060d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68d9      	ldr	r1, [r3, #12]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060dc:	461a      	mov	r2, r3
 80060de:	6838      	ldr	r0, [r7, #0]
 80060e0:	f002 f8b2 	bl	8008248 <memcpy>
	}
}
 80060e4:	bf00      	nop
 80060e6:	3708      	adds	r7, #8
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80060f4:	f001 fc68 	bl	80079c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006100:	e011      	b.n	8006126 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006106:	2b00      	cmp	r3, #0
 8006108:	d012      	beq.n	8006130 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	3324      	adds	r3, #36	@ 0x24
 800610e:	4618      	mov	r0, r3
 8006110:	f000 fd26 	bl	8006b60 <xTaskRemoveFromEventList>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800611a:	f000 fdff 	bl	8006d1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800611e:	7bfb      	ldrb	r3, [r7, #15]
 8006120:	3b01      	subs	r3, #1
 8006122:	b2db      	uxtb	r3, r3
 8006124:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800612a:	2b00      	cmp	r3, #0
 800612c:	dce9      	bgt.n	8006102 <prvUnlockQueue+0x16>
 800612e:	e000      	b.n	8006132 <prvUnlockQueue+0x46>
					break;
 8006130:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	22ff      	movs	r2, #255	@ 0xff
 8006136:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800613a:	f001 fc77 	bl	8007a2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800613e:	f001 fc43 	bl	80079c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006148:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800614a:	e011      	b.n	8006170 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d012      	beq.n	800617a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3310      	adds	r3, #16
 8006158:	4618      	mov	r0, r3
 800615a:	f000 fd01 	bl	8006b60 <xTaskRemoveFromEventList>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006164:	f000 fdda 	bl	8006d1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006168:	7bbb      	ldrb	r3, [r7, #14]
 800616a:	3b01      	subs	r3, #1
 800616c:	b2db      	uxtb	r3, r3
 800616e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006170:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006174:	2b00      	cmp	r3, #0
 8006176:	dce9      	bgt.n	800614c <prvUnlockQueue+0x60>
 8006178:	e000      	b.n	800617c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800617a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	22ff      	movs	r2, #255	@ 0xff
 8006180:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006184:	f001 fc52 	bl	8007a2c <vPortExitCritical>
}
 8006188:	bf00      	nop
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006198:	f001 fc16 	bl	80079c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d102      	bne.n	80061aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80061a4:	2301      	movs	r3, #1
 80061a6:	60fb      	str	r3, [r7, #12]
 80061a8:	e001      	b.n	80061ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80061aa:	2300      	movs	r3, #0
 80061ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061ae:	f001 fc3d 	bl	8007a2c <vPortExitCritical>

	return xReturn;
 80061b2:	68fb      	ldr	r3, [r7, #12]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061c4:	f001 fc00 	bl	80079c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d102      	bne.n	80061da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80061d4:	2301      	movs	r3, #1
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	e001      	b.n	80061de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80061da:	2300      	movs	r3, #0
 80061dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061de:	f001 fc25 	bl	8007a2c <vPortExitCritical>

	return xReturn;
 80061e2:	68fb      	ldr	r3, [r7, #12]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061f6:	2300      	movs	r3, #0
 80061f8:	60fb      	str	r3, [r7, #12]
 80061fa:	e014      	b.n	8006226 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80061fc:	4a0f      	ldr	r2, [pc, #60]	@ (800623c <vQueueAddToRegistry+0x50>)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10b      	bne.n	8006220 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006208:	490c      	ldr	r1, [pc, #48]	@ (800623c <vQueueAddToRegistry+0x50>)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	683a      	ldr	r2, [r7, #0]
 800620e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006212:	4a0a      	ldr	r2, [pc, #40]	@ (800623c <vQueueAddToRegistry+0x50>)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	00db      	lsls	r3, r3, #3
 8006218:	4413      	add	r3, r2
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800621e:	e006      	b.n	800622e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	3301      	adds	r3, #1
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2b07      	cmp	r3, #7
 800622a:	d9e7      	bls.n	80061fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800622c:	bf00      	nop
 800622e:	bf00      	nop
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	20000958 	.word	0x20000958

08006240 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006250:	f001 fbba 	bl	80079c8 <vPortEnterCritical>
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800625a:	b25b      	sxtb	r3, r3
 800625c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006260:	d103      	bne.n	800626a <vQueueWaitForMessageRestricted+0x2a>
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006270:	b25b      	sxtb	r3, r3
 8006272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006276:	d103      	bne.n	8006280 <vQueueWaitForMessageRestricted+0x40>
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006280:	f001 fbd4 	bl	8007a2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006288:	2b00      	cmp	r3, #0
 800628a:	d106      	bne.n	800629a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	3324      	adds	r3, #36	@ 0x24
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	68b9      	ldr	r1, [r7, #8]
 8006294:	4618      	mov	r0, r3
 8006296:	f000 fc37 	bl	8006b08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800629a:	6978      	ldr	r0, [r7, #20]
 800629c:	f7ff ff26 	bl	80060ec <prvUnlockQueue>
	}
 80062a0:	bf00      	nop
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08e      	sub	sp, #56	@ 0x38
 80062ac:	af04      	add	r7, sp, #16
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
 80062b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80062b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10b      	bne.n	80062d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80062bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c0:	f383 8811 	msr	BASEPRI, r3
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	623b      	str	r3, [r7, #32]
}
 80062ce:	bf00      	nop
 80062d0:	bf00      	nop
 80062d2:	e7fd      	b.n	80062d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80062d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10b      	bne.n	80062f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80062da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062de:	f383 8811 	msr	BASEPRI, r3
 80062e2:	f3bf 8f6f 	isb	sy
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	61fb      	str	r3, [r7, #28]
}
 80062ec:	bf00      	nop
 80062ee:	bf00      	nop
 80062f0:	e7fd      	b.n	80062ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80062f2:	23a8      	movs	r3, #168	@ 0xa8
 80062f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	2ba8      	cmp	r3, #168	@ 0xa8
 80062fa:	d00b      	beq.n	8006314 <xTaskCreateStatic+0x6c>
	__asm volatile
 80062fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	61bb      	str	r3, [r7, #24]
}
 800630e:	bf00      	nop
 8006310:	bf00      	nop
 8006312:	e7fd      	b.n	8006310 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006314:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006318:	2b00      	cmp	r3, #0
 800631a:	d01e      	beq.n	800635a <xTaskCreateStatic+0xb2>
 800631c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800631e:	2b00      	cmp	r3, #0
 8006320:	d01b      	beq.n	800635a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006324:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006328:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800632a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800632c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632e:	2202      	movs	r2, #2
 8006330:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006334:	2300      	movs	r3, #0
 8006336:	9303      	str	r3, [sp, #12]
 8006338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633a:	9302      	str	r3, [sp, #8]
 800633c:	f107 0314 	add.w	r3, r7, #20
 8006340:	9301      	str	r3, [sp, #4]
 8006342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006344:	9300      	str	r3, [sp, #0]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	68b9      	ldr	r1, [r7, #8]
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 f851 	bl	80063f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006352:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006354:	f000 f8f6 	bl	8006544 <prvAddNewTaskToReadyList>
 8006358:	e001      	b.n	800635e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800635a:	2300      	movs	r3, #0
 800635c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800635e:	697b      	ldr	r3, [r7, #20]
	}
 8006360:	4618      	mov	r0, r3
 8006362:	3728      	adds	r7, #40	@ 0x28
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006368:	b580      	push	{r7, lr}
 800636a:	b08c      	sub	sp, #48	@ 0x30
 800636c:	af04      	add	r7, sp, #16
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	603b      	str	r3, [r7, #0]
 8006374:	4613      	mov	r3, r2
 8006376:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006378:	88fb      	ldrh	r3, [r7, #6]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4618      	mov	r0, r3
 800637e:	f001 fc45 	bl	8007c0c <pvPortMalloc>
 8006382:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00e      	beq.n	80063a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800638a:	20a8      	movs	r0, #168	@ 0xa8
 800638c:	f001 fc3e 	bl	8007c0c <pvPortMalloc>
 8006390:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d003      	beq.n	80063a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	631a      	str	r2, [r3, #48]	@ 0x30
 800639e:	e005      	b.n	80063ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80063a0:	6978      	ldr	r0, [r7, #20]
 80063a2:	f001 fd01 	bl	8007da8 <vPortFree>
 80063a6:	e001      	b.n	80063ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80063a8:	2300      	movs	r3, #0
 80063aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d017      	beq.n	80063e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80063ba:	88fa      	ldrh	r2, [r7, #6]
 80063bc:	2300      	movs	r3, #0
 80063be:	9303      	str	r3, [sp, #12]
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	9302      	str	r3, [sp, #8]
 80063c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063c6:	9301      	str	r3, [sp, #4]
 80063c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	68b9      	ldr	r1, [r7, #8]
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 f80f 	bl	80063f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063d6:	69f8      	ldr	r0, [r7, #28]
 80063d8:	f000 f8b4 	bl	8006544 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80063dc:	2301      	movs	r3, #1
 80063de:	61bb      	str	r3, [r7, #24]
 80063e0:	e002      	b.n	80063e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80063e2:	f04f 33ff 	mov.w	r3, #4294967295
 80063e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80063e8:	69bb      	ldr	r3, [r7, #24]
	}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3720      	adds	r7, #32
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
	...

080063f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b088      	sub	sp, #32
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
 8006400:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006404:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	461a      	mov	r2, r3
 800640c:	21a5      	movs	r1, #165	@ 0xa5
 800640e:	f001 fe97 	bl	8008140 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006414:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800641c:	3b01      	subs	r3, #1
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	4413      	add	r3, r2
 8006422:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	f023 0307 	bic.w	r3, r3, #7
 800642a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	f003 0307 	and.w	r3, r3, #7
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00b      	beq.n	800644e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	617b      	str	r3, [r7, #20]
}
 8006448:	bf00      	nop
 800644a:	bf00      	nop
 800644c:	e7fd      	b.n	800644a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d01f      	beq.n	8006494 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006454:	2300      	movs	r3, #0
 8006456:	61fb      	str	r3, [r7, #28]
 8006458:	e012      	b.n	8006480 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	4413      	add	r3, r2
 8006460:	7819      	ldrb	r1, [r3, #0]
 8006462:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	4413      	add	r3, r2
 8006468:	3334      	adds	r3, #52	@ 0x34
 800646a:	460a      	mov	r2, r1
 800646c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	4413      	add	r3, r2
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d006      	beq.n	8006488 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	3301      	adds	r3, #1
 800647e:	61fb      	str	r3, [r7, #28]
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	2b0f      	cmp	r3, #15
 8006484:	d9e9      	bls.n	800645a <prvInitialiseNewTask+0x66>
 8006486:	e000      	b.n	800648a <prvInitialiseNewTask+0x96>
			{
				break;
 8006488:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800648a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006492:	e003      	b.n	800649c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800649c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800649e:	2b37      	cmp	r3, #55	@ 0x37
 80064a0:	d901      	bls.n	80064a6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80064a2:	2337      	movs	r3, #55	@ 0x37
 80064a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80064a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80064ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064b0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80064b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b4:	2200      	movs	r2, #0
 80064b6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80064b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ba:	3304      	adds	r3, #4
 80064bc:	4618      	mov	r0, r3
 80064be:	f7ff f965 	bl	800578c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80064c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c4:	3318      	adds	r3, #24
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7ff f960 	bl	800578c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80064cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80064d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80064dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064e0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80064e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e4:	2200      	movs	r2, #0
 80064e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80064ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80064f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f4:	3354      	adds	r3, #84	@ 0x54
 80064f6:	224c      	movs	r2, #76	@ 0x4c
 80064f8:	2100      	movs	r1, #0
 80064fa:	4618      	mov	r0, r3
 80064fc:	f001 fe20 	bl	8008140 <memset>
 8006500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006502:	4a0d      	ldr	r2, [pc, #52]	@ (8006538 <prvInitialiseNewTask+0x144>)
 8006504:	659a      	str	r2, [r3, #88]	@ 0x58
 8006506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006508:	4a0c      	ldr	r2, [pc, #48]	@ (800653c <prvInitialiseNewTask+0x148>)
 800650a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800650c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650e:	4a0c      	ldr	r2, [pc, #48]	@ (8006540 <prvInitialiseNewTask+0x14c>)
 8006510:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	68f9      	ldr	r1, [r7, #12]
 8006516:	69b8      	ldr	r0, [r7, #24]
 8006518:	f001 f924 	bl	8007764 <pxPortInitialiseStack>
 800651c:	4602      	mov	r2, r0
 800651e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006520:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800652a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800652c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800652e:	bf00      	nop
 8006530:	3720      	adds	r7, #32
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	20004fd0 	.word	0x20004fd0
 800653c:	20005038 	.word	0x20005038
 8006540:	200050a0 	.word	0x200050a0

08006544 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800654c:	f001 fa3c 	bl	80079c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006550:	4b2d      	ldr	r3, [pc, #180]	@ (8006608 <prvAddNewTaskToReadyList+0xc4>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3301      	adds	r3, #1
 8006556:	4a2c      	ldr	r2, [pc, #176]	@ (8006608 <prvAddNewTaskToReadyList+0xc4>)
 8006558:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800655a:	4b2c      	ldr	r3, [pc, #176]	@ (800660c <prvAddNewTaskToReadyList+0xc8>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d109      	bne.n	8006576 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006562:	4a2a      	ldr	r2, [pc, #168]	@ (800660c <prvAddNewTaskToReadyList+0xc8>)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006568:	4b27      	ldr	r3, [pc, #156]	@ (8006608 <prvAddNewTaskToReadyList+0xc4>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d110      	bne.n	8006592 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006570:	f000 fbf8 	bl	8006d64 <prvInitialiseTaskLists>
 8006574:	e00d      	b.n	8006592 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006576:	4b26      	ldr	r3, [pc, #152]	@ (8006610 <prvAddNewTaskToReadyList+0xcc>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d109      	bne.n	8006592 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800657e:	4b23      	ldr	r3, [pc, #140]	@ (800660c <prvAddNewTaskToReadyList+0xc8>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006588:	429a      	cmp	r2, r3
 800658a:	d802      	bhi.n	8006592 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800658c:	4a1f      	ldr	r2, [pc, #124]	@ (800660c <prvAddNewTaskToReadyList+0xc8>)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006592:	4b20      	ldr	r3, [pc, #128]	@ (8006614 <prvAddNewTaskToReadyList+0xd0>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	3301      	adds	r3, #1
 8006598:	4a1e      	ldr	r2, [pc, #120]	@ (8006614 <prvAddNewTaskToReadyList+0xd0>)
 800659a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800659c:	4b1d      	ldr	r3, [pc, #116]	@ (8006614 <prvAddNewTaskToReadyList+0xd0>)
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006618 <prvAddNewTaskToReadyList+0xd4>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d903      	bls.n	80065b8 <prvAddNewTaskToReadyList+0x74>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b4:	4a18      	ldr	r2, [pc, #96]	@ (8006618 <prvAddNewTaskToReadyList+0xd4>)
 80065b6:	6013      	str	r3, [r2, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065bc:	4613      	mov	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4a15      	ldr	r2, [pc, #84]	@ (800661c <prvAddNewTaskToReadyList+0xd8>)
 80065c6:	441a      	add	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	3304      	adds	r3, #4
 80065cc:	4619      	mov	r1, r3
 80065ce:	4610      	mov	r0, r2
 80065d0:	f7ff f8e9 	bl	80057a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80065d4:	f001 fa2a 	bl	8007a2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80065d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006610 <prvAddNewTaskToReadyList+0xcc>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00e      	beq.n	80065fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80065e0:	4b0a      	ldr	r3, [pc, #40]	@ (800660c <prvAddNewTaskToReadyList+0xc8>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d207      	bcs.n	80065fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80065ee:	4b0c      	ldr	r3, [pc, #48]	@ (8006620 <prvAddNewTaskToReadyList+0xdc>)
 80065f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065fe:	bf00      	nop
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	20000e6c 	.word	0x20000e6c
 800660c:	20000998 	.word	0x20000998
 8006610:	20000e78 	.word	0x20000e78
 8006614:	20000e88 	.word	0x20000e88
 8006618:	20000e74 	.word	0x20000e74
 800661c:	2000099c 	.word	0x2000099c
 8006620:	e000ed04 	.word	0xe000ed04

08006624 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b08a      	sub	sp, #40	@ 0x28
 8006628:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800662a:	2300      	movs	r3, #0
 800662c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800662e:	2300      	movs	r3, #0
 8006630:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006632:	463a      	mov	r2, r7
 8006634:	1d39      	adds	r1, r7, #4
 8006636:	f107 0308 	add.w	r3, r7, #8
 800663a:	4618      	mov	r0, r3
 800663c:	f7ff f852 	bl	80056e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006640:	6839      	ldr	r1, [r7, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	9202      	str	r2, [sp, #8]
 8006648:	9301      	str	r3, [sp, #4]
 800664a:	2300      	movs	r3, #0
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	2300      	movs	r3, #0
 8006650:	460a      	mov	r2, r1
 8006652:	4924      	ldr	r1, [pc, #144]	@ (80066e4 <vTaskStartScheduler+0xc0>)
 8006654:	4824      	ldr	r0, [pc, #144]	@ (80066e8 <vTaskStartScheduler+0xc4>)
 8006656:	f7ff fe27 	bl	80062a8 <xTaskCreateStatic>
 800665a:	4603      	mov	r3, r0
 800665c:	4a23      	ldr	r2, [pc, #140]	@ (80066ec <vTaskStartScheduler+0xc8>)
 800665e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006660:	4b22      	ldr	r3, [pc, #136]	@ (80066ec <vTaskStartScheduler+0xc8>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d002      	beq.n	800666e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006668:	2301      	movs	r3, #1
 800666a:	617b      	str	r3, [r7, #20]
 800666c:	e001      	b.n	8006672 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800666e:	2300      	movs	r3, #0
 8006670:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d102      	bne.n	800667e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006678:	f000 fd1a 	bl	80070b0 <xTimerCreateTimerTask>
 800667c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d11b      	bne.n	80066bc <vTaskStartScheduler+0x98>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	613b      	str	r3, [r7, #16]
}
 8006696:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006698:	4b15      	ldr	r3, [pc, #84]	@ (80066f0 <vTaskStartScheduler+0xcc>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	3354      	adds	r3, #84	@ 0x54
 800669e:	4a15      	ldr	r2, [pc, #84]	@ (80066f4 <vTaskStartScheduler+0xd0>)
 80066a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80066a2:	4b15      	ldr	r3, [pc, #84]	@ (80066f8 <vTaskStartScheduler+0xd4>)
 80066a4:	f04f 32ff 	mov.w	r2, #4294967295
 80066a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80066aa:	4b14      	ldr	r3, [pc, #80]	@ (80066fc <vTaskStartScheduler+0xd8>)
 80066ac:	2201      	movs	r2, #1
 80066ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80066b0:	4b13      	ldr	r3, [pc, #76]	@ (8006700 <vTaskStartScheduler+0xdc>)
 80066b2:	2200      	movs	r2, #0
 80066b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80066b6:	f001 f8e3 	bl	8007880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80066ba:	e00f      	b.n	80066dc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c2:	d10b      	bne.n	80066dc <vTaskStartScheduler+0xb8>
	__asm volatile
 80066c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c8:	f383 8811 	msr	BASEPRI, r3
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	60fb      	str	r3, [r7, #12]
}
 80066d6:	bf00      	nop
 80066d8:	bf00      	nop
 80066da:	e7fd      	b.n	80066d8 <vTaskStartScheduler+0xb4>
}
 80066dc:	bf00      	nop
 80066de:	3718      	adds	r7, #24
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	08008340 	.word	0x08008340
 80066e8:	08006d35 	.word	0x08006d35
 80066ec:	20000e90 	.word	0x20000e90
 80066f0:	20000998 	.word	0x20000998
 80066f4:	20000010 	.word	0x20000010
 80066f8:	20000e8c 	.word	0x20000e8c
 80066fc:	20000e78 	.word	0x20000e78
 8006700:	20000e70 	.word	0x20000e70

08006704 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006704:	b480      	push	{r7}
 8006706:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006708:	4b04      	ldr	r3, [pc, #16]	@ (800671c <vTaskSuspendAll+0x18>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	3301      	adds	r3, #1
 800670e:	4a03      	ldr	r2, [pc, #12]	@ (800671c <vTaskSuspendAll+0x18>)
 8006710:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006712:	bf00      	nop
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	20000e94 	.word	0x20000e94

08006720 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006726:	2300      	movs	r3, #0
 8006728:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800672a:	2300      	movs	r3, #0
 800672c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800672e:	4b42      	ldr	r3, [pc, #264]	@ (8006838 <xTaskResumeAll+0x118>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10b      	bne.n	800674e <xTaskResumeAll+0x2e>
	__asm volatile
 8006736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	603b      	str	r3, [r7, #0]
}
 8006748:	bf00      	nop
 800674a:	bf00      	nop
 800674c:	e7fd      	b.n	800674a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800674e:	f001 f93b 	bl	80079c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006752:	4b39      	ldr	r3, [pc, #228]	@ (8006838 <xTaskResumeAll+0x118>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3b01      	subs	r3, #1
 8006758:	4a37      	ldr	r2, [pc, #220]	@ (8006838 <xTaskResumeAll+0x118>)
 800675a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800675c:	4b36      	ldr	r3, [pc, #216]	@ (8006838 <xTaskResumeAll+0x118>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d162      	bne.n	800682a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006764:	4b35      	ldr	r3, [pc, #212]	@ (800683c <xTaskResumeAll+0x11c>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d05e      	beq.n	800682a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800676c:	e02f      	b.n	80067ce <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800676e:	4b34      	ldr	r3, [pc, #208]	@ (8006840 <xTaskResumeAll+0x120>)
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	3318      	adds	r3, #24
 800677a:	4618      	mov	r0, r3
 800677c:	f7ff f870 	bl	8005860 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	3304      	adds	r3, #4
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff f86b 	bl	8005860 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800678e:	4b2d      	ldr	r3, [pc, #180]	@ (8006844 <xTaskResumeAll+0x124>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	429a      	cmp	r2, r3
 8006794:	d903      	bls.n	800679e <xTaskResumeAll+0x7e>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679a:	4a2a      	ldr	r2, [pc, #168]	@ (8006844 <xTaskResumeAll+0x124>)
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067a2:	4613      	mov	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4a27      	ldr	r2, [pc, #156]	@ (8006848 <xTaskResumeAll+0x128>)
 80067ac:	441a      	add	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	3304      	adds	r3, #4
 80067b2:	4619      	mov	r1, r3
 80067b4:	4610      	mov	r0, r2
 80067b6:	f7fe fff6 	bl	80057a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067be:	4b23      	ldr	r3, [pc, #140]	@ (800684c <xTaskResumeAll+0x12c>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d302      	bcc.n	80067ce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80067c8:	4b21      	ldr	r3, [pc, #132]	@ (8006850 <xTaskResumeAll+0x130>)
 80067ca:	2201      	movs	r2, #1
 80067cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067ce:	4b1c      	ldr	r3, [pc, #112]	@ (8006840 <xTaskResumeAll+0x120>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1cb      	bne.n	800676e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d001      	beq.n	80067e0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80067dc:	f000 fb66 	bl	8006eac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80067e0:	4b1c      	ldr	r3, [pc, #112]	@ (8006854 <xTaskResumeAll+0x134>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d010      	beq.n	800680e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80067ec:	f000 f846 	bl	800687c <xTaskIncrementTick>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d002      	beq.n	80067fc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80067f6:	4b16      	ldr	r3, [pc, #88]	@ (8006850 <xTaskResumeAll+0x130>)
 80067f8:	2201      	movs	r2, #1
 80067fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	3b01      	subs	r3, #1
 8006800:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1f1      	bne.n	80067ec <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006808:	4b12      	ldr	r3, [pc, #72]	@ (8006854 <xTaskResumeAll+0x134>)
 800680a:	2200      	movs	r2, #0
 800680c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800680e:	4b10      	ldr	r3, [pc, #64]	@ (8006850 <xTaskResumeAll+0x130>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d009      	beq.n	800682a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006816:	2301      	movs	r3, #1
 8006818:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800681a:	4b0f      	ldr	r3, [pc, #60]	@ (8006858 <xTaskResumeAll+0x138>)
 800681c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800682a:	f001 f8ff 	bl	8007a2c <vPortExitCritical>

	return xAlreadyYielded;
 800682e:	68bb      	ldr	r3, [r7, #8]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	20000e94 	.word	0x20000e94
 800683c:	20000e6c 	.word	0x20000e6c
 8006840:	20000e2c 	.word	0x20000e2c
 8006844:	20000e74 	.word	0x20000e74
 8006848:	2000099c 	.word	0x2000099c
 800684c:	20000998 	.word	0x20000998
 8006850:	20000e80 	.word	0x20000e80
 8006854:	20000e7c 	.word	0x20000e7c
 8006858:	e000ed04 	.word	0xe000ed04

0800685c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006862:	4b05      	ldr	r3, [pc, #20]	@ (8006878 <xTaskGetTickCount+0x1c>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006868:	687b      	ldr	r3, [r7, #4]
}
 800686a:	4618      	mov	r0, r3
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	20000e70 	.word	0x20000e70

0800687c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006882:	2300      	movs	r3, #0
 8006884:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006886:	4b4f      	ldr	r3, [pc, #316]	@ (80069c4 <xTaskIncrementTick+0x148>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	f040 8090 	bne.w	80069b0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006890:	4b4d      	ldr	r3, [pc, #308]	@ (80069c8 <xTaskIncrementTick+0x14c>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3301      	adds	r3, #1
 8006896:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006898:	4a4b      	ldr	r2, [pc, #300]	@ (80069c8 <xTaskIncrementTick+0x14c>)
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d121      	bne.n	80068e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80068a4:	4b49      	ldr	r3, [pc, #292]	@ (80069cc <xTaskIncrementTick+0x150>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00b      	beq.n	80068c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80068ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b2:	f383 8811 	msr	BASEPRI, r3
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	603b      	str	r3, [r7, #0]
}
 80068c0:	bf00      	nop
 80068c2:	bf00      	nop
 80068c4:	e7fd      	b.n	80068c2 <xTaskIncrementTick+0x46>
 80068c6:	4b41      	ldr	r3, [pc, #260]	@ (80069cc <xTaskIncrementTick+0x150>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	60fb      	str	r3, [r7, #12]
 80068cc:	4b40      	ldr	r3, [pc, #256]	@ (80069d0 <xTaskIncrementTick+0x154>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a3e      	ldr	r2, [pc, #248]	@ (80069cc <xTaskIncrementTick+0x150>)
 80068d2:	6013      	str	r3, [r2, #0]
 80068d4:	4a3e      	ldr	r2, [pc, #248]	@ (80069d0 <xTaskIncrementTick+0x154>)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6013      	str	r3, [r2, #0]
 80068da:	4b3e      	ldr	r3, [pc, #248]	@ (80069d4 <xTaskIncrementTick+0x158>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	3301      	adds	r3, #1
 80068e0:	4a3c      	ldr	r2, [pc, #240]	@ (80069d4 <xTaskIncrementTick+0x158>)
 80068e2:	6013      	str	r3, [r2, #0]
 80068e4:	f000 fae2 	bl	8006eac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80068e8:	4b3b      	ldr	r3, [pc, #236]	@ (80069d8 <xTaskIncrementTick+0x15c>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d349      	bcc.n	8006986 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068f2:	4b36      	ldr	r3, [pc, #216]	@ (80069cc <xTaskIncrementTick+0x150>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d104      	bne.n	8006906 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068fc:	4b36      	ldr	r3, [pc, #216]	@ (80069d8 <xTaskIncrementTick+0x15c>)
 80068fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006902:	601a      	str	r2, [r3, #0]
					break;
 8006904:	e03f      	b.n	8006986 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006906:	4b31      	ldr	r3, [pc, #196]	@ (80069cc <xTaskIncrementTick+0x150>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	429a      	cmp	r2, r3
 800691c:	d203      	bcs.n	8006926 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800691e:	4a2e      	ldr	r2, [pc, #184]	@ (80069d8 <xTaskIncrementTick+0x15c>)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006924:	e02f      	b.n	8006986 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	3304      	adds	r3, #4
 800692a:	4618      	mov	r0, r3
 800692c:	f7fe ff98 	bl	8005860 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006934:	2b00      	cmp	r3, #0
 8006936:	d004      	beq.n	8006942 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	3318      	adds	r3, #24
 800693c:	4618      	mov	r0, r3
 800693e:	f7fe ff8f 	bl	8005860 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006946:	4b25      	ldr	r3, [pc, #148]	@ (80069dc <xTaskIncrementTick+0x160>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	429a      	cmp	r2, r3
 800694c:	d903      	bls.n	8006956 <xTaskIncrementTick+0xda>
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006952:	4a22      	ldr	r2, [pc, #136]	@ (80069dc <xTaskIncrementTick+0x160>)
 8006954:	6013      	str	r3, [r2, #0]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800695a:	4613      	mov	r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4413      	add	r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4a1f      	ldr	r2, [pc, #124]	@ (80069e0 <xTaskIncrementTick+0x164>)
 8006964:	441a      	add	r2, r3
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	3304      	adds	r3, #4
 800696a:	4619      	mov	r1, r3
 800696c:	4610      	mov	r0, r2
 800696e:	f7fe ff1a 	bl	80057a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006976:	4b1b      	ldr	r3, [pc, #108]	@ (80069e4 <xTaskIncrementTick+0x168>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697c:	429a      	cmp	r2, r3
 800697e:	d3b8      	bcc.n	80068f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006980:	2301      	movs	r3, #1
 8006982:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006984:	e7b5      	b.n	80068f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006986:	4b17      	ldr	r3, [pc, #92]	@ (80069e4 <xTaskIncrementTick+0x168>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800698c:	4914      	ldr	r1, [pc, #80]	@ (80069e0 <xTaskIncrementTick+0x164>)
 800698e:	4613      	mov	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	440b      	add	r3, r1
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d901      	bls.n	80069a2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800699e:	2301      	movs	r3, #1
 80069a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80069a2:	4b11      	ldr	r3, [pc, #68]	@ (80069e8 <xTaskIncrementTick+0x16c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d007      	beq.n	80069ba <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80069aa:	2301      	movs	r3, #1
 80069ac:	617b      	str	r3, [r7, #20]
 80069ae:	e004      	b.n	80069ba <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80069b0:	4b0e      	ldr	r3, [pc, #56]	@ (80069ec <xTaskIncrementTick+0x170>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3301      	adds	r3, #1
 80069b6:	4a0d      	ldr	r2, [pc, #52]	@ (80069ec <xTaskIncrementTick+0x170>)
 80069b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80069ba:	697b      	ldr	r3, [r7, #20]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3718      	adds	r7, #24
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	20000e94 	.word	0x20000e94
 80069c8:	20000e70 	.word	0x20000e70
 80069cc:	20000e24 	.word	0x20000e24
 80069d0:	20000e28 	.word	0x20000e28
 80069d4:	20000e84 	.word	0x20000e84
 80069d8:	20000e8c 	.word	0x20000e8c
 80069dc:	20000e74 	.word	0x20000e74
 80069e0:	2000099c 	.word	0x2000099c
 80069e4:	20000998 	.word	0x20000998
 80069e8:	20000e80 	.word	0x20000e80
 80069ec:	20000e7c 	.word	0x20000e7c

080069f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80069f6:	4b2b      	ldr	r3, [pc, #172]	@ (8006aa4 <vTaskSwitchContext+0xb4>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d003      	beq.n	8006a06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80069fe:	4b2a      	ldr	r3, [pc, #168]	@ (8006aa8 <vTaskSwitchContext+0xb8>)
 8006a00:	2201      	movs	r2, #1
 8006a02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006a04:	e047      	b.n	8006a96 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006a06:	4b28      	ldr	r3, [pc, #160]	@ (8006aa8 <vTaskSwitchContext+0xb8>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a0c:	4b27      	ldr	r3, [pc, #156]	@ (8006aac <vTaskSwitchContext+0xbc>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	60fb      	str	r3, [r7, #12]
 8006a12:	e011      	b.n	8006a38 <vTaskSwitchContext+0x48>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10b      	bne.n	8006a32 <vTaskSwitchContext+0x42>
	__asm volatile
 8006a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	607b      	str	r3, [r7, #4]
}
 8006a2c:	bf00      	nop
 8006a2e:	bf00      	nop
 8006a30:	e7fd      	b.n	8006a2e <vTaskSwitchContext+0x3e>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	3b01      	subs	r3, #1
 8006a36:	60fb      	str	r3, [r7, #12]
 8006a38:	491d      	ldr	r1, [pc, #116]	@ (8006ab0 <vTaskSwitchContext+0xc0>)
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	440b      	add	r3, r1
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d0e3      	beq.n	8006a14 <vTaskSwitchContext+0x24>
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4a16      	ldr	r2, [pc, #88]	@ (8006ab0 <vTaskSwitchContext+0xc0>)
 8006a58:	4413      	add	r3, r2
 8006a5a:	60bb      	str	r3, [r7, #8]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	605a      	str	r2, [r3, #4]
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	3308      	adds	r3, #8
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d104      	bne.n	8006a7c <vTaskSwitchContext+0x8c>
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	685a      	ldr	r2, [r3, #4]
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	605a      	str	r2, [r3, #4]
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	4a0c      	ldr	r2, [pc, #48]	@ (8006ab4 <vTaskSwitchContext+0xc4>)
 8006a84:	6013      	str	r3, [r2, #0]
 8006a86:	4a09      	ldr	r2, [pc, #36]	@ (8006aac <vTaskSwitchContext+0xbc>)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a8c:	4b09      	ldr	r3, [pc, #36]	@ (8006ab4 <vTaskSwitchContext+0xc4>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3354      	adds	r3, #84	@ 0x54
 8006a92:	4a09      	ldr	r2, [pc, #36]	@ (8006ab8 <vTaskSwitchContext+0xc8>)
 8006a94:	6013      	str	r3, [r2, #0]
}
 8006a96:	bf00      	nop
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	20000e94 	.word	0x20000e94
 8006aa8:	20000e80 	.word	0x20000e80
 8006aac:	20000e74 	.word	0x20000e74
 8006ab0:	2000099c 	.word	0x2000099c
 8006ab4:	20000998 	.word	0x20000998
 8006ab8:	20000010 	.word	0x20000010

08006abc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10b      	bne.n	8006ae4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	60fb      	str	r3, [r7, #12]
}
 8006ade:	bf00      	nop
 8006ae0:	bf00      	nop
 8006ae2:	e7fd      	b.n	8006ae0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ae4:	4b07      	ldr	r3, [pc, #28]	@ (8006b04 <vTaskPlaceOnEventList+0x48>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3318      	adds	r3, #24
 8006aea:	4619      	mov	r1, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f7fe fe7e 	bl	80057ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006af2:	2101      	movs	r1, #1
 8006af4:	6838      	ldr	r0, [r7, #0]
 8006af6:	f000 fa87 	bl	8007008 <prvAddCurrentTaskToDelayedList>
}
 8006afa:	bf00      	nop
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	20000998 	.word	0x20000998

08006b08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b086      	sub	sp, #24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10b      	bne.n	8006b32 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b1e:	f383 8811 	msr	BASEPRI, r3
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	617b      	str	r3, [r7, #20]
}
 8006b2c:	bf00      	nop
 8006b2e:	bf00      	nop
 8006b30:	e7fd      	b.n	8006b2e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b32:	4b0a      	ldr	r3, [pc, #40]	@ (8006b5c <vTaskPlaceOnEventListRestricted+0x54>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3318      	adds	r3, #24
 8006b38:	4619      	mov	r1, r3
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f7fe fe33 	bl	80057a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006b46:	f04f 33ff 	mov.w	r3, #4294967295
 8006b4a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006b4c:	6879      	ldr	r1, [r7, #4]
 8006b4e:	68b8      	ldr	r0, [r7, #8]
 8006b50:	f000 fa5a 	bl	8007008 <prvAddCurrentTaskToDelayedList>
	}
 8006b54:	bf00      	nop
 8006b56:	3718      	adds	r7, #24
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	20000998 	.word	0x20000998

08006b60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10b      	bne.n	8006b8e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	60fb      	str	r3, [r7, #12]
}
 8006b88:	bf00      	nop
 8006b8a:	bf00      	nop
 8006b8c:	e7fd      	b.n	8006b8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	3318      	adds	r3, #24
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fe fe64 	bl	8005860 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b98:	4b1d      	ldr	r3, [pc, #116]	@ (8006c10 <xTaskRemoveFromEventList+0xb0>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d11d      	bne.n	8006bdc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	3304      	adds	r3, #4
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7fe fe5b 	bl	8005860 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bae:	4b19      	ldr	r3, [pc, #100]	@ (8006c14 <xTaskRemoveFromEventList+0xb4>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d903      	bls.n	8006bbe <xTaskRemoveFromEventList+0x5e>
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bba:	4a16      	ldr	r2, [pc, #88]	@ (8006c14 <xTaskRemoveFromEventList+0xb4>)
 8006bbc:	6013      	str	r3, [r2, #0]
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4413      	add	r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4a13      	ldr	r2, [pc, #76]	@ (8006c18 <xTaskRemoveFromEventList+0xb8>)
 8006bcc:	441a      	add	r2, r3
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	3304      	adds	r3, #4
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	f7fe fde6 	bl	80057a6 <vListInsertEnd>
 8006bda:	e005      	b.n	8006be8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	3318      	adds	r3, #24
 8006be0:	4619      	mov	r1, r3
 8006be2:	480e      	ldr	r0, [pc, #56]	@ (8006c1c <xTaskRemoveFromEventList+0xbc>)
 8006be4:	f7fe fddf 	bl	80057a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bec:	4b0c      	ldr	r3, [pc, #48]	@ (8006c20 <xTaskRemoveFromEventList+0xc0>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d905      	bls.n	8006c02 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8006c24 <xTaskRemoveFromEventList+0xc4>)
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	601a      	str	r2, [r3, #0]
 8006c00:	e001      	b.n	8006c06 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006c02:	2300      	movs	r3, #0
 8006c04:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006c06:	697b      	ldr	r3, [r7, #20]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	20000e94 	.word	0x20000e94
 8006c14:	20000e74 	.word	0x20000e74
 8006c18:	2000099c 	.word	0x2000099c
 8006c1c:	20000e2c 	.word	0x20000e2c
 8006c20:	20000998 	.word	0x20000998
 8006c24:	20000e80 	.word	0x20000e80

08006c28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c30:	4b06      	ldr	r3, [pc, #24]	@ (8006c4c <vTaskInternalSetTimeOutState+0x24>)
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c38:	4b05      	ldr	r3, [pc, #20]	@ (8006c50 <vTaskInternalSetTimeOutState+0x28>)
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	605a      	str	r2, [r3, #4]
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	20000e84 	.word	0x20000e84
 8006c50:	20000e70 	.word	0x20000e70

08006c54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b088      	sub	sp, #32
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10b      	bne.n	8006c7c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	613b      	str	r3, [r7, #16]
}
 8006c76:	bf00      	nop
 8006c78:	bf00      	nop
 8006c7a:	e7fd      	b.n	8006c78 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10b      	bne.n	8006c9a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	60fb      	str	r3, [r7, #12]
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop
 8006c98:	e7fd      	b.n	8006c96 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006c9a:	f000 fe95 	bl	80079c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8006d14 <xTaskCheckForTimeOut+0xc0>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb6:	d102      	bne.n	8006cbe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	61fb      	str	r3, [r7, #28]
 8006cbc:	e023      	b.n	8006d06 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	4b15      	ldr	r3, [pc, #84]	@ (8006d18 <xTaskCheckForTimeOut+0xc4>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d007      	beq.n	8006cda <xTaskCheckForTimeOut+0x86>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	69ba      	ldr	r2, [r7, #24]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d302      	bcc.n	8006cda <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	61fb      	str	r3, [r7, #28]
 8006cd8:	e015      	b.n	8006d06 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d20b      	bcs.n	8006cfc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	1ad2      	subs	r2, r2, r3
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f7ff ff99 	bl	8006c28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	61fb      	str	r3, [r7, #28]
 8006cfa:	e004      	b.n	8006d06 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d02:	2301      	movs	r3, #1
 8006d04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006d06:	f000 fe91 	bl	8007a2c <vPortExitCritical>

	return xReturn;
 8006d0a:	69fb      	ldr	r3, [r7, #28]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3720      	adds	r7, #32
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	20000e70 	.word	0x20000e70
 8006d18:	20000e84 	.word	0x20000e84

08006d1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d20:	4b03      	ldr	r3, [pc, #12]	@ (8006d30 <vTaskMissedYield+0x14>)
 8006d22:	2201      	movs	r2, #1
 8006d24:	601a      	str	r2, [r3, #0]
}
 8006d26:	bf00      	nop
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	20000e80 	.word	0x20000e80

08006d34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d3c:	f000 f852 	bl	8006de4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d40:	4b06      	ldr	r3, [pc, #24]	@ (8006d5c <prvIdleTask+0x28>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d9f9      	bls.n	8006d3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d48:	4b05      	ldr	r3, [pc, #20]	@ (8006d60 <prvIdleTask+0x2c>)
 8006d4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d4e:	601a      	str	r2, [r3, #0]
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d58:	e7f0      	b.n	8006d3c <prvIdleTask+0x8>
 8006d5a:	bf00      	nop
 8006d5c:	2000099c 	.word	0x2000099c
 8006d60:	e000ed04 	.word	0xe000ed04

08006d64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	607b      	str	r3, [r7, #4]
 8006d6e:	e00c      	b.n	8006d8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	4613      	mov	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4a12      	ldr	r2, [pc, #72]	@ (8006dc4 <prvInitialiseTaskLists+0x60>)
 8006d7c:	4413      	add	r3, r2
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fe fce4 	bl	800574c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	3301      	adds	r3, #1
 8006d88:	607b      	str	r3, [r7, #4]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2b37      	cmp	r3, #55	@ 0x37
 8006d8e:	d9ef      	bls.n	8006d70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d90:	480d      	ldr	r0, [pc, #52]	@ (8006dc8 <prvInitialiseTaskLists+0x64>)
 8006d92:	f7fe fcdb 	bl	800574c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d96:	480d      	ldr	r0, [pc, #52]	@ (8006dcc <prvInitialiseTaskLists+0x68>)
 8006d98:	f7fe fcd8 	bl	800574c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d9c:	480c      	ldr	r0, [pc, #48]	@ (8006dd0 <prvInitialiseTaskLists+0x6c>)
 8006d9e:	f7fe fcd5 	bl	800574c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006da2:	480c      	ldr	r0, [pc, #48]	@ (8006dd4 <prvInitialiseTaskLists+0x70>)
 8006da4:	f7fe fcd2 	bl	800574c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006da8:	480b      	ldr	r0, [pc, #44]	@ (8006dd8 <prvInitialiseTaskLists+0x74>)
 8006daa:	f7fe fccf 	bl	800574c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006dae:	4b0b      	ldr	r3, [pc, #44]	@ (8006ddc <prvInitialiseTaskLists+0x78>)
 8006db0:	4a05      	ldr	r2, [pc, #20]	@ (8006dc8 <prvInitialiseTaskLists+0x64>)
 8006db2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006db4:	4b0a      	ldr	r3, [pc, #40]	@ (8006de0 <prvInitialiseTaskLists+0x7c>)
 8006db6:	4a05      	ldr	r2, [pc, #20]	@ (8006dcc <prvInitialiseTaskLists+0x68>)
 8006db8:	601a      	str	r2, [r3, #0]
}
 8006dba:	bf00      	nop
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	2000099c 	.word	0x2000099c
 8006dc8:	20000dfc 	.word	0x20000dfc
 8006dcc:	20000e10 	.word	0x20000e10
 8006dd0:	20000e2c 	.word	0x20000e2c
 8006dd4:	20000e40 	.word	0x20000e40
 8006dd8:	20000e58 	.word	0x20000e58
 8006ddc:	20000e24 	.word	0x20000e24
 8006de0:	20000e28 	.word	0x20000e28

08006de4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006dea:	e019      	b.n	8006e20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006dec:	f000 fdec 	bl	80079c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006df0:	4b10      	ldr	r3, [pc, #64]	@ (8006e34 <prvCheckTasksWaitingTermination+0x50>)
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7fe fd2f 	bl	8005860 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e02:	4b0d      	ldr	r3, [pc, #52]	@ (8006e38 <prvCheckTasksWaitingTermination+0x54>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	3b01      	subs	r3, #1
 8006e08:	4a0b      	ldr	r2, [pc, #44]	@ (8006e38 <prvCheckTasksWaitingTermination+0x54>)
 8006e0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8006e3c <prvCheckTasksWaitingTermination+0x58>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	3b01      	subs	r3, #1
 8006e12:	4a0a      	ldr	r2, [pc, #40]	@ (8006e3c <prvCheckTasksWaitingTermination+0x58>)
 8006e14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e16:	f000 fe09 	bl	8007a2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f810 	bl	8006e40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e20:	4b06      	ldr	r3, [pc, #24]	@ (8006e3c <prvCheckTasksWaitingTermination+0x58>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1e1      	bne.n	8006dec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e28:	bf00      	nop
 8006e2a:	bf00      	nop
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	20000e40 	.word	0x20000e40
 8006e38:	20000e6c 	.word	0x20000e6c
 8006e3c:	20000e54 	.word	0x20000e54

08006e40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	3354      	adds	r3, #84	@ 0x54
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f001 f97f 	bl	8008150 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d108      	bne.n	8006e6e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 ffa1 	bl	8007da8 <vPortFree>
				vPortFree( pxTCB );
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 ff9e 	bl	8007da8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e6c:	e019      	b.n	8006ea2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d103      	bne.n	8006e80 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 ff95 	bl	8007da8 <vPortFree>
	}
 8006e7e:	e010      	b.n	8006ea2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d00b      	beq.n	8006ea2 <prvDeleteTCB+0x62>
	__asm volatile
 8006e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8e:	f383 8811 	msr	BASEPRI, r3
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	60fb      	str	r3, [r7, #12]
}
 8006e9c:	bf00      	nop
 8006e9e:	bf00      	nop
 8006ea0:	e7fd      	b.n	8006e9e <prvDeleteTCB+0x5e>
	}
 8006ea2:	bf00      	nop
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
	...

08006eac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee4 <prvResetNextTaskUnblockTime+0x38>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d104      	bne.n	8006ec6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8006ee8 <prvResetNextTaskUnblockTime+0x3c>)
 8006ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ec4:	e008      	b.n	8006ed8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ec6:	4b07      	ldr	r3, [pc, #28]	@ (8006ee4 <prvResetNextTaskUnblockTime+0x38>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	4a04      	ldr	r2, [pc, #16]	@ (8006ee8 <prvResetNextTaskUnblockTime+0x3c>)
 8006ed6:	6013      	str	r3, [r2, #0]
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr
 8006ee4:	20000e24 	.word	0x20000e24
 8006ee8:	20000e8c 	.word	0x20000e8c

08006eec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8006f20 <xTaskGetSchedulerState+0x34>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d102      	bne.n	8006f00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006efa:	2301      	movs	r3, #1
 8006efc:	607b      	str	r3, [r7, #4]
 8006efe:	e008      	b.n	8006f12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f00:	4b08      	ldr	r3, [pc, #32]	@ (8006f24 <xTaskGetSchedulerState+0x38>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d102      	bne.n	8006f0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f08:	2302      	movs	r3, #2
 8006f0a:	607b      	str	r3, [r7, #4]
 8006f0c:	e001      	b.n	8006f12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f12:	687b      	ldr	r3, [r7, #4]
	}
 8006f14:	4618      	mov	r0, r3
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	20000e78 	.word	0x20000e78
 8006f24:	20000e94 	.word	0x20000e94

08006f28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006f34:	2300      	movs	r3, #0
 8006f36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d058      	beq.n	8006ff0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006f3e:	4b2f      	ldr	r3, [pc, #188]	@ (8006ffc <xTaskPriorityDisinherit+0xd4>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d00b      	beq.n	8006f60 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4c:	f383 8811 	msr	BASEPRI, r3
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	60fb      	str	r3, [r7, #12]
}
 8006f5a:	bf00      	nop
 8006f5c:	bf00      	nop
 8006f5e:	e7fd      	b.n	8006f5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10b      	bne.n	8006f80 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f6c:	f383 8811 	msr	BASEPRI, r3
 8006f70:	f3bf 8f6f 	isb	sy
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	60bb      	str	r3, [r7, #8]
}
 8006f7a:	bf00      	nop
 8006f7c:	bf00      	nop
 8006f7e:	e7fd      	b.n	8006f7c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f84:	1e5a      	subs	r2, r3, #1
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d02c      	beq.n	8006ff0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d128      	bne.n	8006ff0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fe fc5c 	bl	8005860 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8007000 <xTaskPriorityDisinherit+0xd8>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d903      	bls.n	8006fd0 <xTaskPriorityDisinherit+0xa8>
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fcc:	4a0c      	ldr	r2, [pc, #48]	@ (8007000 <xTaskPriorityDisinherit+0xd8>)
 8006fce:	6013      	str	r3, [r2, #0]
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4a09      	ldr	r2, [pc, #36]	@ (8007004 <xTaskPriorityDisinherit+0xdc>)
 8006fde:	441a      	add	r2, r3
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	3304      	adds	r3, #4
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	4610      	mov	r0, r2
 8006fe8:	f7fe fbdd 	bl	80057a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006fec:	2301      	movs	r3, #1
 8006fee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ff0:	697b      	ldr	r3, [r7, #20]
	}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3718      	adds	r7, #24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20000998 	.word	0x20000998
 8007000:	20000e74 	.word	0x20000e74
 8007004:	2000099c 	.word	0x2000099c

08007008 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007012:	4b21      	ldr	r3, [pc, #132]	@ (8007098 <prvAddCurrentTaskToDelayedList+0x90>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007018:	4b20      	ldr	r3, [pc, #128]	@ (800709c <prvAddCurrentTaskToDelayedList+0x94>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3304      	adds	r3, #4
 800701e:	4618      	mov	r0, r3
 8007020:	f7fe fc1e 	bl	8005860 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702a:	d10a      	bne.n	8007042 <prvAddCurrentTaskToDelayedList+0x3a>
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d007      	beq.n	8007042 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007032:	4b1a      	ldr	r3, [pc, #104]	@ (800709c <prvAddCurrentTaskToDelayedList+0x94>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3304      	adds	r3, #4
 8007038:	4619      	mov	r1, r3
 800703a:	4819      	ldr	r0, [pc, #100]	@ (80070a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800703c:	f7fe fbb3 	bl	80057a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007040:	e026      	b.n	8007090 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4413      	add	r3, r2
 8007048:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800704a:	4b14      	ldr	r3, [pc, #80]	@ (800709c <prvAddCurrentTaskToDelayedList+0x94>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007052:	68ba      	ldr	r2, [r7, #8]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	429a      	cmp	r2, r3
 8007058:	d209      	bcs.n	800706e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800705a:	4b12      	ldr	r3, [pc, #72]	@ (80070a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	4b0f      	ldr	r3, [pc, #60]	@ (800709c <prvAddCurrentTaskToDelayedList+0x94>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	3304      	adds	r3, #4
 8007064:	4619      	mov	r1, r3
 8007066:	4610      	mov	r0, r2
 8007068:	f7fe fbc1 	bl	80057ee <vListInsert>
}
 800706c:	e010      	b.n	8007090 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800706e:	4b0e      	ldr	r3, [pc, #56]	@ (80070a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	4b0a      	ldr	r3, [pc, #40]	@ (800709c <prvAddCurrentTaskToDelayedList+0x94>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	3304      	adds	r3, #4
 8007078:	4619      	mov	r1, r3
 800707a:	4610      	mov	r0, r2
 800707c:	f7fe fbb7 	bl	80057ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007080:	4b0a      	ldr	r3, [pc, #40]	@ (80070ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68ba      	ldr	r2, [r7, #8]
 8007086:	429a      	cmp	r2, r3
 8007088:	d202      	bcs.n	8007090 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800708a:	4a08      	ldr	r2, [pc, #32]	@ (80070ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	6013      	str	r3, [r2, #0]
}
 8007090:	bf00      	nop
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	20000e70 	.word	0x20000e70
 800709c:	20000998 	.word	0x20000998
 80070a0:	20000e58 	.word	0x20000e58
 80070a4:	20000e28 	.word	0x20000e28
 80070a8:	20000e24 	.word	0x20000e24
 80070ac:	20000e8c 	.word	0x20000e8c

080070b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b08a      	sub	sp, #40	@ 0x28
 80070b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80070b6:	2300      	movs	r3, #0
 80070b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80070ba:	f000 fb13 	bl	80076e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80070be:	4b1d      	ldr	r3, [pc, #116]	@ (8007134 <xTimerCreateTimerTask+0x84>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d021      	beq.n	800710a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80070c6:	2300      	movs	r3, #0
 80070c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80070ca:	2300      	movs	r3, #0
 80070cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80070ce:	1d3a      	adds	r2, r7, #4
 80070d0:	f107 0108 	add.w	r1, r7, #8
 80070d4:	f107 030c 	add.w	r3, r7, #12
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fe fb1d 	bl	8005718 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80070de:	6879      	ldr	r1, [r7, #4]
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	9202      	str	r2, [sp, #8]
 80070e6:	9301      	str	r3, [sp, #4]
 80070e8:	2302      	movs	r3, #2
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	2300      	movs	r3, #0
 80070ee:	460a      	mov	r2, r1
 80070f0:	4911      	ldr	r1, [pc, #68]	@ (8007138 <xTimerCreateTimerTask+0x88>)
 80070f2:	4812      	ldr	r0, [pc, #72]	@ (800713c <xTimerCreateTimerTask+0x8c>)
 80070f4:	f7ff f8d8 	bl	80062a8 <xTaskCreateStatic>
 80070f8:	4603      	mov	r3, r0
 80070fa:	4a11      	ldr	r2, [pc, #68]	@ (8007140 <xTimerCreateTimerTask+0x90>)
 80070fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80070fe:	4b10      	ldr	r3, [pc, #64]	@ (8007140 <xTimerCreateTimerTask+0x90>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007106:	2301      	movs	r3, #1
 8007108:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10b      	bne.n	8007128 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	613b      	str	r3, [r7, #16]
}
 8007122:	bf00      	nop
 8007124:	bf00      	nop
 8007126:	e7fd      	b.n	8007124 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007128:	697b      	ldr	r3, [r7, #20]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3718      	adds	r7, #24
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	20000ec8 	.word	0x20000ec8
 8007138:	08008348 	.word	0x08008348
 800713c:	0800727d 	.word	0x0800727d
 8007140:	20000ecc 	.word	0x20000ecc

08007144 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b08a      	sub	sp, #40	@ 0x28
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
 8007150:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007152:	2300      	movs	r3, #0
 8007154:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d10b      	bne.n	8007174 <xTimerGenericCommand+0x30>
	__asm volatile
 800715c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007160:	f383 8811 	msr	BASEPRI, r3
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	623b      	str	r3, [r7, #32]
}
 800716e:	bf00      	nop
 8007170:	bf00      	nop
 8007172:	e7fd      	b.n	8007170 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007174:	4b19      	ldr	r3, [pc, #100]	@ (80071dc <xTimerGenericCommand+0x98>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d02a      	beq.n	80071d2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2b05      	cmp	r3, #5
 800718c:	dc18      	bgt.n	80071c0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800718e:	f7ff fead 	bl	8006eec <xTaskGetSchedulerState>
 8007192:	4603      	mov	r3, r0
 8007194:	2b02      	cmp	r3, #2
 8007196:	d109      	bne.n	80071ac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007198:	4b10      	ldr	r3, [pc, #64]	@ (80071dc <xTimerGenericCommand+0x98>)
 800719a:	6818      	ldr	r0, [r3, #0]
 800719c:	f107 0110 	add.w	r1, r7, #16
 80071a0:	2300      	movs	r3, #0
 80071a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071a4:	f7fe fc90 	bl	8005ac8 <xQueueGenericSend>
 80071a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80071aa:	e012      	b.n	80071d2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80071ac:	4b0b      	ldr	r3, [pc, #44]	@ (80071dc <xTimerGenericCommand+0x98>)
 80071ae:	6818      	ldr	r0, [r3, #0]
 80071b0:	f107 0110 	add.w	r1, r7, #16
 80071b4:	2300      	movs	r3, #0
 80071b6:	2200      	movs	r2, #0
 80071b8:	f7fe fc86 	bl	8005ac8 <xQueueGenericSend>
 80071bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80071be:	e008      	b.n	80071d2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80071c0:	4b06      	ldr	r3, [pc, #24]	@ (80071dc <xTimerGenericCommand+0x98>)
 80071c2:	6818      	ldr	r0, [r3, #0]
 80071c4:	f107 0110 	add.w	r1, r7, #16
 80071c8:	2300      	movs	r3, #0
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	f7fe fd7e 	bl	8005ccc <xQueueGenericSendFromISR>
 80071d0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80071d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3728      	adds	r7, #40	@ 0x28
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	20000ec8 	.word	0x20000ec8

080071e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b088      	sub	sp, #32
 80071e4:	af02      	add	r7, sp, #8
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071ea:	4b23      	ldr	r3, [pc, #140]	@ (8007278 <prvProcessExpiredTimer+0x98>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	3304      	adds	r3, #4
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7fe fb31 	bl	8005860 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007204:	f003 0304 	and.w	r3, r3, #4
 8007208:	2b00      	cmp	r3, #0
 800720a:	d023      	beq.n	8007254 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	699a      	ldr	r2, [r3, #24]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	18d1      	adds	r1, r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	6978      	ldr	r0, [r7, #20]
 800721a:	f000 f8d5 	bl	80073c8 <prvInsertTimerInActiveList>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d020      	beq.n	8007266 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007224:	2300      	movs	r3, #0
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	2300      	movs	r3, #0
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	2100      	movs	r1, #0
 800722e:	6978      	ldr	r0, [r7, #20]
 8007230:	f7ff ff88 	bl	8007144 <xTimerGenericCommand>
 8007234:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d114      	bne.n	8007266 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800723c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007240:	f383 8811 	msr	BASEPRI, r3
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	60fb      	str	r3, [r7, #12]
}
 800724e:	bf00      	nop
 8007250:	bf00      	nop
 8007252:	e7fd      	b.n	8007250 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800725a:	f023 0301 	bic.w	r3, r3, #1
 800725e:	b2da      	uxtb	r2, r3
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	6978      	ldr	r0, [r7, #20]
 800726c:	4798      	blx	r3
}
 800726e:	bf00      	nop
 8007270:	3718      	adds	r7, #24
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	20000ec0 	.word	0x20000ec0

0800727c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007284:	f107 0308 	add.w	r3, r7, #8
 8007288:	4618      	mov	r0, r3
 800728a:	f000 f859 	bl	8007340 <prvGetNextExpireTime>
 800728e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	4619      	mov	r1, r3
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f000 f805 	bl	80072a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800729a:	f000 f8d7 	bl	800744c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800729e:	bf00      	nop
 80072a0:	e7f0      	b.n	8007284 <prvTimerTask+0x8>
	...

080072a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80072ae:	f7ff fa29 	bl	8006704 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072b2:	f107 0308 	add.w	r3, r7, #8
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 f866 	bl	8007388 <prvSampleTimeNow>
 80072bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d130      	bne.n	8007326 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10a      	bne.n	80072e0 <prvProcessTimerOrBlockTask+0x3c>
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d806      	bhi.n	80072e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80072d2:	f7ff fa25 	bl	8006720 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80072d6:	68f9      	ldr	r1, [r7, #12]
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7ff ff81 	bl	80071e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80072de:	e024      	b.n	800732a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d008      	beq.n	80072f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80072e6:	4b13      	ldr	r3, [pc, #76]	@ (8007334 <prvProcessTimerOrBlockTask+0x90>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d101      	bne.n	80072f4 <prvProcessTimerOrBlockTask+0x50>
 80072f0:	2301      	movs	r3, #1
 80072f2:	e000      	b.n	80072f6 <prvProcessTimerOrBlockTask+0x52>
 80072f4:	2300      	movs	r3, #0
 80072f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80072f8:	4b0f      	ldr	r3, [pc, #60]	@ (8007338 <prvProcessTimerOrBlockTask+0x94>)
 80072fa:	6818      	ldr	r0, [r3, #0]
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	4619      	mov	r1, r3
 8007306:	f7fe ff9b 	bl	8006240 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800730a:	f7ff fa09 	bl	8006720 <xTaskResumeAll>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10a      	bne.n	800732a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007314:	4b09      	ldr	r3, [pc, #36]	@ (800733c <prvProcessTimerOrBlockTask+0x98>)
 8007316:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800731a:	601a      	str	r2, [r3, #0]
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	f3bf 8f6f 	isb	sy
}
 8007324:	e001      	b.n	800732a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007326:	f7ff f9fb 	bl	8006720 <xTaskResumeAll>
}
 800732a:	bf00      	nop
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	20000ec4 	.word	0x20000ec4
 8007338:	20000ec8 	.word	0x20000ec8
 800733c:	e000ed04 	.word	0xe000ed04

08007340 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007348:	4b0e      	ldr	r3, [pc, #56]	@ (8007384 <prvGetNextExpireTime+0x44>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <prvGetNextExpireTime+0x16>
 8007352:	2201      	movs	r2, #1
 8007354:	e000      	b.n	8007358 <prvGetNextExpireTime+0x18>
 8007356:	2200      	movs	r2, #0
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d105      	bne.n	8007370 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007364:	4b07      	ldr	r3, [pc, #28]	@ (8007384 <prvGetNextExpireTime+0x44>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	60fb      	str	r3, [r7, #12]
 800736e:	e001      	b.n	8007374 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007370:	2300      	movs	r3, #0
 8007372:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007374:	68fb      	ldr	r3, [r7, #12]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	20000ec0 	.word	0x20000ec0

08007388 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007390:	f7ff fa64 	bl	800685c <xTaskGetTickCount>
 8007394:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007396:	4b0b      	ldr	r3, [pc, #44]	@ (80073c4 <prvSampleTimeNow+0x3c>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	429a      	cmp	r2, r3
 800739e:	d205      	bcs.n	80073ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80073a0:	f000 f93a 	bl	8007618 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	601a      	str	r2, [r3, #0]
 80073aa:	e002      	b.n	80073b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80073b2:	4a04      	ldr	r2, [pc, #16]	@ (80073c4 <prvSampleTimeNow+0x3c>)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80073b8:	68fb      	ldr	r3, [r7, #12]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	20000ed0 	.word	0x20000ed0

080073c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b086      	sub	sp, #24
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
 80073d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80073d6:	2300      	movs	r3, #0
 80073d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d812      	bhi.n	8007414 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	1ad2      	subs	r2, r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d302      	bcc.n	8007402 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80073fc:	2301      	movs	r3, #1
 80073fe:	617b      	str	r3, [r7, #20]
 8007400:	e01b      	b.n	800743a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007402:	4b10      	ldr	r3, [pc, #64]	@ (8007444 <prvInsertTimerInActiveList+0x7c>)
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	3304      	adds	r3, #4
 800740a:	4619      	mov	r1, r3
 800740c:	4610      	mov	r0, r2
 800740e:	f7fe f9ee 	bl	80057ee <vListInsert>
 8007412:	e012      	b.n	800743a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	429a      	cmp	r2, r3
 800741a:	d206      	bcs.n	800742a <prvInsertTimerInActiveList+0x62>
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	429a      	cmp	r2, r3
 8007422:	d302      	bcc.n	800742a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007424:	2301      	movs	r3, #1
 8007426:	617b      	str	r3, [r7, #20]
 8007428:	e007      	b.n	800743a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800742a:	4b07      	ldr	r3, [pc, #28]	@ (8007448 <prvInsertTimerInActiveList+0x80>)
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	3304      	adds	r3, #4
 8007432:	4619      	mov	r1, r3
 8007434:	4610      	mov	r0, r2
 8007436:	f7fe f9da 	bl	80057ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800743a:	697b      	ldr	r3, [r7, #20]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	20000ec4 	.word	0x20000ec4
 8007448:	20000ec0 	.word	0x20000ec0

0800744c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b08e      	sub	sp, #56	@ 0x38
 8007450:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007452:	e0ce      	b.n	80075f2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	da19      	bge.n	800748e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800745a:	1d3b      	adds	r3, r7, #4
 800745c:	3304      	adds	r3, #4
 800745e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10b      	bne.n	800747e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746a:	f383 8811 	msr	BASEPRI, r3
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	61fb      	str	r3, [r7, #28]
}
 8007478:	bf00      	nop
 800747a:	bf00      	nop
 800747c:	e7fd      	b.n	800747a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800747e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007484:	6850      	ldr	r0, [r2, #4]
 8007486:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007488:	6892      	ldr	r2, [r2, #8]
 800748a:	4611      	mov	r1, r2
 800748c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2b00      	cmp	r3, #0
 8007492:	f2c0 80ae 	blt.w	80075f2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800749a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d004      	beq.n	80074ac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a4:	3304      	adds	r3, #4
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fe f9da 	bl	8005860 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074ac:	463b      	mov	r3, r7
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7ff ff6a 	bl	8007388 <prvSampleTimeNow>
 80074b4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b09      	cmp	r3, #9
 80074ba:	f200 8097 	bhi.w	80075ec <prvProcessReceivedCommands+0x1a0>
 80074be:	a201      	add	r2, pc, #4	@ (adr r2, 80074c4 <prvProcessReceivedCommands+0x78>)
 80074c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c4:	080074ed 	.word	0x080074ed
 80074c8:	080074ed 	.word	0x080074ed
 80074cc:	080074ed 	.word	0x080074ed
 80074d0:	08007563 	.word	0x08007563
 80074d4:	08007577 	.word	0x08007577
 80074d8:	080075c3 	.word	0x080075c3
 80074dc:	080074ed 	.word	0x080074ed
 80074e0:	080074ed 	.word	0x080074ed
 80074e4:	08007563 	.word	0x08007563
 80074e8:	08007577 	.word	0x08007577
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074f2:	f043 0301 	orr.w	r3, r3, #1
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	18d1      	adds	r1, r2, r3
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800750a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800750c:	f7ff ff5c 	bl	80073c8 <prvInsertTimerInActiveList>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d06c      	beq.n	80075f0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007518:	6a1b      	ldr	r3, [r3, #32]
 800751a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800751c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800751e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007520:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007524:	f003 0304 	and.w	r3, r3, #4
 8007528:	2b00      	cmp	r3, #0
 800752a:	d061      	beq.n	80075f0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	441a      	add	r2, r3
 8007534:	2300      	movs	r3, #0
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	2300      	movs	r3, #0
 800753a:	2100      	movs	r1, #0
 800753c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800753e:	f7ff fe01 	bl	8007144 <xTimerGenericCommand>
 8007542:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d152      	bne.n	80075f0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800754a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	61bb      	str	r3, [r7, #24]
}
 800755c:	bf00      	nop
 800755e:	bf00      	nop
 8007560:	e7fd      	b.n	800755e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007564:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007568:	f023 0301 	bic.w	r3, r3, #1
 800756c:	b2da      	uxtb	r2, r3
 800756e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007570:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007574:	e03d      	b.n	80075f2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007578:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800757c:	f043 0301 	orr.w	r3, r3, #1
 8007580:	b2da      	uxtb	r2, r3
 8007582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007584:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800758c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800758e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10b      	bne.n	80075ae <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800759a:	f383 8811 	msr	BASEPRI, r3
 800759e:	f3bf 8f6f 	isb	sy
 80075a2:	f3bf 8f4f 	dsb	sy
 80075a6:	617b      	str	r3, [r7, #20]
}
 80075a8:	bf00      	nop
 80075aa:	bf00      	nop
 80075ac:	e7fd      	b.n	80075aa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80075ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b0:	699a      	ldr	r2, [r3, #24]
 80075b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b4:	18d1      	adds	r1, r2, r3
 80075b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075bc:	f7ff ff04 	bl	80073c8 <prvInsertTimerInActiveList>
					break;
 80075c0:	e017      	b.n	80075f2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80075c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075c8:	f003 0302 	and.w	r3, r3, #2
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d103      	bne.n	80075d8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80075d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075d2:	f000 fbe9 	bl	8007da8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80075d6:	e00c      	b.n	80075f2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075de:	f023 0301 	bic.w	r3, r3, #1
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80075ea:	e002      	b.n	80075f2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80075ec:	bf00      	nop
 80075ee:	e000      	b.n	80075f2 <prvProcessReceivedCommands+0x1a6>
					break;
 80075f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075f2:	4b08      	ldr	r3, [pc, #32]	@ (8007614 <prvProcessReceivedCommands+0x1c8>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	1d39      	adds	r1, r7, #4
 80075f8:	2200      	movs	r2, #0
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fe fc04 	bl	8005e08 <xQueueReceive>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	f47f af26 	bne.w	8007454 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007608:	bf00      	nop
 800760a:	bf00      	nop
 800760c:	3730      	adds	r7, #48	@ 0x30
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	20000ec8 	.word	0x20000ec8

08007618 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b088      	sub	sp, #32
 800761c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800761e:	e049      	b.n	80076b4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007620:	4b2e      	ldr	r3, [pc, #184]	@ (80076dc <prvSwitchTimerLists+0xc4>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800762a:	4b2c      	ldr	r3, [pc, #176]	@ (80076dc <prvSwitchTimerLists+0xc4>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	3304      	adds	r3, #4
 8007638:	4618      	mov	r0, r3
 800763a:	f7fe f911 	bl	8005860 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800764c:	f003 0304 	and.w	r3, r3, #4
 8007650:	2b00      	cmp	r3, #0
 8007652:	d02f      	beq.n	80076b4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	699b      	ldr	r3, [r3, #24]
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	4413      	add	r3, r2
 800765c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	429a      	cmp	r2, r3
 8007664:	d90e      	bls.n	8007684 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007672:	4b1a      	ldr	r3, [pc, #104]	@ (80076dc <prvSwitchTimerLists+0xc4>)
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	3304      	adds	r3, #4
 800767a:	4619      	mov	r1, r3
 800767c:	4610      	mov	r0, r2
 800767e:	f7fe f8b6 	bl	80057ee <vListInsert>
 8007682:	e017      	b.n	80076b4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007684:	2300      	movs	r3, #0
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	2300      	movs	r3, #0
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	2100      	movs	r1, #0
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f7ff fd58 	bl	8007144 <xTimerGenericCommand>
 8007694:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d10b      	bne.n	80076b4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800769c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a0:	f383 8811 	msr	BASEPRI, r3
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	603b      	str	r3, [r7, #0]
}
 80076ae:	bf00      	nop
 80076b0:	bf00      	nop
 80076b2:	e7fd      	b.n	80076b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076b4:	4b09      	ldr	r3, [pc, #36]	@ (80076dc <prvSwitchTimerLists+0xc4>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1b0      	bne.n	8007620 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80076be:	4b07      	ldr	r3, [pc, #28]	@ (80076dc <prvSwitchTimerLists+0xc4>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80076c4:	4b06      	ldr	r3, [pc, #24]	@ (80076e0 <prvSwitchTimerLists+0xc8>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a04      	ldr	r2, [pc, #16]	@ (80076dc <prvSwitchTimerLists+0xc4>)
 80076ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80076cc:	4a04      	ldr	r2, [pc, #16]	@ (80076e0 <prvSwitchTimerLists+0xc8>)
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	6013      	str	r3, [r2, #0]
}
 80076d2:	bf00      	nop
 80076d4:	3718      	adds	r7, #24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	20000ec0 	.word	0x20000ec0
 80076e0:	20000ec4 	.word	0x20000ec4

080076e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80076ea:	f000 f96d 	bl	80079c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80076ee:	4b15      	ldr	r3, [pc, #84]	@ (8007744 <prvCheckForValidListAndQueue+0x60>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d120      	bne.n	8007738 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80076f6:	4814      	ldr	r0, [pc, #80]	@ (8007748 <prvCheckForValidListAndQueue+0x64>)
 80076f8:	f7fe f828 	bl	800574c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80076fc:	4813      	ldr	r0, [pc, #76]	@ (800774c <prvCheckForValidListAndQueue+0x68>)
 80076fe:	f7fe f825 	bl	800574c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007702:	4b13      	ldr	r3, [pc, #76]	@ (8007750 <prvCheckForValidListAndQueue+0x6c>)
 8007704:	4a10      	ldr	r2, [pc, #64]	@ (8007748 <prvCheckForValidListAndQueue+0x64>)
 8007706:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007708:	4b12      	ldr	r3, [pc, #72]	@ (8007754 <prvCheckForValidListAndQueue+0x70>)
 800770a:	4a10      	ldr	r2, [pc, #64]	@ (800774c <prvCheckForValidListAndQueue+0x68>)
 800770c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800770e:	2300      	movs	r3, #0
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	4b11      	ldr	r3, [pc, #68]	@ (8007758 <prvCheckForValidListAndQueue+0x74>)
 8007714:	4a11      	ldr	r2, [pc, #68]	@ (800775c <prvCheckForValidListAndQueue+0x78>)
 8007716:	2110      	movs	r1, #16
 8007718:	200a      	movs	r0, #10
 800771a:	f7fe f935 	bl	8005988 <xQueueGenericCreateStatic>
 800771e:	4603      	mov	r3, r0
 8007720:	4a08      	ldr	r2, [pc, #32]	@ (8007744 <prvCheckForValidListAndQueue+0x60>)
 8007722:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007724:	4b07      	ldr	r3, [pc, #28]	@ (8007744 <prvCheckForValidListAndQueue+0x60>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d005      	beq.n	8007738 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800772c:	4b05      	ldr	r3, [pc, #20]	@ (8007744 <prvCheckForValidListAndQueue+0x60>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	490b      	ldr	r1, [pc, #44]	@ (8007760 <prvCheckForValidListAndQueue+0x7c>)
 8007732:	4618      	mov	r0, r3
 8007734:	f7fe fd5a 	bl	80061ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007738:	f000 f978 	bl	8007a2c <vPortExitCritical>
}
 800773c:	bf00      	nop
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	20000ec8 	.word	0x20000ec8
 8007748:	20000e98 	.word	0x20000e98
 800774c:	20000eac 	.word	0x20000eac
 8007750:	20000ec0 	.word	0x20000ec0
 8007754:	20000ec4 	.word	0x20000ec4
 8007758:	20000f74 	.word	0x20000f74
 800775c:	20000ed4 	.word	0x20000ed4
 8007760:	08008350 	.word	0x08008350

08007764 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	3b04      	subs	r3, #4
 8007774:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800777c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	3b04      	subs	r3, #4
 8007782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	f023 0201 	bic.w	r2, r3, #1
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	3b04      	subs	r3, #4
 8007792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007794:	4a0c      	ldr	r2, [pc, #48]	@ (80077c8 <pxPortInitialiseStack+0x64>)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	3b14      	subs	r3, #20
 800779e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	3b04      	subs	r3, #4
 80077aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f06f 0202 	mvn.w	r2, #2
 80077b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	3b20      	subs	r3, #32
 80077b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80077ba:	68fb      	ldr	r3, [r7, #12]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	080077cd 	.word	0x080077cd

080077cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80077d2:	2300      	movs	r3, #0
 80077d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80077d6:	4b13      	ldr	r3, [pc, #76]	@ (8007824 <prvTaskExitError+0x58>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077de:	d00b      	beq.n	80077f8 <prvTaskExitError+0x2c>
	__asm volatile
 80077e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	60fb      	str	r3, [r7, #12]
}
 80077f2:	bf00      	nop
 80077f4:	bf00      	nop
 80077f6:	e7fd      	b.n	80077f4 <prvTaskExitError+0x28>
	__asm volatile
 80077f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077fc:	f383 8811 	msr	BASEPRI, r3
 8007800:	f3bf 8f6f 	isb	sy
 8007804:	f3bf 8f4f 	dsb	sy
 8007808:	60bb      	str	r3, [r7, #8]
}
 800780a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800780c:	bf00      	nop
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d0fc      	beq.n	800780e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007814:	bf00      	nop
 8007816:	bf00      	nop
 8007818:	3714      	adds	r7, #20
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	2000000c 	.word	0x2000000c
	...

08007830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007830:	4b07      	ldr	r3, [pc, #28]	@ (8007850 <pxCurrentTCBConst2>)
 8007832:	6819      	ldr	r1, [r3, #0]
 8007834:	6808      	ldr	r0, [r1, #0]
 8007836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800783a:	f380 8809 	msr	PSP, r0
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f04f 0000 	mov.w	r0, #0
 8007846:	f380 8811 	msr	BASEPRI, r0
 800784a:	4770      	bx	lr
 800784c:	f3af 8000 	nop.w

08007850 <pxCurrentTCBConst2>:
 8007850:	20000998 	.word	0x20000998
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007854:	bf00      	nop
 8007856:	bf00      	nop

08007858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007858:	4808      	ldr	r0, [pc, #32]	@ (800787c <prvPortStartFirstTask+0x24>)
 800785a:	6800      	ldr	r0, [r0, #0]
 800785c:	6800      	ldr	r0, [r0, #0]
 800785e:	f380 8808 	msr	MSP, r0
 8007862:	f04f 0000 	mov.w	r0, #0
 8007866:	f380 8814 	msr	CONTROL, r0
 800786a:	b662      	cpsie	i
 800786c:	b661      	cpsie	f
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	df00      	svc	0
 8007878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800787a:	bf00      	nop
 800787c:	e000ed08 	.word	0xe000ed08

08007880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007886:	4b47      	ldr	r3, [pc, #284]	@ (80079a4 <xPortStartScheduler+0x124>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a47      	ldr	r2, [pc, #284]	@ (80079a8 <xPortStartScheduler+0x128>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d10b      	bne.n	80078a8 <xPortStartScheduler+0x28>
	__asm volatile
 8007890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	613b      	str	r3, [r7, #16]
}
 80078a2:	bf00      	nop
 80078a4:	bf00      	nop
 80078a6:	e7fd      	b.n	80078a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80078a8:	4b3e      	ldr	r3, [pc, #248]	@ (80079a4 <xPortStartScheduler+0x124>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a3f      	ldr	r2, [pc, #252]	@ (80079ac <xPortStartScheduler+0x12c>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d10b      	bne.n	80078ca <xPortStartScheduler+0x4a>
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b6:	f383 8811 	msr	BASEPRI, r3
 80078ba:	f3bf 8f6f 	isb	sy
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	60fb      	str	r3, [r7, #12]
}
 80078c4:	bf00      	nop
 80078c6:	bf00      	nop
 80078c8:	e7fd      	b.n	80078c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078ca:	4b39      	ldr	r3, [pc, #228]	@ (80079b0 <xPortStartScheduler+0x130>)
 80078cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	22ff      	movs	r2, #255	@ 0xff
 80078da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078e4:	78fb      	ldrb	r3, [r7, #3]
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	4b31      	ldr	r3, [pc, #196]	@ (80079b4 <xPortStartScheduler+0x134>)
 80078f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80078f2:	4b31      	ldr	r3, [pc, #196]	@ (80079b8 <xPortStartScheduler+0x138>)
 80078f4:	2207      	movs	r2, #7
 80078f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078f8:	e009      	b.n	800790e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80078fa:	4b2f      	ldr	r3, [pc, #188]	@ (80079b8 <xPortStartScheduler+0x138>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	3b01      	subs	r3, #1
 8007900:	4a2d      	ldr	r2, [pc, #180]	@ (80079b8 <xPortStartScheduler+0x138>)
 8007902:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007904:	78fb      	ldrb	r3, [r7, #3]
 8007906:	b2db      	uxtb	r3, r3
 8007908:	005b      	lsls	r3, r3, #1
 800790a:	b2db      	uxtb	r3, r3
 800790c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800790e:	78fb      	ldrb	r3, [r7, #3]
 8007910:	b2db      	uxtb	r3, r3
 8007912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007916:	2b80      	cmp	r3, #128	@ 0x80
 8007918:	d0ef      	beq.n	80078fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800791a:	4b27      	ldr	r3, [pc, #156]	@ (80079b8 <xPortStartScheduler+0x138>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f1c3 0307 	rsb	r3, r3, #7
 8007922:	2b04      	cmp	r3, #4
 8007924:	d00b      	beq.n	800793e <xPortStartScheduler+0xbe>
	__asm volatile
 8007926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800792a:	f383 8811 	msr	BASEPRI, r3
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f3bf 8f4f 	dsb	sy
 8007936:	60bb      	str	r3, [r7, #8]
}
 8007938:	bf00      	nop
 800793a:	bf00      	nop
 800793c:	e7fd      	b.n	800793a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800793e:	4b1e      	ldr	r3, [pc, #120]	@ (80079b8 <xPortStartScheduler+0x138>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	021b      	lsls	r3, r3, #8
 8007944:	4a1c      	ldr	r2, [pc, #112]	@ (80079b8 <xPortStartScheduler+0x138>)
 8007946:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007948:	4b1b      	ldr	r3, [pc, #108]	@ (80079b8 <xPortStartScheduler+0x138>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007950:	4a19      	ldr	r2, [pc, #100]	@ (80079b8 <xPortStartScheduler+0x138>)
 8007952:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	b2da      	uxtb	r2, r3
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800795c:	4b17      	ldr	r3, [pc, #92]	@ (80079bc <xPortStartScheduler+0x13c>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a16      	ldr	r2, [pc, #88]	@ (80079bc <xPortStartScheduler+0x13c>)
 8007962:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007966:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007968:	4b14      	ldr	r3, [pc, #80]	@ (80079bc <xPortStartScheduler+0x13c>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a13      	ldr	r2, [pc, #76]	@ (80079bc <xPortStartScheduler+0x13c>)
 800796e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007972:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007974:	f000 f8da 	bl	8007b2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007978:	4b11      	ldr	r3, [pc, #68]	@ (80079c0 <xPortStartScheduler+0x140>)
 800797a:	2200      	movs	r2, #0
 800797c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800797e:	f000 f8f9 	bl	8007b74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007982:	4b10      	ldr	r3, [pc, #64]	@ (80079c4 <xPortStartScheduler+0x144>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a0f      	ldr	r2, [pc, #60]	@ (80079c4 <xPortStartScheduler+0x144>)
 8007988:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800798c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800798e:	f7ff ff63 	bl	8007858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007992:	f7ff f82d 	bl	80069f0 <vTaskSwitchContext>
	prvTaskExitError();
 8007996:	f7ff ff19 	bl	80077cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3718      	adds	r7, #24
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	e000ed00 	.word	0xe000ed00
 80079a8:	410fc271 	.word	0x410fc271
 80079ac:	410fc270 	.word	0x410fc270
 80079b0:	e000e400 	.word	0xe000e400
 80079b4:	20000fc4 	.word	0x20000fc4
 80079b8:	20000fc8 	.word	0x20000fc8
 80079bc:	e000ed20 	.word	0xe000ed20
 80079c0:	2000000c 	.word	0x2000000c
 80079c4:	e000ef34 	.word	0xe000ef34

080079c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
	__asm volatile
 80079ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	607b      	str	r3, [r7, #4]
}
 80079e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80079e2:	4b10      	ldr	r3, [pc, #64]	@ (8007a24 <vPortEnterCritical+0x5c>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3301      	adds	r3, #1
 80079e8:	4a0e      	ldr	r2, [pc, #56]	@ (8007a24 <vPortEnterCritical+0x5c>)
 80079ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80079ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007a24 <vPortEnterCritical+0x5c>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d110      	bne.n	8007a16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80079f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007a28 <vPortEnterCritical+0x60>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00b      	beq.n	8007a16 <vPortEnterCritical+0x4e>
	__asm volatile
 80079fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	603b      	str	r3, [r7, #0]
}
 8007a10:	bf00      	nop
 8007a12:	bf00      	nop
 8007a14:	e7fd      	b.n	8007a12 <vPortEnterCritical+0x4a>
	}
}
 8007a16:	bf00      	nop
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	2000000c 	.word	0x2000000c
 8007a28:	e000ed04 	.word	0xe000ed04

08007a2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a32:	4b12      	ldr	r3, [pc, #72]	@ (8007a7c <vPortExitCritical+0x50>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10b      	bne.n	8007a52 <vPortExitCritical+0x26>
	__asm volatile
 8007a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a3e:	f383 8811 	msr	BASEPRI, r3
 8007a42:	f3bf 8f6f 	isb	sy
 8007a46:	f3bf 8f4f 	dsb	sy
 8007a4a:	607b      	str	r3, [r7, #4]
}
 8007a4c:	bf00      	nop
 8007a4e:	bf00      	nop
 8007a50:	e7fd      	b.n	8007a4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007a52:	4b0a      	ldr	r3, [pc, #40]	@ (8007a7c <vPortExitCritical+0x50>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	3b01      	subs	r3, #1
 8007a58:	4a08      	ldr	r2, [pc, #32]	@ (8007a7c <vPortExitCritical+0x50>)
 8007a5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a5c:	4b07      	ldr	r3, [pc, #28]	@ (8007a7c <vPortExitCritical+0x50>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d105      	bne.n	8007a70 <vPortExitCritical+0x44>
 8007a64:	2300      	movs	r3, #0
 8007a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	f383 8811 	msr	BASEPRI, r3
}
 8007a6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	2000000c 	.word	0x2000000c

08007a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a80:	f3ef 8009 	mrs	r0, PSP
 8007a84:	f3bf 8f6f 	isb	sy
 8007a88:	4b15      	ldr	r3, [pc, #84]	@ (8007ae0 <pxCurrentTCBConst>)
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	f01e 0f10 	tst.w	lr, #16
 8007a90:	bf08      	it	eq
 8007a92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a9a:	6010      	str	r0, [r2, #0]
 8007a9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007aa0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007aa4:	f380 8811 	msr	BASEPRI, r0
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	f7fe ff9e 	bl	80069f0 <vTaskSwitchContext>
 8007ab4:	f04f 0000 	mov.w	r0, #0
 8007ab8:	f380 8811 	msr	BASEPRI, r0
 8007abc:	bc09      	pop	{r0, r3}
 8007abe:	6819      	ldr	r1, [r3, #0]
 8007ac0:	6808      	ldr	r0, [r1, #0]
 8007ac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac6:	f01e 0f10 	tst.w	lr, #16
 8007aca:	bf08      	it	eq
 8007acc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ad0:	f380 8809 	msr	PSP, r0
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	f3af 8000 	nop.w

08007ae0 <pxCurrentTCBConst>:
 8007ae0:	20000998 	.word	0x20000998
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ae4:	bf00      	nop
 8007ae6:	bf00      	nop

08007ae8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
	__asm volatile
 8007aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	607b      	str	r3, [r7, #4]
}
 8007b00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b02:	f7fe febb 	bl	800687c <xTaskIncrementTick>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d003      	beq.n	8007b14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b0c:	4b06      	ldr	r3, [pc, #24]	@ (8007b28 <xPortSysTickHandler+0x40>)
 8007b0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	2300      	movs	r3, #0
 8007b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	f383 8811 	msr	BASEPRI, r3
}
 8007b1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b20:	bf00      	nop
 8007b22:	3708      	adds	r7, #8
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	e000ed04 	.word	0xe000ed04

08007b2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b30:	4b0b      	ldr	r3, [pc, #44]	@ (8007b60 <vPortSetupTimerInterrupt+0x34>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b36:	4b0b      	ldr	r3, [pc, #44]	@ (8007b64 <vPortSetupTimerInterrupt+0x38>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b68 <vPortSetupTimerInterrupt+0x3c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a0a      	ldr	r2, [pc, #40]	@ (8007b6c <vPortSetupTimerInterrupt+0x40>)
 8007b42:	fba2 2303 	umull	r2, r3, r2, r3
 8007b46:	099b      	lsrs	r3, r3, #6
 8007b48:	4a09      	ldr	r2, [pc, #36]	@ (8007b70 <vPortSetupTimerInterrupt+0x44>)
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b4e:	4b04      	ldr	r3, [pc, #16]	@ (8007b60 <vPortSetupTimerInterrupt+0x34>)
 8007b50:	2207      	movs	r2, #7
 8007b52:	601a      	str	r2, [r3, #0]
}
 8007b54:	bf00      	nop
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	e000e010 	.word	0xe000e010
 8007b64:	e000e018 	.word	0xe000e018
 8007b68:	20000000 	.word	0x20000000
 8007b6c:	10624dd3 	.word	0x10624dd3
 8007b70:	e000e014 	.word	0xe000e014

08007b74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007b84 <vPortEnableVFP+0x10>
 8007b78:	6801      	ldr	r1, [r0, #0]
 8007b7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007b7e:	6001      	str	r1, [r0, #0]
 8007b80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b82:	bf00      	nop
 8007b84:	e000ed88 	.word	0xe000ed88

08007b88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b8e:	f3ef 8305 	mrs	r3, IPSR
 8007b92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2b0f      	cmp	r3, #15
 8007b98:	d915      	bls.n	8007bc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b9a:	4a18      	ldr	r2, [pc, #96]	@ (8007bfc <vPortValidateInterruptPriority+0x74>)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ba4:	4b16      	ldr	r3, [pc, #88]	@ (8007c00 <vPortValidateInterruptPriority+0x78>)
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	7afa      	ldrb	r2, [r7, #11]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d20b      	bcs.n	8007bc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	607b      	str	r3, [r7, #4]
}
 8007bc0:	bf00      	nop
 8007bc2:	bf00      	nop
 8007bc4:	e7fd      	b.n	8007bc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8007c04 <vPortValidateInterruptPriority+0x7c>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007bce:	4b0e      	ldr	r3, [pc, #56]	@ (8007c08 <vPortValidateInterruptPriority+0x80>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d90b      	bls.n	8007bee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bda:	f383 8811 	msr	BASEPRI, r3
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	603b      	str	r3, [r7, #0]
}
 8007be8:	bf00      	nop
 8007bea:	bf00      	nop
 8007bec:	e7fd      	b.n	8007bea <vPortValidateInterruptPriority+0x62>
	}
 8007bee:	bf00      	nop
 8007bf0:	3714      	adds	r7, #20
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	e000e3f0 	.word	0xe000e3f0
 8007c00:	20000fc4 	.word	0x20000fc4
 8007c04:	e000ed0c 	.word	0xe000ed0c
 8007c08:	20000fc8 	.word	0x20000fc8

08007c0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b08a      	sub	sp, #40	@ 0x28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c14:	2300      	movs	r3, #0
 8007c16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c18:	f7fe fd74 	bl	8006704 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c1c:	4b5c      	ldr	r3, [pc, #368]	@ (8007d90 <pvPortMalloc+0x184>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d101      	bne.n	8007c28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c24:	f000 f924 	bl	8007e70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c28:	4b5a      	ldr	r3, [pc, #360]	@ (8007d94 <pvPortMalloc+0x188>)
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4013      	ands	r3, r2
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f040 8095 	bne.w	8007d60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d01e      	beq.n	8007c7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007c3c:	2208      	movs	r2, #8
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4413      	add	r3, r2
 8007c42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f003 0307 	and.w	r3, r3, #7
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d015      	beq.n	8007c7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f023 0307 	bic.w	r3, r3, #7
 8007c54:	3308      	adds	r3, #8
 8007c56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f003 0307 	and.w	r3, r3, #7
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00b      	beq.n	8007c7a <pvPortMalloc+0x6e>
	__asm volatile
 8007c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	617b      	str	r3, [r7, #20]
}
 8007c74:	bf00      	nop
 8007c76:	bf00      	nop
 8007c78:	e7fd      	b.n	8007c76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d06f      	beq.n	8007d60 <pvPortMalloc+0x154>
 8007c80:	4b45      	ldr	r3, [pc, #276]	@ (8007d98 <pvPortMalloc+0x18c>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d86a      	bhi.n	8007d60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c8a:	4b44      	ldr	r3, [pc, #272]	@ (8007d9c <pvPortMalloc+0x190>)
 8007c8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c8e:	4b43      	ldr	r3, [pc, #268]	@ (8007d9c <pvPortMalloc+0x190>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c94:	e004      	b.n	8007ca0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d903      	bls.n	8007cb2 <pvPortMalloc+0xa6>
 8007caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d1f1      	bne.n	8007c96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007cb2:	4b37      	ldr	r3, [pc, #220]	@ (8007d90 <pvPortMalloc+0x184>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d051      	beq.n	8007d60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007cbc:	6a3b      	ldr	r3, [r7, #32]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2208      	movs	r2, #8
 8007cc2:	4413      	add	r3, r2
 8007cc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	6a3b      	ldr	r3, [r7, #32]
 8007ccc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd0:	685a      	ldr	r2, [r3, #4]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	1ad2      	subs	r2, r2, r3
 8007cd6:	2308      	movs	r3, #8
 8007cd8:	005b      	lsls	r3, r3, #1
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d920      	bls.n	8007d20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	f003 0307 	and.w	r3, r3, #7
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00b      	beq.n	8007d08 <pvPortMalloc+0xfc>
	__asm volatile
 8007cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	613b      	str	r3, [r7, #16]
}
 8007d02:	bf00      	nop
 8007d04:	bf00      	nop
 8007d06:	e7fd      	b.n	8007d04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	1ad2      	subs	r2, r2, r3
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d1a:	69b8      	ldr	r0, [r7, #24]
 8007d1c:	f000 f90a 	bl	8007f34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d20:	4b1d      	ldr	r3, [pc, #116]	@ (8007d98 <pvPortMalloc+0x18c>)
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8007d98 <pvPortMalloc+0x18c>)
 8007d2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8007d98 <pvPortMalloc+0x18c>)
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	4b1b      	ldr	r3, [pc, #108]	@ (8007da0 <pvPortMalloc+0x194>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d203      	bcs.n	8007d42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d3a:	4b17      	ldr	r3, [pc, #92]	@ (8007d98 <pvPortMalloc+0x18c>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a18      	ldr	r2, [pc, #96]	@ (8007da0 <pvPortMalloc+0x194>)
 8007d40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d44:	685a      	ldr	r2, [r3, #4]
 8007d46:	4b13      	ldr	r3, [pc, #76]	@ (8007d94 <pvPortMalloc+0x188>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	431a      	orrs	r2, r3
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d52:	2200      	movs	r2, #0
 8007d54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007d56:	4b13      	ldr	r3, [pc, #76]	@ (8007da4 <pvPortMalloc+0x198>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	4a11      	ldr	r2, [pc, #68]	@ (8007da4 <pvPortMalloc+0x198>)
 8007d5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d60:	f7fe fcde 	bl	8006720 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	f003 0307 	and.w	r3, r3, #7
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00b      	beq.n	8007d86 <pvPortMalloc+0x17a>
	__asm volatile
 8007d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	60fb      	str	r3, [r7, #12]
}
 8007d80:	bf00      	nop
 8007d82:	bf00      	nop
 8007d84:	e7fd      	b.n	8007d82 <pvPortMalloc+0x176>
	return pvReturn;
 8007d86:	69fb      	ldr	r3, [r7, #28]
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3728      	adds	r7, #40	@ 0x28
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	20004bd4 	.word	0x20004bd4
 8007d94:	20004be8 	.word	0x20004be8
 8007d98:	20004bd8 	.word	0x20004bd8
 8007d9c:	20004bcc 	.word	0x20004bcc
 8007da0:	20004bdc 	.word	0x20004bdc
 8007da4:	20004be0 	.word	0x20004be0

08007da8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d04f      	beq.n	8007e5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007dba:	2308      	movs	r3, #8
 8007dbc:	425b      	negs	r3, r3
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	685a      	ldr	r2, [r3, #4]
 8007dcc:	4b25      	ldr	r3, [pc, #148]	@ (8007e64 <vPortFree+0xbc>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10b      	bne.n	8007dee <vPortFree+0x46>
	__asm volatile
 8007dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	60fb      	str	r3, [r7, #12]
}
 8007de8:	bf00      	nop
 8007dea:	bf00      	nop
 8007dec:	e7fd      	b.n	8007dea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00b      	beq.n	8007e0e <vPortFree+0x66>
	__asm volatile
 8007df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	60bb      	str	r3, [r7, #8]
}
 8007e08:	bf00      	nop
 8007e0a:	bf00      	nop
 8007e0c:	e7fd      	b.n	8007e0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	685a      	ldr	r2, [r3, #4]
 8007e12:	4b14      	ldr	r3, [pc, #80]	@ (8007e64 <vPortFree+0xbc>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4013      	ands	r3, r2
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d01e      	beq.n	8007e5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d11a      	bne.n	8007e5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	685a      	ldr	r2, [r3, #4]
 8007e28:	4b0e      	ldr	r3, [pc, #56]	@ (8007e64 <vPortFree+0xbc>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	43db      	mvns	r3, r3
 8007e2e:	401a      	ands	r2, r3
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e34:	f7fe fc66 	bl	8006704 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	685a      	ldr	r2, [r3, #4]
 8007e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e68 <vPortFree+0xc0>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4413      	add	r3, r2
 8007e42:	4a09      	ldr	r2, [pc, #36]	@ (8007e68 <vPortFree+0xc0>)
 8007e44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e46:	6938      	ldr	r0, [r7, #16]
 8007e48:	f000 f874 	bl	8007f34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007e4c:	4b07      	ldr	r3, [pc, #28]	@ (8007e6c <vPortFree+0xc4>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	3301      	adds	r3, #1
 8007e52:	4a06      	ldr	r2, [pc, #24]	@ (8007e6c <vPortFree+0xc4>)
 8007e54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007e56:	f7fe fc63 	bl	8006720 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e5a:	bf00      	nop
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	20004be8 	.word	0x20004be8
 8007e68:	20004bd8 	.word	0x20004bd8
 8007e6c:	20004be4 	.word	0x20004be4

08007e70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e76:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007e7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e7c:	4b27      	ldr	r3, [pc, #156]	@ (8007f1c <prvHeapInit+0xac>)
 8007e7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f003 0307 	and.w	r3, r3, #7
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00c      	beq.n	8007ea4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	3307      	adds	r3, #7
 8007e8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f023 0307 	bic.w	r3, r3, #7
 8007e96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e98:	68ba      	ldr	r2, [r7, #8]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	4a1f      	ldr	r2, [pc, #124]	@ (8007f1c <prvHeapInit+0xac>)
 8007ea0:	4413      	add	r3, r2
 8007ea2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8007f20 <prvHeapInit+0xb0>)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007eae:	4b1c      	ldr	r3, [pc, #112]	@ (8007f20 <prvHeapInit+0xb0>)
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	4413      	add	r3, r2
 8007eba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ebc:	2208      	movs	r2, #8
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	1a9b      	subs	r3, r3, r2
 8007ec2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f023 0307 	bic.w	r3, r3, #7
 8007eca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4a15      	ldr	r2, [pc, #84]	@ (8007f24 <prvHeapInit+0xb4>)
 8007ed0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ed2:	4b14      	ldr	r3, [pc, #80]	@ (8007f24 <prvHeapInit+0xb4>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007eda:	4b12      	ldr	r3, [pc, #72]	@ (8007f24 <prvHeapInit+0xb4>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	1ad2      	subs	r2, r2, r3
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8007f24 <prvHeapInit+0xb4>)
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	4a0a      	ldr	r2, [pc, #40]	@ (8007f28 <prvHeapInit+0xb8>)
 8007efe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	4a09      	ldr	r2, [pc, #36]	@ (8007f2c <prvHeapInit+0xbc>)
 8007f06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f08:	4b09      	ldr	r3, [pc, #36]	@ (8007f30 <prvHeapInit+0xc0>)
 8007f0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007f0e:	601a      	str	r2, [r3, #0]
}
 8007f10:	bf00      	nop
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr
 8007f1c:	20000fcc 	.word	0x20000fcc
 8007f20:	20004bcc 	.word	0x20004bcc
 8007f24:	20004bd4 	.word	0x20004bd4
 8007f28:	20004bdc 	.word	0x20004bdc
 8007f2c:	20004bd8 	.word	0x20004bd8
 8007f30:	20004be8 	.word	0x20004be8

08007f34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f3c:	4b28      	ldr	r3, [pc, #160]	@ (8007fe0 <prvInsertBlockIntoFreeList+0xac>)
 8007f3e:	60fb      	str	r3, [r7, #12]
 8007f40:	e002      	b.n	8007f48 <prvInsertBlockIntoFreeList+0x14>
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	60fb      	str	r3, [r7, #12]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d8f7      	bhi.n	8007f42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d108      	bne.n	8007f76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	685a      	ldr	r2, [r3, #4]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	441a      	add	r2, r3
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	441a      	add	r2, r3
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d118      	bne.n	8007fbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	4b15      	ldr	r3, [pc, #84]	@ (8007fe4 <prvInsertBlockIntoFreeList+0xb0>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d00d      	beq.n	8007fb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	685a      	ldr	r2, [r3, #4]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	441a      	add	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	601a      	str	r2, [r3, #0]
 8007fb0:	e008      	b.n	8007fc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8007fe4 <prvInsertBlockIntoFreeList+0xb0>)
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	601a      	str	r2, [r3, #0]
 8007fba:	e003      	b.n	8007fc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d002      	beq.n	8007fd2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fd2:	bf00      	nop
 8007fd4:	3714      	adds	r7, #20
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	20004bcc 	.word	0x20004bcc
 8007fe4:	20004bd4 	.word	0x20004bd4

08007fe8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7fd fa04 	bl	8005404 <USBH_LL_IncTimer>
}
 8007ffc:	bf00      	nop
 8007ffe:	3708      	adds	r7, #8
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008012:	4618      	mov	r0, r3
 8008014:	f7fd fa48 	bl	80054a8 <USBH_LL_Connect>
}
 8008018:	bf00      	nop
 800801a:	3708      	adds	r7, #8
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800802e:	4618      	mov	r0, r3
 8008030:	f7fd fa5d 	bl	80054ee <USBH_LL_Disconnect>
}
 8008034:	bf00      	nop
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	460b      	mov	r3, r1
 8008046:	70fb      	strb	r3, [r7, #3]
 8008048:	4613      	mov	r3, r2
 800804a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008052:	4618      	mov	r0, r3
 8008054:	f7fd fa7d 	bl	8005552 <USBH_LL_NotifyURBChange>
#endif
}
 8008058:	bf00      	nop
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800806e:	4618      	mov	r0, r3
 8008070:	f7fd f9f2 	bl	8005458 <USBH_LL_PortEnabled>
}
 8008074:	bf00      	nop
 8008076:	3708      	adds	r7, #8
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800808a:	4618      	mov	r0, r3
 800808c:	f7fd f9fe 	bl	800548c <USBH_LL_PortDisabled>
}
 8008090:	bf00      	nop
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080a0:	2300      	movs	r3, #0
 80080a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7f9 fb13 	bl	80016da <HAL_HCD_Stop>
 80080b4:	4603      	mov	r3, r0
 80080b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 f808 	bl	80080d0 <USBH_Get_USB_Status>
 80080c0:	4603      	mov	r3, r0
 80080c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
	...

080080d0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	4603      	mov	r3, r0
 80080d8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80080de:	79fb      	ldrb	r3, [r7, #7]
 80080e0:	2b03      	cmp	r3, #3
 80080e2:	d817      	bhi.n	8008114 <USBH_Get_USB_Status+0x44>
 80080e4:	a201      	add	r2, pc, #4	@ (adr r2, 80080ec <USBH_Get_USB_Status+0x1c>)
 80080e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ea:	bf00      	nop
 80080ec:	080080fd 	.word	0x080080fd
 80080f0:	08008103 	.word	0x08008103
 80080f4:	08008109 	.word	0x08008109
 80080f8:	0800810f 	.word	0x0800810f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008100:	e00b      	b.n	800811a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008102:	2302      	movs	r3, #2
 8008104:	73fb      	strb	r3, [r7, #15]
    break;
 8008106:	e008      	b.n	800811a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008108:	2301      	movs	r3, #1
 800810a:	73fb      	strb	r3, [r7, #15]
    break;
 800810c:	e005      	b.n	800811a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800810e:	2302      	movs	r3, #2
 8008110:	73fb      	strb	r3, [r7, #15]
    break;
 8008112:	e002      	b.n	800811a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008114:	2302      	movs	r3, #2
 8008116:	73fb      	strb	r3, [r7, #15]
    break;
 8008118:	bf00      	nop
  }
  return usb_status;
 800811a:	7bfb      	ldrb	r3, [r7, #15]
}
 800811c:	4618      	mov	r0, r3
 800811e:	3714      	adds	r7, #20
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <__malloc_lock>:
 8008128:	4801      	ldr	r0, [pc, #4]	@ (8008130 <__malloc_lock+0x8>)
 800812a:	f000 b88b 	b.w	8008244 <__retarget_lock_acquire_recursive>
 800812e:	bf00      	nop
 8008130:	20005108 	.word	0x20005108

08008134 <__malloc_unlock>:
 8008134:	4801      	ldr	r0, [pc, #4]	@ (800813c <__malloc_unlock+0x8>)
 8008136:	f000 b886 	b.w	8008246 <__retarget_lock_release_recursive>
 800813a:	bf00      	nop
 800813c:	20005108 	.word	0x20005108

08008140 <memset>:
 8008140:	4402      	add	r2, r0
 8008142:	4603      	mov	r3, r0
 8008144:	4293      	cmp	r3, r2
 8008146:	d100      	bne.n	800814a <memset+0xa>
 8008148:	4770      	bx	lr
 800814a:	f803 1b01 	strb.w	r1, [r3], #1
 800814e:	e7f9      	b.n	8008144 <memset+0x4>

08008150 <_reclaim_reent>:
 8008150:	4b29      	ldr	r3, [pc, #164]	@ (80081f8 <_reclaim_reent+0xa8>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4283      	cmp	r3, r0
 8008156:	b570      	push	{r4, r5, r6, lr}
 8008158:	4604      	mov	r4, r0
 800815a:	d04b      	beq.n	80081f4 <_reclaim_reent+0xa4>
 800815c:	69c3      	ldr	r3, [r0, #28]
 800815e:	b1ab      	cbz	r3, 800818c <_reclaim_reent+0x3c>
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	b16b      	cbz	r3, 8008180 <_reclaim_reent+0x30>
 8008164:	2500      	movs	r5, #0
 8008166:	69e3      	ldr	r3, [r4, #28]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	5959      	ldr	r1, [r3, r5]
 800816c:	2900      	cmp	r1, #0
 800816e:	d13b      	bne.n	80081e8 <_reclaim_reent+0x98>
 8008170:	3504      	adds	r5, #4
 8008172:	2d80      	cmp	r5, #128	@ 0x80
 8008174:	d1f7      	bne.n	8008166 <_reclaim_reent+0x16>
 8008176:	69e3      	ldr	r3, [r4, #28]
 8008178:	4620      	mov	r0, r4
 800817a:	68d9      	ldr	r1, [r3, #12]
 800817c:	f000 f872 	bl	8008264 <_free_r>
 8008180:	69e3      	ldr	r3, [r4, #28]
 8008182:	6819      	ldr	r1, [r3, #0]
 8008184:	b111      	cbz	r1, 800818c <_reclaim_reent+0x3c>
 8008186:	4620      	mov	r0, r4
 8008188:	f000 f86c 	bl	8008264 <_free_r>
 800818c:	6961      	ldr	r1, [r4, #20]
 800818e:	b111      	cbz	r1, 8008196 <_reclaim_reent+0x46>
 8008190:	4620      	mov	r0, r4
 8008192:	f000 f867 	bl	8008264 <_free_r>
 8008196:	69e1      	ldr	r1, [r4, #28]
 8008198:	b111      	cbz	r1, 80081a0 <_reclaim_reent+0x50>
 800819a:	4620      	mov	r0, r4
 800819c:	f000 f862 	bl	8008264 <_free_r>
 80081a0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80081a2:	b111      	cbz	r1, 80081aa <_reclaim_reent+0x5a>
 80081a4:	4620      	mov	r0, r4
 80081a6:	f000 f85d 	bl	8008264 <_free_r>
 80081aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081ac:	b111      	cbz	r1, 80081b4 <_reclaim_reent+0x64>
 80081ae:	4620      	mov	r0, r4
 80081b0:	f000 f858 	bl	8008264 <_free_r>
 80081b4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80081b6:	b111      	cbz	r1, 80081be <_reclaim_reent+0x6e>
 80081b8:	4620      	mov	r0, r4
 80081ba:	f000 f853 	bl	8008264 <_free_r>
 80081be:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80081c0:	b111      	cbz	r1, 80081c8 <_reclaim_reent+0x78>
 80081c2:	4620      	mov	r0, r4
 80081c4:	f000 f84e 	bl	8008264 <_free_r>
 80081c8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80081ca:	b111      	cbz	r1, 80081d2 <_reclaim_reent+0x82>
 80081cc:	4620      	mov	r0, r4
 80081ce:	f000 f849 	bl	8008264 <_free_r>
 80081d2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80081d4:	b111      	cbz	r1, 80081dc <_reclaim_reent+0x8c>
 80081d6:	4620      	mov	r0, r4
 80081d8:	f000 f844 	bl	8008264 <_free_r>
 80081dc:	6a23      	ldr	r3, [r4, #32]
 80081de:	b14b      	cbz	r3, 80081f4 <_reclaim_reent+0xa4>
 80081e0:	4620      	mov	r0, r4
 80081e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80081e6:	4718      	bx	r3
 80081e8:	680e      	ldr	r6, [r1, #0]
 80081ea:	4620      	mov	r0, r4
 80081ec:	f000 f83a 	bl	8008264 <_free_r>
 80081f0:	4631      	mov	r1, r6
 80081f2:	e7bb      	b.n	800816c <_reclaim_reent+0x1c>
 80081f4:	bd70      	pop	{r4, r5, r6, pc}
 80081f6:	bf00      	nop
 80081f8:	20000010 	.word	0x20000010

080081fc <__libc_init_array>:
 80081fc:	b570      	push	{r4, r5, r6, lr}
 80081fe:	4d0d      	ldr	r5, [pc, #52]	@ (8008234 <__libc_init_array+0x38>)
 8008200:	4c0d      	ldr	r4, [pc, #52]	@ (8008238 <__libc_init_array+0x3c>)
 8008202:	1b64      	subs	r4, r4, r5
 8008204:	10a4      	asrs	r4, r4, #2
 8008206:	2600      	movs	r6, #0
 8008208:	42a6      	cmp	r6, r4
 800820a:	d109      	bne.n	8008220 <__libc_init_array+0x24>
 800820c:	4d0b      	ldr	r5, [pc, #44]	@ (800823c <__libc_init_array+0x40>)
 800820e:	4c0c      	ldr	r4, [pc, #48]	@ (8008240 <__libc_init_array+0x44>)
 8008210:	f000 f872 	bl	80082f8 <_init>
 8008214:	1b64      	subs	r4, r4, r5
 8008216:	10a4      	asrs	r4, r4, #2
 8008218:	2600      	movs	r6, #0
 800821a:	42a6      	cmp	r6, r4
 800821c:	d105      	bne.n	800822a <__libc_init_array+0x2e>
 800821e:	bd70      	pop	{r4, r5, r6, pc}
 8008220:	f855 3b04 	ldr.w	r3, [r5], #4
 8008224:	4798      	blx	r3
 8008226:	3601      	adds	r6, #1
 8008228:	e7ee      	b.n	8008208 <__libc_init_array+0xc>
 800822a:	f855 3b04 	ldr.w	r3, [r5], #4
 800822e:	4798      	blx	r3
 8008230:	3601      	adds	r6, #1
 8008232:	e7f2      	b.n	800821a <__libc_init_array+0x1e>
 8008234:	08008378 	.word	0x08008378
 8008238:	08008378 	.word	0x08008378
 800823c:	08008378 	.word	0x08008378
 8008240:	0800837c 	.word	0x0800837c

08008244 <__retarget_lock_acquire_recursive>:
 8008244:	4770      	bx	lr

08008246 <__retarget_lock_release_recursive>:
 8008246:	4770      	bx	lr

08008248 <memcpy>:
 8008248:	440a      	add	r2, r1
 800824a:	4291      	cmp	r1, r2
 800824c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008250:	d100      	bne.n	8008254 <memcpy+0xc>
 8008252:	4770      	bx	lr
 8008254:	b510      	push	{r4, lr}
 8008256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800825a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800825e:	4291      	cmp	r1, r2
 8008260:	d1f9      	bne.n	8008256 <memcpy+0xe>
 8008262:	bd10      	pop	{r4, pc}

08008264 <_free_r>:
 8008264:	b538      	push	{r3, r4, r5, lr}
 8008266:	4605      	mov	r5, r0
 8008268:	2900      	cmp	r1, #0
 800826a:	d041      	beq.n	80082f0 <_free_r+0x8c>
 800826c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008270:	1f0c      	subs	r4, r1, #4
 8008272:	2b00      	cmp	r3, #0
 8008274:	bfb8      	it	lt
 8008276:	18e4      	addlt	r4, r4, r3
 8008278:	f7ff ff56 	bl	8008128 <__malloc_lock>
 800827c:	4a1d      	ldr	r2, [pc, #116]	@ (80082f4 <_free_r+0x90>)
 800827e:	6813      	ldr	r3, [r2, #0]
 8008280:	b933      	cbnz	r3, 8008290 <_free_r+0x2c>
 8008282:	6063      	str	r3, [r4, #4]
 8008284:	6014      	str	r4, [r2, #0]
 8008286:	4628      	mov	r0, r5
 8008288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800828c:	f7ff bf52 	b.w	8008134 <__malloc_unlock>
 8008290:	42a3      	cmp	r3, r4
 8008292:	d908      	bls.n	80082a6 <_free_r+0x42>
 8008294:	6820      	ldr	r0, [r4, #0]
 8008296:	1821      	adds	r1, r4, r0
 8008298:	428b      	cmp	r3, r1
 800829a:	bf01      	itttt	eq
 800829c:	6819      	ldreq	r1, [r3, #0]
 800829e:	685b      	ldreq	r3, [r3, #4]
 80082a0:	1809      	addeq	r1, r1, r0
 80082a2:	6021      	streq	r1, [r4, #0]
 80082a4:	e7ed      	b.n	8008282 <_free_r+0x1e>
 80082a6:	461a      	mov	r2, r3
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	b10b      	cbz	r3, 80082b0 <_free_r+0x4c>
 80082ac:	42a3      	cmp	r3, r4
 80082ae:	d9fa      	bls.n	80082a6 <_free_r+0x42>
 80082b0:	6811      	ldr	r1, [r2, #0]
 80082b2:	1850      	adds	r0, r2, r1
 80082b4:	42a0      	cmp	r0, r4
 80082b6:	d10b      	bne.n	80082d0 <_free_r+0x6c>
 80082b8:	6820      	ldr	r0, [r4, #0]
 80082ba:	4401      	add	r1, r0
 80082bc:	1850      	adds	r0, r2, r1
 80082be:	4283      	cmp	r3, r0
 80082c0:	6011      	str	r1, [r2, #0]
 80082c2:	d1e0      	bne.n	8008286 <_free_r+0x22>
 80082c4:	6818      	ldr	r0, [r3, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	6053      	str	r3, [r2, #4]
 80082ca:	4408      	add	r0, r1
 80082cc:	6010      	str	r0, [r2, #0]
 80082ce:	e7da      	b.n	8008286 <_free_r+0x22>
 80082d0:	d902      	bls.n	80082d8 <_free_r+0x74>
 80082d2:	230c      	movs	r3, #12
 80082d4:	602b      	str	r3, [r5, #0]
 80082d6:	e7d6      	b.n	8008286 <_free_r+0x22>
 80082d8:	6820      	ldr	r0, [r4, #0]
 80082da:	1821      	adds	r1, r4, r0
 80082dc:	428b      	cmp	r3, r1
 80082de:	bf04      	itt	eq
 80082e0:	6819      	ldreq	r1, [r3, #0]
 80082e2:	685b      	ldreq	r3, [r3, #4]
 80082e4:	6063      	str	r3, [r4, #4]
 80082e6:	bf04      	itt	eq
 80082e8:	1809      	addeq	r1, r1, r0
 80082ea:	6021      	streq	r1, [r4, #0]
 80082ec:	6054      	str	r4, [r2, #4]
 80082ee:	e7ca      	b.n	8008286 <_free_r+0x22>
 80082f0:	bd38      	pop	{r3, r4, r5, pc}
 80082f2:	bf00      	nop
 80082f4:	20004fcc 	.word	0x20004fcc

080082f8 <_init>:
 80082f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082fa:	bf00      	nop
 80082fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082fe:	bc08      	pop	{r3}
 8008300:	469e      	mov	lr, r3
 8008302:	4770      	bx	lr

08008304 <_fini>:
 8008304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008306:	bf00      	nop
 8008308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800830a:	bc08      	pop	{r3}
 800830c:	469e      	mov	lr, r3
 800830e:	4770      	bx	lr
