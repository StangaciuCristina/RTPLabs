
RTPLabs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800c66c  0800c66c  0001c66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6dc  0800c6dc  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800c6dc  0800c6dc  0001c6dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6e4  0800c6e4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6e4  0800c6e4  0001c6e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6e8  0800c6e8  0001c6e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800c6ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000054c8  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005548  20005548  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00025b61  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000056c4  00000000  00000000  00045c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ed0  00000000  00000000  0004b318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000017c8  00000000  00000000  0004d1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00006df6  00000000  00000000  0004e9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000272a5  00000000  00000000  000557a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000de9c5  00000000  00000000  0007ca4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000085f4  00000000  00000000  0015b410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  00163a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c654 	.word	0x0800c654

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800c654 	.word	0x0800c654

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fce0 	bl	8000e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f81e 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f93e 	bl	8000758 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f884 	bl	80005e8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f8b0 	bl	8000644 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f8de 	bl	80006a4 <MX_SPI1_Init>
  MX_TIM11_Init();
 80004e8:	f000 f912 	bl	8000710 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004ec:	f008 fc9a 	bl	8008e24 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f0:	4a05      	ldr	r2, [pc, #20]	; (8000508 <main+0x3c>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	4805      	ldr	r0, [pc, #20]	; (800050c <main+0x40>)
 80004f6:	f008 fcdf 	bl	8008eb8 <osThreadNew>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a04      	ldr	r2, [pc, #16]	; (8000510 <main+0x44>)
 80004fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000500:	f008 fcb4 	bl	8008e6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000504:	e7fe      	b.n	8000504 <main+0x38>
 8000506:	bf00      	nop
 8000508:	0800c6a0 	.word	0x0800c6a0
 800050c:	08000955 	.word	0x08000955
 8000510:	200001d8 	.word	0x200001d8

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b094      	sub	sp, #80	; 0x50
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0320 	add.w	r3, r7, #32
 800051e:	2230      	movs	r2, #48	; 0x30
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f00b ffa2 	bl	800c46c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 030c 	add.w	r3, r7, #12
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	4b28      	ldr	r3, [pc, #160]	; (80005e0 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	4a27      	ldr	r2, [pc, #156]	; (80005e0 <SystemClock_Config+0xcc>)
 8000542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000546:	6413      	str	r3, [r2, #64]	; 0x40
 8000548:	4b25      	ldr	r3, [pc, #148]	; (80005e0 <SystemClock_Config+0xcc>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000554:	2300      	movs	r3, #0
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a21      	ldr	r2, [pc, #132]	; (80005e4 <SystemClock_Config+0xd0>)
 800055e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <SystemClock_Config+0xd0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000570:	2301      	movs	r3, #1
 8000572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000584:	2308      	movs	r3, #8
 8000586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000588:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800058c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800058e:	2302      	movs	r3, #2
 8000590:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000592:	2307      	movs	r3, #7
 8000594:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	4618      	mov	r0, r3
 800059c:	f003 fe90 	bl	80042c0 <HAL_RCC_OscConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005a6:	f000 f9f9 	bl	800099c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005aa:	230f      	movs	r3, #15
 80005ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ae:	2302      	movs	r3, #2
 80005b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	2105      	movs	r1, #5
 80005c8:	4618      	mov	r0, r3
 80005ca:	f004 f8f1 	bl	80047b0 <HAL_RCC_ClockConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005d4:	f000 f9e2 	bl	800099c <Error_Handler>
  }
}
 80005d8:	bf00      	nop
 80005da:	3750      	adds	r7, #80	; 0x50
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40007000 	.word	0x40007000

080005e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <MX_I2C1_Init+0x50>)
 80005ee:	4a13      	ldr	r2, [pc, #76]	; (800063c <MX_I2C1_Init+0x54>)
 80005f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005f2:	4b11      	ldr	r3, [pc, #68]	; (8000638 <MX_I2C1_Init+0x50>)
 80005f4:	4a12      	ldr	r2, [pc, #72]	; (8000640 <MX_I2C1_Init+0x58>)
 80005f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_I2C1_Init+0x50>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <MX_I2C1_Init+0x50>)
 8000600:	2200      	movs	r2, #0
 8000602:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <MX_I2C1_Init+0x50>)
 8000606:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800060a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <MX_I2C1_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_I2C1_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000618:	4b07      	ldr	r3, [pc, #28]	; (8000638 <MX_I2C1_Init+0x50>)
 800061a:	2200      	movs	r2, #0
 800061c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_I2C1_Init+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000624:	4804      	ldr	r0, [pc, #16]	; (8000638 <MX_I2C1_Init+0x50>)
 8000626:	f003 f867 	bl	80036f8 <HAL_I2C_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000630:	f000 f9b4 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	2000009c 	.word	0x2000009c
 800063c:	40005400 	.word	0x40005400
 8000640:	000186a0 	.word	0x000186a0

08000644 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000648:	4b13      	ldr	r3, [pc, #76]	; (8000698 <MX_I2S3_Init+0x54>)
 800064a:	4a14      	ldr	r2, [pc, #80]	; (800069c <MX_I2S3_Init+0x58>)
 800064c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800064e:	4b12      	ldr	r3, [pc, #72]	; (8000698 <MX_I2S3_Init+0x54>)
 8000650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000654:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <MX_I2S3_Init+0x54>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800065c:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_I2S3_Init+0x54>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000662:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <MX_I2S3_Init+0x54>)
 8000664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000668:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MX_I2S3_Init+0x54>)
 800066c:	4a0c      	ldr	r2, [pc, #48]	; (80006a0 <MX_I2S3_Init+0x5c>)
 800066e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_I2S3_Init+0x54>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <MX_I2S3_Init+0x54>)
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_I2S3_Init+0x54>)
 800067e:	2200      	movs	r2, #0
 8000680:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_I2S3_Init+0x54>)
 8000684:	f003 f97c 	bl	8003980 <HAL_I2S_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800068e:	f000 f985 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	200000f0 	.word	0x200000f0
 800069c:	40003c00 	.word	0x40003c00
 80006a0:	00017700 	.word	0x00017700

080006a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006a8:	4b17      	ldr	r3, [pc, #92]	; (8000708 <MX_SPI1_Init+0x64>)
 80006aa:	4a18      	ldr	r2, [pc, #96]	; (800070c <MX_SPI1_Init+0x68>)
 80006ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ae:	4b16      	ldr	r3, [pc, #88]	; (8000708 <MX_SPI1_Init+0x64>)
 80006b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006b6:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_SPI1_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_SPI1_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_SPI1_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_SPI1_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_SPI1_Init+0x64>)
 80006d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_SPI1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <MX_SPI1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_SPI1_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_SPI1_Init+0x64>)
 80006f0:	220a      	movs	r2, #10
 80006f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_SPI1_Init+0x64>)
 80006f6:	f004 fbdb 	bl	8004eb0 <HAL_SPI_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000700:	f000 f94c 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000138 	.word	0x20000138
 800070c:	40013000 	.word	0x40013000

08000710 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000714:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_TIM11_Init+0x40>)
 8000716:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <MX_TIM11_Init+0x44>)
 8000718:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800071a:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <MX_TIM11_Init+0x40>)
 800071c:	2200      	movs	r2, #0
 800071e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000720:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_TIM11_Init+0x40>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <MX_TIM11_Init+0x40>)
 8000728:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800072c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_TIM11_Init+0x40>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_TIM11_Init+0x40>)
 8000736:	2200      	movs	r2, #0
 8000738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_TIM11_Init+0x40>)
 800073c:	f004 fc41 	bl	8004fc2 <HAL_TIM_Base_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000746:	f000 f929 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000190 	.word	0x20000190
 8000754:	40014800 	.word	0x40014800

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08c      	sub	sp, #48	; 0x30
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
 8000772:	4b72      	ldr	r3, [pc, #456]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a71      	ldr	r2, [pc, #452]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000778:	f043 0310 	orr.w	r3, r3, #16
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b6f      	ldr	r3, [pc, #444]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0310 	and.w	r3, r3, #16
 8000786:	61bb      	str	r3, [r7, #24]
 8000788:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	4b6b      	ldr	r3, [pc, #428]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a6a      	ldr	r2, [pc, #424]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b68      	ldr	r3, [pc, #416]	; (800093c <MX_GPIO_Init+0x1e4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b64      	ldr	r3, [pc, #400]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a63      	ldr	r2, [pc, #396]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b61      	ldr	r3, [pc, #388]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b5d      	ldr	r3, [pc, #372]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a5c      	ldr	r2, [pc, #368]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b5a      	ldr	r3, [pc, #360]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b56      	ldr	r3, [pc, #344]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a55      	ldr	r2, [pc, #340]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b53      	ldr	r3, [pc, #332]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b4f      	ldr	r3, [pc, #316]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a4e      	ldr	r2, [pc, #312]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000804:	f043 0308 	orr.w	r3, r3, #8
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b4c      	ldr	r3, [pc, #304]	; (800093c <MX_GPIO_Init+0x1e4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2108      	movs	r1, #8
 800081a:	4849      	ldr	r0, [pc, #292]	; (8000940 <MX_GPIO_Init+0x1e8>)
 800081c:	f000 fe1e 	bl	800145c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000820:	2201      	movs	r2, #1
 8000822:	2101      	movs	r1, #1
 8000824:	4847      	ldr	r0, [pc, #284]	; (8000944 <MX_GPIO_Init+0x1ec>)
 8000826:	f000 fe19 	bl	800145c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800082a:	2200      	movs	r2, #0
 800082c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000830:	4845      	ldr	r0, [pc, #276]	; (8000948 <MX_GPIO_Init+0x1f0>)
 8000832:	f000 fe13 	bl	800145c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000836:	2308      	movs	r3, #8
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	483c      	ldr	r0, [pc, #240]	; (8000940 <MX_GPIO_Init+0x1e8>)
 800084e:	f000 fc69 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000852:	2301      	movs	r3, #1
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4836      	ldr	r0, [pc, #216]	; (8000944 <MX_GPIO_Init+0x1ec>)
 800086a:	f000 fc5b 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800086e:	2308      	movs	r3, #8
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800087e:	2305      	movs	r3, #5
 8000880:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	482e      	ldr	r0, [pc, #184]	; (8000944 <MX_GPIO_Init+0x1ec>)
 800088a:	f000 fc4b 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800088e:	2301      	movs	r3, #1
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000892:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	482a      	ldr	r0, [pc, #168]	; (800094c <MX_GPIO_Init+0x1f4>)
 80008a4:	f000 fc3e 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008a8:	2304      	movs	r3, #4
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4825      	ldr	r0, [pc, #148]	; (8000950 <MX_GPIO_Init+0x1f8>)
 80008bc:	f000 fc32 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d2:	2305      	movs	r3, #5
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	481c      	ldr	r0, [pc, #112]	; (8000950 <MX_GPIO_Init+0x1f8>)
 80008de:	f000 fc21 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008e6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4813      	ldr	r0, [pc, #76]	; (8000948 <MX_GPIO_Init+0x1f0>)
 80008fc:	f000 fc12 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000900:	2320      	movs	r3, #32
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	480d      	ldr	r0, [pc, #52]	; (8000948 <MX_GPIO_Init+0x1f0>)
 8000914:	f000 fc06 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000918:	2302      	movs	r3, #2
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800091c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_GPIO_Init+0x1e8>)
 800092e:	f000 fbf9 	bl	8001124 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000932:	bf00      	nop
 8000934:	3730      	adds	r7, #48	; 0x30
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40021000 	.word	0x40021000
 8000944:	40020800 	.word	0x40020800
 8000948:	40020c00 	.word	0x40020c00
 800094c:	40020000 	.word	0x40020000
 8000950:	40020400 	.word	0x40020400

08000954 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800095c:	f00b f9c6 	bl	800bcec <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8000960:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000964:	4803      	ldr	r0, [pc, #12]	; (8000974 <StartDefaultTask+0x20>)
 8000966:	f000 fd92 	bl	800148e <HAL_GPIO_TogglePin>
    osDelay(100);
 800096a:	2064      	movs	r0, #100	; 0x64
 800096c:	f008 fb36 	bl	8008fdc <osDelay>
	HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8000970:	e7f6      	b.n	8000960 <StartDefaultTask+0xc>
 8000972:	bf00      	nop
 8000974:	40020c00 	.word	0x40020c00

08000978 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a04      	ldr	r2, [pc, #16]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d101      	bne.n	800098e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800098a:	f000 faa5 	bl	8000ed8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40001000 	.word	0x40001000

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <Error_Handler+0x8>
	...

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_MspInit+0x54>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	4a11      	ldr	r2, [pc, #68]	; (80009fc <HAL_MspInit+0x54>)
 80009b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009bc:	6453      	str	r3, [r2, #68]	; 0x44
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <HAL_MspInit+0x54>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <HAL_MspInit+0x54>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <HAL_MspInit+0x54>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d8:	6413      	str	r3, [r2, #64]	; 0x40
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <HAL_MspInit+0x54>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	210f      	movs	r1, #15
 80009ea:	f06f 0001 	mvn.w	r0, #1
 80009ee:	f000 fb6f 	bl	80010d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800

08000a00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	; 0x28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a19      	ldr	r2, [pc, #100]	; (8000a84 <HAL_I2C_MspInit+0x84>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d12c      	bne.n	8000a7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <HAL_I2C_MspInit+0x88>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a17      	ldr	r2, [pc, #92]	; (8000a88 <HAL_I2C_MspInit+0x88>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <HAL_I2C_MspInit+0x88>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a3e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a44:	2312      	movs	r3, #18
 8000a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a50:	2304      	movs	r3, #4
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480c      	ldr	r0, [pc, #48]	; (8000a8c <HAL_I2C_MspInit+0x8c>)
 8000a5c:	f000 fb62 	bl	8001124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <HAL_I2C_MspInit+0x88>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	4a07      	ldr	r2, [pc, #28]	; (8000a88 <HAL_I2C_MspInit+0x88>)
 8000a6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <HAL_I2C_MspInit+0x88>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a7c:	bf00      	nop
 8000a7e:	3728      	adds	r7, #40	; 0x28
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40005400 	.word	0x40005400
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020400 	.word	0x40020400

08000a90 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08e      	sub	sp, #56	; 0x38
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a31      	ldr	r2, [pc, #196]	; (8000b80 <HAL_I2S_MspInit+0xf0>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d15a      	bne.n	8000b76 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ac4:	23c0      	movs	r3, #192	; 0xc0
 8000ac6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f004 f8ab 	bl	8004c2c <HAL_RCCEx_PeriphCLKConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000adc:	f7ff ff5e 	bl	800099c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <HAL_I2S_MspInit+0xf4>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	4a26      	ldr	r2, [pc, #152]	; (8000b84 <HAL_I2S_MspInit+0xf4>)
 8000aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aee:	6413      	str	r3, [r2, #64]	; 0x40
 8000af0:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <HAL_I2S_MspInit+0xf4>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <HAL_I2S_MspInit+0xf4>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b04:	4a1f      	ldr	r2, [pc, #124]	; (8000b84 <HAL_I2S_MspInit+0xf4>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0c:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <HAL_I2S_MspInit+0xf4>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <HAL_I2S_MspInit+0xf4>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	4a18      	ldr	r2, [pc, #96]	; (8000b84 <HAL_I2S_MspInit+0xf4>)
 8000b22:	f043 0304 	orr.w	r3, r3, #4
 8000b26:	6313      	str	r3, [r2, #48]	; 0x30
 8000b28:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <HAL_I2S_MspInit+0xf4>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	f003 0304 	and.w	r3, r3, #4
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b34:	2310      	movs	r3, #16
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b44:	2306      	movs	r3, #6
 8000b46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480e      	ldr	r0, [pc, #56]	; (8000b88 <HAL_I2S_MspInit+0xf8>)
 8000b50:	f000 fae8 	bl	8001124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b54:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b66:	2306      	movs	r3, #6
 8000b68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4806      	ldr	r0, [pc, #24]	; (8000b8c <HAL_I2S_MspInit+0xfc>)
 8000b72:	f000 fad7 	bl	8001124 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b76:	bf00      	nop
 8000b78:	3738      	adds	r7, #56	; 0x38
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40003c00 	.word	0x40003c00
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020000 	.word	0x40020000
 8000b8c:	40020800 	.word	0x40020800

08000b90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a19      	ldr	r2, [pc, #100]	; (8000c14 <HAL_SPI_MspInit+0x84>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d12b      	bne.n	8000c0a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <HAL_SPI_MspInit+0x88>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <HAL_SPI_MspInit+0x88>)
 8000bbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <HAL_SPI_MspInit+0x88>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <HAL_SPI_MspInit+0x88>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a10      	ldr	r2, [pc, #64]	; (8000c18 <HAL_SPI_MspInit+0x88>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_SPI_MspInit+0x88>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bea:	23e0      	movs	r3, #224	; 0xe0
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bfa:	2305      	movs	r3, #5
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <HAL_SPI_MspInit+0x8c>)
 8000c06:	f000 fa8d 	bl	8001124 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	; 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40013000 	.word	0x40013000
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020000 	.word	0x40020000

08000c20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0b      	ldr	r2, [pc, #44]	; (8000c5c <HAL_TIM_Base_MspInit+0x3c>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d10d      	bne.n	8000c4e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_TIM_Base_MspInit+0x40>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	4a09      	ldr	r2, [pc, #36]	; (8000c60 <HAL_TIM_Base_MspInit+0x40>)
 8000c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c40:	6453      	str	r3, [r2, #68]	; 0x44
 8000c42:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <HAL_TIM_Base_MspInit+0x40>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	3714      	adds	r7, #20
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	40014800 	.word	0x40014800
 8000c60:	40023800 	.word	0x40023800

08000c64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08e      	sub	sp, #56	; 0x38
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	4b33      	ldr	r3, [pc, #204]	; (8000d48 <HAL_InitTick+0xe4>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	4a32      	ldr	r2, [pc, #200]	; (8000d48 <HAL_InitTick+0xe4>)
 8000c7e:	f043 0310 	orr.w	r3, r3, #16
 8000c82:	6413      	str	r3, [r2, #64]	; 0x40
 8000c84:	4b30      	ldr	r3, [pc, #192]	; (8000d48 <HAL_InitTick+0xe4>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	f003 0310 	and.w	r3, r3, #16
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c90:	f107 0210 	add.w	r2, r7, #16
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f003 ff94 	bl	8004bc8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ca0:	6a3b      	ldr	r3, [r7, #32]
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d103      	bne.n	8000cb2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000caa:	f003 ff79 	bl	8004ba0 <HAL_RCC_GetPCLK1Freq>
 8000cae:	6378      	str	r0, [r7, #52]	; 0x34
 8000cb0:	e004      	b.n	8000cbc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cb2:	f003 ff75 	bl	8004ba0 <HAL_RCC_GetPCLK1Freq>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cbe:	4a23      	ldr	r2, [pc, #140]	; (8000d4c <HAL_InitTick+0xe8>)
 8000cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc4:	0c9b      	lsrs	r3, r3, #18
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cca:	4b21      	ldr	r3, [pc, #132]	; (8000d50 <HAL_InitTick+0xec>)
 8000ccc:	4a21      	ldr	r2, [pc, #132]	; (8000d54 <HAL_InitTick+0xf0>)
 8000cce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cd0:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <HAL_InitTick+0xec>)
 8000cd2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cd6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cd8:	4a1d      	ldr	r2, [pc, #116]	; (8000d50 <HAL_InitTick+0xec>)
 8000cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cdc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cde:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <HAL_InitTick+0xec>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce4:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <HAL_InitTick+0xec>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cea:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <HAL_InitTick+0xec>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000cf0:	4817      	ldr	r0, [pc, #92]	; (8000d50 <HAL_InitTick+0xec>)
 8000cf2:	f004 f966 	bl	8004fc2 <HAL_TIM_Base_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000cfc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d11b      	bne.n	8000d3c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d04:	4812      	ldr	r0, [pc, #72]	; (8000d50 <HAL_InitTick+0xec>)
 8000d06:	f004 f9ab 	bl	8005060 <HAL_TIM_Base_Start_IT>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d111      	bne.n	8000d3c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d18:	2036      	movs	r0, #54	; 0x36
 8000d1a:	f000 f9f5 	bl	8001108 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b0f      	cmp	r3, #15
 8000d22:	d808      	bhi.n	8000d36 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d24:	2200      	movs	r2, #0
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	2036      	movs	r0, #54	; 0x36
 8000d2a:	f000 f9d1 	bl	80010d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_InitTick+0xf4>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	e002      	b.n	8000d3c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3738      	adds	r7, #56	; 0x38
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	431bde83 	.word	0x431bde83
 8000d50:	200001dc 	.word	0x200001dc
 8000d54:	40001000 	.word	0x40001000
 8000d58:	20000004 	.word	0x20000004

08000d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d60:	e7fe      	b.n	8000d60 <NMI_Handler+0x4>

08000d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <HardFault_Handler+0x4>

08000d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <MemManage_Handler+0x4>

08000d6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <BusFault_Handler+0x4>

08000d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <UsageFault_Handler+0x4>

08000d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <TIM6_DAC_IRQHandler+0x10>)
 8000d8e:	f004 f9d7 	bl	8005140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200001dc 	.word	0x200001dc

08000d9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <OTG_FS_IRQHandler+0x10>)
 8000da2:	f000 fe6f 	bl	8001a84 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20005020 	.word	0x20005020

08000db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db8:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <_sbrk+0x5c>)
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <_sbrk+0x60>)
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d102      	bne.n	8000dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <_sbrk+0x64>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <_sbrk+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d207      	bcs.n	8000df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de0:	f00b fbb2 	bl	800c548 <__errno>
 8000de4:	4603      	mov	r3, r0
 8000de6:	220c      	movs	r2, #12
 8000de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	e009      	b.n	8000e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <_sbrk+0x64>)
 8000e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20020000 	.word	0x20020000
 8000e10:	00000400 	.word	0x00000400
 8000e14:	20000224 	.word	0x20000224
 8000e18:	20005548 	.word	0x20005548

08000e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <SystemInit+0x20>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <SystemInit+0x20>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e44:	f7ff ffea 	bl	8000e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e48:	480c      	ldr	r0, [pc, #48]	; (8000e7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e4a:	490d      	ldr	r1, [pc, #52]	; (8000e80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e50:	e002      	b.n	8000e58 <LoopCopyDataInit>

08000e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e56:	3304      	adds	r3, #4

08000e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e5c:	d3f9      	bcc.n	8000e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e60:	4c0a      	ldr	r4, [pc, #40]	; (8000e8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e64:	e001      	b.n	8000e6a <LoopFillZerobss>

08000e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e68:	3204      	adds	r2, #4

08000e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e6c:	d3fb      	bcc.n	8000e66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f00b fb71 	bl	800c554 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e72:	f7ff fb2b 	bl	80004cc <main>
  bx  lr    
 8000e76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000e84:	0800c6ec 	.word	0x0800c6ec
  ldr r2, =_sbss
 8000e88:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000e8c:	20005548 	.word	0x20005548

08000e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC_IRQHandler>
	...

08000e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <HAL_Init+0x40>)
 8000e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <HAL_Init+0x40>)
 8000eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_Init+0x40>)
 8000eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f000 f8fc 	bl	80010ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec2:	200f      	movs	r0, #15
 8000ec4:	f7ff fece 	bl	8000c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec8:	f7ff fd6e 	bl	80009a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023c00 	.word	0x40023c00

08000ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_IncTick+0x20>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x24>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <HAL_IncTick+0x24>)
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	20000228 	.word	0x20000228

08000f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return uwTick;
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <HAL_GetTick+0x14>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000228 	.word	0x20000228

08000f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f20:	f7ff ffee 	bl	8000f00 <HAL_GetTick>
 8000f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f30:	d005      	beq.n	8000f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <HAL_Delay+0x44>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f3e:	bf00      	nop
 8000f40:	f7ff ffde 	bl	8000f00 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d8f7      	bhi.n	8000f40 <HAL_Delay+0x28>
  {
  }
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000008 	.word	0x20000008

08000f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f92:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	60d3      	str	r3, [r2, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f003 0307 	and.w	r3, r3, #7
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	db0b      	blt.n	8000fee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	f003 021f 	and.w	r2, r3, #31
 8000fdc:	4907      	ldr	r1, [pc, #28]	; (8000ffc <__NVIC_EnableIRQ+0x38>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	095b      	lsrs	r3, r3, #5
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000e100 	.word	0xe000e100

08001000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	; (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	; (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
         );
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ff4c 	bl	8000f60 <__NVIC_SetPriorityGrouping>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e2:	f7ff ff61 	bl	8000fa8 <__NVIC_GetPriorityGrouping>
 80010e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	68b9      	ldr	r1, [r7, #8]
 80010ec:	6978      	ldr	r0, [r7, #20]
 80010ee:	f7ff ffb1 	bl	8001054 <NVIC_EncodePriority>
 80010f2:	4602      	mov	r2, r0
 80010f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f8:	4611      	mov	r1, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ff80 	bl	8001000 <__NVIC_SetPriority>
}
 8001100:	bf00      	nop
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ff54 	bl	8000fc4 <__NVIC_EnableIRQ>
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	e16b      	b.n	8001418 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001140:	2201      	movs	r2, #1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	429a      	cmp	r2, r3
 800115a:	f040 815a 	bne.w	8001412 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	2b01      	cmp	r3, #1
 8001168:	d005      	beq.n	8001176 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001172:	2b02      	cmp	r3, #2
 8001174:	d130      	bne.n	80011d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	2203      	movs	r2, #3
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	68da      	ldr	r2, [r3, #12]
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	091b      	lsrs	r3, r3, #4
 80011c2:	f003 0201 	and.w	r2, r3, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	d017      	beq.n	8001214 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d123      	bne.n	8001268 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	08da      	lsrs	r2, r3, #3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3208      	adds	r2, #8
 8001228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	220f      	movs	r2, #15
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	691a      	ldr	r2, [r3, #16]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	08da      	lsrs	r2, r3, #3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3208      	adds	r2, #8
 8001262:	69b9      	ldr	r1, [r7, #24]
 8001264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0203 	and.w	r2, r3, #3
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 80b4 	beq.w	8001412 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	4b60      	ldr	r3, [pc, #384]	; (8001430 <HAL_GPIO_Init+0x30c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	4a5f      	ldr	r2, [pc, #380]	; (8001430 <HAL_GPIO_Init+0x30c>)
 80012b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ba:	4b5d      	ldr	r3, [pc, #372]	; (8001430 <HAL_GPIO_Init+0x30c>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012c6:	4a5b      	ldr	r2, [pc, #364]	; (8001434 <HAL_GPIO_Init+0x310>)
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	3302      	adds	r3, #2
 80012ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	220f      	movs	r2, #15
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a52      	ldr	r2, [pc, #328]	; (8001438 <HAL_GPIO_Init+0x314>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d02b      	beq.n	800134a <HAL_GPIO_Init+0x226>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a51      	ldr	r2, [pc, #324]	; (800143c <HAL_GPIO_Init+0x318>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d025      	beq.n	8001346 <HAL_GPIO_Init+0x222>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a50      	ldr	r2, [pc, #320]	; (8001440 <HAL_GPIO_Init+0x31c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d01f      	beq.n	8001342 <HAL_GPIO_Init+0x21e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4f      	ldr	r2, [pc, #316]	; (8001444 <HAL_GPIO_Init+0x320>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d019      	beq.n	800133e <HAL_GPIO_Init+0x21a>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4e      	ldr	r2, [pc, #312]	; (8001448 <HAL_GPIO_Init+0x324>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d013      	beq.n	800133a <HAL_GPIO_Init+0x216>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4d      	ldr	r2, [pc, #308]	; (800144c <HAL_GPIO_Init+0x328>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d00d      	beq.n	8001336 <HAL_GPIO_Init+0x212>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4c      	ldr	r2, [pc, #304]	; (8001450 <HAL_GPIO_Init+0x32c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d007      	beq.n	8001332 <HAL_GPIO_Init+0x20e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4b      	ldr	r2, [pc, #300]	; (8001454 <HAL_GPIO_Init+0x330>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d101      	bne.n	800132e <HAL_GPIO_Init+0x20a>
 800132a:	2307      	movs	r3, #7
 800132c:	e00e      	b.n	800134c <HAL_GPIO_Init+0x228>
 800132e:	2308      	movs	r3, #8
 8001330:	e00c      	b.n	800134c <HAL_GPIO_Init+0x228>
 8001332:	2306      	movs	r3, #6
 8001334:	e00a      	b.n	800134c <HAL_GPIO_Init+0x228>
 8001336:	2305      	movs	r3, #5
 8001338:	e008      	b.n	800134c <HAL_GPIO_Init+0x228>
 800133a:	2304      	movs	r3, #4
 800133c:	e006      	b.n	800134c <HAL_GPIO_Init+0x228>
 800133e:	2303      	movs	r3, #3
 8001340:	e004      	b.n	800134c <HAL_GPIO_Init+0x228>
 8001342:	2302      	movs	r3, #2
 8001344:	e002      	b.n	800134c <HAL_GPIO_Init+0x228>
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <HAL_GPIO_Init+0x228>
 800134a:	2300      	movs	r3, #0
 800134c:	69fa      	ldr	r2, [r7, #28]
 800134e:	f002 0203 	and.w	r2, r2, #3
 8001352:	0092      	lsls	r2, r2, #2
 8001354:	4093      	lsls	r3, r2
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800135c:	4935      	ldr	r1, [pc, #212]	; (8001434 <HAL_GPIO_Init+0x310>)
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	089b      	lsrs	r3, r3, #2
 8001362:	3302      	adds	r3, #2
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136a:	4b3b      	ldr	r3, [pc, #236]	; (8001458 <HAL_GPIO_Init+0x334>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800138e:	4a32      	ldr	r2, [pc, #200]	; (8001458 <HAL_GPIO_Init+0x334>)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001394:	4b30      	ldr	r3, [pc, #192]	; (8001458 <HAL_GPIO_Init+0x334>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013b8:	4a27      	ldr	r2, [pc, #156]	; (8001458 <HAL_GPIO_Init+0x334>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013be:	4b26      	ldr	r3, [pc, #152]	; (8001458 <HAL_GPIO_Init+0x334>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013e2:	4a1d      	ldr	r2, [pc, #116]	; (8001458 <HAL_GPIO_Init+0x334>)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <HAL_GPIO_Init+0x334>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800140c:	4a12      	ldr	r2, [pc, #72]	; (8001458 <HAL_GPIO_Init+0x334>)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3301      	adds	r3, #1
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	2b0f      	cmp	r3, #15
 800141c:	f67f ae90 	bls.w	8001140 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	3724      	adds	r7, #36	; 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800
 8001434:	40013800 	.word	0x40013800
 8001438:	40020000 	.word	0x40020000
 800143c:	40020400 	.word	0x40020400
 8001440:	40020800 	.word	0x40020800
 8001444:	40020c00 	.word	0x40020c00
 8001448:	40021000 	.word	0x40021000
 800144c:	40021400 	.word	0x40021400
 8001450:	40021800 	.word	0x40021800
 8001454:	40021c00 	.word	0x40021c00
 8001458:	40013c00 	.word	0x40013c00

0800145c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	807b      	strh	r3, [r7, #2]
 8001468:	4613      	mov	r3, r2
 800146a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800146c:	787b      	ldrb	r3, [r7, #1]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001472:	887a      	ldrh	r2, [r7, #2]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001478:	e003      	b.n	8001482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800147a:	887b      	ldrh	r3, [r7, #2]
 800147c:	041a      	lsls	r2, r3, #16
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	619a      	str	r2, [r3, #24]
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800148e:	b480      	push	{r7}
 8001490:	b085      	sub	sp, #20
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	460b      	mov	r3, r1
 8001498:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014a0:	887a      	ldrh	r2, [r7, #2]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4013      	ands	r3, r2
 80014a6:	041a      	lsls	r2, r3, #16
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	43d9      	mvns	r1, r3
 80014ac:	887b      	ldrh	r3, [r7, #2]
 80014ae:	400b      	ands	r3, r1
 80014b0:	431a      	orrs	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	619a      	str	r2, [r3, #24]
}
 80014b6:	bf00      	nop
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af02      	add	r7, sp, #8
 80014c8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e059      	b.n	8001588 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d106      	bne.n	80014f4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f00a fc50 	bl	800bd94 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2203      	movs	r2, #3
 80014f8:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001502:	d102      	bne.n	800150a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f004 f863 	bl	80055da <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6818      	ldr	r0, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	7c1a      	ldrb	r2, [r3, #16]
 800151c:	f88d 2000 	strb.w	r2, [sp]
 8001520:	3304      	adds	r3, #4
 8001522:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001524:	f003 ffe4 	bl	80054f0 <USB_CoreInit>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d005      	beq.n	800153a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2202      	movs	r2, #2
 8001532:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e026      	b.n	8001588 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2101      	movs	r1, #1
 8001540:	4618      	mov	r0, r3
 8001542:	f004 f85b 	bl	80055fc <USB_SetCurrentMode>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2202      	movs	r2, #2
 8001550:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e017      	b.n	8001588 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7c1a      	ldrb	r2, [r3, #16]
 8001560:	f88d 2000 	strb.w	r2, [sp]
 8001564:	3304      	adds	r3, #4
 8001566:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001568:	f004 f9fe 	bl	8005968 <USB_HostInit>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d005      	beq.n	800157e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2202      	movs	r2, #2
 8001576:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e004      	b.n	8001588 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2201      	movs	r2, #1
 8001582:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	b08b      	sub	sp, #44	; 0x2c
 8001594:	af04      	add	r7, sp, #16
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	4608      	mov	r0, r1
 800159a:	4611      	mov	r1, r2
 800159c:	461a      	mov	r2, r3
 800159e:	4603      	mov	r3, r0
 80015a0:	70fb      	strb	r3, [r7, #3]
 80015a2:	460b      	mov	r3, r1
 80015a4:	70bb      	strb	r3, [r7, #2]
 80015a6:	4613      	mov	r3, r2
 80015a8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80015aa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80015ac:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d101      	bne.n	80015bc <HAL_HCD_HC_Init+0x2c>
 80015b8:	2302      	movs	r3, #2
 80015ba:	e09d      	b.n	80016f8 <HAL_HCD_HC_Init+0x168>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80015c4:	78fa      	ldrb	r2, [r7, #3]
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	011b      	lsls	r3, r3, #4
 80015cc:	1a9b      	subs	r3, r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	3319      	adds	r3, #25
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015d8:	78fa      	ldrb	r2, [r7, #3]
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	011b      	lsls	r3, r3, #4
 80015e0:	1a9b      	subs	r3, r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	440b      	add	r3, r1
 80015e6:	3314      	adds	r3, #20
 80015e8:	787a      	ldrb	r2, [r7, #1]
 80015ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015ec:	78fa      	ldrb	r2, [r7, #3]
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	4613      	mov	r3, r2
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	1a9b      	subs	r3, r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	3315      	adds	r3, #21
 80015fc:	78fa      	ldrb	r2, [r7, #3]
 80015fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001600:	78fa      	ldrb	r2, [r7, #3]
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	4613      	mov	r3, r2
 8001606:	011b      	lsls	r3, r3, #4
 8001608:	1a9b      	subs	r3, r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	3326      	adds	r3, #38	; 0x26
 8001610:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001614:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001616:	78fa      	ldrb	r2, [r7, #3]
 8001618:	78bb      	ldrb	r3, [r7, #2]
 800161a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800161e:	b2d8      	uxtb	r0, r3
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	1a9b      	subs	r3, r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	440b      	add	r3, r1
 800162c:	3316      	adds	r3, #22
 800162e:	4602      	mov	r2, r0
 8001630:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001632:	78fb      	ldrb	r3, [r7, #3]
 8001634:	4619      	mov	r1, r3
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 fbc8 	bl	8001dcc <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800163c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001640:	2b00      	cmp	r3, #0
 8001642:	da0a      	bge.n	800165a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001644:	78fa      	ldrb	r2, [r7, #3]
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	011b      	lsls	r3, r3, #4
 800164c:	1a9b      	subs	r3, r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	3317      	adds	r3, #23
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
 8001658:	e009      	b.n	800166e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800165a:	78fa      	ldrb	r2, [r7, #3]
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	1a9b      	subs	r3, r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	440b      	add	r3, r1
 8001668:	3317      	adds	r3, #23
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f004 fadc 	bl	8005c30 <USB_GetHostSpeed>
 8001678:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800167a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800167e:	2b01      	cmp	r3, #1
 8001680:	d10b      	bne.n	800169a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001682:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001686:	2b01      	cmp	r3, #1
 8001688:	d107      	bne.n	800169a <HAL_HCD_HC_Init+0x10a>
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d104      	bne.n	800169a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	2bbc      	cmp	r3, #188	; 0xbc
 8001694:	d901      	bls.n	800169a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001696:	23bc      	movs	r3, #188	; 0xbc
 8001698:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800169a:	78fa      	ldrb	r2, [r7, #3]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	1a9b      	subs	r3, r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	3318      	adds	r3, #24
 80016aa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80016ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80016b0:	78fa      	ldrb	r2, [r7, #3]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	b298      	uxth	r0, r3
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	011b      	lsls	r3, r3, #4
 80016bc:	1a9b      	subs	r3, r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	3328      	adds	r3, #40	; 0x28
 80016c4:	4602      	mov	r2, r0
 80016c6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6818      	ldr	r0, [r3, #0]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	787c      	ldrb	r4, [r7, #1]
 80016d2:	78ba      	ldrb	r2, [r7, #2]
 80016d4:	78f9      	ldrb	r1, [r7, #3]
 80016d6:	9302      	str	r3, [sp, #8]
 80016d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80016dc:	9301      	str	r3, [sp, #4]
 80016de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	4623      	mov	r3, r4
 80016e6:	f004 facb 	bl	8005c80 <USB_HC_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd90      	pop	{r4, r7, pc}

08001700 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001716:	2b01      	cmp	r3, #1
 8001718:	d101      	bne.n	800171e <HAL_HCD_HC_Halt+0x1e>
 800171a:	2302      	movs	r3, #2
 800171c:	e00f      	b.n	800173e <HAL_HCD_HC_Halt+0x3e>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	78fa      	ldrb	r2, [r7, #3]
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f004 fe5d 	bl	80063ee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 800173c:	7bfb      	ldrb	r3, [r7, #15]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	4608      	mov	r0, r1
 8001752:	4611      	mov	r1, r2
 8001754:	461a      	mov	r2, r3
 8001756:	4603      	mov	r3, r0
 8001758:	70fb      	strb	r3, [r7, #3]
 800175a:	460b      	mov	r3, r1
 800175c:	70bb      	strb	r3, [r7, #2]
 800175e:	4613      	mov	r3, r2
 8001760:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001762:	78fa      	ldrb	r2, [r7, #3]
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	4613      	mov	r3, r2
 8001768:	011b      	lsls	r3, r3, #4
 800176a:	1a9b      	subs	r3, r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	440b      	add	r3, r1
 8001770:	3317      	adds	r3, #23
 8001772:	78ba      	ldrb	r2, [r7, #2]
 8001774:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001776:	78fa      	ldrb	r2, [r7, #3]
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	4613      	mov	r3, r2
 800177c:	011b      	lsls	r3, r3, #4
 800177e:	1a9b      	subs	r3, r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	440b      	add	r3, r1
 8001784:	3326      	adds	r3, #38	; 0x26
 8001786:	787a      	ldrb	r2, [r7, #1]
 8001788:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800178a:	7c3b      	ldrb	r3, [r7, #16]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d114      	bne.n	80017ba <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001790:	78fa      	ldrb	r2, [r7, #3]
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	4613      	mov	r3, r2
 8001796:	011b      	lsls	r3, r3, #4
 8001798:	1a9b      	subs	r3, r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	332a      	adds	r3, #42	; 0x2a
 80017a0:	2203      	movs	r2, #3
 80017a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017a4:	78fa      	ldrb	r2, [r7, #3]
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	4613      	mov	r3, r2
 80017aa:	011b      	lsls	r3, r3, #4
 80017ac:	1a9b      	subs	r3, r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	3319      	adds	r3, #25
 80017b4:	7f3a      	ldrb	r2, [r7, #28]
 80017b6:	701a      	strb	r2, [r3, #0]
 80017b8:	e009      	b.n	80017ce <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017ba:	78fa      	ldrb	r2, [r7, #3]
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	1a9b      	subs	r3, r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	440b      	add	r3, r1
 80017c8:	332a      	adds	r3, #42	; 0x2a
 80017ca:	2202      	movs	r2, #2
 80017cc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017ce:	787b      	ldrb	r3, [r7, #1]
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	f200 8102 	bhi.w	80019da <HAL_HCD_HC_SubmitRequest+0x292>
 80017d6:	a201      	add	r2, pc, #4	; (adr r2, 80017dc <HAL_HCD_HC_SubmitRequest+0x94>)
 80017d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017dc:	080017ed 	.word	0x080017ed
 80017e0:	080019c5 	.word	0x080019c5
 80017e4:	080018b1 	.word	0x080018b1
 80017e8:	0800193b 	.word	0x0800193b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80017ec:	7c3b      	ldrb	r3, [r7, #16]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	f040 80f5 	bne.w	80019de <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80017f4:	78bb      	ldrb	r3, [r7, #2]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d12d      	bne.n	8001856 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80017fa:	8b3b      	ldrh	r3, [r7, #24]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d109      	bne.n	8001814 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001800:	78fa      	ldrb	r2, [r7, #3]
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	011b      	lsls	r3, r3, #4
 8001808:	1a9b      	subs	r3, r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	333d      	adds	r3, #61	; 0x3d
 8001810:	2201      	movs	r2, #1
 8001812:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001814:	78fa      	ldrb	r2, [r7, #3]
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	011b      	lsls	r3, r3, #4
 800181c:	1a9b      	subs	r3, r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	333d      	adds	r3, #61	; 0x3d
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10a      	bne.n	8001840 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800182a:	78fa      	ldrb	r2, [r7, #3]
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	1a9b      	subs	r3, r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	440b      	add	r3, r1
 8001838:	332a      	adds	r3, #42	; 0x2a
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800183e:	e0ce      	b.n	80019de <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001840:	78fa      	ldrb	r2, [r7, #3]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	011b      	lsls	r3, r3, #4
 8001848:	1a9b      	subs	r3, r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	332a      	adds	r3, #42	; 0x2a
 8001850:	2202      	movs	r2, #2
 8001852:	701a      	strb	r2, [r3, #0]
      break;
 8001854:	e0c3      	b.n	80019de <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001856:	78fa      	ldrb	r2, [r7, #3]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	011b      	lsls	r3, r3, #4
 800185e:	1a9b      	subs	r3, r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	440b      	add	r3, r1
 8001864:	331a      	adds	r3, #26
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b01      	cmp	r3, #1
 800186a:	f040 80b8 	bne.w	80019de <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800186e:	78fa      	ldrb	r2, [r7, #3]
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	011b      	lsls	r3, r3, #4
 8001876:	1a9b      	subs	r3, r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	333c      	adds	r3, #60	; 0x3c
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10a      	bne.n	800189a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001884:	78fa      	ldrb	r2, [r7, #3]
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	4613      	mov	r3, r2
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	1a9b      	subs	r3, r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	332a      	adds	r3, #42	; 0x2a
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
      break;
 8001898:	e0a1      	b.n	80019de <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800189a:	78fa      	ldrb	r2, [r7, #3]
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	1a9b      	subs	r3, r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	332a      	adds	r3, #42	; 0x2a
 80018aa:	2202      	movs	r2, #2
 80018ac:	701a      	strb	r2, [r3, #0]
      break;
 80018ae:	e096      	b.n	80019de <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018b0:	78bb      	ldrb	r3, [r7, #2]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d120      	bne.n	80018f8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018b6:	78fa      	ldrb	r2, [r7, #3]
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	1a9b      	subs	r3, r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	333d      	adds	r3, #61	; 0x3d
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d10a      	bne.n	80018e2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018cc:	78fa      	ldrb	r2, [r7, #3]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	1a9b      	subs	r3, r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	332a      	adds	r3, #42	; 0x2a
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80018e0:	e07e      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018e2:	78fa      	ldrb	r2, [r7, #3]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	1a9b      	subs	r3, r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	332a      	adds	r3, #42	; 0x2a
 80018f2:	2202      	movs	r2, #2
 80018f4:	701a      	strb	r2, [r3, #0]
      break;
 80018f6:	e073      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018f8:	78fa      	ldrb	r2, [r7, #3]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	1a9b      	subs	r3, r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	333c      	adds	r3, #60	; 0x3c
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10a      	bne.n	8001924 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800190e:	78fa      	ldrb	r2, [r7, #3]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	332a      	adds	r3, #42	; 0x2a
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
      break;
 8001922:	e05d      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001924:	78fa      	ldrb	r2, [r7, #3]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	332a      	adds	r3, #42	; 0x2a
 8001934:	2202      	movs	r2, #2
 8001936:	701a      	strb	r2, [r3, #0]
      break;
 8001938:	e052      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800193a:	78bb      	ldrb	r3, [r7, #2]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d120      	bne.n	8001982 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001940:	78fa      	ldrb	r2, [r7, #3]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	1a9b      	subs	r3, r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	333d      	adds	r3, #61	; 0x3d
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10a      	bne.n	800196c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001956:	78fa      	ldrb	r2, [r7, #3]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	1a9b      	subs	r3, r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	440b      	add	r3, r1
 8001964:	332a      	adds	r3, #42	; 0x2a
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800196a:	e039      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	1a9b      	subs	r3, r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	332a      	adds	r3, #42	; 0x2a
 800197c:	2202      	movs	r2, #2
 800197e:	701a      	strb	r2, [r3, #0]
      break;
 8001980:	e02e      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001982:	78fa      	ldrb	r2, [r7, #3]
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	1a9b      	subs	r3, r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	333c      	adds	r3, #60	; 0x3c
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d10a      	bne.n	80019ae <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001998:	78fa      	ldrb	r2, [r7, #3]
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	1a9b      	subs	r3, r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	332a      	adds	r3, #42	; 0x2a
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
      break;
 80019ac:	e018      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ae:	78fa      	ldrb	r2, [r7, #3]
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	1a9b      	subs	r3, r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	440b      	add	r3, r1
 80019bc:	332a      	adds	r3, #42	; 0x2a
 80019be:	2202      	movs	r2, #2
 80019c0:	701a      	strb	r2, [r3, #0]
      break;
 80019c2:	e00d      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019c4:	78fa      	ldrb	r2, [r7, #3]
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	1a9b      	subs	r3, r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	332a      	adds	r3, #42	; 0x2a
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
      break;
 80019d8:	e002      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80019da:	bf00      	nop
 80019dc:	e000      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80019de:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80019e0:	78fa      	ldrb	r2, [r7, #3]
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	1a9b      	subs	r3, r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	332c      	adds	r3, #44	; 0x2c
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019f4:	78fa      	ldrb	r2, [r7, #3]
 80019f6:	8b39      	ldrh	r1, [r7, #24]
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	1a9b      	subs	r3, r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4403      	add	r3, r0
 8001a04:	3334      	adds	r3, #52	; 0x34
 8001a06:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a08:	78fa      	ldrb	r2, [r7, #3]
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	011b      	lsls	r3, r3, #4
 8001a10:	1a9b      	subs	r3, r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	440b      	add	r3, r1
 8001a16:	334c      	adds	r3, #76	; 0x4c
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a1c:	78fa      	ldrb	r2, [r7, #3]
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	1a9b      	subs	r3, r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	3338      	adds	r3, #56	; 0x38
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a30:	78fa      	ldrb	r2, [r7, #3]
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	011b      	lsls	r3, r3, #4
 8001a38:	1a9b      	subs	r3, r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	3315      	adds	r3, #21
 8001a40:	78fa      	ldrb	r2, [r7, #3]
 8001a42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a44:	78fa      	ldrb	r2, [r7, #3]
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	011b      	lsls	r3, r3, #4
 8001a4c:	1a9b      	subs	r3, r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	334d      	adds	r3, #77	; 0x4d
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	78fa      	ldrb	r2, [r7, #3]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	011b      	lsls	r3, r3, #4
 8001a62:	1a9b      	subs	r3, r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	3310      	adds	r3, #16
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	1d19      	adds	r1, r3, #4
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	799b      	ldrb	r3, [r3, #6]
 8001a72:	461a      	mov	r2, r3
 8001a74:	f004 fa30 	bl	8005ed8 <USB_HC_StartXfer>
 8001a78:	4603      	mov	r3, r0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop

08001a84 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f003 ff24 	bl	80058e8 <USB_GetMode>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	f040 80fb 	bne.w	8001c9e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f003 fee7 	bl	8005880 <USB_ReadInterrupts>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 80f1 	beq.w	8001c9c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 fede 	bl	8005880 <USB_ReadInterrupts>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ace:	d104      	bne.n	8001ada <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ad8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f003 fece 	bl	8005880 <USB_ReadInterrupts>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001aee:	d104      	bne.n	8001afa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001af8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 febe 	bl	8005880 <USB_ReadInterrupts>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b0e:	d104      	bne.n	8001b1a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f003 feae 	bl	8005880 <USB_ReadInterrupts>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d103      	bne.n	8001b36 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2202      	movs	r2, #2
 8001b34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f003 fea0 	bl	8005880 <USB_ReadInterrupts>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b4a:	d120      	bne.n	8001b8e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b54:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d113      	bne.n	8001b8e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b66:	2110      	movs	r1, #16
 8001b68:	6938      	ldr	r0, [r7, #16]
 8001b6a:	f003 fd93 	bl	8005694 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b6e:	6938      	ldr	r0, [r7, #16]
 8001b70:	f003 fdc2 	bl	80056f8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7a5b      	ldrb	r3, [r3, #9]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d105      	bne.n	8001b88 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2101      	movs	r1, #1
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 ffb4 	bl	8005af0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f00a f981 	bl	800be90 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f003 fe74 	bl	8005880 <USB_ReadInterrupts>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ba2:	d102      	bne.n	8001baa <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f001 fd33 	bl	8003610 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f003 fe66 	bl	8005880 <USB_ReadInterrupts>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d106      	bne.n	8001bcc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f00a f94a 	bl	800be58 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2208      	movs	r2, #8
 8001bca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f003 fe55 	bl	8005880 <USB_ReadInterrupts>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001be0:	d139      	bne.n	8001c56 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f004 fbf0 	bl	80063cc <USB_HC_ReadInterrupt>
 8001bec:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	e025      	b.n	8001c40 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d018      	beq.n	8001c3a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	015a      	lsls	r2, r3, #5
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4413      	add	r3, r2
 8001c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c1e:	d106      	bne.n	8001c2e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	4619      	mov	r1, r3
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f905 	bl	8001e36 <HCD_HC_IN_IRQHandler>
 8001c2c:	e005      	b.n	8001c3a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	4619      	mov	r1, r3
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 ff67 	bl	8002b08 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	795b      	ldrb	r3, [r3, #5]
 8001c44:	461a      	mov	r2, r3
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d3d3      	bcc.n	8001bf4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f003 fe10 	bl	8005880 <USB_ReadInterrupts>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	d101      	bne.n	8001c6e <HAL_HCD_IRQHandler+0x1ea>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_HCD_IRQHandler+0x1ec>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d014      	beq.n	8001c9e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699a      	ldr	r2, [r3, #24]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0210 	bic.w	r2, r2, #16
 8001c82:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f001 fbe4 	bl	8003452 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699a      	ldr	r2, [r3, #24]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 0210 	orr.w	r2, r2, #16
 8001c98:	619a      	str	r2, [r3, #24]
 8001c9a:	e000      	b.n	8001c9e <HAL_HCD_IRQHandler+0x21a>
      return;
 8001c9c:	bf00      	nop
    }
  }
}
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_HCD_Start+0x16>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e013      	b.n	8001ce2 <HAL_HCD_Start+0x3e>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f003 ff78 	bl	8005bbe <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f003 fc70 	bl	80055b8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_HCD_Stop+0x16>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e00d      	b.n	8001d1c <HAL_HCD_Stop+0x32>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f004 fccb 	bl	80066a8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f003 ff1a 	bl	8005b6a <USB_ResetPort>
 8001d36:	4603      	mov	r3, r0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d4c:	78fa      	ldrb	r2, [r7, #3]
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	4613      	mov	r3, r2
 8001d52:	011b      	lsls	r3, r3, #4
 8001d54:	1a9b      	subs	r3, r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	334c      	adds	r3, #76	; 0x4c
 8001d5c:	781b      	ldrb	r3, [r3, #0]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	460b      	mov	r3, r1
 8001d74:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d76:	78fa      	ldrb	r2, [r7, #3]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	1a9b      	subs	r3, r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	3338      	adds	r3, #56	; 0x38
 8001d86:	681b      	ldr	r3, [r3, #0]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f003 ff5c 	bl	8005c5e <USB_GetCurrentFrame>
 8001da6:	4603      	mov	r3, r0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f003 ff37 	bl	8005c30 <USB_GetHostSpeed>
 8001dc2:	4603      	mov	r3, r0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001dd8:	78fa      	ldrb	r2, [r7, #3]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	331a      	adds	r3, #26
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001dec:	78fa      	ldrb	r2, [r7, #3]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	331b      	adds	r3, #27
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001e00:	78fa      	ldrb	r2, [r7, #3]
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	1a9b      	subs	r3, r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	3325      	adds	r3, #37	; 0x25
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001e14:	78fa      	ldrb	r2, [r7, #3]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	1a9b      	subs	r3, r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	3324      	adds	r3, #36	; 0x24
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	78fa      	ldrb	r2, [r7, #3]
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f003 fd26 	bl	80058a6 <USB_ReadChInterrupts>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d11a      	bne.n	8001e9a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	015a      	lsls	r2, r3, #5
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e70:	461a      	mov	r2, r3
 8001e72:	2304      	movs	r3, #4
 8001e74:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e76:	78fa      	ldrb	r2, [r7, #3]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	1a9b      	subs	r3, r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	334d      	adds	r3, #77	; 0x4d
 8001e86:	2207      	movs	r2, #7
 8001e88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	78fa      	ldrb	r2, [r7, #3]
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f004 faab 	bl	80063ee <USB_HC_Halt>
 8001e98:	e09e      	b.n	8001fd8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	78fa      	ldrb	r2, [r7, #3]
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f003 fcff 	bl	80058a6 <USB_ReadChInterrupts>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eb2:	d11b      	bne.n	8001eec <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	015a      	lsls	r2, r3, #5
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4413      	add	r3, r2
 8001ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ec6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001ec8:	78fa      	ldrb	r2, [r7, #3]
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	1a9b      	subs	r3, r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	334d      	adds	r3, #77	; 0x4d
 8001ed8:	2208      	movs	r2, #8
 8001eda:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	78fa      	ldrb	r2, [r7, #3]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f004 fa82 	bl	80063ee <USB_HC_Halt>
 8001eea:	e075      	b.n	8001fd8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	78fa      	ldrb	r2, [r7, #3]
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f003 fcd6 	bl	80058a6 <USB_ReadChInterrupts>
 8001efa:	4603      	mov	r3, r0
 8001efc:	f003 0308 	and.w	r3, r3, #8
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d11a      	bne.n	8001f3a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	015a      	lsls	r2, r3, #5
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f10:	461a      	mov	r2, r3
 8001f12:	2308      	movs	r3, #8
 8001f14:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001f16:	78fa      	ldrb	r2, [r7, #3]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	1a9b      	subs	r3, r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	334d      	adds	r3, #77	; 0x4d
 8001f26:	2206      	movs	r2, #6
 8001f28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	78fa      	ldrb	r2, [r7, #3]
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f004 fa5b 	bl	80063ee <USB_HC_Halt>
 8001f38:	e04e      	b.n	8001fd8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	78fa      	ldrb	r2, [r7, #3]
 8001f40:	4611      	mov	r1, r2
 8001f42:	4618      	mov	r0, r3
 8001f44:	f003 fcaf 	bl	80058a6 <USB_ReadChInterrupts>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f52:	d11b      	bne.n	8001f8c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f60:	461a      	mov	r2, r3
 8001f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f66:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001f68:	78fa      	ldrb	r2, [r7, #3]
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	011b      	lsls	r3, r3, #4
 8001f70:	1a9b      	subs	r3, r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	334d      	adds	r3, #77	; 0x4d
 8001f78:	2209      	movs	r2, #9
 8001f7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	78fa      	ldrb	r2, [r7, #3]
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f004 fa32 	bl	80063ee <USB_HC_Halt>
 8001f8a:	e025      	b.n	8001fd8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	78fa      	ldrb	r2, [r7, #3]
 8001f92:	4611      	mov	r1, r2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f003 fc86 	bl	80058a6 <USB_ReadChInterrupts>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa0:	2b80      	cmp	r3, #128	; 0x80
 8001fa2:	d119      	bne.n	8001fd8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	015a      	lsls	r2, r3, #5
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4413      	add	r3, r2
 8001fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	2380      	movs	r3, #128	; 0x80
 8001fb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001fb6:	78fa      	ldrb	r2, [r7, #3]
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	1a9b      	subs	r3, r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	334d      	adds	r3, #77	; 0x4d
 8001fc6:	2207      	movs	r2, #7
 8001fc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	78fa      	ldrb	r2, [r7, #3]
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f004 fa0b 	bl	80063ee <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	78fa      	ldrb	r2, [r7, #3]
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f003 fc60 	bl	80058a6 <USB_ReadChInterrupts>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ff0:	d112      	bne.n	8002018 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	78fa      	ldrb	r2, [r7, #3]
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f004 f9f7 	bl	80063ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4413      	add	r3, r2
 8002008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200c:	461a      	mov	r2, r3
 800200e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002012:	6093      	str	r3, [r2, #8]
 8002014:	f000 bd75 	b.w	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	78fa      	ldrb	r2, [r7, #3]
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f003 fc40 	bl	80058a6 <USB_ReadChInterrupts>
 8002026:	4603      	mov	r3, r0
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b01      	cmp	r3, #1
 800202e:	f040 8128 	bne.w	8002282 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	015a      	lsls	r2, r3, #5
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4413      	add	r3, r2
 800203a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800203e:	461a      	mov	r2, r3
 8002040:	2320      	movs	r3, #32
 8002042:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002044:	78fa      	ldrb	r2, [r7, #3]
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	1a9b      	subs	r3, r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	331b      	adds	r3, #27
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d119      	bne.n	800208e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800205a:	78fa      	ldrb	r2, [r7, #3]
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	331b      	adds	r3, #27
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	015a      	lsls	r2, r3, #5
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4413      	add	r3, r2
 8002076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	78fa      	ldrb	r2, [r7, #3]
 800207e:	0151      	lsls	r1, r2, #5
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	440a      	add	r2, r1
 8002084:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	799b      	ldrb	r3, [r3, #6]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d01b      	beq.n	80020ce <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002096:	78fa      	ldrb	r2, [r7, #3]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	1a9b      	subs	r3, r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	3330      	adds	r3, #48	; 0x30
 80020a6:	6819      	ldr	r1, [r3, #0]
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	015a      	lsls	r2, r3, #5
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4413      	add	r3, r2
 80020b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ba:	78fa      	ldrb	r2, [r7, #3]
 80020bc:	1ac9      	subs	r1, r1, r3
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	1a9b      	subs	r3, r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4403      	add	r3, r0
 80020ca:	3338      	adds	r3, #56	; 0x38
 80020cc:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80020ce:	78fa      	ldrb	r2, [r7, #3]
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	011b      	lsls	r3, r3, #4
 80020d6:	1a9b      	subs	r3, r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	334d      	adds	r3, #77	; 0x4d
 80020de:	2201      	movs	r2, #1
 80020e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80020e2:	78fa      	ldrb	r2, [r7, #3]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	3344      	adds	r3, #68	; 0x44
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	015a      	lsls	r2, r3, #5
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4413      	add	r3, r2
 80020fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002102:	461a      	mov	r2, r3
 8002104:	2301      	movs	r3, #1
 8002106:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002108:	78fa      	ldrb	r2, [r7, #3]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	1a9b      	subs	r3, r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	3326      	adds	r3, #38	; 0x26
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00a      	beq.n	8002134 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800211e:	78fa      	ldrb	r2, [r7, #3]
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	1a9b      	subs	r3, r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	3326      	adds	r3, #38	; 0x26
 800212e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002130:	2b02      	cmp	r3, #2
 8002132:	d110      	bne.n	8002156 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	78fa      	ldrb	r2, [r7, #3]
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f004 f956 	bl	80063ee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002142:	78fb      	ldrb	r3, [r7, #3]
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4413      	add	r3, r2
 800214a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214e:	461a      	mov	r2, r3
 8002150:	2310      	movs	r3, #16
 8002152:	6093      	str	r3, [r2, #8]
 8002154:	e03d      	b.n	80021d2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002156:	78fa      	ldrb	r2, [r7, #3]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	1a9b      	subs	r3, r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	3326      	adds	r3, #38	; 0x26
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b03      	cmp	r3, #3
 800216a:	d00a      	beq.n	8002182 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800216c:	78fa      	ldrb	r2, [r7, #3]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	1a9b      	subs	r3, r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	3326      	adds	r3, #38	; 0x26
 800217c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800217e:	2b01      	cmp	r3, #1
 8002180:	d127      	bne.n	80021d2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002182:	78fb      	ldrb	r3, [r7, #3]
 8002184:	015a      	lsls	r2, r3, #5
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4413      	add	r3, r2
 800218a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	78fa      	ldrb	r2, [r7, #3]
 8002192:	0151      	lsls	r1, r2, #5
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	440a      	add	r2, r1
 8002198:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800219c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021a0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80021a2:	78fa      	ldrb	r2, [r7, #3]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	1a9b      	subs	r3, r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	334c      	adds	r3, #76	; 0x4c
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80021b6:	78fa      	ldrb	r2, [r7, #3]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	1a9b      	subs	r3, r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	334c      	adds	r3, #76	; 0x4c
 80021c6:	781a      	ldrb	r2, [r3, #0]
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	4619      	mov	r1, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f009 fe6d 	bl	800beac <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	799b      	ldrb	r3, [r3, #6]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d13b      	bne.n	8002252 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80021da:	78fa      	ldrb	r2, [r7, #3]
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	1a9b      	subs	r3, r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	3338      	adds	r3, #56	; 0x38
 80021ea:	6819      	ldr	r1, [r3, #0]
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	1a9b      	subs	r3, r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4403      	add	r3, r0
 80021fa:	3328      	adds	r3, #40	; 0x28
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	440b      	add	r3, r1
 8002200:	1e59      	subs	r1, r3, #1
 8002202:	78fa      	ldrb	r2, [r7, #3]
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	1a9b      	subs	r3, r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4403      	add	r3, r0
 8002210:	3328      	adds	r3, #40	; 0x28
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	fbb1 f3f3 	udiv	r3, r1, r3
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 8470 	beq.w	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002222:	78fa      	ldrb	r2, [r7, #3]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	333c      	adds	r3, #60	; 0x3c
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	78fa      	ldrb	r2, [r7, #3]
 8002236:	f083 0301 	eor.w	r3, r3, #1
 800223a:	b2d8      	uxtb	r0, r3
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	333c      	adds	r3, #60	; 0x3c
 800224a:	4602      	mov	r2, r0
 800224c:	701a      	strb	r2, [r3, #0]
 800224e:	f000 bc58 	b.w	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002252:	78fa      	ldrb	r2, [r7, #3]
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	1a9b      	subs	r3, r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	440b      	add	r3, r1
 8002260:	333c      	adds	r3, #60	; 0x3c
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	78fa      	ldrb	r2, [r7, #3]
 8002266:	f083 0301 	eor.w	r3, r3, #1
 800226a:	b2d8      	uxtb	r0, r3
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	1a9b      	subs	r3, r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	440b      	add	r3, r1
 8002278:	333c      	adds	r3, #60	; 0x3c
 800227a:	4602      	mov	r2, r0
 800227c:	701a      	strb	r2, [r3, #0]
 800227e:	f000 bc40 	b.w	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	78fa      	ldrb	r2, [r7, #3]
 8002288:	4611      	mov	r1, r2
 800228a:	4618      	mov	r0, r3
 800228c:	f003 fb0b 	bl	80058a6 <USB_ReadChInterrupts>
 8002290:	4603      	mov	r3, r0
 8002292:	f003 0320 	and.w	r3, r3, #32
 8002296:	2b20      	cmp	r3, #32
 8002298:	d131      	bne.n	80022fe <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	015a      	lsls	r2, r3, #5
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a6:	461a      	mov	r2, r3
 80022a8:	2320      	movs	r3, #32
 80022aa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80022ac:	78fa      	ldrb	r2, [r7, #3]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	1a9b      	subs	r3, r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	331a      	adds	r3, #26
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	f040 841f 	bne.w	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	331b      	adds	r3, #27
 80022d4:	2201      	movs	r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80022d8:	78fa      	ldrb	r2, [r7, #3]
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	1a9b      	subs	r3, r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	334d      	adds	r3, #77	; 0x4d
 80022e8:	2203      	movs	r2, #3
 80022ea:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	78fa      	ldrb	r2, [r7, #3]
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f004 f87a 	bl	80063ee <USB_HC_Halt>
 80022fa:	f000 bc02 	b.w	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	78fa      	ldrb	r2, [r7, #3]
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f003 facd 	bl	80058a6 <USB_ReadChInterrupts>
 800230c:	4603      	mov	r3, r0
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b02      	cmp	r3, #2
 8002314:	f040 8305 	bne.w	8002922 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4413      	add	r3, r2
 8002320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002324:	461a      	mov	r2, r3
 8002326:	2302      	movs	r3, #2
 8002328:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800232a:	78fa      	ldrb	r2, [r7, #3]
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	1a9b      	subs	r3, r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	440b      	add	r3, r1
 8002338:	334d      	adds	r3, #77	; 0x4d
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d114      	bne.n	800236a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002340:	78fa      	ldrb	r2, [r7, #3]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	1a9b      	subs	r3, r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	334d      	adds	r3, #77	; 0x4d
 8002350:	2202      	movs	r2, #2
 8002352:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002354:	78fa      	ldrb	r2, [r7, #3]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	334c      	adds	r3, #76	; 0x4c
 8002364:	2201      	movs	r2, #1
 8002366:	701a      	strb	r2, [r3, #0]
 8002368:	e2cc      	b.n	8002904 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800236a:	78fa      	ldrb	r2, [r7, #3]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	011b      	lsls	r3, r3, #4
 8002372:	1a9b      	subs	r3, r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	334d      	adds	r3, #77	; 0x4d
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b06      	cmp	r3, #6
 800237e:	d114      	bne.n	80023aa <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	334d      	adds	r3, #77	; 0x4d
 8002390:	2202      	movs	r2, #2
 8002392:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	334c      	adds	r3, #76	; 0x4c
 80023a4:	2205      	movs	r2, #5
 80023a6:	701a      	strb	r2, [r3, #0]
 80023a8:	e2ac      	b.n	8002904 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023aa:	78fa      	ldrb	r2, [r7, #3]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	1a9b      	subs	r3, r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	334d      	adds	r3, #77	; 0x4d
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b07      	cmp	r3, #7
 80023be:	d00b      	beq.n	80023d8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80023c0:	78fa      	ldrb	r2, [r7, #3]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	011b      	lsls	r3, r3, #4
 80023c8:	1a9b      	subs	r3, r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	334d      	adds	r3, #77	; 0x4d
 80023d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023d2:	2b09      	cmp	r3, #9
 80023d4:	f040 80a6 	bne.w	8002524 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023d8:	78fa      	ldrb	r2, [r7, #3]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	334d      	adds	r3, #77	; 0x4d
 80023e8:	2202      	movs	r2, #2
 80023ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80023ec:	78fa      	ldrb	r2, [r7, #3]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	3344      	adds	r3, #68	; 0x44
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	1c59      	adds	r1, r3, #1
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4403      	add	r3, r0
 800240c:	3344      	adds	r3, #68	; 0x44
 800240e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002410:	78fa      	ldrb	r2, [r7, #3]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	3344      	adds	r3, #68	; 0x44
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d943      	bls.n	80024ae <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002426:	78fa      	ldrb	r2, [r7, #3]
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	1a9b      	subs	r3, r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	440b      	add	r3, r1
 8002434:	3344      	adds	r3, #68	; 0x44
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800243a:	78fa      	ldrb	r2, [r7, #3]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	331a      	adds	r3, #26
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d123      	bne.n	8002498 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002450:	78fa      	ldrb	r2, [r7, #3]
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	1a9b      	subs	r3, r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	331b      	adds	r3, #27
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002464:	78fa      	ldrb	r2, [r7, #3]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	331c      	adds	r3, #28
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4413      	add	r3, r2
 8002480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	78fa      	ldrb	r2, [r7, #3]
 8002488:	0151      	lsls	r1, r2, #5
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	440a      	add	r2, r1
 800248e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002496:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002498:	78fa      	ldrb	r2, [r7, #3]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	334c      	adds	r3, #76	; 0x4c
 80024a8:	2204      	movs	r2, #4
 80024aa:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024ac:	e229      	b.n	8002902 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024ae:	78fa      	ldrb	r2, [r7, #3]
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	1a9b      	subs	r3, r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	334c      	adds	r3, #76	; 0x4c
 80024be:	2202      	movs	r2, #2
 80024c0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024c2:	78fa      	ldrb	r2, [r7, #3]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	1a9b      	subs	r3, r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	3326      	adds	r3, #38	; 0x26
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00b      	beq.n	80024f0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80024d8:	78fa      	ldrb	r2, [r7, #3]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	3326      	adds	r3, #38	; 0x26
 80024e8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	f040 8209 	bne.w	8002902 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002506:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800250e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4413      	add	r3, r2
 8002518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251c:	461a      	mov	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002522:	e1ee      	b.n	8002902 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	334d      	adds	r3, #77	; 0x4d
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b05      	cmp	r3, #5
 8002538:	f040 80c8 	bne.w	80026cc <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800253c:	78fa      	ldrb	r2, [r7, #3]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	1a9b      	subs	r3, r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	334d      	adds	r3, #77	; 0x4d
 800254c:	2202      	movs	r2, #2
 800254e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	331b      	adds	r3, #27
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b01      	cmp	r3, #1
 8002564:	f040 81ce 	bne.w	8002904 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	3326      	adds	r3, #38	; 0x26
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b03      	cmp	r3, #3
 800257c:	d16b      	bne.n	8002656 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800257e:	78fa      	ldrb	r2, [r7, #3]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	1a9b      	subs	r3, r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	3348      	adds	r3, #72	; 0x48
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	1c59      	adds	r1, r3, #1
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	1a9b      	subs	r3, r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4403      	add	r3, r0
 800259e:	3348      	adds	r3, #72	; 0x48
 80025a0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80025a2:	78fa      	ldrb	r2, [r7, #3]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	1a9b      	subs	r3, r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	3348      	adds	r3, #72	; 0x48
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d943      	bls.n	8002640 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80025b8:	78fa      	ldrb	r2, [r7, #3]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	3348      	adds	r3, #72	; 0x48
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	331b      	adds	r3, #27
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	3344      	adds	r3, #68	; 0x44
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d809      	bhi.n	800260a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80025f6:	78fa      	ldrb	r2, [r7, #3]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	1a9b      	subs	r3, r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	331c      	adds	r3, #28
 8002606:	2201      	movs	r2, #1
 8002608:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800260a:	78fb      	ldrb	r3, [r7, #3]
 800260c:	015a      	lsls	r2, r3, #5
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4413      	add	r3, r2
 8002612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	0151      	lsls	r1, r2, #5
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	440a      	add	r2, r1
 8002620:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002628:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800262a:	78fa      	ldrb	r2, [r7, #3]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	1a9b      	subs	r3, r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	334c      	adds	r3, #76	; 0x4c
 800263a:	2204      	movs	r2, #4
 800263c:	701a      	strb	r2, [r3, #0]
 800263e:	e014      	b.n	800266a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002640:	78fa      	ldrb	r2, [r7, #3]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	1a9b      	subs	r3, r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	334c      	adds	r3, #76	; 0x4c
 8002650:	2202      	movs	r2, #2
 8002652:	701a      	strb	r2, [r3, #0]
 8002654:	e009      	b.n	800266a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002656:	78fa      	ldrb	r2, [r7, #3]
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	1a9b      	subs	r3, r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	334c      	adds	r3, #76	; 0x4c
 8002666:	2202      	movs	r2, #2
 8002668:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800266a:	78fa      	ldrb	r2, [r7, #3]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	1a9b      	subs	r3, r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	3326      	adds	r3, #38	; 0x26
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00b      	beq.n	8002698 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002680:	78fa      	ldrb	r2, [r7, #3]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	1a9b      	subs	r3, r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	3326      	adds	r3, #38	; 0x26
 8002690:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002692:	2b02      	cmp	r3, #2
 8002694:	f040 8136 	bne.w	8002904 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026ae:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026b6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c4:	461a      	mov	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	e11b      	b.n	8002904 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	334d      	adds	r3, #77	; 0x4d
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b03      	cmp	r3, #3
 80026e0:	f040 8081 	bne.w	80027e6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026e4:	78fa      	ldrb	r2, [r7, #3]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	334d      	adds	r3, #77	; 0x4d
 80026f4:	2202      	movs	r2, #2
 80026f6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80026f8:	78fa      	ldrb	r2, [r7, #3]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	331b      	adds	r3, #27
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b01      	cmp	r3, #1
 800270c:	f040 80fa 	bne.w	8002904 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	334c      	adds	r3, #76	; 0x4c
 8002720:	2202      	movs	r2, #2
 8002722:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	78fa      	ldrb	r2, [r7, #3]
 8002734:	0151      	lsls	r1, r2, #5
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	440a      	add	r2, r1
 800273a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800273e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002742:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4413      	add	r3, r2
 800274c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	78fa      	ldrb	r2, [r7, #3]
 8002754:	0151      	lsls	r1, r2, #5
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	440a      	add	r2, r1
 800275a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800275e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002762:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002764:	78fb      	ldrb	r3, [r7, #3]
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4413      	add	r3, r2
 800276c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	78fa      	ldrb	r2, [r7, #3]
 8002774:	0151      	lsls	r1, r2, #5
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	440a      	add	r2, r1
 800277a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800277e:	f023 0320 	bic.w	r3, r3, #32
 8002782:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002784:	78fa      	ldrb	r2, [r7, #3]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	1a9b      	subs	r3, r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	3326      	adds	r3, #38	; 0x26
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00b      	beq.n	80027b2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800279a:	78fa      	ldrb	r2, [r7, #3]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	1a9b      	subs	r3, r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	3326      	adds	r3, #38	; 0x26
 80027aa:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	f040 80a9 	bne.w	8002904 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80027b2:	78fb      	ldrb	r3, [r7, #3]
 80027b4:	015a      	lsls	r2, r3, #5
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	4413      	add	r3, r2
 80027ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027c8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027d0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80027d2:	78fb      	ldrb	r3, [r7, #3]
 80027d4:	015a      	lsls	r2, r3, #5
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027de:	461a      	mov	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	e08e      	b.n	8002904 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	334d      	adds	r3, #77	; 0x4d
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d143      	bne.n	8002884 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	334d      	adds	r3, #77	; 0x4d
 800280c:	2202      	movs	r2, #2
 800280e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002810:	78fa      	ldrb	r2, [r7, #3]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	334c      	adds	r3, #76	; 0x4c
 8002820:	2202      	movs	r2, #2
 8002822:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002824:	78fa      	ldrb	r2, [r7, #3]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	3326      	adds	r3, #38	; 0x26
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800283a:	78fa      	ldrb	r2, [r7, #3]
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	1a9b      	subs	r3, r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	440b      	add	r3, r1
 8002848:	3326      	adds	r3, #38	; 0x26
 800284a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800284c:	2b02      	cmp	r3, #2
 800284e:	d159      	bne.n	8002904 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4413      	add	r3, r2
 8002858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002866:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800286e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4413      	add	r3, r2
 8002878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287c:	461a      	mov	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	e03f      	b.n	8002904 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002884:	78fa      	ldrb	r2, [r7, #3]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	334d      	adds	r3, #77	; 0x4d
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b08      	cmp	r3, #8
 8002898:	d126      	bne.n	80028e8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800289a:	78fa      	ldrb	r2, [r7, #3]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	1a9b      	subs	r3, r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	334d      	adds	r3, #77	; 0x4d
 80028aa:	2202      	movs	r2, #2
 80028ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80028ae:	78fa      	ldrb	r2, [r7, #3]
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	1a9b      	subs	r3, r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	3344      	adds	r3, #68	; 0x44
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	1c59      	adds	r1, r3, #1
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4403      	add	r3, r0
 80028ce:	3344      	adds	r3, #68	; 0x44
 80028d0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80028d2:	78fa      	ldrb	r2, [r7, #3]
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	1a9b      	subs	r3, r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	334c      	adds	r3, #76	; 0x4c
 80028e2:	2204      	movs	r2, #4
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	e00d      	b.n	8002904 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80028e8:	78fa      	ldrb	r2, [r7, #3]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	334d      	adds	r3, #77	; 0x4d
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	f000 8100 	beq.w	8002b00 <HCD_HC_IN_IRQHandler+0xcca>
 8002900:	e000      	b.n	8002904 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002902:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002904:	78fa      	ldrb	r2, [r7, #3]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	334c      	adds	r3, #76	; 0x4c
 8002914:	781a      	ldrb	r2, [r3, #0]
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	4619      	mov	r1, r3
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f009 fac6 	bl	800beac <HAL_HCD_HC_NotifyURBChange_Callback>
 8002920:	e0ef      	b.n	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f002 ffbb 	bl	80058a6 <USB_ReadChInterrupts>
 8002930:	4603      	mov	r3, r0
 8002932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002936:	2b40      	cmp	r3, #64	; 0x40
 8002938:	d12f      	bne.n	800299a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	4413      	add	r3, r2
 8002942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002946:	461a      	mov	r2, r3
 8002948:	2340      	movs	r3, #64	; 0x40
 800294a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800294c:	78fa      	ldrb	r2, [r7, #3]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	1a9b      	subs	r3, r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	334d      	adds	r3, #77	; 0x4d
 800295c:	2205      	movs	r2, #5
 800295e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002960:	78fa      	ldrb	r2, [r7, #3]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	331a      	adds	r3, #26
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d109      	bne.n	800298a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002976:	78fa      	ldrb	r2, [r7, #3]
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	1a9b      	subs	r3, r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	440b      	add	r3, r1
 8002984:	3344      	adds	r3, #68	; 0x44
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	78fa      	ldrb	r2, [r7, #3]
 8002990:	4611      	mov	r1, r2
 8002992:	4618      	mov	r0, r3
 8002994:	f003 fd2b 	bl	80063ee <USB_HC_Halt>
 8002998:	e0b3      	b.n	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	78fa      	ldrb	r2, [r7, #3]
 80029a0:	4611      	mov	r1, r2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f002 ff7f 	bl	80058a6 <USB_ReadChInterrupts>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b10      	cmp	r3, #16
 80029b0:	f040 80a7 	bne.w	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	3326      	adds	r3, #38	; 0x26
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d11b      	bne.n	8002a02 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029ca:	78fa      	ldrb	r2, [r7, #3]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	1a9b      	subs	r3, r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	3344      	adds	r3, #68	; 0x44
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80029de:	78fa      	ldrb	r2, [r7, #3]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	1a9b      	subs	r3, r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	334d      	adds	r3, #77	; 0x4d
 80029ee:	2204      	movs	r2, #4
 80029f0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	78fa      	ldrb	r2, [r7, #3]
 80029f8:	4611      	mov	r1, r2
 80029fa:	4618      	mov	r0, r3
 80029fc:	f003 fcf7 	bl	80063ee <USB_HC_Halt>
 8002a00:	e03f      	b.n	8002a82 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a02:	78fa      	ldrb	r2, [r7, #3]
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	3326      	adds	r3, #38	; 0x26
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00a      	beq.n	8002a2e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	3326      	adds	r3, #38	; 0x26
 8002a28:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d129      	bne.n	8002a82 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a2e:	78fa      	ldrb	r2, [r7, #3]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	1a9b      	subs	r3, r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	3344      	adds	r3, #68	; 0x44
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	799b      	ldrb	r3, [r3, #6]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <HCD_HC_IN_IRQHandler+0xc2a>
 8002a4a:	78fa      	ldrb	r2, [r7, #3]
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	1a9b      	subs	r3, r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	331b      	adds	r3, #27
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d110      	bne.n	8002a82 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002a60:	78fa      	ldrb	r2, [r7, #3]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	1a9b      	subs	r3, r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	334d      	adds	r3, #77	; 0x4d
 8002a70:	2204      	movs	r2, #4
 8002a72:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f003 fcb6 	bl	80063ee <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002a82:	78fa      	ldrb	r2, [r7, #3]
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	4613      	mov	r3, r2
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	1a9b      	subs	r3, r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	440b      	add	r3, r1
 8002a90:	331b      	adds	r3, #27
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d129      	bne.n	8002aec <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002a98:	78fa      	ldrb	r2, [r7, #3]
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	331b      	adds	r3, #27
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	015a      	lsls	r2, r3, #5
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	78fa      	ldrb	r2, [r7, #3]
 8002abc:	0151      	lsls	r1, r2, #5
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	440a      	add	r2, r1
 8002ac2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aca:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002acc:	78fb      	ldrb	r3, [r7, #3]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	78fa      	ldrb	r2, [r7, #3]
 8002adc:	0151      	lsls	r1, r2, #5
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	440a      	add	r2, r1
 8002ae2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ae6:	f043 0320 	orr.w	r3, r3, #32
 8002aea:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af8:	461a      	mov	r2, r3
 8002afa:	2310      	movs	r3, #16
 8002afc:	6093      	str	r3, [r2, #8]
 8002afe:	e000      	b.n	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002b00:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	4611      	mov	r1, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f002 febd 	bl	80058a6 <USB_ReadChInterrupts>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d11b      	bne.n	8002b6e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002b36:	78fb      	ldrb	r3, [r7, #3]
 8002b38:	015a      	lsls	r2, r3, #5
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b42:	461a      	mov	r2, r3
 8002b44:	2304      	movs	r3, #4
 8002b46:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b48:	78fa      	ldrb	r2, [r7, #3]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	1a9b      	subs	r3, r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	334d      	adds	r3, #77	; 0x4d
 8002b58:	2207      	movs	r2, #7
 8002b5a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	78fa      	ldrb	r2, [r7, #3]
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f003 fc42 	bl	80063ee <USB_HC_Halt>
 8002b6a:	f000 bc6f 	b.w	800344c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f002 fe95 	bl	80058a6 <USB_ReadChInterrupts>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f003 0320 	and.w	r3, r3, #32
 8002b82:	2b20      	cmp	r3, #32
 8002b84:	f040 8082 	bne.w	8002c8c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b94:	461a      	mov	r2, r3
 8002b96:	2320      	movs	r3, #32
 8002b98:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002b9a:	78fa      	ldrb	r2, [r7, #3]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	3319      	adds	r3, #25
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d124      	bne.n	8002bfa <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002bb0:	78fa      	ldrb	r2, [r7, #3]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	3319      	adds	r3, #25
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bc4:	78fa      	ldrb	r2, [r7, #3]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	334c      	adds	r3, #76	; 0x4c
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	334d      	adds	r3, #77	; 0x4d
 8002be8:	2203      	movs	r2, #3
 8002bea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	78fa      	ldrb	r2, [r7, #3]
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f003 fbfa 	bl	80063ee <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002bfa:	78fa      	ldrb	r2, [r7, #3]
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	1a9b      	subs	r3, r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	440b      	add	r3, r1
 8002c08:	331a      	adds	r3, #26
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	f040 841d 	bne.w	800344c <HCD_HC_OUT_IRQHandler+0x944>
 8002c12:	78fa      	ldrb	r2, [r7, #3]
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	1a9b      	subs	r3, r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	331b      	adds	r3, #27
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f040 8411 	bne.w	800344c <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002c2a:	78fa      	ldrb	r2, [r7, #3]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	3326      	adds	r3, #38	; 0x26
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d009      	beq.n	8002c54 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002c40:	78fa      	ldrb	r2, [r7, #3]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	331b      	adds	r3, #27
 8002c50:	2201      	movs	r2, #1
 8002c52:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002c54:	78fa      	ldrb	r2, [r7, #3]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	334d      	adds	r3, #77	; 0x4d
 8002c64:	2203      	movs	r2, #3
 8002c66:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	78fa      	ldrb	r2, [r7, #3]
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f003 fbbc 	bl	80063ee <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	1a9b      	subs	r3, r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	3344      	adds	r3, #68	; 0x44
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	e3df      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	78fa      	ldrb	r2, [r7, #3]
 8002c92:	4611      	mov	r1, r2
 8002c94:	4618      	mov	r0, r3
 8002c96:	f002 fe06 	bl	80058a6 <USB_ReadChInterrupts>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca4:	d111      	bne.n	8002cca <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002ca6:	78fb      	ldrb	r3, [r7, #3]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cb8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f003 fb93 	bl	80063ee <USB_HC_Halt>
 8002cc8:	e3c0      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	78fa      	ldrb	r2, [r7, #3]
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f002 fde7 	bl	80058a6 <USB_ReadChInterrupts>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d168      	bne.n	8002db4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002ce2:	78fa      	ldrb	r2, [r7, #3]
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	1a9b      	subs	r3, r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	440b      	add	r3, r1
 8002cf0:	3344      	adds	r3, #68	; 0x44
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f002 fdd1 	bl	80058a6 <USB_ReadChInterrupts>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0a:	2b40      	cmp	r3, #64	; 0x40
 8002d0c:	d112      	bne.n	8002d34 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d0e:	78fa      	ldrb	r2, [r7, #3]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3319      	adds	r3, #25
 8002d1e:	2201      	movs	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2e:	461a      	mov	r2, r3
 8002d30:	2340      	movs	r3, #64	; 0x40
 8002d32:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002d34:	78fa      	ldrb	r2, [r7, #3]
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	331b      	adds	r3, #27
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d019      	beq.n	8002d7e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d4a:	78fa      	ldrb	r2, [r7, #3]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	331b      	adds	r3, #27
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d5e:	78fb      	ldrb	r3, [r7, #3]
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	78fa      	ldrb	r2, [r7, #3]
 8002d6e:	0151      	lsls	r1, r2, #5
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	440a      	add	r2, r1
 8002d74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d7c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002d90:	78fa      	ldrb	r2, [r7, #3]
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	1a9b      	subs	r3, r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	334d      	adds	r3, #77	; 0x4d
 8002da0:	2201      	movs	r2, #1
 8002da2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	78fa      	ldrb	r2, [r7, #3]
 8002daa:	4611      	mov	r1, r2
 8002dac:	4618      	mov	r0, r3
 8002dae:	f003 fb1e 	bl	80063ee <USB_HC_Halt>
 8002db2:	e34b      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	78fa      	ldrb	r2, [r7, #3]
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f002 fd72 	bl	80058a6 <USB_ReadChInterrupts>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc8:	2b40      	cmp	r3, #64	; 0x40
 8002dca:	d139      	bne.n	8002e40 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	334d      	adds	r3, #77	; 0x4d
 8002ddc:	2205      	movs	r2, #5
 8002dde:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002de0:	78fa      	ldrb	r2, [r7, #3]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	331a      	adds	r3, #26
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002df6:	78fa      	ldrb	r2, [r7, #3]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	1a9b      	subs	r3, r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	3319      	adds	r3, #25
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	1a9b      	subs	r3, r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	3344      	adds	r3, #68	; 0x44
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	4611      	mov	r1, r2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f003 fae1 	bl	80063ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e2c:	78fb      	ldrb	r3, [r7, #3]
 8002e2e:	015a      	lsls	r2, r3, #5
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4413      	add	r3, r2
 8002e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e38:	461a      	mov	r2, r3
 8002e3a:	2340      	movs	r3, #64	; 0x40
 8002e3c:	6093      	str	r3, [r2, #8]
 8002e3e:	e305      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	4611      	mov	r1, r2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f002 fd2c 	bl	80058a6 <USB_ReadChInterrupts>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f003 0308 	and.w	r3, r3, #8
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d11a      	bne.n	8002e8e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	015a      	lsls	r2, r3, #5
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4413      	add	r3, r2
 8002e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e64:	461a      	mov	r2, r3
 8002e66:	2308      	movs	r3, #8
 8002e68:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002e6a:	78fa      	ldrb	r2, [r7, #3]
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	1a9b      	subs	r3, r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	334d      	adds	r3, #77	; 0x4d
 8002e7a:	2206      	movs	r2, #6
 8002e7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	78fa      	ldrb	r2, [r7, #3]
 8002e84:	4611      	mov	r1, r2
 8002e86:	4618      	mov	r0, r3
 8002e88:	f003 fab1 	bl	80063ee <USB_HC_Halt>
 8002e8c:	e2de      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	78fa      	ldrb	r2, [r7, #3]
 8002e94:	4611      	mov	r1, r2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f002 fd05 	bl	80058a6 <USB_ReadChInterrupts>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	2b10      	cmp	r3, #16
 8002ea4:	d144      	bne.n	8002f30 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	1a9b      	subs	r3, r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	3344      	adds	r3, #68	; 0x44
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002eba:	78fa      	ldrb	r2, [r7, #3]
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	1a9b      	subs	r3, r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	334d      	adds	r3, #77	; 0x4d
 8002eca:	2204      	movs	r2, #4
 8002ecc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	3319      	adds	r3, #25
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d114      	bne.n	8002f0e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	3318      	adds	r3, #24
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	1a9b      	subs	r3, r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	3319      	adds	r3, #25
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f003 fa69 	bl	80063ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f28:	461a      	mov	r2, r3
 8002f2a:	2310      	movs	r3, #16
 8002f2c:	6093      	str	r3, [r2, #8]
 8002f2e:	e28d      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	78fa      	ldrb	r2, [r7, #3]
 8002f36:	4611      	mov	r1, r2
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f002 fcb4 	bl	80058a6 <USB_ReadChInterrupts>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f44:	2b80      	cmp	r3, #128	; 0x80
 8002f46:	d169      	bne.n	800301c <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	799b      	ldrb	r3, [r3, #6]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d111      	bne.n	8002f74 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002f50:	78fa      	ldrb	r2, [r7, #3]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	334d      	adds	r3, #77	; 0x4d
 8002f60:	2207      	movs	r2, #7
 8002f62:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f003 fa3e 	bl	80063ee <USB_HC_Halt>
 8002f72:	e049      	b.n	8003008 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	3344      	adds	r3, #68	; 0x44
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	1c59      	adds	r1, r3, #1
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	1a9b      	subs	r3, r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4403      	add	r3, r0
 8002f94:	3344      	adds	r3, #68	; 0x44
 8002f96:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	3344      	adds	r3, #68	; 0x44
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d922      	bls.n	8002ff4 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002fae:	78fa      	ldrb	r2, [r7, #3]
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	1a9b      	subs	r3, r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	3344      	adds	r3, #68	; 0x44
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002fc2:	78fa      	ldrb	r2, [r7, #3]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	334c      	adds	r3, #76	; 0x4c
 8002fd2:	2204      	movs	r2, #4
 8002fd4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002fd6:	78fa      	ldrb	r2, [r7, #3]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	334c      	adds	r3, #76	; 0x4c
 8002fe6:	781a      	ldrb	r2, [r3, #0]
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	4619      	mov	r1, r3
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f008 ff5d 	bl	800beac <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ff2:	e009      	b.n	8003008 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ff4:	78fa      	ldrb	r2, [r7, #3]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	334c      	adds	r3, #76	; 0x4c
 8003004:	2202      	movs	r2, #2
 8003006:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003008:	78fb      	ldrb	r3, [r7, #3]
 800300a:	015a      	lsls	r2, r3, #5
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	4413      	add	r3, r2
 8003010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003014:	461a      	mov	r2, r3
 8003016:	2380      	movs	r3, #128	; 0x80
 8003018:	6093      	str	r3, [r2, #8]
 800301a:	e217      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	4611      	mov	r1, r2
 8003024:	4618      	mov	r0, r3
 8003026:	f002 fc3e 	bl	80058a6 <USB_ReadChInterrupts>
 800302a:	4603      	mov	r3, r0
 800302c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003034:	d11b      	bne.n	800306e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	334d      	adds	r3, #77	; 0x4d
 8003046:	2209      	movs	r2, #9
 8003048:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	4611      	mov	r1, r2
 8003052:	4618      	mov	r0, r3
 8003054:	f003 f9cb 	bl	80063ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003058:	78fb      	ldrb	r3, [r7, #3]
 800305a:	015a      	lsls	r2, r3, #5
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	4413      	add	r3, r2
 8003060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003064:	461a      	mov	r2, r3
 8003066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800306a:	6093      	str	r3, [r2, #8]
 800306c:	e1ee      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f002 fc15 	bl	80058a6 <USB_ReadChInterrupts>
 800307c:	4603      	mov	r3, r0
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b02      	cmp	r3, #2
 8003084:	f040 81df 	bne.w	8003446 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4413      	add	r3, r2
 8003090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003094:	461a      	mov	r2, r3
 8003096:	2302      	movs	r3, #2
 8003098:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	1a9b      	subs	r3, r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	334d      	adds	r3, #77	; 0x4d
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	f040 8093 	bne.w	80031d8 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030b2:	78fa      	ldrb	r2, [r7, #3]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	1a9b      	subs	r3, r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	334d      	adds	r3, #77	; 0x4d
 80030c2:	2202      	movs	r2, #2
 80030c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	1a9b      	subs	r3, r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	334c      	adds	r3, #76	; 0x4c
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	3326      	adds	r3, #38	; 0x26
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d00b      	beq.n	8003108 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80030f0:	78fa      	ldrb	r2, [r7, #3]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	3326      	adds	r3, #38	; 0x26
 8003100:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003102:	2b03      	cmp	r3, #3
 8003104:	f040 8190 	bne.w	8003428 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	799b      	ldrb	r3, [r3, #6]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d115      	bne.n	800313c <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003110:	78fa      	ldrb	r2, [r7, #3]
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	333d      	adds	r3, #61	; 0x3d
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	f083 0301 	eor.w	r3, r3, #1
 8003128:	b2d8      	uxtb	r0, r3
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	333d      	adds	r3, #61	; 0x3d
 8003138:	4602      	mov	r2, r0
 800313a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	799b      	ldrb	r3, [r3, #6]
 8003140:	2b01      	cmp	r3, #1
 8003142:	f040 8171 	bne.w	8003428 <HCD_HC_OUT_IRQHandler+0x920>
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	3334      	adds	r3, #52	; 0x34
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 8165 	beq.w	8003428 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800315e:	78fa      	ldrb	r2, [r7, #3]
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	1a9b      	subs	r3, r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	3334      	adds	r3, #52	; 0x34
 800316e:	6819      	ldr	r1, [r3, #0]
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4403      	add	r3, r0
 800317e:	3328      	adds	r3, #40	; 0x28
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	440b      	add	r3, r1
 8003184:	1e59      	subs	r1, r3, #1
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4403      	add	r3, r0
 8003194:	3328      	adds	r3, #40	; 0x28
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	fbb1 f3f3 	udiv	r3, r1, r3
 800319c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 813f 	beq.w	8003428 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	333d      	adds	r3, #61	; 0x3d
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	78fa      	ldrb	r2, [r7, #3]
 80031be:	f083 0301 	eor.w	r3, r3, #1
 80031c2:	b2d8      	uxtb	r0, r3
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	333d      	adds	r3, #61	; 0x3d
 80031d2:	4602      	mov	r2, r0
 80031d4:	701a      	strb	r2, [r3, #0]
 80031d6:	e127      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	334d      	adds	r3, #77	; 0x4d
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d120      	bne.n	8003230 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	334d      	adds	r3, #77	; 0x4d
 80031fe:	2202      	movs	r2, #2
 8003200:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	331b      	adds	r3, #27
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b01      	cmp	r3, #1
 8003216:	f040 8107 	bne.w	8003428 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800321a:	78fa      	ldrb	r2, [r7, #3]
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	1a9b      	subs	r3, r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	440b      	add	r3, r1
 8003228:	334c      	adds	r3, #76	; 0x4c
 800322a:	2202      	movs	r2, #2
 800322c:	701a      	strb	r2, [r3, #0]
 800322e:	e0fb      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003230:	78fa      	ldrb	r2, [r7, #3]
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	4613      	mov	r3, r2
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	1a9b      	subs	r3, r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	334d      	adds	r3, #77	; 0x4d
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b04      	cmp	r3, #4
 8003244:	d13a      	bne.n	80032bc <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003246:	78fa      	ldrb	r2, [r7, #3]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	1a9b      	subs	r3, r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	334d      	adds	r3, #77	; 0x4d
 8003256:	2202      	movs	r2, #2
 8003258:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	334c      	adds	r3, #76	; 0x4c
 800326a:	2202      	movs	r2, #2
 800326c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	331b      	adds	r3, #27
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b01      	cmp	r3, #1
 8003282:	f040 80d1 	bne.w	8003428 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	331b      	adds	r3, #27
 8003296:	2200      	movs	r2, #0
 8003298:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800329a:	78fb      	ldrb	r3, [r7, #3]
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	78fa      	ldrb	r2, [r7, #3]
 80032aa:	0151      	lsls	r1, r2, #5
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	440a      	add	r2, r1
 80032b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b8:	6053      	str	r3, [r2, #4]
 80032ba:	e0b5      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80032bc:	78fa      	ldrb	r2, [r7, #3]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	334d      	adds	r3, #77	; 0x4d
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b05      	cmp	r3, #5
 80032d0:	d114      	bne.n	80032fc <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	334d      	adds	r3, #77	; 0x4d
 80032e2:	2202      	movs	r2, #2
 80032e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80032e6:	78fa      	ldrb	r2, [r7, #3]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	334c      	adds	r3, #76	; 0x4c
 80032f6:	2202      	movs	r2, #2
 80032f8:	701a      	strb	r2, [r3, #0]
 80032fa:	e095      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	334d      	adds	r3, #77	; 0x4d
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b06      	cmp	r3, #6
 8003310:	d114      	bne.n	800333c <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	334d      	adds	r3, #77	; 0x4d
 8003322:	2202      	movs	r2, #2
 8003324:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	334c      	adds	r3, #76	; 0x4c
 8003336:	2205      	movs	r2, #5
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	e075      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	334d      	adds	r3, #77	; 0x4d
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b07      	cmp	r3, #7
 8003350:	d00a      	beq.n	8003368 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	334d      	adds	r3, #77	; 0x4d
 8003362:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003364:	2b09      	cmp	r3, #9
 8003366:	d170      	bne.n	800344a <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003368:	78fa      	ldrb	r2, [r7, #3]
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	334d      	adds	r3, #77	; 0x4d
 8003378:	2202      	movs	r2, #2
 800337a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	3344      	adds	r3, #68	; 0x44
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	1c59      	adds	r1, r3, #1
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4403      	add	r3, r0
 800339c:	3344      	adds	r3, #68	; 0x44
 800339e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033a0:	78fa      	ldrb	r2, [r7, #3]
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	3344      	adds	r3, #68	; 0x44
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d914      	bls.n	80033e0 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	3344      	adds	r3, #68	; 0x44
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80033ca:	78fa      	ldrb	r2, [r7, #3]
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	334c      	adds	r3, #76	; 0x4c
 80033da:	2204      	movs	r2, #4
 80033dc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033de:	e022      	b.n	8003426 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033e0:	78fa      	ldrb	r2, [r7, #3]
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	4613      	mov	r3, r2
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	1a9b      	subs	r3, r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	334c      	adds	r3, #76	; 0x4c
 80033f0:	2202      	movs	r2, #2
 80033f2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800340a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003412:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4413      	add	r3, r2
 800341c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003420:	461a      	mov	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003426:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	334c      	adds	r3, #76	; 0x4c
 8003438:	781a      	ldrb	r2, [r3, #0]
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	4619      	mov	r1, r3
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f008 fd34 	bl	800beac <HAL_HCD_HC_NotifyURBChange_Callback>
 8003444:	e002      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003446:	bf00      	nop
 8003448:	e000      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800344a:	bf00      	nop
  }
}
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b08a      	sub	sp, #40	; 0x28
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	0c5b      	lsrs	r3, r3, #17
 8003478:	f003 030f 	and.w	r3, r3, #15
 800347c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	091b      	lsrs	r3, r3, #4
 8003482:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003486:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d004      	beq.n	8003498 <HCD_RXQLVL_IRQHandler+0x46>
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2b05      	cmp	r3, #5
 8003492:	f000 80b6 	beq.w	8003602 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003496:	e0b7      	b.n	8003608 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 80b3 	beq.w	8003606 <HCD_RXQLVL_IRQHandler+0x1b4>
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4613      	mov	r3, r2
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	332c      	adds	r3, #44	; 0x2c
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 80a7 	beq.w	8003606 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4613      	mov	r3, r2
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	3338      	adds	r3, #56	; 0x38
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	18d1      	adds	r1, r2, r3
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4613      	mov	r3, r2
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4403      	add	r3, r0
 80034dc:	3334      	adds	r3, #52	; 0x34
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4299      	cmp	r1, r3
 80034e2:	f200 8083 	bhi.w	80035ec <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	332c      	adds	r3, #44	; 0x2c
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	b292      	uxth	r2, r2
 8003500:	4619      	mov	r1, r3
 8003502:	f002 f965 	bl	80057d0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4613      	mov	r3, r2
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	332c      	adds	r3, #44	; 0x2c
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	18d1      	adds	r1, r2, r3
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4613      	mov	r3, r2
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	1a9b      	subs	r3, r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4403      	add	r3, r0
 800352a:	332c      	adds	r3, #44	; 0x2c
 800352c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4613      	mov	r3, r2
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	3338      	adds	r3, #56	; 0x38
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	18d1      	adds	r1, r2, r3
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4613      	mov	r3, r2
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	1a9b      	subs	r3, r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4403      	add	r3, r0
 8003552:	3338      	adds	r3, #56	; 0x38
 8003554:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	4413      	add	r3, r2
 800355e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	0cdb      	lsrs	r3, r3, #19
 8003566:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800356a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4613      	mov	r3, r2
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	1a9b      	subs	r3, r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	3328      	adds	r3, #40	; 0x28
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	4293      	cmp	r3, r2
 8003584:	d13f      	bne.n	8003606 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d03c      	beq.n	8003606 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	4413      	add	r3, r2
 8003594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035a2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035aa:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b8:	461a      	mov	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4613      	mov	r3, r2
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	333c      	adds	r3, #60	; 0x3c
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	f083 0301 	eor.w	r3, r3, #1
 80035d4:	b2d8      	uxtb	r0, r3
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4613      	mov	r3, r2
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	333c      	adds	r3, #60	; 0x3c
 80035e6:	4602      	mov	r2, r0
 80035e8:	701a      	strb	r2, [r3, #0]
      break;
 80035ea:	e00c      	b.n	8003606 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	334c      	adds	r3, #76	; 0x4c
 80035fc:	2204      	movs	r2, #4
 80035fe:	701a      	strb	r2, [r3, #0]
      break;
 8003600:	e001      	b.n	8003606 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003602:	bf00      	nop
 8003604:	e000      	b.n	8003608 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003606:	bf00      	nop
  }
}
 8003608:	bf00      	nop
 800360a:	3728      	adds	r7, #40	; 0x28
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800363c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b02      	cmp	r3, #2
 8003646:	d10b      	bne.n	8003660 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b01      	cmp	r3, #1
 8003650:	d102      	bne.n	8003658 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f008 fc0e 	bl	800be74 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f043 0302 	orr.w	r3, r3, #2
 800365e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b08      	cmp	r3, #8
 8003668:	d132      	bne.n	80036d0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f043 0308 	orr.w	r3, r3, #8
 8003670:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b04      	cmp	r3, #4
 800367a:	d126      	bne.n	80036ca <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	7a5b      	ldrb	r3, [r3, #9]
 8003680:	2b02      	cmp	r3, #2
 8003682:	d113      	bne.n	80036ac <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800368a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800368e:	d106      	bne.n	800369e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2102      	movs	r1, #2
 8003696:	4618      	mov	r0, r3
 8003698:	f002 fa2a 	bl	8005af0 <USB_InitFSLSPClkSel>
 800369c:	e011      	b.n	80036c2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2101      	movs	r1, #1
 80036a4:	4618      	mov	r0, r3
 80036a6:	f002 fa23 	bl	8005af0 <USB_InitFSLSPClkSel>
 80036aa:	e00a      	b.n	80036c2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	79db      	ldrb	r3, [r3, #7]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d106      	bne.n	80036c2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036ba:	461a      	mov	r2, r3
 80036bc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80036c0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f008 fc04 	bl	800bed0 <HAL_HCD_PortEnabled_Callback>
 80036c8:	e002      	b.n	80036d0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f008 fc0e 	bl	800beec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	d103      	bne.n	80036e2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f043 0320 	orr.w	r3, r3, #32
 80036e0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036e8:	461a      	mov	r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	6013      	str	r3, [r2, #0]
}
 80036ee:	bf00      	nop
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e12b      	b.n	8003962 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fd f96e 	bl	8000a00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2224      	movs	r2, #36	; 0x24
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0201 	bic.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800374a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800375a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800375c:	f001 fa20 	bl	8004ba0 <HAL_RCC_GetPCLK1Freq>
 8003760:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	4a81      	ldr	r2, [pc, #516]	; (800396c <HAL_I2C_Init+0x274>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d807      	bhi.n	800377c <HAL_I2C_Init+0x84>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4a80      	ldr	r2, [pc, #512]	; (8003970 <HAL_I2C_Init+0x278>)
 8003770:	4293      	cmp	r3, r2
 8003772:	bf94      	ite	ls
 8003774:	2301      	movls	r3, #1
 8003776:	2300      	movhi	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	e006      	b.n	800378a <HAL_I2C_Init+0x92>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4a7d      	ldr	r2, [pc, #500]	; (8003974 <HAL_I2C_Init+0x27c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	bf94      	ite	ls
 8003784:	2301      	movls	r3, #1
 8003786:	2300      	movhi	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e0e7      	b.n	8003962 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4a78      	ldr	r2, [pc, #480]	; (8003978 <HAL_I2C_Init+0x280>)
 8003796:	fba2 2303 	umull	r2, r3, r2, r3
 800379a:	0c9b      	lsrs	r3, r3, #18
 800379c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	4a6a      	ldr	r2, [pc, #424]	; (800396c <HAL_I2C_Init+0x274>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d802      	bhi.n	80037cc <HAL_I2C_Init+0xd4>
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	3301      	adds	r3, #1
 80037ca:	e009      	b.n	80037e0 <HAL_I2C_Init+0xe8>
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	4a69      	ldr	r2, [pc, #420]	; (800397c <HAL_I2C_Init+0x284>)
 80037d8:	fba2 2303 	umull	r2, r3, r2, r3
 80037dc:	099b      	lsrs	r3, r3, #6
 80037de:	3301      	adds	r3, #1
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6812      	ldr	r2, [r2, #0]
 80037e4:	430b      	orrs	r3, r1
 80037e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	495c      	ldr	r1, [pc, #368]	; (800396c <HAL_I2C_Init+0x274>)
 80037fc:	428b      	cmp	r3, r1
 80037fe:	d819      	bhi.n	8003834 <HAL_I2C_Init+0x13c>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	1e59      	subs	r1, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	fbb1 f3f3 	udiv	r3, r1, r3
 800380e:	1c59      	adds	r1, r3, #1
 8003810:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003814:	400b      	ands	r3, r1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <HAL_I2C_Init+0x138>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1e59      	subs	r1, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	fbb1 f3f3 	udiv	r3, r1, r3
 8003828:	3301      	adds	r3, #1
 800382a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800382e:	e051      	b.n	80038d4 <HAL_I2C_Init+0x1dc>
 8003830:	2304      	movs	r3, #4
 8003832:	e04f      	b.n	80038d4 <HAL_I2C_Init+0x1dc>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d111      	bne.n	8003860 <HAL_I2C_Init+0x168>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	1e58      	subs	r0, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6859      	ldr	r1, [r3, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	440b      	add	r3, r1
 800384a:	fbb0 f3f3 	udiv	r3, r0, r3
 800384e:	3301      	adds	r3, #1
 8003850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003854:	2b00      	cmp	r3, #0
 8003856:	bf0c      	ite	eq
 8003858:	2301      	moveq	r3, #1
 800385a:	2300      	movne	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	e012      	b.n	8003886 <HAL_I2C_Init+0x18e>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1e58      	subs	r0, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6859      	ldr	r1, [r3, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	0099      	lsls	r1, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	fbb0 f3f3 	udiv	r3, r0, r3
 8003876:	3301      	adds	r3, #1
 8003878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387c:	2b00      	cmp	r3, #0
 800387e:	bf0c      	ite	eq
 8003880:	2301      	moveq	r3, #1
 8003882:	2300      	movne	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_I2C_Init+0x196>
 800388a:	2301      	movs	r3, #1
 800388c:	e022      	b.n	80038d4 <HAL_I2C_Init+0x1dc>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10e      	bne.n	80038b4 <HAL_I2C_Init+0x1bc>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1e58      	subs	r0, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6859      	ldr	r1, [r3, #4]
 800389e:	460b      	mov	r3, r1
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	440b      	add	r3, r1
 80038a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80038a8:	3301      	adds	r3, #1
 80038aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038b2:	e00f      	b.n	80038d4 <HAL_I2C_Init+0x1dc>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	1e58      	subs	r0, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6859      	ldr	r1, [r3, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	0099      	lsls	r1, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ca:	3301      	adds	r3, #1
 80038cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	6809      	ldr	r1, [r1, #0]
 80038d8:	4313      	orrs	r3, r2
 80038da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69da      	ldr	r2, [r3, #28]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003902:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6911      	ldr	r1, [r2, #16]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	68d2      	ldr	r2, [r2, #12]
 800390e:	4311      	orrs	r1, r2
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6812      	ldr	r2, [r2, #0]
 8003914:	430b      	orrs	r3, r1
 8003916:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695a      	ldr	r2, [r3, #20]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	000186a0 	.word	0x000186a0
 8003970:	001e847f 	.word	0x001e847f
 8003974:	003d08ff 	.word	0x003d08ff
 8003978:	431bde83 	.word	0x431bde83
 800397c:	10624dd3 	.word	0x10624dd3

08003980 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e128      	b.n	8003be4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a90      	ldr	r2, [pc, #576]	; (8003bec <HAL_I2S_Init+0x26c>)
 80039aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7fd f86f 	bl	8000a90 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2202      	movs	r2, #2
 80039b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80039c8:	f023 030f 	bic.w	r3, r3, #15
 80039cc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2202      	movs	r2, #2
 80039d4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d060      	beq.n	8003aa0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d102      	bne.n	80039ec <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80039e6:	2310      	movs	r3, #16
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	e001      	b.n	80039f0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80039ec:	2320      	movs	r3, #32
 80039ee:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	d802      	bhi.n	80039fe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80039fe:	2001      	movs	r0, #1
 8003a00:	f001 f9f6 	bl	8004df0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a04:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a0e:	d125      	bne.n	8003a5c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d010      	beq.n	8003a3a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a22:	4613      	mov	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a34:	3305      	adds	r3, #5
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	e01f      	b.n	8003a7a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a56:	3305      	adds	r3, #5
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	e00e      	b.n	8003a7a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a76:	3305      	adds	r3, #5
 8003a78:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4a5c      	ldr	r2, [pc, #368]	; (8003bf0 <HAL_I2S_Init+0x270>)
 8003a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a82:	08db      	lsrs	r3, r3, #3
 8003a84:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	085b      	lsrs	r3, r3, #1
 8003a96:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	021b      	lsls	r3, r3, #8
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	e003      	b.n	8003aa8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d902      	bls.n	8003ab4 <HAL_I2S_Init+0x134>
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	2bff      	cmp	r3, #255	; 0xff
 8003ab2:	d907      	bls.n	8003ac4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab8:	f043 0210 	orr.w	r2, r3, #16
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e08f      	b.n	8003be4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	ea42 0103 	orr.w	r1, r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69fa      	ldr	r2, [r7, #28]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ae2:	f023 030f 	bic.w	r3, r3, #15
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6851      	ldr	r1, [r2, #4]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6892      	ldr	r2, [r2, #8]
 8003aee:	4311      	orrs	r1, r2
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	68d2      	ldr	r2, [r2, #12]
 8003af4:	4311      	orrs	r1, r2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6992      	ldr	r2, [r2, #24]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b06:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d161      	bne.n	8003bd4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a38      	ldr	r2, [pc, #224]	; (8003bf4 <HAL_I2S_Init+0x274>)
 8003b14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a37      	ldr	r2, [pc, #220]	; (8003bf8 <HAL_I2S_Init+0x278>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d101      	bne.n	8003b24 <HAL_I2S_Init+0x1a4>
 8003b20:	4b36      	ldr	r3, [pc, #216]	; (8003bfc <HAL_I2S_Init+0x27c>)
 8003b22:	e001      	b.n	8003b28 <HAL_I2S_Init+0x1a8>
 8003b24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6812      	ldr	r2, [r2, #0]
 8003b2e:	4932      	ldr	r1, [pc, #200]	; (8003bf8 <HAL_I2S_Init+0x278>)
 8003b30:	428a      	cmp	r2, r1
 8003b32:	d101      	bne.n	8003b38 <HAL_I2S_Init+0x1b8>
 8003b34:	4a31      	ldr	r2, [pc, #196]	; (8003bfc <HAL_I2S_Init+0x27c>)
 8003b36:	e001      	b.n	8003b3c <HAL_I2S_Init+0x1bc>
 8003b38:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003b3c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b40:	f023 030f 	bic.w	r3, r3, #15
 8003b44:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a2b      	ldr	r2, [pc, #172]	; (8003bf8 <HAL_I2S_Init+0x278>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d101      	bne.n	8003b54 <HAL_I2S_Init+0x1d4>
 8003b50:	4b2a      	ldr	r3, [pc, #168]	; (8003bfc <HAL_I2S_Init+0x27c>)
 8003b52:	e001      	b.n	8003b58 <HAL_I2S_Init+0x1d8>
 8003b54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b58:	2202      	movs	r2, #2
 8003b5a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a25      	ldr	r2, [pc, #148]	; (8003bf8 <HAL_I2S_Init+0x278>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d101      	bne.n	8003b6a <HAL_I2S_Init+0x1ea>
 8003b66:	4b25      	ldr	r3, [pc, #148]	; (8003bfc <HAL_I2S_Init+0x27c>)
 8003b68:	e001      	b.n	8003b6e <HAL_I2S_Init+0x1ee>
 8003b6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b7a:	d003      	beq.n	8003b84 <HAL_I2S_Init+0x204>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d103      	bne.n	8003b8c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003b84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	e001      	b.n	8003b90 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	897b      	ldrh	r3, [r7, #10]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003bbc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a0d      	ldr	r2, [pc, #52]	; (8003bf8 <HAL_I2S_Init+0x278>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d101      	bne.n	8003bcc <HAL_I2S_Init+0x24c>
 8003bc8:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <HAL_I2S_Init+0x27c>)
 8003bca:	e001      	b.n	8003bd0 <HAL_I2S_Init+0x250>
 8003bcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bd0:	897a      	ldrh	r2, [r7, #10]
 8003bd2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3720      	adds	r7, #32
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	08003cf7 	.word	0x08003cf7
 8003bf0:	cccccccd 	.word	0xcccccccd
 8003bf4:	08003e0d 	.word	0x08003e0d
 8003bf8:	40003800 	.word	0x40003800
 8003bfc:	40003400 	.word	0x40003400

08003c00 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	881a      	ldrh	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	1c9a      	adds	r2, r3, #2
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10e      	bne.n	8003c90 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c80:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7ff ffb8 	bl	8003c00 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c90:	bf00      	nop
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003caa:	b292      	uxth	r2, r2
 8003cac:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	1c9a      	adds	r2, r3, #2
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10e      	bne.n	8003cee <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cde:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7ff ff93 	bl	8003c14 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cee:	bf00      	nop
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b086      	sub	sp, #24
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d13a      	bne.n	8003d88 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d109      	bne.n	8003d30 <I2S_IRQHandler+0x3a>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d26:	2b40      	cmp	r3, #64	; 0x40
 8003d28:	d102      	bne.n	8003d30 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff ffb4 	bl	8003c98 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d36:	2b40      	cmp	r3, #64	; 0x40
 8003d38:	d126      	bne.n	8003d88 <I2S_IRQHandler+0x92>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f003 0320 	and.w	r3, r3, #32
 8003d44:	2b20      	cmp	r3, #32
 8003d46:	d11f      	bne.n	8003d88 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d56:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d58:	2300      	movs	r3, #0
 8003d5a:	613b      	str	r3, [r7, #16]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7a:	f043 0202 	orr.w	r2, r3, #2
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff ff50 	bl	8003c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d136      	bne.n	8003e02 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d109      	bne.n	8003db2 <I2S_IRQHandler+0xbc>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da8:	2b80      	cmp	r3, #128	; 0x80
 8003daa:	d102      	bne.n	8003db2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff ff45 	bl	8003c3c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d122      	bne.n	8003e02 <I2S_IRQHandler+0x10c>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f003 0320 	and.w	r3, r3, #32
 8003dc6:	2b20      	cmp	r3, #32
 8003dc8:	d11b      	bne.n	8003e02 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dd8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df4:	f043 0204 	orr.w	r2, r3, #4
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff ff13 	bl	8003c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e02:	bf00      	nop
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a92      	ldr	r2, [pc, #584]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d101      	bne.n	8003e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e26:	4b92      	ldr	r3, [pc, #584]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e28:	e001      	b.n	8003e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a8b      	ldr	r2, [pc, #556]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d101      	bne.n	8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e44:	4b8a      	ldr	r3, [pc, #552]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e46:	e001      	b.n	8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e58:	d004      	beq.n	8003e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f040 8099 	bne.w	8003f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d107      	bne.n	8003e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f925 	bl	80040c8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d107      	bne.n	8003e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f9c8 	bl	8004228 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9e:	2b40      	cmp	r3, #64	; 0x40
 8003ea0:	d13a      	bne.n	8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f003 0320 	and.w	r3, r3, #32
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d035      	beq.n	8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a6e      	ldr	r2, [pc, #440]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d101      	bne.n	8003eba <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003eb6:	4b6e      	ldr	r3, [pc, #440]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003eb8:	e001      	b.n	8003ebe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003eba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4969      	ldr	r1, [pc, #420]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ec6:	428b      	cmp	r3, r1
 8003ec8:	d101      	bne.n	8003ece <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003eca:	4b69      	ldr	r3, [pc, #420]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ecc:	e001      	b.n	8003ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003ece:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ed2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ed6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ee6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0a:	f043 0202 	orr.w	r2, r3, #2
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7ff fe88 	bl	8003c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	f040 80c3 	bne.w	80040aa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f003 0320 	and.w	r3, r3, #32
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 80bd 	beq.w	80040aa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f3e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a49      	ldr	r2, [pc, #292]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d101      	bne.n	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f4a:	4b49      	ldr	r3, [pc, #292]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f4c:	e001      	b.n	8003f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4944      	ldr	r1, [pc, #272]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f5a:	428b      	cmp	r3, r1
 8003f5c:	d101      	bne.n	8003f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f5e:	4b44      	ldr	r3, [pc, #272]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f60:	e001      	b.n	8003f66 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f6a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60bb      	str	r3, [r7, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	60bb      	str	r3, [r7, #8]
 8003f78:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f86:	f043 0204 	orr.w	r2, r3, #4
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff fe4a 	bl	8003c28 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f94:	e089      	b.n	80040aa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d107      	bne.n	8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f8be 	bl	800412c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d107      	bne.n	8003fca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f8fd 	bl	80041c4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd0:	2b40      	cmp	r3, #64	; 0x40
 8003fd2:	d12f      	bne.n	8004034 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d02a      	beq.n	8004034 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fec:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a1e      	ldr	r2, [pc, #120]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d101      	bne.n	8003ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003ff8:	4b1d      	ldr	r3, [pc, #116]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ffa:	e001      	b.n	8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003ffc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4919      	ldr	r1, [pc, #100]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004008:	428b      	cmp	r3, r1
 800400a:	d101      	bne.n	8004010 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800400c:	4b18      	ldr	r3, [pc, #96]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800400e:	e001      	b.n	8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004010:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004014:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004018:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	f043 0202 	orr.w	r2, r3, #2
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7ff fdfa 	bl	8003c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b08      	cmp	r3, #8
 800403c:	d136      	bne.n	80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f003 0320 	and.w	r3, r3, #32
 8004044:	2b00      	cmp	r3, #0
 8004046:	d031      	beq.n	80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a07      	ldr	r2, [pc, #28]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d101      	bne.n	8004056 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004052:	4b07      	ldr	r3, [pc, #28]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004054:	e001      	b.n	800405a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004056:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4902      	ldr	r1, [pc, #8]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004062:	428b      	cmp	r3, r1
 8004064:	d106      	bne.n	8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004066:	4b02      	ldr	r3, [pc, #8]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004068:	e006      	b.n	8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800406a:	bf00      	nop
 800406c:	40003800 	.word	0x40003800
 8004070:	40003400 	.word	0x40003400
 8004074:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004078:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800407c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800408c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409a:	f043 0204 	orr.w	r2, r3, #4
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7ff fdc0 	bl	8003c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040a8:	e000      	b.n	80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040aa:	bf00      	nop
}
 80040ac:	bf00      	nop
 80040ae:	3720      	adds	r7, #32
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	1c99      	adds	r1, r3, #2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6251      	str	r1, [r2, #36]	; 0x24
 80040da:	881a      	ldrh	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d113      	bne.n	8004122 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004108:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d106      	bne.n	8004122 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7ff ffc9 	bl	80040b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
	...

0800412c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	1c99      	adds	r1, r3, #2
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6251      	str	r1, [r2, #36]	; 0x24
 800413e:	8819      	ldrh	r1, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a1d      	ldr	r2, [pc, #116]	; (80041bc <I2SEx_TxISR_I2SExt+0x90>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d101      	bne.n	800414e <I2SEx_TxISR_I2SExt+0x22>
 800414a:	4b1d      	ldr	r3, [pc, #116]	; (80041c0 <I2SEx_TxISR_I2SExt+0x94>)
 800414c:	e001      	b.n	8004152 <I2SEx_TxISR_I2SExt+0x26>
 800414e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004152:	460a      	mov	r2, r1
 8004154:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d121      	bne.n	80041b2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a12      	ldr	r2, [pc, #72]	; (80041bc <I2SEx_TxISR_I2SExt+0x90>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d101      	bne.n	800417c <I2SEx_TxISR_I2SExt+0x50>
 8004178:	4b11      	ldr	r3, [pc, #68]	; (80041c0 <I2SEx_TxISR_I2SExt+0x94>)
 800417a:	e001      	b.n	8004180 <I2SEx_TxISR_I2SExt+0x54>
 800417c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	490d      	ldr	r1, [pc, #52]	; (80041bc <I2SEx_TxISR_I2SExt+0x90>)
 8004188:	428b      	cmp	r3, r1
 800418a:	d101      	bne.n	8004190 <I2SEx_TxISR_I2SExt+0x64>
 800418c:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <I2SEx_TxISR_I2SExt+0x94>)
 800418e:	e001      	b.n	8004194 <I2SEx_TxISR_I2SExt+0x68>
 8004190:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004194:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004198:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800419e:	b29b      	uxth	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d106      	bne.n	80041b2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff ff81 	bl	80040b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041b2:	bf00      	nop
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40003800 	.word	0x40003800
 80041c0:	40003400 	.word	0x40003400

080041c4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68d8      	ldr	r0, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d6:	1c99      	adds	r1, r3, #2
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	62d1      	str	r1, [r2, #44]	; 0x2c
 80041dc:	b282      	uxth	r2, r0
 80041de:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	3b01      	subs	r3, #1
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d113      	bne.n	8004220 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004206:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d106      	bne.n	8004220 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7ff ff4a 	bl	80040b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004220:	bf00      	nop
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a20      	ldr	r2, [pc, #128]	; (80042b8 <I2SEx_RxISR_I2SExt+0x90>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d101      	bne.n	800423e <I2SEx_RxISR_I2SExt+0x16>
 800423a:	4b20      	ldr	r3, [pc, #128]	; (80042bc <I2SEx_RxISR_I2SExt+0x94>)
 800423c:	e001      	b.n	8004242 <I2SEx_RxISR_I2SExt+0x1a>
 800423e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004242:	68d8      	ldr	r0, [r3, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004248:	1c99      	adds	r1, r3, #2
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800424e:	b282      	uxth	r2, r0
 8004250:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d121      	bne.n	80042ae <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a12      	ldr	r2, [pc, #72]	; (80042b8 <I2SEx_RxISR_I2SExt+0x90>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d101      	bne.n	8004278 <I2SEx_RxISR_I2SExt+0x50>
 8004274:	4b11      	ldr	r3, [pc, #68]	; (80042bc <I2SEx_RxISR_I2SExt+0x94>)
 8004276:	e001      	b.n	800427c <I2SEx_RxISR_I2SExt+0x54>
 8004278:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	490d      	ldr	r1, [pc, #52]	; (80042b8 <I2SEx_RxISR_I2SExt+0x90>)
 8004284:	428b      	cmp	r3, r1
 8004286:	d101      	bne.n	800428c <I2SEx_RxISR_I2SExt+0x64>
 8004288:	4b0c      	ldr	r3, [pc, #48]	; (80042bc <I2SEx_RxISR_I2SExt+0x94>)
 800428a:	e001      	b.n	8004290 <I2SEx_RxISR_I2SExt+0x68>
 800428c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004290:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004294:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429a:	b29b      	uxth	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d106      	bne.n	80042ae <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff ff03 	bl	80040b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042ae:	bf00      	nop
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40003800 	.word	0x40003800
 80042bc:	40003400 	.word	0x40003400

080042c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e267      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d075      	beq.n	80043ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042de:	4b88      	ldr	r3, [pc, #544]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 030c 	and.w	r3, r3, #12
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d00c      	beq.n	8004304 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ea:	4b85      	ldr	r3, [pc, #532]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d112      	bne.n	800431c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042f6:	4b82      	ldr	r3, [pc, #520]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004302:	d10b      	bne.n	800431c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004304:	4b7e      	ldr	r3, [pc, #504]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d05b      	beq.n	80043c8 <HAL_RCC_OscConfig+0x108>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d157      	bne.n	80043c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e242      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004324:	d106      	bne.n	8004334 <HAL_RCC_OscConfig+0x74>
 8004326:	4b76      	ldr	r3, [pc, #472]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a75      	ldr	r2, [pc, #468]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 800432c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	e01d      	b.n	8004370 <HAL_RCC_OscConfig+0xb0>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800433c:	d10c      	bne.n	8004358 <HAL_RCC_OscConfig+0x98>
 800433e:	4b70      	ldr	r3, [pc, #448]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a6f      	ldr	r2, [pc, #444]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	4b6d      	ldr	r3, [pc, #436]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a6c      	ldr	r2, [pc, #432]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	e00b      	b.n	8004370 <HAL_RCC_OscConfig+0xb0>
 8004358:	4b69      	ldr	r3, [pc, #420]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a68      	ldr	r2, [pc, #416]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 800435e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	4b66      	ldr	r3, [pc, #408]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a65      	ldr	r2, [pc, #404]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 800436a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800436e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d013      	beq.n	80043a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004378:	f7fc fdc2 	bl	8000f00 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004380:	f7fc fdbe 	bl	8000f00 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b64      	cmp	r3, #100	; 0x64
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e207      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004392:	4b5b      	ldr	r3, [pc, #364]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0f0      	beq.n	8004380 <HAL_RCC_OscConfig+0xc0>
 800439e:	e014      	b.n	80043ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a0:	f7fc fdae 	bl	8000f00 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043a8:	f7fc fdaa 	bl	8000f00 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b64      	cmp	r3, #100	; 0x64
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e1f3      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ba:	4b51      	ldr	r3, [pc, #324]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f0      	bne.n	80043a8 <HAL_RCC_OscConfig+0xe8>
 80043c6:	e000      	b.n	80043ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d063      	beq.n	800449e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043d6:	4b4a      	ldr	r3, [pc, #296]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 030c 	and.w	r3, r3, #12
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00b      	beq.n	80043fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043e2:	4b47      	ldr	r3, [pc, #284]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d11c      	bne.n	8004428 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ee:	4b44      	ldr	r3, [pc, #272]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d116      	bne.n	8004428 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fa:	4b41      	ldr	r3, [pc, #260]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <HAL_RCC_OscConfig+0x152>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d001      	beq.n	8004412 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e1c7      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004412:	4b3b      	ldr	r3, [pc, #236]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	4937      	ldr	r1, [pc, #220]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004422:	4313      	orrs	r3, r2
 8004424:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004426:	e03a      	b.n	800449e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d020      	beq.n	8004472 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004430:	4b34      	ldr	r3, [pc, #208]	; (8004504 <HAL_RCC_OscConfig+0x244>)
 8004432:	2201      	movs	r2, #1
 8004434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004436:	f7fc fd63 	bl	8000f00 <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800443e:	f7fc fd5f 	bl	8000f00 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e1a8      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004450:	4b2b      	ldr	r3, [pc, #172]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f0      	beq.n	800443e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800445c:	4b28      	ldr	r3, [pc, #160]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	4925      	ldr	r1, [pc, #148]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 800446c:	4313      	orrs	r3, r2
 800446e:	600b      	str	r3, [r1, #0]
 8004470:	e015      	b.n	800449e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004472:	4b24      	ldr	r3, [pc, #144]	; (8004504 <HAL_RCC_OscConfig+0x244>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fc fd42 	bl	8000f00 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004480:	f7fc fd3e 	bl	8000f00 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e187      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004492:	4b1b      	ldr	r3, [pc, #108]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d036      	beq.n	8004518 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d016      	beq.n	80044e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044b2:	4b15      	ldr	r3, [pc, #84]	; (8004508 <HAL_RCC_OscConfig+0x248>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b8:	f7fc fd22 	bl	8000f00 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044c0:	f7fc fd1e 	bl	8000f00 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e167      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044d2:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 80044d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCC_OscConfig+0x200>
 80044de:	e01b      	b.n	8004518 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e0:	4b09      	ldr	r3, [pc, #36]	; (8004508 <HAL_RCC_OscConfig+0x248>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e6:	f7fc fd0b 	bl	8000f00 <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ec:	e00e      	b.n	800450c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044ee:	f7fc fd07 	bl	8000f00 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d907      	bls.n	800450c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e150      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
 8004500:	40023800 	.word	0x40023800
 8004504:	42470000 	.word	0x42470000
 8004508:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800450c:	4b88      	ldr	r3, [pc, #544]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 800450e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1ea      	bne.n	80044ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 8097 	beq.w	8004654 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004526:	2300      	movs	r3, #0
 8004528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800452a:	4b81      	ldr	r3, [pc, #516]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10f      	bne.n	8004556 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004536:	2300      	movs	r3, #0
 8004538:	60bb      	str	r3, [r7, #8]
 800453a:	4b7d      	ldr	r3, [pc, #500]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	4a7c      	ldr	r2, [pc, #496]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 8004540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004544:	6413      	str	r3, [r2, #64]	; 0x40
 8004546:	4b7a      	ldr	r3, [pc, #488]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454e:	60bb      	str	r3, [r7, #8]
 8004550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004552:	2301      	movs	r3, #1
 8004554:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004556:	4b77      	ldr	r3, [pc, #476]	; (8004734 <HAL_RCC_OscConfig+0x474>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455e:	2b00      	cmp	r3, #0
 8004560:	d118      	bne.n	8004594 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004562:	4b74      	ldr	r3, [pc, #464]	; (8004734 <HAL_RCC_OscConfig+0x474>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a73      	ldr	r2, [pc, #460]	; (8004734 <HAL_RCC_OscConfig+0x474>)
 8004568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800456c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800456e:	f7fc fcc7 	bl	8000f00 <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004576:	f7fc fcc3 	bl	8000f00 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e10c      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004588:	4b6a      	ldr	r3, [pc, #424]	; (8004734 <HAL_RCC_OscConfig+0x474>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0f0      	beq.n	8004576 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d106      	bne.n	80045aa <HAL_RCC_OscConfig+0x2ea>
 800459c:	4b64      	ldr	r3, [pc, #400]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a0:	4a63      	ldr	r2, [pc, #396]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	6713      	str	r3, [r2, #112]	; 0x70
 80045a8:	e01c      	b.n	80045e4 <HAL_RCC_OscConfig+0x324>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2b05      	cmp	r3, #5
 80045b0:	d10c      	bne.n	80045cc <HAL_RCC_OscConfig+0x30c>
 80045b2:	4b5f      	ldr	r3, [pc, #380]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80045b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b6:	4a5e      	ldr	r2, [pc, #376]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80045b8:	f043 0304 	orr.w	r3, r3, #4
 80045bc:	6713      	str	r3, [r2, #112]	; 0x70
 80045be:	4b5c      	ldr	r3, [pc, #368]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80045c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c2:	4a5b      	ldr	r2, [pc, #364]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	6713      	str	r3, [r2, #112]	; 0x70
 80045ca:	e00b      	b.n	80045e4 <HAL_RCC_OscConfig+0x324>
 80045cc:	4b58      	ldr	r3, [pc, #352]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80045ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d0:	4a57      	ldr	r2, [pc, #348]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	6713      	str	r3, [r2, #112]	; 0x70
 80045d8:	4b55      	ldr	r3, [pc, #340]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80045da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045dc:	4a54      	ldr	r2, [pc, #336]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80045de:	f023 0304 	bic.w	r3, r3, #4
 80045e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d015      	beq.n	8004618 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ec:	f7fc fc88 	bl	8000f00 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f2:	e00a      	b.n	800460a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045f4:	f7fc fc84 	bl	8000f00 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004602:	4293      	cmp	r3, r2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e0cb      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800460a:	4b49      	ldr	r3, [pc, #292]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 800460c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0ee      	beq.n	80045f4 <HAL_RCC_OscConfig+0x334>
 8004616:	e014      	b.n	8004642 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004618:	f7fc fc72 	bl	8000f00 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800461e:	e00a      	b.n	8004636 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004620:	f7fc fc6e 	bl	8000f00 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	f241 3288 	movw	r2, #5000	; 0x1388
 800462e:	4293      	cmp	r3, r2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e0b5      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004636:	4b3e      	ldr	r3, [pc, #248]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1ee      	bne.n	8004620 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004642:	7dfb      	ldrb	r3, [r7, #23]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d105      	bne.n	8004654 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004648:	4b39      	ldr	r3, [pc, #228]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 800464a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464c:	4a38      	ldr	r2, [pc, #224]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 800464e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004652:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 80a1 	beq.w	80047a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800465e:	4b34      	ldr	r3, [pc, #208]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 030c 	and.w	r3, r3, #12
 8004666:	2b08      	cmp	r3, #8
 8004668:	d05c      	beq.n	8004724 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d141      	bne.n	80046f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004672:	4b31      	ldr	r3, [pc, #196]	; (8004738 <HAL_RCC_OscConfig+0x478>)
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004678:	f7fc fc42 	bl	8000f00 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004680:	f7fc fc3e 	bl	8000f00 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e087      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004692:	4b27      	ldr	r3, [pc, #156]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69da      	ldr	r2, [r3, #28]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	019b      	lsls	r3, r3, #6
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b4:	085b      	lsrs	r3, r3, #1
 80046b6:	3b01      	subs	r3, #1
 80046b8:	041b      	lsls	r3, r3, #16
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	061b      	lsls	r3, r3, #24
 80046c2:	491b      	ldr	r1, [pc, #108]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c8:	4b1b      	ldr	r3, [pc, #108]	; (8004738 <HAL_RCC_OscConfig+0x478>)
 80046ca:	2201      	movs	r2, #1
 80046cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ce:	f7fc fc17 	bl	8000f00 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d6:	f7fc fc13 	bl	8000f00 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e05c      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e8:	4b11      	ldr	r3, [pc, #68]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0f0      	beq.n	80046d6 <HAL_RCC_OscConfig+0x416>
 80046f4:	e054      	b.n	80047a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f6:	4b10      	ldr	r3, [pc, #64]	; (8004738 <HAL_RCC_OscConfig+0x478>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fc:	f7fc fc00 	bl	8000f00 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004704:	f7fc fbfc 	bl	8000f00 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e045      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004716:	4b06      	ldr	r3, [pc, #24]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0x444>
 8004722:	e03d      	b.n	80047a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d107      	bne.n	800473c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e038      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
 8004730:	40023800 	.word	0x40023800
 8004734:	40007000 	.word	0x40007000
 8004738:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800473c:	4b1b      	ldr	r3, [pc, #108]	; (80047ac <HAL_RCC_OscConfig+0x4ec>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d028      	beq.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004754:	429a      	cmp	r2, r3
 8004756:	d121      	bne.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004762:	429a      	cmp	r2, r3
 8004764:	d11a      	bne.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800476c:	4013      	ands	r3, r2
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004772:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004774:	4293      	cmp	r3, r2
 8004776:	d111      	bne.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004782:	085b      	lsrs	r3, r3, #1
 8004784:	3b01      	subs	r3, #1
 8004786:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004788:	429a      	cmp	r2, r3
 800478a:	d107      	bne.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004798:	429a      	cmp	r2, r3
 800479a:	d001      	beq.n	80047a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e000      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40023800 	.word	0x40023800

080047b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e0cc      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047c4:	4b68      	ldr	r3, [pc, #416]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d90c      	bls.n	80047ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d2:	4b65      	ldr	r3, [pc, #404]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047da:	4b63      	ldr	r3, [pc, #396]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d001      	beq.n	80047ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e0b8      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d020      	beq.n	800483a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004804:	4b59      	ldr	r3, [pc, #356]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4a58      	ldr	r2, [pc, #352]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800480e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800481c:	4b53      	ldr	r3, [pc, #332]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	4a52      	ldr	r2, [pc, #328]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004822:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004828:	4b50      	ldr	r3, [pc, #320]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	494d      	ldr	r1, [pc, #308]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	4313      	orrs	r3, r2
 8004838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d044      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d107      	bne.n	800485e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484e:	4b47      	ldr	r3, [pc, #284]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d119      	bne.n	800488e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e07f      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b02      	cmp	r3, #2
 8004864:	d003      	beq.n	800486e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800486a:	2b03      	cmp	r3, #3
 800486c:	d107      	bne.n	800487e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800486e:	4b3f      	ldr	r3, [pc, #252]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d109      	bne.n	800488e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e06f      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487e:	4b3b      	ldr	r3, [pc, #236]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e067      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800488e:	4b37      	ldr	r3, [pc, #220]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f023 0203 	bic.w	r2, r3, #3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	4934      	ldr	r1, [pc, #208]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800489c:	4313      	orrs	r3, r2
 800489e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048a0:	f7fc fb2e 	bl	8000f00 <HAL_GetTick>
 80048a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a6:	e00a      	b.n	80048be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a8:	f7fc fb2a 	bl	8000f00 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e04f      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048be:	4b2b      	ldr	r3, [pc, #172]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 020c 	and.w	r2, r3, #12
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d1eb      	bne.n	80048a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048d0:	4b25      	ldr	r3, [pc, #148]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d20c      	bcs.n	80048f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048de:	4b22      	ldr	r3, [pc, #136]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e6:	4b20      	ldr	r3, [pc, #128]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d001      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e032      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	d008      	beq.n	8004916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004904:	4b19      	ldr	r3, [pc, #100]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	4916      	ldr	r1, [pc, #88]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	4313      	orrs	r3, r2
 8004914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d009      	beq.n	8004936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004922:	4b12      	ldr	r3, [pc, #72]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	490e      	ldr	r1, [pc, #56]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	4313      	orrs	r3, r2
 8004934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004936:	f000 f821 	bl	800497c <HAL_RCC_GetSysClockFreq>
 800493a:	4602      	mov	r2, r0
 800493c:	4b0b      	ldr	r3, [pc, #44]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	091b      	lsrs	r3, r3, #4
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	490a      	ldr	r1, [pc, #40]	; (8004970 <HAL_RCC_ClockConfig+0x1c0>)
 8004948:	5ccb      	ldrb	r3, [r1, r3]
 800494a:	fa22 f303 	lsr.w	r3, r2, r3
 800494e:	4a09      	ldr	r2, [pc, #36]	; (8004974 <HAL_RCC_ClockConfig+0x1c4>)
 8004950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004952:	4b09      	ldr	r3, [pc, #36]	; (8004978 <HAL_RCC_ClockConfig+0x1c8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f7fc f984 	bl	8000c64 <HAL_InitTick>

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	40023c00 	.word	0x40023c00
 800496c:	40023800 	.word	0x40023800
 8004970:	0800c6c4 	.word	0x0800c6c4
 8004974:	20000000 	.word	0x20000000
 8004978:	20000004 	.word	0x20000004

0800497c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800497c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004980:	b094      	sub	sp, #80	; 0x50
 8004982:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	647b      	str	r3, [r7, #68]	; 0x44
 8004988:	2300      	movs	r3, #0
 800498a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800498c:	2300      	movs	r3, #0
 800498e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004994:	4b79      	ldr	r3, [pc, #484]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f003 030c 	and.w	r3, r3, #12
 800499c:	2b08      	cmp	r3, #8
 800499e:	d00d      	beq.n	80049bc <HAL_RCC_GetSysClockFreq+0x40>
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	f200 80e1 	bhi.w	8004b68 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <HAL_RCC_GetSysClockFreq+0x34>
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d003      	beq.n	80049b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80049ae:	e0db      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049b0:	4b73      	ldr	r3, [pc, #460]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x204>)
 80049b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80049b4:	e0db      	b.n	8004b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049b6:	4b73      	ldr	r3, [pc, #460]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x208>)
 80049b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049ba:	e0d8      	b.n	8004b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049bc:	4b6f      	ldr	r3, [pc, #444]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049c6:	4b6d      	ldr	r3, [pc, #436]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d063      	beq.n	8004a9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049d2:	4b6a      	ldr	r3, [pc, #424]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	099b      	lsrs	r3, r3, #6
 80049d8:	2200      	movs	r2, #0
 80049da:	63bb      	str	r3, [r7, #56]	; 0x38
 80049dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80049de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e4:	633b      	str	r3, [r7, #48]	; 0x30
 80049e6:	2300      	movs	r3, #0
 80049e8:	637b      	str	r3, [r7, #52]	; 0x34
 80049ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80049ee:	4622      	mov	r2, r4
 80049f0:	462b      	mov	r3, r5
 80049f2:	f04f 0000 	mov.w	r0, #0
 80049f6:	f04f 0100 	mov.w	r1, #0
 80049fa:	0159      	lsls	r1, r3, #5
 80049fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a00:	0150      	lsls	r0, r2, #5
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4621      	mov	r1, r4
 8004a08:	1a51      	subs	r1, r2, r1
 8004a0a:	6139      	str	r1, [r7, #16]
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a20:	4659      	mov	r1, fp
 8004a22:	018b      	lsls	r3, r1, #6
 8004a24:	4651      	mov	r1, sl
 8004a26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a2a:	4651      	mov	r1, sl
 8004a2c:	018a      	lsls	r2, r1, #6
 8004a2e:	4651      	mov	r1, sl
 8004a30:	ebb2 0801 	subs.w	r8, r2, r1
 8004a34:	4659      	mov	r1, fp
 8004a36:	eb63 0901 	sbc.w	r9, r3, r1
 8004a3a:	f04f 0200 	mov.w	r2, #0
 8004a3e:	f04f 0300 	mov.w	r3, #0
 8004a42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a4e:	4690      	mov	r8, r2
 8004a50:	4699      	mov	r9, r3
 8004a52:	4623      	mov	r3, r4
 8004a54:	eb18 0303 	adds.w	r3, r8, r3
 8004a58:	60bb      	str	r3, [r7, #8]
 8004a5a:	462b      	mov	r3, r5
 8004a5c:	eb49 0303 	adc.w	r3, r9, r3
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a6e:	4629      	mov	r1, r5
 8004a70:	024b      	lsls	r3, r1, #9
 8004a72:	4621      	mov	r1, r4
 8004a74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a78:	4621      	mov	r1, r4
 8004a7a:	024a      	lsls	r2, r1, #9
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	4619      	mov	r1, r3
 8004a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a82:	2200      	movs	r2, #0
 8004a84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a8c:	f7fb fba0 	bl	80001d0 <__aeabi_uldivmod>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4613      	mov	r3, r2
 8004a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a98:	e058      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a9a:	4b38      	ldr	r3, [pc, #224]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	099b      	lsrs	r3, r3, #6
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	4611      	mov	r1, r2
 8004aa6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004aaa:	623b      	str	r3, [r7, #32]
 8004aac:	2300      	movs	r3, #0
 8004aae:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ab4:	4642      	mov	r2, r8
 8004ab6:	464b      	mov	r3, r9
 8004ab8:	f04f 0000 	mov.w	r0, #0
 8004abc:	f04f 0100 	mov.w	r1, #0
 8004ac0:	0159      	lsls	r1, r3, #5
 8004ac2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ac6:	0150      	lsls	r0, r2, #5
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4641      	mov	r1, r8
 8004ace:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ae4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ae8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004aec:	ebb2 040a 	subs.w	r4, r2, sl
 8004af0:	eb63 050b 	sbc.w	r5, r3, fp
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	f04f 0300 	mov.w	r3, #0
 8004afc:	00eb      	lsls	r3, r5, #3
 8004afe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b02:	00e2      	lsls	r2, r4, #3
 8004b04:	4614      	mov	r4, r2
 8004b06:	461d      	mov	r5, r3
 8004b08:	4643      	mov	r3, r8
 8004b0a:	18e3      	adds	r3, r4, r3
 8004b0c:	603b      	str	r3, [r7, #0]
 8004b0e:	464b      	mov	r3, r9
 8004b10:	eb45 0303 	adc.w	r3, r5, r3
 8004b14:	607b      	str	r3, [r7, #4]
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b22:	4629      	mov	r1, r5
 8004b24:	028b      	lsls	r3, r1, #10
 8004b26:	4621      	mov	r1, r4
 8004b28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	028a      	lsls	r2, r1, #10
 8004b30:	4610      	mov	r0, r2
 8004b32:	4619      	mov	r1, r3
 8004b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b36:	2200      	movs	r2, #0
 8004b38:	61bb      	str	r3, [r7, #24]
 8004b3a:	61fa      	str	r2, [r7, #28]
 8004b3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b40:	f7fb fb46 	bl	80001d0 <__aeabi_uldivmod>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4613      	mov	r3, r2
 8004b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b4c:	4b0b      	ldr	r3, [pc, #44]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	0c1b      	lsrs	r3, r3, #16
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	3301      	adds	r3, #1
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004b5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b66:	e002      	b.n	8004b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b68:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3750      	adds	r7, #80	; 0x50
 8004b74:	46bd      	mov	sp, r7
 8004b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	00f42400 	.word	0x00f42400
 8004b84:	007a1200 	.word	0x007a1200

08004b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b8c:	4b03      	ldr	r3, [pc, #12]	; (8004b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	20000000 	.word	0x20000000

08004ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ba4:	f7ff fff0 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	4b05      	ldr	r3, [pc, #20]	; (8004bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	0a9b      	lsrs	r3, r3, #10
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	4903      	ldr	r1, [pc, #12]	; (8004bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bb6:	5ccb      	ldrb	r3, [r1, r3]
 8004bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	0800c6d4 	.word	0x0800c6d4

08004bc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	220f      	movs	r2, #15
 8004bd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004bd8:	4b12      	ldr	r3, [pc, #72]	; (8004c24 <HAL_RCC_GetClockConfig+0x5c>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 0203 	and.w	r2, r3, #3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004be4:	4b0f      	ldr	r3, [pc, #60]	; (8004c24 <HAL_RCC_GetClockConfig+0x5c>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004bf0:	4b0c      	ldr	r3, [pc, #48]	; (8004c24 <HAL_RCC_GetClockConfig+0x5c>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004bfc:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <HAL_RCC_GetClockConfig+0x5c>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	08db      	lsrs	r3, r3, #3
 8004c02:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c0a:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <HAL_RCC_GetClockConfig+0x60>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0207 	and.w	r2, r3, #7
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	601a      	str	r2, [r3, #0]
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	40023800 	.word	0x40023800
 8004c28:	40023c00 	.word	0x40023c00

08004c2c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d105      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d035      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c54:	4b62      	ldr	r3, [pc, #392]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c5a:	f7fc f951 	bl	8000f00 <HAL_GetTick>
 8004c5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c60:	e008      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c62:	f7fc f94d 	bl	8000f00 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e0b0      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c74:	4b5b      	ldr	r3, [pc, #364]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1f0      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	019a      	lsls	r2, r3, #6
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	071b      	lsls	r3, r3, #28
 8004c8c:	4955      	ldr	r1, [pc, #340]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c94:	4b52      	ldr	r3, [pc, #328]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c96:	2201      	movs	r2, #1
 8004c98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c9a:	f7fc f931 	bl	8000f00 <HAL_GetTick>
 8004c9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ca2:	f7fc f92d 	bl	8000f00 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e090      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cb4:	4b4b      	ldr	r3, [pc, #300]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0f0      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 8083 	beq.w	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	4b44      	ldr	r3, [pc, #272]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	4a43      	ldr	r2, [pc, #268]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8004cde:	4b41      	ldr	r3, [pc, #260]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cea:	4b3f      	ldr	r3, [pc, #252]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a3e      	ldr	r2, [pc, #248]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cf6:	f7fc f903 	bl	8000f00 <HAL_GetTick>
 8004cfa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cfc:	e008      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004cfe:	f7fc f8ff 	bl	8000f00 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e062      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d10:	4b35      	ldr	r3, [pc, #212]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0f0      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d1c:	4b31      	ldr	r3, [pc, #196]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d24:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d02f      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d028      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d3a:	4b2a      	ldr	r3, [pc, #168]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d42:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d44:	4b29      	ldr	r3, [pc, #164]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d46:	2201      	movs	r2, #1
 8004d48:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d4a:	4b28      	ldr	r3, [pc, #160]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d50:	4a24      	ldr	r2, [pc, #144]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d56:	4b23      	ldr	r3, [pc, #140]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d114      	bne.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d62:	f7fc f8cd 	bl	8000f00 <HAL_GetTick>
 8004d66:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d68:	e00a      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d6a:	f7fc f8c9 	bl	8000f00 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e02a      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d80:	4b18      	ldr	r3, [pc, #96]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0ee      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d98:	d10d      	bne.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d9a:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dae:	490d      	ldr	r1, [pc, #52]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	608b      	str	r3, [r1, #8]
 8004db4:	e005      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004db6:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	4a0a      	ldr	r2, [pc, #40]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dbc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004dc0:	6093      	str	r3, [r2, #8]
 8004dc2:	4b08      	ldr	r3, [pc, #32]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dce:	4905      	ldr	r1, [pc, #20]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3718      	adds	r7, #24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	42470068 	.word	0x42470068
 8004de4:	40023800 	.word	0x40023800
 8004de8:	40007000 	.word	0x40007000
 8004dec:	42470e40 	.word	0x42470e40

08004df0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d13f      	bne.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e0e:	4b24      	ldr	r3, [pc, #144]	; (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d006      	beq.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e24:	d12f      	bne.n	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e26:	4b1f      	ldr	r3, [pc, #124]	; (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e28:	617b      	str	r3, [r7, #20]
          break;
 8004e2a:	e02f      	b.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e2c:	4b1c      	ldr	r3, [pc, #112]	; (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e38:	d108      	bne.n	8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e3a:	4b19      	ldr	r3, [pc, #100]	; (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e42:	4a19      	ldr	r2, [pc, #100]	; (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e48:	613b      	str	r3, [r7, #16]
 8004e4a:	e007      	b.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e4c:	4b14      	ldr	r3, [pc, #80]	; (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e54:	4a15      	ldr	r2, [pc, #84]	; (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e5c:	4b10      	ldr	r3, [pc, #64]	; (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e62:	099b      	lsrs	r3, r3, #6
 8004e64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	fb02 f303 	mul.w	r3, r2, r3
 8004e6e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e70:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e76:	0f1b      	lsrs	r3, r3, #28
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e82:	617b      	str	r3, [r7, #20]
          break;
 8004e84:	e002      	b.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004e86:	2300      	movs	r3, #0
 8004e88:	617b      	str	r3, [r7, #20]
          break;
 8004e8a:	bf00      	nop
        }
      }
      break;
 8004e8c:	e000      	b.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8004e8e:	bf00      	nop
    }
  }
  return frequency;
 8004e90:	697b      	ldr	r3, [r7, #20]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	371c      	adds	r7, #28
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	00bb8000 	.word	0x00bb8000
 8004ea8:	007a1200 	.word	0x007a1200
 8004eac:	00f42400 	.word	0x00f42400

08004eb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e07b      	b.n	8004fba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d108      	bne.n	8004edc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ed2:	d009      	beq.n	8004ee8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	61da      	str	r2, [r3, #28]
 8004eda:	e005      	b.n	8004ee8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d106      	bne.n	8004f08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7fb fe44 	bl	8000b90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f30:	431a      	orrs	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	431a      	orrs	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f62:	431a      	orrs	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6c:	ea42 0103 	orr.w	r1, r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	0c1b      	lsrs	r3, r3, #16
 8004f86:	f003 0104 	and.w	r1, r3, #4
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	f003 0210 	and.w	r2, r3, #16
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	69da      	ldr	r2, [r3, #28]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fa8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b082      	sub	sp, #8
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e041      	b.n	8005058 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d106      	bne.n	8004fee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7fb fe19 	bl	8000c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	4619      	mov	r1, r3
 8005000:	4610      	mov	r0, r2
 8005002:	f000 f9b5 	bl	8005370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b01      	cmp	r3, #1
 8005072:	d001      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e04e      	b.n	8005116 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68da      	ldr	r2, [r3, #12]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0201 	orr.w	r2, r2, #1
 800508e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a23      	ldr	r2, [pc, #140]	; (8005124 <HAL_TIM_Base_Start_IT+0xc4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d022      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x80>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a2:	d01d      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x80>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a1f      	ldr	r2, [pc, #124]	; (8005128 <HAL_TIM_Base_Start_IT+0xc8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d018      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x80>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a1e      	ldr	r2, [pc, #120]	; (800512c <HAL_TIM_Base_Start_IT+0xcc>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d013      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x80>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a1c      	ldr	r2, [pc, #112]	; (8005130 <HAL_TIM_Base_Start_IT+0xd0>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d00e      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x80>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a1b      	ldr	r2, [pc, #108]	; (8005134 <HAL_TIM_Base_Start_IT+0xd4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d009      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x80>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a19      	ldr	r2, [pc, #100]	; (8005138 <HAL_TIM_Base_Start_IT+0xd8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d004      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x80>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a18      	ldr	r2, [pc, #96]	; (800513c <HAL_TIM_Base_Start_IT+0xdc>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d111      	bne.n	8005104 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2b06      	cmp	r3, #6
 80050f0:	d010      	beq.n	8005114 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f042 0201 	orr.w	r2, r2, #1
 8005100:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005102:	e007      	b.n	8005114 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f042 0201 	orr.w	r2, r2, #1
 8005112:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	40010000 	.word	0x40010000
 8005128:	40000400 	.word	0x40000400
 800512c:	40000800 	.word	0x40000800
 8005130:	40000c00 	.word	0x40000c00
 8005134:	40010400 	.word	0x40010400
 8005138:	40014000 	.word	0x40014000
 800513c:	40001800 	.word	0x40001800

08005140 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d020      	beq.n	80051a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d01b      	beq.n	80051a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f06f 0202 	mvn.w	r2, #2
 8005174:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f8d2 	bl	8005334 <HAL_TIM_IC_CaptureCallback>
 8005190:	e005      	b.n	800519e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f8c4 	bl	8005320 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f8d5 	bl	8005348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	f003 0304 	and.w	r3, r3, #4
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d020      	beq.n	80051f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01b      	beq.n	80051f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f06f 0204 	mvn.w	r2, #4
 80051c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2202      	movs	r2, #2
 80051c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f8ac 	bl	8005334 <HAL_TIM_IC_CaptureCallback>
 80051dc:	e005      	b.n	80051ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f89e 	bl	8005320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f8af 	bl	8005348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d020      	beq.n	800523c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01b      	beq.n	800523c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f06f 0208 	mvn.w	r2, #8
 800520c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2204      	movs	r2, #4
 8005212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f886 	bl	8005334 <HAL_TIM_IC_CaptureCallback>
 8005228:	e005      	b.n	8005236 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f878 	bl	8005320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f889 	bl	8005348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f003 0310 	and.w	r3, r3, #16
 8005242:	2b00      	cmp	r3, #0
 8005244:	d020      	beq.n	8005288 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f003 0310 	and.w	r3, r3, #16
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01b      	beq.n	8005288 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0210 	mvn.w	r2, #16
 8005258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2208      	movs	r2, #8
 800525e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f860 	bl	8005334 <HAL_TIM_IC_CaptureCallback>
 8005274:	e005      	b.n	8005282 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f852 	bl	8005320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f863 	bl	8005348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00c      	beq.n	80052ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b00      	cmp	r3, #0
 800529a:	d007      	beq.n	80052ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0201 	mvn.w	r2, #1
 80052a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7fb fb66 	bl	8000978 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00c      	beq.n	80052d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f906 	bl	80054dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00c      	beq.n	80052f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d007      	beq.n	80052f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f834 	bl	800535c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f003 0320 	and.w	r3, r3, #32
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00c      	beq.n	8005318 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f003 0320 	and.w	r3, r3, #32
 8005304:	2b00      	cmp	r3, #0
 8005306:	d007      	beq.n	8005318 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f06f 0220 	mvn.w	r2, #32
 8005310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f8d8 	bl	80054c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005318:	bf00      	nop
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a46      	ldr	r2, [pc, #280]	; (800549c <TIM_Base_SetConfig+0x12c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d013      	beq.n	80053b0 <TIM_Base_SetConfig+0x40>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538e:	d00f      	beq.n	80053b0 <TIM_Base_SetConfig+0x40>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a43      	ldr	r2, [pc, #268]	; (80054a0 <TIM_Base_SetConfig+0x130>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d00b      	beq.n	80053b0 <TIM_Base_SetConfig+0x40>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a42      	ldr	r2, [pc, #264]	; (80054a4 <TIM_Base_SetConfig+0x134>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d007      	beq.n	80053b0 <TIM_Base_SetConfig+0x40>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a41      	ldr	r2, [pc, #260]	; (80054a8 <TIM_Base_SetConfig+0x138>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d003      	beq.n	80053b0 <TIM_Base_SetConfig+0x40>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a40      	ldr	r2, [pc, #256]	; (80054ac <TIM_Base_SetConfig+0x13c>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d108      	bne.n	80053c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a35      	ldr	r2, [pc, #212]	; (800549c <TIM_Base_SetConfig+0x12c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d02b      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d0:	d027      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a32      	ldr	r2, [pc, #200]	; (80054a0 <TIM_Base_SetConfig+0x130>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d023      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a31      	ldr	r2, [pc, #196]	; (80054a4 <TIM_Base_SetConfig+0x134>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d01f      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a30      	ldr	r2, [pc, #192]	; (80054a8 <TIM_Base_SetConfig+0x138>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d01b      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a2f      	ldr	r2, [pc, #188]	; (80054ac <TIM_Base_SetConfig+0x13c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d017      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a2e      	ldr	r2, [pc, #184]	; (80054b0 <TIM_Base_SetConfig+0x140>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d013      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a2d      	ldr	r2, [pc, #180]	; (80054b4 <TIM_Base_SetConfig+0x144>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00f      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a2c      	ldr	r2, [pc, #176]	; (80054b8 <TIM_Base_SetConfig+0x148>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d00b      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a2b      	ldr	r2, [pc, #172]	; (80054bc <TIM_Base_SetConfig+0x14c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d007      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a2a      	ldr	r2, [pc, #168]	; (80054c0 <TIM_Base_SetConfig+0x150>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d003      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a29      	ldr	r2, [pc, #164]	; (80054c4 <TIM_Base_SetConfig+0x154>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d108      	bne.n	8005434 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	4313      	orrs	r3, r2
 8005432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a10      	ldr	r2, [pc, #64]	; (800549c <TIM_Base_SetConfig+0x12c>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d003      	beq.n	8005468 <TIM_Base_SetConfig+0xf8>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a12      	ldr	r2, [pc, #72]	; (80054ac <TIM_Base_SetConfig+0x13c>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d103      	bne.n	8005470 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	691a      	ldr	r2, [r3, #16]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b01      	cmp	r3, #1
 8005480:	d105      	bne.n	800548e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f023 0201 	bic.w	r2, r3, #1
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	611a      	str	r2, [r3, #16]
  }
}
 800548e:	bf00      	nop
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	40010000 	.word	0x40010000
 80054a0:	40000400 	.word	0x40000400
 80054a4:	40000800 	.word	0x40000800
 80054a8:	40000c00 	.word	0x40000c00
 80054ac:	40010400 	.word	0x40010400
 80054b0:	40014000 	.word	0x40014000
 80054b4:	40014400 	.word	0x40014400
 80054b8:	40014800 	.word	0x40014800
 80054bc:	40001800 	.word	0x40001800
 80054c0:	40001c00 	.word	0x40001c00
 80054c4:	40002000 	.word	0x40002000

080054c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054f0:	b084      	sub	sp, #16
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b084      	sub	sp, #16
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	f107 001c 	add.w	r0, r7, #28
 80054fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005502:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005506:	2b01      	cmp	r3, #1
 8005508:	d123      	bne.n	8005552 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800551e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005532:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005536:	2b01      	cmp	r3, #1
 8005538:	d105      	bne.n	8005546 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f9dc 	bl	8005904 <USB_CoreReset>
 800554c:	4603      	mov	r3, r0
 800554e:	73fb      	strb	r3, [r7, #15]
 8005550:	e01b      	b.n	800558a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f9d0 	bl	8005904 <USB_CoreReset>
 8005564:	4603      	mov	r3, r0
 8005566:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005568:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800556c:	2b00      	cmp	r3, #0
 800556e:	d106      	bne.n	800557e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005574:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	639a      	str	r2, [r3, #56]	; 0x38
 800557c:	e005      	b.n	800558a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005582:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800558a:	7fbb      	ldrb	r3, [r7, #30]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d10b      	bne.n	80055a8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f043 0206 	orr.w	r2, r3, #6
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f043 0220 	orr.w	r2, r3, #32
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055b4:	b004      	add	sp, #16
 80055b6:	4770      	bx	lr

080055b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f043 0201 	orr.w	r2, r3, #1
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055da:	b480      	push	{r7}
 80055dc:	b083      	sub	sp, #12
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f023 0201 	bic.w	r2, r3, #1
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	460b      	mov	r3, r1
 8005606:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005618:	78fb      	ldrb	r3, [r7, #3]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d115      	bne.n	800564a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800562a:	200a      	movs	r0, #10
 800562c:	f7fb fc74 	bl	8000f18 <HAL_Delay>
      ms += 10U;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	330a      	adds	r3, #10
 8005634:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f956 	bl	80058e8 <USB_GetMode>
 800563c:	4603      	mov	r3, r0
 800563e:	2b01      	cmp	r3, #1
 8005640:	d01e      	beq.n	8005680 <USB_SetCurrentMode+0x84>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2bc7      	cmp	r3, #199	; 0xc7
 8005646:	d9f0      	bls.n	800562a <USB_SetCurrentMode+0x2e>
 8005648:	e01a      	b.n	8005680 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800564a:	78fb      	ldrb	r3, [r7, #3]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d115      	bne.n	800567c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800565c:	200a      	movs	r0, #10
 800565e:	f7fb fc5b 	bl	8000f18 <HAL_Delay>
      ms += 10U;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	330a      	adds	r3, #10
 8005666:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f93d 	bl	80058e8 <USB_GetMode>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d005      	beq.n	8005680 <USB_SetCurrentMode+0x84>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2bc7      	cmp	r3, #199	; 0xc7
 8005678:	d9f0      	bls.n	800565c <USB_SetCurrentMode+0x60>
 800567a:	e001      	b.n	8005680 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e005      	b.n	800568c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2bc8      	cmp	r3, #200	; 0xc8
 8005684:	d101      	bne.n	800568a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e000      	b.n	800568c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	3301      	adds	r3, #1
 80056a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80056ae:	d901      	bls.n	80056b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e01b      	b.n	80056ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	daf2      	bge.n	80056a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80056bc:	2300      	movs	r3, #0
 80056be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	019b      	lsls	r3, r3, #6
 80056c4:	f043 0220 	orr.w	r2, r3, #32
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	3301      	adds	r3, #1
 80056d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80056d8:	d901      	bls.n	80056de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e006      	b.n	80056ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f003 0320 	and.w	r3, r3, #32
 80056e6:	2b20      	cmp	r3, #32
 80056e8:	d0f0      	beq.n	80056cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3301      	adds	r3, #1
 8005708:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005710:	d901      	bls.n	8005716 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e018      	b.n	8005748 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	2b00      	cmp	r3, #0
 800571c:	daf2      	bge.n	8005704 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2210      	movs	r2, #16
 8005726:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	3301      	adds	r3, #1
 800572c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005734:	d901      	bls.n	800573a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e006      	b.n	8005748 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	f003 0310 	and.w	r3, r3, #16
 8005742:	2b10      	cmp	r3, #16
 8005744:	d0f0      	beq.n	8005728 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005754:	b480      	push	{r7}
 8005756:	b089      	sub	sp, #36	; 0x24
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	4611      	mov	r1, r2
 8005760:	461a      	mov	r2, r3
 8005762:	460b      	mov	r3, r1
 8005764:	71fb      	strb	r3, [r7, #7]
 8005766:	4613      	mov	r3, r2
 8005768:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005772:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005776:	2b00      	cmp	r3, #0
 8005778:	d123      	bne.n	80057c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800577a:	88bb      	ldrh	r3, [r7, #4]
 800577c:	3303      	adds	r3, #3
 800577e:	089b      	lsrs	r3, r3, #2
 8005780:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005782:	2300      	movs	r3, #0
 8005784:	61bb      	str	r3, [r7, #24]
 8005786:	e018      	b.n	80057ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005788:	79fb      	ldrb	r3, [r7, #7]
 800578a:	031a      	lsls	r2, r3, #12
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	4413      	add	r3, r2
 8005790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005794:	461a      	mov	r2, r3
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	3301      	adds	r3, #1
 80057a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	3301      	adds	r3, #1
 80057a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	3301      	adds	r3, #1
 80057ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	3301      	adds	r3, #1
 80057b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	3301      	adds	r3, #1
 80057b8:	61bb      	str	r3, [r7, #24]
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d3e2      	bcc.n	8005788 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3724      	adds	r7, #36	; 0x24
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b08b      	sub	sp, #44	; 0x2c
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	4613      	mov	r3, r2
 80057dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80057e6:	88fb      	ldrh	r3, [r7, #6]
 80057e8:	089b      	lsrs	r3, r3, #2
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80057ee:	88fb      	ldrh	r3, [r7, #6]
 80057f0:	f003 0303 	and.w	r3, r3, #3
 80057f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80057f6:	2300      	movs	r3, #0
 80057f8:	623b      	str	r3, [r7, #32]
 80057fa:	e014      	b.n	8005826 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	601a      	str	r2, [r3, #0]
    pDest++;
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	3301      	adds	r3, #1
 800580c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	3301      	adds	r3, #1
 8005812:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	3301      	adds	r3, #1
 8005818:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	3301      	adds	r3, #1
 800581e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005820:	6a3b      	ldr	r3, [r7, #32]
 8005822:	3301      	adds	r3, #1
 8005824:	623b      	str	r3, [r7, #32]
 8005826:	6a3a      	ldr	r2, [r7, #32]
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	429a      	cmp	r2, r3
 800582c:	d3e6      	bcc.n	80057fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800582e:	8bfb      	ldrh	r3, [r7, #30]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d01e      	beq.n	8005872 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005834:	2300      	movs	r3, #0
 8005836:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800583e:	461a      	mov	r2, r3
 8005840:	f107 0310 	add.w	r3, r7, #16
 8005844:	6812      	ldr	r2, [r2, #0]
 8005846:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	b2db      	uxtb	r3, r3
 800584e:	00db      	lsls	r3, r3, #3
 8005850:	fa22 f303 	lsr.w	r3, r2, r3
 8005854:	b2da      	uxtb	r2, r3
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	701a      	strb	r2, [r3, #0]
      i++;
 800585a:	6a3b      	ldr	r3, [r7, #32]
 800585c:	3301      	adds	r3, #1
 800585e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	3301      	adds	r3, #1
 8005864:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005866:	8bfb      	ldrh	r3, [r7, #30]
 8005868:	3b01      	subs	r3, #1
 800586a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800586c:	8bfb      	ldrh	r3, [r7, #30]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1ea      	bne.n	8005848 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005874:	4618      	mov	r0, r3
 8005876:	372c      	adds	r7, #44	; 0x2c
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	4013      	ands	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005898:	68fb      	ldr	r3, [r7, #12]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b085      	sub	sp, #20
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	460b      	mov	r3, r1
 80058b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80058b6:	78fb      	ldrb	r3, [r7, #3]
 80058b8:	015a      	lsls	r2, r3, #5
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4413      	add	r3, r2
 80058be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80058c6:	78fb      	ldrb	r3, [r7, #3]
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	4013      	ands	r3, r2
 80058d8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80058da:	68bb      	ldr	r3, [r7, #8]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	f003 0301 	and.w	r3, r3, #1
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800590c:	2300      	movs	r3, #0
 800590e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	3301      	adds	r3, #1
 8005914:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800591c:	d901      	bls.n	8005922 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e01b      	b.n	800595a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	2b00      	cmp	r3, #0
 8005928:	daf2      	bge.n	8005910 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800592a:	2300      	movs	r3, #0
 800592c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f043 0201 	orr.w	r2, r3, #1
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	3301      	adds	r3, #1
 800593e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005946:	d901      	bls.n	800594c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e006      	b.n	800595a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b01      	cmp	r3, #1
 8005956:	d0f0      	beq.n	800593a <USB_CoreReset+0x36>

  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
	...

08005968 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005968:	b084      	sub	sp, #16
 800596a:	b580      	push	{r7, lr}
 800596c:	b086      	sub	sp, #24
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005976:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800597a:	2300      	movs	r3, #0
 800597c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005988:	461a      	mov	r2, r3
 800598a:	2300      	movs	r3, #0
 800598c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005992:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059aa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d119      	bne.n	80059f2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80059be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d10a      	bne.n	80059dc <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059d4:	f043 0304 	orr.w	r3, r3, #4
 80059d8:	6013      	str	r3, [r2, #0]
 80059da:	e014      	b.n	8005a06 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059ea:	f023 0304 	bic.w	r3, r3, #4
 80059ee:	6013      	str	r3, [r2, #0]
 80059f0:	e009      	b.n	8005a06 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a00:	f023 0304 	bic.w	r3, r3, #4
 8005a04:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a06:	2110      	movs	r1, #16
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7ff fe43 	bl	8005694 <USB_FlushTxFifo>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7ff fe6d 	bl	80056f8 <USB_FlushRxFifo>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005a28:	2300      	movs	r3, #0
 8005a2a:	613b      	str	r3, [r7, #16]
 8005a2c:	e015      	b.n	8005a5a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a40:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a4e:	461a      	mov	r2, r3
 8005a50:	2300      	movs	r3, #0
 8005a52:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	3301      	adds	r3, #1
 8005a58:	613b      	str	r3, [r7, #16]
 8005a5a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005a5e:	461a      	mov	r2, r3
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d3e3      	bcc.n	8005a2e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a72:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a18      	ldr	r2, [pc, #96]	; (8005ad8 <USB_HostInit+0x170>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d10b      	bne.n	8005a94 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a82:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a15      	ldr	r2, [pc, #84]	; (8005adc <USB_HostInit+0x174>)
 8005a88:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a14      	ldr	r2, [pc, #80]	; (8005ae0 <USB_HostInit+0x178>)
 8005a8e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005a92:	e009      	b.n	8005aa8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2280      	movs	r2, #128	; 0x80
 8005a98:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a11      	ldr	r2, [pc, #68]	; (8005ae4 <USB_HostInit+0x17c>)
 8005a9e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a11      	ldr	r2, [pc, #68]	; (8005ae8 <USB_HostInit+0x180>)
 8005aa4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005aa8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d105      	bne.n	8005abc <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	f043 0210 	orr.w	r2, r3, #16
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	699a      	ldr	r2, [r3, #24]
 8005ac0:	4b0a      	ldr	r3, [pc, #40]	; (8005aec <USB_HostInit+0x184>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ad4:	b004      	add	sp, #16
 8005ad6:	4770      	bx	lr
 8005ad8:	40040000 	.word	0x40040000
 8005adc:	01000200 	.word	0x01000200
 8005ae0:	00e00300 	.word	0x00e00300
 8005ae4:	00600080 	.word	0x00600080
 8005ae8:	004000e0 	.word	0x004000e0
 8005aec:	a3200008 	.word	0xa3200008

08005af0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	460b      	mov	r3, r1
 8005afa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b0e:	f023 0303 	bic.w	r3, r3, #3
 8005b12:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	78fb      	ldrb	r3, [r7, #3]
 8005b1e:	f003 0303 	and.w	r3, r3, #3
 8005b22:	68f9      	ldr	r1, [r7, #12]
 8005b24:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d107      	bne.n	8005b42 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b38:	461a      	mov	r2, r3
 8005b3a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005b3e:	6053      	str	r3, [r2, #4]
 8005b40:	e00c      	b.n	8005b5c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005b42:	78fb      	ldrb	r3, [r7, #3]
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d107      	bne.n	8005b58 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f241 7370 	movw	r3, #6000	; 0x1770
 8005b54:	6053      	str	r3, [r2, #4]
 8005b56:	e001      	b.n	8005b5c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e000      	b.n	8005b5e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b084      	sub	sp, #16
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b8a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b98:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005b9a:	2064      	movs	r0, #100	; 0x64
 8005b9c:	f7fb f9bc 	bl	8000f18 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bac:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005bae:	200a      	movs	r0, #10
 8005bb0:	f7fb f9b2 	bl	8000f18 <HAL_Delay>

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b085      	sub	sp, #20
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005be2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d109      	bne.n	8005c02 <USB_DriveVbus+0x44>
 8005bee:	78fb      	ldrb	r3, [r7, #3]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d106      	bne.n	8005c02 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005bfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c00:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c0c:	d109      	bne.n	8005c22 <USB_DriveVbus+0x64>
 8005c0e:	78fb      	ldrb	r3, [r7, #3]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d106      	bne.n	8005c22 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c20:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	0c5b      	lsrs	r3, r3, #17
 8005c4e:	f003 0303 	and.w	r3, r3, #3
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b085      	sub	sp, #20
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	b29b      	uxth	r3, r3
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	4608      	mov	r0, r1
 8005c8a:	4611      	mov	r1, r2
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	4603      	mov	r3, r0
 8005c90:	70fb      	strb	r3, [r7, #3]
 8005c92:	460b      	mov	r3, r1
 8005c94:	70bb      	strb	r3, [r7, #2]
 8005c96:	4613      	mov	r3, r2
 8005c98:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005ca2:	78fb      	ldrb	r3, [r7, #3]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cae:	461a      	mov	r2, r3
 8005cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005cb4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005cb6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005cba:	2b03      	cmp	r3, #3
 8005cbc:	d87c      	bhi.n	8005db8 <USB_HC_Init+0x138>
 8005cbe:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <USB_HC_Init+0x44>)
 8005cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc4:	08005cd5 	.word	0x08005cd5
 8005cc8:	08005d7b 	.word	0x08005d7b
 8005ccc:	08005cd5 	.word	0x08005cd5
 8005cd0:	08005d3d 	.word	0x08005d3d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005cd4:	78fb      	ldrb	r3, [r7, #3]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	f240 439d 	movw	r3, #1181	; 0x49d
 8005ce6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005ce8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	da10      	bge.n	8005d12 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005cf0:	78fb      	ldrb	r3, [r7, #3]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	78fa      	ldrb	r2, [r7, #3]
 8005d00:	0151      	lsls	r1, r2, #5
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	440a      	add	r2, r1
 8005d06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d0e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005d10:	e055      	b.n	8005dbe <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a6f      	ldr	r2, [pc, #444]	; (8005ed4 <USB_HC_Init+0x254>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d151      	bne.n	8005dbe <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005d1a:	78fb      	ldrb	r3, [r7, #3]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	78fa      	ldrb	r2, [r7, #3]
 8005d2a:	0151      	lsls	r1, r2, #5
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	440a      	add	r2, r1
 8005d30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d34:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005d38:	60d3      	str	r3, [r2, #12]
      break;
 8005d3a:	e040      	b.n	8005dbe <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d3c:	78fb      	ldrb	r3, [r7, #3]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d48:	461a      	mov	r2, r3
 8005d4a:	f240 639d 	movw	r3, #1693	; 0x69d
 8005d4e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005d50:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	da34      	bge.n	8005dc2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005d58:	78fb      	ldrb	r3, [r7, #3]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	78fa      	ldrb	r2, [r7, #3]
 8005d68:	0151      	lsls	r1, r2, #5
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	440a      	add	r2, r1
 8005d6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d76:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005d78:	e023      	b.n	8005dc2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d7a:	78fb      	ldrb	r3, [r7, #3]
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d86:	461a      	mov	r2, r3
 8005d88:	f240 2325 	movw	r3, #549	; 0x225
 8005d8c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005d8e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	da17      	bge.n	8005dc6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005d96:	78fb      	ldrb	r3, [r7, #3]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	78fa      	ldrb	r2, [r7, #3]
 8005da6:	0151      	lsls	r1, r2, #5
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	440a      	add	r2, r1
 8005dac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005db0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005db4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005db6:	e006      	b.n	8005dc6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	77fb      	strb	r3, [r7, #31]
      break;
 8005dbc:	e004      	b.n	8005dc8 <USB_HC_Init+0x148>
      break;
 8005dbe:	bf00      	nop
 8005dc0:	e002      	b.n	8005dc8 <USB_HC_Init+0x148>
      break;
 8005dc2:	bf00      	nop
 8005dc4:	e000      	b.n	8005dc8 <USB_HC_Init+0x148>
      break;
 8005dc6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005dc8:	78fb      	ldrb	r3, [r7, #3]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005dda:	78fb      	ldrb	r3, [r7, #3]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	78fa      	ldrb	r2, [r7, #3]
 8005dea:	0151      	lsls	r1, r2, #5
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	440a      	add	r2, r1
 8005df0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005df4:	f043 0302 	orr.w	r3, r3, #2
 8005df8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e00:	699a      	ldr	r2, [r3, #24]
 8005e02:	78fb      	ldrb	r3, [r7, #3]
 8005e04:	f003 030f 	and.w	r3, r3, #15
 8005e08:	2101      	movs	r1, #1
 8005e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e0e:	6939      	ldr	r1, [r7, #16]
 8005e10:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e14:	4313      	orrs	r3, r2
 8005e16:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005e24:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	da03      	bge.n	8005e34 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005e2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e30:	61bb      	str	r3, [r7, #24]
 8005e32:	e001      	b.n	8005e38 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f7ff fef9 	bl	8005c30 <USB_GetHostSpeed>
 8005e3e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005e40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d106      	bne.n	8005e56 <USB_HC_Init+0x1d6>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d003      	beq.n	8005e56 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005e4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	e001      	b.n	8005e5a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005e56:	2300      	movs	r3, #0
 8005e58:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e5a:	787b      	ldrb	r3, [r7, #1]
 8005e5c:	059b      	lsls	r3, r3, #22
 8005e5e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005e62:	78bb      	ldrb	r3, [r7, #2]
 8005e64:	02db      	lsls	r3, r3, #11
 8005e66:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e6a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005e6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e70:	049b      	lsls	r3, r3, #18
 8005e72:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005e76:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005e78:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005e7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005e7e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	431a      	orrs	r2, r3
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e88:	78fa      	ldrb	r2, [r7, #3]
 8005e8a:	0151      	lsls	r1, r2, #5
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	440a      	add	r2, r1
 8005e90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005e94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e98:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005e9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e9e:	2b03      	cmp	r3, #3
 8005ea0:	d003      	beq.n	8005eaa <USB_HC_Init+0x22a>
 8005ea2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d10f      	bne.n	8005eca <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005eaa:	78fb      	ldrb	r3, [r7, #3]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	78fa      	ldrb	r2, [r7, #3]
 8005eba:	0151      	lsls	r1, r2, #5
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	440a      	add	r2, r1
 8005ec0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ec4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ec8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005eca:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3720      	adds	r7, #32
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	40040000 	.word	0x40040000

08005ed8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b08c      	sub	sp, #48	; 0x30
 8005edc:	af02      	add	r7, sp, #8
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	785b      	ldrb	r3, [r3, #1]
 8005eee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005ef0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ef4:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4a5d      	ldr	r2, [pc, #372]	; (8006070 <USB_HC_StartXfer+0x198>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d12f      	bne.n	8005f5e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005efe:	79fb      	ldrb	r3, [r7, #7]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d11c      	bne.n	8005f3e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	7c9b      	ldrb	r3, [r3, #18]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d003      	beq.n	8005f14 <USB_HC_StartXfer+0x3c>
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	7c9b      	ldrb	r3, [r3, #18]
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d124      	bne.n	8005f5e <USB_HC_StartXfer+0x86>
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	799b      	ldrb	r3, [r3, #6]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d120      	bne.n	8005f5e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	69fa      	ldr	r2, [r7, #28]
 8005f2c:	0151      	lsls	r1, r2, #5
 8005f2e:	6a3a      	ldr	r2, [r7, #32]
 8005f30:	440a      	add	r2, r1
 8005f32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f3a:	60d3      	str	r3, [r2, #12]
 8005f3c:	e00f      	b.n	8005f5e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	791b      	ldrb	r3, [r3, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10b      	bne.n	8005f5e <USB_HC_StartXfer+0x86>
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	795b      	ldrb	r3, [r3, #5]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d107      	bne.n	8005f5e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	785b      	ldrb	r3, [r3, #1]
 8005f52:	4619      	mov	r1, r3
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f000 fb6b 	bl	8006630 <USB_DoPing>
        return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e232      	b.n	80063c4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	799b      	ldrb	r3, [r3, #6]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d158      	bne.n	8006018 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005f66:	2301      	movs	r3, #1
 8005f68:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	78db      	ldrb	r3, [r3, #3]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d007      	beq.n	8005f82 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005f72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	8a92      	ldrh	r2, [r2, #20]
 8005f78:	fb03 f202 	mul.w	r2, r3, r2
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	61da      	str	r2, [r3, #28]
 8005f80:	e07c      	b.n	800607c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	7c9b      	ldrb	r3, [r3, #18]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d130      	bne.n	8005fec <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	2bbc      	cmp	r3, #188	; 0xbc
 8005f90:	d918      	bls.n	8005fc4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	8a9b      	ldrh	r3, [r3, #20]
 8005f96:	461a      	mov	r2, r3
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	69da      	ldr	r2, [r3, #28]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d003      	beq.n	8005fb4 <USB_HC_StartXfer+0xdc>
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d103      	bne.n	8005fbc <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	60da      	str	r2, [r3, #12]
 8005fba:	e05f      	b.n	800607c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	60da      	str	r2, [r3, #12]
 8005fc2:	e05b      	b.n	800607c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	6a1a      	ldr	r2, [r3, #32]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d007      	beq.n	8005fe4 <USB_HC_StartXfer+0x10c>
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d003      	beq.n	8005fe4 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2204      	movs	r2, #4
 8005fe0:	60da      	str	r2, [r3, #12]
 8005fe2:	e04b      	b.n	800607c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2203      	movs	r2, #3
 8005fe8:	60da      	str	r2, [r3, #12]
 8005fea:	e047      	b.n	800607c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005fec:	79fb      	ldrb	r3, [r7, #7]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d10d      	bne.n	800600e <USB_HC_StartXfer+0x136>
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	8a92      	ldrh	r2, [r2, #20]
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d907      	bls.n	800600e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ffe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	8a92      	ldrh	r2, [r2, #20]
 8006004:	fb03 f202 	mul.w	r2, r3, r2
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	61da      	str	r2, [r3, #28]
 800600c:	e036      	b.n	800607c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	6a1a      	ldr	r2, [r3, #32]
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	61da      	str	r2, [r3, #28]
 8006016:	e031      	b.n	800607c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d018      	beq.n	8006052 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	8a92      	ldrh	r2, [r2, #20]
 8006028:	4413      	add	r3, r2
 800602a:	3b01      	subs	r3, #1
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	8a92      	ldrh	r2, [r2, #20]
 8006030:	fbb3 f3f2 	udiv	r3, r3, r2
 8006034:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 8006036:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006038:	8b7b      	ldrh	r3, [r7, #26]
 800603a:	429a      	cmp	r2, r3
 800603c:	d90b      	bls.n	8006056 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800603e:	8b7b      	ldrh	r3, [r7, #26]
 8006040:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006042:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	8a92      	ldrh	r2, [r2, #20]
 8006048:	fb03 f202 	mul.w	r2, r3, r2
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	61da      	str	r2, [r3, #28]
 8006050:	e001      	b.n	8006056 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006052:	2301      	movs	r3, #1
 8006054:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	78db      	ldrb	r3, [r3, #3]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00a      	beq.n	8006074 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800605e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	8a92      	ldrh	r2, [r2, #20]
 8006064:	fb03 f202 	mul.w	r2, r3, r2
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	61da      	str	r2, [r3, #28]
 800606c:	e006      	b.n	800607c <USB_HC_StartXfer+0x1a4>
 800606e:	bf00      	nop
 8006070:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	6a1a      	ldr	r2, [r3, #32]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006084:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006086:	04d9      	lsls	r1, r3, #19
 8006088:	4ba3      	ldr	r3, [pc, #652]	; (8006318 <USB_HC_StartXfer+0x440>)
 800608a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800608c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	7d9b      	ldrb	r3, [r3, #22]
 8006092:	075b      	lsls	r3, r3, #29
 8006094:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006098:	69f9      	ldr	r1, [r7, #28]
 800609a:	0148      	lsls	r0, r1, #5
 800609c:	6a39      	ldr	r1, [r7, #32]
 800609e:	4401      	add	r1, r0
 80060a0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060a4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060a6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80060a8:	79fb      	ldrb	r3, [r7, #7]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d009      	beq.n	80060c2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	6999      	ldr	r1, [r3, #24]
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	6a3b      	ldr	r3, [r7, #32]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060be:	460a      	mov	r2, r1
 80060c0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	bf0c      	ite	eq
 80060d2:	2301      	moveq	r3, #1
 80060d4:	2300      	movne	r3, #0
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	69fa      	ldr	r2, [r7, #28]
 80060ea:	0151      	lsls	r1, r2, #5
 80060ec:	6a3a      	ldr	r2, [r7, #32]
 80060ee:	440a      	add	r2, r1
 80060f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80060f8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	4413      	add	r3, r2
 8006102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	7e7b      	ldrb	r3, [r7, #25]
 800610a:	075b      	lsls	r3, r3, #29
 800610c:	69f9      	ldr	r1, [r7, #28]
 800610e:	0148      	lsls	r0, r1, #5
 8006110:	6a39      	ldr	r1, [r7, #32]
 8006112:	4401      	add	r1, r0
 8006114:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006118:	4313      	orrs	r3, r2
 800611a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	799b      	ldrb	r3, [r3, #6]
 8006120:	2b01      	cmp	r3, #1
 8006122:	f040 80c3 	bne.w	80062ac <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	7c5b      	ldrb	r3, [r3, #17]
 800612a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006130:	4313      	orrs	r3, r2
 8006132:	69fa      	ldr	r2, [r7, #28]
 8006134:	0151      	lsls	r1, r2, #5
 8006136:	6a3a      	ldr	r2, [r7, #32]
 8006138:	440a      	add	r2, r1
 800613a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800613e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006142:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	4413      	add	r3, r2
 800614c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	69fa      	ldr	r2, [r7, #28]
 8006154:	0151      	lsls	r1, r2, #5
 8006156:	6a3a      	ldr	r2, [r7, #32]
 8006158:	440a      	add	r2, r1
 800615a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800615e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006162:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	79db      	ldrb	r3, [r3, #7]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d123      	bne.n	80061b4 <USB_HC_StartXfer+0x2dc>
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	78db      	ldrb	r3, [r3, #3]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d11f      	bne.n	80061b4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	6a3b      	ldr	r3, [r7, #32]
 800617a:	4413      	add	r3, r2
 800617c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	69fa      	ldr	r2, [r7, #28]
 8006184:	0151      	lsls	r1, r2, #5
 8006186:	6a3a      	ldr	r2, [r7, #32]
 8006188:	440a      	add	r2, r1
 800618a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800618e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006192:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	6a3b      	ldr	r3, [r7, #32]
 800619a:	4413      	add	r3, r2
 800619c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	69fa      	ldr	r2, [r7, #28]
 80061a4:	0151      	lsls	r1, r2, #5
 80061a6:	6a3a      	ldr	r2, [r7, #32]
 80061a8:	440a      	add	r2, r1
 80061aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061b2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	7c9b      	ldrb	r3, [r3, #18]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d003      	beq.n	80061c4 <USB_HC_StartXfer+0x2ec>
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	7c9b      	ldrb	r3, [r3, #18]
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d117      	bne.n	80061f4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d113      	bne.n	80061f4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	78db      	ldrb	r3, [r3, #3]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d10f      	bne.n	80061f4 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	69fa      	ldr	r2, [r7, #28]
 80061e4:	0151      	lsls	r1, r2, #5
 80061e6:	6a3a      	ldr	r2, [r7, #32]
 80061e8:	440a      	add	r2, r1
 80061ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061f2:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	7c9b      	ldrb	r3, [r3, #18]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d162      	bne.n	80062c2 <USB_HC_StartXfer+0x3ea>
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	78db      	ldrb	r3, [r3, #3]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d15e      	bne.n	80062c2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	3b01      	subs	r3, #1
 800620a:	2b03      	cmp	r3, #3
 800620c:	d858      	bhi.n	80062c0 <USB_HC_StartXfer+0x3e8>
 800620e:	a201      	add	r2, pc, #4	; (adr r2, 8006214 <USB_HC_StartXfer+0x33c>)
 8006210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006214:	08006225 	.word	0x08006225
 8006218:	08006247 	.word	0x08006247
 800621c:	08006269 	.word	0x08006269
 8006220:	0800628b 	.word	0x0800628b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	4413      	add	r3, r2
 800622c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	69fa      	ldr	r2, [r7, #28]
 8006234:	0151      	lsls	r1, r2, #5
 8006236:	6a3a      	ldr	r2, [r7, #32]
 8006238:	440a      	add	r2, r1
 800623a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800623e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006242:	6053      	str	r3, [r2, #4]
          break;
 8006244:	e03d      	b.n	80062c2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	6a3b      	ldr	r3, [r7, #32]
 800624c:	4413      	add	r3, r2
 800624e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	69fa      	ldr	r2, [r7, #28]
 8006256:	0151      	lsls	r1, r2, #5
 8006258:	6a3a      	ldr	r2, [r7, #32]
 800625a:	440a      	add	r2, r1
 800625c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006260:	f043 030e 	orr.w	r3, r3, #14
 8006264:	6053      	str	r3, [r2, #4]
          break;
 8006266:	e02c      	b.n	80062c2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	6a3b      	ldr	r3, [r7, #32]
 800626e:	4413      	add	r3, r2
 8006270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	69fa      	ldr	r2, [r7, #28]
 8006278:	0151      	lsls	r1, r2, #5
 800627a:	6a3a      	ldr	r2, [r7, #32]
 800627c:	440a      	add	r2, r1
 800627e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006282:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006286:	6053      	str	r3, [r2, #4]
          break;
 8006288:	e01b      	b.n	80062c2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	6a3b      	ldr	r3, [r7, #32]
 8006290:	4413      	add	r3, r2
 8006292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	69fa      	ldr	r2, [r7, #28]
 800629a:	0151      	lsls	r1, r2, #5
 800629c:	6a3a      	ldr	r2, [r7, #32]
 800629e:	440a      	add	r2, r1
 80062a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062a8:	6053      	str	r3, [r2, #4]
          break;
 80062aa:	e00a      	b.n	80062c2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b8:	461a      	mov	r2, r3
 80062ba:	2300      	movs	r3, #0
 80062bc:	6053      	str	r3, [r2, #4]
 80062be:	e000      	b.n	80062c2 <USB_HC_StartXfer+0x3ea>
          break;
 80062c0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062d8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	78db      	ldrb	r3, [r3, #3]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d004      	beq.n	80062ec <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e8:	613b      	str	r3, [r7, #16]
 80062ea:	e003      	b.n	80062f4 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062f2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062fa:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	4413      	add	r3, r2
 8006304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006308:	461a      	mov	r2, r3
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800630e:	79fb      	ldrb	r3, [r7, #7]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d003      	beq.n	800631c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006314:	2300      	movs	r3, #0
 8006316:	e055      	b.n	80063c4 <USB_HC_StartXfer+0x4ec>
 8006318:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	78db      	ldrb	r3, [r3, #3]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d14e      	bne.n	80063c2 <USB_HC_StartXfer+0x4ea>
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d04a      	beq.n	80063c2 <USB_HC_StartXfer+0x4ea>
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	79db      	ldrb	r3, [r3, #7]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d146      	bne.n	80063c2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	7c9b      	ldrb	r3, [r3, #18]
 8006338:	2b03      	cmp	r3, #3
 800633a:	d831      	bhi.n	80063a0 <USB_HC_StartXfer+0x4c8>
 800633c:	a201      	add	r2, pc, #4	; (adr r2, 8006344 <USB_HC_StartXfer+0x46c>)
 800633e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006342:	bf00      	nop
 8006344:	08006355 	.word	0x08006355
 8006348:	08006379 	.word	0x08006379
 800634c:	08006355 	.word	0x08006355
 8006350:	08006379 	.word	0x08006379
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	6a1b      	ldr	r3, [r3, #32]
 8006358:	3303      	adds	r3, #3
 800635a:	089b      	lsrs	r3, r3, #2
 800635c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800635e:	8afa      	ldrh	r2, [r7, #22]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006364:	b29b      	uxth	r3, r3
 8006366:	429a      	cmp	r2, r3
 8006368:	d91c      	bls.n	80063a4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	f043 0220 	orr.w	r2, r3, #32
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	619a      	str	r2, [r3, #24]
        }
        break;
 8006376:	e015      	b.n	80063a4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	3303      	adds	r3, #3
 800637e:	089b      	lsrs	r3, r3, #2
 8006380:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006382:	8afa      	ldrh	r2, [r7, #22]
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	b29b      	uxth	r3, r3
 800638e:	429a      	cmp	r2, r3
 8006390:	d90a      	bls.n	80063a8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	619a      	str	r2, [r3, #24]
        }
        break;
 800639e:	e003      	b.n	80063a8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80063a0:	bf00      	nop
 80063a2:	e002      	b.n	80063aa <USB_HC_StartXfer+0x4d2>
        break;
 80063a4:	bf00      	nop
 80063a6:	e000      	b.n	80063aa <USB_HC_StartXfer+0x4d2>
        break;
 80063a8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	6999      	ldr	r1, [r3, #24]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	785a      	ldrb	r2, [r3, #1]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	2000      	movs	r0, #0
 80063ba:	9000      	str	r0, [sp, #0]
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f7ff f9c9 	bl	8005754 <USB_WritePacket>
  }

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3728      	adds	r7, #40	; 0x28
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	b29b      	uxth	r3, r3
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3714      	adds	r7, #20
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b089      	sub	sp, #36	; 0x24
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	460b      	mov	r3, r1
 80063f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80063fe:	78fb      	ldrb	r3, [r7, #3]
 8006400:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	4413      	add	r3, r2
 800640e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	0c9b      	lsrs	r3, r3, #18
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	4413      	add	r3, r2
 8006424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	0fdb      	lsrs	r3, r3, #31
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	015a      	lsls	r2, r3, #5
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	4413      	add	r3, r2
 800643a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	0fdb      	lsrs	r3, r3, #31
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f003 0320 	and.w	r3, r3, #32
 8006450:	2b20      	cmp	r3, #32
 8006452:	d10d      	bne.n	8006470 <USB_HC_Halt+0x82>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10a      	bne.n	8006470 <USB_HC_Halt+0x82>
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d005      	beq.n	800646c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d002      	beq.n	800646c <USB_HC_Halt+0x7e>
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2b03      	cmp	r3, #3
 800646a:	d101      	bne.n	8006470 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800646c:	2300      	movs	r3, #0
 800646e:	e0d8      	b.n	8006622 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d002      	beq.n	800647c <USB_HC_Halt+0x8e>
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	2b02      	cmp	r3, #2
 800647a:	d173      	bne.n	8006564 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	015a      	lsls	r2, r3, #5
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	4413      	add	r3, r2
 8006484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	0151      	lsls	r1, r2, #5
 800648e:	69fa      	ldr	r2, [r7, #28]
 8006490:	440a      	add	r2, r1
 8006492:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006496:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800649a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f003 0320 	and.w	r3, r3, #32
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d14a      	bne.n	800653e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d133      	bne.n	800651c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	69ba      	ldr	r2, [r7, #24]
 80064c4:	0151      	lsls	r1, r2, #5
 80064c6:	69fa      	ldr	r2, [r7, #28]
 80064c8:	440a      	add	r2, r1
 80064ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064d2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	0151      	lsls	r1, r2, #5
 80064e6:	69fa      	ldr	r2, [r7, #28]
 80064e8:	440a      	add	r2, r1
 80064ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064f2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	3301      	adds	r3, #1
 80064f8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006500:	d82e      	bhi.n	8006560 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	4413      	add	r3, r2
 800650a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006514:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006518:	d0ec      	beq.n	80064f4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800651a:	e081      	b.n	8006620 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	4413      	add	r3, r2
 8006524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	69ba      	ldr	r2, [r7, #24]
 800652c:	0151      	lsls	r1, r2, #5
 800652e:	69fa      	ldr	r2, [r7, #28]
 8006530:	440a      	add	r2, r1
 8006532:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006536:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800653a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800653c:	e070      	b.n	8006620 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	4413      	add	r3, r2
 8006546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	0151      	lsls	r1, r2, #5
 8006550:	69fa      	ldr	r2, [r7, #28]
 8006552:	440a      	add	r2, r1
 8006554:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006558:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800655c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800655e:	e05f      	b.n	8006620 <USB_HC_Halt+0x232>
            break;
 8006560:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006562:	e05d      	b.n	8006620 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	4413      	add	r3, r2
 800656c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	0151      	lsls	r1, r2, #5
 8006576:	69fa      	ldr	r2, [r7, #28]
 8006578:	440a      	add	r2, r1
 800657a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800657e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006582:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d133      	bne.n	80065fc <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	4413      	add	r3, r2
 800659c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69ba      	ldr	r2, [r7, #24]
 80065a4:	0151      	lsls	r1, r2, #5
 80065a6:	69fa      	ldr	r2, [r7, #28]
 80065a8:	440a      	add	r2, r1
 80065aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065b2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	0151      	lsls	r1, r2, #5
 80065c6:	69fa      	ldr	r2, [r7, #28]
 80065c8:	440a      	add	r2, r1
 80065ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065d2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	3301      	adds	r3, #1
 80065d8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065e0:	d81d      	bhi.n	800661e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065f8:	d0ec      	beq.n	80065d4 <USB_HC_Halt+0x1e6>
 80065fa:	e011      	b.n	8006620 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	4413      	add	r3, r2
 8006604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	0151      	lsls	r1, r2, #5
 800660e:	69fa      	ldr	r2, [r7, #28]
 8006610:	440a      	add	r2, r1
 8006612:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006616:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800661a:	6013      	str	r3, [r2, #0]
 800661c:	e000      	b.n	8006620 <USB_HC_Halt+0x232>
          break;
 800661e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3724      	adds	r7, #36	; 0x24
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
	...

08006630 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	460b      	mov	r3, r1
 800663a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006640:	78fb      	ldrb	r3, [r7, #3]
 8006642:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006644:	2301      	movs	r3, #1
 8006646:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	04da      	lsls	r2, r3, #19
 800664c:	4b15      	ldr	r3, [pc, #84]	; (80066a4 <USB_DoPing+0x74>)
 800664e:	4013      	ands	r3, r2
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	0151      	lsls	r1, r2, #5
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	440a      	add	r2, r1
 8006658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800665c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006660:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	4413      	add	r3, r2
 800666a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006678:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006680:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	4413      	add	r3, r2
 800668a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800668e:	461a      	mov	r2, r3
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	371c      	adds	r7, #28
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	1ff80000 	.word	0x1ff80000

080066a8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b088      	sub	sp, #32
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80066b8:	2300      	movs	r3, #0
 80066ba:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7fe ff8c 	bl	80055da <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066c2:	2110      	movs	r1, #16
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7fe ffe5 	bl	8005694 <USB_FlushTxFifo>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f7ff f80f 	bl	80056f8 <USB_FlushRxFifo>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80066e4:	2300      	movs	r3, #0
 80066e6:	61bb      	str	r3, [r7, #24]
 80066e8:	e01f      	b.n	800672a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006700:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006708:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006710:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	4413      	add	r3, r2
 800671a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800671e:	461a      	mov	r2, r3
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	3301      	adds	r3, #1
 8006728:	61bb      	str	r3, [r7, #24]
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	2b0f      	cmp	r3, #15
 800672e:	d9dc      	bls.n	80066ea <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006730:	2300      	movs	r3, #0
 8006732:	61bb      	str	r3, [r7, #24]
 8006734:	e034      	b.n	80067a0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	4413      	add	r3, r2
 800673e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800674c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006754:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800675c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	4413      	add	r3, r2
 8006766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800676a:	461a      	mov	r2, r3
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	3301      	adds	r3, #1
 8006774:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800677c:	d80c      	bhi.n	8006798 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	015a      	lsls	r2, r3, #5
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	4413      	add	r3, r2
 8006786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006794:	d0ec      	beq.n	8006770 <USB_StopHost+0xc8>
 8006796:	e000      	b.n	800679a <USB_StopHost+0xf2>
        break;
 8006798:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	3301      	adds	r3, #1
 800679e:	61bb      	str	r3, [r7, #24]
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	2b0f      	cmp	r3, #15
 80067a4:	d9c7      	bls.n	8006736 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067ac:	461a      	mov	r2, r3
 80067ae:	f04f 33ff 	mov.w	r3, #4294967295
 80067b2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f04f 32ff 	mov.w	r2, #4294967295
 80067ba:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7fe fefb 	bl	80055b8 <USB_EnableGlobalInt>

  return ret;
 80067c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3720      	adds	r7, #32
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80067cc:	b590      	push	{r4, r7, lr}
 80067ce:	b089      	sub	sp, #36	; 0x24
 80067d0:	af04      	add	r7, sp, #16
 80067d2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80067d4:	2301      	movs	r3, #1
 80067d6:	2202      	movs	r2, #2
 80067d8:	2102      	movs	r1, #2
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fcd1 	bl	8007182 <USBH_FindInterface>
 80067e0:	4603      	mov	r3, r0
 80067e2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
 80067e6:	2bff      	cmp	r3, #255	; 0xff
 80067e8:	d002      	beq.n	80067f0 <USBH_CDC_InterfaceInit+0x24>
 80067ea:	7bfb      	ldrb	r3, [r7, #15]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d901      	bls.n	80067f4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80067f0:	2302      	movs	r3, #2
 80067f2:	e13d      	b.n	8006a70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 fca6 	bl	800714a <USBH_SelectInterface>
 80067fe:	4603      	mov	r3, r0
 8006800:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006802:	7bbb      	ldrb	r3, [r7, #14]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d001      	beq.n	800680c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006808:	2302      	movs	r3, #2
 800680a:	e131      	b.n	8006a70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006812:	2050      	movs	r0, #80	; 0x50
 8006814:	f005 fd6e 	bl	800c2f4 <malloc>
 8006818:	4603      	mov	r3, r0
 800681a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006822:	69db      	ldr	r3, [r3, #28]
 8006824:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800682c:	2302      	movs	r3, #2
 800682e:	e11f      	b.n	8006a70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006830:	2250      	movs	r2, #80	; 0x50
 8006832:	2100      	movs	r1, #0
 8006834:	68b8      	ldr	r0, [r7, #8]
 8006836:	f005 fe19 	bl	800c46c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800683a:	7bfb      	ldrb	r3, [r7, #15]
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	211a      	movs	r1, #26
 8006840:	fb01 f303 	mul.w	r3, r1, r3
 8006844:	4413      	add	r3, r2
 8006846:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	b25b      	sxtb	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	da15      	bge.n	800687e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006852:	7bfb      	ldrb	r3, [r7, #15]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	211a      	movs	r1, #26
 8006858:	fb01 f303 	mul.w	r3, r1, r3
 800685c:	4413      	add	r3, r2
 800685e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006862:	781a      	ldrb	r2, [r3, #0]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006868:	7bfb      	ldrb	r3, [r7, #15]
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	211a      	movs	r1, #26
 800686e:	fb01 f303 	mul.w	r3, r1, r3
 8006872:	4413      	add	r3, r2
 8006874:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006878:	881a      	ldrh	r2, [r3, #0]
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	785b      	ldrb	r3, [r3, #1]
 8006882:	4619      	mov	r1, r3
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f002 fa26 	bl	8008cd6 <USBH_AllocPipe>
 800688a:	4603      	mov	r3, r0
 800688c:	461a      	mov	r2, r3
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	7819      	ldrb	r1, [r3, #0]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	7858      	ldrb	r0, [r3, #1]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	8952      	ldrh	r2, [r2, #10]
 80068aa:	9202      	str	r2, [sp, #8]
 80068ac:	2203      	movs	r2, #3
 80068ae:	9201      	str	r2, [sp, #4]
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	4623      	mov	r3, r4
 80068b4:	4602      	mov	r2, r0
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f002 f9de 	bl	8008c78 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	2200      	movs	r2, #0
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f005 fc8f 	bl	800c1e8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80068ca:	2300      	movs	r3, #0
 80068cc:	2200      	movs	r2, #0
 80068ce:	210a      	movs	r1, #10
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fc56 	bl	8007182 <USBH_FindInterface>
 80068d6:	4603      	mov	r3, r0
 80068d8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80068da:	7bfb      	ldrb	r3, [r7, #15]
 80068dc:	2bff      	cmp	r3, #255	; 0xff
 80068de:	d002      	beq.n	80068e6 <USBH_CDC_InterfaceInit+0x11a>
 80068e0:	7bfb      	ldrb	r3, [r7, #15]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d901      	bls.n	80068ea <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80068e6:	2302      	movs	r3, #2
 80068e8:	e0c2      	b.n	8006a70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80068ea:	7bfb      	ldrb	r3, [r7, #15]
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	211a      	movs	r1, #26
 80068f0:	fb01 f303 	mul.w	r3, r1, r3
 80068f4:	4413      	add	r3, r2
 80068f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	b25b      	sxtb	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	da16      	bge.n	8006930 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006902:	7bfb      	ldrb	r3, [r7, #15]
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	211a      	movs	r1, #26
 8006908:	fb01 f303 	mul.w	r3, r1, r3
 800690c:	4413      	add	r3, r2
 800690e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006912:	781a      	ldrb	r2, [r3, #0]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006918:	7bfb      	ldrb	r3, [r7, #15]
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	211a      	movs	r1, #26
 800691e:	fb01 f303 	mul.w	r3, r1, r3
 8006922:	4413      	add	r3, r2
 8006924:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006928:	881a      	ldrh	r2, [r3, #0]
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	835a      	strh	r2, [r3, #26]
 800692e:	e015      	b.n	800695c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006930:	7bfb      	ldrb	r3, [r7, #15]
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	211a      	movs	r1, #26
 8006936:	fb01 f303 	mul.w	r3, r1, r3
 800693a:	4413      	add	r3, r2
 800693c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006940:	781a      	ldrb	r2, [r3, #0]
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006946:	7bfb      	ldrb	r3, [r7, #15]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	211a      	movs	r1, #26
 800694c:	fb01 f303 	mul.w	r3, r1, r3
 8006950:	4413      	add	r3, r2
 8006952:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006956:	881a      	ldrh	r2, [r3, #0]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800695c:	7bfb      	ldrb	r3, [r7, #15]
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	211a      	movs	r1, #26
 8006962:	fb01 f303 	mul.w	r3, r1, r3
 8006966:	4413      	add	r3, r2
 8006968:	f203 3356 	addw	r3, r3, #854	; 0x356
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	b25b      	sxtb	r3, r3
 8006970:	2b00      	cmp	r3, #0
 8006972:	da16      	bge.n	80069a2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006974:	7bfb      	ldrb	r3, [r7, #15]
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	211a      	movs	r1, #26
 800697a:	fb01 f303 	mul.w	r3, r1, r3
 800697e:	4413      	add	r3, r2
 8006980:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006984:	781a      	ldrb	r2, [r3, #0]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800698a:	7bfb      	ldrb	r3, [r7, #15]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	211a      	movs	r1, #26
 8006990:	fb01 f303 	mul.w	r3, r1, r3
 8006994:	4413      	add	r3, r2
 8006996:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800699a:	881a      	ldrh	r2, [r3, #0]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	835a      	strh	r2, [r3, #26]
 80069a0:	e015      	b.n	80069ce <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80069a2:	7bfb      	ldrb	r3, [r7, #15]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	211a      	movs	r1, #26
 80069a8:	fb01 f303 	mul.w	r3, r1, r3
 80069ac:	4413      	add	r3, r2
 80069ae:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069b2:	781a      	ldrb	r2, [r3, #0]
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	211a      	movs	r1, #26
 80069be:	fb01 f303 	mul.w	r3, r1, r3
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80069c8:	881a      	ldrh	r2, [r3, #0]
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	7b9b      	ldrb	r3, [r3, #14]
 80069d2:	4619      	mov	r1, r3
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f002 f97e 	bl	8008cd6 <USBH_AllocPipe>
 80069da:	4603      	mov	r3, r0
 80069dc:	461a      	mov	r2, r3
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	7bdb      	ldrb	r3, [r3, #15]
 80069e6:	4619      	mov	r1, r3
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f002 f974 	bl	8008cd6 <USBH_AllocPipe>
 80069ee:	4603      	mov	r3, r0
 80069f0:	461a      	mov	r2, r3
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	7b59      	ldrb	r1, [r3, #13]
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	7b98      	ldrb	r0, [r3, #14]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	8b12      	ldrh	r2, [r2, #24]
 8006a0e:	9202      	str	r2, [sp, #8]
 8006a10:	2202      	movs	r2, #2
 8006a12:	9201      	str	r2, [sp, #4]
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	4623      	mov	r3, r4
 8006a18:	4602      	mov	r2, r0
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f002 f92c 	bl	8008c78 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	7b19      	ldrb	r1, [r3, #12]
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	7bd8      	ldrb	r0, [r3, #15]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	8b52      	ldrh	r2, [r2, #26]
 8006a38:	9202      	str	r2, [sp, #8]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	9201      	str	r2, [sp, #4]
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	4623      	mov	r3, r4
 8006a42:	4602      	mov	r2, r0
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f002 f917 	bl	8008c78 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	7b5b      	ldrb	r3, [r3, #13]
 8006a56:	2200      	movs	r2, #0
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f005 fbc4 	bl	800c1e8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	7b1b      	ldrb	r3, [r3, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f005 fbbd 	bl	800c1e8 <USBH_LL_SetToggle>

  return USBH_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd90      	pop	{r4, r7, pc}

08006a78 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a86:	69db      	ldr	r3, [r3, #28]
 8006a88:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00e      	beq.n	8006ab0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	4619      	mov	r1, r3
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f002 f90c 	bl	8008cb6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f002 f937 	bl	8008d18 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	7b1b      	ldrb	r3, [r3, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00e      	beq.n	8006ad6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	7b1b      	ldrb	r3, [r3, #12]
 8006abc:	4619      	mov	r1, r3
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f002 f8f9 	bl	8008cb6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	7b1b      	ldrb	r3, [r3, #12]
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f002 f924 	bl	8008d18 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	7b5b      	ldrb	r3, [r3, #13]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00e      	beq.n	8006afc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	7b5b      	ldrb	r3, [r3, #13]
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f002 f8e6 	bl	8008cb6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	7b5b      	ldrb	r3, [r3, #13]
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f002 f911 	bl	8008d18 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00b      	beq.n	8006b20 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b0e:	69db      	ldr	r3, [r3, #28]
 8006b10:	4618      	mov	r0, r3
 8006b12:	f005 fbf7 	bl	800c304 <free>
    phost->pActiveClass->pData = 0U;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	3340      	adds	r3, #64	; 0x40
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f8b1 	bl	8006caa <GetLineCoding>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006b4c:	7afb      	ldrb	r3, [r7, #11]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d105      	bne.n	8006b5e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b58:	2102      	movs	r1, #2
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006b5e:	7afb      	ldrb	r3, [r7, #11]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006b70:	2301      	movs	r3, #1
 8006b72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006b74:	2300      	movs	r3, #0
 8006b76:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006b88:	2b04      	cmp	r3, #4
 8006b8a:	d877      	bhi.n	8006c7c <USBH_CDC_Process+0x114>
 8006b8c:	a201      	add	r2, pc, #4	; (adr r2, 8006b94 <USBH_CDC_Process+0x2c>)
 8006b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b92:	bf00      	nop
 8006b94:	08006ba9 	.word	0x08006ba9
 8006b98:	08006baf 	.word	0x08006baf
 8006b9c:	08006bdf 	.word	0x08006bdf
 8006ba0:	08006c53 	.word	0x08006c53
 8006ba4:	08006c61 	.word	0x08006c61
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	73fb      	strb	r3, [r7, #15]
      break;
 8006bac:	e06d      	b.n	8006c8a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f897 	bl	8006ce8 <SetLineCoding>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006bbe:	7bbb      	ldrb	r3, [r7, #14]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d104      	bne.n	8006bce <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006bcc:	e058      	b.n	8006c80 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006bce:	7bbb      	ldrb	r3, [r7, #14]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d055      	beq.n	8006c80 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2204      	movs	r2, #4
 8006bd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006bdc:	e050      	b.n	8006c80 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	3340      	adds	r3, #64	; 0x40
 8006be2:	4619      	mov	r1, r3
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f860 	bl	8006caa <GetLineCoding>
 8006bea:	4603      	mov	r3, r0
 8006bec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006bee:	7bbb      	ldrb	r3, [r7, #14]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d126      	bne.n	8006c42 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c06:	791b      	ldrb	r3, [r3, #4]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d13b      	bne.n	8006c84 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c16:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d133      	bne.n	8006c84 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c26:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d12b      	bne.n	8006c84 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c34:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d124      	bne.n	8006c84 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f982 	bl	8006f44 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c40:	e020      	b.n	8006c84 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006c42:	7bbb      	ldrb	r3, [r7, #14]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d01d      	beq.n	8006c84 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	2204      	movs	r2, #4
 8006c4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c50:	e018      	b.n	8006c84 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f867 	bl	8006d26 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f8f6 	bl	8006e4a <CDC_ProcessReception>
      break;
 8006c5e:	e014      	b.n	8006c8a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006c60:	2100      	movs	r1, #0
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f001 f98a 	bl	8007f7c <USBH_ClrFeature>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c6c:	7bbb      	ldrb	r3, [r7, #14]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10a      	bne.n	8006c88 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006c7a:	e005      	b.n	8006c88 <USBH_CDC_Process+0x120>

    default:
      break;
 8006c7c:	bf00      	nop
 8006c7e:	e004      	b.n	8006c8a <USBH_CDC_Process+0x122>
      break;
 8006c80:	bf00      	nop
 8006c82:	e002      	b.n	8006c8a <USBH_CDC_Process+0x122>
      break;
 8006c84:	bf00      	nop
 8006c86:	e000      	b.n	8006c8a <USBH_CDC_Process+0x122>
      break;
 8006c88:	bf00      	nop

  }

  return status;
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b082      	sub	sp, #8
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	22a1      	movs	r2, #161	; 0xa1
 8006cb8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2221      	movs	r2, #33	; 0x21
 8006cbe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2207      	movs	r2, #7
 8006cd0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	2207      	movs	r2, #7
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f001 fc8b 	bl	80085f4 <USBH_CtlReq>
 8006cde:	4603      	mov	r3, r0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2221      	movs	r2, #33	; 0x21
 8006cf6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2207      	movs	r2, #7
 8006d0e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	2207      	movs	r2, #7
 8006d14:	4619      	mov	r1, r3
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f001 fc6c 	bl	80085f4 <USBH_CtlReq>
 8006d1c:	4603      	mov	r3, r0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b086      	sub	sp, #24
 8006d2a:	af02      	add	r7, sp, #8
 8006d2c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d002      	beq.n	8006d4c <CDC_ProcessTransmission+0x26>
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d023      	beq.n	8006d92 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006d4a:	e07a      	b.n	8006e42 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	8b12      	ldrh	r2, [r2, #24]
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d90b      	bls.n	8006d70 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	69d9      	ldr	r1, [r3, #28]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	8b1a      	ldrh	r2, [r3, #24]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	7b5b      	ldrb	r3, [r3, #13]
 8006d64:	2001      	movs	r0, #1
 8006d66:	9000      	str	r0, [sp, #0]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 ff42 	bl	8008bf2 <USBH_BulkSendData>
 8006d6e:	e00b      	b.n	8006d88 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	7b5b      	ldrb	r3, [r3, #13]
 8006d7e:	2001      	movs	r0, #1
 8006d80:	9000      	str	r0, [sp, #0]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f001 ff35 	bl	8008bf2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d90:	e057      	b.n	8006e42 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	7b5b      	ldrb	r3, [r3, #13]
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f005 f9fb 	bl	800c194 <USBH_LL_GetURBState>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006da2:	7afb      	ldrb	r3, [r7, #11]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d136      	bne.n	8006e16 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	8b12      	ldrh	r2, [r2, #24]
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d90e      	bls.n	8006dd2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	8b12      	ldrh	r2, [r2, #24]
 8006dbc:	1a9a      	subs	r2, r3, r2
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	8b12      	ldrh	r2, [r2, #24]
 8006dca:	441a      	add	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	61da      	str	r2, [r3, #28]
 8006dd0:	e002      	b.n	8006dd8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d004      	beq.n	8006dea <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8006de8:	e006      	b.n	8006df8 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f892 	bl	8006f1c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2204      	movs	r2, #4
 8006dfc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f002 f972 	bl	80090f8 <osMessageQueuePut>
      break;
 8006e14:	e014      	b.n	8006e40 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8006e16:	7afb      	ldrb	r3, [r7, #11]
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d111      	bne.n	8006e40 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2204      	movs	r2, #4
 8006e28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006e38:	2300      	movs	r3, #0
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f002 f95c 	bl	80090f8 <osMessageQueuePut>
      break;
 8006e40:	bf00      	nop
  }
}
 8006e42:	bf00      	nop
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b086      	sub	sp, #24
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006e66:	2b03      	cmp	r3, #3
 8006e68:	d002      	beq.n	8006e70 <CDC_ProcessReception+0x26>
 8006e6a:	2b04      	cmp	r3, #4
 8006e6c:	d00e      	beq.n	8006e8c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006e6e:	e051      	b.n	8006f14 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	6a19      	ldr	r1, [r3, #32]
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	8b5a      	ldrh	r2, [r3, #26]
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	7b1b      	ldrb	r3, [r3, #12]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f001 fedd 	bl	8008c3c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	2204      	movs	r2, #4
 8006e86:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006e8a:	e043      	b.n	8006f14 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	7b1b      	ldrb	r3, [r3, #12]
 8006e90:	4619      	mov	r1, r3
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f005 f97e 	bl	800c194 <USBH_LL_GetURBState>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006e9c:	7cfb      	ldrb	r3, [r7, #19]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d137      	bne.n	8006f12 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	7b1b      	ldrb	r3, [r3, #12]
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f005 f8e1 	bl	800c070 <USBH_LL_GetLastXferSize>
 8006eae:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d016      	beq.n	8006ee8 <CDC_ProcessReception+0x9e>
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	8b5b      	ldrh	r3, [r3, #26]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d910      	bls.n	8006ee8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	1ad2      	subs	r2, r2, r3
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	6a1a      	ldr	r2, [r3, #32]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	441a      	add	r2, r3
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2203      	movs	r2, #3
 8006ee2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8006ee6:	e006      	b.n	8006ef6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f81d 	bl	8006f30 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2204      	movs	r2, #4
 8006efa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f002 f8f3 	bl	80090f8 <osMessageQueuePut>
      break;
 8006f12:	bf00      	nop
  }
}
 8006f14:	bf00      	nop
 8006f16:	3718      	adds	r7, #24
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	4613      	mov	r3, r2
 8006f64:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d101      	bne.n	8006f70 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	e044      	b.n	8006ffa <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	79fa      	ldrb	r2, [r7, #7]
 8006f74:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 f841 	bl	8007010 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d003      	beq.n	8006fbc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	2104      	movs	r1, #4
 8006fc0:	2010      	movs	r0, #16
 8006fc2:	f002 f826 	bl	8009012 <osMessageQueueNew>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8006fce:	4b0d      	ldr	r3, [pc, #52]	; (8007004 <USBH_Init+0xac>)
 8006fd0:	4a0d      	ldr	r2, [pc, #52]	; (8007008 <USBH_Init+0xb0>)
 8006fd2:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8006fd4:	4b0b      	ldr	r3, [pc, #44]	; (8007004 <USBH_Init+0xac>)
 8006fd6:	2280      	movs	r2, #128	; 0x80
 8006fd8:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8006fda:	4b0a      	ldr	r3, [pc, #40]	; (8007004 <USBH_Init+0xac>)
 8006fdc:	2218      	movs	r2, #24
 8006fde:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8006fe0:	4a08      	ldr	r2, [pc, #32]	; (8007004 <USBH_Init+0xac>)
 8006fe2:	68f9      	ldr	r1, [r7, #12]
 8006fe4:	4809      	ldr	r0, [pc, #36]	; (800700c <USBH_Init+0xb4>)
 8006fe6:	f001 ff67 	bl	8008eb8 <osThreadNew>
 8006fea:	4602      	mov	r2, r0
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f004 ff88 	bl	800bf08 <USBH_LL_Init>

  return USBH_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	2000022c 	.word	0x2000022c
 8007008:	0800c67c 	.word	0x0800c67c
 800700c:	08007ccd 	.word	0x08007ccd

08007010 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007018:	2300      	movs	r3, #0
 800701a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800701c:	2300      	movs	r3, #0
 800701e:	60fb      	str	r3, [r7, #12]
 8007020:	e009      	b.n	8007036 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	33e0      	adds	r3, #224	; 0xe0
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4413      	add	r3, r2
 800702c:	2200      	movs	r2, #0
 800702e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	3301      	adds	r3, #1
 8007034:	60fb      	str	r3, [r7, #12]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2b0f      	cmp	r3, #15
 800703a:	d9f2      	bls.n	8007022 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800703c:	2300      	movs	r3, #0
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	e009      	b.n	8007056 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	4413      	add	r3, r2
 8007048:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800704c:	2200      	movs	r2, #0
 800704e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	3301      	adds	r3, #1
 8007054:	60fb      	str	r3, [r7, #12]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800705c:	d3f1      	bcc.n	8007042 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2240      	movs	r2, #64	; 0x40
 8007082:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	331c      	adds	r3, #28
 80070ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070b2:	2100      	movs	r1, #0
 80070b4:	4618      	mov	r0, r3
 80070b6:	f005 f9d9 	bl	800c46c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80070c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070c4:	2100      	movs	r1, #0
 80070c6:	4618      	mov	r0, r3
 80070c8:	f005 f9d0 	bl	800c46c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f203 3326 	addw	r3, r3, #806	; 0x326
 80070d2:	2212      	movs	r2, #18
 80070d4:	2100      	movs	r1, #0
 80070d6:	4618      	mov	r0, r3
 80070d8:	f005 f9c8 	bl	800c46c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80070e2:	223e      	movs	r2, #62	; 0x3e
 80070e4:	2100      	movs	r1, #0
 80070e6:	4618      	mov	r0, r3
 80070e8:	f005 f9c0 	bl	800c46c <memset>

  return USBH_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b085      	sub	sp, #20
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d016      	beq.n	8007138 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10e      	bne.n	8007132 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800711a:	1c59      	adds	r1, r3, #1
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	33de      	adds	r3, #222	; 0xde
 8007126:	6839      	ldr	r1, [r7, #0]
 8007128:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800712c:	2300      	movs	r3, #0
 800712e:	73fb      	strb	r3, [r7, #15]
 8007130:	e004      	b.n	800713c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007132:	2302      	movs	r3, #2
 8007134:	73fb      	strb	r3, [r7, #15]
 8007136:	e001      	b.n	800713c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007138:	2302      	movs	r3, #2
 800713a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800713c:	7bfb      	ldrb	r3, [r7, #15]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800714a:	b480      	push	{r7}
 800714c:	b085      	sub	sp, #20
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	460b      	mov	r3, r1
 8007154:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007156:	2300      	movs	r3, #0
 8007158:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007160:	78fa      	ldrb	r2, [r7, #3]
 8007162:	429a      	cmp	r2, r3
 8007164:	d204      	bcs.n	8007170 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	78fa      	ldrb	r2, [r7, #3]
 800716a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800716e:	e001      	b.n	8007174 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007170:	2302      	movs	r3, #2
 8007172:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007174:	7bfb      	ldrb	r3, [r7, #15]
}
 8007176:	4618      	mov	r0, r3
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007182:	b480      	push	{r7}
 8007184:	b087      	sub	sp, #28
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
 800718a:	4608      	mov	r0, r1
 800718c:	4611      	mov	r1, r2
 800718e:	461a      	mov	r2, r3
 8007190:	4603      	mov	r3, r0
 8007192:	70fb      	strb	r3, [r7, #3]
 8007194:	460b      	mov	r3, r1
 8007196:	70bb      	strb	r3, [r7, #2]
 8007198:	4613      	mov	r3, r2
 800719a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800719c:	2300      	movs	r3, #0
 800719e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80071a0:	2300      	movs	r3, #0
 80071a2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80071aa:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80071ac:	e025      	b.n	80071fa <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80071ae:	7dfb      	ldrb	r3, [r7, #23]
 80071b0:	221a      	movs	r2, #26
 80071b2:	fb02 f303 	mul.w	r3, r2, r3
 80071b6:	3308      	adds	r3, #8
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	4413      	add	r3, r2
 80071bc:	3302      	adds	r3, #2
 80071be:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	795b      	ldrb	r3, [r3, #5]
 80071c4:	78fa      	ldrb	r2, [r7, #3]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d002      	beq.n	80071d0 <USBH_FindInterface+0x4e>
 80071ca:	78fb      	ldrb	r3, [r7, #3]
 80071cc:	2bff      	cmp	r3, #255	; 0xff
 80071ce:	d111      	bne.n	80071f4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80071d4:	78ba      	ldrb	r2, [r7, #2]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d002      	beq.n	80071e0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071da:	78bb      	ldrb	r3, [r7, #2]
 80071dc:	2bff      	cmp	r3, #255	; 0xff
 80071de:	d109      	bne.n	80071f4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071e4:	787a      	ldrb	r2, [r7, #1]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d002      	beq.n	80071f0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80071ea:	787b      	ldrb	r3, [r7, #1]
 80071ec:	2bff      	cmp	r3, #255	; 0xff
 80071ee:	d101      	bne.n	80071f4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80071f0:	7dfb      	ldrb	r3, [r7, #23]
 80071f2:	e006      	b.n	8007202 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80071f4:	7dfb      	ldrb	r3, [r7, #23]
 80071f6:	3301      	adds	r3, #1
 80071f8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80071fa:	7dfb      	ldrb	r3, [r7, #23]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d9d6      	bls.n	80071ae <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007200:	23ff      	movs	r3, #255	; 0xff
}
 8007202:	4618      	mov	r0, r3
 8007204:	371c      	adds	r7, #28
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b082      	sub	sp, #8
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f004 feb2 	bl	800bf80 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800721c:	2101      	movs	r1, #1
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f004 ffcb 	bl	800c1ba <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
	...

08007230 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b088      	sub	sp, #32
 8007234:	af04      	add	r7, sp, #16
 8007236:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007238:	2302      	movs	r3, #2
 800723a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800723c:	2300      	movs	r3, #0
 800723e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b01      	cmp	r3, #1
 800724a:	d102      	bne.n	8007252 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2203      	movs	r2, #3
 8007250:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	b2db      	uxtb	r3, r3
 8007258:	2b0b      	cmp	r3, #11
 800725a:	f200 8247 	bhi.w	80076ec <USBH_Process+0x4bc>
 800725e:	a201      	add	r2, pc, #4	; (adr r2, 8007264 <USBH_Process+0x34>)
 8007260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007264:	08007295 	.word	0x08007295
 8007268:	080072e3 	.word	0x080072e3
 800726c:	08007367 	.word	0x08007367
 8007270:	0800766b 	.word	0x0800766b
 8007274:	080076ed 	.word	0x080076ed
 8007278:	08007427 	.word	0x08007427
 800727c:	080075f5 	.word	0x080075f5
 8007280:	08007479 	.word	0x08007479
 8007284:	080074b5 	.word	0x080074b5
 8007288:	080074ef 	.word	0x080074ef
 800728c:	0800754d 	.word	0x0800754d
 8007290:	08007653 	.word	0x08007653
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800729a:	b2db      	uxtb	r3, r3
 800729c:	2b00      	cmp	r3, #0
 800729e:	f000 8227 	beq.w	80076f0 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80072a8:	20c8      	movs	r0, #200	; 0xc8
 80072aa:	f004 ffd0 	bl	800c24e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f004 fec3 	bl	800c03a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80072d8:	2300      	movs	r3, #0
 80072da:	2200      	movs	r2, #0
 80072dc:	f001 ff0c 	bl	80090f8 <osMessageQueuePut>
#endif
#endif
      }
      break;
 80072e0:	e206      	b.n	80076f0 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d107      	bne.n	80072fc <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2202      	movs	r2, #2
 80072f8:	701a      	strb	r2, [r3, #0]
 80072fa:	e025      	b.n	8007348 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007302:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007306:	d914      	bls.n	8007332 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800730e:	3301      	adds	r3, #1
 8007310:	b2da      	uxtb	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800731e:	2b03      	cmp	r3, #3
 8007320:	d903      	bls.n	800732a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	220d      	movs	r2, #13
 8007326:	701a      	strb	r2, [r3, #0]
 8007328:	e00e      	b.n	8007348 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	701a      	strb	r2, [r3, #0]
 8007330:	e00a      	b.n	8007348 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007338:	f103 020a 	add.w	r2, r3, #10
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007342:	200a      	movs	r0, #10
 8007344:	f004 ff83 	bl	800c24e <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800735c:	2300      	movs	r3, #0
 800735e:	2200      	movs	r2, #0
 8007360:	f001 feca 	bl	80090f8 <osMessageQueuePut>
#endif
#endif
      break;
 8007364:	e1cb      	b.n	80076fe <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800736c:	2b00      	cmp	r3, #0
 800736e:	d005      	beq.n	800737c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007376:	2104      	movs	r1, #4
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800737c:	2064      	movs	r0, #100	; 0x64
 800737e:	f004 ff66 	bl	800c24e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f004 fe32 	bl	800bfec <USBH_LL_GetSpeed>
 8007388:	4603      	mov	r3, r0
 800738a:	461a      	mov	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2205      	movs	r2, #5
 8007396:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007398:	2100      	movs	r1, #0
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f001 fc9b 	bl	8008cd6 <USBH_AllocPipe>
 80073a0:	4603      	mov	r3, r0
 80073a2:	461a      	mov	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80073a8:	2180      	movs	r1, #128	; 0x80
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f001 fc93 	bl	8008cd6 <USBH_AllocPipe>
 80073b0:	4603      	mov	r3, r0
 80073b2:	461a      	mov	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	7919      	ldrb	r1, [r3, #4]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80073cc:	b292      	uxth	r2, r2
 80073ce:	9202      	str	r2, [sp, #8]
 80073d0:	2200      	movs	r2, #0
 80073d2:	9201      	str	r2, [sp, #4]
 80073d4:	9300      	str	r3, [sp, #0]
 80073d6:	4603      	mov	r3, r0
 80073d8:	2280      	movs	r2, #128	; 0x80
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f001 fc4c 	bl	8008c78 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	7959      	ldrb	r1, [r3, #5]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80073f4:	b292      	uxth	r2, r2
 80073f6:	9202      	str	r2, [sp, #8]
 80073f8:	2200      	movs	r2, #0
 80073fa:	9201      	str	r2, [sp, #4]
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	4603      	mov	r3, r0
 8007400:	2200      	movs	r2, #0
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f001 fc38 	bl	8008c78 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800741c:	2300      	movs	r3, #0
 800741e:	2200      	movs	r2, #0
 8007420:	f001 fe6a 	bl	80090f8 <osMessageQueuePut>
#endif
#endif
      break;
 8007424:	e16b      	b.n	80076fe <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f96e 	bl	8007708 <USBH_HandleEnum>
 800742c:	4603      	mov	r3, r0
 800742e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007430:	7bbb      	ldrb	r3, [r7, #14]
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	f040 815d 	bne.w	80076f4 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007448:	2b01      	cmp	r3, #1
 800744a:	d103      	bne.n	8007454 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2208      	movs	r2, #8
 8007450:	701a      	strb	r2, [r3, #0]
 8007452:	e002      	b.n	800745a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2207      	movs	r2, #7
 8007458:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2205      	movs	r2, #5
 800745e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800746e:	2300      	movs	r3, #0
 8007470:	2200      	movs	r2, #0
 8007472:	f001 fe41 	bl	80090f8 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8007476:	e13d      	b.n	80076f4 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800747e:	2b00      	cmp	r3, #0
 8007480:	f000 813a 	beq.w	80076f8 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800748a:	2101      	movs	r1, #1
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2208      	movs	r2, #8
 8007494:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2205      	movs	r2, #5
 800749a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80074aa:	2300      	movs	r3, #0
 80074ac:	2200      	movs	r2, #0
 80074ae:	f001 fe23 	bl	80090f8 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 80074b2:	e121      	b.n	80076f8 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	4619      	mov	r1, r3
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fd15 	bl	8007eee <USBH_SetCfg>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d102      	bne.n	80074d0 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2209      	movs	r2, #9
 80074ce:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80074e4:	2300      	movs	r3, #0
 80074e6:	2200      	movs	r2, #0
 80074e8:	f001 fe06 	bl	80090f8 <osMessageQueuePut>
#endif
#endif
      break;
 80074ec:	e107      	b.n	80076fe <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80074f4:	f003 0320 	and.w	r3, r3, #32
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d015      	beq.n	8007528 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80074fc:	2101      	movs	r1, #1
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fd18 	bl	8007f34 <USBH_SetFeature>
 8007504:	4603      	mov	r3, r0
 8007506:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007508:	7bbb      	ldrb	r3, [r7, #14]
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	d103      	bne.n	8007518 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	220a      	movs	r2, #10
 8007514:	701a      	strb	r2, [r3, #0]
 8007516:	e00a      	b.n	800752e <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8007518:	7bbb      	ldrb	r3, [r7, #14]
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b03      	cmp	r3, #3
 800751e:	d106      	bne.n	800752e <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	220a      	movs	r2, #10
 8007524:	701a      	strb	r2, [r3, #0]
 8007526:	e002      	b.n	800752e <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	220a      	movs	r2, #10
 800752c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007542:	2300      	movs	r3, #0
 8007544:	2200      	movs	r2, #0
 8007546:	f001 fdd7 	bl	80090f8 <osMessageQueuePut>
#endif
#endif
      break;
 800754a:	e0d8      	b.n	80076fe <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007552:	2b00      	cmp	r3, #0
 8007554:	d03f      	beq.n	80075d6 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800755e:	2300      	movs	r3, #0
 8007560:	73fb      	strb	r3, [r7, #15]
 8007562:	e016      	b.n	8007592 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007564:	7bfa      	ldrb	r2, [r7, #15]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	32de      	adds	r2, #222	; 0xde
 800756a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800756e:	791a      	ldrb	r2, [r3, #4]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007576:	429a      	cmp	r2, r3
 8007578:	d108      	bne.n	800758c <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800757a:	7bfa      	ldrb	r2, [r7, #15]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	32de      	adds	r2, #222	; 0xde
 8007580:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800758a:	e005      	b.n	8007598 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800758c:	7bfb      	ldrb	r3, [r7, #15]
 800758e:	3301      	adds	r3, #1
 8007590:	73fb      	strb	r3, [r7, #15]
 8007592:	7bfb      	ldrb	r3, [r7, #15]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d0e5      	beq.n	8007564 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d016      	beq.n	80075d0 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	4798      	blx	r3
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d109      	bne.n	80075c8 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2206      	movs	r2, #6
 80075b8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075c0:	2103      	movs	r1, #3
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	4798      	blx	r3
 80075c6:	e006      	b.n	80075d6 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	220d      	movs	r2, #13
 80075cc:	701a      	strb	r2, [r3, #0]
 80075ce:	e002      	b.n	80075d6 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	220d      	movs	r2, #13
 80075d4:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2205      	movs	r2, #5
 80075da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80075ea:	2300      	movs	r3, #0
 80075ec:	2200      	movs	r2, #0
 80075ee:	f001 fd83 	bl	80090f8 <osMessageQueuePut>
#endif
#endif
      break;
 80075f2:	e084      	b.n	80076fe <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d017      	beq.n	800762e <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	4798      	blx	r3
 800760a:	4603      	mov	r3, r0
 800760c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800760e:	7bbb      	ldrb	r3, [r7, #14]
 8007610:	b2db      	uxtb	r3, r3
 8007612:	2b00      	cmp	r3, #0
 8007614:	d103      	bne.n	800761e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	220b      	movs	r2, #11
 800761a:	701a      	strb	r2, [r3, #0]
 800761c:	e00a      	b.n	8007634 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800761e:	7bbb      	ldrb	r3, [r7, #14]
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b02      	cmp	r3, #2
 8007624:	d106      	bne.n	8007634 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	220d      	movs	r2, #13
 800762a:	701a      	strb	r2, [r3, #0]
 800762c:	e002      	b.n	8007634 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	220d      	movs	r2, #13
 8007632:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2205      	movs	r2, #5
 8007638:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007648:	2300      	movs	r3, #0
 800764a:	2200      	movs	r2, #0
 800764c:	f001 fd54 	bl	80090f8 <osMessageQueuePut>
#endif
#endif
      break;
 8007650:	e055      	b.n	80076fe <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007658:	2b00      	cmp	r3, #0
 800765a:	d04f      	beq.n	80076fc <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007662:	695b      	ldr	r3, [r3, #20]
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	4798      	blx	r3
      }
      break;
 8007668:	e048      	b.n	80076fc <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7ff fccc 	bl	8007010 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800767e:	2b00      	cmp	r3, #0
 8007680:	d009      	beq.n	8007696 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800769c:	2b00      	cmp	r3, #0
 800769e:	d005      	beq.n	80076ac <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076a6:	2105      	movs	r1, #5
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d107      	bne.n	80076c8 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f7ff fda4 	bl	800720e <USBH_Start>
 80076c6:	e002      	b.n	80076ce <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f004 fc59 	bl	800bf80 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80076e2:	2300      	movs	r3, #0
 80076e4:	2200      	movs	r2, #0
 80076e6:	f001 fd07 	bl	80090f8 <osMessageQueuePut>
#endif
#endif
      break;
 80076ea:	e008      	b.n	80076fe <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 80076ec:	bf00      	nop
 80076ee:	e006      	b.n	80076fe <USBH_Process+0x4ce>
      break;
 80076f0:	bf00      	nop
 80076f2:	e004      	b.n	80076fe <USBH_Process+0x4ce>
      break;
 80076f4:	bf00      	nop
 80076f6:	e002      	b.n	80076fe <USBH_Process+0x4ce>
    break;
 80076f8:	bf00      	nop
 80076fa:	e000      	b.n	80076fe <USBH_Process+0x4ce>
      break;
 80076fc:	bf00      	nop
  }
  return USBH_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b088      	sub	sp, #32
 800770c:	af04      	add	r7, sp, #16
 800770e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007710:	2301      	movs	r3, #1
 8007712:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007714:	2301      	movs	r3, #1
 8007716:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	785b      	ldrb	r3, [r3, #1]
 800771c:	2b07      	cmp	r3, #7
 800771e:	f200 8208 	bhi.w	8007b32 <USBH_HandleEnum+0x42a>
 8007722:	a201      	add	r2, pc, #4	; (adr r2, 8007728 <USBH_HandleEnum+0x20>)
 8007724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007728:	08007749 	.word	0x08007749
 800772c:	08007807 	.word	0x08007807
 8007730:	08007871 	.word	0x08007871
 8007734:	080078ff 	.word	0x080078ff
 8007738:	08007969 	.word	0x08007969
 800773c:	080079d9 	.word	0x080079d9
 8007740:	08007a75 	.word	0x08007a75
 8007744:	08007af3 	.word	0x08007af3
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007748:	2108      	movs	r1, #8
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 faec 	bl	8007d28 <USBH_Get_DevDesc>
 8007750:	4603      	mov	r3, r0
 8007752:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007754:	7bbb      	ldrb	r3, [r7, #14]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d130      	bne.n	80077bc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	7919      	ldrb	r1, [r3, #4]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800777e:	b292      	uxth	r2, r2
 8007780:	9202      	str	r2, [sp, #8]
 8007782:	2200      	movs	r2, #0
 8007784:	9201      	str	r2, [sp, #4]
 8007786:	9300      	str	r3, [sp, #0]
 8007788:	4603      	mov	r3, r0
 800778a:	2280      	movs	r2, #128	; 0x80
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f001 fa73 	bl	8008c78 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	7959      	ldrb	r1, [r3, #5]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80077a6:	b292      	uxth	r2, r2
 80077a8:	9202      	str	r2, [sp, #8]
 80077aa:	2200      	movs	r2, #0
 80077ac:	9201      	str	r2, [sp, #4]
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	4603      	mov	r3, r0
 80077b2:	2200      	movs	r2, #0
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f001 fa5f 	bl	8008c78 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80077ba:	e1bc      	b.n	8007b36 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077bc:	7bbb      	ldrb	r3, [r7, #14]
 80077be:	2b03      	cmp	r3, #3
 80077c0:	f040 81b9 	bne.w	8007b36 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077ca:	3301      	adds	r3, #1
 80077cc:	b2da      	uxtb	r2, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d903      	bls.n	80077e6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	220d      	movs	r2, #13
 80077e2:	701a      	strb	r2, [r3, #0]
      break;
 80077e4:	e1a7      	b.n	8007b36 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	795b      	ldrb	r3, [r3, #5]
 80077ea:	4619      	mov	r1, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f001 fa93 	bl	8008d18 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	791b      	ldrb	r3, [r3, #4]
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f001 fa8d 	bl	8008d18 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	701a      	strb	r2, [r3, #0]
      break;
 8007804:	e197      	b.n	8007b36 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007806:	2112      	movs	r1, #18
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fa8d 	bl	8007d28 <USBH_Get_DevDesc>
 800780e:	4603      	mov	r3, r0
 8007810:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007812:	7bbb      	ldrb	r3, [r7, #14]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d103      	bne.n	8007820 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2202      	movs	r2, #2
 800781c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800781e:	e18c      	b.n	8007b3a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007820:	7bbb      	ldrb	r3, [r7, #14]
 8007822:	2b03      	cmp	r3, #3
 8007824:	f040 8189 	bne.w	8007b3a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800782e:	3301      	adds	r3, #1
 8007830:	b2da      	uxtb	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800783e:	2b03      	cmp	r3, #3
 8007840:	d903      	bls.n	800784a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	220d      	movs	r2, #13
 8007846:	701a      	strb	r2, [r3, #0]
      break;
 8007848:	e177      	b.n	8007b3a <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	795b      	ldrb	r3, [r3, #5]
 800784e:	4619      	mov	r1, r3
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f001 fa61 	bl	8008d18 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	791b      	ldrb	r3, [r3, #4]
 800785a:	4619      	mov	r1, r3
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f001 fa5b 	bl	8008d18 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	701a      	strb	r2, [r3, #0]
      break;
 800786e:	e164      	b.n	8007b3a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007870:	2101      	movs	r1, #1
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fb17 	bl	8007ea6 <USBH_SetAddress>
 8007878:	4603      	mov	r3, r0
 800787a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800787c:	7bbb      	ldrb	r3, [r7, #14]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d132      	bne.n	80078e8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007882:	2002      	movs	r0, #2
 8007884:	f004 fce3 	bl	800c24e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2203      	movs	r2, #3
 8007894:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	7919      	ldrb	r1, [r3, #4]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80078aa:	b292      	uxth	r2, r2
 80078ac:	9202      	str	r2, [sp, #8]
 80078ae:	2200      	movs	r2, #0
 80078b0:	9201      	str	r2, [sp, #4]
 80078b2:	9300      	str	r3, [sp, #0]
 80078b4:	4603      	mov	r3, r0
 80078b6:	2280      	movs	r2, #128	; 0x80
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f001 f9dd 	bl	8008c78 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	7959      	ldrb	r1, [r3, #5]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80078d2:	b292      	uxth	r2, r2
 80078d4:	9202      	str	r2, [sp, #8]
 80078d6:	2200      	movs	r2, #0
 80078d8:	9201      	str	r2, [sp, #4]
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	4603      	mov	r3, r0
 80078de:	2200      	movs	r2, #0
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f001 f9c9 	bl	8008c78 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80078e6:	e12a      	b.n	8007b3e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078e8:	7bbb      	ldrb	r3, [r7, #14]
 80078ea:	2b03      	cmp	r3, #3
 80078ec:	f040 8127 	bne.w	8007b3e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	220d      	movs	r2, #13
 80078f4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	705a      	strb	r2, [r3, #1]
      break;
 80078fc:	e11f      	b.n	8007b3e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80078fe:	2109      	movs	r1, #9
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fa3d 	bl	8007d80 <USBH_Get_CfgDesc>
 8007906:	4603      	mov	r3, r0
 8007908:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800790a:	7bbb      	ldrb	r3, [r7, #14]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d103      	bne.n	8007918 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2204      	movs	r2, #4
 8007914:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007916:	e114      	b.n	8007b42 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007918:	7bbb      	ldrb	r3, [r7, #14]
 800791a:	2b03      	cmp	r3, #3
 800791c:	f040 8111 	bne.w	8007b42 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007926:	3301      	adds	r3, #1
 8007928:	b2da      	uxtb	r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007936:	2b03      	cmp	r3, #3
 8007938:	d903      	bls.n	8007942 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	220d      	movs	r2, #13
 800793e:	701a      	strb	r2, [r3, #0]
      break;
 8007940:	e0ff      	b.n	8007b42 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	795b      	ldrb	r3, [r3, #5]
 8007946:	4619      	mov	r1, r3
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f001 f9e5 	bl	8008d18 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	791b      	ldrb	r3, [r3, #4]
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f001 f9df 	bl	8008d18 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	701a      	strb	r2, [r3, #0]
      break;
 8007966:	e0ec      	b.n	8007b42 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800796e:	4619      	mov	r1, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 fa05 	bl	8007d80 <USBH_Get_CfgDesc>
 8007976:	4603      	mov	r3, r0
 8007978:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800797a:	7bbb      	ldrb	r3, [r7, #14]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d103      	bne.n	8007988 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2205      	movs	r2, #5
 8007984:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007986:	e0de      	b.n	8007b46 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007988:	7bbb      	ldrb	r3, [r7, #14]
 800798a:	2b03      	cmp	r3, #3
 800798c:	f040 80db 	bne.w	8007b46 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007996:	3301      	adds	r3, #1
 8007998:	b2da      	uxtb	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079a6:	2b03      	cmp	r3, #3
 80079a8:	d903      	bls.n	80079b2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	220d      	movs	r2, #13
 80079ae:	701a      	strb	r2, [r3, #0]
      break;
 80079b0:	e0c9      	b.n	8007b46 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	795b      	ldrb	r3, [r3, #5]
 80079b6:	4619      	mov	r1, r3
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f001 f9ad 	bl	8008d18 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	791b      	ldrb	r3, [r3, #4]
 80079c2:	4619      	mov	r1, r3
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f001 f9a7 	bl	8008d18 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	701a      	strb	r2, [r3, #0]
      break;
 80079d6:	e0b6      	b.n	8007b46 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d036      	beq.n	8007a50 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80079ee:	23ff      	movs	r3, #255	; 0xff
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f9ef 	bl	8007dd4 <USBH_Get_StringDesc>
 80079f6:	4603      	mov	r3, r0
 80079f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80079fa:	7bbb      	ldrb	r3, [r7, #14]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d111      	bne.n	8007a24 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2206      	movs	r2, #6
 8007a04:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2205      	movs	r2, #5
 8007a0a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f001 fb6b 	bl	80090f8 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007a22:	e092      	b.n	8007b4a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a24:	7bbb      	ldrb	r3, [r7, #14]
 8007a26:	2b03      	cmp	r3, #3
 8007a28:	f040 808f 	bne.w	8007b4a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2206      	movs	r2, #6
 8007a30:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2205      	movs	r2, #5
 8007a36:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007a46:	2300      	movs	r3, #0
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f001 fb55 	bl	80090f8 <osMessageQueuePut>
      break;
 8007a4e:	e07c      	b.n	8007b4a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2206      	movs	r2, #6
 8007a54:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2205      	movs	r2, #5
 8007a5a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f001 fb43 	bl	80090f8 <osMessageQueuePut>
      break;
 8007a72:	e06a      	b.n	8007b4a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d027      	beq.n	8007ace <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007a8a:	23ff      	movs	r3, #255	; 0xff
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f9a1 	bl	8007dd4 <USBH_Get_StringDesc>
 8007a92:	4603      	mov	r3, r0
 8007a94:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a96:	7bbb      	ldrb	r3, [r7, #14]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d103      	bne.n	8007aa4 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2207      	movs	r2, #7
 8007aa0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007aa2:	e054      	b.n	8007b4e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007aa4:	7bbb      	ldrb	r3, [r7, #14]
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d151      	bne.n	8007b4e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2207      	movs	r2, #7
 8007aae:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2205      	movs	r2, #5
 8007ab4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f001 fb16 	bl	80090f8 <osMessageQueuePut>
      break;
 8007acc:	e03f      	b.n	8007b4e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2207      	movs	r2, #7
 8007ad2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2205      	movs	r2, #5
 8007ad8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007ae8:	2300      	movs	r3, #0
 8007aea:	2200      	movs	r2, #0
 8007aec:	f001 fb04 	bl	80090f8 <osMessageQueuePut>
      break;
 8007af0:	e02d      	b.n	8007b4e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d017      	beq.n	8007b2c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007b08:	23ff      	movs	r3, #255	; 0xff
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f962 	bl	8007dd4 <USBH_Get_StringDesc>
 8007b10:	4603      	mov	r3, r0
 8007b12:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b14:	7bbb      	ldrb	r3, [r7, #14]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d102      	bne.n	8007b20 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007b1e:	e018      	b.n	8007b52 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b20:	7bbb      	ldrb	r3, [r7, #14]
 8007b22:	2b03      	cmp	r3, #3
 8007b24:	d115      	bne.n	8007b52 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	73fb      	strb	r3, [r7, #15]
      break;
 8007b2a:	e012      	b.n	8007b52 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b30:	e00f      	b.n	8007b52 <USBH_HandleEnum+0x44a>

    default:
      break;
 8007b32:	bf00      	nop
 8007b34:	e00e      	b.n	8007b54 <USBH_HandleEnum+0x44c>
      break;
 8007b36:	bf00      	nop
 8007b38:	e00c      	b.n	8007b54 <USBH_HandleEnum+0x44c>
      break;
 8007b3a:	bf00      	nop
 8007b3c:	e00a      	b.n	8007b54 <USBH_HandleEnum+0x44c>
      break;
 8007b3e:	bf00      	nop
 8007b40:	e008      	b.n	8007b54 <USBH_HandleEnum+0x44c>
      break;
 8007b42:	bf00      	nop
 8007b44:	e006      	b.n	8007b54 <USBH_HandleEnum+0x44c>
      break;
 8007b46:	bf00      	nop
 8007b48:	e004      	b.n	8007b54 <USBH_HandleEnum+0x44c>
      break;
 8007b4a:	bf00      	nop
 8007b4c:	e002      	b.n	8007b54 <USBH_HandleEnum+0x44c>
      break;
 8007b4e:	bf00      	nop
 8007b50:	e000      	b.n	8007b54 <USBH_HandleEnum+0x44c>
      break;
 8007b52:	bf00      	nop
  }
  return Status;
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop

08007b60 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	683a      	ldr	r2, [r7, #0]
 8007b6e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007b72:	bf00      	nop
 8007b74:	370c      	adds	r7, #12
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b082      	sub	sp, #8
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b8c:	1c5a      	adds	r2, r3, #1
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f804 	bl	8007ba2 <USBH_HandleSof>
}
 8007b9a:	bf00      	nop
 8007b9c:	3708      	adds	r7, #8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b082      	sub	sp, #8
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	2b0b      	cmp	r3, #11
 8007bb2:	d10a      	bne.n	8007bca <USBH_HandleSof+0x28>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d005      	beq.n	8007bca <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	4798      	blx	r3
  }
}
 8007bca:	bf00      	nop
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b082      	sub	sp, #8
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2201      	movs	r2, #1
 8007be6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f001 fa7d 	bl	80090f8 <osMessageQueuePut>
#endif
#endif

  return;
 8007bfe:	bf00      	nop
}
 8007c00:	3708      	adds	r7, #8
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b083      	sub	sp, #12
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007c16:	bf00      	nop
}
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b082      	sub	sp, #8
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007c56:	2300      	movs	r3, #0
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f001 fa4d 	bl	80090f8 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f004 f994 	bl	800bfb6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	791b      	ldrb	r3, [r3, #4]
 8007c92:	4619      	mov	r1, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f001 f83f 	bl	8008d18 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	795b      	ldrb	r3, [r3, #5]
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f001 f839 	bl	8008d18 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007cba:	2300      	movs	r3, #0
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f001 fa1b 	bl	80090f8 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f001 fa67 	bl	80091b8 <osMessageQueueGet>
 8007cea:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1f0      	bne.n	8007cd4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f7ff fa9c 	bl	8007230 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007cf8:	e7ec      	b.n	8007cd4 <USBH_Process_OS+0x8>

08007cfa <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b082      	sub	sp, #8
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007d16:	2300      	movs	r3, #0
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f001 f9ed 	bl	80090f8 <osMessageQueuePut>
#endif

  return USBH_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af02      	add	r7, sp, #8
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	460b      	mov	r3, r1
 8007d32:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007d34:	887b      	ldrh	r3, [r7, #2]
 8007d36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d3a:	d901      	bls.n	8007d40 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e01b      	b.n	8007d78 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007d46:	887b      	ldrh	r3, [r7, #2]
 8007d48:	9300      	str	r3, [sp, #0]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d50:	2100      	movs	r1, #0
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f872 	bl	8007e3c <USBH_GetDescriptor>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d109      	bne.n	8007d76 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007d68:	887a      	ldrh	r2, [r7, #2]
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f929 	bl	8007fc4 <USBH_ParseDevDesc>
 8007d72:	4603      	mov	r3, r0
 8007d74:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af02      	add	r7, sp, #8
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	331c      	adds	r3, #28
 8007d90:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007d92:	887b      	ldrh	r3, [r7, #2]
 8007d94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d98:	d901      	bls.n	8007d9e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e016      	b.n	8007dcc <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007d9e:	887b      	ldrh	r3, [r7, #2]
 8007da0:	9300      	str	r3, [sp, #0]
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007da8:	2100      	movs	r1, #0
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f846 	bl	8007e3c <USBH_GetDescriptor>
 8007db0:	4603      	mov	r3, r0
 8007db2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d107      	bne.n	8007dca <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007dba:	887b      	ldrh	r3, [r7, #2]
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	68b9      	ldr	r1, [r7, #8]
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 f9b3 	bl	800812c <USBH_ParseCfgDesc>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b088      	sub	sp, #32
 8007dd8:	af02      	add	r7, sp, #8
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	607a      	str	r2, [r7, #4]
 8007dde:	461a      	mov	r2, r3
 8007de0:	460b      	mov	r3, r1
 8007de2:	72fb      	strb	r3, [r7, #11]
 8007de4:	4613      	mov	r3, r2
 8007de6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007de8:	893b      	ldrh	r3, [r7, #8]
 8007dea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dee:	d802      	bhi.n	8007df6 <USBH_Get_StringDesc+0x22>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d101      	bne.n	8007dfa <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e01c      	b.n	8007e34 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007dfa:	7afb      	ldrb	r3, [r7, #11]
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007e02:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007e0a:	893b      	ldrh	r3, [r7, #8]
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	460b      	mov	r3, r1
 8007e10:	2100      	movs	r1, #0
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f000 f812 	bl	8007e3c <USBH_GetDescriptor>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007e1c:	7dfb      	ldrb	r3, [r7, #23]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d107      	bne.n	8007e32 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007e28:	893a      	ldrh	r2, [r7, #8]
 8007e2a:	6879      	ldr	r1, [r7, #4]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f000 fb93 	bl	8008558 <USBH_ParseStringDesc>
  }

  return status;
 8007e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3718      	adds	r7, #24
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	607b      	str	r3, [r7, #4]
 8007e46:	460b      	mov	r3, r1
 8007e48:	72fb      	strb	r3, [r7, #11]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	789b      	ldrb	r3, [r3, #2]
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d11c      	bne.n	8007e90 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007e56:	7afb      	ldrb	r3, [r7, #11]
 8007e58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2206      	movs	r2, #6
 8007e66:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	893a      	ldrh	r2, [r7, #8]
 8007e6c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007e6e:	893b      	ldrh	r3, [r7, #8]
 8007e70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007e74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e78:	d104      	bne.n	8007e84 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f240 4209 	movw	r2, #1033	; 0x409
 8007e80:	829a      	strh	r2, [r3, #20]
 8007e82:	e002      	b.n	8007e8a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2200      	movs	r2, #0
 8007e88:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	8b3a      	ldrh	r2, [r7, #24]
 8007e8e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007e90:	8b3b      	ldrh	r3, [r7, #24]
 8007e92:	461a      	mov	r2, r3
 8007e94:	6879      	ldr	r1, [r7, #4]
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f000 fbac 	bl	80085f4 <USBH_CtlReq>
 8007e9c:	4603      	mov	r3, r0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b082      	sub	sp, #8
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
 8007eae:	460b      	mov	r3, r1
 8007eb0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	789b      	ldrb	r3, [r3, #2]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d10f      	bne.n	8007eda <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2205      	movs	r2, #5
 8007ec4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007ec6:	78fb      	ldrb	r3, [r7, #3]
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007eda:	2200      	movs	r2, #0
 8007edc:	2100      	movs	r1, #0
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fb88 	bl	80085f4 <USBH_CtlReq>
 8007ee4:	4603      	mov	r3, r0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b082      	sub	sp, #8
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	789b      	ldrb	r3, [r3, #2]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d10e      	bne.n	8007f20 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2209      	movs	r2, #9
 8007f0c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	887a      	ldrh	r2, [r7, #2]
 8007f12:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007f20:	2200      	movs	r2, #0
 8007f22:	2100      	movs	r1, #0
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fb65 	bl	80085f4 <USBH_CtlReq>
 8007f2a:	4603      	mov	r3, r0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	789b      	ldrb	r3, [r3, #2]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d10f      	bne.n	8007f68 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2203      	movs	r2, #3
 8007f52:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007f54:	78fb      	ldrb	r3, [r7, #3]
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007f68:	2200      	movs	r2, #0
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fb41 	bl	80085f4 <USBH_CtlReq>
 8007f72:	4603      	mov	r3, r0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	460b      	mov	r3, r1
 8007f86:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	789b      	ldrb	r3, [r3, #2]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d10f      	bne.n	8007fb0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2202      	movs	r2, #2
 8007f94:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007fa2:	78fb      	ldrb	r3, [r7, #3]
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fb1d 	bl	80085f4 <USBH_CtlReq>
 8007fba:	4603      	mov	r3, r0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3708      	adds	r7, #8
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b087      	sub	sp, #28
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f203 3326 	addw	r3, r3, #806	; 0x326
 8007fd8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d101      	bne.n	8007fe8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	e098      	b.n	800811a <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	781a      	ldrb	r2, [r3, #0]
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	785a      	ldrb	r2, [r3, #1]
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	3302      	adds	r3, #2
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	3303      	adds	r3, #3
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	b29b      	uxth	r3, r3
 8008008:	021b      	lsls	r3, r3, #8
 800800a:	b29b      	uxth	r3, r3
 800800c:	4313      	orrs	r3, r2
 800800e:	b29a      	uxth	r2, r3
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	791a      	ldrb	r2, [r3, #4]
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	795a      	ldrb	r2, [r3, #5]
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	799a      	ldrb	r2, [r3, #6]
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	79da      	ldrb	r2, [r3, #7]
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800803a:	2b00      	cmp	r3, #0
 800803c:	d004      	beq.n	8008048 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008044:	2b01      	cmp	r3, #1
 8008046:	d11b      	bne.n	8008080 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	79db      	ldrb	r3, [r3, #7]
 800804c:	2b20      	cmp	r3, #32
 800804e:	dc0f      	bgt.n	8008070 <USBH_ParseDevDesc+0xac>
 8008050:	2b08      	cmp	r3, #8
 8008052:	db0f      	blt.n	8008074 <USBH_ParseDevDesc+0xb0>
 8008054:	3b08      	subs	r3, #8
 8008056:	4a34      	ldr	r2, [pc, #208]	; (8008128 <USBH_ParseDevDesc+0x164>)
 8008058:	fa22 f303 	lsr.w	r3, r2, r3
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	2b00      	cmp	r3, #0
 8008062:	bf14      	ite	ne
 8008064:	2301      	movne	r3, #1
 8008066:	2300      	moveq	r3, #0
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d106      	bne.n	800807c <USBH_ParseDevDesc+0xb8>
 800806e:	e001      	b.n	8008074 <USBH_ParseDevDesc+0xb0>
 8008070:	2b40      	cmp	r3, #64	; 0x40
 8008072:	d003      	beq.n	800807c <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	2208      	movs	r2, #8
 8008078:	71da      	strb	r2, [r3, #7]
        break;
 800807a:	e000      	b.n	800807e <USBH_ParseDevDesc+0xba>
        break;
 800807c:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800807e:	e00e      	b.n	800809e <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008086:	2b02      	cmp	r3, #2
 8008088:	d107      	bne.n	800809a <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	79db      	ldrb	r3, [r3, #7]
 800808e:	2b08      	cmp	r3, #8
 8008090:	d005      	beq.n	800809e <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	2208      	movs	r2, #8
 8008096:	71da      	strb	r2, [r3, #7]
 8008098:	e001      	b.n	800809e <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800809a:	2303      	movs	r3, #3
 800809c:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800809e:	88fb      	ldrh	r3, [r7, #6]
 80080a0:	2b08      	cmp	r3, #8
 80080a2:	d939      	bls.n	8008118 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	3308      	adds	r3, #8
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	3309      	adds	r3, #9
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	021b      	lsls	r3, r3, #8
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	4313      	orrs	r3, r2
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	330a      	adds	r3, #10
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	330b      	adds	r3, #11
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	021b      	lsls	r3, r3, #8
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	4313      	orrs	r3, r2
 80080d6:	b29a      	uxth	r2, r3
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	330c      	adds	r3, #12
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	330d      	adds	r3, #13
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	021b      	lsls	r3, r3, #8
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	4313      	orrs	r3, r2
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	7b9a      	ldrb	r2, [r3, #14]
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	7bda      	ldrb	r2, [r3, #15]
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	7c1a      	ldrb	r2, [r3, #16]
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	7c5a      	ldrb	r2, [r3, #17]
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008118:	7dfb      	ldrb	r3, [r7, #23]
}
 800811a:	4618      	mov	r0, r3
 800811c:	371c      	adds	r7, #28
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	01000101 	.word	0x01000101

0800812c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b08c      	sub	sp, #48	; 0x30
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	4613      	mov	r3, r2
 8008138:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008140:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008148:	2300      	movs	r3, #0
 800814a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800814e:	2300      	movs	r3, #0
 8008150:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d101      	bne.n	800815e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800815a:	2302      	movs	r3, #2
 800815c:	e0db      	b.n	8008316 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	781a      	ldrb	r2, [r3, #0]
 8008166:	6a3b      	ldr	r3, [r7, #32]
 8008168:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	785a      	ldrb	r2, [r3, #1]
 800816e:	6a3b      	ldr	r3, [r7, #32]
 8008170:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	3302      	adds	r3, #2
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	b29a      	uxth	r2, r3
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	3303      	adds	r3, #3
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	b29b      	uxth	r3, r3
 8008182:	021b      	lsls	r3, r3, #8
 8008184:	b29b      	uxth	r3, r3
 8008186:	4313      	orrs	r3, r2
 8008188:	b29b      	uxth	r3, r3
 800818a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800818e:	bf28      	it	cs
 8008190:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008194:	b29a      	uxth	r2, r3
 8008196:	6a3b      	ldr	r3, [r7, #32]
 8008198:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	791a      	ldrb	r2, [r3, #4]
 800819e:	6a3b      	ldr	r3, [r7, #32]
 80081a0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	795a      	ldrb	r2, [r3, #5]
 80081a6:	6a3b      	ldr	r3, [r7, #32]
 80081a8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	799a      	ldrb	r2, [r3, #6]
 80081ae:	6a3b      	ldr	r3, [r7, #32]
 80081b0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	79da      	ldrb	r2, [r3, #7]
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	7a1a      	ldrb	r2, [r3, #8]
 80081be:	6a3b      	ldr	r3, [r7, #32]
 80081c0:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80081c2:	6a3b      	ldr	r3, [r7, #32]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	2b09      	cmp	r3, #9
 80081c8:	d002      	beq.n	80081d0 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80081ca:	6a3b      	ldr	r3, [r7, #32]
 80081cc:	2209      	movs	r2, #9
 80081ce:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80081d0:	88fb      	ldrh	r3, [r7, #6]
 80081d2:	2b09      	cmp	r3, #9
 80081d4:	f240 809d 	bls.w	8008312 <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 80081d8:	2309      	movs	r3, #9
 80081da:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80081dc:	2300      	movs	r3, #0
 80081de:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80081e0:	e081      	b.n	80082e6 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80081e2:	f107 0316 	add.w	r3, r7, #22
 80081e6:	4619      	mov	r1, r3
 80081e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081ea:	f000 f9e8 	bl	80085be <USBH_GetNextDesc>
 80081ee:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80081f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f2:	785b      	ldrb	r3, [r3, #1]
 80081f4:	2b04      	cmp	r3, #4
 80081f6:	d176      	bne.n	80082e6 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80081f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	2b09      	cmp	r3, #9
 80081fe:	d002      	beq.n	8008206 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008202:	2209      	movs	r2, #9
 8008204:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800820a:	221a      	movs	r2, #26
 800820c:	fb02 f303 	mul.w	r3, r2, r3
 8008210:	3308      	adds	r3, #8
 8008212:	6a3a      	ldr	r2, [r7, #32]
 8008214:	4413      	add	r3, r2
 8008216:	3302      	adds	r3, #2
 8008218:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800821a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800821c:	69f8      	ldr	r0, [r7, #28]
 800821e:	f000 f87e 	bl	800831e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008222:	2300      	movs	r3, #0
 8008224:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008228:	2300      	movs	r3, #0
 800822a:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800822c:	e043      	b.n	80082b6 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800822e:	f107 0316 	add.w	r3, r7, #22
 8008232:	4619      	mov	r1, r3
 8008234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008236:	f000 f9c2 	bl	80085be <USBH_GetNextDesc>
 800823a:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800823c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823e:	785b      	ldrb	r3, [r3, #1]
 8008240:	2b05      	cmp	r3, #5
 8008242:	d138      	bne.n	80082b6 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	795b      	ldrb	r3, [r3, #5]
 8008248:	2b01      	cmp	r3, #1
 800824a:	d113      	bne.n	8008274 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008250:	2b02      	cmp	r3, #2
 8008252:	d003      	beq.n	800825c <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	799b      	ldrb	r3, [r3, #6]
 8008258:	2b03      	cmp	r3, #3
 800825a:	d10b      	bne.n	8008274 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	79db      	ldrb	r3, [r3, #7]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10b      	bne.n	800827c <USBH_ParseCfgDesc+0x150>
 8008264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	2b09      	cmp	r3, #9
 800826a:	d007      	beq.n	800827c <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800826c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826e:	2209      	movs	r2, #9
 8008270:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008272:	e003      	b.n	800827c <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008276:	2207      	movs	r2, #7
 8008278:	701a      	strb	r2, [r3, #0]
 800827a:	e000      	b.n	800827e <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800827c:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800827e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008282:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008286:	3201      	adds	r2, #1
 8008288:	00d2      	lsls	r2, r2, #3
 800828a:	211a      	movs	r1, #26
 800828c:	fb01 f303 	mul.w	r3, r1, r3
 8008290:	4413      	add	r3, r2
 8008292:	3308      	adds	r3, #8
 8008294:	6a3a      	ldr	r2, [r7, #32]
 8008296:	4413      	add	r3, r2
 8008298:	3304      	adds	r3, #4
 800829a:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800829c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800829e:	69b9      	ldr	r1, [r7, #24]
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f000 f870 	bl	8008386 <USBH_ParseEPDesc>
 80082a6:	4603      	mov	r3, r0
 80082a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80082ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80082b0:	3301      	adds	r3, #1
 80082b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	791b      	ldrb	r3, [r3, #4]
 80082ba:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80082be:	429a      	cmp	r2, r3
 80082c0:	d204      	bcs.n	80082cc <USBH_ParseCfgDesc+0x1a0>
 80082c2:	6a3b      	ldr	r3, [r7, #32]
 80082c4:	885a      	ldrh	r2, [r3, #2]
 80082c6:	8afb      	ldrh	r3, [r7, #22]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d8b0      	bhi.n	800822e <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	791b      	ldrb	r3, [r3, #4]
 80082d0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d201      	bcs.n	80082dc <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 80082d8:	2303      	movs	r3, #3
 80082da:	e01c      	b.n	8008316 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 80082dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082e0:	3301      	adds	r3, #1
 80082e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80082e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d805      	bhi.n	80082fa <USBH_ParseCfgDesc+0x1ce>
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	885a      	ldrh	r2, [r3, #2]
 80082f2:	8afb      	ldrh	r3, [r7, #22]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	f63f af74 	bhi.w	80081e2 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	791b      	ldrb	r3, [r3, #4]
 80082fe:	2b02      	cmp	r3, #2
 8008300:	bf28      	it	cs
 8008302:	2302      	movcs	r3, #2
 8008304:	b2db      	uxtb	r3, r3
 8008306:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800830a:	429a      	cmp	r2, r3
 800830c:	d201      	bcs.n	8008312 <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800830e:	2303      	movs	r3, #3
 8008310:	e001      	b.n	8008316 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 8008312:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008316:	4618      	mov	r0, r3
 8008318:	3730      	adds	r7, #48	; 0x30
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800831e:	b480      	push	{r7}
 8008320:	b083      	sub	sp, #12
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	781a      	ldrb	r2, [r3, #0]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	785a      	ldrb	r2, [r3, #1]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	789a      	ldrb	r2, [r3, #2]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	78da      	ldrb	r2, [r3, #3]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	3304      	adds	r3, #4
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	2b02      	cmp	r3, #2
 8008350:	bf28      	it	cs
 8008352:	2302      	movcs	r3, #2
 8008354:	b2da      	uxtb	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	795a      	ldrb	r2, [r3, #5]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	799a      	ldrb	r2, [r3, #6]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	79da      	ldrb	r2, [r3, #7]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	7a1a      	ldrb	r2, [r3, #8]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	721a      	strb	r2, [r3, #8]
}
 800837a:	bf00      	nop
 800837c:	370c      	adds	r7, #12
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr

08008386 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008386:	b480      	push	{r7}
 8008388:	b087      	sub	sp, #28
 800838a:	af00      	add	r7, sp, #0
 800838c:	60f8      	str	r0, [r7, #12]
 800838e:	60b9      	str	r1, [r7, #8]
 8008390:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008392:	2300      	movs	r3, #0
 8008394:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	781a      	ldrb	r2, [r3, #0]
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	785a      	ldrb	r2, [r3, #1]
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	789a      	ldrb	r2, [r3, #2]
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	78da      	ldrb	r2, [r3, #3]
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	3304      	adds	r3, #4
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	b29a      	uxth	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	3305      	adds	r3, #5
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	021b      	lsls	r3, r3, #8
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	4313      	orrs	r3, r2
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	799a      	ldrb	r2, [r3, #6]
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	889b      	ldrh	r3, [r3, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d009      	beq.n	80083f6 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80083e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083ea:	d804      	bhi.n	80083f6 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80083f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083f4:	d901      	bls.n	80083fa <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 80083f6:	2303      	movs	r3, #3
 80083f8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008400:	2b00      	cmp	r3, #0
 8008402:	d136      	bne.n	8008472 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	78db      	ldrb	r3, [r3, #3]
 8008408:	f003 0303 	and.w	r3, r3, #3
 800840c:	2b02      	cmp	r3, #2
 800840e:	d108      	bne.n	8008422 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	889b      	ldrh	r3, [r3, #4]
 8008414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008418:	f240 8097 	bls.w	800854a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800841c:	2303      	movs	r3, #3
 800841e:	75fb      	strb	r3, [r7, #23]
 8008420:	e093      	b.n	800854a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	78db      	ldrb	r3, [r3, #3]
 8008426:	f003 0303 	and.w	r3, r3, #3
 800842a:	2b00      	cmp	r3, #0
 800842c:	d107      	bne.n	800843e <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	889b      	ldrh	r3, [r3, #4]
 8008432:	2b40      	cmp	r3, #64	; 0x40
 8008434:	f240 8089 	bls.w	800854a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008438:	2303      	movs	r3, #3
 800843a:	75fb      	strb	r3, [r7, #23]
 800843c:	e085      	b.n	800854a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	78db      	ldrb	r3, [r3, #3]
 8008442:	f003 0303 	and.w	r3, r3, #3
 8008446:	2b01      	cmp	r3, #1
 8008448:	d005      	beq.n	8008456 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	78db      	ldrb	r3, [r3, #3]
 800844e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008452:	2b03      	cmp	r3, #3
 8008454:	d10a      	bne.n	800846c <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	799b      	ldrb	r3, [r3, #6]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d003      	beq.n	8008466 <USBH_ParseEPDesc+0xe0>
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	799b      	ldrb	r3, [r3, #6]
 8008462:	2b10      	cmp	r3, #16
 8008464:	d970      	bls.n	8008548 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008466:	2303      	movs	r3, #3
 8008468:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800846a:	e06d      	b.n	8008548 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800846c:	2303      	movs	r3, #3
 800846e:	75fb      	strb	r3, [r7, #23]
 8008470:	e06b      	b.n	800854a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008478:	2b01      	cmp	r3, #1
 800847a:	d13c      	bne.n	80084f6 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	78db      	ldrb	r3, [r3, #3]
 8008480:	f003 0303 	and.w	r3, r3, #3
 8008484:	2b02      	cmp	r3, #2
 8008486:	d005      	beq.n	8008494 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	78db      	ldrb	r3, [r3, #3]
 800848c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008490:	2b00      	cmp	r3, #0
 8008492:	d106      	bne.n	80084a2 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	889b      	ldrh	r3, [r3, #4]
 8008498:	2b40      	cmp	r3, #64	; 0x40
 800849a:	d956      	bls.n	800854a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800849c:	2303      	movs	r3, #3
 800849e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80084a0:	e053      	b.n	800854a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	78db      	ldrb	r3, [r3, #3]
 80084a6:	f003 0303 	and.w	r3, r3, #3
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d10e      	bne.n	80084cc <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	799b      	ldrb	r3, [r3, #6]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d007      	beq.n	80084c6 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80084ba:	2b10      	cmp	r3, #16
 80084bc:	d803      	bhi.n	80084c6 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80084c2:	2b40      	cmp	r3, #64	; 0x40
 80084c4:	d941      	bls.n	800854a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80084c6:	2303      	movs	r3, #3
 80084c8:	75fb      	strb	r3, [r7, #23]
 80084ca:	e03e      	b.n	800854a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	78db      	ldrb	r3, [r3, #3]
 80084d0:	f003 0303 	and.w	r3, r3, #3
 80084d4:	2b03      	cmp	r3, #3
 80084d6:	d10b      	bne.n	80084f0 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	799b      	ldrb	r3, [r3, #6]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d004      	beq.n	80084ea <USBH_ParseEPDesc+0x164>
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	889b      	ldrh	r3, [r3, #4]
 80084e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084e8:	d32f      	bcc.n	800854a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80084ea:	2303      	movs	r3, #3
 80084ec:	75fb      	strb	r3, [r7, #23]
 80084ee:	e02c      	b.n	800854a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80084f0:	2303      	movs	r3, #3
 80084f2:	75fb      	strb	r3, [r7, #23]
 80084f4:	e029      	b.n	800854a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d120      	bne.n	8008542 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	78db      	ldrb	r3, [r3, #3]
 8008504:	f003 0303 	and.w	r3, r3, #3
 8008508:	2b00      	cmp	r3, #0
 800850a:	d106      	bne.n	800851a <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	889b      	ldrh	r3, [r3, #4]
 8008510:	2b08      	cmp	r3, #8
 8008512:	d01a      	beq.n	800854a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008514:	2303      	movs	r3, #3
 8008516:	75fb      	strb	r3, [r7, #23]
 8008518:	e017      	b.n	800854a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	78db      	ldrb	r3, [r3, #3]
 800851e:	f003 0303 	and.w	r3, r3, #3
 8008522:	2b03      	cmp	r3, #3
 8008524:	d10a      	bne.n	800853c <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	799b      	ldrb	r3, [r3, #6]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d003      	beq.n	8008536 <USBH_ParseEPDesc+0x1b0>
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	889b      	ldrh	r3, [r3, #4]
 8008532:	2b08      	cmp	r3, #8
 8008534:	d909      	bls.n	800854a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008536:	2303      	movs	r3, #3
 8008538:	75fb      	strb	r3, [r7, #23]
 800853a:	e006      	b.n	800854a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800853c:	2303      	movs	r3, #3
 800853e:	75fb      	strb	r3, [r7, #23]
 8008540:	e003      	b.n	800854a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008542:	2303      	movs	r3, #3
 8008544:	75fb      	strb	r3, [r7, #23]
 8008546:	e000      	b.n	800854a <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008548:	bf00      	nop
  }

  return status;
 800854a:	7dfb      	ldrb	r3, [r7, #23]
}
 800854c:	4618      	mov	r0, r3
 800854e:	371c      	adds	r7, #28
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008558:	b480      	push	{r7}
 800855a:	b087      	sub	sp, #28
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	4613      	mov	r3, r2
 8008564:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	3301      	adds	r3, #1
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	2b03      	cmp	r3, #3
 800856e:	d120      	bne.n	80085b2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	1e9a      	subs	r2, r3, #2
 8008576:	88fb      	ldrh	r3, [r7, #6]
 8008578:	4293      	cmp	r3, r2
 800857a:	bf28      	it	cs
 800857c:	4613      	movcs	r3, r2
 800857e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	3302      	adds	r3, #2
 8008584:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008586:	2300      	movs	r3, #0
 8008588:	82fb      	strh	r3, [r7, #22]
 800858a:	e00b      	b.n	80085a4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800858c:	8afb      	ldrh	r3, [r7, #22]
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	4413      	add	r3, r2
 8008592:	781a      	ldrb	r2, [r3, #0]
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	3301      	adds	r3, #1
 800859c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800859e:	8afb      	ldrh	r3, [r7, #22]
 80085a0:	3302      	adds	r3, #2
 80085a2:	82fb      	strh	r3, [r7, #22]
 80085a4:	8afa      	ldrh	r2, [r7, #22]
 80085a6:	8abb      	ldrh	r3, [r7, #20]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d3ef      	bcc.n	800858c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	2200      	movs	r2, #0
 80085b0:	701a      	strb	r2, [r3, #0]
  }
}
 80085b2:	bf00      	nop
 80085b4:	371c      	adds	r7, #28
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80085be:	b480      	push	{r7}
 80085c0:	b085      	sub	sp, #20
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	881a      	ldrh	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	4413      	add	r3, r2
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4413      	add	r3, r2
 80085e4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80085e6:	68fb      	ldr	r3, [r7, #12]
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3714      	adds	r7, #20
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b086      	sub	sp, #24
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	4613      	mov	r3, r2
 8008600:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008602:	2301      	movs	r3, #1
 8008604:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	789b      	ldrb	r3, [r3, #2]
 800860a:	2b01      	cmp	r3, #1
 800860c:	d002      	beq.n	8008614 <USBH_CtlReq+0x20>
 800860e:	2b02      	cmp	r3, #2
 8008610:	d01d      	beq.n	800864e <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8008612:	e043      	b.n	800869c <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	88fa      	ldrh	r2, [r7, #6]
 800861e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2201      	movs	r2, #1
 8008624:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2202      	movs	r2, #2
 800862a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800862c:	2301      	movs	r3, #1
 800862e:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2203      	movs	r2, #3
 8008634:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008644:	2300      	movs	r3, #0
 8008646:	2200      	movs	r2, #0
 8008648:	f000 fd56 	bl	80090f8 <osMessageQueuePut>
      break;
 800864c:	e026      	b.n	800869c <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	f000 f82a 	bl	80086a8 <USBH_HandleControl>
 8008654:	4603      	mov	r3, r0
 8008656:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008658:	7dfb      	ldrb	r3, [r7, #23]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d002      	beq.n	8008664 <USBH_CtlReq+0x70>
 800865e:	7dfb      	ldrb	r3, [r7, #23]
 8008660:	2b03      	cmp	r3, #3
 8008662:	d106      	bne.n	8008672 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2201      	movs	r2, #1
 8008668:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	761a      	strb	r2, [r3, #24]
 8008670:	e005      	b.n	800867e <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8008672:	7dfb      	ldrb	r3, [r7, #23]
 8008674:	2b02      	cmp	r3, #2
 8008676:	d102      	bne.n	800867e <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2201      	movs	r2, #1
 800867c:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2203      	movs	r2, #3
 8008682:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008692:	2300      	movs	r3, #0
 8008694:	2200      	movs	r2, #0
 8008696:	f000 fd2f 	bl	80090f8 <osMessageQueuePut>
      break;
 800869a:	bf00      	nop
  }
  return status;
 800869c:	7dfb      	ldrb	r3, [r7, #23]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3718      	adds	r7, #24
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
	...

080086a8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af02      	add	r7, sp, #8
 80086ae:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80086b0:	2301      	movs	r3, #1
 80086b2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80086b4:	2300      	movs	r3, #0
 80086b6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	7e1b      	ldrb	r3, [r3, #24]
 80086bc:	3b01      	subs	r3, #1
 80086be:	2b0a      	cmp	r3, #10
 80086c0:	f200 8229 	bhi.w	8008b16 <USBH_HandleControl+0x46e>
 80086c4:	a201      	add	r2, pc, #4	; (adr r2, 80086cc <USBH_HandleControl+0x24>)
 80086c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ca:	bf00      	nop
 80086cc:	080086f9 	.word	0x080086f9
 80086d0:	08008713 	.word	0x08008713
 80086d4:	080087b5 	.word	0x080087b5
 80086d8:	080087db 	.word	0x080087db
 80086dc:	08008867 	.word	0x08008867
 80086e0:	08008891 	.word	0x08008891
 80086e4:	08008953 	.word	0x08008953
 80086e8:	08008975 	.word	0x08008975
 80086ec:	08008a07 	.word	0x08008a07
 80086f0:	08008a2d 	.word	0x08008a2d
 80086f4:	08008abf 	.word	0x08008abf
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f103 0110 	add.w	r1, r3, #16
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	795b      	ldrb	r3, [r3, #5]
 8008702:	461a      	mov	r2, r3
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 fa17 	bl	8008b38 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2202      	movs	r2, #2
 800870e:	761a      	strb	r2, [r3, #24]
      break;
 8008710:	e20c      	b.n	8008b2c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	795b      	ldrb	r3, [r3, #5]
 8008716:	4619      	mov	r1, r3
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f003 fd3b 	bl	800c194 <USBH_LL_GetURBState>
 800871e:	4603      	mov	r3, r0
 8008720:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008722:	7bbb      	ldrb	r3, [r7, #14]
 8008724:	2b01      	cmp	r3, #1
 8008726:	d12c      	bne.n	8008782 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	7c1b      	ldrb	r3, [r3, #16]
 800872c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008730:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	8adb      	ldrh	r3, [r3, #22]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00a      	beq.n	8008750 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800873a:	7b7b      	ldrb	r3, [r7, #13]
 800873c:	2b80      	cmp	r3, #128	; 0x80
 800873e:	d103      	bne.n	8008748 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2203      	movs	r2, #3
 8008744:	761a      	strb	r2, [r3, #24]
 8008746:	e00d      	b.n	8008764 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2205      	movs	r2, #5
 800874c:	761a      	strb	r2, [r3, #24]
 800874e:	e009      	b.n	8008764 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8008750:	7b7b      	ldrb	r3, [r7, #13]
 8008752:	2b80      	cmp	r3, #128	; 0x80
 8008754:	d103      	bne.n	800875e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2209      	movs	r2, #9
 800875a:	761a      	strb	r2, [r3, #24]
 800875c:	e002      	b.n	8008764 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2207      	movs	r2, #7
 8008762:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2203      	movs	r2, #3
 8008768:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008778:	2300      	movs	r3, #0
 800877a:	2200      	movs	r2, #0
 800877c:	f000 fcbc 	bl	80090f8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008780:	e1cb      	b.n	8008b1a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008782:	7bbb      	ldrb	r3, [r7, #14]
 8008784:	2b04      	cmp	r3, #4
 8008786:	d003      	beq.n	8008790 <USBH_HandleControl+0xe8>
 8008788:	7bbb      	ldrb	r3, [r7, #14]
 800878a:	2b02      	cmp	r3, #2
 800878c:	f040 81c5 	bne.w	8008b1a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	220b      	movs	r2, #11
 8008794:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2203      	movs	r2, #3
 800879a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80087aa:	2300      	movs	r3, #0
 80087ac:	2200      	movs	r2, #0
 80087ae:	f000 fca3 	bl	80090f8 <osMessageQueuePut>
      break;
 80087b2:	e1b2      	b.n	8008b1a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6899      	ldr	r1, [r3, #8]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	899a      	ldrh	r2, [r3, #12]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	791b      	ldrb	r3, [r3, #4]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 f9f2 	bl	8008bb6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2204      	movs	r2, #4
 80087d6:	761a      	strb	r2, [r3, #24]
      break;
 80087d8:	e1a8      	b.n	8008b2c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	791b      	ldrb	r3, [r3, #4]
 80087de:	4619      	mov	r1, r3
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f003 fcd7 	bl	800c194 <USBH_LL_GetURBState>
 80087e6:	4603      	mov	r3, r0
 80087e8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80087ea:	7bbb      	ldrb	r3, [r7, #14]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d110      	bne.n	8008812 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2209      	movs	r2, #9
 80087f4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2203      	movs	r2, #3
 80087fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800880a:	2300      	movs	r3, #0
 800880c:	2200      	movs	r2, #0
 800880e:	f000 fc73 	bl	80090f8 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008812:	7bbb      	ldrb	r3, [r7, #14]
 8008814:	2b05      	cmp	r3, #5
 8008816:	d110      	bne.n	800883a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008818:	2303      	movs	r3, #3
 800881a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2203      	movs	r2, #3
 8008820:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008830:	2300      	movs	r3, #0
 8008832:	2200      	movs	r2, #0
 8008834:	f000 fc60 	bl	80090f8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008838:	e171      	b.n	8008b1e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800883a:	7bbb      	ldrb	r3, [r7, #14]
 800883c:	2b04      	cmp	r3, #4
 800883e:	f040 816e 	bne.w	8008b1e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	220b      	movs	r2, #11
 8008846:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2203      	movs	r2, #3
 800884c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800885c:	2300      	movs	r3, #0
 800885e:	2200      	movs	r2, #0
 8008860:	f000 fc4a 	bl	80090f8 <osMessageQueuePut>
      break;
 8008864:	e15b      	b.n	8008b1e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6899      	ldr	r1, [r3, #8]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	899a      	ldrh	r2, [r3, #12]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	795b      	ldrb	r3, [r3, #5]
 8008872:	2001      	movs	r0, #1
 8008874:	9000      	str	r0, [sp, #0]
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f978 	bl	8008b6c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008882:	b29a      	uxth	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2206      	movs	r2, #6
 800888c:	761a      	strb	r2, [r3, #24]
      break;
 800888e:	e14d      	b.n	8008b2c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	795b      	ldrb	r3, [r3, #5]
 8008894:	4619      	mov	r1, r3
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f003 fc7c 	bl	800c194 <USBH_LL_GetURBState>
 800889c:	4603      	mov	r3, r0
 800889e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80088a0:	7bbb      	ldrb	r3, [r7, #14]
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d111      	bne.n	80088ca <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2207      	movs	r2, #7
 80088aa:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2203      	movs	r2, #3
 80088b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80088c0:	2300      	movs	r3, #0
 80088c2:	2200      	movs	r2, #0
 80088c4:	f000 fc18 	bl	80090f8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80088c8:	e12b      	b.n	8008b22 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 80088ca:	7bbb      	ldrb	r3, [r7, #14]
 80088cc:	2b05      	cmp	r3, #5
 80088ce:	d113      	bne.n	80088f8 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	220c      	movs	r2, #12
 80088d4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80088d6:	2303      	movs	r3, #3
 80088d8:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2203      	movs	r2, #3
 80088de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80088ee:	2300      	movs	r3, #0
 80088f0:	2200      	movs	r2, #0
 80088f2:	f000 fc01 	bl	80090f8 <osMessageQueuePut>
      break;
 80088f6:	e114      	b.n	8008b22 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80088f8:	7bbb      	ldrb	r3, [r7, #14]
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d111      	bne.n	8008922 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2205      	movs	r2, #5
 8008902:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2203      	movs	r2, #3
 8008908:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008918:	2300      	movs	r3, #0
 800891a:	2200      	movs	r2, #0
 800891c:	f000 fbec 	bl	80090f8 <osMessageQueuePut>
      break;
 8008920:	e0ff      	b.n	8008b22 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8008922:	7bbb      	ldrb	r3, [r7, #14]
 8008924:	2b04      	cmp	r3, #4
 8008926:	f040 80fc 	bne.w	8008b22 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	220b      	movs	r2, #11
 800892e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008930:	2302      	movs	r3, #2
 8008932:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2203      	movs	r2, #3
 8008938:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008948:	2300      	movs	r3, #0
 800894a:	2200      	movs	r2, #0
 800894c:	f000 fbd4 	bl	80090f8 <osMessageQueuePut>
      break;
 8008950:	e0e7      	b.n	8008b22 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	791b      	ldrb	r3, [r3, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	2100      	movs	r1, #0
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 f92b 	bl	8008bb6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008966:	b29a      	uxth	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2208      	movs	r2, #8
 8008970:	761a      	strb	r2, [r3, #24]

      break;
 8008972:	e0db      	b.n	8008b2c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	791b      	ldrb	r3, [r3, #4]
 8008978:	4619      	mov	r1, r3
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f003 fc0a 	bl	800c194 <USBH_LL_GetURBState>
 8008980:	4603      	mov	r3, r0
 8008982:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008984:	7bbb      	ldrb	r3, [r7, #14]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d113      	bne.n	80089b2 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	220d      	movs	r2, #13
 800898e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008990:	2300      	movs	r3, #0
 8008992:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2203      	movs	r2, #3
 8008998:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80089a8:	2300      	movs	r3, #0
 80089aa:	2200      	movs	r2, #0
 80089ac:	f000 fba4 	bl	80090f8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80089b0:	e0b9      	b.n	8008b26 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 80089b2:	7bbb      	ldrb	r3, [r7, #14]
 80089b4:	2b04      	cmp	r3, #4
 80089b6:	d111      	bne.n	80089dc <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	220b      	movs	r2, #11
 80089bc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2203      	movs	r2, #3
 80089c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80089d2:	2300      	movs	r3, #0
 80089d4:	2200      	movs	r2, #0
 80089d6:	f000 fb8f 	bl	80090f8 <osMessageQueuePut>
      break;
 80089da:	e0a4      	b.n	8008b26 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 80089dc:	7bbb      	ldrb	r3, [r7, #14]
 80089de:	2b05      	cmp	r3, #5
 80089e0:	f040 80a1 	bne.w	8008b26 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 80089e4:	2303      	movs	r3, #3
 80089e6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2203      	movs	r2, #3
 80089ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80089fc:	2300      	movs	r3, #0
 80089fe:	2200      	movs	r2, #0
 8008a00:	f000 fb7a 	bl	80090f8 <osMessageQueuePut>
      break;
 8008a04:	e08f      	b.n	8008b26 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	795b      	ldrb	r3, [r3, #5]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	9200      	str	r2, [sp, #0]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	2100      	movs	r1, #0
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f8aa 	bl	8008b6c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	220a      	movs	r2, #10
 8008a28:	761a      	strb	r2, [r3, #24]
      break;
 8008a2a:	e07f      	b.n	8008b2c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	795b      	ldrb	r3, [r3, #5]
 8008a30:	4619      	mov	r1, r3
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f003 fbae 	bl	800c194 <USBH_LL_GetURBState>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008a3c:	7bbb      	ldrb	r3, [r7, #14]
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d113      	bne.n	8008a6a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	220d      	movs	r2, #13
 8008a4a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2203      	movs	r2, #3
 8008a50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008a60:	2300      	movs	r3, #0
 8008a62:	2200      	movs	r2, #0
 8008a64:	f000 fb48 	bl	80090f8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a68:	e05f      	b.n	8008b2a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008a6a:	7bbb      	ldrb	r3, [r7, #14]
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d111      	bne.n	8008a94 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2209      	movs	r2, #9
 8008a74:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2203      	movs	r2, #3
 8008a7a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f000 fb33 	bl	80090f8 <osMessageQueuePut>
      break;
 8008a92:	e04a      	b.n	8008b2a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8008a94:	7bbb      	ldrb	r3, [r7, #14]
 8008a96:	2b04      	cmp	r3, #4
 8008a98:	d147      	bne.n	8008b2a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	220b      	movs	r2, #11
 8008a9e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2203      	movs	r2, #3
 8008aa4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f000 fb1e 	bl	80090f8 <osMessageQueuePut>
      break;
 8008abc:	e035      	b.n	8008b2a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	7e5b      	ldrb	r3, [r3, #25]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	b2da      	uxtb	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	765a      	strb	r2, [r3, #25]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	7e5b      	ldrb	r3, [r3, #25]
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d806      	bhi.n	8008ae0 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008ade:	e025      	b.n	8008b2c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ae6:	2106      	movs	r1, #6
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	795b      	ldrb	r3, [r3, #5]
 8008af6:	4619      	mov	r1, r3
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 f90d 	bl	8008d18 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	791b      	ldrb	r3, [r3, #4]
 8008b02:	4619      	mov	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f907 	bl	8008d18 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008b10:	2302      	movs	r3, #2
 8008b12:	73fb      	strb	r3, [r7, #15]
      break;
 8008b14:	e00a      	b.n	8008b2c <USBH_HandleControl+0x484>

    default:
      break;
 8008b16:	bf00      	nop
 8008b18:	e008      	b.n	8008b2c <USBH_HandleControl+0x484>
      break;
 8008b1a:	bf00      	nop
 8008b1c:	e006      	b.n	8008b2c <USBH_HandleControl+0x484>
      break;
 8008b1e:	bf00      	nop
 8008b20:	e004      	b.n	8008b2c <USBH_HandleControl+0x484>
      break;
 8008b22:	bf00      	nop
 8008b24:	e002      	b.n	8008b2c <USBH_HandleControl+0x484>
      break;
 8008b26:	bf00      	nop
 8008b28:	e000      	b.n	8008b2c <USBH_HandleControl+0x484>
      break;
 8008b2a:	bf00      	nop
  }

  return status;
 8008b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop

08008b38 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b088      	sub	sp, #32
 8008b3c:	af04      	add	r7, sp, #16
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	4613      	mov	r3, r2
 8008b44:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b46:	79f9      	ldrb	r1, [r7, #7]
 8008b48:	2300      	movs	r3, #0
 8008b4a:	9303      	str	r3, [sp, #12]
 8008b4c:	2308      	movs	r3, #8
 8008b4e:	9302      	str	r3, [sp, #8]
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	9301      	str	r3, [sp, #4]
 8008b54:	2300      	movs	r3, #0
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	2300      	movs	r3, #0
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f003 fae8 	bl	800c132 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b088      	sub	sp, #32
 8008b70:	af04      	add	r7, sp, #16
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	4611      	mov	r1, r2
 8008b78:	461a      	mov	r2, r3
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	80fb      	strh	r3, [r7, #6]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d001      	beq.n	8008b90 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b90:	7979      	ldrb	r1, [r7, #5]
 8008b92:	7e3b      	ldrb	r3, [r7, #24]
 8008b94:	9303      	str	r3, [sp, #12]
 8008b96:	88fb      	ldrh	r3, [r7, #6]
 8008b98:	9302      	str	r3, [sp, #8]
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	9301      	str	r3, [sp, #4]
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	9300      	str	r3, [sp, #0]
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	68f8      	ldr	r0, [r7, #12]
 8008ba8:	f003 fac3 	bl	800c132 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b088      	sub	sp, #32
 8008bba:	af04      	add	r7, sp, #16
 8008bbc:	60f8      	str	r0, [r7, #12]
 8008bbe:	60b9      	str	r1, [r7, #8]
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	80fb      	strh	r3, [r7, #6]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008bcc:	7979      	ldrb	r1, [r7, #5]
 8008bce:	2300      	movs	r3, #0
 8008bd0:	9303      	str	r3, [sp, #12]
 8008bd2:	88fb      	ldrh	r3, [r7, #6]
 8008bd4:	9302      	str	r3, [sp, #8]
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	9301      	str	r3, [sp, #4]
 8008bda:	2301      	movs	r3, #1
 8008bdc:	9300      	str	r3, [sp, #0]
 8008bde:	2300      	movs	r3, #0
 8008be0:	2201      	movs	r2, #1
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f003 faa5 	bl	800c132 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008be8:	2300      	movs	r3, #0

}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b088      	sub	sp, #32
 8008bf6:	af04      	add	r7, sp, #16
 8008bf8:	60f8      	str	r0, [r7, #12]
 8008bfa:	60b9      	str	r1, [r7, #8]
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	461a      	mov	r2, r3
 8008c00:	460b      	mov	r3, r1
 8008c02:	80fb      	strh	r3, [r7, #6]
 8008c04:	4613      	mov	r3, r2
 8008c06:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d001      	beq.n	8008c16 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008c12:	2300      	movs	r3, #0
 8008c14:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c16:	7979      	ldrb	r1, [r7, #5]
 8008c18:	7e3b      	ldrb	r3, [r7, #24]
 8008c1a:	9303      	str	r3, [sp, #12]
 8008c1c:	88fb      	ldrh	r3, [r7, #6]
 8008c1e:	9302      	str	r3, [sp, #8]
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	9301      	str	r3, [sp, #4]
 8008c24:	2301      	movs	r3, #1
 8008c26:	9300      	str	r3, [sp, #0]
 8008c28:	2302      	movs	r3, #2
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f003 fa80 	bl	800c132 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b088      	sub	sp, #32
 8008c40:	af04      	add	r7, sp, #16
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	4611      	mov	r1, r2
 8008c48:	461a      	mov	r2, r3
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	80fb      	strh	r3, [r7, #6]
 8008c4e:	4613      	mov	r3, r2
 8008c50:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c52:	7979      	ldrb	r1, [r7, #5]
 8008c54:	2300      	movs	r3, #0
 8008c56:	9303      	str	r3, [sp, #12]
 8008c58:	88fb      	ldrh	r3, [r7, #6]
 8008c5a:	9302      	str	r3, [sp, #8]
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	9301      	str	r3, [sp, #4]
 8008c60:	2301      	movs	r3, #1
 8008c62:	9300      	str	r3, [sp, #0]
 8008c64:	2302      	movs	r3, #2
 8008c66:	2201      	movs	r2, #1
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f003 fa62 	bl	800c132 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3710      	adds	r7, #16
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b086      	sub	sp, #24
 8008c7c:	af04      	add	r7, sp, #16
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	4608      	mov	r0, r1
 8008c82:	4611      	mov	r1, r2
 8008c84:	461a      	mov	r2, r3
 8008c86:	4603      	mov	r3, r0
 8008c88:	70fb      	strb	r3, [r7, #3]
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	70bb      	strb	r3, [r7, #2]
 8008c8e:	4613      	mov	r3, r2
 8008c90:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008c92:	7878      	ldrb	r0, [r7, #1]
 8008c94:	78ba      	ldrb	r2, [r7, #2]
 8008c96:	78f9      	ldrb	r1, [r7, #3]
 8008c98:	8b3b      	ldrh	r3, [r7, #24]
 8008c9a:	9302      	str	r3, [sp, #8]
 8008c9c:	7d3b      	ldrb	r3, [r7, #20]
 8008c9e:	9301      	str	r3, [sp, #4]
 8008ca0:	7c3b      	ldrb	r3, [r7, #16]
 8008ca2:	9300      	str	r3, [sp, #0]
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f003 f9f5 	bl	800c096 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b082      	sub	sp, #8
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008cc2:	78fb      	ldrb	r3, [r7, #3]
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f003 fa14 	bl	800c0f4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3708      	adds	r7, #8
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b084      	sub	sp, #16
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
 8008cde:	460b      	mov	r3, r1
 8008ce0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 f836 	bl	8008d54 <USBH_GetFreePipe>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008cec:	89fb      	ldrh	r3, [r7, #14]
 8008cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d00a      	beq.n	8008d0c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008cf6:	78fa      	ldrb	r2, [r7, #3]
 8008cf8:	89fb      	ldrh	r3, [r7, #14]
 8008cfa:	f003 030f 	and.w	r3, r3, #15
 8008cfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d02:	6879      	ldr	r1, [r7, #4]
 8008d04:	33e0      	adds	r3, #224	; 0xe0
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	440b      	add	r3, r1
 8008d0a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008d0c:	89fb      	ldrh	r3, [r7, #14]
 8008d0e:	b2db      	uxtb	r3, r3
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	460b      	mov	r3, r1
 8008d22:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008d24:	78fb      	ldrb	r3, [r7, #3]
 8008d26:	2b0f      	cmp	r3, #15
 8008d28:	d80d      	bhi.n	8008d46 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008d2a:	78fb      	ldrb	r3, [r7, #3]
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	33e0      	adds	r3, #224	; 0xe0
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	4413      	add	r3, r2
 8008d34:	685a      	ldr	r2, [r3, #4]
 8008d36:	78fb      	ldrb	r3, [r7, #3]
 8008d38:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008d3c:	6879      	ldr	r1, [r7, #4]
 8008d3e:	33e0      	adds	r3, #224	; 0xe0
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	440b      	add	r3, r1
 8008d44:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008d60:	2300      	movs	r3, #0
 8008d62:	73fb      	strb	r3, [r7, #15]
 8008d64:	e00f      	b.n	8008d86 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008d66:	7bfb      	ldrb	r3, [r7, #15]
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	33e0      	adds	r3, #224	; 0xe0
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4413      	add	r3, r2
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d102      	bne.n	8008d80 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	e007      	b.n	8008d90 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
 8008d82:	3301      	adds	r3, #1
 8008d84:	73fb      	strb	r3, [r7, #15]
 8008d86:	7bfb      	ldrb	r3, [r7, #15]
 8008d88:	2b0f      	cmp	r3, #15
 8008d8a:	d9ec      	bls.n	8008d66 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008d8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3714      	adds	r7, #20
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <__NVIC_SetPriority>:
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	4603      	mov	r3, r0
 8008da4:	6039      	str	r1, [r7, #0]
 8008da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	db0a      	blt.n	8008dc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	b2da      	uxtb	r2, r3
 8008db4:	490c      	ldr	r1, [pc, #48]	; (8008de8 <__NVIC_SetPriority+0x4c>)
 8008db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008dba:	0112      	lsls	r2, r2, #4
 8008dbc:	b2d2      	uxtb	r2, r2
 8008dbe:	440b      	add	r3, r1
 8008dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008dc4:	e00a      	b.n	8008ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	b2da      	uxtb	r2, r3
 8008dca:	4908      	ldr	r1, [pc, #32]	; (8008dec <__NVIC_SetPriority+0x50>)
 8008dcc:	79fb      	ldrb	r3, [r7, #7]
 8008dce:	f003 030f 	and.w	r3, r3, #15
 8008dd2:	3b04      	subs	r3, #4
 8008dd4:	0112      	lsls	r2, r2, #4
 8008dd6:	b2d2      	uxtb	r2, r2
 8008dd8:	440b      	add	r3, r1
 8008dda:	761a      	strb	r2, [r3, #24]
}
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr
 8008de8:	e000e100 	.word	0xe000e100
 8008dec:	e000ed00 	.word	0xe000ed00

08008df0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008df0:	b580      	push	{r7, lr}
 8008df2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008df4:	4b05      	ldr	r3, [pc, #20]	; (8008e0c <SysTick_Handler+0x1c>)
 8008df6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008df8:	f001 ff12 	bl	800ac20 <xTaskGetSchedulerState>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d001      	beq.n	8008e06 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008e02:	f002 fcf9 	bl	800b7f8 <xPortSysTickHandler>
  }
}
 8008e06:	bf00      	nop
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	e000e010 	.word	0xe000e010

08008e10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008e10:	b580      	push	{r7, lr}
 8008e12:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008e14:	2100      	movs	r1, #0
 8008e16:	f06f 0004 	mvn.w	r0, #4
 8008e1a:	f7ff ffbf 	bl	8008d9c <__NVIC_SetPriority>
#endif
}
 8008e1e:	bf00      	nop
 8008e20:	bd80      	pop	{r7, pc}
	...

08008e24 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e2a:	f3ef 8305 	mrs	r3, IPSR
 8008e2e:	603b      	str	r3, [r7, #0]
  return(result);
 8008e30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d003      	beq.n	8008e3e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008e36:	f06f 0305 	mvn.w	r3, #5
 8008e3a:	607b      	str	r3, [r7, #4]
 8008e3c:	e00c      	b.n	8008e58 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008e3e:	4b0a      	ldr	r3, [pc, #40]	; (8008e68 <osKernelInitialize+0x44>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d105      	bne.n	8008e52 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008e46:	4b08      	ldr	r3, [pc, #32]	; (8008e68 <osKernelInitialize+0x44>)
 8008e48:	2201      	movs	r2, #1
 8008e4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	607b      	str	r3, [r7, #4]
 8008e50:	e002      	b.n	8008e58 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008e52:	f04f 33ff 	mov.w	r3, #4294967295
 8008e56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008e58:	687b      	ldr	r3, [r7, #4]
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	370c      	adds	r7, #12
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop
 8008e68:	20000250 	.word	0x20000250

08008e6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e72:	f3ef 8305 	mrs	r3, IPSR
 8008e76:	603b      	str	r3, [r7, #0]
  return(result);
 8008e78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d003      	beq.n	8008e86 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008e7e:	f06f 0305 	mvn.w	r3, #5
 8008e82:	607b      	str	r3, [r7, #4]
 8008e84:	e010      	b.n	8008ea8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008e86:	4b0b      	ldr	r3, [pc, #44]	; (8008eb4 <osKernelStart+0x48>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d109      	bne.n	8008ea2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008e8e:	f7ff ffbf 	bl	8008e10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008e92:	4b08      	ldr	r3, [pc, #32]	; (8008eb4 <osKernelStart+0x48>)
 8008e94:	2202      	movs	r2, #2
 8008e96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008e98:	f001 fa66 	bl	800a368 <vTaskStartScheduler>
      stat = osOK;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	607b      	str	r3, [r7, #4]
 8008ea0:	e002      	b.n	8008ea8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ea6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008ea8:	687b      	ldr	r3, [r7, #4]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	20000250 	.word	0x20000250

08008eb8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b08e      	sub	sp, #56	; 0x38
 8008ebc:	af04      	add	r7, sp, #16
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ec8:	f3ef 8305 	mrs	r3, IPSR
 8008ecc:	617b      	str	r3, [r7, #20]
  return(result);
 8008ece:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d17e      	bne.n	8008fd2 <osThreadNew+0x11a>
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d07b      	beq.n	8008fd2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008eda:	2380      	movs	r3, #128	; 0x80
 8008edc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008ede:	2318      	movs	r3, #24
 8008ee0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8008eea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d045      	beq.n	8008f7e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d002      	beq.n	8008f00 <osThreadNew+0x48>
        name = attr->name;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	699b      	ldr	r3, [r3, #24]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d002      	beq.n	8008f0e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	699b      	ldr	r3, [r3, #24]
 8008f0c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d008      	beq.n	8008f26 <osThreadNew+0x6e>
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	2b38      	cmp	r3, #56	; 0x38
 8008f18:	d805      	bhi.n	8008f26 <osThreadNew+0x6e>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f003 0301 	and.w	r3, r3, #1
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d001      	beq.n	8008f2a <osThreadNew+0x72>
        return (NULL);
 8008f26:	2300      	movs	r3, #0
 8008f28:	e054      	b.n	8008fd4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	695b      	ldr	r3, [r3, #20]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d003      	beq.n	8008f3a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	695b      	ldr	r3, [r3, #20]
 8008f36:	089b      	lsrs	r3, r3, #2
 8008f38:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00e      	beq.n	8008f60 <osThreadNew+0xa8>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	2ba7      	cmp	r3, #167	; 0xa7
 8008f48:	d90a      	bls.n	8008f60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d006      	beq.n	8008f60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	695b      	ldr	r3, [r3, #20]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d002      	beq.n	8008f60 <osThreadNew+0xa8>
        mem = 1;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	61bb      	str	r3, [r7, #24]
 8008f5e:	e010      	b.n	8008f82 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10c      	bne.n	8008f82 <osThreadNew+0xca>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d108      	bne.n	8008f82 <osThreadNew+0xca>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d104      	bne.n	8008f82 <osThreadNew+0xca>
          mem = 0;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	61bb      	str	r3, [r7, #24]
 8008f7c:	e001      	b.n	8008f82 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d110      	bne.n	8008faa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f90:	9202      	str	r2, [sp, #8]
 8008f92:	9301      	str	r3, [sp, #4]
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	9300      	str	r3, [sp, #0]
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	6a3a      	ldr	r2, [r7, #32]
 8008f9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f000 fff6 	bl	8009f90 <xTaskCreateStatic>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	613b      	str	r3, [r7, #16]
 8008fa8:	e013      	b.n	8008fd2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d110      	bne.n	8008fd2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008fb0:	6a3b      	ldr	r3, [r7, #32]
 8008fb2:	b29a      	uxth	r2, r3
 8008fb4:	f107 0310 	add.w	r3, r7, #16
 8008fb8:	9301      	str	r3, [sp, #4]
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	9300      	str	r3, [sp, #0]
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008fc2:	68f8      	ldr	r0, [r7, #12]
 8008fc4:	f001 f841 	bl	800a04a <xTaskCreate>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d001      	beq.n	8008fd2 <osThreadNew+0x11a>
            hTask = NULL;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008fd2:	693b      	ldr	r3, [r7, #16]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3728      	adds	r7, #40	; 0x28
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fe4:	f3ef 8305 	mrs	r3, IPSR
 8008fe8:	60bb      	str	r3, [r7, #8]
  return(result);
 8008fea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d003      	beq.n	8008ff8 <osDelay+0x1c>
    stat = osErrorISR;
 8008ff0:	f06f 0305 	mvn.w	r3, #5
 8008ff4:	60fb      	str	r3, [r7, #12]
 8008ff6:	e007      	b.n	8009008 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d002      	beq.n	8009008 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f001 f97c 	bl	800a300 <vTaskDelay>
    }
  }

  return (stat);
 8009008:	68fb      	ldr	r3, [r7, #12]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009012:	b580      	push	{r7, lr}
 8009014:	b08a      	sub	sp, #40	; 0x28
 8009016:	af02      	add	r7, sp, #8
 8009018:	60f8      	str	r0, [r7, #12]
 800901a:	60b9      	str	r1, [r7, #8]
 800901c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800901e:	2300      	movs	r3, #0
 8009020:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009022:	f3ef 8305 	mrs	r3, IPSR
 8009026:	613b      	str	r3, [r7, #16]
  return(result);
 8009028:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800902a:	2b00      	cmp	r3, #0
 800902c:	d15f      	bne.n	80090ee <osMessageQueueNew+0xdc>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d05c      	beq.n	80090ee <osMessageQueueNew+0xdc>
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d059      	beq.n	80090ee <osMessageQueueNew+0xdc>
    mem = -1;
 800903a:	f04f 33ff 	mov.w	r3, #4294967295
 800903e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d029      	beq.n	800909a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d012      	beq.n	8009074 <osMessageQueueNew+0x62>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	2b4f      	cmp	r3, #79	; 0x4f
 8009054:	d90e      	bls.n	8009074 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00a      	beq.n	8009074 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	695a      	ldr	r2, [r3, #20]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	68b9      	ldr	r1, [r7, #8]
 8009066:	fb01 f303 	mul.w	r3, r1, r3
 800906a:	429a      	cmp	r2, r3
 800906c:	d302      	bcc.n	8009074 <osMessageQueueNew+0x62>
        mem = 1;
 800906e:	2301      	movs	r3, #1
 8009070:	61bb      	str	r3, [r7, #24]
 8009072:	e014      	b.n	800909e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d110      	bne.n	800909e <osMessageQueueNew+0x8c>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d10c      	bne.n	800909e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009088:	2b00      	cmp	r3, #0
 800908a:	d108      	bne.n	800909e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	695b      	ldr	r3, [r3, #20]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d104      	bne.n	800909e <osMessageQueueNew+0x8c>
          mem = 0;
 8009094:	2300      	movs	r3, #0
 8009096:	61bb      	str	r3, [r7, #24]
 8009098:	e001      	b.n	800909e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800909a:	2300      	movs	r3, #0
 800909c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d10b      	bne.n	80090bc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	691a      	ldr	r2, [r3, #16]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	2100      	movs	r1, #0
 80090ae:	9100      	str	r1, [sp, #0]
 80090b0:	68b9      	ldr	r1, [r7, #8]
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f000 fa2e 	bl	8009514 <xQueueGenericCreateStatic>
 80090b8:	61f8      	str	r0, [r7, #28]
 80090ba:	e008      	b.n	80090ce <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d105      	bne.n	80090ce <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80090c2:	2200      	movs	r2, #0
 80090c4:	68b9      	ldr	r1, [r7, #8]
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	f000 fa9c 	bl	8009604 <xQueueGenericCreate>
 80090cc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00c      	beq.n	80090ee <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d003      	beq.n	80090e2 <osMessageQueueNew+0xd0>
        name = attr->name;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	617b      	str	r3, [r7, #20]
 80090e0:	e001      	b.n	80090e6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80090e2:	2300      	movs	r3, #0
 80090e4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80090e6:	6979      	ldr	r1, [r7, #20]
 80090e8:	69f8      	ldr	r0, [r7, #28]
 80090ea:	f000 fef3 	bl	8009ed4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80090ee:	69fb      	ldr	r3, [r7, #28]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3720      	adds	r7, #32
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b088      	sub	sp, #32
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	603b      	str	r3, [r7, #0]
 8009104:	4613      	mov	r3, r2
 8009106:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800910c:	2300      	movs	r3, #0
 800910e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009110:	f3ef 8305 	mrs	r3, IPSR
 8009114:	617b      	str	r3, [r7, #20]
  return(result);
 8009116:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009118:	2b00      	cmp	r3, #0
 800911a:	d028      	beq.n	800916e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d005      	beq.n	800912e <osMessageQueuePut+0x36>
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d002      	beq.n	800912e <osMessageQueuePut+0x36>
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d003      	beq.n	8009136 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800912e:	f06f 0303 	mvn.w	r3, #3
 8009132:	61fb      	str	r3, [r7, #28]
 8009134:	e038      	b.n	80091a8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009136:	2300      	movs	r3, #0
 8009138:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800913a:	f107 0210 	add.w	r2, r7, #16
 800913e:	2300      	movs	r3, #0
 8009140:	68b9      	ldr	r1, [r7, #8]
 8009142:	69b8      	ldr	r0, [r7, #24]
 8009144:	f000 fbba 	bl	80098bc <xQueueGenericSendFromISR>
 8009148:	4603      	mov	r3, r0
 800914a:	2b01      	cmp	r3, #1
 800914c:	d003      	beq.n	8009156 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800914e:	f06f 0302 	mvn.w	r3, #2
 8009152:	61fb      	str	r3, [r7, #28]
 8009154:	e028      	b.n	80091a8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d025      	beq.n	80091a8 <osMessageQueuePut+0xb0>
 800915c:	4b15      	ldr	r3, [pc, #84]	; (80091b4 <osMessageQueuePut+0xbc>)
 800915e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009162:	601a      	str	r2, [r3, #0]
 8009164:	f3bf 8f4f 	dsb	sy
 8009168:	f3bf 8f6f 	isb	sy
 800916c:	e01c      	b.n	80091a8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d002      	beq.n	800917a <osMessageQueuePut+0x82>
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d103      	bne.n	8009182 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800917a:	f06f 0303 	mvn.w	r3, #3
 800917e:	61fb      	str	r3, [r7, #28]
 8009180:	e012      	b.n	80091a8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009182:	2300      	movs	r3, #0
 8009184:	683a      	ldr	r2, [r7, #0]
 8009186:	68b9      	ldr	r1, [r7, #8]
 8009188:	69b8      	ldr	r0, [r7, #24]
 800918a:	f000 fa99 	bl	80096c0 <xQueueGenericSend>
 800918e:	4603      	mov	r3, r0
 8009190:	2b01      	cmp	r3, #1
 8009192:	d009      	beq.n	80091a8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d003      	beq.n	80091a2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800919a:	f06f 0301 	mvn.w	r3, #1
 800919e:	61fb      	str	r3, [r7, #28]
 80091a0:	e002      	b.n	80091a8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80091a2:	f06f 0302 	mvn.w	r3, #2
 80091a6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80091a8:	69fb      	ldr	r3, [r7, #28]
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3720      	adds	r7, #32
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	e000ed04 	.word	0xe000ed04

080091b8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b088      	sub	sp, #32
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	607a      	str	r2, [r7, #4]
 80091c4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80091ca:	2300      	movs	r3, #0
 80091cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091ce:	f3ef 8305 	mrs	r3, IPSR
 80091d2:	617b      	str	r3, [r7, #20]
  return(result);
 80091d4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d028      	beq.n	800922c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80091da:	69bb      	ldr	r3, [r7, #24]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d005      	beq.n	80091ec <osMessageQueueGet+0x34>
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d002      	beq.n	80091ec <osMessageQueueGet+0x34>
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d003      	beq.n	80091f4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80091ec:	f06f 0303 	mvn.w	r3, #3
 80091f0:	61fb      	str	r3, [r7, #28]
 80091f2:	e037      	b.n	8009264 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80091f4:	2300      	movs	r3, #0
 80091f6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80091f8:	f107 0310 	add.w	r3, r7, #16
 80091fc:	461a      	mov	r2, r3
 80091fe:	68b9      	ldr	r1, [r7, #8]
 8009200:	69b8      	ldr	r0, [r7, #24]
 8009202:	f000 fcd7 	bl	8009bb4 <xQueueReceiveFromISR>
 8009206:	4603      	mov	r3, r0
 8009208:	2b01      	cmp	r3, #1
 800920a:	d003      	beq.n	8009214 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800920c:	f06f 0302 	mvn.w	r3, #2
 8009210:	61fb      	str	r3, [r7, #28]
 8009212:	e027      	b.n	8009264 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d024      	beq.n	8009264 <osMessageQueueGet+0xac>
 800921a:	4b15      	ldr	r3, [pc, #84]	; (8009270 <osMessageQueueGet+0xb8>)
 800921c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009220:	601a      	str	r2, [r3, #0]
 8009222:	f3bf 8f4f 	dsb	sy
 8009226:	f3bf 8f6f 	isb	sy
 800922a:	e01b      	b.n	8009264 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d002      	beq.n	8009238 <osMessageQueueGet+0x80>
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d103      	bne.n	8009240 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009238:	f06f 0303 	mvn.w	r3, #3
 800923c:	61fb      	str	r3, [r7, #28]
 800923e:	e011      	b.n	8009264 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009240:	683a      	ldr	r2, [r7, #0]
 8009242:	68b9      	ldr	r1, [r7, #8]
 8009244:	69b8      	ldr	r0, [r7, #24]
 8009246:	f000 fbd5 	bl	80099f4 <xQueueReceive>
 800924a:	4603      	mov	r3, r0
 800924c:	2b01      	cmp	r3, #1
 800924e:	d009      	beq.n	8009264 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d003      	beq.n	800925e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009256:	f06f 0301 	mvn.w	r3, #1
 800925a:	61fb      	str	r3, [r7, #28]
 800925c:	e002      	b.n	8009264 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800925e:	f06f 0302 	mvn.w	r3, #2
 8009262:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009264:	69fb      	ldr	r3, [r7, #28]
}
 8009266:	4618      	mov	r0, r3
 8009268:	3720      	adds	r7, #32
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	e000ed04 	.word	0xe000ed04

08009274 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009274:	b480      	push	{r7}
 8009276:	b085      	sub	sp, #20
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	4a07      	ldr	r2, [pc, #28]	; (80092a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8009284:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	4a06      	ldr	r2, [pc, #24]	; (80092a4 <vApplicationGetIdleTaskMemory+0x30>)
 800928a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2280      	movs	r2, #128	; 0x80
 8009290:	601a      	str	r2, [r3, #0]
}
 8009292:	bf00      	nop
 8009294:	3714      	adds	r7, #20
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop
 80092a0:	20000254 	.word	0x20000254
 80092a4:	200002fc 	.word	0x200002fc

080092a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80092a8:	b480      	push	{r7}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	4a07      	ldr	r2, [pc, #28]	; (80092d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80092b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	4a06      	ldr	r2, [pc, #24]	; (80092d8 <vApplicationGetTimerTaskMemory+0x30>)
 80092be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80092c6:	601a      	str	r2, [r3, #0]
}
 80092c8:	bf00      	nop
 80092ca:	3714      	adds	r7, #20
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr
 80092d4:	200004fc 	.word	0x200004fc
 80092d8:	200005a4 	.word	0x200005a4

080092dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f103 0208 	add.w	r2, r3, #8
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f04f 32ff 	mov.w	r2, #4294967295
 80092f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f103 0208 	add.w	r2, r3, #8
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f103 0208 	add.w	r2, r3, #8
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800932a:	bf00      	nop
 800932c:	370c      	adds	r7, #12
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr

08009336 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009336:	b480      	push	{r7}
 8009338:	b085      	sub	sp, #20
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	689a      	ldr	r2, [r3, #8]
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	683a      	ldr	r2, [r7, #0]
 800935a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	1c5a      	adds	r2, r3, #1
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	601a      	str	r2, [r3, #0]
}
 8009372:	bf00      	nop
 8009374:	3714      	adds	r7, #20
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800937e:	b480      	push	{r7}
 8009380:	b085      	sub	sp, #20
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009394:	d103      	bne.n	800939e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	60fb      	str	r3, [r7, #12]
 800939c:	e00c      	b.n	80093b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	3308      	adds	r3, #8
 80093a2:	60fb      	str	r3, [r7, #12]
 80093a4:	e002      	b.n	80093ac <vListInsert+0x2e>
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	60fb      	str	r3, [r7, #12]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d2f6      	bcs.n	80093a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	685a      	ldr	r2, [r3, #4]
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	683a      	ldr	r2, [r7, #0]
 80093c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	683a      	ldr	r2, [r7, #0]
 80093d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	1c5a      	adds	r2, r3, #1
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	601a      	str	r2, [r3, #0]
}
 80093e4:	bf00      	nop
 80093e6:	3714      	adds	r7, #20
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80093f0:	b480      	push	{r7}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	691b      	ldr	r3, [r3, #16]
 80093fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	6892      	ldr	r2, [r2, #8]
 8009406:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	6852      	ldr	r2, [r2, #4]
 8009410:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	429a      	cmp	r2, r3
 800941a:	d103      	bne.n	8009424 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	689a      	ldr	r2, [r3, #8]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	1e5a      	subs	r2, r3, #1
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
}
 8009438:	4618      	mov	r0, r3
 800943a:	3714      	adds	r7, #20
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d10a      	bne.n	800946e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945c:	f383 8811 	msr	BASEPRI, r3
 8009460:	f3bf 8f6f 	isb	sy
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800946a:	bf00      	nop
 800946c:	e7fe      	b.n	800946c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800946e:	f002 f931 	bl	800b6d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800947a:	68f9      	ldr	r1, [r7, #12]
 800947c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800947e:	fb01 f303 	mul.w	r3, r1, r3
 8009482:	441a      	add	r2, r3
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2200      	movs	r2, #0
 800948c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800949e:	3b01      	subs	r3, #1
 80094a0:	68f9      	ldr	r1, [r7, #12]
 80094a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80094a4:	fb01 f303 	mul.w	r3, r1, r3
 80094a8:	441a      	add	r2, r3
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	22ff      	movs	r2, #255	; 0xff
 80094b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	22ff      	movs	r2, #255	; 0xff
 80094ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d114      	bne.n	80094ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	691b      	ldr	r3, [r3, #16]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d01a      	beq.n	8009502 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	3310      	adds	r3, #16
 80094d0:	4618      	mov	r0, r3
 80094d2:	f001 f9e3 	bl	800a89c <xTaskRemoveFromEventList>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d012      	beq.n	8009502 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80094dc:	4b0c      	ldr	r3, [pc, #48]	; (8009510 <xQueueGenericReset+0xcc>)
 80094de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094e2:	601a      	str	r2, [r3, #0]
 80094e4:	f3bf 8f4f 	dsb	sy
 80094e8:	f3bf 8f6f 	isb	sy
 80094ec:	e009      	b.n	8009502 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	3310      	adds	r3, #16
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7ff fef2 	bl	80092dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	3324      	adds	r3, #36	; 0x24
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7ff feed 	bl	80092dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009502:	f002 f917 	bl	800b734 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009506:	2301      	movs	r3, #1
}
 8009508:	4618      	mov	r0, r3
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	e000ed04 	.word	0xe000ed04

08009514 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009514:	b580      	push	{r7, lr}
 8009516:	b08e      	sub	sp, #56	; 0x38
 8009518:	af02      	add	r7, sp, #8
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
 8009520:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d10a      	bne.n	800953e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952c:	f383 8811 	msr	BASEPRI, r3
 8009530:	f3bf 8f6f 	isb	sy
 8009534:	f3bf 8f4f 	dsb	sy
 8009538:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800953a:	bf00      	nop
 800953c:	e7fe      	b.n	800953c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d10a      	bne.n	800955a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009548:	f383 8811 	msr	BASEPRI, r3
 800954c:	f3bf 8f6f 	isb	sy
 8009550:	f3bf 8f4f 	dsb	sy
 8009554:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009556:	bf00      	nop
 8009558:	e7fe      	b.n	8009558 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d002      	beq.n	8009566 <xQueueGenericCreateStatic+0x52>
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d001      	beq.n	800956a <xQueueGenericCreateStatic+0x56>
 8009566:	2301      	movs	r3, #1
 8009568:	e000      	b.n	800956c <xQueueGenericCreateStatic+0x58>
 800956a:	2300      	movs	r3, #0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d10a      	bne.n	8009586 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009574:	f383 8811 	msr	BASEPRI, r3
 8009578:	f3bf 8f6f 	isb	sy
 800957c:	f3bf 8f4f 	dsb	sy
 8009580:	623b      	str	r3, [r7, #32]
}
 8009582:	bf00      	nop
 8009584:	e7fe      	b.n	8009584 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d102      	bne.n	8009592 <xQueueGenericCreateStatic+0x7e>
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d101      	bne.n	8009596 <xQueueGenericCreateStatic+0x82>
 8009592:	2301      	movs	r3, #1
 8009594:	e000      	b.n	8009598 <xQueueGenericCreateStatic+0x84>
 8009596:	2300      	movs	r3, #0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d10a      	bne.n	80095b2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800959c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a0:	f383 8811 	msr	BASEPRI, r3
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	61fb      	str	r3, [r7, #28]
}
 80095ae:	bf00      	nop
 80095b0:	e7fe      	b.n	80095b0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80095b2:	2350      	movs	r3, #80	; 0x50
 80095b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	2b50      	cmp	r3, #80	; 0x50
 80095ba:	d00a      	beq.n	80095d2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80095bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c0:	f383 8811 	msr	BASEPRI, r3
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	61bb      	str	r3, [r7, #24]
}
 80095ce:	bf00      	nop
 80095d0:	e7fe      	b.n	80095d0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80095d2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80095d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d00d      	beq.n	80095fa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80095de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e0:	2201      	movs	r2, #1
 80095e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80095e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80095ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ec:	9300      	str	r3, [sp, #0]
 80095ee:	4613      	mov	r3, r2
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	68b9      	ldr	r1, [r7, #8]
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f000 f83f 	bl	8009678 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80095fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3730      	adds	r7, #48	; 0x30
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009604:	b580      	push	{r7, lr}
 8009606:	b08a      	sub	sp, #40	; 0x28
 8009608:	af02      	add	r7, sp, #8
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	4613      	mov	r3, r2
 8009610:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d10a      	bne.n	800962e <xQueueGenericCreate+0x2a>
	__asm volatile
 8009618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961c:	f383 8811 	msr	BASEPRI, r3
 8009620:	f3bf 8f6f 	isb	sy
 8009624:	f3bf 8f4f 	dsb	sy
 8009628:	613b      	str	r3, [r7, #16]
}
 800962a:	bf00      	nop
 800962c:	e7fe      	b.n	800962c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	68ba      	ldr	r2, [r7, #8]
 8009632:	fb02 f303 	mul.w	r3, r2, r3
 8009636:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	3350      	adds	r3, #80	; 0x50
 800963c:	4618      	mov	r0, r3
 800963e:	f002 f96b 	bl	800b918 <pvPortMalloc>
 8009642:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009644:	69bb      	ldr	r3, [r7, #24]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d011      	beq.n	800966e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	3350      	adds	r3, #80	; 0x50
 8009652:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	2200      	movs	r2, #0
 8009658:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800965c:	79fa      	ldrb	r2, [r7, #7]
 800965e:	69bb      	ldr	r3, [r7, #24]
 8009660:	9300      	str	r3, [sp, #0]
 8009662:	4613      	mov	r3, r2
 8009664:	697a      	ldr	r2, [r7, #20]
 8009666:	68b9      	ldr	r1, [r7, #8]
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f000 f805 	bl	8009678 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800966e:	69bb      	ldr	r3, [r7, #24]
	}
 8009670:	4618      	mov	r0, r3
 8009672:	3720      	adds	r7, #32
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
 8009684:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d103      	bne.n	8009694 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	69ba      	ldr	r2, [r7, #24]
 8009690:	601a      	str	r2, [r3, #0]
 8009692:	e002      	b.n	800969a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009694:	69bb      	ldr	r3, [r7, #24]
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800969a:	69bb      	ldr	r3, [r7, #24]
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	68ba      	ldr	r2, [r7, #8]
 80096a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80096a6:	2101      	movs	r1, #1
 80096a8:	69b8      	ldr	r0, [r7, #24]
 80096aa:	f7ff fecb 	bl	8009444 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	78fa      	ldrb	r2, [r7, #3]
 80096b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80096b6:	bf00      	nop
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
	...

080096c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b08e      	sub	sp, #56	; 0x38
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	607a      	str	r2, [r7, #4]
 80096cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80096ce:	2300      	movs	r3, #0
 80096d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80096d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10a      	bne.n	80096f2 <xQueueGenericSend+0x32>
	__asm volatile
 80096dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e0:	f383 8811 	msr	BASEPRI, r3
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80096ee:	bf00      	nop
 80096f0:	e7fe      	b.n	80096f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d103      	bne.n	8009700 <xQueueGenericSend+0x40>
 80096f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <xQueueGenericSend+0x44>
 8009700:	2301      	movs	r3, #1
 8009702:	e000      	b.n	8009706 <xQueueGenericSend+0x46>
 8009704:	2300      	movs	r3, #0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10a      	bne.n	8009720 <xQueueGenericSend+0x60>
	__asm volatile
 800970a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800971c:	bf00      	nop
 800971e:	e7fe      	b.n	800971e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	2b02      	cmp	r3, #2
 8009724:	d103      	bne.n	800972e <xQueueGenericSend+0x6e>
 8009726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800972a:	2b01      	cmp	r3, #1
 800972c:	d101      	bne.n	8009732 <xQueueGenericSend+0x72>
 800972e:	2301      	movs	r3, #1
 8009730:	e000      	b.n	8009734 <xQueueGenericSend+0x74>
 8009732:	2300      	movs	r3, #0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10a      	bne.n	800974e <xQueueGenericSend+0x8e>
	__asm volatile
 8009738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	623b      	str	r3, [r7, #32]
}
 800974a:	bf00      	nop
 800974c:	e7fe      	b.n	800974c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800974e:	f001 fa67 	bl	800ac20 <xTaskGetSchedulerState>
 8009752:	4603      	mov	r3, r0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d102      	bne.n	800975e <xQueueGenericSend+0x9e>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d101      	bne.n	8009762 <xQueueGenericSend+0xa2>
 800975e:	2301      	movs	r3, #1
 8009760:	e000      	b.n	8009764 <xQueueGenericSend+0xa4>
 8009762:	2300      	movs	r3, #0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d10a      	bne.n	800977e <xQueueGenericSend+0xbe>
	__asm volatile
 8009768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976c:	f383 8811 	msr	BASEPRI, r3
 8009770:	f3bf 8f6f 	isb	sy
 8009774:	f3bf 8f4f 	dsb	sy
 8009778:	61fb      	str	r3, [r7, #28]
}
 800977a:	bf00      	nop
 800977c:	e7fe      	b.n	800977c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800977e:	f001 ffa9 	bl	800b6d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800978a:	429a      	cmp	r2, r3
 800978c:	d302      	bcc.n	8009794 <xQueueGenericSend+0xd4>
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	2b02      	cmp	r3, #2
 8009792:	d129      	bne.n	80097e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009794:	683a      	ldr	r2, [r7, #0]
 8009796:	68b9      	ldr	r1, [r7, #8]
 8009798:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800979a:	f000 fa8b 	bl	8009cb4 <prvCopyDataToQueue>
 800979e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d010      	beq.n	80097ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097aa:	3324      	adds	r3, #36	; 0x24
 80097ac:	4618      	mov	r0, r3
 80097ae:	f001 f875 	bl	800a89c <xTaskRemoveFromEventList>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d013      	beq.n	80097e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80097b8:	4b3f      	ldr	r3, [pc, #252]	; (80098b8 <xQueueGenericSend+0x1f8>)
 80097ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097be:	601a      	str	r2, [r3, #0]
 80097c0:	f3bf 8f4f 	dsb	sy
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	e00a      	b.n	80097e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80097ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d007      	beq.n	80097e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80097d0:	4b39      	ldr	r3, [pc, #228]	; (80098b8 <xQueueGenericSend+0x1f8>)
 80097d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097d6:	601a      	str	r2, [r3, #0]
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80097e0:	f001 ffa8 	bl	800b734 <vPortExitCritical>
				return pdPASS;
 80097e4:	2301      	movs	r3, #1
 80097e6:	e063      	b.n	80098b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d103      	bne.n	80097f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80097ee:	f001 ffa1 	bl	800b734 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80097f2:	2300      	movs	r3, #0
 80097f4:	e05c      	b.n	80098b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d106      	bne.n	800980a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097fc:	f107 0314 	add.w	r3, r7, #20
 8009800:	4618      	mov	r0, r3
 8009802:	f001 f8af 	bl	800a964 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009806:	2301      	movs	r3, #1
 8009808:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800980a:	f001 ff93 	bl	800b734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800980e:	f000 fe1b 	bl	800a448 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009812:	f001 ff5f 	bl	800b6d4 <vPortEnterCritical>
 8009816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009818:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800981c:	b25b      	sxtb	r3, r3
 800981e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009822:	d103      	bne.n	800982c <xQueueGenericSend+0x16c>
 8009824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009826:	2200      	movs	r2, #0
 8009828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800982c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800982e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009832:	b25b      	sxtb	r3, r3
 8009834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009838:	d103      	bne.n	8009842 <xQueueGenericSend+0x182>
 800983a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983c:	2200      	movs	r2, #0
 800983e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009842:	f001 ff77 	bl	800b734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009846:	1d3a      	adds	r2, r7, #4
 8009848:	f107 0314 	add.w	r3, r7, #20
 800984c:	4611      	mov	r1, r2
 800984e:	4618      	mov	r0, r3
 8009850:	f001 f89e 	bl	800a990 <xTaskCheckForTimeOut>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d124      	bne.n	80098a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800985a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800985c:	f000 fb22 	bl	8009ea4 <prvIsQueueFull>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d018      	beq.n	8009898 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009868:	3310      	adds	r3, #16
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	4611      	mov	r1, r2
 800986e:	4618      	mov	r0, r3
 8009870:	f000 ffc4 	bl	800a7fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009876:	f000 faad 	bl	8009dd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800987a:	f000 fdf3 	bl	800a464 <xTaskResumeAll>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	f47f af7c 	bne.w	800977e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009886:	4b0c      	ldr	r3, [pc, #48]	; (80098b8 <xQueueGenericSend+0x1f8>)
 8009888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800988c:	601a      	str	r2, [r3, #0]
 800988e:	f3bf 8f4f 	dsb	sy
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	e772      	b.n	800977e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800989a:	f000 fa9b 	bl	8009dd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800989e:	f000 fde1 	bl	800a464 <xTaskResumeAll>
 80098a2:	e76c      	b.n	800977e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80098a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098a6:	f000 fa95 	bl	8009dd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098aa:	f000 fddb 	bl	800a464 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80098ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3738      	adds	r7, #56	; 0x38
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	e000ed04 	.word	0xe000ed04

080098bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b090      	sub	sp, #64	; 0x40
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]
 80098c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80098ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d10a      	bne.n	80098ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80098d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d8:	f383 8811 	msr	BASEPRI, r3
 80098dc:	f3bf 8f6f 	isb	sy
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80098e6:	bf00      	nop
 80098e8:	e7fe      	b.n	80098e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d103      	bne.n	80098f8 <xQueueGenericSendFromISR+0x3c>
 80098f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d101      	bne.n	80098fc <xQueueGenericSendFromISR+0x40>
 80098f8:	2301      	movs	r3, #1
 80098fa:	e000      	b.n	80098fe <xQueueGenericSendFromISR+0x42>
 80098fc:	2300      	movs	r3, #0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d10a      	bne.n	8009918 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009906:	f383 8811 	msr	BASEPRI, r3
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009914:	bf00      	nop
 8009916:	e7fe      	b.n	8009916 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	2b02      	cmp	r3, #2
 800991c:	d103      	bne.n	8009926 <xQueueGenericSendFromISR+0x6a>
 800991e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009922:	2b01      	cmp	r3, #1
 8009924:	d101      	bne.n	800992a <xQueueGenericSendFromISR+0x6e>
 8009926:	2301      	movs	r3, #1
 8009928:	e000      	b.n	800992c <xQueueGenericSendFromISR+0x70>
 800992a:	2300      	movs	r3, #0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d10a      	bne.n	8009946 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009934:	f383 8811 	msr	BASEPRI, r3
 8009938:	f3bf 8f6f 	isb	sy
 800993c:	f3bf 8f4f 	dsb	sy
 8009940:	623b      	str	r3, [r7, #32]
}
 8009942:	bf00      	nop
 8009944:	e7fe      	b.n	8009944 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009946:	f001 ffa7 	bl	800b898 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800994a:	f3ef 8211 	mrs	r2, BASEPRI
 800994e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009952:	f383 8811 	msr	BASEPRI, r3
 8009956:	f3bf 8f6f 	isb	sy
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	61fa      	str	r2, [r7, #28]
 8009960:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009962:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009964:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800996a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800996c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800996e:	429a      	cmp	r2, r3
 8009970:	d302      	bcc.n	8009978 <xQueueGenericSendFromISR+0xbc>
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	2b02      	cmp	r3, #2
 8009976:	d12f      	bne.n	80099d8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800997e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009986:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009988:	683a      	ldr	r2, [r7, #0]
 800998a:	68b9      	ldr	r1, [r7, #8]
 800998c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800998e:	f000 f991 	bl	8009cb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009992:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800999a:	d112      	bne.n	80099c2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800999c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800999e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d016      	beq.n	80099d2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a6:	3324      	adds	r3, #36	; 0x24
 80099a8:	4618      	mov	r0, r3
 80099aa:	f000 ff77 	bl	800a89c <xTaskRemoveFromEventList>
 80099ae:	4603      	mov	r3, r0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d00e      	beq.n	80099d2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d00b      	beq.n	80099d2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2201      	movs	r2, #1
 80099be:	601a      	str	r2, [r3, #0]
 80099c0:	e007      	b.n	80099d2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80099c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80099c6:	3301      	adds	r3, #1
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	b25a      	sxtb	r2, r3
 80099cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80099d2:	2301      	movs	r3, #1
 80099d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80099d6:	e001      	b.n	80099dc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80099d8:	2300      	movs	r3, #0
 80099da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099de:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80099e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80099e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3740      	adds	r7, #64	; 0x40
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
	...

080099f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b08c      	sub	sp, #48	; 0x30
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a00:	2300      	movs	r3, #0
 8009a02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d10a      	bne.n	8009a24 <xQueueReceive+0x30>
	__asm volatile
 8009a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a12:	f383 8811 	msr	BASEPRI, r3
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	623b      	str	r3, [r7, #32]
}
 8009a20:	bf00      	nop
 8009a22:	e7fe      	b.n	8009a22 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d103      	bne.n	8009a32 <xQueueReceive+0x3e>
 8009a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d101      	bne.n	8009a36 <xQueueReceive+0x42>
 8009a32:	2301      	movs	r3, #1
 8009a34:	e000      	b.n	8009a38 <xQueueReceive+0x44>
 8009a36:	2300      	movs	r3, #0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d10a      	bne.n	8009a52 <xQueueReceive+0x5e>
	__asm volatile
 8009a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a40:	f383 8811 	msr	BASEPRI, r3
 8009a44:	f3bf 8f6f 	isb	sy
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	61fb      	str	r3, [r7, #28]
}
 8009a4e:	bf00      	nop
 8009a50:	e7fe      	b.n	8009a50 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a52:	f001 f8e5 	bl	800ac20 <xTaskGetSchedulerState>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d102      	bne.n	8009a62 <xQueueReceive+0x6e>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d101      	bne.n	8009a66 <xQueueReceive+0x72>
 8009a62:	2301      	movs	r3, #1
 8009a64:	e000      	b.n	8009a68 <xQueueReceive+0x74>
 8009a66:	2300      	movs	r3, #0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d10a      	bne.n	8009a82 <xQueueReceive+0x8e>
	__asm volatile
 8009a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a70:	f383 8811 	msr	BASEPRI, r3
 8009a74:	f3bf 8f6f 	isb	sy
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	61bb      	str	r3, [r7, #24]
}
 8009a7e:	bf00      	nop
 8009a80:	e7fe      	b.n	8009a80 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a82:	f001 fe27 	bl	800b6d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a8a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d01f      	beq.n	8009ad2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009a92:	68b9      	ldr	r1, [r7, #8]
 8009a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a96:	f000 f977 	bl	8009d88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9c:	1e5a      	subs	r2, r3, #1
 8009a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d00f      	beq.n	8009aca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aac:	3310      	adds	r3, #16
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f000 fef4 	bl	800a89c <xTaskRemoveFromEventList>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d007      	beq.n	8009aca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009aba:	4b3d      	ldr	r3, [pc, #244]	; (8009bb0 <xQueueReceive+0x1bc>)
 8009abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ac0:	601a      	str	r2, [r3, #0]
 8009ac2:	f3bf 8f4f 	dsb	sy
 8009ac6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009aca:	f001 fe33 	bl	800b734 <vPortExitCritical>
				return pdPASS;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e069      	b.n	8009ba6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d103      	bne.n	8009ae0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ad8:	f001 fe2c 	bl	800b734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009adc:	2300      	movs	r3, #0
 8009ade:	e062      	b.n	8009ba6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d106      	bne.n	8009af4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ae6:	f107 0310 	add.w	r3, r7, #16
 8009aea:	4618      	mov	r0, r3
 8009aec:	f000 ff3a 	bl	800a964 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009af0:	2301      	movs	r3, #1
 8009af2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009af4:	f001 fe1e 	bl	800b734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009af8:	f000 fca6 	bl	800a448 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009afc:	f001 fdea 	bl	800b6d4 <vPortEnterCritical>
 8009b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b06:	b25b      	sxtb	r3, r3
 8009b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b0c:	d103      	bne.n	8009b16 <xQueueReceive+0x122>
 8009b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b10:	2200      	movs	r2, #0
 8009b12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b1c:	b25b      	sxtb	r3, r3
 8009b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b22:	d103      	bne.n	8009b2c <xQueueReceive+0x138>
 8009b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b26:	2200      	movs	r2, #0
 8009b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b2c:	f001 fe02 	bl	800b734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b30:	1d3a      	adds	r2, r7, #4
 8009b32:	f107 0310 	add.w	r3, r7, #16
 8009b36:	4611      	mov	r1, r2
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f000 ff29 	bl	800a990 <xTaskCheckForTimeOut>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d123      	bne.n	8009b8c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b46:	f000 f997 	bl	8009e78 <prvIsQueueEmpty>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d017      	beq.n	8009b80 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b52:	3324      	adds	r3, #36	; 0x24
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	4611      	mov	r1, r2
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f000 fe4f 	bl	800a7fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b60:	f000 f938 	bl	8009dd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b64:	f000 fc7e 	bl	800a464 <xTaskResumeAll>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d189      	bne.n	8009a82 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009b6e:	4b10      	ldr	r3, [pc, #64]	; (8009bb0 <xQueueReceive+0x1bc>)
 8009b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b74:	601a      	str	r2, [r3, #0]
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	f3bf 8f6f 	isb	sy
 8009b7e:	e780      	b.n	8009a82 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009b80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b82:	f000 f927 	bl	8009dd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b86:	f000 fc6d 	bl	800a464 <xTaskResumeAll>
 8009b8a:	e77a      	b.n	8009a82 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009b8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b8e:	f000 f921 	bl	8009dd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b92:	f000 fc67 	bl	800a464 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b98:	f000 f96e 	bl	8009e78 <prvIsQueueEmpty>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f43f af6f 	beq.w	8009a82 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009ba4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3730      	adds	r7, #48	; 0x30
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	e000ed04 	.word	0xe000ed04

08009bb4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b08e      	sub	sp, #56	; 0x38
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d10a      	bne.n	8009be0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bce:	f383 8811 	msr	BASEPRI, r3
 8009bd2:	f3bf 8f6f 	isb	sy
 8009bd6:	f3bf 8f4f 	dsb	sy
 8009bda:	623b      	str	r3, [r7, #32]
}
 8009bdc:	bf00      	nop
 8009bde:	e7fe      	b.n	8009bde <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d103      	bne.n	8009bee <xQueueReceiveFromISR+0x3a>
 8009be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d101      	bne.n	8009bf2 <xQueueReceiveFromISR+0x3e>
 8009bee:	2301      	movs	r3, #1
 8009bf0:	e000      	b.n	8009bf4 <xQueueReceiveFromISR+0x40>
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d10a      	bne.n	8009c0e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfc:	f383 8811 	msr	BASEPRI, r3
 8009c00:	f3bf 8f6f 	isb	sy
 8009c04:	f3bf 8f4f 	dsb	sy
 8009c08:	61fb      	str	r3, [r7, #28]
}
 8009c0a:	bf00      	nop
 8009c0c:	e7fe      	b.n	8009c0c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c0e:	f001 fe43 	bl	800b898 <vPortValidateInterruptPriority>
	__asm volatile
 8009c12:	f3ef 8211 	mrs	r2, BASEPRI
 8009c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1a:	f383 8811 	msr	BASEPRI, r3
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f3bf 8f4f 	dsb	sy
 8009c26:	61ba      	str	r2, [r7, #24]
 8009c28:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009c2a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c32:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d02f      	beq.n	8009c9a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009c44:	68b9      	ldr	r1, [r7, #8]
 8009c46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c48:	f000 f89e 	bl	8009d88 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4e:	1e5a      	subs	r2, r3, #1
 8009c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c52:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009c54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c5c:	d112      	bne.n	8009c84 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c60:	691b      	ldr	r3, [r3, #16]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d016      	beq.n	8009c94 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c68:	3310      	adds	r3, #16
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f000 fe16 	bl	800a89c <xTaskRemoveFromEventList>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00e      	beq.n	8009c94 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00b      	beq.n	8009c94 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	601a      	str	r2, [r3, #0]
 8009c82:	e007      	b.n	8009c94 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c88:	3301      	adds	r3, #1
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	b25a      	sxtb	r2, r3
 8009c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009c94:	2301      	movs	r3, #1
 8009c96:	637b      	str	r3, [r7, #52]	; 0x34
 8009c98:	e001      	b.n	8009c9e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	637b      	str	r3, [r7, #52]	; 0x34
 8009c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	f383 8811 	msr	BASEPRI, r3
}
 8009ca8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3738      	adds	r7, #56	; 0x38
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b086      	sub	sp, #24
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d10d      	bne.n	8009cee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d14d      	bne.n	8009d76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f000 ffbc 	bl	800ac5c <xTaskPriorityDisinherit>
 8009ce4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	609a      	str	r2, [r3, #8]
 8009cec:	e043      	b.n	8009d76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d119      	bne.n	8009d28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6858      	ldr	r0, [r3, #4]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	68b9      	ldr	r1, [r7, #8]
 8009d00:	f002 fc4e 	bl	800c5a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	685a      	ldr	r2, [r3, #4]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0c:	441a      	add	r2, r3
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	685a      	ldr	r2, [r3, #4]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d32b      	bcc.n	8009d76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	605a      	str	r2, [r3, #4]
 8009d26:	e026      	b.n	8009d76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	68d8      	ldr	r0, [r3, #12]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d30:	461a      	mov	r2, r3
 8009d32:	68b9      	ldr	r1, [r7, #8]
 8009d34:	f002 fc34 	bl	800c5a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	68da      	ldr	r2, [r3, #12]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d40:	425b      	negs	r3, r3
 8009d42:	441a      	add	r2, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	68da      	ldr	r2, [r3, #12]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d207      	bcs.n	8009d64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	689a      	ldr	r2, [r3, #8]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5c:	425b      	negs	r3, r3
 8009d5e:	441a      	add	r2, r3
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2b02      	cmp	r3, #2
 8009d68:	d105      	bne.n	8009d76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d002      	beq.n	8009d76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	3b01      	subs	r3, #1
 8009d74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	1c5a      	adds	r2, r3, #1
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009d7e:	697b      	ldr	r3, [r7, #20]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3718      	adds	r7, #24
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d018      	beq.n	8009dcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	68da      	ldr	r2, [r3, #12]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da2:	441a      	add	r2, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	68da      	ldr	r2, [r3, #12]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d303      	bcc.n	8009dbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	68d9      	ldr	r1, [r3, #12]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	6838      	ldr	r0, [r7, #0]
 8009dc8:	f002 fbea 	bl	800c5a0 <memcpy>
	}
}
 8009dcc:	bf00      	nop
 8009dce:	3708      	adds	r7, #8
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009ddc:	f001 fc7a 	bl	800b6d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009de6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009de8:	e011      	b.n	8009e0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d012      	beq.n	8009e18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	3324      	adds	r3, #36	; 0x24
 8009df6:	4618      	mov	r0, r3
 8009df8:	f000 fd50 	bl	800a89c <xTaskRemoveFromEventList>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d001      	beq.n	8009e06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009e02:	f000 fe27 	bl	800aa54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009e06:	7bfb      	ldrb	r3, [r7, #15]
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	dce9      	bgt.n	8009dea <prvUnlockQueue+0x16>
 8009e16:	e000      	b.n	8009e1a <prvUnlockQueue+0x46>
					break;
 8009e18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	22ff      	movs	r2, #255	; 0xff
 8009e1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009e22:	f001 fc87 	bl	800b734 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009e26:	f001 fc55 	bl	800b6d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e32:	e011      	b.n	8009e58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	691b      	ldr	r3, [r3, #16]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d012      	beq.n	8009e62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	3310      	adds	r3, #16
 8009e40:	4618      	mov	r0, r3
 8009e42:	f000 fd2b 	bl	800a89c <xTaskRemoveFromEventList>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d001      	beq.n	8009e50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e4c:	f000 fe02 	bl	800aa54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e50:	7bbb      	ldrb	r3, [r7, #14]
 8009e52:	3b01      	subs	r3, #1
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	dce9      	bgt.n	8009e34 <prvUnlockQueue+0x60>
 8009e60:	e000      	b.n	8009e64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	22ff      	movs	r2, #255	; 0xff
 8009e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009e6c:	f001 fc62 	bl	800b734 <vPortExitCritical>
}
 8009e70:	bf00      	nop
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e80:	f001 fc28 	bl	800b6d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d102      	bne.n	8009e92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	60fb      	str	r3, [r7, #12]
 8009e90:	e001      	b.n	8009e96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009e92:	2300      	movs	r3, #0
 8009e94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e96:	f001 fc4d 	bl	800b734 <vPortExitCritical>

	return xReturn;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3710      	adds	r7, #16
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009eac:	f001 fc12 	bl	800b6d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d102      	bne.n	8009ec2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	60fb      	str	r3, [r7, #12]
 8009ec0:	e001      	b.n	8009ec6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ec6:	f001 fc35 	bl	800b734 <vPortExitCritical>

	return xReturn;
 8009eca:	68fb      	ldr	r3, [r7, #12]
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ede:	2300      	movs	r3, #0
 8009ee0:	60fb      	str	r3, [r7, #12]
 8009ee2:	e014      	b.n	8009f0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009ee4:	4a0f      	ldr	r2, [pc, #60]	; (8009f24 <vQueueAddToRegistry+0x50>)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d10b      	bne.n	8009f08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009ef0:	490c      	ldr	r1, [pc, #48]	; (8009f24 <vQueueAddToRegistry+0x50>)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	683a      	ldr	r2, [r7, #0]
 8009ef6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009efa:	4a0a      	ldr	r2, [pc, #40]	; (8009f24 <vQueueAddToRegistry+0x50>)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	00db      	lsls	r3, r3, #3
 8009f00:	4413      	add	r3, r2
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009f06:	e006      	b.n	8009f16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	60fb      	str	r3, [r7, #12]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2b07      	cmp	r3, #7
 8009f12:	d9e7      	bls.n	8009ee4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009f14:	bf00      	nop
 8009f16:	bf00      	nop
 8009f18:	3714      	adds	r7, #20
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr
 8009f22:	bf00      	nop
 8009f24:	200009a4 	.word	0x200009a4

08009f28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b086      	sub	sp, #24
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009f38:	f001 fbcc 	bl	800b6d4 <vPortEnterCritical>
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f42:	b25b      	sxtb	r3, r3
 8009f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f48:	d103      	bne.n	8009f52 <vQueueWaitForMessageRestricted+0x2a>
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f58:	b25b      	sxtb	r3, r3
 8009f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f5e:	d103      	bne.n	8009f68 <vQueueWaitForMessageRestricted+0x40>
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f68:	f001 fbe4 	bl	800b734 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d106      	bne.n	8009f82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	3324      	adds	r3, #36	; 0x24
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	68b9      	ldr	r1, [r7, #8]
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f000 fc61 	bl	800a844 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009f82:	6978      	ldr	r0, [r7, #20]
 8009f84:	f7ff ff26 	bl	8009dd4 <prvUnlockQueue>
	}
 8009f88:	bf00      	nop
 8009f8a:	3718      	adds	r7, #24
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b08e      	sub	sp, #56	; 0x38
 8009f94:	af04      	add	r7, sp, #16
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	60b9      	str	r1, [r7, #8]
 8009f9a:	607a      	str	r2, [r7, #4]
 8009f9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d10a      	bne.n	8009fba <xTaskCreateStatic+0x2a>
	__asm volatile
 8009fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa8:	f383 8811 	msr	BASEPRI, r3
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	623b      	str	r3, [r7, #32]
}
 8009fb6:	bf00      	nop
 8009fb8:	e7fe      	b.n	8009fb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d10a      	bne.n	8009fd6 <xTaskCreateStatic+0x46>
	__asm volatile
 8009fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc4:	f383 8811 	msr	BASEPRI, r3
 8009fc8:	f3bf 8f6f 	isb	sy
 8009fcc:	f3bf 8f4f 	dsb	sy
 8009fd0:	61fb      	str	r3, [r7, #28]
}
 8009fd2:	bf00      	nop
 8009fd4:	e7fe      	b.n	8009fd4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009fd6:	23a8      	movs	r3, #168	; 0xa8
 8009fd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	2ba8      	cmp	r3, #168	; 0xa8
 8009fde:	d00a      	beq.n	8009ff6 <xTaskCreateStatic+0x66>
	__asm volatile
 8009fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe4:	f383 8811 	msr	BASEPRI, r3
 8009fe8:	f3bf 8f6f 	isb	sy
 8009fec:	f3bf 8f4f 	dsb	sy
 8009ff0:	61bb      	str	r3, [r7, #24]
}
 8009ff2:	bf00      	nop
 8009ff4:	e7fe      	b.n	8009ff4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009ff6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d01e      	beq.n	800a03c <xTaskCreateStatic+0xac>
 8009ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a000:	2b00      	cmp	r3, #0
 800a002:	d01b      	beq.n	800a03c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a006:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a00c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a010:	2202      	movs	r2, #2
 800a012:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a016:	2300      	movs	r3, #0
 800a018:	9303      	str	r3, [sp, #12]
 800a01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01c:	9302      	str	r3, [sp, #8]
 800a01e:	f107 0314 	add.w	r3, r7, #20
 800a022:	9301      	str	r3, [sp, #4]
 800a024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a026:	9300      	str	r3, [sp, #0]
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	68b9      	ldr	r1, [r7, #8]
 800a02e:	68f8      	ldr	r0, [r7, #12]
 800a030:	f000 f850 	bl	800a0d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a034:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a036:	f000 f8f3 	bl	800a220 <prvAddNewTaskToReadyList>
 800a03a:	e001      	b.n	800a040 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a03c:	2300      	movs	r3, #0
 800a03e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a040:	697b      	ldr	r3, [r7, #20]
	}
 800a042:	4618      	mov	r0, r3
 800a044:	3728      	adds	r7, #40	; 0x28
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b08c      	sub	sp, #48	; 0x30
 800a04e:	af04      	add	r7, sp, #16
 800a050:	60f8      	str	r0, [r7, #12]
 800a052:	60b9      	str	r1, [r7, #8]
 800a054:	603b      	str	r3, [r7, #0]
 800a056:	4613      	mov	r3, r2
 800a058:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a05a:	88fb      	ldrh	r3, [r7, #6]
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	4618      	mov	r0, r3
 800a060:	f001 fc5a 	bl	800b918 <pvPortMalloc>
 800a064:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d00e      	beq.n	800a08a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a06c:	20a8      	movs	r0, #168	; 0xa8
 800a06e:	f001 fc53 	bl	800b918 <pvPortMalloc>
 800a072:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d003      	beq.n	800a082 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	697a      	ldr	r2, [r7, #20]
 800a07e:	631a      	str	r2, [r3, #48]	; 0x30
 800a080:	e005      	b.n	800a08e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a082:	6978      	ldr	r0, [r7, #20]
 800a084:	f001 fd14 	bl	800bab0 <vPortFree>
 800a088:	e001      	b.n	800a08e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a08a:	2300      	movs	r3, #0
 800a08c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d017      	beq.n	800a0c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	2200      	movs	r2, #0
 800a098:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a09c:	88fa      	ldrh	r2, [r7, #6]
 800a09e:	2300      	movs	r3, #0
 800a0a0:	9303      	str	r3, [sp, #12]
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	9302      	str	r3, [sp, #8]
 800a0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a8:	9301      	str	r3, [sp, #4]
 800a0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ac:	9300      	str	r3, [sp, #0]
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	68b9      	ldr	r1, [r7, #8]
 800a0b2:	68f8      	ldr	r0, [r7, #12]
 800a0b4:	f000 f80e 	bl	800a0d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a0b8:	69f8      	ldr	r0, [r7, #28]
 800a0ba:	f000 f8b1 	bl	800a220 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	61bb      	str	r3, [r7, #24]
 800a0c2:	e002      	b.n	800a0ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a0c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a0ca:	69bb      	ldr	r3, [r7, #24]
	}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3720      	adds	r7, #32
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b088      	sub	sp, #32
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
 800a0e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	21a5      	movs	r1, #165	; 0xa5
 800a0ee:	f002 f9bd 	bl	800c46c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a0fc:	3b01      	subs	r3, #1
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	4413      	add	r3, r2
 800a102:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a104:	69bb      	ldr	r3, [r7, #24]
 800a106:	f023 0307 	bic.w	r3, r3, #7
 800a10a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	f003 0307 	and.w	r3, r3, #7
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00a      	beq.n	800a12c <prvInitialiseNewTask+0x58>
	__asm volatile
 800a116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11a:	f383 8811 	msr	BASEPRI, r3
 800a11e:	f3bf 8f6f 	isb	sy
 800a122:	f3bf 8f4f 	dsb	sy
 800a126:	617b      	str	r3, [r7, #20]
}
 800a128:	bf00      	nop
 800a12a:	e7fe      	b.n	800a12a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d01f      	beq.n	800a172 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a132:	2300      	movs	r3, #0
 800a134:	61fb      	str	r3, [r7, #28]
 800a136:	e012      	b.n	800a15e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	4413      	add	r3, r2
 800a13e:	7819      	ldrb	r1, [r3, #0]
 800a140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	4413      	add	r3, r2
 800a146:	3334      	adds	r3, #52	; 0x34
 800a148:	460a      	mov	r2, r1
 800a14a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a14c:	68ba      	ldr	r2, [r7, #8]
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	4413      	add	r3, r2
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d006      	beq.n	800a166 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a158:	69fb      	ldr	r3, [r7, #28]
 800a15a:	3301      	adds	r3, #1
 800a15c:	61fb      	str	r3, [r7, #28]
 800a15e:	69fb      	ldr	r3, [r7, #28]
 800a160:	2b0f      	cmp	r3, #15
 800a162:	d9e9      	bls.n	800a138 <prvInitialiseNewTask+0x64>
 800a164:	e000      	b.n	800a168 <prvInitialiseNewTask+0x94>
			{
				break;
 800a166:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16a:	2200      	movs	r2, #0
 800a16c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a170:	e003      	b.n	800a17a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a174:	2200      	movs	r2, #0
 800a176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17c:	2b37      	cmp	r3, #55	; 0x37
 800a17e:	d901      	bls.n	800a184 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a180:	2337      	movs	r3, #55	; 0x37
 800a182:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a186:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a188:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a18e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a192:	2200      	movs	r2, #0
 800a194:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a198:	3304      	adds	r3, #4
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7ff f8be 	bl	800931c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a2:	3318      	adds	r3, #24
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7ff f8b9 	bl	800931c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d2:	3354      	adds	r3, #84	; 0x54
 800a1d4:	224c      	movs	r2, #76	; 0x4c
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f002 f947 	bl	800c46c <memset>
 800a1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e0:	4a0c      	ldr	r2, [pc, #48]	; (800a214 <prvInitialiseNewTask+0x140>)
 800a1e2:	659a      	str	r2, [r3, #88]	; 0x58
 800a1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e6:	4a0c      	ldr	r2, [pc, #48]	; (800a218 <prvInitialiseNewTask+0x144>)
 800a1e8:	65da      	str	r2, [r3, #92]	; 0x5c
 800a1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ec:	4a0b      	ldr	r2, [pc, #44]	; (800a21c <prvInitialiseNewTask+0x148>)
 800a1ee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a1f0:	683a      	ldr	r2, [r7, #0]
 800a1f2:	68f9      	ldr	r1, [r7, #12]
 800a1f4:	69b8      	ldr	r0, [r7, #24]
 800a1f6:	f001 f941 	bl	800b47c <pxPortInitialiseStack>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a202:	2b00      	cmp	r3, #0
 800a204:	d002      	beq.n	800a20c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a20a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a20c:	bf00      	nop
 800a20e:	3720      	adds	r7, #32
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}
 800a214:	20005408 	.word	0x20005408
 800a218:	20005470 	.word	0x20005470
 800a21c:	200054d8 	.word	0x200054d8

0800a220 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a228:	f001 fa54 	bl	800b6d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a22c:	4b2d      	ldr	r3, [pc, #180]	; (800a2e4 <prvAddNewTaskToReadyList+0xc4>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	3301      	adds	r3, #1
 800a232:	4a2c      	ldr	r2, [pc, #176]	; (800a2e4 <prvAddNewTaskToReadyList+0xc4>)
 800a234:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a236:	4b2c      	ldr	r3, [pc, #176]	; (800a2e8 <prvAddNewTaskToReadyList+0xc8>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d109      	bne.n	800a252 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a23e:	4a2a      	ldr	r2, [pc, #168]	; (800a2e8 <prvAddNewTaskToReadyList+0xc8>)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a244:	4b27      	ldr	r3, [pc, #156]	; (800a2e4 <prvAddNewTaskToReadyList+0xc4>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d110      	bne.n	800a26e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a24c:	f000 fc26 	bl	800aa9c <prvInitialiseTaskLists>
 800a250:	e00d      	b.n	800a26e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a252:	4b26      	ldr	r3, [pc, #152]	; (800a2ec <prvAddNewTaskToReadyList+0xcc>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d109      	bne.n	800a26e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a25a:	4b23      	ldr	r3, [pc, #140]	; (800a2e8 <prvAddNewTaskToReadyList+0xc8>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a264:	429a      	cmp	r2, r3
 800a266:	d802      	bhi.n	800a26e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a268:	4a1f      	ldr	r2, [pc, #124]	; (800a2e8 <prvAddNewTaskToReadyList+0xc8>)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a26e:	4b20      	ldr	r3, [pc, #128]	; (800a2f0 <prvAddNewTaskToReadyList+0xd0>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	3301      	adds	r3, #1
 800a274:	4a1e      	ldr	r2, [pc, #120]	; (800a2f0 <prvAddNewTaskToReadyList+0xd0>)
 800a276:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a278:	4b1d      	ldr	r3, [pc, #116]	; (800a2f0 <prvAddNewTaskToReadyList+0xd0>)
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a284:	4b1b      	ldr	r3, [pc, #108]	; (800a2f4 <prvAddNewTaskToReadyList+0xd4>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d903      	bls.n	800a294 <prvAddNewTaskToReadyList+0x74>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a290:	4a18      	ldr	r2, [pc, #96]	; (800a2f4 <prvAddNewTaskToReadyList+0xd4>)
 800a292:	6013      	str	r3, [r2, #0]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a298:	4613      	mov	r3, r2
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	4413      	add	r3, r2
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	4a15      	ldr	r2, [pc, #84]	; (800a2f8 <prvAddNewTaskToReadyList+0xd8>)
 800a2a2:	441a      	add	r2, r3
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	3304      	adds	r3, #4
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	4610      	mov	r0, r2
 800a2ac:	f7ff f843 	bl	8009336 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a2b0:	f001 fa40 	bl	800b734 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a2b4:	4b0d      	ldr	r3, [pc, #52]	; (800a2ec <prvAddNewTaskToReadyList+0xcc>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d00e      	beq.n	800a2da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a2bc:	4b0a      	ldr	r3, [pc, #40]	; (800a2e8 <prvAddNewTaskToReadyList+0xc8>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d207      	bcs.n	800a2da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a2ca:	4b0c      	ldr	r3, [pc, #48]	; (800a2fc <prvAddNewTaskToReadyList+0xdc>)
 800a2cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2d0:	601a      	str	r2, [r3, #0]
 800a2d2:	f3bf 8f4f 	dsb	sy
 800a2d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2da:	bf00      	nop
 800a2dc:	3708      	adds	r7, #8
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
 800a2e2:	bf00      	nop
 800a2e4:	20000eb8 	.word	0x20000eb8
 800a2e8:	200009e4 	.word	0x200009e4
 800a2ec:	20000ec4 	.word	0x20000ec4
 800a2f0:	20000ed4 	.word	0x20000ed4
 800a2f4:	20000ec0 	.word	0x20000ec0
 800a2f8:	200009e8 	.word	0x200009e8
 800a2fc:	e000ed04 	.word	0xe000ed04

0800a300 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a308:	2300      	movs	r3, #0
 800a30a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d017      	beq.n	800a342 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a312:	4b13      	ldr	r3, [pc, #76]	; (800a360 <vTaskDelay+0x60>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d00a      	beq.n	800a330 <vTaskDelay+0x30>
	__asm volatile
 800a31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31e:	f383 8811 	msr	BASEPRI, r3
 800a322:	f3bf 8f6f 	isb	sy
 800a326:	f3bf 8f4f 	dsb	sy
 800a32a:	60bb      	str	r3, [r7, #8]
}
 800a32c:	bf00      	nop
 800a32e:	e7fe      	b.n	800a32e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a330:	f000 f88a 	bl	800a448 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a334:	2100      	movs	r1, #0
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 fcfe 	bl	800ad38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a33c:	f000 f892 	bl	800a464 <xTaskResumeAll>
 800a340:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d107      	bne.n	800a358 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a348:	4b06      	ldr	r3, [pc, #24]	; (800a364 <vTaskDelay+0x64>)
 800a34a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a34e:	601a      	str	r2, [r3, #0]
 800a350:	f3bf 8f4f 	dsb	sy
 800a354:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a358:	bf00      	nop
 800a35a:	3710      	adds	r7, #16
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	20000ee0 	.word	0x20000ee0
 800a364:	e000ed04 	.word	0xe000ed04

0800a368 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b08a      	sub	sp, #40	; 0x28
 800a36c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a36e:	2300      	movs	r3, #0
 800a370:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a372:	2300      	movs	r3, #0
 800a374:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a376:	463a      	mov	r2, r7
 800a378:	1d39      	adds	r1, r7, #4
 800a37a:	f107 0308 	add.w	r3, r7, #8
 800a37e:	4618      	mov	r0, r3
 800a380:	f7fe ff78 	bl	8009274 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a384:	6839      	ldr	r1, [r7, #0]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	68ba      	ldr	r2, [r7, #8]
 800a38a:	9202      	str	r2, [sp, #8]
 800a38c:	9301      	str	r3, [sp, #4]
 800a38e:	2300      	movs	r3, #0
 800a390:	9300      	str	r3, [sp, #0]
 800a392:	2300      	movs	r3, #0
 800a394:	460a      	mov	r2, r1
 800a396:	4924      	ldr	r1, [pc, #144]	; (800a428 <vTaskStartScheduler+0xc0>)
 800a398:	4824      	ldr	r0, [pc, #144]	; (800a42c <vTaskStartScheduler+0xc4>)
 800a39a:	f7ff fdf9 	bl	8009f90 <xTaskCreateStatic>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	4a23      	ldr	r2, [pc, #140]	; (800a430 <vTaskStartScheduler+0xc8>)
 800a3a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a3a4:	4b22      	ldr	r3, [pc, #136]	; (800a430 <vTaskStartScheduler+0xc8>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d002      	beq.n	800a3b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	617b      	str	r3, [r7, #20]
 800a3b0:	e001      	b.n	800a3b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d102      	bne.n	800a3c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a3bc:	f000 fd10 	bl	800ade0 <xTimerCreateTimerTask>
 800a3c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d11b      	bne.n	800a400 <vTaskStartScheduler+0x98>
	__asm volatile
 800a3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3cc:	f383 8811 	msr	BASEPRI, r3
 800a3d0:	f3bf 8f6f 	isb	sy
 800a3d4:	f3bf 8f4f 	dsb	sy
 800a3d8:	613b      	str	r3, [r7, #16]
}
 800a3da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a3dc:	4b15      	ldr	r3, [pc, #84]	; (800a434 <vTaskStartScheduler+0xcc>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	3354      	adds	r3, #84	; 0x54
 800a3e2:	4a15      	ldr	r2, [pc, #84]	; (800a438 <vTaskStartScheduler+0xd0>)
 800a3e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a3e6:	4b15      	ldr	r3, [pc, #84]	; (800a43c <vTaskStartScheduler+0xd4>)
 800a3e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a3ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a3ee:	4b14      	ldr	r3, [pc, #80]	; (800a440 <vTaskStartScheduler+0xd8>)
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a3f4:	4b13      	ldr	r3, [pc, #76]	; (800a444 <vTaskStartScheduler+0xdc>)
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a3fa:	f001 f8c9 	bl	800b590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a3fe:	e00e      	b.n	800a41e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a406:	d10a      	bne.n	800a41e <vTaskStartScheduler+0xb6>
	__asm volatile
 800a408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40c:	f383 8811 	msr	BASEPRI, r3
 800a410:	f3bf 8f6f 	isb	sy
 800a414:	f3bf 8f4f 	dsb	sy
 800a418:	60fb      	str	r3, [r7, #12]
}
 800a41a:	bf00      	nop
 800a41c:	e7fe      	b.n	800a41c <vTaskStartScheduler+0xb4>
}
 800a41e:	bf00      	nop
 800a420:	3718      	adds	r7, #24
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	0800c688 	.word	0x0800c688
 800a42c:	0800aa6d 	.word	0x0800aa6d
 800a430:	20000edc 	.word	0x20000edc
 800a434:	200009e4 	.word	0x200009e4
 800a438:	2000007c 	.word	0x2000007c
 800a43c:	20000ed8 	.word	0x20000ed8
 800a440:	20000ec4 	.word	0x20000ec4
 800a444:	20000ebc 	.word	0x20000ebc

0800a448 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a448:	b480      	push	{r7}
 800a44a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a44c:	4b04      	ldr	r3, [pc, #16]	; (800a460 <vTaskSuspendAll+0x18>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	3301      	adds	r3, #1
 800a452:	4a03      	ldr	r2, [pc, #12]	; (800a460 <vTaskSuspendAll+0x18>)
 800a454:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a456:	bf00      	nop
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr
 800a460:	20000ee0 	.word	0x20000ee0

0800a464 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a46a:	2300      	movs	r3, #0
 800a46c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a46e:	2300      	movs	r3, #0
 800a470:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a472:	4b42      	ldr	r3, [pc, #264]	; (800a57c <xTaskResumeAll+0x118>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d10a      	bne.n	800a490 <xTaskResumeAll+0x2c>
	__asm volatile
 800a47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47e:	f383 8811 	msr	BASEPRI, r3
 800a482:	f3bf 8f6f 	isb	sy
 800a486:	f3bf 8f4f 	dsb	sy
 800a48a:	603b      	str	r3, [r7, #0]
}
 800a48c:	bf00      	nop
 800a48e:	e7fe      	b.n	800a48e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a490:	f001 f920 	bl	800b6d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a494:	4b39      	ldr	r3, [pc, #228]	; (800a57c <xTaskResumeAll+0x118>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	3b01      	subs	r3, #1
 800a49a:	4a38      	ldr	r2, [pc, #224]	; (800a57c <xTaskResumeAll+0x118>)
 800a49c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a49e:	4b37      	ldr	r3, [pc, #220]	; (800a57c <xTaskResumeAll+0x118>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d162      	bne.n	800a56c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a4a6:	4b36      	ldr	r3, [pc, #216]	; (800a580 <xTaskResumeAll+0x11c>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d05e      	beq.n	800a56c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a4ae:	e02f      	b.n	800a510 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4b0:	4b34      	ldr	r3, [pc, #208]	; (800a584 <xTaskResumeAll+0x120>)
 800a4b2:	68db      	ldr	r3, [r3, #12]
 800a4b4:	68db      	ldr	r3, [r3, #12]
 800a4b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	3318      	adds	r3, #24
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7fe ff97 	bl	80093f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	3304      	adds	r3, #4
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7fe ff92 	bl	80093f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4d0:	4b2d      	ldr	r3, [pc, #180]	; (800a588 <xTaskResumeAll+0x124>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d903      	bls.n	800a4e0 <xTaskResumeAll+0x7c>
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4dc:	4a2a      	ldr	r2, [pc, #168]	; (800a588 <xTaskResumeAll+0x124>)
 800a4de:	6013      	str	r3, [r2, #0]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4e4:	4613      	mov	r3, r2
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	4413      	add	r3, r2
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	4a27      	ldr	r2, [pc, #156]	; (800a58c <xTaskResumeAll+0x128>)
 800a4ee:	441a      	add	r2, r3
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	3304      	adds	r3, #4
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	4610      	mov	r0, r2
 800a4f8:	f7fe ff1d 	bl	8009336 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a500:	4b23      	ldr	r3, [pc, #140]	; (800a590 <xTaskResumeAll+0x12c>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a506:	429a      	cmp	r2, r3
 800a508:	d302      	bcc.n	800a510 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a50a:	4b22      	ldr	r3, [pc, #136]	; (800a594 <xTaskResumeAll+0x130>)
 800a50c:	2201      	movs	r2, #1
 800a50e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a510:	4b1c      	ldr	r3, [pc, #112]	; (800a584 <xTaskResumeAll+0x120>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d1cb      	bne.n	800a4b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d001      	beq.n	800a522 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a51e:	f000 fb5f 	bl	800abe0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a522:	4b1d      	ldr	r3, [pc, #116]	; (800a598 <xTaskResumeAll+0x134>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d010      	beq.n	800a550 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a52e:	f000 f847 	bl	800a5c0 <xTaskIncrementTick>
 800a532:	4603      	mov	r3, r0
 800a534:	2b00      	cmp	r3, #0
 800a536:	d002      	beq.n	800a53e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a538:	4b16      	ldr	r3, [pc, #88]	; (800a594 <xTaskResumeAll+0x130>)
 800a53a:	2201      	movs	r2, #1
 800a53c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	3b01      	subs	r3, #1
 800a542:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d1f1      	bne.n	800a52e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a54a:	4b13      	ldr	r3, [pc, #76]	; (800a598 <xTaskResumeAll+0x134>)
 800a54c:	2200      	movs	r2, #0
 800a54e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a550:	4b10      	ldr	r3, [pc, #64]	; (800a594 <xTaskResumeAll+0x130>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d009      	beq.n	800a56c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a558:	2301      	movs	r3, #1
 800a55a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a55c:	4b0f      	ldr	r3, [pc, #60]	; (800a59c <xTaskResumeAll+0x138>)
 800a55e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a562:	601a      	str	r2, [r3, #0]
 800a564:	f3bf 8f4f 	dsb	sy
 800a568:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a56c:	f001 f8e2 	bl	800b734 <vPortExitCritical>

	return xAlreadyYielded;
 800a570:	68bb      	ldr	r3, [r7, #8]
}
 800a572:	4618      	mov	r0, r3
 800a574:	3710      	adds	r7, #16
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	20000ee0 	.word	0x20000ee0
 800a580:	20000eb8 	.word	0x20000eb8
 800a584:	20000e78 	.word	0x20000e78
 800a588:	20000ec0 	.word	0x20000ec0
 800a58c:	200009e8 	.word	0x200009e8
 800a590:	200009e4 	.word	0x200009e4
 800a594:	20000ecc 	.word	0x20000ecc
 800a598:	20000ec8 	.word	0x20000ec8
 800a59c:	e000ed04 	.word	0xe000ed04

0800a5a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a5a6:	4b05      	ldr	r3, [pc, #20]	; (800a5bc <xTaskGetTickCount+0x1c>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a5ac:	687b      	ldr	r3, [r7, #4]
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	370c      	adds	r7, #12
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr
 800a5ba:	bf00      	nop
 800a5bc:	20000ebc 	.word	0x20000ebc

0800a5c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b086      	sub	sp, #24
 800a5c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5ca:	4b4f      	ldr	r3, [pc, #316]	; (800a708 <xTaskIncrementTick+0x148>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f040 808f 	bne.w	800a6f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a5d4:	4b4d      	ldr	r3, [pc, #308]	; (800a70c <xTaskIncrementTick+0x14c>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a5dc:	4a4b      	ldr	r2, [pc, #300]	; (800a70c <xTaskIncrementTick+0x14c>)
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d120      	bne.n	800a62a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a5e8:	4b49      	ldr	r3, [pc, #292]	; (800a710 <xTaskIncrementTick+0x150>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d00a      	beq.n	800a608 <xTaskIncrementTick+0x48>
	__asm volatile
 800a5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f6:	f383 8811 	msr	BASEPRI, r3
 800a5fa:	f3bf 8f6f 	isb	sy
 800a5fe:	f3bf 8f4f 	dsb	sy
 800a602:	603b      	str	r3, [r7, #0]
}
 800a604:	bf00      	nop
 800a606:	e7fe      	b.n	800a606 <xTaskIncrementTick+0x46>
 800a608:	4b41      	ldr	r3, [pc, #260]	; (800a710 <xTaskIncrementTick+0x150>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	60fb      	str	r3, [r7, #12]
 800a60e:	4b41      	ldr	r3, [pc, #260]	; (800a714 <xTaskIncrementTick+0x154>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a3f      	ldr	r2, [pc, #252]	; (800a710 <xTaskIncrementTick+0x150>)
 800a614:	6013      	str	r3, [r2, #0]
 800a616:	4a3f      	ldr	r2, [pc, #252]	; (800a714 <xTaskIncrementTick+0x154>)
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6013      	str	r3, [r2, #0]
 800a61c:	4b3e      	ldr	r3, [pc, #248]	; (800a718 <xTaskIncrementTick+0x158>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	3301      	adds	r3, #1
 800a622:	4a3d      	ldr	r2, [pc, #244]	; (800a718 <xTaskIncrementTick+0x158>)
 800a624:	6013      	str	r3, [r2, #0]
 800a626:	f000 fadb 	bl	800abe0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a62a:	4b3c      	ldr	r3, [pc, #240]	; (800a71c <xTaskIncrementTick+0x15c>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	693a      	ldr	r2, [r7, #16]
 800a630:	429a      	cmp	r2, r3
 800a632:	d349      	bcc.n	800a6c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a634:	4b36      	ldr	r3, [pc, #216]	; (800a710 <xTaskIncrementTick+0x150>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d104      	bne.n	800a648 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a63e:	4b37      	ldr	r3, [pc, #220]	; (800a71c <xTaskIncrementTick+0x15c>)
 800a640:	f04f 32ff 	mov.w	r2, #4294967295
 800a644:	601a      	str	r2, [r3, #0]
					break;
 800a646:	e03f      	b.n	800a6c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a648:	4b31      	ldr	r3, [pc, #196]	; (800a710 <xTaskIncrementTick+0x150>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a658:	693a      	ldr	r2, [r7, #16]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d203      	bcs.n	800a668 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a660:	4a2e      	ldr	r2, [pc, #184]	; (800a71c <xTaskIncrementTick+0x15c>)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a666:	e02f      	b.n	800a6c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	3304      	adds	r3, #4
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7fe febf 	bl	80093f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a676:	2b00      	cmp	r3, #0
 800a678:	d004      	beq.n	800a684 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	3318      	adds	r3, #24
 800a67e:	4618      	mov	r0, r3
 800a680:	f7fe feb6 	bl	80093f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a688:	4b25      	ldr	r3, [pc, #148]	; (800a720 <xTaskIncrementTick+0x160>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d903      	bls.n	800a698 <xTaskIncrementTick+0xd8>
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a694:	4a22      	ldr	r2, [pc, #136]	; (800a720 <xTaskIncrementTick+0x160>)
 800a696:	6013      	str	r3, [r2, #0]
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a69c:	4613      	mov	r3, r2
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	4413      	add	r3, r2
 800a6a2:	009b      	lsls	r3, r3, #2
 800a6a4:	4a1f      	ldr	r2, [pc, #124]	; (800a724 <xTaskIncrementTick+0x164>)
 800a6a6:	441a      	add	r2, r3
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	3304      	adds	r3, #4
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	4610      	mov	r0, r2
 800a6b0:	f7fe fe41 	bl	8009336 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6b8:	4b1b      	ldr	r3, [pc, #108]	; (800a728 <xTaskIncrementTick+0x168>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d3b8      	bcc.n	800a634 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6c6:	e7b5      	b.n	800a634 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a6c8:	4b17      	ldr	r3, [pc, #92]	; (800a728 <xTaskIncrementTick+0x168>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ce:	4915      	ldr	r1, [pc, #84]	; (800a724 <xTaskIncrementTick+0x164>)
 800a6d0:	4613      	mov	r3, r2
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	4413      	add	r3, r2
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	440b      	add	r3, r1
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d901      	bls.n	800a6e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a6e4:	4b11      	ldr	r3, [pc, #68]	; (800a72c <xTaskIncrementTick+0x16c>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d007      	beq.n	800a6fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	617b      	str	r3, [r7, #20]
 800a6f0:	e004      	b.n	800a6fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a6f2:	4b0f      	ldr	r3, [pc, #60]	; (800a730 <xTaskIncrementTick+0x170>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	4a0d      	ldr	r2, [pc, #52]	; (800a730 <xTaskIncrementTick+0x170>)
 800a6fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a6fc:	697b      	ldr	r3, [r7, #20]
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3718      	adds	r7, #24
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	20000ee0 	.word	0x20000ee0
 800a70c:	20000ebc 	.word	0x20000ebc
 800a710:	20000e70 	.word	0x20000e70
 800a714:	20000e74 	.word	0x20000e74
 800a718:	20000ed0 	.word	0x20000ed0
 800a71c:	20000ed8 	.word	0x20000ed8
 800a720:	20000ec0 	.word	0x20000ec0
 800a724:	200009e8 	.word	0x200009e8
 800a728:	200009e4 	.word	0x200009e4
 800a72c:	20000ecc 	.word	0x20000ecc
 800a730:	20000ec8 	.word	0x20000ec8

0800a734 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a734:	b480      	push	{r7}
 800a736:	b085      	sub	sp, #20
 800a738:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a73a:	4b2a      	ldr	r3, [pc, #168]	; (800a7e4 <vTaskSwitchContext+0xb0>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d003      	beq.n	800a74a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a742:	4b29      	ldr	r3, [pc, #164]	; (800a7e8 <vTaskSwitchContext+0xb4>)
 800a744:	2201      	movs	r2, #1
 800a746:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a748:	e046      	b.n	800a7d8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a74a:	4b27      	ldr	r3, [pc, #156]	; (800a7e8 <vTaskSwitchContext+0xb4>)
 800a74c:	2200      	movs	r2, #0
 800a74e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a750:	4b26      	ldr	r3, [pc, #152]	; (800a7ec <vTaskSwitchContext+0xb8>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	60fb      	str	r3, [r7, #12]
 800a756:	e010      	b.n	800a77a <vTaskSwitchContext+0x46>
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d10a      	bne.n	800a774 <vTaskSwitchContext+0x40>
	__asm volatile
 800a75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a762:	f383 8811 	msr	BASEPRI, r3
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	607b      	str	r3, [r7, #4]
}
 800a770:	bf00      	nop
 800a772:	e7fe      	b.n	800a772 <vTaskSwitchContext+0x3e>
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	3b01      	subs	r3, #1
 800a778:	60fb      	str	r3, [r7, #12]
 800a77a:	491d      	ldr	r1, [pc, #116]	; (800a7f0 <vTaskSwitchContext+0xbc>)
 800a77c:	68fa      	ldr	r2, [r7, #12]
 800a77e:	4613      	mov	r3, r2
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	4413      	add	r3, r2
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	440b      	add	r3, r1
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d0e4      	beq.n	800a758 <vTaskSwitchContext+0x24>
 800a78e:	68fa      	ldr	r2, [r7, #12]
 800a790:	4613      	mov	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	4413      	add	r3, r2
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	4a15      	ldr	r2, [pc, #84]	; (800a7f0 <vTaskSwitchContext+0xbc>)
 800a79a:	4413      	add	r3, r2
 800a79c:	60bb      	str	r3, [r7, #8]
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	685a      	ldr	r2, [r3, #4]
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	605a      	str	r2, [r3, #4]
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	685a      	ldr	r2, [r3, #4]
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	3308      	adds	r3, #8
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d104      	bne.n	800a7be <vTaskSwitchContext+0x8a>
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	685a      	ldr	r2, [r3, #4]
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	605a      	str	r2, [r3, #4]
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	4a0b      	ldr	r2, [pc, #44]	; (800a7f4 <vTaskSwitchContext+0xc0>)
 800a7c6:	6013      	str	r3, [r2, #0]
 800a7c8:	4a08      	ldr	r2, [pc, #32]	; (800a7ec <vTaskSwitchContext+0xb8>)
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a7ce:	4b09      	ldr	r3, [pc, #36]	; (800a7f4 <vTaskSwitchContext+0xc0>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	3354      	adds	r3, #84	; 0x54
 800a7d4:	4a08      	ldr	r2, [pc, #32]	; (800a7f8 <vTaskSwitchContext+0xc4>)
 800a7d6:	6013      	str	r3, [r2, #0]
}
 800a7d8:	bf00      	nop
 800a7da:	3714      	adds	r7, #20
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr
 800a7e4:	20000ee0 	.word	0x20000ee0
 800a7e8:	20000ecc 	.word	0x20000ecc
 800a7ec:	20000ec0 	.word	0x20000ec0
 800a7f0:	200009e8 	.word	0x200009e8
 800a7f4:	200009e4 	.word	0x200009e4
 800a7f8:	2000007c 	.word	0x2000007c

0800a7fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d10a      	bne.n	800a822 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a810:	f383 8811 	msr	BASEPRI, r3
 800a814:	f3bf 8f6f 	isb	sy
 800a818:	f3bf 8f4f 	dsb	sy
 800a81c:	60fb      	str	r3, [r7, #12]
}
 800a81e:	bf00      	nop
 800a820:	e7fe      	b.n	800a820 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a822:	4b07      	ldr	r3, [pc, #28]	; (800a840 <vTaskPlaceOnEventList+0x44>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	3318      	adds	r3, #24
 800a828:	4619      	mov	r1, r3
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f7fe fda7 	bl	800937e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a830:	2101      	movs	r1, #1
 800a832:	6838      	ldr	r0, [r7, #0]
 800a834:	f000 fa80 	bl	800ad38 <prvAddCurrentTaskToDelayedList>
}
 800a838:	bf00      	nop
 800a83a:	3710      	adds	r7, #16
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	200009e4 	.word	0x200009e4

0800a844 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a844:	b580      	push	{r7, lr}
 800a846:	b086      	sub	sp, #24
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d10a      	bne.n	800a86c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85a:	f383 8811 	msr	BASEPRI, r3
 800a85e:	f3bf 8f6f 	isb	sy
 800a862:	f3bf 8f4f 	dsb	sy
 800a866:	617b      	str	r3, [r7, #20]
}
 800a868:	bf00      	nop
 800a86a:	e7fe      	b.n	800a86a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a86c:	4b0a      	ldr	r3, [pc, #40]	; (800a898 <vTaskPlaceOnEventListRestricted+0x54>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	3318      	adds	r3, #24
 800a872:	4619      	mov	r1, r3
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	f7fe fd5e 	bl	8009336 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d002      	beq.n	800a886 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a880:	f04f 33ff 	mov.w	r3, #4294967295
 800a884:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a886:	6879      	ldr	r1, [r7, #4]
 800a888:	68b8      	ldr	r0, [r7, #8]
 800a88a:	f000 fa55 	bl	800ad38 <prvAddCurrentTaskToDelayedList>
	}
 800a88e:	bf00      	nop
 800a890:	3718      	adds	r7, #24
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	200009e4 	.word	0x200009e4

0800a89c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b086      	sub	sp, #24
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d10a      	bne.n	800a8c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b6:	f383 8811 	msr	BASEPRI, r3
 800a8ba:	f3bf 8f6f 	isb	sy
 800a8be:	f3bf 8f4f 	dsb	sy
 800a8c2:	60fb      	str	r3, [r7, #12]
}
 800a8c4:	bf00      	nop
 800a8c6:	e7fe      	b.n	800a8c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	3318      	adds	r3, #24
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7fe fd8f 	bl	80093f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8d2:	4b1e      	ldr	r3, [pc, #120]	; (800a94c <xTaskRemoveFromEventList+0xb0>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d11d      	bne.n	800a916 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	3304      	adds	r3, #4
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7fe fd86 	bl	80093f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8e8:	4b19      	ldr	r3, [pc, #100]	; (800a950 <xTaskRemoveFromEventList+0xb4>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d903      	bls.n	800a8f8 <xTaskRemoveFromEventList+0x5c>
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f4:	4a16      	ldr	r2, [pc, #88]	; (800a950 <xTaskRemoveFromEventList+0xb4>)
 800a8f6:	6013      	str	r3, [r2, #0]
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	009b      	lsls	r3, r3, #2
 800a900:	4413      	add	r3, r2
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	4a13      	ldr	r2, [pc, #76]	; (800a954 <xTaskRemoveFromEventList+0xb8>)
 800a906:	441a      	add	r2, r3
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	3304      	adds	r3, #4
 800a90c:	4619      	mov	r1, r3
 800a90e:	4610      	mov	r0, r2
 800a910:	f7fe fd11 	bl	8009336 <vListInsertEnd>
 800a914:	e005      	b.n	800a922 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	3318      	adds	r3, #24
 800a91a:	4619      	mov	r1, r3
 800a91c:	480e      	ldr	r0, [pc, #56]	; (800a958 <xTaskRemoveFromEventList+0xbc>)
 800a91e:	f7fe fd0a 	bl	8009336 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a926:	4b0d      	ldr	r3, [pc, #52]	; (800a95c <xTaskRemoveFromEventList+0xc0>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d905      	bls.n	800a93c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a930:	2301      	movs	r3, #1
 800a932:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a934:	4b0a      	ldr	r3, [pc, #40]	; (800a960 <xTaskRemoveFromEventList+0xc4>)
 800a936:	2201      	movs	r2, #1
 800a938:	601a      	str	r2, [r3, #0]
 800a93a:	e001      	b.n	800a940 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a93c:	2300      	movs	r3, #0
 800a93e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a940:	697b      	ldr	r3, [r7, #20]
}
 800a942:	4618      	mov	r0, r3
 800a944:	3718      	adds	r7, #24
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop
 800a94c:	20000ee0 	.word	0x20000ee0
 800a950:	20000ec0 	.word	0x20000ec0
 800a954:	200009e8 	.word	0x200009e8
 800a958:	20000e78 	.word	0x20000e78
 800a95c:	200009e4 	.word	0x200009e4
 800a960:	20000ecc 	.word	0x20000ecc

0800a964 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a96c:	4b06      	ldr	r3, [pc, #24]	; (800a988 <vTaskInternalSetTimeOutState+0x24>)
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a974:	4b05      	ldr	r3, [pc, #20]	; (800a98c <vTaskInternalSetTimeOutState+0x28>)
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	605a      	str	r2, [r3, #4]
}
 800a97c:	bf00      	nop
 800a97e:	370c      	adds	r7, #12
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr
 800a988:	20000ed0 	.word	0x20000ed0
 800a98c:	20000ebc 	.word	0x20000ebc

0800a990 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b088      	sub	sp, #32
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d10a      	bne.n	800a9b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a4:	f383 8811 	msr	BASEPRI, r3
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	613b      	str	r3, [r7, #16]
}
 800a9b2:	bf00      	nop
 800a9b4:	e7fe      	b.n	800a9b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10a      	bne.n	800a9d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c0:	f383 8811 	msr	BASEPRI, r3
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	60fb      	str	r3, [r7, #12]
}
 800a9ce:	bf00      	nop
 800a9d0:	e7fe      	b.n	800a9d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a9d2:	f000 fe7f 	bl	800b6d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a9d6:	4b1d      	ldr	r3, [pc, #116]	; (800aa4c <xTaskCheckForTimeOut+0xbc>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	69ba      	ldr	r2, [r7, #24]
 800a9e2:	1ad3      	subs	r3, r2, r3
 800a9e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ee:	d102      	bne.n	800a9f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	61fb      	str	r3, [r7, #28]
 800a9f4:	e023      	b.n	800aa3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	4b15      	ldr	r3, [pc, #84]	; (800aa50 <xTaskCheckForTimeOut+0xc0>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d007      	beq.n	800aa12 <xTaskCheckForTimeOut+0x82>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	69ba      	ldr	r2, [r7, #24]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d302      	bcc.n	800aa12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	61fb      	str	r3, [r7, #28]
 800aa10:	e015      	b.n	800aa3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	697a      	ldr	r2, [r7, #20]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d20b      	bcs.n	800aa34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	1ad2      	subs	r2, r2, r3
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f7ff ff9b 	bl	800a964 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	61fb      	str	r3, [r7, #28]
 800aa32:	e004      	b.n	800aa3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	2200      	movs	r2, #0
 800aa38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aa3e:	f000 fe79 	bl	800b734 <vPortExitCritical>

	return xReturn;
 800aa42:	69fb      	ldr	r3, [r7, #28]
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3720      	adds	r7, #32
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	20000ebc 	.word	0x20000ebc
 800aa50:	20000ed0 	.word	0x20000ed0

0800aa54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aa54:	b480      	push	{r7}
 800aa56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aa58:	4b03      	ldr	r3, [pc, #12]	; (800aa68 <vTaskMissedYield+0x14>)
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	601a      	str	r2, [r3, #0]
}
 800aa5e:	bf00      	nop
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr
 800aa68:	20000ecc 	.word	0x20000ecc

0800aa6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aa74:	f000 f852 	bl	800ab1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aa78:	4b06      	ldr	r3, [pc, #24]	; (800aa94 <prvIdleTask+0x28>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d9f9      	bls.n	800aa74 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aa80:	4b05      	ldr	r3, [pc, #20]	; (800aa98 <prvIdleTask+0x2c>)
 800aa82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa86:	601a      	str	r2, [r3, #0]
 800aa88:	f3bf 8f4f 	dsb	sy
 800aa8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aa90:	e7f0      	b.n	800aa74 <prvIdleTask+0x8>
 800aa92:	bf00      	nop
 800aa94:	200009e8 	.word	0x200009e8
 800aa98:	e000ed04 	.word	0xe000ed04

0800aa9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	607b      	str	r3, [r7, #4]
 800aaa6:	e00c      	b.n	800aac2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	4613      	mov	r3, r2
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	4413      	add	r3, r2
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	4a12      	ldr	r2, [pc, #72]	; (800aafc <prvInitialiseTaskLists+0x60>)
 800aab4:	4413      	add	r3, r2
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7fe fc10 	bl	80092dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	3301      	adds	r3, #1
 800aac0:	607b      	str	r3, [r7, #4]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2b37      	cmp	r3, #55	; 0x37
 800aac6:	d9ef      	bls.n	800aaa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aac8:	480d      	ldr	r0, [pc, #52]	; (800ab00 <prvInitialiseTaskLists+0x64>)
 800aaca:	f7fe fc07 	bl	80092dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aace:	480d      	ldr	r0, [pc, #52]	; (800ab04 <prvInitialiseTaskLists+0x68>)
 800aad0:	f7fe fc04 	bl	80092dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aad4:	480c      	ldr	r0, [pc, #48]	; (800ab08 <prvInitialiseTaskLists+0x6c>)
 800aad6:	f7fe fc01 	bl	80092dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aada:	480c      	ldr	r0, [pc, #48]	; (800ab0c <prvInitialiseTaskLists+0x70>)
 800aadc:	f7fe fbfe 	bl	80092dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aae0:	480b      	ldr	r0, [pc, #44]	; (800ab10 <prvInitialiseTaskLists+0x74>)
 800aae2:	f7fe fbfb 	bl	80092dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aae6:	4b0b      	ldr	r3, [pc, #44]	; (800ab14 <prvInitialiseTaskLists+0x78>)
 800aae8:	4a05      	ldr	r2, [pc, #20]	; (800ab00 <prvInitialiseTaskLists+0x64>)
 800aaea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aaec:	4b0a      	ldr	r3, [pc, #40]	; (800ab18 <prvInitialiseTaskLists+0x7c>)
 800aaee:	4a05      	ldr	r2, [pc, #20]	; (800ab04 <prvInitialiseTaskLists+0x68>)
 800aaf0:	601a      	str	r2, [r3, #0]
}
 800aaf2:	bf00      	nop
 800aaf4:	3708      	adds	r7, #8
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	200009e8 	.word	0x200009e8
 800ab00:	20000e48 	.word	0x20000e48
 800ab04:	20000e5c 	.word	0x20000e5c
 800ab08:	20000e78 	.word	0x20000e78
 800ab0c:	20000e8c 	.word	0x20000e8c
 800ab10:	20000ea4 	.word	0x20000ea4
 800ab14:	20000e70 	.word	0x20000e70
 800ab18:	20000e74 	.word	0x20000e74

0800ab1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab22:	e019      	b.n	800ab58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ab24:	f000 fdd6 	bl	800b6d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab28:	4b10      	ldr	r3, [pc, #64]	; (800ab6c <prvCheckTasksWaitingTermination+0x50>)
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	68db      	ldr	r3, [r3, #12]
 800ab2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	3304      	adds	r3, #4
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7fe fc5b 	bl	80093f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ab3a:	4b0d      	ldr	r3, [pc, #52]	; (800ab70 <prvCheckTasksWaitingTermination+0x54>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	4a0b      	ldr	r2, [pc, #44]	; (800ab70 <prvCheckTasksWaitingTermination+0x54>)
 800ab42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ab44:	4b0b      	ldr	r3, [pc, #44]	; (800ab74 <prvCheckTasksWaitingTermination+0x58>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	3b01      	subs	r3, #1
 800ab4a:	4a0a      	ldr	r2, [pc, #40]	; (800ab74 <prvCheckTasksWaitingTermination+0x58>)
 800ab4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ab4e:	f000 fdf1 	bl	800b734 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 f810 	bl	800ab78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab58:	4b06      	ldr	r3, [pc, #24]	; (800ab74 <prvCheckTasksWaitingTermination+0x58>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d1e1      	bne.n	800ab24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ab60:	bf00      	nop
 800ab62:	bf00      	nop
 800ab64:	3708      	adds	r7, #8
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	20000e8c 	.word	0x20000e8c
 800ab70:	20000eb8 	.word	0x20000eb8
 800ab74:	20000ea0 	.word	0x20000ea0

0800ab78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	3354      	adds	r3, #84	; 0x54
 800ab84:	4618      	mov	r0, r3
 800ab86:	f001 fc79 	bl	800c47c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d108      	bne.n	800aba6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f000 ff89 	bl	800bab0 <vPortFree>
				vPortFree( pxTCB );
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 ff86 	bl	800bab0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aba4:	e018      	b.n	800abd8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800abac:	2b01      	cmp	r3, #1
 800abae:	d103      	bne.n	800abb8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 ff7d 	bl	800bab0 <vPortFree>
	}
 800abb6:	e00f      	b.n	800abd8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800abbe:	2b02      	cmp	r3, #2
 800abc0:	d00a      	beq.n	800abd8 <prvDeleteTCB+0x60>
	__asm volatile
 800abc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc6:	f383 8811 	msr	BASEPRI, r3
 800abca:	f3bf 8f6f 	isb	sy
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	60fb      	str	r3, [r7, #12]
}
 800abd4:	bf00      	nop
 800abd6:	e7fe      	b.n	800abd6 <prvDeleteTCB+0x5e>
	}
 800abd8:	bf00      	nop
 800abda:	3710      	adds	r7, #16
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abe6:	4b0c      	ldr	r3, [pc, #48]	; (800ac18 <prvResetNextTaskUnblockTime+0x38>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d104      	bne.n	800abfa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800abf0:	4b0a      	ldr	r3, [pc, #40]	; (800ac1c <prvResetNextTaskUnblockTime+0x3c>)
 800abf2:	f04f 32ff 	mov.w	r2, #4294967295
 800abf6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800abf8:	e008      	b.n	800ac0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abfa:	4b07      	ldr	r3, [pc, #28]	; (800ac18 <prvResetNextTaskUnblockTime+0x38>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	68db      	ldr	r3, [r3, #12]
 800ac00:	68db      	ldr	r3, [r3, #12]
 800ac02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	4a04      	ldr	r2, [pc, #16]	; (800ac1c <prvResetNextTaskUnblockTime+0x3c>)
 800ac0a:	6013      	str	r3, [r2, #0]
}
 800ac0c:	bf00      	nop
 800ac0e:	370c      	adds	r7, #12
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr
 800ac18:	20000e70 	.word	0x20000e70
 800ac1c:	20000ed8 	.word	0x20000ed8

0800ac20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ac20:	b480      	push	{r7}
 800ac22:	b083      	sub	sp, #12
 800ac24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ac26:	4b0b      	ldr	r3, [pc, #44]	; (800ac54 <xTaskGetSchedulerState+0x34>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d102      	bne.n	800ac34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	607b      	str	r3, [r7, #4]
 800ac32:	e008      	b.n	800ac46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac34:	4b08      	ldr	r3, [pc, #32]	; (800ac58 <xTaskGetSchedulerState+0x38>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d102      	bne.n	800ac42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ac3c:	2302      	movs	r3, #2
 800ac3e:	607b      	str	r3, [r7, #4]
 800ac40:	e001      	b.n	800ac46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ac42:	2300      	movs	r3, #0
 800ac44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ac46:	687b      	ldr	r3, [r7, #4]
	}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	370c      	adds	r7, #12
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr
 800ac54:	20000ec4 	.word	0x20000ec4
 800ac58:	20000ee0 	.word	0x20000ee0

0800ac5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b086      	sub	sp, #24
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d056      	beq.n	800ad20 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ac72:	4b2e      	ldr	r3, [pc, #184]	; (800ad2c <xTaskPriorityDisinherit+0xd0>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	693a      	ldr	r2, [r7, #16]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d00a      	beq.n	800ac92 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ac7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac80:	f383 8811 	msr	BASEPRI, r3
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	f3bf 8f4f 	dsb	sy
 800ac8c:	60fb      	str	r3, [r7, #12]
}
 800ac8e:	bf00      	nop
 800ac90:	e7fe      	b.n	800ac90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d10a      	bne.n	800acb0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ac9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9e:	f383 8811 	msr	BASEPRI, r3
 800aca2:	f3bf 8f6f 	isb	sy
 800aca6:	f3bf 8f4f 	dsb	sy
 800acaa:	60bb      	str	r3, [r7, #8]
}
 800acac:	bf00      	nop
 800acae:	e7fe      	b.n	800acae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acb4:	1e5a      	subs	r2, r3, #1
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d02c      	beq.n	800ad20 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acca:	2b00      	cmp	r3, #0
 800accc:	d128      	bne.n	800ad20 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	3304      	adds	r3, #4
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7fe fb8c 	bl	80093f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acf0:	4b0f      	ldr	r3, [pc, #60]	; (800ad30 <xTaskPriorityDisinherit+0xd4>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d903      	bls.n	800ad00 <xTaskPriorityDisinherit+0xa4>
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acfc:	4a0c      	ldr	r2, [pc, #48]	; (800ad30 <xTaskPriorityDisinherit+0xd4>)
 800acfe:	6013      	str	r3, [r2, #0]
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad04:	4613      	mov	r3, r2
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	4413      	add	r3, r2
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	4a09      	ldr	r2, [pc, #36]	; (800ad34 <xTaskPriorityDisinherit+0xd8>)
 800ad0e:	441a      	add	r2, r3
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	3304      	adds	r3, #4
 800ad14:	4619      	mov	r1, r3
 800ad16:	4610      	mov	r0, r2
 800ad18:	f7fe fb0d 	bl	8009336 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ad20:	697b      	ldr	r3, [r7, #20]
	}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3718      	adds	r7, #24
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	200009e4 	.word	0x200009e4
 800ad30:	20000ec0 	.word	0x20000ec0
 800ad34:	200009e8 	.word	0x200009e8

0800ad38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad42:	4b21      	ldr	r3, [pc, #132]	; (800adc8 <prvAddCurrentTaskToDelayedList+0x90>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad48:	4b20      	ldr	r3, [pc, #128]	; (800adcc <prvAddCurrentTaskToDelayedList+0x94>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	3304      	adds	r3, #4
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7fe fb4e 	bl	80093f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad5a:	d10a      	bne.n	800ad72 <prvAddCurrentTaskToDelayedList+0x3a>
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d007      	beq.n	800ad72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad62:	4b1a      	ldr	r3, [pc, #104]	; (800adcc <prvAddCurrentTaskToDelayedList+0x94>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	3304      	adds	r3, #4
 800ad68:	4619      	mov	r1, r3
 800ad6a:	4819      	ldr	r0, [pc, #100]	; (800add0 <prvAddCurrentTaskToDelayedList+0x98>)
 800ad6c:	f7fe fae3 	bl	8009336 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ad70:	e026      	b.n	800adc0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ad72:	68fa      	ldr	r2, [r7, #12]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	4413      	add	r3, r2
 800ad78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ad7a:	4b14      	ldr	r3, [pc, #80]	; (800adcc <prvAddCurrentTaskToDelayedList+0x94>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	68ba      	ldr	r2, [r7, #8]
 800ad80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ad82:	68ba      	ldr	r2, [r7, #8]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d209      	bcs.n	800ad9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad8a:	4b12      	ldr	r3, [pc, #72]	; (800add4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	4b0f      	ldr	r3, [pc, #60]	; (800adcc <prvAddCurrentTaskToDelayedList+0x94>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	3304      	adds	r3, #4
 800ad94:	4619      	mov	r1, r3
 800ad96:	4610      	mov	r0, r2
 800ad98:	f7fe faf1 	bl	800937e <vListInsert>
}
 800ad9c:	e010      	b.n	800adc0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad9e:	4b0e      	ldr	r3, [pc, #56]	; (800add8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	4b0a      	ldr	r3, [pc, #40]	; (800adcc <prvAddCurrentTaskToDelayedList+0x94>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	3304      	adds	r3, #4
 800ada8:	4619      	mov	r1, r3
 800adaa:	4610      	mov	r0, r2
 800adac:	f7fe fae7 	bl	800937e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800adb0:	4b0a      	ldr	r3, [pc, #40]	; (800addc <prvAddCurrentTaskToDelayedList+0xa4>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	68ba      	ldr	r2, [r7, #8]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d202      	bcs.n	800adc0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800adba:	4a08      	ldr	r2, [pc, #32]	; (800addc <prvAddCurrentTaskToDelayedList+0xa4>)
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	6013      	str	r3, [r2, #0]
}
 800adc0:	bf00      	nop
 800adc2:	3710      	adds	r7, #16
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	20000ebc 	.word	0x20000ebc
 800adcc:	200009e4 	.word	0x200009e4
 800add0:	20000ea4 	.word	0x20000ea4
 800add4:	20000e74 	.word	0x20000e74
 800add8:	20000e70 	.word	0x20000e70
 800addc:	20000ed8 	.word	0x20000ed8

0800ade0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b08a      	sub	sp, #40	; 0x28
 800ade4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ade6:	2300      	movs	r3, #0
 800ade8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800adea:	f000 fb07 	bl	800b3fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800adee:	4b1c      	ldr	r3, [pc, #112]	; (800ae60 <xTimerCreateTimerTask+0x80>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d021      	beq.n	800ae3a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800adf6:	2300      	movs	r3, #0
 800adf8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800adfa:	2300      	movs	r3, #0
 800adfc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800adfe:	1d3a      	adds	r2, r7, #4
 800ae00:	f107 0108 	add.w	r1, r7, #8
 800ae04:	f107 030c 	add.w	r3, r7, #12
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f7fe fa4d 	bl	80092a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ae0e:	6879      	ldr	r1, [r7, #4]
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	68fa      	ldr	r2, [r7, #12]
 800ae14:	9202      	str	r2, [sp, #8]
 800ae16:	9301      	str	r3, [sp, #4]
 800ae18:	2302      	movs	r3, #2
 800ae1a:	9300      	str	r3, [sp, #0]
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	460a      	mov	r2, r1
 800ae20:	4910      	ldr	r1, [pc, #64]	; (800ae64 <xTimerCreateTimerTask+0x84>)
 800ae22:	4811      	ldr	r0, [pc, #68]	; (800ae68 <xTimerCreateTimerTask+0x88>)
 800ae24:	f7ff f8b4 	bl	8009f90 <xTaskCreateStatic>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	4a10      	ldr	r2, [pc, #64]	; (800ae6c <xTimerCreateTimerTask+0x8c>)
 800ae2c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ae2e:	4b0f      	ldr	r3, [pc, #60]	; (800ae6c <xTimerCreateTimerTask+0x8c>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d001      	beq.n	800ae3a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ae36:	2301      	movs	r3, #1
 800ae38:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d10a      	bne.n	800ae56 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ae40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae44:	f383 8811 	msr	BASEPRI, r3
 800ae48:	f3bf 8f6f 	isb	sy
 800ae4c:	f3bf 8f4f 	dsb	sy
 800ae50:	613b      	str	r3, [r7, #16]
}
 800ae52:	bf00      	nop
 800ae54:	e7fe      	b.n	800ae54 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ae56:	697b      	ldr	r3, [r7, #20]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3718      	adds	r7, #24
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	20000f14 	.word	0x20000f14
 800ae64:	0800c690 	.word	0x0800c690
 800ae68:	0800afa5 	.word	0x0800afa5
 800ae6c:	20000f18 	.word	0x20000f18

0800ae70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b08a      	sub	sp, #40	; 0x28
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	607a      	str	r2, [r7, #4]
 800ae7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d10a      	bne.n	800ae9e <xTimerGenericCommand+0x2e>
	__asm volatile
 800ae88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8c:	f383 8811 	msr	BASEPRI, r3
 800ae90:	f3bf 8f6f 	isb	sy
 800ae94:	f3bf 8f4f 	dsb	sy
 800ae98:	623b      	str	r3, [r7, #32]
}
 800ae9a:	bf00      	nop
 800ae9c:	e7fe      	b.n	800ae9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ae9e:	4b1a      	ldr	r3, [pc, #104]	; (800af08 <xTimerGenericCommand+0x98>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d02a      	beq.n	800aefc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	2b05      	cmp	r3, #5
 800aeb6:	dc18      	bgt.n	800aeea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aeb8:	f7ff feb2 	bl	800ac20 <xTaskGetSchedulerState>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b02      	cmp	r3, #2
 800aec0:	d109      	bne.n	800aed6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aec2:	4b11      	ldr	r3, [pc, #68]	; (800af08 <xTimerGenericCommand+0x98>)
 800aec4:	6818      	ldr	r0, [r3, #0]
 800aec6:	f107 0110 	add.w	r1, r7, #16
 800aeca:	2300      	movs	r3, #0
 800aecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aece:	f7fe fbf7 	bl	80096c0 <xQueueGenericSend>
 800aed2:	6278      	str	r0, [r7, #36]	; 0x24
 800aed4:	e012      	b.n	800aefc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aed6:	4b0c      	ldr	r3, [pc, #48]	; (800af08 <xTimerGenericCommand+0x98>)
 800aed8:	6818      	ldr	r0, [r3, #0]
 800aeda:	f107 0110 	add.w	r1, r7, #16
 800aede:	2300      	movs	r3, #0
 800aee0:	2200      	movs	r2, #0
 800aee2:	f7fe fbed 	bl	80096c0 <xQueueGenericSend>
 800aee6:	6278      	str	r0, [r7, #36]	; 0x24
 800aee8:	e008      	b.n	800aefc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aeea:	4b07      	ldr	r3, [pc, #28]	; (800af08 <xTimerGenericCommand+0x98>)
 800aeec:	6818      	ldr	r0, [r3, #0]
 800aeee:	f107 0110 	add.w	r1, r7, #16
 800aef2:	2300      	movs	r3, #0
 800aef4:	683a      	ldr	r2, [r7, #0]
 800aef6:	f7fe fce1 	bl	80098bc <xQueueGenericSendFromISR>
 800aefa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3728      	adds	r7, #40	; 0x28
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	20000f14 	.word	0x20000f14

0800af0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b088      	sub	sp, #32
 800af10:	af02      	add	r7, sp, #8
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af16:	4b22      	ldr	r3, [pc, #136]	; (800afa0 <prvProcessExpiredTimer+0x94>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	68db      	ldr	r3, [r3, #12]
 800af1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	3304      	adds	r3, #4
 800af24:	4618      	mov	r0, r3
 800af26:	f7fe fa63 	bl	80093f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af30:	f003 0304 	and.w	r3, r3, #4
 800af34:	2b00      	cmp	r3, #0
 800af36:	d022      	beq.n	800af7e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	699a      	ldr	r2, [r3, #24]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	18d1      	adds	r1, r2, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	683a      	ldr	r2, [r7, #0]
 800af44:	6978      	ldr	r0, [r7, #20]
 800af46:	f000 f8d1 	bl	800b0ec <prvInsertTimerInActiveList>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d01f      	beq.n	800af90 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af50:	2300      	movs	r3, #0
 800af52:	9300      	str	r3, [sp, #0]
 800af54:	2300      	movs	r3, #0
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	2100      	movs	r1, #0
 800af5a:	6978      	ldr	r0, [r7, #20]
 800af5c:	f7ff ff88 	bl	800ae70 <xTimerGenericCommand>
 800af60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d113      	bne.n	800af90 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800af68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6c:	f383 8811 	msr	BASEPRI, r3
 800af70:	f3bf 8f6f 	isb	sy
 800af74:	f3bf 8f4f 	dsb	sy
 800af78:	60fb      	str	r3, [r7, #12]
}
 800af7a:	bf00      	nop
 800af7c:	e7fe      	b.n	800af7c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af84:	f023 0301 	bic.w	r3, r3, #1
 800af88:	b2da      	uxtb	r2, r3
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	6a1b      	ldr	r3, [r3, #32]
 800af94:	6978      	ldr	r0, [r7, #20]
 800af96:	4798      	blx	r3
}
 800af98:	bf00      	nop
 800af9a:	3718      	adds	r7, #24
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	20000f0c 	.word	0x20000f0c

0800afa4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800afac:	f107 0308 	add.w	r3, r7, #8
 800afb0:	4618      	mov	r0, r3
 800afb2:	f000 f857 	bl	800b064 <prvGetNextExpireTime>
 800afb6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	4619      	mov	r1, r3
 800afbc:	68f8      	ldr	r0, [r7, #12]
 800afbe:	f000 f803 	bl	800afc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800afc2:	f000 f8d5 	bl	800b170 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800afc6:	e7f1      	b.n	800afac <prvTimerTask+0x8>

0800afc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800afd2:	f7ff fa39 	bl	800a448 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800afd6:	f107 0308 	add.w	r3, r7, #8
 800afda:	4618      	mov	r0, r3
 800afdc:	f000 f866 	bl	800b0ac <prvSampleTimeNow>
 800afe0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d130      	bne.n	800b04a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d10a      	bne.n	800b004 <prvProcessTimerOrBlockTask+0x3c>
 800afee:	687a      	ldr	r2, [r7, #4]
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d806      	bhi.n	800b004 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aff6:	f7ff fa35 	bl	800a464 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800affa:	68f9      	ldr	r1, [r7, #12]
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f7ff ff85 	bl	800af0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b002:	e024      	b.n	800b04e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d008      	beq.n	800b01c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b00a:	4b13      	ldr	r3, [pc, #76]	; (800b058 <prvProcessTimerOrBlockTask+0x90>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d101      	bne.n	800b018 <prvProcessTimerOrBlockTask+0x50>
 800b014:	2301      	movs	r3, #1
 800b016:	e000      	b.n	800b01a <prvProcessTimerOrBlockTask+0x52>
 800b018:	2300      	movs	r3, #0
 800b01a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b01c:	4b0f      	ldr	r3, [pc, #60]	; (800b05c <prvProcessTimerOrBlockTask+0x94>)
 800b01e:	6818      	ldr	r0, [r3, #0]
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	1ad3      	subs	r3, r2, r3
 800b026:	683a      	ldr	r2, [r7, #0]
 800b028:	4619      	mov	r1, r3
 800b02a:	f7fe ff7d 	bl	8009f28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b02e:	f7ff fa19 	bl	800a464 <xTaskResumeAll>
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d10a      	bne.n	800b04e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b038:	4b09      	ldr	r3, [pc, #36]	; (800b060 <prvProcessTimerOrBlockTask+0x98>)
 800b03a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b03e:	601a      	str	r2, [r3, #0]
 800b040:	f3bf 8f4f 	dsb	sy
 800b044:	f3bf 8f6f 	isb	sy
}
 800b048:	e001      	b.n	800b04e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b04a:	f7ff fa0b 	bl	800a464 <xTaskResumeAll>
}
 800b04e:	bf00      	nop
 800b050:	3710      	adds	r7, #16
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	20000f10 	.word	0x20000f10
 800b05c:	20000f14 	.word	0x20000f14
 800b060:	e000ed04 	.word	0xe000ed04

0800b064 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b064:	b480      	push	{r7}
 800b066:	b085      	sub	sp, #20
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b06c:	4b0e      	ldr	r3, [pc, #56]	; (800b0a8 <prvGetNextExpireTime+0x44>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d101      	bne.n	800b07a <prvGetNextExpireTime+0x16>
 800b076:	2201      	movs	r2, #1
 800b078:	e000      	b.n	800b07c <prvGetNextExpireTime+0x18>
 800b07a:	2200      	movs	r2, #0
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d105      	bne.n	800b094 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b088:	4b07      	ldr	r3, [pc, #28]	; (800b0a8 <prvGetNextExpireTime+0x44>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	60fb      	str	r3, [r7, #12]
 800b092:	e001      	b.n	800b098 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b094:	2300      	movs	r3, #0
 800b096:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b098:	68fb      	ldr	r3, [r7, #12]
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3714      	adds	r7, #20
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr
 800b0a6:	bf00      	nop
 800b0a8:	20000f0c 	.word	0x20000f0c

0800b0ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b0b4:	f7ff fa74 	bl	800a5a0 <xTaskGetTickCount>
 800b0b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b0ba:	4b0b      	ldr	r3, [pc, #44]	; (800b0e8 <prvSampleTimeNow+0x3c>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	68fa      	ldr	r2, [r7, #12]
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d205      	bcs.n	800b0d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b0c4:	f000 f936 	bl	800b334 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	601a      	str	r2, [r3, #0]
 800b0ce:	e002      	b.n	800b0d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b0d6:	4a04      	ldr	r2, [pc, #16]	; (800b0e8 <prvSampleTimeNow+0x3c>)
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	20000f1c 	.word	0x20000f1c

0800b0ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b086      	sub	sp, #24
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	607a      	str	r2, [r7, #4]
 800b0f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	68ba      	ldr	r2, [r7, #8]
 800b102:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	68fa      	ldr	r2, [r7, #12]
 800b108:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b10a:	68ba      	ldr	r2, [r7, #8]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d812      	bhi.n	800b138 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b112:	687a      	ldr	r2, [r7, #4]
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	1ad2      	subs	r2, r2, r3
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	699b      	ldr	r3, [r3, #24]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d302      	bcc.n	800b126 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b120:	2301      	movs	r3, #1
 800b122:	617b      	str	r3, [r7, #20]
 800b124:	e01b      	b.n	800b15e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b126:	4b10      	ldr	r3, [pc, #64]	; (800b168 <prvInsertTimerInActiveList+0x7c>)
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	3304      	adds	r3, #4
 800b12e:	4619      	mov	r1, r3
 800b130:	4610      	mov	r0, r2
 800b132:	f7fe f924 	bl	800937e <vListInsert>
 800b136:	e012      	b.n	800b15e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d206      	bcs.n	800b14e <prvInsertTimerInActiveList+0x62>
 800b140:	68ba      	ldr	r2, [r7, #8]
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	429a      	cmp	r2, r3
 800b146:	d302      	bcc.n	800b14e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b148:	2301      	movs	r3, #1
 800b14a:	617b      	str	r3, [r7, #20]
 800b14c:	e007      	b.n	800b15e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b14e:	4b07      	ldr	r3, [pc, #28]	; (800b16c <prvInsertTimerInActiveList+0x80>)
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	3304      	adds	r3, #4
 800b156:	4619      	mov	r1, r3
 800b158:	4610      	mov	r0, r2
 800b15a:	f7fe f910 	bl	800937e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b15e:	697b      	ldr	r3, [r7, #20]
}
 800b160:	4618      	mov	r0, r3
 800b162:	3718      	adds	r7, #24
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}
 800b168:	20000f10 	.word	0x20000f10
 800b16c:	20000f0c 	.word	0x20000f0c

0800b170 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b08e      	sub	sp, #56	; 0x38
 800b174:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b176:	e0ca      	b.n	800b30e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	da18      	bge.n	800b1b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b17e:	1d3b      	adds	r3, r7, #4
 800b180:	3304      	adds	r3, #4
 800b182:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b186:	2b00      	cmp	r3, #0
 800b188:	d10a      	bne.n	800b1a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b18e:	f383 8811 	msr	BASEPRI, r3
 800b192:	f3bf 8f6f 	isb	sy
 800b196:	f3bf 8f4f 	dsb	sy
 800b19a:	61fb      	str	r3, [r7, #28]
}
 800b19c:	bf00      	nop
 800b19e:	e7fe      	b.n	800b19e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1a6:	6850      	ldr	r0, [r2, #4]
 800b1a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1aa:	6892      	ldr	r2, [r2, #8]
 800b1ac:	4611      	mov	r1, r2
 800b1ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	f2c0 80ab 	blt.w	800b30e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1be:	695b      	ldr	r3, [r3, #20]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d004      	beq.n	800b1ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c6:	3304      	adds	r3, #4
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f7fe f911 	bl	80093f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b1ce:	463b      	mov	r3, r7
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7ff ff6b 	bl	800b0ac <prvSampleTimeNow>
 800b1d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2b09      	cmp	r3, #9
 800b1dc:	f200 8096 	bhi.w	800b30c <prvProcessReceivedCommands+0x19c>
 800b1e0:	a201      	add	r2, pc, #4	; (adr r2, 800b1e8 <prvProcessReceivedCommands+0x78>)
 800b1e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1e6:	bf00      	nop
 800b1e8:	0800b211 	.word	0x0800b211
 800b1ec:	0800b211 	.word	0x0800b211
 800b1f0:	0800b211 	.word	0x0800b211
 800b1f4:	0800b285 	.word	0x0800b285
 800b1f8:	0800b299 	.word	0x0800b299
 800b1fc:	0800b2e3 	.word	0x0800b2e3
 800b200:	0800b211 	.word	0x0800b211
 800b204:	0800b211 	.word	0x0800b211
 800b208:	0800b285 	.word	0x0800b285
 800b20c:	0800b299 	.word	0x0800b299
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b212:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b216:	f043 0301 	orr.w	r3, r3, #1
 800b21a:	b2da      	uxtb	r2, r3
 800b21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b222:	68ba      	ldr	r2, [r7, #8]
 800b224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b226:	699b      	ldr	r3, [r3, #24]
 800b228:	18d1      	adds	r1, r2, r3
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b22e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b230:	f7ff ff5c 	bl	800b0ec <prvInsertTimerInActiveList>
 800b234:	4603      	mov	r3, r0
 800b236:	2b00      	cmp	r3, #0
 800b238:	d069      	beq.n	800b30e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23c:	6a1b      	ldr	r3, [r3, #32]
 800b23e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b240:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b244:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b248:	f003 0304 	and.w	r3, r3, #4
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d05e      	beq.n	800b30e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b250:	68ba      	ldr	r2, [r7, #8]
 800b252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b254:	699b      	ldr	r3, [r3, #24]
 800b256:	441a      	add	r2, r3
 800b258:	2300      	movs	r3, #0
 800b25a:	9300      	str	r3, [sp, #0]
 800b25c:	2300      	movs	r3, #0
 800b25e:	2100      	movs	r1, #0
 800b260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b262:	f7ff fe05 	bl	800ae70 <xTimerGenericCommand>
 800b266:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b268:	6a3b      	ldr	r3, [r7, #32]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d14f      	bne.n	800b30e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b272:	f383 8811 	msr	BASEPRI, r3
 800b276:	f3bf 8f6f 	isb	sy
 800b27a:	f3bf 8f4f 	dsb	sy
 800b27e:	61bb      	str	r3, [r7, #24]
}
 800b280:	bf00      	nop
 800b282:	e7fe      	b.n	800b282 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b286:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b28a:	f023 0301 	bic.w	r3, r3, #1
 800b28e:	b2da      	uxtb	r2, r3
 800b290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b292:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b296:	e03a      	b.n	800b30e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b29e:	f043 0301 	orr.w	r3, r3, #1
 800b2a2:	b2da      	uxtb	r2, r3
 800b2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b2aa:	68ba      	ldr	r2, [r7, #8]
 800b2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b2:	699b      	ldr	r3, [r3, #24]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d10a      	bne.n	800b2ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2bc:	f383 8811 	msr	BASEPRI, r3
 800b2c0:	f3bf 8f6f 	isb	sy
 800b2c4:	f3bf 8f4f 	dsb	sy
 800b2c8:	617b      	str	r3, [r7, #20]
}
 800b2ca:	bf00      	nop
 800b2cc:	e7fe      	b.n	800b2cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d0:	699a      	ldr	r2, [r3, #24]
 800b2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d4:	18d1      	adds	r1, r2, r3
 800b2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2dc:	f7ff ff06 	bl	800b0ec <prvInsertTimerInActiveList>
					break;
 800b2e0:	e015      	b.n	800b30e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2e8:	f003 0302 	and.w	r3, r3, #2
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d103      	bne.n	800b2f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b2f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2f2:	f000 fbdd 	bl	800bab0 <vPortFree>
 800b2f6:	e00a      	b.n	800b30e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2fe:	f023 0301 	bic.w	r3, r3, #1
 800b302:	b2da      	uxtb	r2, r3
 800b304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b306:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b30a:	e000      	b.n	800b30e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800b30c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b30e:	4b08      	ldr	r3, [pc, #32]	; (800b330 <prvProcessReceivedCommands+0x1c0>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	1d39      	adds	r1, r7, #4
 800b314:	2200      	movs	r2, #0
 800b316:	4618      	mov	r0, r3
 800b318:	f7fe fb6c 	bl	80099f4 <xQueueReceive>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	f47f af2a 	bne.w	800b178 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b324:	bf00      	nop
 800b326:	bf00      	nop
 800b328:	3730      	adds	r7, #48	; 0x30
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	20000f14 	.word	0x20000f14

0800b334 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b088      	sub	sp, #32
 800b338:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b33a:	e048      	b.n	800b3ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b33c:	4b2d      	ldr	r3, [pc, #180]	; (800b3f4 <prvSwitchTimerLists+0xc0>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	68db      	ldr	r3, [r3, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b346:	4b2b      	ldr	r3, [pc, #172]	; (800b3f4 <prvSwitchTimerLists+0xc0>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	68db      	ldr	r3, [r3, #12]
 800b34e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	3304      	adds	r3, #4
 800b354:	4618      	mov	r0, r3
 800b356:	f7fe f84b 	bl	80093f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	6a1b      	ldr	r3, [r3, #32]
 800b35e:	68f8      	ldr	r0, [r7, #12]
 800b360:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b368:	f003 0304 	and.w	r3, r3, #4
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d02e      	beq.n	800b3ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	699b      	ldr	r3, [r3, #24]
 800b374:	693a      	ldr	r2, [r7, #16]
 800b376:	4413      	add	r3, r2
 800b378:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b37a:	68ba      	ldr	r2, [r7, #8]
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d90e      	bls.n	800b3a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	68ba      	ldr	r2, [r7, #8]
 800b386:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	68fa      	ldr	r2, [r7, #12]
 800b38c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b38e:	4b19      	ldr	r3, [pc, #100]	; (800b3f4 <prvSwitchTimerLists+0xc0>)
 800b390:	681a      	ldr	r2, [r3, #0]
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	3304      	adds	r3, #4
 800b396:	4619      	mov	r1, r3
 800b398:	4610      	mov	r0, r2
 800b39a:	f7fd fff0 	bl	800937e <vListInsert>
 800b39e:	e016      	b.n	800b3ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	9300      	str	r3, [sp, #0]
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	693a      	ldr	r2, [r7, #16]
 800b3a8:	2100      	movs	r1, #0
 800b3aa:	68f8      	ldr	r0, [r7, #12]
 800b3ac:	f7ff fd60 	bl	800ae70 <xTimerGenericCommand>
 800b3b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d10a      	bne.n	800b3ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3bc:	f383 8811 	msr	BASEPRI, r3
 800b3c0:	f3bf 8f6f 	isb	sy
 800b3c4:	f3bf 8f4f 	dsb	sy
 800b3c8:	603b      	str	r3, [r7, #0]
}
 800b3ca:	bf00      	nop
 800b3cc:	e7fe      	b.n	800b3cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b3ce:	4b09      	ldr	r3, [pc, #36]	; (800b3f4 <prvSwitchTimerLists+0xc0>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d1b1      	bne.n	800b33c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b3d8:	4b06      	ldr	r3, [pc, #24]	; (800b3f4 <prvSwitchTimerLists+0xc0>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b3de:	4b06      	ldr	r3, [pc, #24]	; (800b3f8 <prvSwitchTimerLists+0xc4>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	4a04      	ldr	r2, [pc, #16]	; (800b3f4 <prvSwitchTimerLists+0xc0>)
 800b3e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b3e6:	4a04      	ldr	r2, [pc, #16]	; (800b3f8 <prvSwitchTimerLists+0xc4>)
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	6013      	str	r3, [r2, #0]
}
 800b3ec:	bf00      	nop
 800b3ee:	3718      	adds	r7, #24
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	20000f0c 	.word	0x20000f0c
 800b3f8:	20000f10 	.word	0x20000f10

0800b3fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b402:	f000 f967 	bl	800b6d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b406:	4b15      	ldr	r3, [pc, #84]	; (800b45c <prvCheckForValidListAndQueue+0x60>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d120      	bne.n	800b450 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b40e:	4814      	ldr	r0, [pc, #80]	; (800b460 <prvCheckForValidListAndQueue+0x64>)
 800b410:	f7fd ff64 	bl	80092dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b414:	4813      	ldr	r0, [pc, #76]	; (800b464 <prvCheckForValidListAndQueue+0x68>)
 800b416:	f7fd ff61 	bl	80092dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b41a:	4b13      	ldr	r3, [pc, #76]	; (800b468 <prvCheckForValidListAndQueue+0x6c>)
 800b41c:	4a10      	ldr	r2, [pc, #64]	; (800b460 <prvCheckForValidListAndQueue+0x64>)
 800b41e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b420:	4b12      	ldr	r3, [pc, #72]	; (800b46c <prvCheckForValidListAndQueue+0x70>)
 800b422:	4a10      	ldr	r2, [pc, #64]	; (800b464 <prvCheckForValidListAndQueue+0x68>)
 800b424:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b426:	2300      	movs	r3, #0
 800b428:	9300      	str	r3, [sp, #0]
 800b42a:	4b11      	ldr	r3, [pc, #68]	; (800b470 <prvCheckForValidListAndQueue+0x74>)
 800b42c:	4a11      	ldr	r2, [pc, #68]	; (800b474 <prvCheckForValidListAndQueue+0x78>)
 800b42e:	2110      	movs	r1, #16
 800b430:	200a      	movs	r0, #10
 800b432:	f7fe f86f 	bl	8009514 <xQueueGenericCreateStatic>
 800b436:	4603      	mov	r3, r0
 800b438:	4a08      	ldr	r2, [pc, #32]	; (800b45c <prvCheckForValidListAndQueue+0x60>)
 800b43a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b43c:	4b07      	ldr	r3, [pc, #28]	; (800b45c <prvCheckForValidListAndQueue+0x60>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d005      	beq.n	800b450 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b444:	4b05      	ldr	r3, [pc, #20]	; (800b45c <prvCheckForValidListAndQueue+0x60>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	490b      	ldr	r1, [pc, #44]	; (800b478 <prvCheckForValidListAndQueue+0x7c>)
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7fe fd42 	bl	8009ed4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b450:	f000 f970 	bl	800b734 <vPortExitCritical>
}
 800b454:	bf00      	nop
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	20000f14 	.word	0x20000f14
 800b460:	20000ee4 	.word	0x20000ee4
 800b464:	20000ef8 	.word	0x20000ef8
 800b468:	20000f0c 	.word	0x20000f0c
 800b46c:	20000f10 	.word	0x20000f10
 800b470:	20000fc0 	.word	0x20000fc0
 800b474:	20000f20 	.word	0x20000f20
 800b478:	0800c698 	.word	0x0800c698

0800b47c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b47c:	b480      	push	{r7}
 800b47e:	b085      	sub	sp, #20
 800b480:	af00      	add	r7, sp, #0
 800b482:	60f8      	str	r0, [r7, #12]
 800b484:	60b9      	str	r1, [r7, #8]
 800b486:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	3b04      	subs	r3, #4
 800b48c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b494:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	3b04      	subs	r3, #4
 800b49a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	f023 0201 	bic.w	r2, r3, #1
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	3b04      	subs	r3, #4
 800b4aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b4ac:	4a0c      	ldr	r2, [pc, #48]	; (800b4e0 <pxPortInitialiseStack+0x64>)
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	3b14      	subs	r3, #20
 800b4b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	3b04      	subs	r3, #4
 800b4c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f06f 0202 	mvn.w	r2, #2
 800b4ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	3b20      	subs	r3, #32
 800b4d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3714      	adds	r7, #20
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr
 800b4e0:	0800b4e5 	.word	0x0800b4e5

0800b4e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b085      	sub	sp, #20
 800b4e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b4ee:	4b12      	ldr	r3, [pc, #72]	; (800b538 <prvTaskExitError+0x54>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4f6:	d00a      	beq.n	800b50e <prvTaskExitError+0x2a>
	__asm volatile
 800b4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fc:	f383 8811 	msr	BASEPRI, r3
 800b500:	f3bf 8f6f 	isb	sy
 800b504:	f3bf 8f4f 	dsb	sy
 800b508:	60fb      	str	r3, [r7, #12]
}
 800b50a:	bf00      	nop
 800b50c:	e7fe      	b.n	800b50c <prvTaskExitError+0x28>
	__asm volatile
 800b50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b512:	f383 8811 	msr	BASEPRI, r3
 800b516:	f3bf 8f6f 	isb	sy
 800b51a:	f3bf 8f4f 	dsb	sy
 800b51e:	60bb      	str	r3, [r7, #8]
}
 800b520:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b522:	bf00      	nop
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d0fc      	beq.n	800b524 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b52a:	bf00      	nop
 800b52c:	bf00      	nop
 800b52e:	3714      	adds	r7, #20
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr
 800b538:	2000002c 	.word	0x2000002c
 800b53c:	00000000 	.word	0x00000000

0800b540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b540:	4b07      	ldr	r3, [pc, #28]	; (800b560 <pxCurrentTCBConst2>)
 800b542:	6819      	ldr	r1, [r3, #0]
 800b544:	6808      	ldr	r0, [r1, #0]
 800b546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b54a:	f380 8809 	msr	PSP, r0
 800b54e:	f3bf 8f6f 	isb	sy
 800b552:	f04f 0000 	mov.w	r0, #0
 800b556:	f380 8811 	msr	BASEPRI, r0
 800b55a:	4770      	bx	lr
 800b55c:	f3af 8000 	nop.w

0800b560 <pxCurrentTCBConst2>:
 800b560:	200009e4 	.word	0x200009e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b564:	bf00      	nop
 800b566:	bf00      	nop

0800b568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b568:	4808      	ldr	r0, [pc, #32]	; (800b58c <prvPortStartFirstTask+0x24>)
 800b56a:	6800      	ldr	r0, [r0, #0]
 800b56c:	6800      	ldr	r0, [r0, #0]
 800b56e:	f380 8808 	msr	MSP, r0
 800b572:	f04f 0000 	mov.w	r0, #0
 800b576:	f380 8814 	msr	CONTROL, r0
 800b57a:	b662      	cpsie	i
 800b57c:	b661      	cpsie	f
 800b57e:	f3bf 8f4f 	dsb	sy
 800b582:	f3bf 8f6f 	isb	sy
 800b586:	df00      	svc	0
 800b588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b58a:	bf00      	nop
 800b58c:	e000ed08 	.word	0xe000ed08

0800b590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b086      	sub	sp, #24
 800b594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b596:	4b46      	ldr	r3, [pc, #280]	; (800b6b0 <xPortStartScheduler+0x120>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4a46      	ldr	r2, [pc, #280]	; (800b6b4 <xPortStartScheduler+0x124>)
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d10a      	bne.n	800b5b6 <xPortStartScheduler+0x26>
	__asm volatile
 800b5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a4:	f383 8811 	msr	BASEPRI, r3
 800b5a8:	f3bf 8f6f 	isb	sy
 800b5ac:	f3bf 8f4f 	dsb	sy
 800b5b0:	613b      	str	r3, [r7, #16]
}
 800b5b2:	bf00      	nop
 800b5b4:	e7fe      	b.n	800b5b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b5b6:	4b3e      	ldr	r3, [pc, #248]	; (800b6b0 <xPortStartScheduler+0x120>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a3f      	ldr	r2, [pc, #252]	; (800b6b8 <xPortStartScheduler+0x128>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d10a      	bne.n	800b5d6 <xPortStartScheduler+0x46>
	__asm volatile
 800b5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c4:	f383 8811 	msr	BASEPRI, r3
 800b5c8:	f3bf 8f6f 	isb	sy
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	60fb      	str	r3, [r7, #12]
}
 800b5d2:	bf00      	nop
 800b5d4:	e7fe      	b.n	800b5d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b5d6:	4b39      	ldr	r3, [pc, #228]	; (800b6bc <xPortStartScheduler+0x12c>)
 800b5d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	b2db      	uxtb	r3, r3
 800b5e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	22ff      	movs	r2, #255	; 0xff
 800b5e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	b2db      	uxtb	r3, r3
 800b5ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b5f0:	78fb      	ldrb	r3, [r7, #3]
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b5f8:	b2da      	uxtb	r2, r3
 800b5fa:	4b31      	ldr	r3, [pc, #196]	; (800b6c0 <xPortStartScheduler+0x130>)
 800b5fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b5fe:	4b31      	ldr	r3, [pc, #196]	; (800b6c4 <xPortStartScheduler+0x134>)
 800b600:	2207      	movs	r2, #7
 800b602:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b604:	e009      	b.n	800b61a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b606:	4b2f      	ldr	r3, [pc, #188]	; (800b6c4 <xPortStartScheduler+0x134>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	3b01      	subs	r3, #1
 800b60c:	4a2d      	ldr	r2, [pc, #180]	; (800b6c4 <xPortStartScheduler+0x134>)
 800b60e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b610:	78fb      	ldrb	r3, [r7, #3]
 800b612:	b2db      	uxtb	r3, r3
 800b614:	005b      	lsls	r3, r3, #1
 800b616:	b2db      	uxtb	r3, r3
 800b618:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b61a:	78fb      	ldrb	r3, [r7, #3]
 800b61c:	b2db      	uxtb	r3, r3
 800b61e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b622:	2b80      	cmp	r3, #128	; 0x80
 800b624:	d0ef      	beq.n	800b606 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b626:	4b27      	ldr	r3, [pc, #156]	; (800b6c4 <xPortStartScheduler+0x134>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f1c3 0307 	rsb	r3, r3, #7
 800b62e:	2b04      	cmp	r3, #4
 800b630:	d00a      	beq.n	800b648 <xPortStartScheduler+0xb8>
	__asm volatile
 800b632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b636:	f383 8811 	msr	BASEPRI, r3
 800b63a:	f3bf 8f6f 	isb	sy
 800b63e:	f3bf 8f4f 	dsb	sy
 800b642:	60bb      	str	r3, [r7, #8]
}
 800b644:	bf00      	nop
 800b646:	e7fe      	b.n	800b646 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b648:	4b1e      	ldr	r3, [pc, #120]	; (800b6c4 <xPortStartScheduler+0x134>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	021b      	lsls	r3, r3, #8
 800b64e:	4a1d      	ldr	r2, [pc, #116]	; (800b6c4 <xPortStartScheduler+0x134>)
 800b650:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b652:	4b1c      	ldr	r3, [pc, #112]	; (800b6c4 <xPortStartScheduler+0x134>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b65a:	4a1a      	ldr	r2, [pc, #104]	; (800b6c4 <xPortStartScheduler+0x134>)
 800b65c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	b2da      	uxtb	r2, r3
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b666:	4b18      	ldr	r3, [pc, #96]	; (800b6c8 <xPortStartScheduler+0x138>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4a17      	ldr	r2, [pc, #92]	; (800b6c8 <xPortStartScheduler+0x138>)
 800b66c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b670:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b672:	4b15      	ldr	r3, [pc, #84]	; (800b6c8 <xPortStartScheduler+0x138>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4a14      	ldr	r2, [pc, #80]	; (800b6c8 <xPortStartScheduler+0x138>)
 800b678:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b67c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b67e:	f000 f8dd 	bl	800b83c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b682:	4b12      	ldr	r3, [pc, #72]	; (800b6cc <xPortStartScheduler+0x13c>)
 800b684:	2200      	movs	r2, #0
 800b686:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b688:	f000 f8fc 	bl	800b884 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b68c:	4b10      	ldr	r3, [pc, #64]	; (800b6d0 <xPortStartScheduler+0x140>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a0f      	ldr	r2, [pc, #60]	; (800b6d0 <xPortStartScheduler+0x140>)
 800b692:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b696:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b698:	f7ff ff66 	bl	800b568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b69c:	f7ff f84a 	bl	800a734 <vTaskSwitchContext>
	prvTaskExitError();
 800b6a0:	f7ff ff20 	bl	800b4e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b6a4:	2300      	movs	r3, #0
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3718      	adds	r7, #24
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	e000ed00 	.word	0xe000ed00
 800b6b4:	410fc271 	.word	0x410fc271
 800b6b8:	410fc270 	.word	0x410fc270
 800b6bc:	e000e400 	.word	0xe000e400
 800b6c0:	20001010 	.word	0x20001010
 800b6c4:	20001014 	.word	0x20001014
 800b6c8:	e000ed20 	.word	0xe000ed20
 800b6cc:	2000002c 	.word	0x2000002c
 800b6d0:	e000ef34 	.word	0xe000ef34

0800b6d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
	__asm volatile
 800b6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6de:	f383 8811 	msr	BASEPRI, r3
 800b6e2:	f3bf 8f6f 	isb	sy
 800b6e6:	f3bf 8f4f 	dsb	sy
 800b6ea:	607b      	str	r3, [r7, #4]
}
 800b6ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b6ee:	4b0f      	ldr	r3, [pc, #60]	; (800b72c <vPortEnterCritical+0x58>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	4a0d      	ldr	r2, [pc, #52]	; (800b72c <vPortEnterCritical+0x58>)
 800b6f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b6f8:	4b0c      	ldr	r3, [pc, #48]	; (800b72c <vPortEnterCritical+0x58>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	d10f      	bne.n	800b720 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b700:	4b0b      	ldr	r3, [pc, #44]	; (800b730 <vPortEnterCritical+0x5c>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	b2db      	uxtb	r3, r3
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00a      	beq.n	800b720 <vPortEnterCritical+0x4c>
	__asm volatile
 800b70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70e:	f383 8811 	msr	BASEPRI, r3
 800b712:	f3bf 8f6f 	isb	sy
 800b716:	f3bf 8f4f 	dsb	sy
 800b71a:	603b      	str	r3, [r7, #0]
}
 800b71c:	bf00      	nop
 800b71e:	e7fe      	b.n	800b71e <vPortEnterCritical+0x4a>
	}
}
 800b720:	bf00      	nop
 800b722:	370c      	adds	r7, #12
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr
 800b72c:	2000002c 	.word	0x2000002c
 800b730:	e000ed04 	.word	0xe000ed04

0800b734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b734:	b480      	push	{r7}
 800b736:	b083      	sub	sp, #12
 800b738:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b73a:	4b12      	ldr	r3, [pc, #72]	; (800b784 <vPortExitCritical+0x50>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d10a      	bne.n	800b758 <vPortExitCritical+0x24>
	__asm volatile
 800b742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b746:	f383 8811 	msr	BASEPRI, r3
 800b74a:	f3bf 8f6f 	isb	sy
 800b74e:	f3bf 8f4f 	dsb	sy
 800b752:	607b      	str	r3, [r7, #4]
}
 800b754:	bf00      	nop
 800b756:	e7fe      	b.n	800b756 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b758:	4b0a      	ldr	r3, [pc, #40]	; (800b784 <vPortExitCritical+0x50>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	3b01      	subs	r3, #1
 800b75e:	4a09      	ldr	r2, [pc, #36]	; (800b784 <vPortExitCritical+0x50>)
 800b760:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b762:	4b08      	ldr	r3, [pc, #32]	; (800b784 <vPortExitCritical+0x50>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d105      	bne.n	800b776 <vPortExitCritical+0x42>
 800b76a:	2300      	movs	r3, #0
 800b76c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	f383 8811 	msr	BASEPRI, r3
}
 800b774:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b776:	bf00      	nop
 800b778:	370c      	adds	r7, #12
 800b77a:	46bd      	mov	sp, r7
 800b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b780:	4770      	bx	lr
 800b782:	bf00      	nop
 800b784:	2000002c 	.word	0x2000002c
	...

0800b790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b790:	f3ef 8009 	mrs	r0, PSP
 800b794:	f3bf 8f6f 	isb	sy
 800b798:	4b15      	ldr	r3, [pc, #84]	; (800b7f0 <pxCurrentTCBConst>)
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	f01e 0f10 	tst.w	lr, #16
 800b7a0:	bf08      	it	eq
 800b7a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b7a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7aa:	6010      	str	r0, [r2, #0]
 800b7ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b7b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b7b4:	f380 8811 	msr	BASEPRI, r0
 800b7b8:	f3bf 8f4f 	dsb	sy
 800b7bc:	f3bf 8f6f 	isb	sy
 800b7c0:	f7fe ffb8 	bl	800a734 <vTaskSwitchContext>
 800b7c4:	f04f 0000 	mov.w	r0, #0
 800b7c8:	f380 8811 	msr	BASEPRI, r0
 800b7cc:	bc09      	pop	{r0, r3}
 800b7ce:	6819      	ldr	r1, [r3, #0]
 800b7d0:	6808      	ldr	r0, [r1, #0]
 800b7d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d6:	f01e 0f10 	tst.w	lr, #16
 800b7da:	bf08      	it	eq
 800b7dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b7e0:	f380 8809 	msr	PSP, r0
 800b7e4:	f3bf 8f6f 	isb	sy
 800b7e8:	4770      	bx	lr
 800b7ea:	bf00      	nop
 800b7ec:	f3af 8000 	nop.w

0800b7f0 <pxCurrentTCBConst>:
 800b7f0:	200009e4 	.word	0x200009e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b7f4:	bf00      	nop
 800b7f6:	bf00      	nop

0800b7f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
	__asm volatile
 800b7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b802:	f383 8811 	msr	BASEPRI, r3
 800b806:	f3bf 8f6f 	isb	sy
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	607b      	str	r3, [r7, #4]
}
 800b810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b812:	f7fe fed5 	bl	800a5c0 <xTaskIncrementTick>
 800b816:	4603      	mov	r3, r0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d003      	beq.n	800b824 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b81c:	4b06      	ldr	r3, [pc, #24]	; (800b838 <xPortSysTickHandler+0x40>)
 800b81e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b822:	601a      	str	r2, [r3, #0]
 800b824:	2300      	movs	r3, #0
 800b826:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	f383 8811 	msr	BASEPRI, r3
}
 800b82e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b830:	bf00      	nop
 800b832:	3708      	adds	r7, #8
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}
 800b838:	e000ed04 	.word	0xe000ed04

0800b83c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b83c:	b480      	push	{r7}
 800b83e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b840:	4b0b      	ldr	r3, [pc, #44]	; (800b870 <vPortSetupTimerInterrupt+0x34>)
 800b842:	2200      	movs	r2, #0
 800b844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b846:	4b0b      	ldr	r3, [pc, #44]	; (800b874 <vPortSetupTimerInterrupt+0x38>)
 800b848:	2200      	movs	r2, #0
 800b84a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b84c:	4b0a      	ldr	r3, [pc, #40]	; (800b878 <vPortSetupTimerInterrupt+0x3c>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a0a      	ldr	r2, [pc, #40]	; (800b87c <vPortSetupTimerInterrupt+0x40>)
 800b852:	fba2 2303 	umull	r2, r3, r2, r3
 800b856:	099b      	lsrs	r3, r3, #6
 800b858:	4a09      	ldr	r2, [pc, #36]	; (800b880 <vPortSetupTimerInterrupt+0x44>)
 800b85a:	3b01      	subs	r3, #1
 800b85c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b85e:	4b04      	ldr	r3, [pc, #16]	; (800b870 <vPortSetupTimerInterrupt+0x34>)
 800b860:	2207      	movs	r2, #7
 800b862:	601a      	str	r2, [r3, #0]
}
 800b864:	bf00      	nop
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop
 800b870:	e000e010 	.word	0xe000e010
 800b874:	e000e018 	.word	0xe000e018
 800b878:	20000000 	.word	0x20000000
 800b87c:	10624dd3 	.word	0x10624dd3
 800b880:	e000e014 	.word	0xe000e014

0800b884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b894 <vPortEnableVFP+0x10>
 800b888:	6801      	ldr	r1, [r0, #0]
 800b88a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b88e:	6001      	str	r1, [r0, #0]
 800b890:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b892:	bf00      	nop
 800b894:	e000ed88 	.word	0xe000ed88

0800b898 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b898:	b480      	push	{r7}
 800b89a:	b085      	sub	sp, #20
 800b89c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b89e:	f3ef 8305 	mrs	r3, IPSR
 800b8a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2b0f      	cmp	r3, #15
 800b8a8:	d914      	bls.n	800b8d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b8aa:	4a17      	ldr	r2, [pc, #92]	; (800b908 <vPortValidateInterruptPriority+0x70>)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	4413      	add	r3, r2
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b8b4:	4b15      	ldr	r3, [pc, #84]	; (800b90c <vPortValidateInterruptPriority+0x74>)
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	7afa      	ldrb	r2, [r7, #11]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d20a      	bcs.n	800b8d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c2:	f383 8811 	msr	BASEPRI, r3
 800b8c6:	f3bf 8f6f 	isb	sy
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	607b      	str	r3, [r7, #4]
}
 800b8d0:	bf00      	nop
 800b8d2:	e7fe      	b.n	800b8d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b8d4:	4b0e      	ldr	r3, [pc, #56]	; (800b910 <vPortValidateInterruptPriority+0x78>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b8dc:	4b0d      	ldr	r3, [pc, #52]	; (800b914 <vPortValidateInterruptPriority+0x7c>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d90a      	bls.n	800b8fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e8:	f383 8811 	msr	BASEPRI, r3
 800b8ec:	f3bf 8f6f 	isb	sy
 800b8f0:	f3bf 8f4f 	dsb	sy
 800b8f4:	603b      	str	r3, [r7, #0]
}
 800b8f6:	bf00      	nop
 800b8f8:	e7fe      	b.n	800b8f8 <vPortValidateInterruptPriority+0x60>
	}
 800b8fa:	bf00      	nop
 800b8fc:	3714      	adds	r7, #20
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr
 800b906:	bf00      	nop
 800b908:	e000e3f0 	.word	0xe000e3f0
 800b90c:	20001010 	.word	0x20001010
 800b910:	e000ed0c 	.word	0xe000ed0c
 800b914:	20001014 	.word	0x20001014

0800b918 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b08a      	sub	sp, #40	; 0x28
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b920:	2300      	movs	r3, #0
 800b922:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b924:	f7fe fd90 	bl	800a448 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b928:	4b5b      	ldr	r3, [pc, #364]	; (800ba98 <pvPortMalloc+0x180>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d101      	bne.n	800b934 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b930:	f000 f920 	bl	800bb74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b934:	4b59      	ldr	r3, [pc, #356]	; (800ba9c <pvPortMalloc+0x184>)
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	4013      	ands	r3, r2
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	f040 8093 	bne.w	800ba68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d01d      	beq.n	800b984 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b948:	2208      	movs	r2, #8
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4413      	add	r3, r2
 800b94e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f003 0307 	and.w	r3, r3, #7
 800b956:	2b00      	cmp	r3, #0
 800b958:	d014      	beq.n	800b984 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f023 0307 	bic.w	r3, r3, #7
 800b960:	3308      	adds	r3, #8
 800b962:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f003 0307 	and.w	r3, r3, #7
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d00a      	beq.n	800b984 <pvPortMalloc+0x6c>
	__asm volatile
 800b96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b972:	f383 8811 	msr	BASEPRI, r3
 800b976:	f3bf 8f6f 	isb	sy
 800b97a:	f3bf 8f4f 	dsb	sy
 800b97e:	617b      	str	r3, [r7, #20]
}
 800b980:	bf00      	nop
 800b982:	e7fe      	b.n	800b982 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d06e      	beq.n	800ba68 <pvPortMalloc+0x150>
 800b98a:	4b45      	ldr	r3, [pc, #276]	; (800baa0 <pvPortMalloc+0x188>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	429a      	cmp	r2, r3
 800b992:	d869      	bhi.n	800ba68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b994:	4b43      	ldr	r3, [pc, #268]	; (800baa4 <pvPortMalloc+0x18c>)
 800b996:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b998:	4b42      	ldr	r3, [pc, #264]	; (800baa4 <pvPortMalloc+0x18c>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b99e:	e004      	b.n	800b9aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d903      	bls.n	800b9bc <pvPortMalloc+0xa4>
 800b9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d1f1      	bne.n	800b9a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b9bc:	4b36      	ldr	r3, [pc, #216]	; (800ba98 <pvPortMalloc+0x180>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d050      	beq.n	800ba68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b9c6:	6a3b      	ldr	r3, [r7, #32]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	2208      	movs	r2, #8
 800b9cc:	4413      	add	r3, r2
 800b9ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d2:	681a      	ldr	r2, [r3, #0]
 800b9d4:	6a3b      	ldr	r3, [r7, #32]
 800b9d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9da:	685a      	ldr	r2, [r3, #4]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	1ad2      	subs	r2, r2, r3
 800b9e0:	2308      	movs	r3, #8
 800b9e2:	005b      	lsls	r3, r3, #1
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d91f      	bls.n	800ba28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b9e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	f003 0307 	and.w	r3, r3, #7
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d00a      	beq.n	800ba10 <pvPortMalloc+0xf8>
	__asm volatile
 800b9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fe:	f383 8811 	msr	BASEPRI, r3
 800ba02:	f3bf 8f6f 	isb	sy
 800ba06:	f3bf 8f4f 	dsb	sy
 800ba0a:	613b      	str	r3, [r7, #16]
}
 800ba0c:	bf00      	nop
 800ba0e:	e7fe      	b.n	800ba0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba12:	685a      	ldr	r2, [r3, #4]
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	1ad2      	subs	r2, r2, r3
 800ba18:	69bb      	ldr	r3, [r7, #24]
 800ba1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ba1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1e:	687a      	ldr	r2, [r7, #4]
 800ba20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ba22:	69b8      	ldr	r0, [r7, #24]
 800ba24:	f000 f908 	bl	800bc38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ba28:	4b1d      	ldr	r3, [pc, #116]	; (800baa0 <pvPortMalloc+0x188>)
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	1ad3      	subs	r3, r2, r3
 800ba32:	4a1b      	ldr	r2, [pc, #108]	; (800baa0 <pvPortMalloc+0x188>)
 800ba34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ba36:	4b1a      	ldr	r3, [pc, #104]	; (800baa0 <pvPortMalloc+0x188>)
 800ba38:	681a      	ldr	r2, [r3, #0]
 800ba3a:	4b1b      	ldr	r3, [pc, #108]	; (800baa8 <pvPortMalloc+0x190>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d203      	bcs.n	800ba4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ba42:	4b17      	ldr	r3, [pc, #92]	; (800baa0 <pvPortMalloc+0x188>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4a18      	ldr	r2, [pc, #96]	; (800baa8 <pvPortMalloc+0x190>)
 800ba48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4c:	685a      	ldr	r2, [r3, #4]
 800ba4e:	4b13      	ldr	r3, [pc, #76]	; (800ba9c <pvPortMalloc+0x184>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	431a      	orrs	r2, r3
 800ba54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ba58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ba5e:	4b13      	ldr	r3, [pc, #76]	; (800baac <pvPortMalloc+0x194>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	3301      	adds	r3, #1
 800ba64:	4a11      	ldr	r2, [pc, #68]	; (800baac <pvPortMalloc+0x194>)
 800ba66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ba68:	f7fe fcfc 	bl	800a464 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba6c:	69fb      	ldr	r3, [r7, #28]
 800ba6e:	f003 0307 	and.w	r3, r3, #7
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d00a      	beq.n	800ba8c <pvPortMalloc+0x174>
	__asm volatile
 800ba76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7a:	f383 8811 	msr	BASEPRI, r3
 800ba7e:	f3bf 8f6f 	isb	sy
 800ba82:	f3bf 8f4f 	dsb	sy
 800ba86:	60fb      	str	r3, [r7, #12]
}
 800ba88:	bf00      	nop
 800ba8a:	e7fe      	b.n	800ba8a <pvPortMalloc+0x172>
	return pvReturn;
 800ba8c:	69fb      	ldr	r3, [r7, #28]
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3728      	adds	r7, #40	; 0x28
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop
 800ba98:	20004c20 	.word	0x20004c20
 800ba9c:	20004c34 	.word	0x20004c34
 800baa0:	20004c24 	.word	0x20004c24
 800baa4:	20004c18 	.word	0x20004c18
 800baa8:	20004c28 	.word	0x20004c28
 800baac:	20004c2c 	.word	0x20004c2c

0800bab0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b086      	sub	sp, #24
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d04d      	beq.n	800bb5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bac2:	2308      	movs	r3, #8
 800bac4:	425b      	negs	r3, r3
 800bac6:	697a      	ldr	r2, [r7, #20]
 800bac8:	4413      	add	r3, r2
 800baca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	685a      	ldr	r2, [r3, #4]
 800bad4:	4b24      	ldr	r3, [pc, #144]	; (800bb68 <vPortFree+0xb8>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4013      	ands	r3, r2
 800bada:	2b00      	cmp	r3, #0
 800badc:	d10a      	bne.n	800baf4 <vPortFree+0x44>
	__asm volatile
 800bade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae2:	f383 8811 	msr	BASEPRI, r3
 800bae6:	f3bf 8f6f 	isb	sy
 800baea:	f3bf 8f4f 	dsb	sy
 800baee:	60fb      	str	r3, [r7, #12]
}
 800baf0:	bf00      	nop
 800baf2:	e7fe      	b.n	800baf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d00a      	beq.n	800bb12 <vPortFree+0x62>
	__asm volatile
 800bafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb00:	f383 8811 	msr	BASEPRI, r3
 800bb04:	f3bf 8f6f 	isb	sy
 800bb08:	f3bf 8f4f 	dsb	sy
 800bb0c:	60bb      	str	r3, [r7, #8]
}
 800bb0e:	bf00      	nop
 800bb10:	e7fe      	b.n	800bb10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	685a      	ldr	r2, [r3, #4]
 800bb16:	4b14      	ldr	r3, [pc, #80]	; (800bb68 <vPortFree+0xb8>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4013      	ands	r3, r2
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d01e      	beq.n	800bb5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d11a      	bne.n	800bb5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	685a      	ldr	r2, [r3, #4]
 800bb2c:	4b0e      	ldr	r3, [pc, #56]	; (800bb68 <vPortFree+0xb8>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	43db      	mvns	r3, r3
 800bb32:	401a      	ands	r2, r3
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bb38:	f7fe fc86 	bl	800a448 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	685a      	ldr	r2, [r3, #4]
 800bb40:	4b0a      	ldr	r3, [pc, #40]	; (800bb6c <vPortFree+0xbc>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	4413      	add	r3, r2
 800bb46:	4a09      	ldr	r2, [pc, #36]	; (800bb6c <vPortFree+0xbc>)
 800bb48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb4a:	6938      	ldr	r0, [r7, #16]
 800bb4c:	f000 f874 	bl	800bc38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bb50:	4b07      	ldr	r3, [pc, #28]	; (800bb70 <vPortFree+0xc0>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	3301      	adds	r3, #1
 800bb56:	4a06      	ldr	r2, [pc, #24]	; (800bb70 <vPortFree+0xc0>)
 800bb58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bb5a:	f7fe fc83 	bl	800a464 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bb5e:	bf00      	nop
 800bb60:	3718      	adds	r7, #24
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	20004c34 	.word	0x20004c34
 800bb6c:	20004c24 	.word	0x20004c24
 800bb70:	20004c30 	.word	0x20004c30

0800bb74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bb74:	b480      	push	{r7}
 800bb76:	b085      	sub	sp, #20
 800bb78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bb7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bb7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bb80:	4b27      	ldr	r3, [pc, #156]	; (800bc20 <prvHeapInit+0xac>)
 800bb82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f003 0307 	and.w	r3, r3, #7
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d00c      	beq.n	800bba8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	3307      	adds	r3, #7
 800bb92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f023 0307 	bic.w	r3, r3, #7
 800bb9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb9c:	68ba      	ldr	r2, [r7, #8]
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	1ad3      	subs	r3, r2, r3
 800bba2:	4a1f      	ldr	r2, [pc, #124]	; (800bc20 <prvHeapInit+0xac>)
 800bba4:	4413      	add	r3, r2
 800bba6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bbac:	4a1d      	ldr	r2, [pc, #116]	; (800bc24 <prvHeapInit+0xb0>)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bbb2:	4b1c      	ldr	r3, [pc, #112]	; (800bc24 <prvHeapInit+0xb0>)
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	68ba      	ldr	r2, [r7, #8]
 800bbbc:	4413      	add	r3, r2
 800bbbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bbc0:	2208      	movs	r2, #8
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	1a9b      	subs	r3, r3, r2
 800bbc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	f023 0307 	bic.w	r3, r3, #7
 800bbce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	4a15      	ldr	r2, [pc, #84]	; (800bc28 <prvHeapInit+0xb4>)
 800bbd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bbd6:	4b14      	ldr	r3, [pc, #80]	; (800bc28 <prvHeapInit+0xb4>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bbde:	4b12      	ldr	r3, [pc, #72]	; (800bc28 <prvHeapInit+0xb4>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	68fa      	ldr	r2, [r7, #12]
 800bbee:	1ad2      	subs	r2, r2, r3
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bbf4:	4b0c      	ldr	r3, [pc, #48]	; (800bc28 <prvHeapInit+0xb4>)
 800bbf6:	681a      	ldr	r2, [r3, #0]
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	685b      	ldr	r3, [r3, #4]
 800bc00:	4a0a      	ldr	r2, [pc, #40]	; (800bc2c <prvHeapInit+0xb8>)
 800bc02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	4a09      	ldr	r2, [pc, #36]	; (800bc30 <prvHeapInit+0xbc>)
 800bc0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bc0c:	4b09      	ldr	r3, [pc, #36]	; (800bc34 <prvHeapInit+0xc0>)
 800bc0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bc12:	601a      	str	r2, [r3, #0]
}
 800bc14:	bf00      	nop
 800bc16:	3714      	adds	r7, #20
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr
 800bc20:	20001018 	.word	0x20001018
 800bc24:	20004c18 	.word	0x20004c18
 800bc28:	20004c20 	.word	0x20004c20
 800bc2c:	20004c28 	.word	0x20004c28
 800bc30:	20004c24 	.word	0x20004c24
 800bc34:	20004c34 	.word	0x20004c34

0800bc38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b085      	sub	sp, #20
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bc40:	4b28      	ldr	r3, [pc, #160]	; (800bce4 <prvInsertBlockIntoFreeList+0xac>)
 800bc42:	60fb      	str	r3, [r7, #12]
 800bc44:	e002      	b.n	800bc4c <prvInsertBlockIntoFreeList+0x14>
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	60fb      	str	r3, [r7, #12]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d8f7      	bhi.n	800bc46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	68ba      	ldr	r2, [r7, #8]
 800bc60:	4413      	add	r3, r2
 800bc62:	687a      	ldr	r2, [r7, #4]
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d108      	bne.n	800bc7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	685a      	ldr	r2, [r3, #4]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	441a      	add	r2, r3
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	68ba      	ldr	r2, [r7, #8]
 800bc84:	441a      	add	r2, r3
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d118      	bne.n	800bcc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681a      	ldr	r2, [r3, #0]
 800bc92:	4b15      	ldr	r3, [pc, #84]	; (800bce8 <prvInsertBlockIntoFreeList+0xb0>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d00d      	beq.n	800bcb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	685a      	ldr	r2, [r3, #4]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	441a      	add	r2, r3
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	681a      	ldr	r2, [r3, #0]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	601a      	str	r2, [r3, #0]
 800bcb4:	e008      	b.n	800bcc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bcb6:	4b0c      	ldr	r3, [pc, #48]	; (800bce8 <prvInsertBlockIntoFreeList+0xb0>)
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	601a      	str	r2, [r3, #0]
 800bcbe:	e003      	b.n	800bcc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681a      	ldr	r2, [r3, #0]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bcc8:	68fa      	ldr	r2, [r7, #12]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d002      	beq.n	800bcd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bcd6:	bf00      	nop
 800bcd8:	3714      	adds	r7, #20
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr
 800bce2:	bf00      	nop
 800bce4:	20004c18 	.word	0x20004c18
 800bce8:	20004c20 	.word	0x20004c20

0800bcec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	490e      	ldr	r1, [pc, #56]	; (800bd2c <MX_USB_HOST_Init+0x40>)
 800bcf4:	480e      	ldr	r0, [pc, #56]	; (800bd30 <MX_USB_HOST_Init+0x44>)
 800bcf6:	f7fb f92f 	bl	8006f58 <USBH_Init>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d001      	beq.n	800bd04 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800bd00:	f7f4 fe4c 	bl	800099c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800bd04:	490b      	ldr	r1, [pc, #44]	; (800bd34 <MX_USB_HOST_Init+0x48>)
 800bd06:	480a      	ldr	r0, [pc, #40]	; (800bd30 <MX_USB_HOST_Init+0x44>)
 800bd08:	f7fb f9f5 	bl	80070f6 <USBH_RegisterClass>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d001      	beq.n	800bd16 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800bd12:	f7f4 fe43 	bl	800099c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800bd16:	4806      	ldr	r0, [pc, #24]	; (800bd30 <MX_USB_HOST_Init+0x44>)
 800bd18:	f7fb fa79 	bl	800720e <USBH_Start>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d001      	beq.n	800bd26 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bd22:	f7f4 fe3b 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bd26:	bf00      	nop
 800bd28:	bd80      	pop	{r7, pc}
 800bd2a:	bf00      	nop
 800bd2c:	0800bd39 	.word	0x0800bd39
 800bd30:	20004c38 	.word	0x20004c38
 800bd34:	2000000c 	.word	0x2000000c

0800bd38 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b083      	sub	sp, #12
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	460b      	mov	r3, r1
 800bd42:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bd44:	78fb      	ldrb	r3, [r7, #3]
 800bd46:	3b01      	subs	r3, #1
 800bd48:	2b04      	cmp	r3, #4
 800bd4a:	d819      	bhi.n	800bd80 <USBH_UserProcess+0x48>
 800bd4c:	a201      	add	r2, pc, #4	; (adr r2, 800bd54 <USBH_UserProcess+0x1c>)
 800bd4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd52:	bf00      	nop
 800bd54:	0800bd81 	.word	0x0800bd81
 800bd58:	0800bd71 	.word	0x0800bd71
 800bd5c:	0800bd81 	.word	0x0800bd81
 800bd60:	0800bd79 	.word	0x0800bd79
 800bd64:	0800bd69 	.word	0x0800bd69
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bd68:	4b09      	ldr	r3, [pc, #36]	; (800bd90 <USBH_UserProcess+0x58>)
 800bd6a:	2203      	movs	r2, #3
 800bd6c:	701a      	strb	r2, [r3, #0]
  break;
 800bd6e:	e008      	b.n	800bd82 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bd70:	4b07      	ldr	r3, [pc, #28]	; (800bd90 <USBH_UserProcess+0x58>)
 800bd72:	2202      	movs	r2, #2
 800bd74:	701a      	strb	r2, [r3, #0]
  break;
 800bd76:	e004      	b.n	800bd82 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bd78:	4b05      	ldr	r3, [pc, #20]	; (800bd90 <USBH_UserProcess+0x58>)
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	701a      	strb	r2, [r3, #0]
  break;
 800bd7e:	e000      	b.n	800bd82 <USBH_UserProcess+0x4a>

  default:
  break;
 800bd80:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800bd82:	bf00      	nop
 800bd84:	370c      	adds	r7, #12
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop
 800bd90:	2000501c 	.word	0x2000501c

0800bd94 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b08a      	sub	sp, #40	; 0x28
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd9c:	f107 0314 	add.w	r3, r7, #20
 800bda0:	2200      	movs	r2, #0
 800bda2:	601a      	str	r2, [r3, #0]
 800bda4:	605a      	str	r2, [r3, #4]
 800bda6:	609a      	str	r2, [r3, #8]
 800bda8:	60da      	str	r2, [r3, #12]
 800bdaa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bdb4:	d147      	bne.n	800be46 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	613b      	str	r3, [r7, #16]
 800bdba:	4b25      	ldr	r3, [pc, #148]	; (800be50 <HAL_HCD_MspInit+0xbc>)
 800bdbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdbe:	4a24      	ldr	r2, [pc, #144]	; (800be50 <HAL_HCD_MspInit+0xbc>)
 800bdc0:	f043 0301 	orr.w	r3, r3, #1
 800bdc4:	6313      	str	r3, [r2, #48]	; 0x30
 800bdc6:	4b22      	ldr	r3, [pc, #136]	; (800be50 <HAL_HCD_MspInit+0xbc>)
 800bdc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdca:	f003 0301 	and.w	r3, r3, #1
 800bdce:	613b      	str	r3, [r7, #16]
 800bdd0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800bdd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bdd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bddc:	2300      	movs	r3, #0
 800bdde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800bde0:	f107 0314 	add.w	r3, r7, #20
 800bde4:	4619      	mov	r1, r3
 800bde6:	481b      	ldr	r0, [pc, #108]	; (800be54 <HAL_HCD_MspInit+0xc0>)
 800bde8:	f7f5 f99c 	bl	8001124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800bdec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800bdf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bdf2:	2302      	movs	r3, #2
 800bdf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bdfe:	230a      	movs	r3, #10
 800be00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be02:	f107 0314 	add.w	r3, r7, #20
 800be06:	4619      	mov	r1, r3
 800be08:	4812      	ldr	r0, [pc, #72]	; (800be54 <HAL_HCD_MspInit+0xc0>)
 800be0a:	f7f5 f98b 	bl	8001124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800be0e:	4b10      	ldr	r3, [pc, #64]	; (800be50 <HAL_HCD_MspInit+0xbc>)
 800be10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be12:	4a0f      	ldr	r2, [pc, #60]	; (800be50 <HAL_HCD_MspInit+0xbc>)
 800be14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be18:	6353      	str	r3, [r2, #52]	; 0x34
 800be1a:	2300      	movs	r3, #0
 800be1c:	60fb      	str	r3, [r7, #12]
 800be1e:	4b0c      	ldr	r3, [pc, #48]	; (800be50 <HAL_HCD_MspInit+0xbc>)
 800be20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be22:	4a0b      	ldr	r2, [pc, #44]	; (800be50 <HAL_HCD_MspInit+0xbc>)
 800be24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800be28:	6453      	str	r3, [r2, #68]	; 0x44
 800be2a:	4b09      	ldr	r3, [pc, #36]	; (800be50 <HAL_HCD_MspInit+0xbc>)
 800be2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be32:	60fb      	str	r3, [r7, #12]
 800be34:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800be36:	2200      	movs	r2, #0
 800be38:	2105      	movs	r1, #5
 800be3a:	2043      	movs	r0, #67	; 0x43
 800be3c:	f7f5 f948 	bl	80010d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800be40:	2043      	movs	r0, #67	; 0x43
 800be42:	f7f5 f961 	bl	8001108 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800be46:	bf00      	nop
 800be48:	3728      	adds	r7, #40	; 0x28
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	40023800 	.word	0x40023800
 800be54:	40020000 	.word	0x40020000

0800be58 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800be66:	4618      	mov	r0, r3
 800be68:	f7fb fe89 	bl	8007b7e <USBH_LL_IncTimer>
}
 800be6c:	bf00      	nop
 800be6e:	3708      	adds	r7, #8
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b082      	sub	sp, #8
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800be82:	4618      	mov	r0, r3
 800be84:	f7fb fecd 	bl	8007c22 <USBH_LL_Connect>
}
 800be88:	bf00      	nop
 800be8a:	3708      	adds	r7, #8
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}

0800be90 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b082      	sub	sp, #8
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7fb fee2 	bl	8007c68 <USBH_LL_Disconnect>
}
 800bea4:	bf00      	nop
 800bea6:	3708      	adds	r7, #8
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	460b      	mov	r3, r1
 800beb6:	70fb      	strb	r3, [r7, #3]
 800beb8:	4613      	mov	r3, r2
 800beba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7fb ff19 	bl	8007cfa <USBH_LL_NotifyURBChange>
#endif
}
 800bec8:	bf00      	nop
 800beca:	3708      	adds	r7, #8
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800bede:	4618      	mov	r0, r3
 800bee0:	f7fb fe77 	bl	8007bd2 <USBH_LL_PortEnabled>
}
 800bee4:	bf00      	nop
 800bee6:	3708      	adds	r7, #8
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}

0800beec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b082      	sub	sp, #8
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800befa:	4618      	mov	r0, r3
 800befc:	f7fb fe83 	bl	8007c06 <USBH_LL_PortDisabled>
}
 800bf00:	bf00      	nop
 800bf02:	3708      	adds	r7, #8
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bf16:	2b01      	cmp	r3, #1
 800bf18:	d12a      	bne.n	800bf70 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800bf1a:	4a18      	ldr	r2, [pc, #96]	; (800bf7c <USBH_LL_Init+0x74>)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	4a15      	ldr	r2, [pc, #84]	; (800bf7c <USBH_LL_Init+0x74>)
 800bf26:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bf2a:	4b14      	ldr	r3, [pc, #80]	; (800bf7c <USBH_LL_Init+0x74>)
 800bf2c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bf30:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800bf32:	4b12      	ldr	r3, [pc, #72]	; (800bf7c <USBH_LL_Init+0x74>)
 800bf34:	2208      	movs	r2, #8
 800bf36:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800bf38:	4b10      	ldr	r3, [pc, #64]	; (800bf7c <USBH_LL_Init+0x74>)
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bf3e:	4b0f      	ldr	r3, [pc, #60]	; (800bf7c <USBH_LL_Init+0x74>)
 800bf40:	2200      	movs	r2, #0
 800bf42:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800bf44:	4b0d      	ldr	r3, [pc, #52]	; (800bf7c <USBH_LL_Init+0x74>)
 800bf46:	2202      	movs	r2, #2
 800bf48:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bf4a:	4b0c      	ldr	r3, [pc, #48]	; (800bf7c <USBH_LL_Init+0x74>)
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800bf50:	480a      	ldr	r0, [pc, #40]	; (800bf7c <USBH_LL_Init+0x74>)
 800bf52:	f7f5 fab6 	bl	80014c2 <HAL_HCD_Init>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d001      	beq.n	800bf60 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800bf5c:	f7f4 fd1e 	bl	800099c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800bf60:	4806      	ldr	r0, [pc, #24]	; (800bf7c <USBH_LL_Init+0x74>)
 800bf62:	f7f5 ff17 	bl	8001d94 <HAL_HCD_GetCurrentFrame>
 800bf66:	4603      	mov	r3, r0
 800bf68:	4619      	mov	r1, r3
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f7fb fdf8 	bl	8007b60 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800bf70:	2300      	movs	r3, #0
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3708      	adds	r7, #8
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	20005020 	.word	0x20005020

0800bf80 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7f5 fe84 	bl	8001ca4 <HAL_HCD_Start>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bfa0:	7bfb      	ldrb	r3, [r7, #15]
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f000 f95e 	bl	800c264 <USBH_Get_USB_Status>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfac:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3710      	adds	r7, #16
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}

0800bfb6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800bfb6:	b580      	push	{r7, lr}
 800bfb8:	b084      	sub	sp, #16
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f7f5 fe8c 	bl	8001cea <HAL_HCD_Stop>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bfd6:	7bfb      	ldrb	r3, [r7, #15]
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f000 f943 	bl	800c264 <USBH_Get_USB_Status>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfe2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3710      	adds	r7, #16
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b084      	sub	sp, #16
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800bff4:	2301      	movs	r3, #1
 800bff6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bffe:	4618      	mov	r0, r3
 800c000:	f7f5 fed6 	bl	8001db0 <HAL_HCD_GetCurrentSpeed>
 800c004:	4603      	mov	r3, r0
 800c006:	2b02      	cmp	r3, #2
 800c008:	d00c      	beq.n	800c024 <USBH_LL_GetSpeed+0x38>
 800c00a:	2b02      	cmp	r3, #2
 800c00c:	d80d      	bhi.n	800c02a <USBH_LL_GetSpeed+0x3e>
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d002      	beq.n	800c018 <USBH_LL_GetSpeed+0x2c>
 800c012:	2b01      	cmp	r3, #1
 800c014:	d003      	beq.n	800c01e <USBH_LL_GetSpeed+0x32>
 800c016:	e008      	b.n	800c02a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c018:	2300      	movs	r3, #0
 800c01a:	73fb      	strb	r3, [r7, #15]
    break;
 800c01c:	e008      	b.n	800c030 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c01e:	2301      	movs	r3, #1
 800c020:	73fb      	strb	r3, [r7, #15]
    break;
 800c022:	e005      	b.n	800c030 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c024:	2302      	movs	r3, #2
 800c026:	73fb      	strb	r3, [r7, #15]
    break;
 800c028:	e002      	b.n	800c030 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c02a:	2301      	movs	r3, #1
 800c02c:	73fb      	strb	r3, [r7, #15]
    break;
 800c02e:	bf00      	nop
  }
  return  speed;
 800c030:	7bfb      	ldrb	r3, [r7, #15]
}
 800c032:	4618      	mov	r0, r3
 800c034:	3710      	adds	r7, #16
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}

0800c03a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c03a:	b580      	push	{r7, lr}
 800c03c:	b084      	sub	sp, #16
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c042:	2300      	movs	r3, #0
 800c044:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c046:	2300      	movs	r3, #0
 800c048:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c050:	4618      	mov	r0, r3
 800c052:	f7f5 fe67 	bl	8001d24 <HAL_HCD_ResetPort>
 800c056:	4603      	mov	r3, r0
 800c058:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c05a:	7bfb      	ldrb	r3, [r7, #15]
 800c05c:	4618      	mov	r0, r3
 800c05e:	f000 f901 	bl	800c264 <USBH_Get_USB_Status>
 800c062:	4603      	mov	r3, r0
 800c064:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c066:	7bbb      	ldrb	r3, [r7, #14]
}
 800c068:	4618      	mov	r0, r3
 800c06a:	3710      	adds	r7, #16
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	460b      	mov	r3, r1
 800c07a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c082:	78fa      	ldrb	r2, [r7, #3]
 800c084:	4611      	mov	r1, r2
 800c086:	4618      	mov	r0, r3
 800c088:	f7f5 fe6f 	bl	8001d6a <HAL_HCD_HC_GetXferCount>
 800c08c:	4603      	mov	r3, r0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3708      	adds	r7, #8
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}

0800c096 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c096:	b590      	push	{r4, r7, lr}
 800c098:	b089      	sub	sp, #36	; 0x24
 800c09a:	af04      	add	r7, sp, #16
 800c09c:	6078      	str	r0, [r7, #4]
 800c09e:	4608      	mov	r0, r1
 800c0a0:	4611      	mov	r1, r2
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	70fb      	strb	r3, [r7, #3]
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	70bb      	strb	r3, [r7, #2]
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c0be:	787c      	ldrb	r4, [r7, #1]
 800c0c0:	78ba      	ldrb	r2, [r7, #2]
 800c0c2:	78f9      	ldrb	r1, [r7, #3]
 800c0c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c0c6:	9302      	str	r3, [sp, #8]
 800c0c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c0cc:	9301      	str	r3, [sp, #4]
 800c0ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0d2:	9300      	str	r3, [sp, #0]
 800c0d4:	4623      	mov	r3, r4
 800c0d6:	f7f5 fa5b 	bl	8001590 <HAL_HCD_HC_Init>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c0de:	7bfb      	ldrb	r3, [r7, #15]
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f000 f8bf 	bl	800c264 <USBH_Get_USB_Status>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3714      	adds	r7, #20
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd90      	pop	{r4, r7, pc}

0800c0f4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b084      	sub	sp, #16
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c100:	2300      	movs	r3, #0
 800c102:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c104:	2300      	movs	r3, #0
 800c106:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c10e:	78fa      	ldrb	r2, [r7, #3]
 800c110:	4611      	mov	r1, r2
 800c112:	4618      	mov	r0, r3
 800c114:	f7f5 faf4 	bl	8001700 <HAL_HCD_HC_Halt>
 800c118:	4603      	mov	r3, r0
 800c11a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c11c:	7bfb      	ldrb	r3, [r7, #15]
 800c11e:	4618      	mov	r0, r3
 800c120:	f000 f8a0 	bl	800c264 <USBH_Get_USB_Status>
 800c124:	4603      	mov	r3, r0
 800c126:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c128:	7bbb      	ldrb	r3, [r7, #14]
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3710      	adds	r7, #16
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}

0800c132 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c132:	b590      	push	{r4, r7, lr}
 800c134:	b089      	sub	sp, #36	; 0x24
 800c136:	af04      	add	r7, sp, #16
 800c138:	6078      	str	r0, [r7, #4]
 800c13a:	4608      	mov	r0, r1
 800c13c:	4611      	mov	r1, r2
 800c13e:	461a      	mov	r2, r3
 800c140:	4603      	mov	r3, r0
 800c142:	70fb      	strb	r3, [r7, #3]
 800c144:	460b      	mov	r3, r1
 800c146:	70bb      	strb	r3, [r7, #2]
 800c148:	4613      	mov	r3, r2
 800c14a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c14c:	2300      	movs	r3, #0
 800c14e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c150:	2300      	movs	r3, #0
 800c152:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c15a:	787c      	ldrb	r4, [r7, #1]
 800c15c:	78ba      	ldrb	r2, [r7, #2]
 800c15e:	78f9      	ldrb	r1, [r7, #3]
 800c160:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c164:	9303      	str	r3, [sp, #12]
 800c166:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c168:	9302      	str	r3, [sp, #8]
 800c16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16c:	9301      	str	r3, [sp, #4]
 800c16e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c172:	9300      	str	r3, [sp, #0]
 800c174:	4623      	mov	r3, r4
 800c176:	f7f5 fae7 	bl	8001748 <HAL_HCD_HC_SubmitRequest>
 800c17a:	4603      	mov	r3, r0
 800c17c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c17e:	7bfb      	ldrb	r3, [r7, #15]
 800c180:	4618      	mov	r0, r3
 800c182:	f000 f86f 	bl	800c264 <USBH_Get_USB_Status>
 800c186:	4603      	mov	r3, r0
 800c188:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c18a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3714      	adds	r7, #20
 800c190:	46bd      	mov	sp, r7
 800c192:	bd90      	pop	{r4, r7, pc}

0800c194 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b082      	sub	sp, #8
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	460b      	mov	r3, r1
 800c19e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c1a6:	78fa      	ldrb	r2, [r7, #3]
 800c1a8:	4611      	mov	r1, r2
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7f5 fdc8 	bl	8001d40 <HAL_HCD_HC_GetURBState>
 800c1b0:	4603      	mov	r3, r0
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3708      	adds	r7, #8
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}

0800c1ba <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c1ba:	b580      	push	{r7, lr}
 800c1bc:	b082      	sub	sp, #8
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d103      	bne.n	800c1d8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c1d0:	78fb      	ldrb	r3, [r7, #3]
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f000 f872 	bl	800c2bc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c1d8:	20c8      	movs	r0, #200	; 0xc8
 800c1da:	f7f4 fe9d 	bl	8000f18 <HAL_Delay>
  return USBH_OK;
 800c1de:	2300      	movs	r3, #0
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3708      	adds	r7, #8
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b085      	sub	sp, #20
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	70fb      	strb	r3, [r7, #3]
 800c1f4:	4613      	mov	r3, r2
 800c1f6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c1fe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c200:	78fa      	ldrb	r2, [r7, #3]
 800c202:	68f9      	ldr	r1, [r7, #12]
 800c204:	4613      	mov	r3, r2
 800c206:	011b      	lsls	r3, r3, #4
 800c208:	1a9b      	subs	r3, r3, r2
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	440b      	add	r3, r1
 800c20e:	3317      	adds	r3, #23
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d00a      	beq.n	800c22c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c216:	78fa      	ldrb	r2, [r7, #3]
 800c218:	68f9      	ldr	r1, [r7, #12]
 800c21a:	4613      	mov	r3, r2
 800c21c:	011b      	lsls	r3, r3, #4
 800c21e:	1a9b      	subs	r3, r3, r2
 800c220:	009b      	lsls	r3, r3, #2
 800c222:	440b      	add	r3, r1
 800c224:	333c      	adds	r3, #60	; 0x3c
 800c226:	78ba      	ldrb	r2, [r7, #2]
 800c228:	701a      	strb	r2, [r3, #0]
 800c22a:	e009      	b.n	800c240 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c22c:	78fa      	ldrb	r2, [r7, #3]
 800c22e:	68f9      	ldr	r1, [r7, #12]
 800c230:	4613      	mov	r3, r2
 800c232:	011b      	lsls	r3, r3, #4
 800c234:	1a9b      	subs	r3, r3, r2
 800c236:	009b      	lsls	r3, r3, #2
 800c238:	440b      	add	r3, r1
 800c23a:	333d      	adds	r3, #61	; 0x3d
 800c23c:	78ba      	ldrb	r2, [r7, #2]
 800c23e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c240:	2300      	movs	r3, #0
}
 800c242:	4618      	mov	r0, r3
 800c244:	3714      	adds	r7, #20
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr

0800c24e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c24e:	b580      	push	{r7, lr}
 800c250:	b082      	sub	sp, #8
 800c252:	af00      	add	r7, sp, #0
 800c254:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f7f4 fe5e 	bl	8000f18 <HAL_Delay>
}
 800c25c:	bf00      	nop
 800c25e:	3708      	adds	r7, #8
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c264:	b480      	push	{r7}
 800c266:	b085      	sub	sp, #20
 800c268:	af00      	add	r7, sp, #0
 800c26a:	4603      	mov	r3, r0
 800c26c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c26e:	2300      	movs	r3, #0
 800c270:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c272:	79fb      	ldrb	r3, [r7, #7]
 800c274:	2b03      	cmp	r3, #3
 800c276:	d817      	bhi.n	800c2a8 <USBH_Get_USB_Status+0x44>
 800c278:	a201      	add	r2, pc, #4	; (adr r2, 800c280 <USBH_Get_USB_Status+0x1c>)
 800c27a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c27e:	bf00      	nop
 800c280:	0800c291 	.word	0x0800c291
 800c284:	0800c297 	.word	0x0800c297
 800c288:	0800c29d 	.word	0x0800c29d
 800c28c:	0800c2a3 	.word	0x0800c2a3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c290:	2300      	movs	r3, #0
 800c292:	73fb      	strb	r3, [r7, #15]
    break;
 800c294:	e00b      	b.n	800c2ae <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c296:	2302      	movs	r3, #2
 800c298:	73fb      	strb	r3, [r7, #15]
    break;
 800c29a:	e008      	b.n	800c2ae <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c29c:	2301      	movs	r3, #1
 800c29e:	73fb      	strb	r3, [r7, #15]
    break;
 800c2a0:	e005      	b.n	800c2ae <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c2a2:	2302      	movs	r3, #2
 800c2a4:	73fb      	strb	r3, [r7, #15]
    break;
 800c2a6:	e002      	b.n	800c2ae <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c2a8:	2302      	movs	r3, #2
 800c2aa:	73fb      	strb	r3, [r7, #15]
    break;
 800c2ac:	bf00      	nop
  }
  return usb_status;
 800c2ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3714      	adds	r7, #20
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr

0800c2bc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c2c6:	79fb      	ldrb	r3, [r7, #7]
 800c2c8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c2ca:	79fb      	ldrb	r3, [r7, #7]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d102      	bne.n	800c2d6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	73fb      	strb	r3, [r7, #15]
 800c2d4:	e001      	b.n	800c2da <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c2da:	7bfb      	ldrb	r3, [r7, #15]
 800c2dc:	461a      	mov	r2, r3
 800c2de:	2101      	movs	r1, #1
 800c2e0:	4803      	ldr	r0, [pc, #12]	; (800c2f0 <MX_DriverVbusFS+0x34>)
 800c2e2:	f7f5 f8bb 	bl	800145c <HAL_GPIO_WritePin>
}
 800c2e6:	bf00      	nop
 800c2e8:	3710      	adds	r7, #16
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	40020800 	.word	0x40020800

0800c2f4 <malloc>:
 800c2f4:	4b02      	ldr	r3, [pc, #8]	; (800c300 <malloc+0xc>)
 800c2f6:	4601      	mov	r1, r0
 800c2f8:	6818      	ldr	r0, [r3, #0]
 800c2fa:	f000 b82b 	b.w	800c354 <_malloc_r>
 800c2fe:	bf00      	nop
 800c300:	2000007c 	.word	0x2000007c

0800c304 <free>:
 800c304:	4b02      	ldr	r3, [pc, #8]	; (800c310 <free+0xc>)
 800c306:	4601      	mov	r1, r0
 800c308:	6818      	ldr	r0, [r3, #0]
 800c30a:	f000 b957 	b.w	800c5bc <_free_r>
 800c30e:	bf00      	nop
 800c310:	2000007c 	.word	0x2000007c

0800c314 <sbrk_aligned>:
 800c314:	b570      	push	{r4, r5, r6, lr}
 800c316:	4e0e      	ldr	r6, [pc, #56]	; (800c350 <sbrk_aligned+0x3c>)
 800c318:	460c      	mov	r4, r1
 800c31a:	6831      	ldr	r1, [r6, #0]
 800c31c:	4605      	mov	r5, r0
 800c31e:	b911      	cbnz	r1, 800c326 <sbrk_aligned+0x12>
 800c320:	f000 f902 	bl	800c528 <_sbrk_r>
 800c324:	6030      	str	r0, [r6, #0]
 800c326:	4621      	mov	r1, r4
 800c328:	4628      	mov	r0, r5
 800c32a:	f000 f8fd 	bl	800c528 <_sbrk_r>
 800c32e:	1c43      	adds	r3, r0, #1
 800c330:	d00a      	beq.n	800c348 <sbrk_aligned+0x34>
 800c332:	1cc4      	adds	r4, r0, #3
 800c334:	f024 0403 	bic.w	r4, r4, #3
 800c338:	42a0      	cmp	r0, r4
 800c33a:	d007      	beq.n	800c34c <sbrk_aligned+0x38>
 800c33c:	1a21      	subs	r1, r4, r0
 800c33e:	4628      	mov	r0, r5
 800c340:	f000 f8f2 	bl	800c528 <_sbrk_r>
 800c344:	3001      	adds	r0, #1
 800c346:	d101      	bne.n	800c34c <sbrk_aligned+0x38>
 800c348:	f04f 34ff 	mov.w	r4, #4294967295
 800c34c:	4620      	mov	r0, r4
 800c34e:	bd70      	pop	{r4, r5, r6, pc}
 800c350:	20005404 	.word	0x20005404

0800c354 <_malloc_r>:
 800c354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c358:	1ccd      	adds	r5, r1, #3
 800c35a:	f025 0503 	bic.w	r5, r5, #3
 800c35e:	3508      	adds	r5, #8
 800c360:	2d0c      	cmp	r5, #12
 800c362:	bf38      	it	cc
 800c364:	250c      	movcc	r5, #12
 800c366:	2d00      	cmp	r5, #0
 800c368:	4607      	mov	r7, r0
 800c36a:	db01      	blt.n	800c370 <_malloc_r+0x1c>
 800c36c:	42a9      	cmp	r1, r5
 800c36e:	d905      	bls.n	800c37c <_malloc_r+0x28>
 800c370:	230c      	movs	r3, #12
 800c372:	603b      	str	r3, [r7, #0]
 800c374:	2600      	movs	r6, #0
 800c376:	4630      	mov	r0, r6
 800c378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c37c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c450 <_malloc_r+0xfc>
 800c380:	f000 f868 	bl	800c454 <__malloc_lock>
 800c384:	f8d8 3000 	ldr.w	r3, [r8]
 800c388:	461c      	mov	r4, r3
 800c38a:	bb5c      	cbnz	r4, 800c3e4 <_malloc_r+0x90>
 800c38c:	4629      	mov	r1, r5
 800c38e:	4638      	mov	r0, r7
 800c390:	f7ff ffc0 	bl	800c314 <sbrk_aligned>
 800c394:	1c43      	adds	r3, r0, #1
 800c396:	4604      	mov	r4, r0
 800c398:	d155      	bne.n	800c446 <_malloc_r+0xf2>
 800c39a:	f8d8 4000 	ldr.w	r4, [r8]
 800c39e:	4626      	mov	r6, r4
 800c3a0:	2e00      	cmp	r6, #0
 800c3a2:	d145      	bne.n	800c430 <_malloc_r+0xdc>
 800c3a4:	2c00      	cmp	r4, #0
 800c3a6:	d048      	beq.n	800c43a <_malloc_r+0xe6>
 800c3a8:	6823      	ldr	r3, [r4, #0]
 800c3aa:	4631      	mov	r1, r6
 800c3ac:	4638      	mov	r0, r7
 800c3ae:	eb04 0903 	add.w	r9, r4, r3
 800c3b2:	f000 f8b9 	bl	800c528 <_sbrk_r>
 800c3b6:	4581      	cmp	r9, r0
 800c3b8:	d13f      	bne.n	800c43a <_malloc_r+0xe6>
 800c3ba:	6821      	ldr	r1, [r4, #0]
 800c3bc:	1a6d      	subs	r5, r5, r1
 800c3be:	4629      	mov	r1, r5
 800c3c0:	4638      	mov	r0, r7
 800c3c2:	f7ff ffa7 	bl	800c314 <sbrk_aligned>
 800c3c6:	3001      	adds	r0, #1
 800c3c8:	d037      	beq.n	800c43a <_malloc_r+0xe6>
 800c3ca:	6823      	ldr	r3, [r4, #0]
 800c3cc:	442b      	add	r3, r5
 800c3ce:	6023      	str	r3, [r4, #0]
 800c3d0:	f8d8 3000 	ldr.w	r3, [r8]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d038      	beq.n	800c44a <_malloc_r+0xf6>
 800c3d8:	685a      	ldr	r2, [r3, #4]
 800c3da:	42a2      	cmp	r2, r4
 800c3dc:	d12b      	bne.n	800c436 <_malloc_r+0xe2>
 800c3de:	2200      	movs	r2, #0
 800c3e0:	605a      	str	r2, [r3, #4]
 800c3e2:	e00f      	b.n	800c404 <_malloc_r+0xb0>
 800c3e4:	6822      	ldr	r2, [r4, #0]
 800c3e6:	1b52      	subs	r2, r2, r5
 800c3e8:	d41f      	bmi.n	800c42a <_malloc_r+0xd6>
 800c3ea:	2a0b      	cmp	r2, #11
 800c3ec:	d917      	bls.n	800c41e <_malloc_r+0xca>
 800c3ee:	1961      	adds	r1, r4, r5
 800c3f0:	42a3      	cmp	r3, r4
 800c3f2:	6025      	str	r5, [r4, #0]
 800c3f4:	bf18      	it	ne
 800c3f6:	6059      	strne	r1, [r3, #4]
 800c3f8:	6863      	ldr	r3, [r4, #4]
 800c3fa:	bf08      	it	eq
 800c3fc:	f8c8 1000 	streq.w	r1, [r8]
 800c400:	5162      	str	r2, [r4, r5]
 800c402:	604b      	str	r3, [r1, #4]
 800c404:	4638      	mov	r0, r7
 800c406:	f104 060b 	add.w	r6, r4, #11
 800c40a:	f000 f829 	bl	800c460 <__malloc_unlock>
 800c40e:	f026 0607 	bic.w	r6, r6, #7
 800c412:	1d23      	adds	r3, r4, #4
 800c414:	1af2      	subs	r2, r6, r3
 800c416:	d0ae      	beq.n	800c376 <_malloc_r+0x22>
 800c418:	1b9b      	subs	r3, r3, r6
 800c41a:	50a3      	str	r3, [r4, r2]
 800c41c:	e7ab      	b.n	800c376 <_malloc_r+0x22>
 800c41e:	42a3      	cmp	r3, r4
 800c420:	6862      	ldr	r2, [r4, #4]
 800c422:	d1dd      	bne.n	800c3e0 <_malloc_r+0x8c>
 800c424:	f8c8 2000 	str.w	r2, [r8]
 800c428:	e7ec      	b.n	800c404 <_malloc_r+0xb0>
 800c42a:	4623      	mov	r3, r4
 800c42c:	6864      	ldr	r4, [r4, #4]
 800c42e:	e7ac      	b.n	800c38a <_malloc_r+0x36>
 800c430:	4634      	mov	r4, r6
 800c432:	6876      	ldr	r6, [r6, #4]
 800c434:	e7b4      	b.n	800c3a0 <_malloc_r+0x4c>
 800c436:	4613      	mov	r3, r2
 800c438:	e7cc      	b.n	800c3d4 <_malloc_r+0x80>
 800c43a:	230c      	movs	r3, #12
 800c43c:	603b      	str	r3, [r7, #0]
 800c43e:	4638      	mov	r0, r7
 800c440:	f000 f80e 	bl	800c460 <__malloc_unlock>
 800c444:	e797      	b.n	800c376 <_malloc_r+0x22>
 800c446:	6025      	str	r5, [r4, #0]
 800c448:	e7dc      	b.n	800c404 <_malloc_r+0xb0>
 800c44a:	605b      	str	r3, [r3, #4]
 800c44c:	deff      	udf	#255	; 0xff
 800c44e:	bf00      	nop
 800c450:	20005400 	.word	0x20005400

0800c454 <__malloc_lock>:
 800c454:	4801      	ldr	r0, [pc, #4]	; (800c45c <__malloc_lock+0x8>)
 800c456:	f000 b8a1 	b.w	800c59c <__retarget_lock_acquire_recursive>
 800c45a:	bf00      	nop
 800c45c:	20005544 	.word	0x20005544

0800c460 <__malloc_unlock>:
 800c460:	4801      	ldr	r0, [pc, #4]	; (800c468 <__malloc_unlock+0x8>)
 800c462:	f000 b89c 	b.w	800c59e <__retarget_lock_release_recursive>
 800c466:	bf00      	nop
 800c468:	20005544 	.word	0x20005544

0800c46c <memset>:
 800c46c:	4402      	add	r2, r0
 800c46e:	4603      	mov	r3, r0
 800c470:	4293      	cmp	r3, r2
 800c472:	d100      	bne.n	800c476 <memset+0xa>
 800c474:	4770      	bx	lr
 800c476:	f803 1b01 	strb.w	r1, [r3], #1
 800c47a:	e7f9      	b.n	800c470 <memset+0x4>

0800c47c <_reclaim_reent>:
 800c47c:	4b29      	ldr	r3, [pc, #164]	; (800c524 <_reclaim_reent+0xa8>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4283      	cmp	r3, r0
 800c482:	b570      	push	{r4, r5, r6, lr}
 800c484:	4604      	mov	r4, r0
 800c486:	d04b      	beq.n	800c520 <_reclaim_reent+0xa4>
 800c488:	69c3      	ldr	r3, [r0, #28]
 800c48a:	b143      	cbz	r3, 800c49e <_reclaim_reent+0x22>
 800c48c:	68db      	ldr	r3, [r3, #12]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d144      	bne.n	800c51c <_reclaim_reent+0xa0>
 800c492:	69e3      	ldr	r3, [r4, #28]
 800c494:	6819      	ldr	r1, [r3, #0]
 800c496:	b111      	cbz	r1, 800c49e <_reclaim_reent+0x22>
 800c498:	4620      	mov	r0, r4
 800c49a:	f000 f88f 	bl	800c5bc <_free_r>
 800c49e:	6961      	ldr	r1, [r4, #20]
 800c4a0:	b111      	cbz	r1, 800c4a8 <_reclaim_reent+0x2c>
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	f000 f88a 	bl	800c5bc <_free_r>
 800c4a8:	69e1      	ldr	r1, [r4, #28]
 800c4aa:	b111      	cbz	r1, 800c4b2 <_reclaim_reent+0x36>
 800c4ac:	4620      	mov	r0, r4
 800c4ae:	f000 f885 	bl	800c5bc <_free_r>
 800c4b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c4b4:	b111      	cbz	r1, 800c4bc <_reclaim_reent+0x40>
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	f000 f880 	bl	800c5bc <_free_r>
 800c4bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4be:	b111      	cbz	r1, 800c4c6 <_reclaim_reent+0x4a>
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	f000 f87b 	bl	800c5bc <_free_r>
 800c4c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c4c8:	b111      	cbz	r1, 800c4d0 <_reclaim_reent+0x54>
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	f000 f876 	bl	800c5bc <_free_r>
 800c4d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c4d2:	b111      	cbz	r1, 800c4da <_reclaim_reent+0x5e>
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	f000 f871 	bl	800c5bc <_free_r>
 800c4da:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c4dc:	b111      	cbz	r1, 800c4e4 <_reclaim_reent+0x68>
 800c4de:	4620      	mov	r0, r4
 800c4e0:	f000 f86c 	bl	800c5bc <_free_r>
 800c4e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c4e6:	b111      	cbz	r1, 800c4ee <_reclaim_reent+0x72>
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	f000 f867 	bl	800c5bc <_free_r>
 800c4ee:	6a23      	ldr	r3, [r4, #32]
 800c4f0:	b1b3      	cbz	r3, 800c520 <_reclaim_reent+0xa4>
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c4f8:	4718      	bx	r3
 800c4fa:	5949      	ldr	r1, [r1, r5]
 800c4fc:	b941      	cbnz	r1, 800c510 <_reclaim_reent+0x94>
 800c4fe:	3504      	adds	r5, #4
 800c500:	69e3      	ldr	r3, [r4, #28]
 800c502:	2d80      	cmp	r5, #128	; 0x80
 800c504:	68d9      	ldr	r1, [r3, #12]
 800c506:	d1f8      	bne.n	800c4fa <_reclaim_reent+0x7e>
 800c508:	4620      	mov	r0, r4
 800c50a:	f000 f857 	bl	800c5bc <_free_r>
 800c50e:	e7c0      	b.n	800c492 <_reclaim_reent+0x16>
 800c510:	680e      	ldr	r6, [r1, #0]
 800c512:	4620      	mov	r0, r4
 800c514:	f000 f852 	bl	800c5bc <_free_r>
 800c518:	4631      	mov	r1, r6
 800c51a:	e7ef      	b.n	800c4fc <_reclaim_reent+0x80>
 800c51c:	2500      	movs	r5, #0
 800c51e:	e7ef      	b.n	800c500 <_reclaim_reent+0x84>
 800c520:	bd70      	pop	{r4, r5, r6, pc}
 800c522:	bf00      	nop
 800c524:	2000007c 	.word	0x2000007c

0800c528 <_sbrk_r>:
 800c528:	b538      	push	{r3, r4, r5, lr}
 800c52a:	4d06      	ldr	r5, [pc, #24]	; (800c544 <_sbrk_r+0x1c>)
 800c52c:	2300      	movs	r3, #0
 800c52e:	4604      	mov	r4, r0
 800c530:	4608      	mov	r0, r1
 800c532:	602b      	str	r3, [r5, #0]
 800c534:	f7f4 fc3c 	bl	8000db0 <_sbrk>
 800c538:	1c43      	adds	r3, r0, #1
 800c53a:	d102      	bne.n	800c542 <_sbrk_r+0x1a>
 800c53c:	682b      	ldr	r3, [r5, #0]
 800c53e:	b103      	cbz	r3, 800c542 <_sbrk_r+0x1a>
 800c540:	6023      	str	r3, [r4, #0]
 800c542:	bd38      	pop	{r3, r4, r5, pc}
 800c544:	20005540 	.word	0x20005540

0800c548 <__errno>:
 800c548:	4b01      	ldr	r3, [pc, #4]	; (800c550 <__errno+0x8>)
 800c54a:	6818      	ldr	r0, [r3, #0]
 800c54c:	4770      	bx	lr
 800c54e:	bf00      	nop
 800c550:	2000007c 	.word	0x2000007c

0800c554 <__libc_init_array>:
 800c554:	b570      	push	{r4, r5, r6, lr}
 800c556:	4d0d      	ldr	r5, [pc, #52]	; (800c58c <__libc_init_array+0x38>)
 800c558:	4c0d      	ldr	r4, [pc, #52]	; (800c590 <__libc_init_array+0x3c>)
 800c55a:	1b64      	subs	r4, r4, r5
 800c55c:	10a4      	asrs	r4, r4, #2
 800c55e:	2600      	movs	r6, #0
 800c560:	42a6      	cmp	r6, r4
 800c562:	d109      	bne.n	800c578 <__libc_init_array+0x24>
 800c564:	4d0b      	ldr	r5, [pc, #44]	; (800c594 <__libc_init_array+0x40>)
 800c566:	4c0c      	ldr	r4, [pc, #48]	; (800c598 <__libc_init_array+0x44>)
 800c568:	f000 f874 	bl	800c654 <_init>
 800c56c:	1b64      	subs	r4, r4, r5
 800c56e:	10a4      	asrs	r4, r4, #2
 800c570:	2600      	movs	r6, #0
 800c572:	42a6      	cmp	r6, r4
 800c574:	d105      	bne.n	800c582 <__libc_init_array+0x2e>
 800c576:	bd70      	pop	{r4, r5, r6, pc}
 800c578:	f855 3b04 	ldr.w	r3, [r5], #4
 800c57c:	4798      	blx	r3
 800c57e:	3601      	adds	r6, #1
 800c580:	e7ee      	b.n	800c560 <__libc_init_array+0xc>
 800c582:	f855 3b04 	ldr.w	r3, [r5], #4
 800c586:	4798      	blx	r3
 800c588:	3601      	adds	r6, #1
 800c58a:	e7f2      	b.n	800c572 <__libc_init_array+0x1e>
 800c58c:	0800c6e4 	.word	0x0800c6e4
 800c590:	0800c6e4 	.word	0x0800c6e4
 800c594:	0800c6e4 	.word	0x0800c6e4
 800c598:	0800c6e8 	.word	0x0800c6e8

0800c59c <__retarget_lock_acquire_recursive>:
 800c59c:	4770      	bx	lr

0800c59e <__retarget_lock_release_recursive>:
 800c59e:	4770      	bx	lr

0800c5a0 <memcpy>:
 800c5a0:	440a      	add	r2, r1
 800c5a2:	4291      	cmp	r1, r2
 800c5a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c5a8:	d100      	bne.n	800c5ac <memcpy+0xc>
 800c5aa:	4770      	bx	lr
 800c5ac:	b510      	push	{r4, lr}
 800c5ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5b6:	4291      	cmp	r1, r2
 800c5b8:	d1f9      	bne.n	800c5ae <memcpy+0xe>
 800c5ba:	bd10      	pop	{r4, pc}

0800c5bc <_free_r>:
 800c5bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5be:	2900      	cmp	r1, #0
 800c5c0:	d044      	beq.n	800c64c <_free_r+0x90>
 800c5c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5c6:	9001      	str	r0, [sp, #4]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	f1a1 0404 	sub.w	r4, r1, #4
 800c5ce:	bfb8      	it	lt
 800c5d0:	18e4      	addlt	r4, r4, r3
 800c5d2:	f7ff ff3f 	bl	800c454 <__malloc_lock>
 800c5d6:	4a1e      	ldr	r2, [pc, #120]	; (800c650 <_free_r+0x94>)
 800c5d8:	9801      	ldr	r0, [sp, #4]
 800c5da:	6813      	ldr	r3, [r2, #0]
 800c5dc:	b933      	cbnz	r3, 800c5ec <_free_r+0x30>
 800c5de:	6063      	str	r3, [r4, #4]
 800c5e0:	6014      	str	r4, [r2, #0]
 800c5e2:	b003      	add	sp, #12
 800c5e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c5e8:	f7ff bf3a 	b.w	800c460 <__malloc_unlock>
 800c5ec:	42a3      	cmp	r3, r4
 800c5ee:	d908      	bls.n	800c602 <_free_r+0x46>
 800c5f0:	6825      	ldr	r5, [r4, #0]
 800c5f2:	1961      	adds	r1, r4, r5
 800c5f4:	428b      	cmp	r3, r1
 800c5f6:	bf01      	itttt	eq
 800c5f8:	6819      	ldreq	r1, [r3, #0]
 800c5fa:	685b      	ldreq	r3, [r3, #4]
 800c5fc:	1949      	addeq	r1, r1, r5
 800c5fe:	6021      	streq	r1, [r4, #0]
 800c600:	e7ed      	b.n	800c5de <_free_r+0x22>
 800c602:	461a      	mov	r2, r3
 800c604:	685b      	ldr	r3, [r3, #4]
 800c606:	b10b      	cbz	r3, 800c60c <_free_r+0x50>
 800c608:	42a3      	cmp	r3, r4
 800c60a:	d9fa      	bls.n	800c602 <_free_r+0x46>
 800c60c:	6811      	ldr	r1, [r2, #0]
 800c60e:	1855      	adds	r5, r2, r1
 800c610:	42a5      	cmp	r5, r4
 800c612:	d10b      	bne.n	800c62c <_free_r+0x70>
 800c614:	6824      	ldr	r4, [r4, #0]
 800c616:	4421      	add	r1, r4
 800c618:	1854      	adds	r4, r2, r1
 800c61a:	42a3      	cmp	r3, r4
 800c61c:	6011      	str	r1, [r2, #0]
 800c61e:	d1e0      	bne.n	800c5e2 <_free_r+0x26>
 800c620:	681c      	ldr	r4, [r3, #0]
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	6053      	str	r3, [r2, #4]
 800c626:	440c      	add	r4, r1
 800c628:	6014      	str	r4, [r2, #0]
 800c62a:	e7da      	b.n	800c5e2 <_free_r+0x26>
 800c62c:	d902      	bls.n	800c634 <_free_r+0x78>
 800c62e:	230c      	movs	r3, #12
 800c630:	6003      	str	r3, [r0, #0]
 800c632:	e7d6      	b.n	800c5e2 <_free_r+0x26>
 800c634:	6825      	ldr	r5, [r4, #0]
 800c636:	1961      	adds	r1, r4, r5
 800c638:	428b      	cmp	r3, r1
 800c63a:	bf04      	itt	eq
 800c63c:	6819      	ldreq	r1, [r3, #0]
 800c63e:	685b      	ldreq	r3, [r3, #4]
 800c640:	6063      	str	r3, [r4, #4]
 800c642:	bf04      	itt	eq
 800c644:	1949      	addeq	r1, r1, r5
 800c646:	6021      	streq	r1, [r4, #0]
 800c648:	6054      	str	r4, [r2, #4]
 800c64a:	e7ca      	b.n	800c5e2 <_free_r+0x26>
 800c64c:	b003      	add	sp, #12
 800c64e:	bd30      	pop	{r4, r5, pc}
 800c650:	20005400 	.word	0x20005400

0800c654 <_init>:
 800c654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c656:	bf00      	nop
 800c658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c65a:	bc08      	pop	{r3}
 800c65c:	469e      	mov	lr, r3
 800c65e:	4770      	bx	lr

0800c660 <_fini>:
 800c660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c662:	bf00      	nop
 800c664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c666:	bc08      	pop	{r3}
 800c668:	469e      	mov	lr, r3
 800c66a:	4770      	bx	lr
