
RTPLabs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008088  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08008218  08008218  00018218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800825c  0800825c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800825c  0800825c  0001825c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008264  08008264  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008264  08008264  00018264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008268  08008268  00018268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800826c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000050ac  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000510c  2000510c  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   00021bd8  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000049c9  00000000  00000000  00041cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001cc0  00000000  00000000  00046678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001650  00000000  00000000  00048338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004cf4  00000000  00000000  00049988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000227c3  00000000  00000000  0004e67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dd682  00000000  00000000  00070e3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007e2c  00000000  00000000  0014e4c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  001562f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008200 	.word	0x08008200

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08008200 	.word	0x08008200

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fcb1 	bl	8000e38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f81f 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f93f 	bl	800075c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004de:	f000 f885 	bl	80005ec <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e2:	f000 f8b1 	bl	8000648 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e6:	f000 f8df 	bl	80006a8 <MX_SPI1_Init>
  MX_TIM11_Init();
 80004ea:	f000 f913 	bl	8000714 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004ee:	f005 f827 	bl	8005540 <osKernelInitialize>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  //defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
  xTaskCreate(MyTask,"My Task",1000,NULL,1,NULL);
 80004f2:	2300      	movs	r3, #0
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2301      	movs	r3, #1
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2300      	movs	r3, #0
 80004fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000500:	4903      	ldr	r1, [pc, #12]	; (8000510 <main+0x44>)
 8000502:	4804      	ldr	r0, [pc, #16]	; (8000514 <main+0x48>)
 8000504:	f005 fed1 	bl	80062aa <xTaskCreate>
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  //osKernelStart();
  vTaskStartScheduler();
 8000508:	f006 f82a 	bl	8006560 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050c:	e7fe      	b.n	800050c <main+0x40>
 800050e:	bf00      	nop
 8000510:	08008224 	.word	0x08008224
 8000514:	08000959 	.word	0x08000959

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	; 0x50
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	2230      	movs	r2, #48	; 0x30
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f007 fd8c 	bl	8008044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <SystemClock_Config+0xcc>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	4a27      	ldr	r2, [pc, #156]	; (80005e4 <SystemClock_Config+0xcc>)
 8000546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054a:	6413      	str	r3, [r2, #64]	; 0x40
 800054c:	4b25      	ldr	r3, [pc, #148]	; (80005e4 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <SystemClock_Config+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <SystemClock_Config+0xd0>)
 8000562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000574:	2301      	movs	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000582:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000588:	2308      	movs	r3, #8
 800058a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800058c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000590:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000596:	2307      	movs	r3, #7
 8000598:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	4618      	mov	r0, r3
 80005a0:	f003 faae 	bl	8003b00 <HAL_RCC_OscConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005aa:	f000 f9ff 	bl	80009ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ae:	230f      	movs	r3, #15
 80005b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b2:	2302      	movs	r3, #2
 80005b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	2105      	movs	r1, #5
 80005cc:	4618      	mov	r0, r3
 80005ce:	f003 fd0f 	bl	8003ff0 <HAL_RCC_ClockConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005d8:	f000 f9e8 	bl	80009ac <Error_Handler>
  }
}
 80005dc:	bf00      	nop
 80005de:	3750      	adds	r7, #80	; 0x50
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_I2C1_Init+0x50>)
 80005f2:	4a13      	ldr	r2, [pc, #76]	; (8000640 <MX_I2C1_Init+0x54>)
 80005f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_I2C1_Init+0x50>)
 80005f8:	4a12      	ldr	r2, [pc, #72]	; (8000644 <MX_I2C1_Init+0x58>)
 80005fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_I2C1_Init+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_I2C1_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_I2C1_Init+0x50>)
 800060a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800060e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <MX_I2C1_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_I2C1_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000628:	4804      	ldr	r0, [pc, #16]	; (800063c <MX_I2C1_Init+0x50>)
 800062a:	f002 fc85 	bl	8002f38 <HAL_I2C_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000634:	f000 f9ba 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	2000007c 	.word	0x2000007c
 8000640:	40005400 	.word	0x40005400
 8000644:	000186a0 	.word	0x000186a0

08000648 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800064c:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_I2S3_Init+0x54>)
 800064e:	4a14      	ldr	r2, [pc, #80]	; (80006a0 <MX_I2S3_Init+0x58>)
 8000650:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000652:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_I2S3_Init+0x54>)
 8000654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000658:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <MX_I2S3_Init+0x54>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_I2S3_Init+0x54>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000666:	4b0d      	ldr	r3, [pc, #52]	; (800069c <MX_I2S3_Init+0x54>)
 8000668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800066c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_I2S3_Init+0x54>)
 8000670:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <MX_I2S3_Init+0x5c>)
 8000672:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_I2S3_Init+0x54>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_I2S3_Init+0x54>)
 800067c:	2200      	movs	r2, #0
 800067e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_I2S3_Init+0x54>)
 8000682:	2200      	movs	r2, #0
 8000684:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_I2S3_Init+0x54>)
 8000688:	f002 fd9a 	bl	80031c0 <HAL_I2S_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000692:	f000 f98b 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	200000d0 	.word	0x200000d0
 80006a0:	40003c00 	.word	0x40003c00
 80006a4:	00017700 	.word	0x00017700

080006a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006ac:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_SPI1_Init+0x64>)
 80006ae:	4a18      	ldr	r2, [pc, #96]	; (8000710 <MX_SPI1_Init+0x68>)
 80006b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006b2:	4b16      	ldr	r3, [pc, #88]	; (800070c <MX_SPI1_Init+0x64>)
 80006b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_SPI1_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_SPI1_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_SPI1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_SPI1_Init+0x64>)
 80006d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_SPI1_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_SPI1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_SPI1_Init+0x64>)
 80006f4:	220a      	movs	r2, #10
 80006f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_SPI1_Init+0x64>)
 80006fa:	f003 fff9 	bl	80046f0 <HAL_SPI_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000704:	f000 f952 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000118 	.word	0x20000118
 8000710:	40013000 	.word	0x40013000

08000714 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_TIM11_Init+0x40>)
 800071a:	4a0f      	ldr	r2, [pc, #60]	; (8000758 <MX_TIM11_Init+0x44>)
 800071c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <MX_TIM11_Init+0x40>)
 8000720:	2200      	movs	r2, #0
 8000722:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000724:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_TIM11_Init+0x40>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <MX_TIM11_Init+0x40>)
 800072c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000730:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_TIM11_Init+0x40>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_TIM11_Init+0x40>)
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_TIM11_Init+0x40>)
 8000740:	f004 f85f 	bl	8004802 <HAL_TIM_Base_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800074a:	f000 f92f 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000170 	.word	0x20000170
 8000758:	40014800 	.word	0x40014800

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08c      	sub	sp, #48	; 0x30
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
 8000776:	4b72      	ldr	r3, [pc, #456]	; (8000940 <MX_GPIO_Init+0x1e4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a71      	ldr	r2, [pc, #452]	; (8000940 <MX_GPIO_Init+0x1e4>)
 800077c:	f043 0310 	orr.w	r3, r3, #16
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b6f      	ldr	r3, [pc, #444]	; (8000940 <MX_GPIO_Init+0x1e4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0310 	and.w	r3, r3, #16
 800078a:	61bb      	str	r3, [r7, #24]
 800078c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
 8000792:	4b6b      	ldr	r3, [pc, #428]	; (8000940 <MX_GPIO_Init+0x1e4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a6a      	ldr	r2, [pc, #424]	; (8000940 <MX_GPIO_Init+0x1e4>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b68      	ldr	r3, [pc, #416]	; (8000940 <MX_GPIO_Init+0x1e4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
 80007ae:	4b64      	ldr	r3, [pc, #400]	; (8000940 <MX_GPIO_Init+0x1e4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a63      	ldr	r2, [pc, #396]	; (8000940 <MX_GPIO_Init+0x1e4>)
 80007b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b61      	ldr	r3, [pc, #388]	; (8000940 <MX_GPIO_Init+0x1e4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	4b5d      	ldr	r3, [pc, #372]	; (8000940 <MX_GPIO_Init+0x1e4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a5c      	ldr	r2, [pc, #368]	; (8000940 <MX_GPIO_Init+0x1e4>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b5a      	ldr	r3, [pc, #360]	; (8000940 <MX_GPIO_Init+0x1e4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	4b56      	ldr	r3, [pc, #344]	; (8000940 <MX_GPIO_Init+0x1e4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a55      	ldr	r2, [pc, #340]	; (8000940 <MX_GPIO_Init+0x1e4>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b53      	ldr	r3, [pc, #332]	; (8000940 <MX_GPIO_Init+0x1e4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b4f      	ldr	r3, [pc, #316]	; (8000940 <MX_GPIO_Init+0x1e4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a4e      	ldr	r2, [pc, #312]	; (8000940 <MX_GPIO_Init+0x1e4>)
 8000808:	f043 0308 	orr.w	r3, r3, #8
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b4c      	ldr	r3, [pc, #304]	; (8000940 <MX_GPIO_Init+0x1e4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0308 	and.w	r3, r3, #8
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2108      	movs	r1, #8
 800081e:	4849      	ldr	r0, [pc, #292]	; (8000944 <MX_GPIO_Init+0x1e8>)
 8000820:	f000 fdca 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000824:	2201      	movs	r2, #1
 8000826:	2101      	movs	r1, #1
 8000828:	4847      	ldr	r0, [pc, #284]	; (8000948 <MX_GPIO_Init+0x1ec>)
 800082a:	f000 fdc5 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800082e:	2200      	movs	r2, #0
 8000830:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000834:	4845      	ldr	r0, [pc, #276]	; (800094c <MX_GPIO_Init+0x1f0>)
 8000836:	f000 fdbf 	bl	80013b8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800083a:	2308      	movs	r3, #8
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	483c      	ldr	r0, [pc, #240]	; (8000944 <MX_GPIO_Init+0x1e8>)
 8000852:	f000 fc15 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000856:	2301      	movs	r3, #1
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4836      	ldr	r0, [pc, #216]	; (8000948 <MX_GPIO_Init+0x1ec>)
 800086e:	f000 fc07 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000872:	2308      	movs	r3, #8
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000882:	2305      	movs	r3, #5
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	482e      	ldr	r0, [pc, #184]	; (8000948 <MX_GPIO_Init+0x1ec>)
 800088e:	f000 fbf7 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000892:	2301      	movs	r3, #1
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000896:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	482a      	ldr	r0, [pc, #168]	; (8000950 <MX_GPIO_Init+0x1f4>)
 80008a8:	f000 fbea 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008ac:	2304      	movs	r3, #4
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4825      	ldr	r0, [pc, #148]	; (8000954 <MX_GPIO_Init+0x1f8>)
 80008c0:	f000 fbde 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d6:	2305      	movs	r3, #5
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	481c      	ldr	r0, [pc, #112]	; (8000954 <MX_GPIO_Init+0x1f8>)
 80008e2:	f000 fbcd 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008ea:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4813      	ldr	r0, [pc, #76]	; (800094c <MX_GPIO_Init+0x1f0>)
 8000900:	f000 fbbe 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000904:	2320      	movs	r3, #32
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	480d      	ldr	r0, [pc, #52]	; (800094c <MX_GPIO_Init+0x1f0>)
 8000918:	f000 fbb2 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800091c:	2302      	movs	r3, #2
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000920:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_GPIO_Init+0x1e8>)
 8000932:	f000 fba5 	bl	8001080 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000936:	bf00      	nop
 8000938:	3730      	adds	r7, #48	; 0x30
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	40021000 	.word	0x40021000
 8000948:	40020800 	.word	0x40020800
 800094c:	40020c00 	.word	0x40020c00
 8000950:	40020000 	.word	0x40020000
 8000954:	40020400 	.word	0x40020400

08000958 <MyTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void MyTask(void *argument)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  volatile uint32_t ul;
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8000960:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000964:	4807      	ldr	r0, [pc, #28]	; (8000984 <MyTask+0x2c>)
 8000966:	f000 fd40 	bl	80013ea <HAL_GPIO_TogglePin>
	for( ul=0; ul<mainDELAY_LOOP_COUNT; ul++)
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	e002      	b.n	8000976 <MyTask+0x1e>
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	3301      	adds	r3, #1
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800097c:	4293      	cmp	r3, r2
 800097e:	d3f7      	bcc.n	8000970 <MyTask+0x18>
	HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8000980:	e7ee      	b.n	8000960 <MyTask+0x8>
 8000982:	bf00      	nop
 8000984:	40020c00 	.word	0x40020c00

08000988 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d101      	bne.n	800099e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800099a:	f000 fa6f 	bl	8000e7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40001000 	.word	0x40001000

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <Error_Handler+0x8>
	...

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_MspInit+0x54>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	4a11      	ldr	r2, [pc, #68]	; (8000a0c <HAL_MspInit+0x54>)
 80009c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009cc:	6453      	str	r3, [r2, #68]	; 0x44
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_MspInit+0x54>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <HAL_MspInit+0x54>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <HAL_MspInit+0x54>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <HAL_MspInit+0x54>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	210f      	movs	r1, #15
 80009fa:	f06f 0001 	mvn.w	r0, #1
 80009fe:	f000 fb15 	bl	800102c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a19      	ldr	r2, [pc, #100]	; (8000a94 <HAL_I2C_MspInit+0x84>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d12c      	bne.n	8000a8c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <HAL_I2C_MspInit+0x88>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a17      	ldr	r2, [pc, #92]	; (8000a98 <HAL_I2C_MspInit+0x88>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <HAL_I2C_MspInit+0x88>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a4e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a54:	2312      	movs	r3, #18
 8000a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a60:	2304      	movs	r3, #4
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480c      	ldr	r0, [pc, #48]	; (8000a9c <HAL_I2C_MspInit+0x8c>)
 8000a6c:	f000 fb08 	bl	8001080 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <HAL_I2C_MspInit+0x88>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <HAL_I2C_MspInit+0x88>)
 8000a7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_I2C_MspInit+0x88>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	; 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40005400 	.word	0x40005400
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020400 	.word	0x40020400

08000aa0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08e      	sub	sp, #56	; 0x38
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a31      	ldr	r2, [pc, #196]	; (8000b90 <HAL_I2S_MspInit+0xf0>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d15a      	bne.n	8000b86 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ad4:	23c0      	movs	r3, #192	; 0xc0
 8000ad6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f003 fcc3 	bl	800446c <HAL_RCCEx_PeriphCLKConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000aec:	f7ff ff5e 	bl	80009ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	4b27      	ldr	r3, [pc, #156]	; (8000b94 <HAL_I2S_MspInit+0xf4>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	4a26      	ldr	r2, [pc, #152]	; (8000b94 <HAL_I2S_MspInit+0xf4>)
 8000afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000afe:	6413      	str	r3, [r2, #64]	; 0x40
 8000b00:	4b24      	ldr	r3, [pc, #144]	; (8000b94 <HAL_I2S_MspInit+0xf4>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <HAL_I2S_MspInit+0xf4>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	4a1f      	ldr	r2, [pc, #124]	; (8000b94 <HAL_I2S_MspInit+0xf4>)
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <HAL_I2S_MspInit+0xf4>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <HAL_I2S_MspInit+0xf4>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	4a18      	ldr	r2, [pc, #96]	; (8000b94 <HAL_I2S_MspInit+0xf4>)
 8000b32:	f043 0304 	orr.w	r3, r3, #4
 8000b36:	6313      	str	r3, [r2, #48]	; 0x30
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <HAL_I2S_MspInit+0xf4>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	f003 0304 	and.w	r3, r3, #4
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b44:	2310      	movs	r3, #16
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b54:	2306      	movs	r3, #6
 8000b56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	480e      	ldr	r0, [pc, #56]	; (8000b98 <HAL_I2S_MspInit+0xf8>)
 8000b60:	f000 fa8e 	bl	8001080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b64:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b76:	2306      	movs	r3, #6
 8000b78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4806      	ldr	r0, [pc, #24]	; (8000b9c <HAL_I2S_MspInit+0xfc>)
 8000b82:	f000 fa7d 	bl	8001080 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b86:	bf00      	nop
 8000b88:	3738      	adds	r7, #56	; 0x38
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40003c00 	.word	0x40003c00
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	40020800 	.word	0x40020800

08000ba0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a19      	ldr	r2, [pc, #100]	; (8000c24 <HAL_SPI_MspInit+0x84>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d12b      	bne.n	8000c1a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <HAL_SPI_MspInit+0x88>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	4a17      	ldr	r2, [pc, #92]	; (8000c28 <HAL_SPI_MspInit+0x88>)
 8000bcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_SPI_MspInit+0x88>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <HAL_SPI_MspInit+0x88>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a10      	ldr	r2, [pc, #64]	; (8000c28 <HAL_SPI_MspInit+0x88>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <HAL_SPI_MspInit+0x88>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bfa:	23e0      	movs	r3, #224	; 0xe0
 8000bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c0a:	2305      	movs	r3, #5
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <HAL_SPI_MspInit+0x8c>)
 8000c16:	f000 fa33 	bl	8001080 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c1a:	bf00      	nop
 8000c1c:	3728      	adds	r7, #40	; 0x28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40013000 	.word	0x40013000
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020000 	.word	0x40020000

08000c30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <HAL_TIM_Base_MspInit+0x3c>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d10d      	bne.n	8000c5e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <HAL_TIM_Base_MspInit+0x40>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	4a09      	ldr	r2, [pc, #36]	; (8000c70 <HAL_TIM_Base_MspInit+0x40>)
 8000c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c50:	6453      	str	r3, [r2, #68]	; 0x44
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <HAL_TIM_Base_MspInit+0x40>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40014800 	.word	0x40014800
 8000c70:	40023800 	.word	0x40023800

08000c74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08e      	sub	sp, #56	; 0x38
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	4b33      	ldr	r3, [pc, #204]	; (8000d58 <HAL_InitTick+0xe4>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	4a32      	ldr	r2, [pc, #200]	; (8000d58 <HAL_InitTick+0xe4>)
 8000c8e:	f043 0310 	orr.w	r3, r3, #16
 8000c92:	6413      	str	r3, [r2, #64]	; 0x40
 8000c94:	4b30      	ldr	r3, [pc, #192]	; (8000d58 <HAL_InitTick+0xe4>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	f003 0310 	and.w	r3, r3, #16
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ca0:	f107 0210 	add.w	r2, r7, #16
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4611      	mov	r1, r2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f003 fbac 	bl	8004408 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cb0:	6a3b      	ldr	r3, [r7, #32]
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d103      	bne.n	8000cc2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cba:	f003 fb91 	bl	80043e0 <HAL_RCC_GetPCLK1Freq>
 8000cbe:	6378      	str	r0, [r7, #52]	; 0x34
 8000cc0:	e004      	b.n	8000ccc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cc2:	f003 fb8d 	bl	80043e0 <HAL_RCC_GetPCLK1Freq>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cce:	4a23      	ldr	r2, [pc, #140]	; (8000d5c <HAL_InitTick+0xe8>)
 8000cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd4:	0c9b      	lsrs	r3, r3, #18
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cda:	4b21      	ldr	r3, [pc, #132]	; (8000d60 <HAL_InitTick+0xec>)
 8000cdc:	4a21      	ldr	r2, [pc, #132]	; (8000d64 <HAL_InitTick+0xf0>)
 8000cde:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ce0:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <HAL_InitTick+0xec>)
 8000ce2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ce6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ce8:	4a1d      	ldr	r2, [pc, #116]	; (8000d60 <HAL_InitTick+0xec>)
 8000cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cee:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <HAL_InitTick+0xec>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <HAL_InitTick+0xec>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfa:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <HAL_InitTick+0xec>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d00:	4817      	ldr	r0, [pc, #92]	; (8000d60 <HAL_InitTick+0xec>)
 8000d02:	f003 fd7e 	bl	8004802 <HAL_TIM_Base_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d11b      	bne.n	8000d4c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d14:	4812      	ldr	r0, [pc, #72]	; (8000d60 <HAL_InitTick+0xec>)
 8000d16:	f003 fdc3 	bl	80048a0 <HAL_TIM_Base_Start_IT>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d111      	bne.n	8000d4c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d28:	2036      	movs	r0, #54	; 0x36
 8000d2a:	f000 f99b 	bl	8001064 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b0f      	cmp	r3, #15
 8000d32:	d808      	bhi.n	8000d46 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d34:	2200      	movs	r2, #0
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	2036      	movs	r0, #54	; 0x36
 8000d3a:	f000 f977 	bl	800102c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <HAL_InitTick+0xf4>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	e002      	b.n	8000d4c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3738      	adds	r7, #56	; 0x38
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	431bde83 	.word	0x431bde83
 8000d60:	200001b8 	.word	0x200001b8
 8000d64:	40001000 	.word	0x40001000
 8000d68:	20000004 	.word	0x20000004

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d70:	e7fe      	b.n	8000d70 <NMI_Handler+0x4>

08000d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <MemManage_Handler+0x4>

08000d7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <TIM6_DAC_IRQHandler+0x10>)
 8000d9e:	f003 fdef 	bl	8004980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200001b8 	.word	0x200001b8

08000dac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <OTG_FS_IRQHandler+0x10>)
 8000db2:	f000 fb34 	bl	800141e <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20004bec 	.word	0x20004bec

08000dc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <SystemInit+0x20>)
 8000dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dca:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <SystemInit+0x20>)
 8000dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000de4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000de8:	f7ff ffea 	bl	8000dc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dec:	480c      	ldr	r0, [pc, #48]	; (8000e20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dee:	490d      	ldr	r1, [pc, #52]	; (8000e24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000df0:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e04:	4c0a      	ldr	r4, [pc, #40]	; (8000e30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e12:	f007 f975 	bl	8008100 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e16:	f7ff fb59 	bl	80004cc <main>
  bx  lr    
 8000e1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e24:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e28:	0800826c 	.word	0x0800826c
  ldr r2, =_sbss
 8000e2c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e30:	2000510c 	.word	0x2000510c

08000e34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e34:	e7fe      	b.n	8000e34 <ADC_IRQHandler>
	...

08000e38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e3c:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0d      	ldr	r2, [pc, #52]	; (8000e78 <HAL_Init+0x40>)
 8000e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e48:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <HAL_Init+0x40>)
 8000e4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a07      	ldr	r2, [pc, #28]	; (8000e78 <HAL_Init+0x40>)
 8000e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e60:	2003      	movs	r0, #3
 8000e62:	f000 f8d8 	bl	8001016 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e66:	200f      	movs	r0, #15
 8000e68:	f7ff ff04 	bl	8000c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e6c:	f7ff fda4 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023c00 	.word	0x40023c00

08000e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_IncTick+0x20>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x24>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <HAL_IncTick+0x24>)
 8000e8e:	6013      	str	r3, [r2, #0]
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20000200 	.word	0x20000200

08000ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <HAL_GetTick+0x14>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000200 	.word	0x20000200

08000ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eee:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	60d3      	str	r3, [r2, #12]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <__NVIC_GetPriorityGrouping+0x18>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	0a1b      	lsrs	r3, r3, #8
 8000f0e:	f003 0307 	and.w	r3, r3, #7
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	db0b      	blt.n	8000f4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	f003 021f 	and.w	r2, r3, #31
 8000f38:	4907      	ldr	r1, [pc, #28]	; (8000f58 <__NVIC_EnableIRQ+0x38>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	095b      	lsrs	r3, r3, #5
 8000f40:	2001      	movs	r0, #1
 8000f42:	fa00 f202 	lsl.w	r2, r0, r2
 8000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000e100 	.word	0xe000e100

08000f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	db0a      	blt.n	8000f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <__NVIC_SetPriority+0x4c>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	440b      	add	r3, r1
 8000f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f84:	e00a      	b.n	8000f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4908      	ldr	r1, [pc, #32]	; (8000fac <__NVIC_SetPriority+0x50>)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	3b04      	subs	r3, #4
 8000f94:	0112      	lsls	r2, r2, #4
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	440b      	add	r3, r1
 8000f9a:	761a      	strb	r2, [r3, #24]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000e100 	.word	0xe000e100
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f1c3 0307 	rsb	r3, r3, #7
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	bf28      	it	cs
 8000fce:	2304      	movcs	r3, #4
 8000fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d902      	bls.n	8000fe0 <NVIC_EncodePriority+0x30>
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3b03      	subs	r3, #3
 8000fde:	e000      	b.n	8000fe2 <NVIC_EncodePriority+0x32>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	43d9      	mvns	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	4313      	orrs	r3, r2
         );
}
 800100a:	4618      	mov	r0, r3
 800100c:	3724      	adds	r7, #36	; 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ff4c 	bl	8000ebc <__NVIC_SetPriorityGrouping>
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
 8001038:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800103e:	f7ff ff61 	bl	8000f04 <__NVIC_GetPriorityGrouping>
 8001042:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	68b9      	ldr	r1, [r7, #8]
 8001048:	6978      	ldr	r0, [r7, #20]
 800104a:	f7ff ffb1 	bl	8000fb0 <NVIC_EncodePriority>
 800104e:	4602      	mov	r2, r0
 8001050:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001054:	4611      	mov	r1, r2
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ff80 	bl	8000f5c <__NVIC_SetPriority>
}
 800105c:	bf00      	nop
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff54 	bl	8000f20 <__NVIC_EnableIRQ>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	; 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
 800109a:	e16b      	b.n	8001374 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800109c:	2201      	movs	r2, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	f040 815a 	bne.w	800136e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d005      	beq.n	80010d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d130      	bne.n	8001134 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2203      	movs	r2, #3
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68da      	ldr	r2, [r3, #12]
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001108:	2201      	movs	r2, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	091b      	lsrs	r3, r3, #4
 800111e:	f003 0201 	and.w	r2, r3, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b03      	cmp	r3, #3
 800113e:	d017      	beq.n	8001170 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d123      	bne.n	80011c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	08da      	lsrs	r2, r3, #3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3208      	adds	r2, #8
 8001184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	220f      	movs	r2, #15
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	691a      	ldr	r2, [r3, #16]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	08da      	lsrs	r2, r3, #3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3208      	adds	r2, #8
 80011be:	69b9      	ldr	r1, [r7, #24]
 80011c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2203      	movs	r2, #3
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 0203 	and.w	r2, r3, #3
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 80b4 	beq.w	800136e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b60      	ldr	r3, [pc, #384]	; (800138c <HAL_GPIO_Init+0x30c>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	4a5f      	ldr	r2, [pc, #380]	; (800138c <HAL_GPIO_Init+0x30c>)
 8001210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001214:	6453      	str	r3, [r2, #68]	; 0x44
 8001216:	4b5d      	ldr	r3, [pc, #372]	; (800138c <HAL_GPIO_Init+0x30c>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001222:	4a5b      	ldr	r2, [pc, #364]	; (8001390 <HAL_GPIO_Init+0x310>)
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	089b      	lsrs	r3, r3, #2
 8001228:	3302      	adds	r3, #2
 800122a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	220f      	movs	r2, #15
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a52      	ldr	r2, [pc, #328]	; (8001394 <HAL_GPIO_Init+0x314>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d02b      	beq.n	80012a6 <HAL_GPIO_Init+0x226>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a51      	ldr	r2, [pc, #324]	; (8001398 <HAL_GPIO_Init+0x318>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d025      	beq.n	80012a2 <HAL_GPIO_Init+0x222>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a50      	ldr	r2, [pc, #320]	; (800139c <HAL_GPIO_Init+0x31c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d01f      	beq.n	800129e <HAL_GPIO_Init+0x21e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4f      	ldr	r2, [pc, #316]	; (80013a0 <HAL_GPIO_Init+0x320>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d019      	beq.n	800129a <HAL_GPIO_Init+0x21a>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4e      	ldr	r2, [pc, #312]	; (80013a4 <HAL_GPIO_Init+0x324>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d013      	beq.n	8001296 <HAL_GPIO_Init+0x216>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4d      	ldr	r2, [pc, #308]	; (80013a8 <HAL_GPIO_Init+0x328>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d00d      	beq.n	8001292 <HAL_GPIO_Init+0x212>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4c      	ldr	r2, [pc, #304]	; (80013ac <HAL_GPIO_Init+0x32c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d007      	beq.n	800128e <HAL_GPIO_Init+0x20e>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4b      	ldr	r2, [pc, #300]	; (80013b0 <HAL_GPIO_Init+0x330>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d101      	bne.n	800128a <HAL_GPIO_Init+0x20a>
 8001286:	2307      	movs	r3, #7
 8001288:	e00e      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 800128a:	2308      	movs	r3, #8
 800128c:	e00c      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 800128e:	2306      	movs	r3, #6
 8001290:	e00a      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 8001292:	2305      	movs	r3, #5
 8001294:	e008      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 8001296:	2304      	movs	r3, #4
 8001298:	e006      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 800129a:	2303      	movs	r3, #3
 800129c:	e004      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 800129e:	2302      	movs	r3, #2
 80012a0:	e002      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 80012a6:	2300      	movs	r3, #0
 80012a8:	69fa      	ldr	r2, [r7, #28]
 80012aa:	f002 0203 	and.w	r2, r2, #3
 80012ae:	0092      	lsls	r2, r2, #2
 80012b0:	4093      	lsls	r3, r2
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b8:	4935      	ldr	r1, [pc, #212]	; (8001390 <HAL_GPIO_Init+0x310>)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	089b      	lsrs	r3, r3, #2
 80012be:	3302      	adds	r3, #2
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012c6:	4b3b      	ldr	r3, [pc, #236]	; (80013b4 <HAL_GPIO_Init+0x334>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ea:	4a32      	ldr	r2, [pc, #200]	; (80013b4 <HAL_GPIO_Init+0x334>)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f0:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <HAL_GPIO_Init+0x334>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001314:	4a27      	ldr	r2, [pc, #156]	; (80013b4 <HAL_GPIO_Init+0x334>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800131a:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <HAL_GPIO_Init+0x334>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800133e:	4a1d      	ldr	r2, [pc, #116]	; (80013b4 <HAL_GPIO_Init+0x334>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001344:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <HAL_GPIO_Init+0x334>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001368:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <HAL_GPIO_Init+0x334>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3301      	adds	r3, #1
 8001372:	61fb      	str	r3, [r7, #28]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	2b0f      	cmp	r3, #15
 8001378:	f67f ae90 	bls.w	800109c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3724      	adds	r7, #36	; 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	40013800 	.word	0x40013800
 8001394:	40020000 	.word	0x40020000
 8001398:	40020400 	.word	0x40020400
 800139c:	40020800 	.word	0x40020800
 80013a0:	40020c00 	.word	0x40020c00
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40021400 	.word	0x40021400
 80013ac:	40021800 	.word	0x40021800
 80013b0:	40021c00 	.word	0x40021c00
 80013b4:	40013c00 	.word	0x40013c00

080013b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	807b      	strh	r3, [r7, #2]
 80013c4:	4613      	mov	r3, r2
 80013c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c8:	787b      	ldrb	r3, [r7, #1]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ce:	887a      	ldrh	r2, [r7, #2]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013d4:	e003      	b.n	80013de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013d6:	887b      	ldrh	r3, [r7, #2]
 80013d8:	041a      	lsls	r2, r3, #16
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	619a      	str	r2, [r3, #24]
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b085      	sub	sp, #20
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	460b      	mov	r3, r1
 80013f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013fc:	887a      	ldrh	r2, [r7, #2]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4013      	ands	r3, r2
 8001402:	041a      	lsls	r2, r3, #16
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	43d9      	mvns	r1, r3
 8001408:	887b      	ldrh	r3, [r7, #2]
 800140a:	400b      	ands	r3, r1
 800140c:	431a      	orrs	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	619a      	str	r2, [r3, #24]
}
 8001412:	bf00      	nop
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f003 fd89 	bl	8004f4c <USB_GetMode>
 800143a:	4603      	mov	r3, r0
 800143c:	2b01      	cmp	r3, #1
 800143e:	f040 80fb 	bne.w	8001638 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f003 fd4c 	bl	8004ee4 <USB_ReadInterrupts>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 80f1 	beq.w	8001636 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f003 fd43 	bl	8004ee4 <USB_ReadInterrupts>
 800145e:	4603      	mov	r3, r0
 8001460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001464:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001468:	d104      	bne.n	8001474 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001472:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f003 fd33 	bl	8004ee4 <USB_ReadInterrupts>
 800147e:	4603      	mov	r3, r0
 8001480:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001484:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001488:	d104      	bne.n	8001494 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001492:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f003 fd23 	bl	8004ee4 <USB_ReadInterrupts>
 800149e:	4603      	mov	r3, r0
 80014a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80014a8:	d104      	bne.n	80014b4 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014b2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f003 fd13 	bl	8004ee4 <USB_ReadInterrupts>
 80014be:	4603      	mov	r3, r0
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d103      	bne.n	80014d0 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2202      	movs	r2, #2
 80014ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f003 fd05 	bl	8004ee4 <USB_ReadInterrupts>
 80014da:	4603      	mov	r3, r0
 80014dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014e4:	d120      	bne.n	8001528 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80014ee:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d113      	bne.n	8001528 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001500:	2110      	movs	r1, #16
 8001502:	6938      	ldr	r0, [r7, #16]
 8001504:	f003 fc36 	bl	8004d74 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001508:	6938      	ldr	r0, [r7, #16]
 800150a:	f003 fc65 	bl	8004dd8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	7a5b      	ldrb	r3, [r3, #9]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d105      	bne.n	8001522 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2101      	movs	r1, #1
 800151c:	4618      	mov	r0, r3
 800151e:	f003 fd23 	bl	8004f68 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f006 fcfe 	bl	8007f24 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f003 fcd9 	bl	8004ee4 <USB_ReadInterrupts>
 8001532:	4603      	mov	r3, r0
 8001534:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001538:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800153c:	d102      	bne.n	8001544 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f001 fc87 	bl	8002e52 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f003 fccb 	bl	8004ee4 <USB_ReadInterrupts>
 800154e:	4603      	mov	r3, r0
 8001550:	f003 0308 	and.w	r3, r3, #8
 8001554:	2b08      	cmp	r3, #8
 8001556:	d106      	bne.n	8001566 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f006 fcc7 	bl	8007eec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2208      	movs	r2, #8
 8001564:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f003 fcba 	bl	8004ee4 <USB_ReadInterrupts>
 8001570:	4603      	mov	r3, r0
 8001572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001576:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800157a:	d139      	bne.n	80015f0 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f003 fd2e 	bl	8004fe2 <USB_HC_ReadInterrupt>
 8001586:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	e025      	b.n	80015da <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	f003 030f 	and.w	r3, r3, #15
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	fa22 f303 	lsr.w	r3, r2, r3
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d018      	beq.n	80015d4 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	015a      	lsls	r2, r3, #5
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4413      	add	r3, r2
 80015aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015b8:	d106      	bne.n	80015c8 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	4619      	mov	r1, r3
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f859 	bl	8001678 <HCD_HC_IN_IRQHandler>
 80015c6:	e005      	b.n	80015d4 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	4619      	mov	r1, r3
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 febb 	bl	800234a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	3301      	adds	r3, #1
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	795b      	ldrb	r3, [r3, #5]
 80015de:	461a      	mov	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d3d3      	bcc.n	800158e <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f003 fc75 	bl	8004ee4 <USB_ReadInterrupts>
 80015fa:	4603      	mov	r3, r0
 80015fc:	f003 0310 	and.w	r3, r3, #16
 8001600:	2b10      	cmp	r3, #16
 8001602:	d101      	bne.n	8001608 <HAL_HCD_IRQHandler+0x1ea>
 8001604:	2301      	movs	r3, #1
 8001606:	e000      	b.n	800160a <HAL_HCD_IRQHandler+0x1ec>
 8001608:	2300      	movs	r3, #0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d014      	beq.n	8001638 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	699a      	ldr	r2, [r3, #24]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0210 	bic.w	r2, r2, #16
 800161c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f001 fb38 	bl	8002c94 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	699a      	ldr	r2, [r3, #24]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 0210 	orr.w	r2, r2, #16
 8001632:	619a      	str	r2, [r3, #24]
 8001634:	e000      	b.n	8001638 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001636:	bf00      	nop
    }
  }
}
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800164c:	2b01      	cmp	r3, #1
 800164e:	d101      	bne.n	8001654 <HAL_HCD_Stop+0x16>
 8001650:	2302      	movs	r3, #2
 8001652:	e00d      	b.n	8001670 <HAL_HCD_Stop+0x32>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f003 fdef 	bl	8005244 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	78fa      	ldrb	r2, [r7, #3]
 8001694:	4611      	mov	r1, r2
 8001696:	4618      	mov	r0, r3
 8001698:	f003 fc37 	bl	8004f0a <USB_ReadChInterrupts>
 800169c:	4603      	mov	r3, r0
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	d11a      	bne.n	80016dc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80016a6:	78fb      	ldrb	r3, [r7, #3]
 80016a8:	015a      	lsls	r2, r3, #5
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	4413      	add	r3, r2
 80016ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016b2:	461a      	mov	r2, r3
 80016b4:	2304      	movs	r3, #4
 80016b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80016b8:	78fa      	ldrb	r2, [r7, #3]
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	4613      	mov	r3, r2
 80016be:	011b      	lsls	r3, r3, #4
 80016c0:	1a9b      	subs	r3, r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	440b      	add	r3, r1
 80016c6:	334d      	adds	r3, #77	; 0x4d
 80016c8:	2207      	movs	r2, #7
 80016ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	78fa      	ldrb	r2, [r7, #3]
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f003 fc95 	bl	8005004 <USB_HC_Halt>
 80016da:	e09e      	b.n	800181a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	78fa      	ldrb	r2, [r7, #3]
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f003 fc10 	bl	8004f0a <USB_ReadChInterrupts>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016f4:	d11b      	bne.n	800172e <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80016f6:	78fb      	ldrb	r3, [r7, #3]
 80016f8:	015a      	lsls	r2, r3, #5
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	4413      	add	r3, r2
 80016fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001702:	461a      	mov	r2, r3
 8001704:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001708:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800170a:	78fa      	ldrb	r2, [r7, #3]
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	011b      	lsls	r3, r3, #4
 8001712:	1a9b      	subs	r3, r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	334d      	adds	r3, #77	; 0x4d
 800171a:	2208      	movs	r2, #8
 800171c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	78fa      	ldrb	r2, [r7, #3]
 8001724:	4611      	mov	r1, r2
 8001726:	4618      	mov	r0, r3
 8001728:	f003 fc6c 	bl	8005004 <USB_HC_Halt>
 800172c:	e075      	b.n	800181a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	78fa      	ldrb	r2, [r7, #3]
 8001734:	4611      	mov	r1, r2
 8001736:	4618      	mov	r0, r3
 8001738:	f003 fbe7 	bl	8004f0a <USB_ReadChInterrupts>
 800173c:	4603      	mov	r3, r0
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b08      	cmp	r3, #8
 8001744:	d11a      	bne.n	800177c <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	015a      	lsls	r2, r3, #5
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	4413      	add	r3, r2
 800174e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001752:	461a      	mov	r2, r3
 8001754:	2308      	movs	r3, #8
 8001756:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001758:	78fa      	ldrb	r2, [r7, #3]
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	1a9b      	subs	r3, r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	334d      	adds	r3, #77	; 0x4d
 8001768:	2206      	movs	r2, #6
 800176a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	78fa      	ldrb	r2, [r7, #3]
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f003 fc45 	bl	8005004 <USB_HC_Halt>
 800177a:	e04e      	b.n	800181a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	78fa      	ldrb	r2, [r7, #3]
 8001782:	4611      	mov	r1, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f003 fbc0 	bl	8004f0a <USB_ReadChInterrupts>
 800178a:	4603      	mov	r3, r0
 800178c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001794:	d11b      	bne.n	80017ce <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001796:	78fb      	ldrb	r3, [r7, #3]
 8001798:	015a      	lsls	r2, r3, #5
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	4413      	add	r3, r2
 800179e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017a2:	461a      	mov	r2, r3
 80017a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80017aa:	78fa      	ldrb	r2, [r7, #3]
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	011b      	lsls	r3, r3, #4
 80017b2:	1a9b      	subs	r3, r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	440b      	add	r3, r1
 80017b8:	334d      	adds	r3, #77	; 0x4d
 80017ba:	2209      	movs	r2, #9
 80017bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	78fa      	ldrb	r2, [r7, #3]
 80017c4:	4611      	mov	r1, r2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f003 fc1c 	bl	8005004 <USB_HC_Halt>
 80017cc:	e025      	b.n	800181a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	78fa      	ldrb	r2, [r7, #3]
 80017d4:	4611      	mov	r1, r2
 80017d6:	4618      	mov	r0, r3
 80017d8:	f003 fb97 	bl	8004f0a <USB_ReadChInterrupts>
 80017dc:	4603      	mov	r3, r0
 80017de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e2:	2b80      	cmp	r3, #128	; 0x80
 80017e4:	d119      	bne.n	800181a <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	015a      	lsls	r2, r3, #5
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4413      	add	r3, r2
 80017ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017f2:	461a      	mov	r2, r3
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80017f8:	78fa      	ldrb	r2, [r7, #3]
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	1a9b      	subs	r3, r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	334d      	adds	r3, #77	; 0x4d
 8001808:	2207      	movs	r2, #7
 800180a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	78fa      	ldrb	r2, [r7, #3]
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f003 fbf5 	bl	8005004 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	78fa      	ldrb	r2, [r7, #3]
 8001820:	4611      	mov	r1, r2
 8001822:	4618      	mov	r0, r3
 8001824:	f003 fb71 	bl	8004f0a <USB_ReadChInterrupts>
 8001828:	4603      	mov	r3, r0
 800182a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800182e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001832:	d112      	bne.n	800185a <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	78fa      	ldrb	r2, [r7, #3]
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f003 fbe1 	bl	8005004 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001842:	78fb      	ldrb	r3, [r7, #3]
 8001844:	015a      	lsls	r2, r3, #5
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4413      	add	r3, r2
 800184a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800184e:	461a      	mov	r2, r3
 8001850:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001854:	6093      	str	r3, [r2, #8]
 8001856:	f000 bd75 	b.w	8002344 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	78fa      	ldrb	r2, [r7, #3]
 8001860:	4611      	mov	r1, r2
 8001862:	4618      	mov	r0, r3
 8001864:	f003 fb51 	bl	8004f0a <USB_ReadChInterrupts>
 8001868:	4603      	mov	r3, r0
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b01      	cmp	r3, #1
 8001870:	f040 8128 	bne.w	8001ac4 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	015a      	lsls	r2, r3, #5
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4413      	add	r3, r2
 800187c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001880:	461a      	mov	r2, r3
 8001882:	2320      	movs	r3, #32
 8001884:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001886:	78fa      	ldrb	r2, [r7, #3]
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	1a9b      	subs	r3, r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	440b      	add	r3, r1
 8001894:	331b      	adds	r3, #27
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d119      	bne.n	80018d0 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800189c:	78fa      	ldrb	r2, [r7, #3]
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	1a9b      	subs	r3, r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	331b      	adds	r3, #27
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	015a      	lsls	r2, r3, #5
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	4413      	add	r3, r2
 80018b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	78fa      	ldrb	r2, [r7, #3]
 80018c0:	0151      	lsls	r1, r2, #5
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	440a      	add	r2, r1
 80018c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80018ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ce:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	799b      	ldrb	r3, [r3, #6]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d01b      	beq.n	8001910 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80018d8:	78fa      	ldrb	r2, [r7, #3]
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	1a9b      	subs	r3, r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	3330      	adds	r3, #48	; 0x30
 80018e8:	6819      	ldr	r1, [r3, #0]
 80018ea:	78fb      	ldrb	r3, [r7, #3]
 80018ec:	015a      	lsls	r2, r3, #5
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4413      	add	r3, r2
 80018f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018fc:	78fa      	ldrb	r2, [r7, #3]
 80018fe:	1ac9      	subs	r1, r1, r3
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4403      	add	r3, r0
 800190c:	3338      	adds	r3, #56	; 0x38
 800190e:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001910:	78fa      	ldrb	r2, [r7, #3]
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	011b      	lsls	r3, r3, #4
 8001918:	1a9b      	subs	r3, r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	440b      	add	r3, r1
 800191e:	334d      	adds	r3, #77	; 0x4d
 8001920:	2201      	movs	r2, #1
 8001922:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001924:	78fa      	ldrb	r2, [r7, #3]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	3344      	adds	r3, #68	; 0x44
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	015a      	lsls	r2, r3, #5
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4413      	add	r3, r2
 8001940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001944:	461a      	mov	r2, r3
 8001946:	2301      	movs	r3, #1
 8001948:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800194a:	78fa      	ldrb	r2, [r7, #3]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	1a9b      	subs	r3, r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	440b      	add	r3, r1
 8001958:	3326      	adds	r3, #38	; 0x26
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00a      	beq.n	8001976 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001960:	78fa      	ldrb	r2, [r7, #3]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	1a9b      	subs	r3, r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	3326      	adds	r3, #38	; 0x26
 8001970:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001972:	2b02      	cmp	r3, #2
 8001974:	d110      	bne.n	8001998 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	78fa      	ldrb	r2, [r7, #3]
 800197c:	4611      	mov	r1, r2
 800197e:	4618      	mov	r0, r3
 8001980:	f003 fb40 	bl	8005004 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001984:	78fb      	ldrb	r3, [r7, #3]
 8001986:	015a      	lsls	r2, r3, #5
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4413      	add	r3, r2
 800198c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001990:	461a      	mov	r2, r3
 8001992:	2310      	movs	r3, #16
 8001994:	6093      	str	r3, [r2, #8]
 8001996:	e03d      	b.n	8001a14 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001998:	78fa      	ldrb	r2, [r7, #3]
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	1a9b      	subs	r3, r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	3326      	adds	r3, #38	; 0x26
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	d00a      	beq.n	80019c4 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80019ae:	78fa      	ldrb	r2, [r7, #3]
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	1a9b      	subs	r3, r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	440b      	add	r3, r1
 80019bc:	3326      	adds	r3, #38	; 0x26
 80019be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d127      	bne.n	8001a14 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80019c4:	78fb      	ldrb	r3, [r7, #3]
 80019c6:	015a      	lsls	r2, r3, #5
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	4413      	add	r3, r2
 80019cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	78fa      	ldrb	r2, [r7, #3]
 80019d4:	0151      	lsls	r1, r2, #5
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	440a      	add	r2, r1
 80019da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80019e2:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80019e4:	78fa      	ldrb	r2, [r7, #3]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	1a9b      	subs	r3, r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	334c      	adds	r3, #76	; 0x4c
 80019f4:	2201      	movs	r2, #1
 80019f6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80019f8:	78fa      	ldrb	r2, [r7, #3]
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	1a9b      	subs	r3, r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	334c      	adds	r3, #76	; 0x4c
 8001a08:	781a      	ldrb	r2, [r3, #0]
 8001a0a:	78fb      	ldrb	r3, [r7, #3]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f006 fa96 	bl	8007f40 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	799b      	ldrb	r3, [r3, #6]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d13b      	bne.n	8001a94 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001a1c:	78fa      	ldrb	r2, [r7, #3]
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	1a9b      	subs	r3, r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	3338      	adds	r3, #56	; 0x38
 8001a2c:	6819      	ldr	r1, [r3, #0]
 8001a2e:	78fa      	ldrb	r2, [r7, #3]
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	011b      	lsls	r3, r3, #4
 8001a36:	1a9b      	subs	r3, r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4403      	add	r3, r0
 8001a3c:	3328      	adds	r3, #40	; 0x28
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	440b      	add	r3, r1
 8001a42:	1e59      	subs	r1, r3, #1
 8001a44:	78fa      	ldrb	r2, [r7, #3]
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	011b      	lsls	r3, r3, #4
 8001a4c:	1a9b      	subs	r3, r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4403      	add	r3, r0
 8001a52:	3328      	adds	r3, #40	; 0x28
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 8470 	beq.w	8002344 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001a64:	78fa      	ldrb	r2, [r7, #3]
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	1a9b      	subs	r3, r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	333c      	adds	r3, #60	; 0x3c
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	78fa      	ldrb	r2, [r7, #3]
 8001a78:	f083 0301 	eor.w	r3, r3, #1
 8001a7c:	b2d8      	uxtb	r0, r3
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	4613      	mov	r3, r2
 8001a82:	011b      	lsls	r3, r3, #4
 8001a84:	1a9b      	subs	r3, r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	333c      	adds	r3, #60	; 0x3c
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	701a      	strb	r2, [r3, #0]
 8001a90:	f000 bc58 	b.w	8002344 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001a94:	78fa      	ldrb	r2, [r7, #3]
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	1a9b      	subs	r3, r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	333c      	adds	r3, #60	; 0x3c
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	78fa      	ldrb	r2, [r7, #3]
 8001aa8:	f083 0301 	eor.w	r3, r3, #1
 8001aac:	b2d8      	uxtb	r0, r3
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	011b      	lsls	r3, r3, #4
 8001ab4:	1a9b      	subs	r3, r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	333c      	adds	r3, #60	; 0x3c
 8001abc:	4602      	mov	r2, r0
 8001abe:	701a      	strb	r2, [r3, #0]
 8001ac0:	f000 bc40 	b.w	8002344 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	78fa      	ldrb	r2, [r7, #3]
 8001aca:	4611      	mov	r1, r2
 8001acc:	4618      	mov	r0, r3
 8001ace:	f003 fa1c 	bl	8004f0a <USB_ReadChInterrupts>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f003 0320 	and.w	r3, r3, #32
 8001ad8:	2b20      	cmp	r3, #32
 8001ada:	d131      	bne.n	8001b40 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	015a      	lsls	r2, r3, #5
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae8:	461a      	mov	r2, r3
 8001aea:	2320      	movs	r3, #32
 8001aec:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8001aee:	78fa      	ldrb	r2, [r7, #3]
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	011b      	lsls	r3, r3, #4
 8001af6:	1a9b      	subs	r3, r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	440b      	add	r3, r1
 8001afc:	331a      	adds	r3, #26
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	f040 841f 	bne.w	8002344 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8001b06:	78fa      	ldrb	r2, [r7, #3]
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	011b      	lsls	r3, r3, #4
 8001b0e:	1a9b      	subs	r3, r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	440b      	add	r3, r1
 8001b14:	331b      	adds	r3, #27
 8001b16:	2201      	movs	r2, #1
 8001b18:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001b1a:	78fa      	ldrb	r2, [r7, #3]
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	1a9b      	subs	r3, r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	440b      	add	r3, r1
 8001b28:	334d      	adds	r3, #77	; 0x4d
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	78fa      	ldrb	r2, [r7, #3]
 8001b34:	4611      	mov	r1, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 fa64 	bl	8005004 <USB_HC_Halt>
 8001b3c:	f000 bc02 	b.w	8002344 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	78fa      	ldrb	r2, [r7, #3]
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f003 f9de 	bl	8004f0a <USB_ReadChInterrupts>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	f040 8305 	bne.w	8002164 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001b5a:	78fb      	ldrb	r3, [r7, #3]
 8001b5c:	015a      	lsls	r2, r3, #5
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4413      	add	r3, r2
 8001b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b66:	461a      	mov	r2, r3
 8001b68:	2302      	movs	r3, #2
 8001b6a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001b6c:	78fa      	ldrb	r2, [r7, #3]
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	1a9b      	subs	r3, r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	334d      	adds	r3, #77	; 0x4d
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d114      	bne.n	8001bac <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001b82:	78fa      	ldrb	r2, [r7, #3]
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	011b      	lsls	r3, r3, #4
 8001b8a:	1a9b      	subs	r3, r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	440b      	add	r3, r1
 8001b90:	334d      	adds	r3, #77	; 0x4d
 8001b92:	2202      	movs	r2, #2
 8001b94:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001b96:	78fa      	ldrb	r2, [r7, #3]
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	011b      	lsls	r3, r3, #4
 8001b9e:	1a9b      	subs	r3, r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	334c      	adds	r3, #76	; 0x4c
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]
 8001baa:	e2cc      	b.n	8002146 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001bac:	78fa      	ldrb	r2, [r7, #3]
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	1a9b      	subs	r3, r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	334d      	adds	r3, #77	; 0x4d
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b06      	cmp	r3, #6
 8001bc0:	d114      	bne.n	8001bec <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001bc2:	78fa      	ldrb	r2, [r7, #3]
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	011b      	lsls	r3, r3, #4
 8001bca:	1a9b      	subs	r3, r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	334d      	adds	r3, #77	; 0x4d
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8001bd6:	78fa      	ldrb	r2, [r7, #3]
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	011b      	lsls	r3, r3, #4
 8001bde:	1a9b      	subs	r3, r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	440b      	add	r3, r1
 8001be4:	334c      	adds	r3, #76	; 0x4c
 8001be6:	2205      	movs	r2, #5
 8001be8:	701a      	strb	r2, [r3, #0]
 8001bea:	e2ac      	b.n	8002146 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001bec:	78fa      	ldrb	r2, [r7, #3]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	1a9b      	subs	r3, r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	334d      	adds	r3, #77	; 0x4d
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b07      	cmp	r3, #7
 8001c00:	d00b      	beq.n	8001c1a <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001c02:	78fa      	ldrb	r2, [r7, #3]
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	1a9b      	subs	r3, r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	334d      	adds	r3, #77	; 0x4d
 8001c12:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001c14:	2b09      	cmp	r3, #9
 8001c16:	f040 80a6 	bne.w	8001d66 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001c1a:	78fa      	ldrb	r2, [r7, #3]
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	1a9b      	subs	r3, r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	440b      	add	r3, r1
 8001c28:	334d      	adds	r3, #77	; 0x4d
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001c2e:	78fa      	ldrb	r2, [r7, #3]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	1a9b      	subs	r3, r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	3344      	adds	r3, #68	; 0x44
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	1c59      	adds	r1, r3, #1
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	1a9b      	subs	r3, r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4403      	add	r3, r0
 8001c4e:	3344      	adds	r3, #68	; 0x44
 8001c50:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001c52:	78fa      	ldrb	r2, [r7, #3]
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	1a9b      	subs	r3, r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	440b      	add	r3, r1
 8001c60:	3344      	adds	r3, #68	; 0x44
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d943      	bls.n	8001cf0 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001c68:	78fa      	ldrb	r2, [r7, #3]
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	1a9b      	subs	r3, r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	3344      	adds	r3, #68	; 0x44
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8001c7c:	78fa      	ldrb	r2, [r7, #3]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	011b      	lsls	r3, r3, #4
 8001c84:	1a9b      	subs	r3, r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	331a      	adds	r3, #26
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d123      	bne.n	8001cda <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8001c92:	78fa      	ldrb	r2, [r7, #3]
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	011b      	lsls	r3, r3, #4
 8001c9a:	1a9b      	subs	r3, r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	331b      	adds	r3, #27
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8001ca6:	78fa      	ldrb	r2, [r7, #3]
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	1a9b      	subs	r3, r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	331c      	adds	r3, #28
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001cba:	78fb      	ldrb	r3, [r7, #3]
 8001cbc:	015a      	lsls	r2, r3, #5
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	78fa      	ldrb	r2, [r7, #3]
 8001cca:	0151      	lsls	r1, r2, #5
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	440a      	add	r2, r1
 8001cd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd8:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001cda:	78fa      	ldrb	r2, [r7, #3]
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	011b      	lsls	r3, r3, #4
 8001ce2:	1a9b      	subs	r3, r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	334c      	adds	r3, #76	; 0x4c
 8001cea:	2204      	movs	r2, #4
 8001cec:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001cee:	e229      	b.n	8002144 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001cf0:	78fa      	ldrb	r2, [r7, #3]
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	011b      	lsls	r3, r3, #4
 8001cf8:	1a9b      	subs	r3, r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	334c      	adds	r3, #76	; 0x4c
 8001d00:	2202      	movs	r2, #2
 8001d02:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001d04:	78fa      	ldrb	r2, [r7, #3]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	1a9b      	subs	r3, r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	3326      	adds	r3, #38	; 0x26
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00b      	beq.n	8001d32 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001d1a:	78fa      	ldrb	r2, [r7, #3]
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	011b      	lsls	r3, r3, #4
 8001d22:	1a9b      	subs	r3, r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	440b      	add	r3, r1
 8001d28:	3326      	adds	r3, #38	; 0x26
 8001d2a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	f040 8209 	bne.w	8002144 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	015a      	lsls	r2, r3, #5
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4413      	add	r3, r2
 8001d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001d48:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d50:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	015a      	lsls	r2, r3, #5
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4413      	add	r3, r2
 8001d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001d64:	e1ee      	b.n	8002144 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8001d66:	78fa      	ldrb	r2, [r7, #3]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	011b      	lsls	r3, r3, #4
 8001d6e:	1a9b      	subs	r3, r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	334d      	adds	r3, #77	; 0x4d
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b05      	cmp	r3, #5
 8001d7a:	f040 80c8 	bne.w	8001f0e <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001d7e:	78fa      	ldrb	r2, [r7, #3]
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	011b      	lsls	r3, r3, #4
 8001d86:	1a9b      	subs	r3, r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	334d      	adds	r3, #77	; 0x4d
 8001d8e:	2202      	movs	r2, #2
 8001d90:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001d92:	78fa      	ldrb	r2, [r7, #3]
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	011b      	lsls	r3, r3, #4
 8001d9a:	1a9b      	subs	r3, r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	440b      	add	r3, r1
 8001da0:	331b      	adds	r3, #27
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	f040 81ce 	bne.w	8002146 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001daa:	78fa      	ldrb	r2, [r7, #3]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	1a9b      	subs	r3, r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	440b      	add	r3, r1
 8001db8:	3326      	adds	r3, #38	; 0x26
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d16b      	bne.n	8001e98 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8001dc0:	78fa      	ldrb	r2, [r7, #3]
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	1a9b      	subs	r3, r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	3348      	adds	r3, #72	; 0x48
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	1c59      	adds	r1, r3, #1
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	011b      	lsls	r3, r3, #4
 8001dda:	1a9b      	subs	r3, r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4403      	add	r3, r0
 8001de0:	3348      	adds	r3, #72	; 0x48
 8001de2:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8001de4:	78fa      	ldrb	r2, [r7, #3]
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	4613      	mov	r3, r2
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	1a9b      	subs	r3, r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	3348      	adds	r3, #72	; 0x48
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d943      	bls.n	8001e82 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8001dfa:	78fa      	ldrb	r2, [r7, #3]
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	011b      	lsls	r3, r3, #4
 8001e02:	1a9b      	subs	r3, r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	440b      	add	r3, r1
 8001e08:	3348      	adds	r3, #72	; 0x48
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8001e0e:	78fa      	ldrb	r2, [r7, #3]
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	4613      	mov	r3, r2
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	1a9b      	subs	r3, r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	331b      	adds	r3, #27
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8001e22:	78fa      	ldrb	r2, [r7, #3]
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	011b      	lsls	r3, r3, #4
 8001e2a:	1a9b      	subs	r3, r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	440b      	add	r3, r1
 8001e30:	3344      	adds	r3, #68	; 0x44
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d809      	bhi.n	8001e4c <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8001e38:	78fa      	ldrb	r2, [r7, #3]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	011b      	lsls	r3, r3, #4
 8001e40:	1a9b      	subs	r3, r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	331c      	adds	r3, #28
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	015a      	lsls	r2, r3, #5
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4413      	add	r3, r2
 8001e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	78fa      	ldrb	r2, [r7, #3]
 8001e5c:	0151      	lsls	r1, r2, #5
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	440a      	add	r2, r1
 8001e62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e6a:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8001e6c:	78fa      	ldrb	r2, [r7, #3]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	011b      	lsls	r3, r3, #4
 8001e74:	1a9b      	subs	r3, r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	334c      	adds	r3, #76	; 0x4c
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	701a      	strb	r2, [r3, #0]
 8001e80:	e014      	b.n	8001eac <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001e82:	78fa      	ldrb	r2, [r7, #3]
 8001e84:	6879      	ldr	r1, [r7, #4]
 8001e86:	4613      	mov	r3, r2
 8001e88:	011b      	lsls	r3, r3, #4
 8001e8a:	1a9b      	subs	r3, r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	440b      	add	r3, r1
 8001e90:	334c      	adds	r3, #76	; 0x4c
 8001e92:	2202      	movs	r2, #2
 8001e94:	701a      	strb	r2, [r3, #0]
 8001e96:	e009      	b.n	8001eac <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001e98:	78fa      	ldrb	r2, [r7, #3]
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	011b      	lsls	r3, r3, #4
 8001ea0:	1a9b      	subs	r3, r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	334c      	adds	r3, #76	; 0x4c
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001eac:	78fa      	ldrb	r2, [r7, #3]
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	011b      	lsls	r3, r3, #4
 8001eb4:	1a9b      	subs	r3, r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	3326      	adds	r3, #38	; 0x26
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00b      	beq.n	8001eda <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001ec2:	78fa      	ldrb	r2, [r7, #3]
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	011b      	lsls	r3, r3, #4
 8001eca:	1a9b      	subs	r3, r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	440b      	add	r3, r1
 8001ed0:	3326      	adds	r3, #38	; 0x26
 8001ed2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	f040 8136 	bne.w	8002146 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	015a      	lsls	r2, r3, #5
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001ef0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ef8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001efa:	78fb      	ldrb	r3, [r7, #3]
 8001efc:	015a      	lsls	r2, r3, #5
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f06:	461a      	mov	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	e11b      	b.n	8002146 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8001f0e:	78fa      	ldrb	r2, [r7, #3]
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	011b      	lsls	r3, r3, #4
 8001f16:	1a9b      	subs	r3, r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	334d      	adds	r3, #77	; 0x4d
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	f040 8081 	bne.w	8002028 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001f26:	78fa      	ldrb	r2, [r7, #3]
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	1a9b      	subs	r3, r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	440b      	add	r3, r1
 8001f34:	334d      	adds	r3, #77	; 0x4d
 8001f36:	2202      	movs	r2, #2
 8001f38:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001f3a:	78fa      	ldrb	r2, [r7, #3]
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	1a9b      	subs	r3, r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	440b      	add	r3, r1
 8001f48:	331b      	adds	r3, #27
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	f040 80fa 	bne.w	8002146 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001f52:	78fa      	ldrb	r2, [r7, #3]
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	011b      	lsls	r3, r3, #4
 8001f5a:	1a9b      	subs	r3, r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	440b      	add	r3, r1
 8001f60:	334c      	adds	r3, #76	; 0x4c
 8001f62:	2202      	movs	r2, #2
 8001f64:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	78fa      	ldrb	r2, [r7, #3]
 8001f76:	0151      	lsls	r1, r2, #5
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	440a      	add	r2, r1
 8001f7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f84:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8001f86:	78fb      	ldrb	r3, [r7, #3]
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	78fa      	ldrb	r2, [r7, #3]
 8001f96:	0151      	lsls	r1, r2, #5
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	440a      	add	r2, r1
 8001f9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fa4:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	015a      	lsls	r2, r3, #5
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	78fa      	ldrb	r2, [r7, #3]
 8001fb6:	0151      	lsls	r1, r2, #5
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	440a      	add	r2, r1
 8001fbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fc0:	f023 0320 	bic.w	r3, r3, #32
 8001fc4:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001fc6:	78fa      	ldrb	r2, [r7, #3]
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	1a9b      	subs	r3, r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	3326      	adds	r3, #38	; 0x26
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00b      	beq.n	8001ff4 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001fdc:	78fa      	ldrb	r2, [r7, #3]
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	1a9b      	subs	r3, r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	3326      	adds	r3, #38	; 0x26
 8001fec:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	f040 80a9 	bne.w	8002146 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001ff4:	78fb      	ldrb	r3, [r7, #3]
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800200a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002012:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	015a      	lsls	r2, r3, #5
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4413      	add	r3, r2
 800201c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002020:	461a      	mov	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	e08e      	b.n	8002146 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002028:	78fa      	ldrb	r2, [r7, #3]
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	011b      	lsls	r3, r3, #4
 8002030:	1a9b      	subs	r3, r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	334d      	adds	r3, #77	; 0x4d
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b04      	cmp	r3, #4
 800203c:	d143      	bne.n	80020c6 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800203e:	78fa      	ldrb	r2, [r7, #3]
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	4613      	mov	r3, r2
 8002044:	011b      	lsls	r3, r3, #4
 8002046:	1a9b      	subs	r3, r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	440b      	add	r3, r1
 800204c:	334d      	adds	r3, #77	; 0x4d
 800204e:	2202      	movs	r2, #2
 8002050:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002052:	78fa      	ldrb	r2, [r7, #3]
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	1a9b      	subs	r3, r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	334c      	adds	r3, #76	; 0x4c
 8002062:	2202      	movs	r2, #2
 8002064:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002066:	78fa      	ldrb	r2, [r7, #3]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	3326      	adds	r3, #38	; 0x26
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00a      	beq.n	8002092 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800207c:	78fa      	ldrb	r2, [r7, #3]
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	3326      	adds	r3, #38	; 0x26
 800208c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800208e:	2b02      	cmp	r3, #2
 8002090:	d159      	bne.n	8002146 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	015a      	lsls	r2, r3, #5
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4413      	add	r3, r2
 800209a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020a8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020b0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80020b2:	78fb      	ldrb	r3, [r7, #3]
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020be:	461a      	mov	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	e03f      	b.n	8002146 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80020c6:	78fa      	ldrb	r2, [r7, #3]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	1a9b      	subs	r3, r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	334d      	adds	r3, #77	; 0x4d
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d126      	bne.n	800212a <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80020dc:	78fa      	ldrb	r2, [r7, #3]
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	011b      	lsls	r3, r3, #4
 80020e4:	1a9b      	subs	r3, r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	334d      	adds	r3, #77	; 0x4d
 80020ec:	2202      	movs	r2, #2
 80020ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80020f0:	78fa      	ldrb	r2, [r7, #3]
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	1a9b      	subs	r3, r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	3344      	adds	r3, #68	; 0x44
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	1c59      	adds	r1, r3, #1
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4403      	add	r3, r0
 8002110:	3344      	adds	r3, #68	; 0x44
 8002112:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002114:	78fa      	ldrb	r2, [r7, #3]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	1a9b      	subs	r3, r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	334c      	adds	r3, #76	; 0x4c
 8002124:	2204      	movs	r2, #4
 8002126:	701a      	strb	r2, [r3, #0]
 8002128:	e00d      	b.n	8002146 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	334d      	adds	r3, #77	; 0x4d
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b02      	cmp	r3, #2
 800213e:	f000 8100 	beq.w	8002342 <HCD_HC_IN_IRQHandler+0xcca>
 8002142:	e000      	b.n	8002146 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002144:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002146:	78fa      	ldrb	r2, [r7, #3]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	1a9b      	subs	r3, r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	334c      	adds	r3, #76	; 0x4c
 8002156:	781a      	ldrb	r2, [r3, #0]
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	4619      	mov	r1, r3
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f005 feef 	bl	8007f40 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002162:	e0ef      	b.n	8002344 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	78fa      	ldrb	r2, [r7, #3]
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f002 fecc 	bl	8004f0a <USB_ReadChInterrupts>
 8002172:	4603      	mov	r3, r0
 8002174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002178:	2b40      	cmp	r3, #64	; 0x40
 800217a:	d12f      	bne.n	80021dc <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	015a      	lsls	r2, r3, #5
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4413      	add	r3, r2
 8002184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002188:	461a      	mov	r2, r3
 800218a:	2340      	movs	r3, #64	; 0x40
 800218c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	1a9b      	subs	r3, r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	334d      	adds	r3, #77	; 0x4d
 800219e:	2205      	movs	r2, #5
 80021a0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80021a2:	78fa      	ldrb	r2, [r7, #3]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	1a9b      	subs	r3, r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	331a      	adds	r3, #26
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d109      	bne.n	80021cc <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80021b8:	78fa      	ldrb	r2, [r7, #3]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	011b      	lsls	r3, r3, #4
 80021c0:	1a9b      	subs	r3, r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	3344      	adds	r3, #68	; 0x44
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	78fa      	ldrb	r2, [r7, #3]
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f002 ff15 	bl	8005004 <USB_HC_Halt>
 80021da:	e0b3      	b.n	8002344 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	78fa      	ldrb	r2, [r7, #3]
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f002 fe90 	bl	8004f0a <USB_ReadChInterrupts>
 80021ea:	4603      	mov	r3, r0
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	2b10      	cmp	r3, #16
 80021f2:	f040 80a7 	bne.w	8002344 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80021f6:	78fa      	ldrb	r2, [r7, #3]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	3326      	adds	r3, #38	; 0x26
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b03      	cmp	r3, #3
 800220a:	d11b      	bne.n	8002244 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	3344      	adds	r3, #68	; 0x44
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002220:	78fa      	ldrb	r2, [r7, #3]
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	011b      	lsls	r3, r3, #4
 8002228:	1a9b      	subs	r3, r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	334d      	adds	r3, #77	; 0x4d
 8002230:	2204      	movs	r2, #4
 8002232:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	78fa      	ldrb	r2, [r7, #3]
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f002 fee1 	bl	8005004 <USB_HC_Halt>
 8002242:	e03f      	b.n	80022c4 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002244:	78fa      	ldrb	r2, [r7, #3]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	1a9b      	subs	r3, r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	3326      	adds	r3, #38	; 0x26
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00a      	beq.n	8002270 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800225a:	78fa      	ldrb	r2, [r7, #3]
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	1a9b      	subs	r3, r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	3326      	adds	r3, #38	; 0x26
 800226a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800226c:	2b02      	cmp	r3, #2
 800226e:	d129      	bne.n	80022c4 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002270:	78fa      	ldrb	r2, [r7, #3]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	011b      	lsls	r3, r3, #4
 8002278:	1a9b      	subs	r3, r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	3344      	adds	r3, #68	; 0x44
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	799b      	ldrb	r3, [r3, #6]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00a      	beq.n	80022a2 <HCD_HC_IN_IRQHandler+0xc2a>
 800228c:	78fa      	ldrb	r2, [r7, #3]
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	1a9b      	subs	r3, r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	331b      	adds	r3, #27
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d110      	bne.n	80022c4 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80022a2:	78fa      	ldrb	r2, [r7, #3]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	1a9b      	subs	r3, r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	334d      	adds	r3, #77	; 0x4d
 80022b2:	2204      	movs	r2, #4
 80022b4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	78fa      	ldrb	r2, [r7, #3]
 80022bc:	4611      	mov	r1, r2
 80022be:	4618      	mov	r0, r3
 80022c0:	f002 fea0 	bl	8005004 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	331b      	adds	r3, #27
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d129      	bne.n	800232e <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	1a9b      	subs	r3, r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	331b      	adds	r3, #27
 80022ea:	2200      	movs	r2, #0
 80022ec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	78fa      	ldrb	r2, [r7, #3]
 80022fe:	0151      	lsls	r1, r2, #5
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	440a      	add	r2, r1
 8002304:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230c:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800230e:	78fb      	ldrb	r3, [r7, #3]
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4413      	add	r3, r2
 8002316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	78fa      	ldrb	r2, [r7, #3]
 800231e:	0151      	lsls	r1, r2, #5
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	440a      	add	r2, r1
 8002324:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002328:	f043 0320 	orr.w	r3, r3, #32
 800232c:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800232e:	78fb      	ldrb	r3, [r7, #3]
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4413      	add	r3, r2
 8002336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233a:	461a      	mov	r2, r3
 800233c:	2310      	movs	r3, #16
 800233e:	6093      	str	r3, [r2, #8]
 8002340:	e000      	b.n	8002344 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002342:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b086      	sub	sp, #24
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	460b      	mov	r3, r1
 8002354:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	78fa      	ldrb	r2, [r7, #3]
 8002366:	4611      	mov	r1, r2
 8002368:	4618      	mov	r0, r3
 800236a:	f002 fdce 	bl	8004f0a <USB_ReadChInterrupts>
 800236e:	4603      	mov	r3, r0
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b04      	cmp	r3, #4
 8002376:	d11b      	bne.n	80023b0 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	015a      	lsls	r2, r3, #5
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4413      	add	r3, r2
 8002380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002384:	461a      	mov	r2, r3
 8002386:	2304      	movs	r3, #4
 8002388:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800238a:	78fa      	ldrb	r2, [r7, #3]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	334d      	adds	r3, #77	; 0x4d
 800239a:	2207      	movs	r2, #7
 800239c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	78fa      	ldrb	r2, [r7, #3]
 80023a4:	4611      	mov	r1, r2
 80023a6:	4618      	mov	r0, r3
 80023a8:	f002 fe2c 	bl	8005004 <USB_HC_Halt>
 80023ac:	f000 bc6f 	b.w	8002c8e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	4611      	mov	r1, r2
 80023b8:	4618      	mov	r0, r3
 80023ba:	f002 fda6 	bl	8004f0a <USB_ReadChInterrupts>
 80023be:	4603      	mov	r3, r0
 80023c0:	f003 0320 	and.w	r3, r3, #32
 80023c4:	2b20      	cmp	r3, #32
 80023c6:	f040 8082 	bne.w	80024ce <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80023ca:	78fb      	ldrb	r3, [r7, #3]
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d6:	461a      	mov	r2, r3
 80023d8:	2320      	movs	r3, #32
 80023da:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	3319      	adds	r3, #25
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d124      	bne.n	800243c <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80023f2:	78fa      	ldrb	r2, [r7, #3]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	1a9b      	subs	r3, r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	3319      	adds	r3, #25
 8002402:	2200      	movs	r2, #0
 8002404:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002406:	78fa      	ldrb	r2, [r7, #3]
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	1a9b      	subs	r3, r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	334c      	adds	r3, #76	; 0x4c
 8002416:	2202      	movs	r2, #2
 8002418:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800241a:	78fa      	ldrb	r2, [r7, #3]
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	1a9b      	subs	r3, r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	440b      	add	r3, r1
 8002428:	334d      	adds	r3, #77	; 0x4d
 800242a:	2203      	movs	r2, #3
 800242c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	78fa      	ldrb	r2, [r7, #3]
 8002434:	4611      	mov	r1, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f002 fde4 	bl	8005004 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	1a9b      	subs	r3, r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	331a      	adds	r3, #26
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b01      	cmp	r3, #1
 8002450:	f040 841d 	bne.w	8002c8e <HCD_HC_OUT_IRQHandler+0x944>
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	331b      	adds	r3, #27
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	f040 8411 	bne.w	8002c8e <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800246c:	78fa      	ldrb	r2, [r7, #3]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	3326      	adds	r3, #38	; 0x26
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d009      	beq.n	8002496 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002482:	78fa      	ldrb	r2, [r7, #3]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	331b      	adds	r3, #27
 8002492:	2201      	movs	r2, #1
 8002494:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002496:	78fa      	ldrb	r2, [r7, #3]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	334d      	adds	r3, #77	; 0x4d
 80024a6:	2203      	movs	r2, #3
 80024a8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	78fa      	ldrb	r2, [r7, #3]
 80024b0:	4611      	mov	r1, r2
 80024b2:	4618      	mov	r0, r3
 80024b4:	f002 fda6 	bl	8005004 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	3344      	adds	r3, #68	; 0x44
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	e3df      	b.n	8002c8e <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	78fa      	ldrb	r2, [r7, #3]
 80024d4:	4611      	mov	r1, r2
 80024d6:	4618      	mov	r0, r3
 80024d8:	f002 fd17 	bl	8004f0a <USB_ReadChInterrupts>
 80024dc:	4603      	mov	r3, r0
 80024de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024e6:	d111      	bne.n	800250c <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f4:	461a      	mov	r2, r3
 80024f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024fa:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	78fa      	ldrb	r2, [r7, #3]
 8002502:	4611      	mov	r1, r2
 8002504:	4618      	mov	r0, r3
 8002506:	f002 fd7d 	bl	8005004 <USB_HC_Halt>
 800250a:	e3c0      	b.n	8002c8e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	4611      	mov	r1, r2
 8002514:	4618      	mov	r0, r3
 8002516:	f002 fcf8 	bl	8004f0a <USB_ReadChInterrupts>
 800251a:	4603      	mov	r3, r0
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b01      	cmp	r3, #1
 8002522:	d168      	bne.n	80025f6 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	3344      	adds	r3, #68	; 0x44
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	78fa      	ldrb	r2, [r7, #3]
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f002 fce2 	bl	8004f0a <USB_ReadChInterrupts>
 8002546:	4603      	mov	r3, r0
 8002548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254c:	2b40      	cmp	r3, #64	; 0x40
 800254e:	d112      	bne.n	8002576 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	3319      	adds	r3, #25
 8002560:	2201      	movs	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002564:	78fb      	ldrb	r3, [r7, #3]
 8002566:	015a      	lsls	r2, r3, #5
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	4413      	add	r3, r2
 800256c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002570:	461a      	mov	r2, r3
 8002572:	2340      	movs	r3, #64	; 0x40
 8002574:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002576:	78fa      	ldrb	r2, [r7, #3]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	1a9b      	subs	r3, r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	331b      	adds	r3, #27
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d019      	beq.n	80025c0 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800258c:	78fa      	ldrb	r2, [r7, #3]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	331b      	adds	r3, #27
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80025a0:	78fb      	ldrb	r3, [r7, #3]
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	78fa      	ldrb	r2, [r7, #3]
 80025b0:	0151      	lsls	r1, r2, #5
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	440a      	add	r2, r1
 80025b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025be:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	015a      	lsls	r2, r3, #5
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025cc:	461a      	mov	r2, r3
 80025ce:	2301      	movs	r3, #1
 80025d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80025d2:	78fa      	ldrb	r2, [r7, #3]
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	1a9b      	subs	r3, r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	334d      	adds	r3, #77	; 0x4d
 80025e2:	2201      	movs	r2, #1
 80025e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	78fa      	ldrb	r2, [r7, #3]
 80025ec:	4611      	mov	r1, r2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f002 fd08 	bl	8005004 <USB_HC_Halt>
 80025f4:	e34b      	b.n	8002c8e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	78fa      	ldrb	r2, [r7, #3]
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f002 fc83 	bl	8004f0a <USB_ReadChInterrupts>
 8002604:	4603      	mov	r3, r0
 8002606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260a:	2b40      	cmp	r3, #64	; 0x40
 800260c:	d139      	bne.n	8002682 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800260e:	78fa      	ldrb	r2, [r7, #3]
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	1a9b      	subs	r3, r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	334d      	adds	r3, #77	; 0x4d
 800261e:	2205      	movs	r2, #5
 8002620:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002622:	78fa      	ldrb	r2, [r7, #3]
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	331a      	adds	r3, #26
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d109      	bne.n	800264c <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002638:	78fa      	ldrb	r2, [r7, #3]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	011b      	lsls	r3, r3, #4
 8002640:	1a9b      	subs	r3, r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	3319      	adds	r3, #25
 8002648:	2201      	movs	r2, #1
 800264a:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800264c:	78fa      	ldrb	r2, [r7, #3]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	3344      	adds	r3, #68	; 0x44
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	78fa      	ldrb	r2, [r7, #3]
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f002 fccb 	bl	8005004 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800266e:	78fb      	ldrb	r3, [r7, #3]
 8002670:	015a      	lsls	r2, r3, #5
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4413      	add	r3, r2
 8002676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267a:	461a      	mov	r2, r3
 800267c:	2340      	movs	r3, #64	; 0x40
 800267e:	6093      	str	r3, [r2, #8]
 8002680:	e305      	b.n	8002c8e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f002 fc3d 	bl	8004f0a <USB_ReadChInterrupts>
 8002690:	4603      	mov	r3, r0
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b08      	cmp	r3, #8
 8002698:	d11a      	bne.n	80026d0 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800269a:	78fb      	ldrb	r3, [r7, #3]
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a6:	461a      	mov	r2, r3
 80026a8:	2308      	movs	r3, #8
 80026aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	1a9b      	subs	r3, r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	334d      	adds	r3, #77	; 0x4d
 80026bc:	2206      	movs	r2, #6
 80026be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	78fa      	ldrb	r2, [r7, #3]
 80026c6:	4611      	mov	r1, r2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f002 fc9b 	bl	8005004 <USB_HC_Halt>
 80026ce:	e2de      	b.n	8002c8e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	78fa      	ldrb	r2, [r7, #3]
 80026d6:	4611      	mov	r1, r2
 80026d8:	4618      	mov	r0, r3
 80026da:	f002 fc16 	bl	8004f0a <USB_ReadChInterrupts>
 80026de:	4603      	mov	r3, r0
 80026e0:	f003 0310 	and.w	r3, r3, #16
 80026e4:	2b10      	cmp	r3, #16
 80026e6:	d144      	bne.n	8002772 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80026e8:	78fa      	ldrb	r2, [r7, #3]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	1a9b      	subs	r3, r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	3344      	adds	r3, #68	; 0x44
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	1a9b      	subs	r3, r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	334d      	adds	r3, #77	; 0x4d
 800270c:	2204      	movs	r2, #4
 800270e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	3319      	adds	r3, #25
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d114      	bne.n	8002750 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002726:	78fa      	ldrb	r2, [r7, #3]
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	011b      	lsls	r3, r3, #4
 800272e:	1a9b      	subs	r3, r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	3318      	adds	r3, #24
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d109      	bne.n	8002750 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800273c:	78fa      	ldrb	r2, [r7, #3]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	1a9b      	subs	r3, r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	3319      	adds	r3, #25
 800274c:	2201      	movs	r2, #1
 800274e:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	78fa      	ldrb	r2, [r7, #3]
 8002756:	4611      	mov	r1, r2
 8002758:	4618      	mov	r0, r3
 800275a:	f002 fc53 	bl	8005004 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4413      	add	r3, r2
 8002766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276a:	461a      	mov	r2, r3
 800276c:	2310      	movs	r3, #16
 800276e:	6093      	str	r3, [r2, #8]
 8002770:	e28d      	b.n	8002c8e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	78fa      	ldrb	r2, [r7, #3]
 8002778:	4611      	mov	r1, r2
 800277a:	4618      	mov	r0, r3
 800277c:	f002 fbc5 	bl	8004f0a <USB_ReadChInterrupts>
 8002780:	4603      	mov	r3, r0
 8002782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002786:	2b80      	cmp	r3, #128	; 0x80
 8002788:	d169      	bne.n	800285e <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	799b      	ldrb	r3, [r3, #6]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d111      	bne.n	80027b6 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002792:	78fa      	ldrb	r2, [r7, #3]
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	1a9b      	subs	r3, r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	334d      	adds	r3, #77	; 0x4d
 80027a2:	2207      	movs	r2, #7
 80027a4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	78fa      	ldrb	r2, [r7, #3]
 80027ac:	4611      	mov	r1, r2
 80027ae:	4618      	mov	r0, r3
 80027b0:	f002 fc28 	bl	8005004 <USB_HC_Halt>
 80027b4:	e049      	b.n	800284a <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80027b6:	78fa      	ldrb	r2, [r7, #3]
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	1a9b      	subs	r3, r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	3344      	adds	r3, #68	; 0x44
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	1c59      	adds	r1, r3, #1
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4403      	add	r3, r0
 80027d6:	3344      	adds	r3, #68	; 0x44
 80027d8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80027da:	78fa      	ldrb	r2, [r7, #3]
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	4613      	mov	r3, r2
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	1a9b      	subs	r3, r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	440b      	add	r3, r1
 80027e8:	3344      	adds	r3, #68	; 0x44
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d922      	bls.n	8002836 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	3344      	adds	r3, #68	; 0x44
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002804:	78fa      	ldrb	r2, [r7, #3]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	1a9b      	subs	r3, r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	334c      	adds	r3, #76	; 0x4c
 8002814:	2204      	movs	r2, #4
 8002816:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002818:	78fa      	ldrb	r2, [r7, #3]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	1a9b      	subs	r3, r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	334c      	adds	r3, #76	; 0x4c
 8002828:	781a      	ldrb	r2, [r3, #0]
 800282a:	78fb      	ldrb	r3, [r7, #3]
 800282c:	4619      	mov	r1, r3
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f005 fb86 	bl	8007f40 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002834:	e009      	b.n	800284a <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002836:	78fa      	ldrb	r2, [r7, #3]
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	1a9b      	subs	r3, r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	334c      	adds	r3, #76	; 0x4c
 8002846:	2202      	movs	r2, #2
 8002848:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800284a:	78fb      	ldrb	r3, [r7, #3]
 800284c:	015a      	lsls	r2, r3, #5
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4413      	add	r3, r2
 8002852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002856:	461a      	mov	r2, r3
 8002858:	2380      	movs	r3, #128	; 0x80
 800285a:	6093      	str	r3, [r2, #8]
 800285c:	e217      	b.n	8002c8e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	78fa      	ldrb	r2, [r7, #3]
 8002864:	4611      	mov	r1, r2
 8002866:	4618      	mov	r0, r3
 8002868:	f002 fb4f 	bl	8004f0a <USB_ReadChInterrupts>
 800286c:	4603      	mov	r3, r0
 800286e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002876:	d11b      	bne.n	80028b0 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002878:	78fa      	ldrb	r2, [r7, #3]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	1a9b      	subs	r3, r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	334d      	adds	r3, #77	; 0x4d
 8002888:	2209      	movs	r2, #9
 800288a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	78fa      	ldrb	r2, [r7, #3]
 8002892:	4611      	mov	r1, r2
 8002894:	4618      	mov	r0, r3
 8002896:	f002 fbb5 	bl	8005004 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800289a:	78fb      	ldrb	r3, [r7, #3]
 800289c:	015a      	lsls	r2, r3, #5
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a6:	461a      	mov	r2, r3
 80028a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ac:	6093      	str	r3, [r2, #8]
 80028ae:	e1ee      	b.n	8002c8e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	78fa      	ldrb	r2, [r7, #3]
 80028b6:	4611      	mov	r1, r2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f002 fb26 	bl	8004f0a <USB_ReadChInterrupts>
 80028be:	4603      	mov	r3, r0
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	f040 81df 	bne.w	8002c88 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80028ca:	78fb      	ldrb	r3, [r7, #3]
 80028cc:	015a      	lsls	r2, r3, #5
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4413      	add	r3, r2
 80028d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d6:	461a      	mov	r2, r3
 80028d8:	2302      	movs	r3, #2
 80028da:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	334d      	adds	r3, #77	; 0x4d
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	f040 8093 	bne.w	8002a1a <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028f4:	78fa      	ldrb	r2, [r7, #3]
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	011b      	lsls	r3, r3, #4
 80028fc:	1a9b      	subs	r3, r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	334d      	adds	r3, #77	; 0x4d
 8002904:	2202      	movs	r2, #2
 8002906:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002908:	78fa      	ldrb	r2, [r7, #3]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	334c      	adds	r3, #76	; 0x4c
 8002918:	2201      	movs	r2, #1
 800291a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	3326      	adds	r3, #38	; 0x26
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d00b      	beq.n	800294a <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002932:	78fa      	ldrb	r2, [r7, #3]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	1a9b      	subs	r3, r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	3326      	adds	r3, #38	; 0x26
 8002942:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002944:	2b03      	cmp	r3, #3
 8002946:	f040 8190 	bne.w	8002c6a <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	799b      	ldrb	r3, [r3, #6]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d115      	bne.n	800297e <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002952:	78fa      	ldrb	r2, [r7, #3]
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	1a9b      	subs	r3, r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	440b      	add	r3, r1
 8002960:	333d      	adds	r3, #61	; 0x3d
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	f083 0301 	eor.w	r3, r3, #1
 800296a:	b2d8      	uxtb	r0, r3
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	1a9b      	subs	r3, r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	333d      	adds	r3, #61	; 0x3d
 800297a:	4602      	mov	r2, r0
 800297c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	799b      	ldrb	r3, [r3, #6]
 8002982:	2b01      	cmp	r3, #1
 8002984:	f040 8171 	bne.w	8002c6a <HCD_HC_OUT_IRQHandler+0x920>
 8002988:	78fa      	ldrb	r2, [r7, #3]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	1a9b      	subs	r3, r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	3334      	adds	r3, #52	; 0x34
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 8165 	beq.w	8002c6a <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80029a0:	78fa      	ldrb	r2, [r7, #3]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	3334      	adds	r3, #52	; 0x34
 80029b0:	6819      	ldr	r1, [r3, #0]
 80029b2:	78fa      	ldrb	r2, [r7, #3]
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	1a9b      	subs	r3, r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4403      	add	r3, r0
 80029c0:	3328      	adds	r3, #40	; 0x28
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	440b      	add	r3, r1
 80029c6:	1e59      	subs	r1, r3, #1
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	1a9b      	subs	r3, r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4403      	add	r3, r0
 80029d6:	3328      	adds	r3, #40	; 0x28
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	fbb1 f3f3 	udiv	r3, r1, r3
 80029de:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 813f 	beq.w	8002c6a <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80029ec:	78fa      	ldrb	r2, [r7, #3]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	333d      	adds	r3, #61	; 0x3d
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	78fa      	ldrb	r2, [r7, #3]
 8002a00:	f083 0301 	eor.w	r3, r3, #1
 8002a04:	b2d8      	uxtb	r0, r3
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	333d      	adds	r3, #61	; 0x3d
 8002a14:	4602      	mov	r2, r0
 8002a16:	701a      	strb	r2, [r3, #0]
 8002a18:	e127      	b.n	8002c6a <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002a1a:	78fa      	ldrb	r2, [r7, #3]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	1a9b      	subs	r3, r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	334d      	adds	r3, #77	; 0x4d
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d120      	bne.n	8002a72 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	1a9b      	subs	r3, r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	334d      	adds	r3, #77	; 0x4d
 8002a40:	2202      	movs	r2, #2
 8002a42:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002a44:	78fa      	ldrb	r2, [r7, #3]
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	1a9b      	subs	r3, r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	331b      	adds	r3, #27
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	f040 8107 	bne.w	8002c6a <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a5c:	78fa      	ldrb	r2, [r7, #3]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	1a9b      	subs	r3, r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	334c      	adds	r3, #76	; 0x4c
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	701a      	strb	r2, [r3, #0]
 8002a70:	e0fb      	b.n	8002c6a <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002a72:	78fa      	ldrb	r2, [r7, #3]
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	011b      	lsls	r3, r3, #4
 8002a7a:	1a9b      	subs	r3, r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	440b      	add	r3, r1
 8002a80:	334d      	adds	r3, #77	; 0x4d
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d13a      	bne.n	8002afe <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a88:	78fa      	ldrb	r2, [r7, #3]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	1a9b      	subs	r3, r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	334d      	adds	r3, #77	; 0x4d
 8002a98:	2202      	movs	r2, #2
 8002a9a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a9c:	78fa      	ldrb	r2, [r7, #3]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	334c      	adds	r3, #76	; 0x4c
 8002aac:	2202      	movs	r2, #2
 8002aae:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002ab0:	78fa      	ldrb	r2, [r7, #3]
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	1a9b      	subs	r3, r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	331b      	adds	r3, #27
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	f040 80d1 	bne.w	8002c6a <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8002ac8:	78fa      	ldrb	r2, [r7, #3]
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	331b      	adds	r3, #27
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	78fa      	ldrb	r2, [r7, #3]
 8002aec:	0151      	lsls	r1, r2, #5
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	440a      	add	r2, r1
 8002af2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afa:	6053      	str	r3, [r2, #4]
 8002afc:	e0b5      	b.n	8002c6a <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002afe:	78fa      	ldrb	r2, [r7, #3]
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	1a9b      	subs	r3, r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	334d      	adds	r3, #77	; 0x4d
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b05      	cmp	r3, #5
 8002b12:	d114      	bne.n	8002b3e <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b14:	78fa      	ldrb	r2, [r7, #3]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	334d      	adds	r3, #77	; 0x4d
 8002b24:	2202      	movs	r2, #2
 8002b26:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002b28:	78fa      	ldrb	r2, [r7, #3]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	1a9b      	subs	r3, r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	334c      	adds	r3, #76	; 0x4c
 8002b38:	2202      	movs	r2, #2
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	e095      	b.n	8002c6a <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002b3e:	78fa      	ldrb	r2, [r7, #3]
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	1a9b      	subs	r3, r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	334d      	adds	r3, #77	; 0x4d
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b06      	cmp	r3, #6
 8002b52:	d114      	bne.n	8002b7e <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b54:	78fa      	ldrb	r2, [r7, #3]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	334d      	adds	r3, #77	; 0x4d
 8002b64:	2202      	movs	r2, #2
 8002b66:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002b68:	78fa      	ldrb	r2, [r7, #3]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	334c      	adds	r3, #76	; 0x4c
 8002b78:	2205      	movs	r2, #5
 8002b7a:	701a      	strb	r2, [r3, #0]
 8002b7c:	e075      	b.n	8002c6a <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002b7e:	78fa      	ldrb	r2, [r7, #3]
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	1a9b      	subs	r3, r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	334d      	adds	r3, #77	; 0x4d
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b07      	cmp	r3, #7
 8002b92:	d00a      	beq.n	8002baa <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002b94:	78fa      	ldrb	r2, [r7, #3]
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	334d      	adds	r3, #77	; 0x4d
 8002ba4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002ba6:	2b09      	cmp	r3, #9
 8002ba8:	d170      	bne.n	8002c8c <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002baa:	78fa      	ldrb	r2, [r7, #3]
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	1a9b      	subs	r3, r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	334d      	adds	r3, #77	; 0x4d
 8002bba:	2202      	movs	r2, #2
 8002bbc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002bbe:	78fa      	ldrb	r2, [r7, #3]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	1a9b      	subs	r3, r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	3344      	adds	r3, #68	; 0x44
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	1c59      	adds	r1, r3, #1
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4403      	add	r3, r0
 8002bde:	3344      	adds	r3, #68	; 0x44
 8002be0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002be2:	78fa      	ldrb	r2, [r7, #3]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	1a9b      	subs	r3, r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	3344      	adds	r3, #68	; 0x44
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d914      	bls.n	8002c22 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002bf8:	78fa      	ldrb	r2, [r7, #3]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	3344      	adds	r3, #68	; 0x44
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	334c      	adds	r3, #76	; 0x4c
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002c20:	e022      	b.n	8002c68 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c22:	78fa      	ldrb	r2, [r7, #3]
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	1a9b      	subs	r3, r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	440b      	add	r3, r1
 8002c30:	334c      	adds	r3, #76	; 0x4c
 8002c32:	2202      	movs	r2, #2
 8002c34:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002c36:	78fb      	ldrb	r3, [r7, #3]
 8002c38:	015a      	lsls	r2, r3, #5
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c4c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c54:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c62:	461a      	mov	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002c68:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002c6a:	78fa      	ldrb	r2, [r7, #3]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	1a9b      	subs	r3, r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	334c      	adds	r3, #76	; 0x4c
 8002c7a:	781a      	ldrb	r2, [r3, #0]
 8002c7c:	78fb      	ldrb	r3, [r7, #3]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f005 f95d 	bl	8007f40 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c86:	e002      	b.n	8002c8e <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8002c88:	bf00      	nop
 8002c8a:	e000      	b.n	8002c8e <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8002c8c:	bf00      	nop
  }
}
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08a      	sub	sp, #40	; 0x28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	f003 030f 	and.w	r3, r3, #15
 8002cb4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	0c5b      	lsrs	r3, r3, #17
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	091b      	lsrs	r3, r3, #4
 8002cc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cc8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d004      	beq.n	8002cda <HCD_RXQLVL_IRQHandler+0x46>
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2b05      	cmp	r3, #5
 8002cd4:	f000 80b6 	beq.w	8002e44 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002cd8:	e0b7      	b.n	8002e4a <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80b3 	beq.w	8002e48 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	1a9b      	subs	r3, r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	440b      	add	r3, r1
 8002cf0:	332c      	adds	r3, #44	; 0x2c
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 80a7 	beq.w	8002e48 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	1a9b      	subs	r3, r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	3338      	adds	r3, #56	; 0x38
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	18d1      	adds	r1, r2, r3
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4613      	mov	r3, r2
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	1a9b      	subs	r3, r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4403      	add	r3, r0
 8002d1e:	3334      	adds	r3, #52	; 0x34
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4299      	cmp	r1, r3
 8002d24:	f200 8083 	bhi.w	8002e2e <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4613      	mov	r3, r2
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	1a9b      	subs	r3, r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	332c      	adds	r3, #44	; 0x2c
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	b292      	uxth	r2, r2
 8002d42:	4619      	mov	r1, r3
 8002d44:	f002 f876 	bl	8004e34 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	332c      	adds	r3, #44	; 0x2c
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	18d1      	adds	r1, r2, r3
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4613      	mov	r3, r2
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	1a9b      	subs	r3, r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4403      	add	r3, r0
 8002d6c:	332c      	adds	r3, #44	; 0x2c
 8002d6e:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4613      	mov	r3, r2
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	1a9b      	subs	r3, r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	3338      	adds	r3, #56	; 0x38
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	18d1      	adds	r1, r2, r3
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	1a9b      	subs	r3, r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4403      	add	r3, r0
 8002d94:	3338      	adds	r3, #56	; 0x38
 8002d96:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	0cdb      	lsrs	r3, r3, #19
 8002da8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dac:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4613      	mov	r3, r2
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	440b      	add	r3, r1
 8002dbc:	3328      	adds	r3, #40	; 0x28
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d13f      	bne.n	8002e48 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d03c      	beq.n	8002e48 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002de4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dec:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4613      	mov	r3, r2
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	1a9b      	subs	r3, r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	333c      	adds	r3, #60	; 0x3c
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	f083 0301 	eor.w	r3, r3, #1
 8002e16:	b2d8      	uxtb	r0, r3
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	333c      	adds	r3, #60	; 0x3c
 8002e28:	4602      	mov	r2, r0
 8002e2a:	701a      	strb	r2, [r3, #0]
      break;
 8002e2c:	e00c      	b.n	8002e48 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4613      	mov	r3, r2
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	1a9b      	subs	r3, r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	334c      	adds	r3, #76	; 0x4c
 8002e3e:	2204      	movs	r2, #4
 8002e40:	701a      	strb	r2, [r3, #0]
      break;
 8002e42:	e001      	b.n	8002e48 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8002e44:	bf00      	nop
 8002e46:	e000      	b.n	8002e4a <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8002e48:	bf00      	nop
  }
}
 8002e4a:	bf00      	nop
 8002e4c:	3728      	adds	r7, #40	; 0x28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b086      	sub	sp, #24
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e7e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d10b      	bne.n	8002ea2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d102      	bne.n	8002e9a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f005 f837 	bl	8007f08 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	f043 0302 	orr.w	r3, r3, #2
 8002ea0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d132      	bne.n	8002f12 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f043 0308 	orr.w	r3, r3, #8
 8002eb2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d126      	bne.n	8002f0c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	7a5b      	ldrb	r3, [r3, #9]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d113      	bne.n	8002eee <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002ecc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ed0:	d106      	bne.n	8002ee0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2102      	movs	r1, #2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f002 f845 	bl	8004f68 <USB_InitFSLSPClkSel>
 8002ede:	e011      	b.n	8002f04 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f002 f83e 	bl	8004f68 <USB_InitFSLSPClkSel>
 8002eec:	e00a      	b.n	8002f04 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	79db      	ldrb	r3, [r3, #7]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d106      	bne.n	8002f04 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002efc:	461a      	mov	r2, r3
 8002efe:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002f02:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f005 f82d 	bl	8007f64 <HAL_HCD_PortEnabled_Callback>
 8002f0a:	e002      	b.n	8002f12 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f005 f837 	bl	8007f80 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f003 0320 	and.w	r3, r3, #32
 8002f18:	2b20      	cmp	r3, #32
 8002f1a:	d103      	bne.n	8002f24 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f043 0320 	orr.w	r3, r3, #32
 8002f22:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	6013      	str	r3, [r2, #0]
}
 8002f30:	bf00      	nop
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e12b      	b.n	80031a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d106      	bne.n	8002f64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7fd fd56 	bl	8000a10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2224      	movs	r2, #36	; 0x24
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0201 	bic.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f9c:	f001 fa20 	bl	80043e0 <HAL_RCC_GetPCLK1Freq>
 8002fa0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	4a81      	ldr	r2, [pc, #516]	; (80031ac <HAL_I2C_Init+0x274>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d807      	bhi.n	8002fbc <HAL_I2C_Init+0x84>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4a80      	ldr	r2, [pc, #512]	; (80031b0 <HAL_I2C_Init+0x278>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	bf94      	ite	ls
 8002fb4:	2301      	movls	r3, #1
 8002fb6:	2300      	movhi	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	e006      	b.n	8002fca <HAL_I2C_Init+0x92>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4a7d      	ldr	r2, [pc, #500]	; (80031b4 <HAL_I2C_Init+0x27c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	bf94      	ite	ls
 8002fc4:	2301      	movls	r3, #1
 8002fc6:	2300      	movhi	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e0e7      	b.n	80031a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4a78      	ldr	r2, [pc, #480]	; (80031b8 <HAL_I2C_Init+0x280>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	0c9b      	lsrs	r3, r3, #18
 8002fdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	4a6a      	ldr	r2, [pc, #424]	; (80031ac <HAL_I2C_Init+0x274>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d802      	bhi.n	800300c <HAL_I2C_Init+0xd4>
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	3301      	adds	r3, #1
 800300a:	e009      	b.n	8003020 <HAL_I2C_Init+0xe8>
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003012:	fb02 f303 	mul.w	r3, r2, r3
 8003016:	4a69      	ldr	r2, [pc, #420]	; (80031bc <HAL_I2C_Init+0x284>)
 8003018:	fba2 2303 	umull	r2, r3, r2, r3
 800301c:	099b      	lsrs	r3, r3, #6
 800301e:	3301      	adds	r3, #1
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6812      	ldr	r2, [r2, #0]
 8003024:	430b      	orrs	r3, r1
 8003026:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003032:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	495c      	ldr	r1, [pc, #368]	; (80031ac <HAL_I2C_Init+0x274>)
 800303c:	428b      	cmp	r3, r1
 800303e:	d819      	bhi.n	8003074 <HAL_I2C_Init+0x13c>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1e59      	subs	r1, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	fbb1 f3f3 	udiv	r3, r1, r3
 800304e:	1c59      	adds	r1, r3, #1
 8003050:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003054:	400b      	ands	r3, r1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00a      	beq.n	8003070 <HAL_I2C_Init+0x138>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1e59      	subs	r1, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	fbb1 f3f3 	udiv	r3, r1, r3
 8003068:	3301      	adds	r3, #1
 800306a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800306e:	e051      	b.n	8003114 <HAL_I2C_Init+0x1dc>
 8003070:	2304      	movs	r3, #4
 8003072:	e04f      	b.n	8003114 <HAL_I2C_Init+0x1dc>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d111      	bne.n	80030a0 <HAL_I2C_Init+0x168>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	1e58      	subs	r0, r3, #1
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6859      	ldr	r1, [r3, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	440b      	add	r3, r1
 800308a:	fbb0 f3f3 	udiv	r3, r0, r3
 800308e:	3301      	adds	r3, #1
 8003090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003094:	2b00      	cmp	r3, #0
 8003096:	bf0c      	ite	eq
 8003098:	2301      	moveq	r3, #1
 800309a:	2300      	movne	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	e012      	b.n	80030c6 <HAL_I2C_Init+0x18e>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1e58      	subs	r0, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6859      	ldr	r1, [r3, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	0099      	lsls	r1, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b6:	3301      	adds	r3, #1
 80030b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf0c      	ite	eq
 80030c0:	2301      	moveq	r3, #1
 80030c2:	2300      	movne	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_I2C_Init+0x196>
 80030ca:	2301      	movs	r3, #1
 80030cc:	e022      	b.n	8003114 <HAL_I2C_Init+0x1dc>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10e      	bne.n	80030f4 <HAL_I2C_Init+0x1bc>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	1e58      	subs	r0, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6859      	ldr	r1, [r3, #4]
 80030de:	460b      	mov	r3, r1
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	440b      	add	r3, r1
 80030e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e8:	3301      	adds	r3, #1
 80030ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030f2:	e00f      	b.n	8003114 <HAL_I2C_Init+0x1dc>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	1e58      	subs	r0, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6859      	ldr	r1, [r3, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	0099      	lsls	r1, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	fbb0 f3f3 	udiv	r3, r0, r3
 800310a:	3301      	adds	r3, #1
 800310c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003110:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	6809      	ldr	r1, [r1, #0]
 8003118:	4313      	orrs	r3, r2
 800311a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69da      	ldr	r2, [r3, #28]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003142:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6911      	ldr	r1, [r2, #16]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	68d2      	ldr	r2, [r2, #12]
 800314e:	4311      	orrs	r1, r2
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	430b      	orrs	r3, r1
 8003156:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695a      	ldr	r2, [r3, #20]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0201 	orr.w	r2, r2, #1
 8003182:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2220      	movs	r2, #32
 800318e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	000186a0 	.word	0x000186a0
 80031b0:	001e847f 	.word	0x001e847f
 80031b4:	003d08ff 	.word	0x003d08ff
 80031b8:	431bde83 	.word	0x431bde83
 80031bc:	10624dd3 	.word	0x10624dd3

080031c0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e128      	b.n	8003424 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d109      	bne.n	80031f2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a90      	ldr	r2, [pc, #576]	; (800342c <HAL_I2S_Init+0x26c>)
 80031ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7fd fc57 	bl	8000aa0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2202      	movs	r2, #2
 80031f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003208:	f023 030f 	bic.w	r3, r3, #15
 800320c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2202      	movs	r2, #2
 8003214:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	2b02      	cmp	r3, #2
 800321c:	d060      	beq.n	80032e0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d102      	bne.n	800322c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003226:	2310      	movs	r3, #16
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	e001      	b.n	8003230 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800322c:	2320      	movs	r3, #32
 800322e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b20      	cmp	r3, #32
 8003236:	d802      	bhi.n	800323e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800323e:	2001      	movs	r0, #1
 8003240:	f001 f9f6 	bl	8004630 <HAL_RCCEx_GetPeriphCLKFreq>
 8003244:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800324e:	d125      	bne.n	800329c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d010      	beq.n	800327a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	461a      	mov	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	fbb2 f3f3 	udiv	r3, r2, r3
 8003274:	3305      	adds	r3, #5
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	e01f      	b.n	80032ba <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	fbb2 f2f3 	udiv	r2, r2, r3
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	461a      	mov	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	fbb2 f3f3 	udiv	r3, r2, r3
 8003296:	3305      	adds	r3, #5
 8003298:	613b      	str	r3, [r7, #16]
 800329a:	e00e      	b.n	80032ba <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	461a      	mov	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b6:	3305      	adds	r3, #5
 80032b8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	4a5c      	ldr	r2, [pc, #368]	; (8003430 <HAL_I2S_Init+0x270>)
 80032be:	fba2 2303 	umull	r2, r3, r2, r3
 80032c2:	08db      	lsrs	r3, r3, #3
 80032c4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	085b      	lsrs	r3, r3, #1
 80032d6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	021b      	lsls	r3, r3, #8
 80032dc:	61bb      	str	r3, [r7, #24]
 80032de:	e003      	b.n	80032e8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80032e0:	2302      	movs	r3, #2
 80032e2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d902      	bls.n	80032f4 <HAL_I2S_Init+0x134>
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	2bff      	cmp	r3, #255	; 0xff
 80032f2:	d907      	bls.n	8003304 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f8:	f043 0210 	orr.w	r2, r3, #16
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e08f      	b.n	8003424 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	ea42 0103 	orr.w	r1, r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69fa      	ldr	r2, [r7, #28]
 8003314:	430a      	orrs	r2, r1
 8003316:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003322:	f023 030f 	bic.w	r3, r3, #15
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6851      	ldr	r1, [r2, #4]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6892      	ldr	r2, [r2, #8]
 800332e:	4311      	orrs	r1, r2
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	68d2      	ldr	r2, [r2, #12]
 8003334:	4311      	orrs	r1, r2
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6992      	ldr	r2, [r2, #24]
 800333a:	430a      	orrs	r2, r1
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003346:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d161      	bne.n	8003414 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a38      	ldr	r2, [pc, #224]	; (8003434 <HAL_I2S_Init+0x274>)
 8003354:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a37      	ldr	r2, [pc, #220]	; (8003438 <HAL_I2S_Init+0x278>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d101      	bne.n	8003364 <HAL_I2S_Init+0x1a4>
 8003360:	4b36      	ldr	r3, [pc, #216]	; (800343c <HAL_I2S_Init+0x27c>)
 8003362:	e001      	b.n	8003368 <HAL_I2S_Init+0x1a8>
 8003364:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6812      	ldr	r2, [r2, #0]
 800336e:	4932      	ldr	r1, [pc, #200]	; (8003438 <HAL_I2S_Init+0x278>)
 8003370:	428a      	cmp	r2, r1
 8003372:	d101      	bne.n	8003378 <HAL_I2S_Init+0x1b8>
 8003374:	4a31      	ldr	r2, [pc, #196]	; (800343c <HAL_I2S_Init+0x27c>)
 8003376:	e001      	b.n	800337c <HAL_I2S_Init+0x1bc>
 8003378:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800337c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003380:	f023 030f 	bic.w	r3, r3, #15
 8003384:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a2b      	ldr	r2, [pc, #172]	; (8003438 <HAL_I2S_Init+0x278>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d101      	bne.n	8003394 <HAL_I2S_Init+0x1d4>
 8003390:	4b2a      	ldr	r3, [pc, #168]	; (800343c <HAL_I2S_Init+0x27c>)
 8003392:	e001      	b.n	8003398 <HAL_I2S_Init+0x1d8>
 8003394:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003398:	2202      	movs	r2, #2
 800339a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a25      	ldr	r2, [pc, #148]	; (8003438 <HAL_I2S_Init+0x278>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d101      	bne.n	80033aa <HAL_I2S_Init+0x1ea>
 80033a6:	4b25      	ldr	r3, [pc, #148]	; (800343c <HAL_I2S_Init+0x27c>)
 80033a8:	e001      	b.n	80033ae <HAL_I2S_Init+0x1ee>
 80033aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ba:	d003      	beq.n	80033c4 <HAL_I2S_Init+0x204>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d103      	bne.n	80033cc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80033c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033c8:	613b      	str	r3, [r7, #16]
 80033ca:	e001      	b.n	80033d0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80033cc:	2300      	movs	r3, #0
 80033ce:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033da:	4313      	orrs	r3, r2
 80033dc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033e4:	4313      	orrs	r3, r2
 80033e6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033ee:	4313      	orrs	r3, r2
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	897b      	ldrh	r3, [r7, #10]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033fc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a0d      	ldr	r2, [pc, #52]	; (8003438 <HAL_I2S_Init+0x278>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d101      	bne.n	800340c <HAL_I2S_Init+0x24c>
 8003408:	4b0c      	ldr	r3, [pc, #48]	; (800343c <HAL_I2S_Init+0x27c>)
 800340a:	e001      	b.n	8003410 <HAL_I2S_Init+0x250>
 800340c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003410:	897a      	ldrh	r2, [r7, #10]
 8003412:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3720      	adds	r7, #32
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	08003537 	.word	0x08003537
 8003430:	cccccccd 	.word	0xcccccccd
 8003434:	0800364d 	.word	0x0800364d
 8003438:	40003800 	.word	0x40003800
 800343c:	40003400 	.word	0x40003400

08003440 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	881a      	ldrh	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	1c9a      	adds	r2, r3, #2
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10e      	bne.n	80034d0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034c0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7ff ffb8 	bl	8003440 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034d0:	bf00      	nop
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ea:	b292      	uxth	r2, r2
 80034ec:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	1c9a      	adds	r2, r3, #2
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	3b01      	subs	r3, #1
 8003500:	b29a      	uxth	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10e      	bne.n	800352e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800351e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7ff ff93 	bl	8003454 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b086      	sub	sp, #24
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b04      	cmp	r3, #4
 8003550:	d13a      	bne.n	80035c8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b01      	cmp	r3, #1
 800355a:	d109      	bne.n	8003570 <I2S_IRQHandler+0x3a>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003566:	2b40      	cmp	r3, #64	; 0x40
 8003568:	d102      	bne.n	8003570 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff ffb4 	bl	80034d8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003576:	2b40      	cmp	r3, #64	; 0x40
 8003578:	d126      	bne.n	80035c8 <I2S_IRQHandler+0x92>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f003 0320 	and.w	r3, r3, #32
 8003584:	2b20      	cmp	r3, #32
 8003586:	d11f      	bne.n	80035c8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003596:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003598:	2300      	movs	r3, #0
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	f043 0202 	orr.w	r2, r3, #2
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff ff50 	bl	8003468 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b03      	cmp	r3, #3
 80035d2:	d136      	bne.n	8003642 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d109      	bne.n	80035f2 <I2S_IRQHandler+0xbc>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e8:	2b80      	cmp	r3, #128	; 0x80
 80035ea:	d102      	bne.n	80035f2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff ff45 	bl	800347c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d122      	bne.n	8003642 <I2S_IRQHandler+0x10c>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f003 0320 	and.w	r3, r3, #32
 8003606:	2b20      	cmp	r3, #32
 8003608:	d11b      	bne.n	8003642 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003618:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800361a:	2300      	movs	r3, #0
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003634:	f043 0204 	orr.w	r2, r3, #4
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff ff13 	bl	8003468 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003642:	bf00      	nop
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
	...

0800364c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a92      	ldr	r2, [pc, #584]	; (80038ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d101      	bne.n	800366a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003666:	4b92      	ldr	r3, [pc, #584]	; (80038b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003668:	e001      	b.n	800366e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800366a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a8b      	ldr	r2, [pc, #556]	; (80038ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d101      	bne.n	8003688 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003684:	4b8a      	ldr	r3, [pc, #552]	; (80038b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003686:	e001      	b.n	800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003688:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003698:	d004      	beq.n	80036a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f040 8099 	bne.w	80037d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d107      	bne.n	80036be <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f925 	bl	8003908 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d107      	bne.n	80036d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f9c8 	bl	8003a68 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036de:	2b40      	cmp	r3, #64	; 0x40
 80036e0:	d13a      	bne.n	8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f003 0320 	and.w	r3, r3, #32
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d035      	beq.n	8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a6e      	ldr	r2, [pc, #440]	; (80038ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d101      	bne.n	80036fa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80036f6:	4b6e      	ldr	r3, [pc, #440]	; (80038b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036f8:	e001      	b.n	80036fe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80036fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4969      	ldr	r1, [pc, #420]	; (80038ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003706:	428b      	cmp	r3, r1
 8003708:	d101      	bne.n	800370e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800370a:	4b69      	ldr	r3, [pc, #420]	; (80038b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800370c:	e001      	b.n	8003712 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800370e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003712:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003716:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003726:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003728:	2300      	movs	r3, #0
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374a:	f043 0202 	orr.w	r2, r3, #2
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff fe88 	bl	8003468 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b08      	cmp	r3, #8
 8003760:	f040 80c3 	bne.w	80038ea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 80bd 	beq.w	80038ea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800377e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a49      	ldr	r2, [pc, #292]	; (80038ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d101      	bne.n	800378e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800378a:	4b49      	ldr	r3, [pc, #292]	; (80038b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800378c:	e001      	b.n	8003792 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800378e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4944      	ldr	r1, [pc, #272]	; (80038ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800379a:	428b      	cmp	r3, r1
 800379c:	d101      	bne.n	80037a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800379e:	4b44      	ldr	r3, [pc, #272]	; (80038b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037a0:	e001      	b.n	80037a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80037a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037aa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037ac:	2300      	movs	r3, #0
 80037ae:	60bb      	str	r3, [r7, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	60bb      	str	r3, [r7, #8]
 80037b8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	f043 0204 	orr.w	r2, r3, #4
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7ff fe4a 	bl	8003468 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037d4:	e089      	b.n	80038ea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d107      	bne.n	80037f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f8be 	bl	800396c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d107      	bne.n	800380a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f8fd 	bl	8003a04 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003810:	2b40      	cmp	r3, #64	; 0x40
 8003812:	d12f      	bne.n	8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b00      	cmp	r3, #0
 800381c:	d02a      	beq.n	8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800382c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a1e      	ldr	r2, [pc, #120]	; (80038ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d101      	bne.n	800383c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003838:	4b1d      	ldr	r3, [pc, #116]	; (80038b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800383a:	e001      	b.n	8003840 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800383c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4919      	ldr	r1, [pc, #100]	; (80038ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003848:	428b      	cmp	r3, r1
 800384a:	d101      	bne.n	8003850 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800384c:	4b18      	ldr	r3, [pc, #96]	; (80038b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800384e:	e001      	b.n	8003854 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003850:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003854:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003858:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003866:	f043 0202 	orr.w	r2, r3, #2
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7ff fdfa 	bl	8003468 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b08      	cmp	r3, #8
 800387c:	d136      	bne.n	80038ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f003 0320 	and.w	r3, r3, #32
 8003884:	2b00      	cmp	r3, #0
 8003886:	d031      	beq.n	80038ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a07      	ldr	r2, [pc, #28]	; (80038ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d101      	bne.n	8003896 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003892:	4b07      	ldr	r3, [pc, #28]	; (80038b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003894:	e001      	b.n	800389a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003896:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4902      	ldr	r1, [pc, #8]	; (80038ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038a2:	428b      	cmp	r3, r1
 80038a4:	d106      	bne.n	80038b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80038a6:	4b02      	ldr	r3, [pc, #8]	; (80038b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038a8:	e006      	b.n	80038b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80038aa:	bf00      	nop
 80038ac:	40003800 	.word	0x40003800
 80038b0:	40003400 	.word	0x40003400
 80038b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038bc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038cc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038da:	f043 0204 	orr.w	r2, r3, #4
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff fdc0 	bl	8003468 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038e8:	e000      	b.n	80038ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038ea:	bf00      	nop
}
 80038ec:	bf00      	nop
 80038ee:	3720      	adds	r7, #32
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	1c99      	adds	r1, r3, #2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6251      	str	r1, [r2, #36]	; 0x24
 800391a:	881a      	ldrh	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d113      	bne.n	8003962 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003948:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d106      	bne.n	8003962 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff ffc9 	bl	80038f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	1c99      	adds	r1, r3, #2
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6251      	str	r1, [r2, #36]	; 0x24
 800397e:	8819      	ldrh	r1, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a1d      	ldr	r2, [pc, #116]	; (80039fc <I2SEx_TxISR_I2SExt+0x90>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d101      	bne.n	800398e <I2SEx_TxISR_I2SExt+0x22>
 800398a:	4b1d      	ldr	r3, [pc, #116]	; (8003a00 <I2SEx_TxISR_I2SExt+0x94>)
 800398c:	e001      	b.n	8003992 <I2SEx_TxISR_I2SExt+0x26>
 800398e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003992:	460a      	mov	r2, r1
 8003994:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d121      	bne.n	80039f2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a12      	ldr	r2, [pc, #72]	; (80039fc <I2SEx_TxISR_I2SExt+0x90>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d101      	bne.n	80039bc <I2SEx_TxISR_I2SExt+0x50>
 80039b8:	4b11      	ldr	r3, [pc, #68]	; (8003a00 <I2SEx_TxISR_I2SExt+0x94>)
 80039ba:	e001      	b.n	80039c0 <I2SEx_TxISR_I2SExt+0x54>
 80039bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	490d      	ldr	r1, [pc, #52]	; (80039fc <I2SEx_TxISR_I2SExt+0x90>)
 80039c8:	428b      	cmp	r3, r1
 80039ca:	d101      	bne.n	80039d0 <I2SEx_TxISR_I2SExt+0x64>
 80039cc:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <I2SEx_TxISR_I2SExt+0x94>)
 80039ce:	e001      	b.n	80039d4 <I2SEx_TxISR_I2SExt+0x68>
 80039d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039de:	b29b      	uxth	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d106      	bne.n	80039f2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff ff81 	bl	80038f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40003800 	.word	0x40003800
 8003a00:	40003400 	.word	0x40003400

08003a04 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68d8      	ldr	r0, [r3, #12]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a16:	1c99      	adds	r1, r3, #2
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a1c:	b282      	uxth	r2, r0
 8003a1e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d113      	bne.n	8003a60 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a46:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff ff4a 	bl	80038f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a60:	bf00      	nop
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a20      	ldr	r2, [pc, #128]	; (8003af8 <I2SEx_RxISR_I2SExt+0x90>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d101      	bne.n	8003a7e <I2SEx_RxISR_I2SExt+0x16>
 8003a7a:	4b20      	ldr	r3, [pc, #128]	; (8003afc <I2SEx_RxISR_I2SExt+0x94>)
 8003a7c:	e001      	b.n	8003a82 <I2SEx_RxISR_I2SExt+0x1a>
 8003a7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a82:	68d8      	ldr	r0, [r3, #12]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	1c99      	adds	r1, r3, #2
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a8e:	b282      	uxth	r2, r0
 8003a90:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d121      	bne.n	8003aee <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a12      	ldr	r2, [pc, #72]	; (8003af8 <I2SEx_RxISR_I2SExt+0x90>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d101      	bne.n	8003ab8 <I2SEx_RxISR_I2SExt+0x50>
 8003ab4:	4b11      	ldr	r3, [pc, #68]	; (8003afc <I2SEx_RxISR_I2SExt+0x94>)
 8003ab6:	e001      	b.n	8003abc <I2SEx_RxISR_I2SExt+0x54>
 8003ab8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	490d      	ldr	r1, [pc, #52]	; (8003af8 <I2SEx_RxISR_I2SExt+0x90>)
 8003ac4:	428b      	cmp	r3, r1
 8003ac6:	d101      	bne.n	8003acc <I2SEx_RxISR_I2SExt+0x64>
 8003ac8:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <I2SEx_RxISR_I2SExt+0x94>)
 8003aca:	e001      	b.n	8003ad0 <I2SEx_RxISR_I2SExt+0x68>
 8003acc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ad0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ad4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d106      	bne.n	8003aee <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7ff ff03 	bl	80038f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003aee:	bf00      	nop
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40003800 	.word	0x40003800
 8003afc:	40003400 	.word	0x40003400

08003b00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e267      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d075      	beq.n	8003c0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b1e:	4b88      	ldr	r3, [pc, #544]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 030c 	and.w	r3, r3, #12
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d00c      	beq.n	8003b44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b2a:	4b85      	ldr	r3, [pc, #532]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d112      	bne.n	8003b5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b36:	4b82      	ldr	r3, [pc, #520]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b42:	d10b      	bne.n	8003b5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b44:	4b7e      	ldr	r3, [pc, #504]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d05b      	beq.n	8003c08 <HAL_RCC_OscConfig+0x108>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d157      	bne.n	8003c08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e242      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b64:	d106      	bne.n	8003b74 <HAL_RCC_OscConfig+0x74>
 8003b66:	4b76      	ldr	r3, [pc, #472]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a75      	ldr	r2, [pc, #468]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	e01d      	b.n	8003bb0 <HAL_RCC_OscConfig+0xb0>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b7c:	d10c      	bne.n	8003b98 <HAL_RCC_OscConfig+0x98>
 8003b7e:	4b70      	ldr	r3, [pc, #448]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a6f      	ldr	r2, [pc, #444]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	4b6d      	ldr	r3, [pc, #436]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a6c      	ldr	r2, [pc, #432]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	e00b      	b.n	8003bb0 <HAL_RCC_OscConfig+0xb0>
 8003b98:	4b69      	ldr	r3, [pc, #420]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a68      	ldr	r2, [pc, #416]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ba2:	6013      	str	r3, [r2, #0]
 8003ba4:	4b66      	ldr	r3, [pc, #408]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a65      	ldr	r2, [pc, #404]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d013      	beq.n	8003be0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb8:	f7fd f974 	bl	8000ea4 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bc0:	f7fd f970 	bl	8000ea4 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b64      	cmp	r3, #100	; 0x64
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e207      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd2:	4b5b      	ldr	r3, [pc, #364]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0f0      	beq.n	8003bc0 <HAL_RCC_OscConfig+0xc0>
 8003bde:	e014      	b.n	8003c0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be0:	f7fd f960 	bl	8000ea4 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003be8:	f7fd f95c 	bl	8000ea4 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b64      	cmp	r3, #100	; 0x64
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e1f3      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bfa:	4b51      	ldr	r3, [pc, #324]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f0      	bne.n	8003be8 <HAL_RCC_OscConfig+0xe8>
 8003c06:	e000      	b.n	8003c0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d063      	beq.n	8003cde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c16:	4b4a      	ldr	r3, [pc, #296]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 030c 	and.w	r3, r3, #12
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00b      	beq.n	8003c3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c22:	4b47      	ldr	r3, [pc, #284]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c2a:	2b08      	cmp	r3, #8
 8003c2c:	d11c      	bne.n	8003c68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c2e:	4b44      	ldr	r3, [pc, #272]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d116      	bne.n	8003c68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c3a:	4b41      	ldr	r3, [pc, #260]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d005      	beq.n	8003c52 <HAL_RCC_OscConfig+0x152>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d001      	beq.n	8003c52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e1c7      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c52:	4b3b      	ldr	r3, [pc, #236]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	4937      	ldr	r1, [pc, #220]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c66:	e03a      	b.n	8003cde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d020      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c70:	4b34      	ldr	r3, [pc, #208]	; (8003d44 <HAL_RCC_OscConfig+0x244>)
 8003c72:	2201      	movs	r2, #1
 8003c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c76:	f7fd f915 	bl	8000ea4 <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c7c:	e008      	b.n	8003c90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c7e:	f7fd f911 	bl	8000ea4 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e1a8      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c90:	4b2b      	ldr	r3, [pc, #172]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0f0      	beq.n	8003c7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c9c:	4b28      	ldr	r3, [pc, #160]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	4925      	ldr	r1, [pc, #148]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	600b      	str	r3, [r1, #0]
 8003cb0:	e015      	b.n	8003cde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cb2:	4b24      	ldr	r3, [pc, #144]	; (8003d44 <HAL_RCC_OscConfig+0x244>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7fd f8f4 	bl	8000ea4 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cc0:	f7fd f8f0 	bl	8000ea4 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e187      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cd2:	4b1b      	ldr	r3, [pc, #108]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f0      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d036      	beq.n	8003d58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d016      	beq.n	8003d20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cf2:	4b15      	ldr	r3, [pc, #84]	; (8003d48 <HAL_RCC_OscConfig+0x248>)
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf8:	f7fd f8d4 	bl	8000ea4 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d00:	f7fd f8d0 	bl	8000ea4 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e167      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d12:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0f0      	beq.n	8003d00 <HAL_RCC_OscConfig+0x200>
 8003d1e:	e01b      	b.n	8003d58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d20:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <HAL_RCC_OscConfig+0x248>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d26:	f7fd f8bd 	bl	8000ea4 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d2c:	e00e      	b.n	8003d4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d2e:	f7fd f8b9 	bl	8000ea4 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d907      	bls.n	8003d4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e150      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
 8003d40:	40023800 	.word	0x40023800
 8003d44:	42470000 	.word	0x42470000
 8003d48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d4c:	4b88      	ldr	r3, [pc, #544]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1ea      	bne.n	8003d2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 8097 	beq.w	8003e94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d66:	2300      	movs	r3, #0
 8003d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d6a:	4b81      	ldr	r3, [pc, #516]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10f      	bne.n	8003d96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d76:	2300      	movs	r3, #0
 8003d78:	60bb      	str	r3, [r7, #8]
 8003d7a:	4b7d      	ldr	r3, [pc, #500]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	4a7c      	ldr	r2, [pc, #496]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d84:	6413      	str	r3, [r2, #64]	; 0x40
 8003d86:	4b7a      	ldr	r3, [pc, #488]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8e:	60bb      	str	r3, [r7, #8]
 8003d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d92:	2301      	movs	r3, #1
 8003d94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d96:	4b77      	ldr	r3, [pc, #476]	; (8003f74 <HAL_RCC_OscConfig+0x474>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d118      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003da2:	4b74      	ldr	r3, [pc, #464]	; (8003f74 <HAL_RCC_OscConfig+0x474>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a73      	ldr	r2, [pc, #460]	; (8003f74 <HAL_RCC_OscConfig+0x474>)
 8003da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dae:	f7fd f879 	bl	8000ea4 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db6:	f7fd f875 	bl	8000ea4 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e10c      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc8:	4b6a      	ldr	r3, [pc, #424]	; (8003f74 <HAL_RCC_OscConfig+0x474>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d106      	bne.n	8003dea <HAL_RCC_OscConfig+0x2ea>
 8003ddc:	4b64      	ldr	r3, [pc, #400]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de0:	4a63      	ldr	r2, [pc, #396]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	6713      	str	r3, [r2, #112]	; 0x70
 8003de8:	e01c      	b.n	8003e24 <HAL_RCC_OscConfig+0x324>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2b05      	cmp	r3, #5
 8003df0:	d10c      	bne.n	8003e0c <HAL_RCC_OscConfig+0x30c>
 8003df2:	4b5f      	ldr	r3, [pc, #380]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df6:	4a5e      	ldr	r2, [pc, #376]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003df8:	f043 0304 	orr.w	r3, r3, #4
 8003dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dfe:	4b5c      	ldr	r3, [pc, #368]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e02:	4a5b      	ldr	r2, [pc, #364]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003e04:	f043 0301 	orr.w	r3, r3, #1
 8003e08:	6713      	str	r3, [r2, #112]	; 0x70
 8003e0a:	e00b      	b.n	8003e24 <HAL_RCC_OscConfig+0x324>
 8003e0c:	4b58      	ldr	r3, [pc, #352]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e10:	4a57      	ldr	r2, [pc, #348]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003e12:	f023 0301 	bic.w	r3, r3, #1
 8003e16:	6713      	str	r3, [r2, #112]	; 0x70
 8003e18:	4b55      	ldr	r3, [pc, #340]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1c:	4a54      	ldr	r2, [pc, #336]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003e1e:	f023 0304 	bic.w	r3, r3, #4
 8003e22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d015      	beq.n	8003e58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e2c:	f7fd f83a 	bl	8000ea4 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e32:	e00a      	b.n	8003e4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e34:	f7fd f836 	bl	8000ea4 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e0cb      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e4a:	4b49      	ldr	r3, [pc, #292]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0ee      	beq.n	8003e34 <HAL_RCC_OscConfig+0x334>
 8003e56:	e014      	b.n	8003e82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e58:	f7fd f824 	bl	8000ea4 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e5e:	e00a      	b.n	8003e76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e60:	f7fd f820 	bl	8000ea4 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e0b5      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e76:	4b3e      	ldr	r3, [pc, #248]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1ee      	bne.n	8003e60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e82:	7dfb      	ldrb	r3, [r7, #23]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d105      	bne.n	8003e94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e88:	4b39      	ldr	r3, [pc, #228]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	4a38      	ldr	r2, [pc, #224]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 80a1 	beq.w	8003fe0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e9e:	4b34      	ldr	r3, [pc, #208]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 030c 	and.w	r3, r3, #12
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d05c      	beq.n	8003f64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d141      	bne.n	8003f36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb2:	4b31      	ldr	r3, [pc, #196]	; (8003f78 <HAL_RCC_OscConfig+0x478>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb8:	f7fc fff4 	bl	8000ea4 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ec0:	f7fc fff0 	bl	8000ea4 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e087      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ed2:	4b27      	ldr	r3, [pc, #156]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1f0      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69da      	ldr	r2, [r3, #28]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	019b      	lsls	r3, r3, #6
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	085b      	lsrs	r3, r3, #1
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	041b      	lsls	r3, r3, #16
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	061b      	lsls	r3, r3, #24
 8003f02:	491b      	ldr	r1, [pc, #108]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f08:	4b1b      	ldr	r3, [pc, #108]	; (8003f78 <HAL_RCC_OscConfig+0x478>)
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0e:	f7fc ffc9 	bl	8000ea4 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f16:	f7fc ffc5 	bl	8000ea4 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e05c      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f28:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0f0      	beq.n	8003f16 <HAL_RCC_OscConfig+0x416>
 8003f34:	e054      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f36:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <HAL_RCC_OscConfig+0x478>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3c:	f7fc ffb2 	bl	8000ea4 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f44:	f7fc ffae 	bl	8000ea4 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e045      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f56:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f0      	bne.n	8003f44 <HAL_RCC_OscConfig+0x444>
 8003f62:	e03d      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d107      	bne.n	8003f7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e038      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
 8003f70:	40023800 	.word	0x40023800
 8003f74:	40007000 	.word	0x40007000
 8003f78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f7c:	4b1b      	ldr	r3, [pc, #108]	; (8003fec <HAL_RCC_OscConfig+0x4ec>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d028      	beq.n	8003fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d121      	bne.n	8003fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d11a      	bne.n	8003fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fac:	4013      	ands	r3, r2
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d111      	bne.n	8003fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc2:	085b      	lsrs	r3, r3, #1
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d107      	bne.n	8003fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e000      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3718      	adds	r7, #24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	40023800 	.word	0x40023800

08003ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e0cc      	b.n	800419e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004004:	4b68      	ldr	r3, [pc, #416]	; (80041a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	429a      	cmp	r2, r3
 8004010:	d90c      	bls.n	800402c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004012:	4b65      	ldr	r3, [pc, #404]	; (80041a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	b2d2      	uxtb	r2, r2
 8004018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800401a:	4b63      	ldr	r3, [pc, #396]	; (80041a8 <HAL_RCC_ClockConfig+0x1b8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d001      	beq.n	800402c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e0b8      	b.n	800419e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d020      	beq.n	800407a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004044:	4b59      	ldr	r3, [pc, #356]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	4a58      	ldr	r2, [pc, #352]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800404e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0308 	and.w	r3, r3, #8
 8004058:	2b00      	cmp	r3, #0
 800405a:	d005      	beq.n	8004068 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800405c:	4b53      	ldr	r3, [pc, #332]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	4a52      	ldr	r2, [pc, #328]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004066:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004068:	4b50      	ldr	r3, [pc, #320]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	494d      	ldr	r1, [pc, #308]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 8004076:	4313      	orrs	r3, r2
 8004078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d044      	beq.n	8004110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d107      	bne.n	800409e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408e:	4b47      	ldr	r3, [pc, #284]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d119      	bne.n	80040ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e07f      	b.n	800419e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d003      	beq.n	80040ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040aa:	2b03      	cmp	r3, #3
 80040ac:	d107      	bne.n	80040be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ae:	4b3f      	ldr	r3, [pc, #252]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d109      	bne.n	80040ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e06f      	b.n	800419e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040be:	4b3b      	ldr	r3, [pc, #236]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e067      	b.n	800419e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ce:	4b37      	ldr	r3, [pc, #220]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f023 0203 	bic.w	r2, r3, #3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	4934      	ldr	r1, [pc, #208]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040e0:	f7fc fee0 	bl	8000ea4 <HAL_GetTick>
 80040e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e6:	e00a      	b.n	80040fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e8:	f7fc fedc 	bl	8000ea4 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e04f      	b.n	800419e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fe:	4b2b      	ldr	r3, [pc, #172]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 020c 	and.w	r2, r3, #12
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	429a      	cmp	r2, r3
 800410e:	d1eb      	bne.n	80040e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004110:	4b25      	ldr	r3, [pc, #148]	; (80041a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d20c      	bcs.n	8004138 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411e:	4b22      	ldr	r3, [pc, #136]	; (80041a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004126:	4b20      	ldr	r3, [pc, #128]	; (80041a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	429a      	cmp	r2, r3
 8004132:	d001      	beq.n	8004138 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e032      	b.n	800419e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d008      	beq.n	8004156 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004144:	4b19      	ldr	r3, [pc, #100]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	4916      	ldr	r1, [pc, #88]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	4313      	orrs	r3, r2
 8004154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d009      	beq.n	8004176 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004162:	4b12      	ldr	r3, [pc, #72]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	490e      	ldr	r1, [pc, #56]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	4313      	orrs	r3, r2
 8004174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004176:	f000 f821 	bl	80041bc <HAL_RCC_GetSysClockFreq>
 800417a:	4602      	mov	r2, r0
 800417c:	4b0b      	ldr	r3, [pc, #44]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	091b      	lsrs	r3, r3, #4
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	490a      	ldr	r1, [pc, #40]	; (80041b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004188:	5ccb      	ldrb	r3, [r1, r3]
 800418a:	fa22 f303 	lsr.w	r3, r2, r3
 800418e:	4a09      	ldr	r2, [pc, #36]	; (80041b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004192:	4b09      	ldr	r3, [pc, #36]	; (80041b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f7fc fd6c 	bl	8000c74 <HAL_InitTick>

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40023c00 	.word	0x40023c00
 80041ac:	40023800 	.word	0x40023800
 80041b0:	08008244 	.word	0x08008244
 80041b4:	20000000 	.word	0x20000000
 80041b8:	20000004 	.word	0x20000004

080041bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041c0:	b094      	sub	sp, #80	; 0x50
 80041c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	647b      	str	r3, [r7, #68]	; 0x44
 80041c8:	2300      	movs	r3, #0
 80041ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041cc:	2300      	movs	r3, #0
 80041ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041d4:	4b79      	ldr	r3, [pc, #484]	; (80043bc <HAL_RCC_GetSysClockFreq+0x200>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 030c 	and.w	r3, r3, #12
 80041dc:	2b08      	cmp	r3, #8
 80041de:	d00d      	beq.n	80041fc <HAL_RCC_GetSysClockFreq+0x40>
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	f200 80e1 	bhi.w	80043a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <HAL_RCC_GetSysClockFreq+0x34>
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d003      	beq.n	80041f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80041ee:	e0db      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041f0:	4b73      	ldr	r3, [pc, #460]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80041f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80041f4:	e0db      	b.n	80043ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041f6:	4b73      	ldr	r3, [pc, #460]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80041f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041fa:	e0d8      	b.n	80043ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041fc:	4b6f      	ldr	r3, [pc, #444]	; (80043bc <HAL_RCC_GetSysClockFreq+0x200>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004204:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004206:	4b6d      	ldr	r3, [pc, #436]	; (80043bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d063      	beq.n	80042da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004212:	4b6a      	ldr	r3, [pc, #424]	; (80043bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	099b      	lsrs	r3, r3, #6
 8004218:	2200      	movs	r2, #0
 800421a:	63bb      	str	r3, [r7, #56]	; 0x38
 800421c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800421e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004224:	633b      	str	r3, [r7, #48]	; 0x30
 8004226:	2300      	movs	r3, #0
 8004228:	637b      	str	r3, [r7, #52]	; 0x34
 800422a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800422e:	4622      	mov	r2, r4
 8004230:	462b      	mov	r3, r5
 8004232:	f04f 0000 	mov.w	r0, #0
 8004236:	f04f 0100 	mov.w	r1, #0
 800423a:	0159      	lsls	r1, r3, #5
 800423c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004240:	0150      	lsls	r0, r2, #5
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	4621      	mov	r1, r4
 8004248:	1a51      	subs	r1, r2, r1
 800424a:	6139      	str	r1, [r7, #16]
 800424c:	4629      	mov	r1, r5
 800424e:	eb63 0301 	sbc.w	r3, r3, r1
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004260:	4659      	mov	r1, fp
 8004262:	018b      	lsls	r3, r1, #6
 8004264:	4651      	mov	r1, sl
 8004266:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800426a:	4651      	mov	r1, sl
 800426c:	018a      	lsls	r2, r1, #6
 800426e:	4651      	mov	r1, sl
 8004270:	ebb2 0801 	subs.w	r8, r2, r1
 8004274:	4659      	mov	r1, fp
 8004276:	eb63 0901 	sbc.w	r9, r3, r1
 800427a:	f04f 0200 	mov.w	r2, #0
 800427e:	f04f 0300 	mov.w	r3, #0
 8004282:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004286:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800428a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800428e:	4690      	mov	r8, r2
 8004290:	4699      	mov	r9, r3
 8004292:	4623      	mov	r3, r4
 8004294:	eb18 0303 	adds.w	r3, r8, r3
 8004298:	60bb      	str	r3, [r7, #8]
 800429a:	462b      	mov	r3, r5
 800429c:	eb49 0303 	adc.w	r3, r9, r3
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	f04f 0300 	mov.w	r3, #0
 80042aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042ae:	4629      	mov	r1, r5
 80042b0:	024b      	lsls	r3, r1, #9
 80042b2:	4621      	mov	r1, r4
 80042b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042b8:	4621      	mov	r1, r4
 80042ba:	024a      	lsls	r2, r1, #9
 80042bc:	4610      	mov	r0, r2
 80042be:	4619      	mov	r1, r3
 80042c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c2:	2200      	movs	r2, #0
 80042c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80042c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042cc:	f7fb ff80 	bl	80001d0 <__aeabi_uldivmod>
 80042d0:	4602      	mov	r2, r0
 80042d2:	460b      	mov	r3, r1
 80042d4:	4613      	mov	r3, r2
 80042d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042d8:	e058      	b.n	800438c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042da:	4b38      	ldr	r3, [pc, #224]	; (80043bc <HAL_RCC_GetSysClockFreq+0x200>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	099b      	lsrs	r3, r3, #6
 80042e0:	2200      	movs	r2, #0
 80042e2:	4618      	mov	r0, r3
 80042e4:	4611      	mov	r1, r2
 80042e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042ea:	623b      	str	r3, [r7, #32]
 80042ec:	2300      	movs	r3, #0
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
 80042f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042f4:	4642      	mov	r2, r8
 80042f6:	464b      	mov	r3, r9
 80042f8:	f04f 0000 	mov.w	r0, #0
 80042fc:	f04f 0100 	mov.w	r1, #0
 8004300:	0159      	lsls	r1, r3, #5
 8004302:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004306:	0150      	lsls	r0, r2, #5
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	4641      	mov	r1, r8
 800430e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004312:	4649      	mov	r1, r9
 8004314:	eb63 0b01 	sbc.w	fp, r3, r1
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004324:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004328:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800432c:	ebb2 040a 	subs.w	r4, r2, sl
 8004330:	eb63 050b 	sbc.w	r5, r3, fp
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	00eb      	lsls	r3, r5, #3
 800433e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004342:	00e2      	lsls	r2, r4, #3
 8004344:	4614      	mov	r4, r2
 8004346:	461d      	mov	r5, r3
 8004348:	4643      	mov	r3, r8
 800434a:	18e3      	adds	r3, r4, r3
 800434c:	603b      	str	r3, [r7, #0]
 800434e:	464b      	mov	r3, r9
 8004350:	eb45 0303 	adc.w	r3, r5, r3
 8004354:	607b      	str	r3, [r7, #4]
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004362:	4629      	mov	r1, r5
 8004364:	028b      	lsls	r3, r1, #10
 8004366:	4621      	mov	r1, r4
 8004368:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800436c:	4621      	mov	r1, r4
 800436e:	028a      	lsls	r2, r1, #10
 8004370:	4610      	mov	r0, r2
 8004372:	4619      	mov	r1, r3
 8004374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004376:	2200      	movs	r2, #0
 8004378:	61bb      	str	r3, [r7, #24]
 800437a:	61fa      	str	r2, [r7, #28]
 800437c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004380:	f7fb ff26 	bl	80001d0 <__aeabi_uldivmod>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4613      	mov	r3, r2
 800438a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800438c:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <HAL_RCC_GetSysClockFreq+0x200>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	0c1b      	lsrs	r3, r3, #16
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	3301      	adds	r3, #1
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800439c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800439e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043a6:	e002      	b.n	80043ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043a8:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80043aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3750      	adds	r7, #80	; 0x50
 80043b4:	46bd      	mov	sp, r7
 80043b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ba:	bf00      	nop
 80043bc:	40023800 	.word	0x40023800
 80043c0:	00f42400 	.word	0x00f42400
 80043c4:	007a1200 	.word	0x007a1200

080043c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043cc:	4b03      	ldr	r3, [pc, #12]	; (80043dc <HAL_RCC_GetHCLKFreq+0x14>)
 80043ce:	681b      	ldr	r3, [r3, #0]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	20000000 	.word	0x20000000

080043e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043e4:	f7ff fff0 	bl	80043c8 <HAL_RCC_GetHCLKFreq>
 80043e8:	4602      	mov	r2, r0
 80043ea:	4b05      	ldr	r3, [pc, #20]	; (8004400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	0a9b      	lsrs	r3, r3, #10
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	4903      	ldr	r1, [pc, #12]	; (8004404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043f6:	5ccb      	ldrb	r3, [r1, r3]
 80043f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40023800 	.word	0x40023800
 8004404:	08008254 	.word	0x08008254

08004408 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	220f      	movs	r2, #15
 8004416:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004418:	4b12      	ldr	r3, [pc, #72]	; (8004464 <HAL_RCC_GetClockConfig+0x5c>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 0203 	and.w	r2, r3, #3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004424:	4b0f      	ldr	r3, [pc, #60]	; (8004464 <HAL_RCC_GetClockConfig+0x5c>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004430:	4b0c      	ldr	r3, [pc, #48]	; (8004464 <HAL_RCC_GetClockConfig+0x5c>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800443c:	4b09      	ldr	r3, [pc, #36]	; (8004464 <HAL_RCC_GetClockConfig+0x5c>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	08db      	lsrs	r3, r3, #3
 8004442:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800444a:	4b07      	ldr	r3, [pc, #28]	; (8004468 <HAL_RCC_GetClockConfig+0x60>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0207 	and.w	r2, r3, #7
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	601a      	str	r2, [r3, #0]
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40023800 	.word	0x40023800
 8004468:	40023c00 	.word	0x40023c00

0800446c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004478:	2300      	movs	r3, #0
 800447a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d105      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004490:	2b00      	cmp	r3, #0
 8004492:	d035      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004494:	4b62      	ldr	r3, [pc, #392]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800449a:	f7fc fd03 	bl	8000ea4 <HAL_GetTick>
 800449e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044a0:	e008      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044a2:	f7fc fcff 	bl	8000ea4 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e0b0      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044b4:	4b5b      	ldr	r3, [pc, #364]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1f0      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	019a      	lsls	r2, r3, #6
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	071b      	lsls	r3, r3, #28
 80044cc:	4955      	ldr	r1, [pc, #340]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044d4:	4b52      	ldr	r3, [pc, #328]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80044d6:	2201      	movs	r2, #1
 80044d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044da:	f7fc fce3 	bl	8000ea4 <HAL_GetTick>
 80044de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044e0:	e008      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044e2:	f7fc fcdf 	bl	8000ea4 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e090      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044f4:	4b4b      	ldr	r3, [pc, #300]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0f0      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 8083 	beq.w	8004614 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800450e:	2300      	movs	r3, #0
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	4b44      	ldr	r3, [pc, #272]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	4a43      	ldr	r2, [pc, #268]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800451c:	6413      	str	r3, [r2, #64]	; 0x40
 800451e:	4b41      	ldr	r3, [pc, #260]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800452a:	4b3f      	ldr	r3, [pc, #252]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a3e      	ldr	r2, [pc, #248]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004534:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004536:	f7fc fcb5 	bl	8000ea4 <HAL_GetTick>
 800453a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800453c:	e008      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800453e:	f7fc fcb1 	bl	8000ea4 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e062      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004550:	4b35      	ldr	r3, [pc, #212]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0f0      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800455c:	4b31      	ldr	r3, [pc, #196]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800455e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004564:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d02f      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	429a      	cmp	r2, r3
 8004578:	d028      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800457a:	4b2a      	ldr	r3, [pc, #168]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800457c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004582:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004584:	4b29      	ldr	r3, [pc, #164]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004586:	2201      	movs	r2, #1
 8004588:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800458a:	4b28      	ldr	r3, [pc, #160]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004590:	4a24      	ldr	r2, [pc, #144]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004596:	4b23      	ldr	r3, [pc, #140]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d114      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80045a2:	f7fc fc7f 	bl	8000ea4 <HAL_GetTick>
 80045a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a8:	e00a      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045aa:	f7fc fc7b 	bl	8000ea4 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e02a      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c0:	4b18      	ldr	r3, [pc, #96]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0ee      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045d8:	d10d      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80045da:	4b12      	ldr	r3, [pc, #72]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80045ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ee:	490d      	ldr	r1, [pc, #52]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	608b      	str	r3, [r1, #8]
 80045f4:	e005      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80045f6:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	4a0a      	ldr	r2, [pc, #40]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004600:	6093      	str	r3, [r2, #8]
 8004602:	4b08      	ldr	r3, [pc, #32]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004604:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800460e:	4905      	ldr	r1, [pc, #20]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004610:	4313      	orrs	r3, r2
 8004612:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	42470068 	.word	0x42470068
 8004624:	40023800 	.word	0x40023800
 8004628:	40007000 	.word	0x40007000
 800462c:	42470e40 	.word	0x42470e40

08004630 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004630:	b480      	push	{r7}
 8004632:	b087      	sub	sp, #28
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d13f      	bne.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800464e:	4b24      	ldr	r3, [pc, #144]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d006      	beq.n	800466c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004664:	d12f      	bne.n	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004666:	4b1f      	ldr	r3, [pc, #124]	; (80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004668:	617b      	str	r3, [r7, #20]
          break;
 800466a:	e02f      	b.n	80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800466c:	4b1c      	ldr	r3, [pc, #112]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004674:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004678:	d108      	bne.n	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800467a:	4b19      	ldr	r3, [pc, #100]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004682:	4a19      	ldr	r2, [pc, #100]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004684:	fbb2 f3f3 	udiv	r3, r2, r3
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	e007      	b.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800468c:	4b14      	ldr	r3, [pc, #80]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004694:	4a15      	ldr	r2, [pc, #84]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004696:	fbb2 f3f3 	udiv	r3, r2, r3
 800469a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800469c:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800469e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a2:	099b      	lsrs	r3, r3, #6
 80046a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	fb02 f303 	mul.w	r3, r2, r3
 80046ae:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b6:	0f1b      	lsrs	r3, r3, #28
 80046b8:	f003 0307 	and.w	r3, r3, #7
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c2:	617b      	str	r3, [r7, #20]
          break;
 80046c4:	e002      	b.n	80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	617b      	str	r3, [r7, #20]
          break;
 80046ca:	bf00      	nop
        }
      }
      break;
 80046cc:	e000      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 80046ce:	bf00      	nop
    }
  }
  return frequency;
 80046d0:	697b      	ldr	r3, [r7, #20]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	371c      	adds	r7, #28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	40023800 	.word	0x40023800
 80046e4:	00bb8000 	.word	0x00bb8000
 80046e8:	007a1200 	.word	0x007a1200
 80046ec:	00f42400 	.word	0x00f42400

080046f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e07b      	b.n	80047fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	2b00      	cmp	r3, #0
 8004708:	d108      	bne.n	800471c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004712:	d009      	beq.n	8004728 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	61da      	str	r2, [r3, #28]
 800471a:	e005      	b.n	8004728 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d106      	bne.n	8004748 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7fc fa2c 	bl	8000ba0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800475e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ac:	ea42 0103 	orr.w	r1, r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	0c1b      	lsrs	r3, r3, #16
 80047c6:	f003 0104 	and.w	r1, r3, #4
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	f003 0210 	and.w	r2, r3, #16
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69da      	ldr	r2, [r3, #28]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b082      	sub	sp, #8
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e041      	b.n	8004898 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d106      	bne.n	800482e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7fc fa01 	bl	8000c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2202      	movs	r2, #2
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3304      	adds	r3, #4
 800483e:	4619      	mov	r1, r3
 8004840:	4610      	mov	r0, r2
 8004842:	f000 f9b5 	bl	8004bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3708      	adds	r7, #8
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d001      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e04e      	b.n	8004956 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a23      	ldr	r2, [pc, #140]	; (8004964 <HAL_TIM_Base_Start_IT+0xc4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d022      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x80>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e2:	d01d      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x80>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a1f      	ldr	r2, [pc, #124]	; (8004968 <HAL_TIM_Base_Start_IT+0xc8>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d018      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x80>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a1e      	ldr	r2, [pc, #120]	; (800496c <HAL_TIM_Base_Start_IT+0xcc>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d013      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x80>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a1c      	ldr	r2, [pc, #112]	; (8004970 <HAL_TIM_Base_Start_IT+0xd0>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d00e      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x80>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a1b      	ldr	r2, [pc, #108]	; (8004974 <HAL_TIM_Base_Start_IT+0xd4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d009      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x80>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a19      	ldr	r2, [pc, #100]	; (8004978 <HAL_TIM_Base_Start_IT+0xd8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d004      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x80>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a18      	ldr	r2, [pc, #96]	; (800497c <HAL_TIM_Base_Start_IT+0xdc>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d111      	bne.n	8004944 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 0307 	and.w	r3, r3, #7
 800492a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2b06      	cmp	r3, #6
 8004930:	d010      	beq.n	8004954 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f042 0201 	orr.w	r2, r2, #1
 8004940:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004942:	e007      	b.n	8004954 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0201 	orr.w	r2, r2, #1
 8004952:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	40010000 	.word	0x40010000
 8004968:	40000400 	.word	0x40000400
 800496c:	40000800 	.word	0x40000800
 8004970:	40000c00 	.word	0x40000c00
 8004974:	40010400 	.word	0x40010400
 8004978:	40014000 	.word	0x40014000
 800497c:	40001800 	.word	0x40001800

08004980 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d020      	beq.n	80049e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d01b      	beq.n	80049e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0202 	mvn.w	r2, #2
 80049b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f8d2 	bl	8004b74 <HAL_TIM_IC_CaptureCallback>
 80049d0:	e005      	b.n	80049de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f8c4 	bl	8004b60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f8d5 	bl	8004b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f003 0304 	and.w	r3, r3, #4
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d020      	beq.n	8004a30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d01b      	beq.n	8004a30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f06f 0204 	mvn.w	r2, #4
 8004a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2202      	movs	r2, #2
 8004a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f8ac 	bl	8004b74 <HAL_TIM_IC_CaptureCallback>
 8004a1c:	e005      	b.n	8004a2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f89e 	bl	8004b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f8af 	bl	8004b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d020      	beq.n	8004a7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f003 0308 	and.w	r3, r3, #8
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d01b      	beq.n	8004a7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f06f 0208 	mvn.w	r2, #8
 8004a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2204      	movs	r2, #4
 8004a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f886 	bl	8004b74 <HAL_TIM_IC_CaptureCallback>
 8004a68:	e005      	b.n	8004a76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f878 	bl	8004b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f889 	bl	8004b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f003 0310 	and.w	r3, r3, #16
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d020      	beq.n	8004ac8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f003 0310 	and.w	r3, r3, #16
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d01b      	beq.n	8004ac8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f06f 0210 	mvn.w	r2, #16
 8004a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2208      	movs	r2, #8
 8004a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f860 	bl	8004b74 <HAL_TIM_IC_CaptureCallback>
 8004ab4:	e005      	b.n	8004ac2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f852 	bl	8004b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f863 	bl	8004b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00c      	beq.n	8004aec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d007      	beq.n	8004aec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f06f 0201 	mvn.w	r2, #1
 8004ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7fb ff4e 	bl	8000988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00c      	beq.n	8004b10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d007      	beq.n	8004b10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f906 	bl	8004d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00c      	beq.n	8004b34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d007      	beq.n	8004b34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f834 	bl	8004b9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f003 0320 	and.w	r3, r3, #32
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00c      	beq.n	8004b58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f003 0320 	and.w	r3, r3, #32
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d007      	beq.n	8004b58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0220 	mvn.w	r2, #32
 8004b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f8d8 	bl	8004d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b58:	bf00      	nop
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a46      	ldr	r2, [pc, #280]	; (8004cdc <TIM_Base_SetConfig+0x12c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d013      	beq.n	8004bf0 <TIM_Base_SetConfig+0x40>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bce:	d00f      	beq.n	8004bf0 <TIM_Base_SetConfig+0x40>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a43      	ldr	r2, [pc, #268]	; (8004ce0 <TIM_Base_SetConfig+0x130>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d00b      	beq.n	8004bf0 <TIM_Base_SetConfig+0x40>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a42      	ldr	r2, [pc, #264]	; (8004ce4 <TIM_Base_SetConfig+0x134>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d007      	beq.n	8004bf0 <TIM_Base_SetConfig+0x40>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a41      	ldr	r2, [pc, #260]	; (8004ce8 <TIM_Base_SetConfig+0x138>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d003      	beq.n	8004bf0 <TIM_Base_SetConfig+0x40>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a40      	ldr	r2, [pc, #256]	; (8004cec <TIM_Base_SetConfig+0x13c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d108      	bne.n	8004c02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a35      	ldr	r2, [pc, #212]	; (8004cdc <TIM_Base_SetConfig+0x12c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d02b      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c10:	d027      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a32      	ldr	r2, [pc, #200]	; (8004ce0 <TIM_Base_SetConfig+0x130>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d023      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a31      	ldr	r2, [pc, #196]	; (8004ce4 <TIM_Base_SetConfig+0x134>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d01f      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a30      	ldr	r2, [pc, #192]	; (8004ce8 <TIM_Base_SetConfig+0x138>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d01b      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a2f      	ldr	r2, [pc, #188]	; (8004cec <TIM_Base_SetConfig+0x13c>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d017      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a2e      	ldr	r2, [pc, #184]	; (8004cf0 <TIM_Base_SetConfig+0x140>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d013      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a2d      	ldr	r2, [pc, #180]	; (8004cf4 <TIM_Base_SetConfig+0x144>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d00f      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a2c      	ldr	r2, [pc, #176]	; (8004cf8 <TIM_Base_SetConfig+0x148>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00b      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a2b      	ldr	r2, [pc, #172]	; (8004cfc <TIM_Base_SetConfig+0x14c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d007      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a2a      	ldr	r2, [pc, #168]	; (8004d00 <TIM_Base_SetConfig+0x150>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d003      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a29      	ldr	r2, [pc, #164]	; (8004d04 <TIM_Base_SetConfig+0x154>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d108      	bne.n	8004c74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a10      	ldr	r2, [pc, #64]	; (8004cdc <TIM_Base_SetConfig+0x12c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d003      	beq.n	8004ca8 <TIM_Base_SetConfig+0xf8>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a12      	ldr	r2, [pc, #72]	; (8004cec <TIM_Base_SetConfig+0x13c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d103      	bne.n	8004cb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	691a      	ldr	r2, [r3, #16]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d105      	bne.n	8004cce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	f023 0201 	bic.w	r2, r3, #1
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	611a      	str	r2, [r3, #16]
  }
}
 8004cce:	bf00      	nop
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	40010000 	.word	0x40010000
 8004ce0:	40000400 	.word	0x40000400
 8004ce4:	40000800 	.word	0x40000800
 8004ce8:	40000c00 	.word	0x40000c00
 8004cec:	40010400 	.word	0x40010400
 8004cf0:	40014000 	.word	0x40014000
 8004cf4:	40014400 	.word	0x40014400
 8004cf8:	40014800 	.word	0x40014800
 8004cfc:	40001800 	.word	0x40001800
 8004d00:	40001c00 	.word	0x40001c00
 8004d04:	40002000 	.word	0x40002000

08004d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f043 0201 	orr.w	r2, r3, #1
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f023 0201 	bic.w	r2, r3, #1
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	3301      	adds	r3, #1
 8004d86:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004d8e:	d901      	bls.n	8004d94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e01b      	b.n	8004dcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	daf2      	bge.n	8004d82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	019b      	lsls	r3, r3, #6
 8004da4:	f043 0220 	orr.w	r2, r3, #32
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3301      	adds	r3, #1
 8004db0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004db8:	d901      	bls.n	8004dbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e006      	b.n	8004dcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b20      	cmp	r3, #32
 8004dc8:	d0f0      	beq.n	8004dac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3301      	adds	r3, #1
 8004de8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004df0:	d901      	bls.n	8004df6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e018      	b.n	8004e28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	daf2      	bge.n	8004de4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2210      	movs	r2, #16
 8004e06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004e14:	d901      	bls.n	8004e1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e006      	b.n	8004e28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f003 0310 	and.w	r3, r3, #16
 8004e22:	2b10      	cmp	r3, #16
 8004e24:	d0f0      	beq.n	8004e08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b08b      	sub	sp, #44	; 0x2c
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004e4a:	88fb      	ldrh	r3, [r7, #6]
 8004e4c:	089b      	lsrs	r3, r3, #2
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004e52:	88fb      	ldrh	r3, [r7, #6]
 8004e54:	f003 0303 	and.w	r3, r3, #3
 8004e58:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	623b      	str	r3, [r7, #32]
 8004e5e:	e014      	b.n	8004e8a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	3301      	adds	r3, #1
 8004e70:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	3301      	adds	r3, #1
 8004e76:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	3301      	adds	r3, #1
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	3301      	adds	r3, #1
 8004e88:	623b      	str	r3, [r7, #32]
 8004e8a:	6a3a      	ldr	r2, [r7, #32]
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d3e6      	bcc.n	8004e60 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004e92:	8bfb      	ldrh	r3, [r7, #30]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d01e      	beq.n	8004ed6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f107 0310 	add.w	r3, r7, #16
 8004ea8:	6812      	ldr	r2, [r2, #0]
 8004eaa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	701a      	strb	r2, [r3, #0]
      i++;
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	623b      	str	r3, [r7, #32]
      pDest++;
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004eca:	8bfb      	ldrh	r3, [r7, #30]
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004ed0:	8bfb      	ldrh	r3, [r7, #30]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1ea      	bne.n	8004eac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	372c      	adds	r7, #44	; 0x2c
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004efc:	68fb      	ldr	r3, [r7, #12]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b085      	sub	sp, #20
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	460b      	mov	r3, r1
 8004f14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8004f1a:	78fb      	ldrb	r3, [r7, #3]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8004f2a:	78fb      	ldrb	r3, [r7, #3]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004f3e:	68bb      	ldr	r3, [r7, #8]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	f003 0301 	and.w	r3, r3, #1
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f86:	f023 0303 	bic.w	r3, r3, #3
 8004f8a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	78fb      	ldrb	r3, [r7, #3]
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	68f9      	ldr	r1, [r7, #12]
 8004f9c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004fa4:	78fb      	ldrb	r3, [r7, #3]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d107      	bne.n	8004fba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004fb6:	6053      	str	r3, [r2, #4]
 8004fb8:	e00c      	b.n	8004fd4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8004fba:	78fb      	ldrb	r3, [r7, #3]
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d107      	bne.n	8004fd0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f241 7370 	movw	r3, #6000	; 0x1770
 8004fcc:	6053      	str	r3, [r2, #4]
 8004fce:	e001      	b.n	8004fd4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e000      	b.n	8004fd6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b085      	sub	sp, #20
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	b29b      	uxth	r3, r3
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005004:	b480      	push	{r7}
 8005006:	b089      	sub	sp, #36	; 0x24
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	460b      	mov	r3, r1
 800500e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005014:	78fb      	ldrb	r3, [r7, #3]
 8005016:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005018:	2300      	movs	r3, #0
 800501a:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	4413      	add	r3, r2
 8005024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	0c9b      	lsrs	r3, r3, #18
 800502c:	f003 0303 	and.w	r3, r3, #3
 8005030:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	4413      	add	r3, r2
 800503a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	0fdb      	lsrs	r3, r3, #31
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	4413      	add	r3, r2
 8005050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	0fdb      	lsrs	r3, r3, #31
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 0320 	and.w	r3, r3, #32
 8005066:	2b20      	cmp	r3, #32
 8005068:	d10d      	bne.n	8005086 <USB_HC_Halt+0x82>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10a      	bne.n	8005086 <USB_HC_Halt+0x82>
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d005      	beq.n	8005082 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d002      	beq.n	8005082 <USB_HC_Halt+0x7e>
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	2b03      	cmp	r3, #3
 8005080:	d101      	bne.n	8005086 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	e0d8      	b.n	8005238 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <USB_HC_Halt+0x8e>
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	2b02      	cmp	r3, #2
 8005090:	d173      	bne.n	800517a <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	4413      	add	r3, r2
 800509a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	0151      	lsls	r1, r2, #5
 80050a4:	69fa      	ldr	r2, [r7, #28]
 80050a6:	440a      	add	r2, r1
 80050a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050b0:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d14a      	bne.n	8005154 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d133      	bne.n	8005132 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	0151      	lsls	r1, r2, #5
 80050dc:	69fa      	ldr	r2, [r7, #28]
 80050de:	440a      	add	r2, r1
 80050e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050e8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	0151      	lsls	r1, r2, #5
 80050fc:	69fa      	ldr	r2, [r7, #28]
 80050fe:	440a      	add	r2, r1
 8005100:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005104:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005108:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	3301      	adds	r3, #1
 800510e:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005116:	d82e      	bhi.n	8005176 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	4413      	add	r3, r2
 8005120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800512a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800512e:	d0ec      	beq.n	800510a <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005130:	e081      	b.n	8005236 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	4413      	add	r3, r2
 800513a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	0151      	lsls	r1, r2, #5
 8005144:	69fa      	ldr	r2, [r7, #28]
 8005146:	440a      	add	r2, r1
 8005148:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800514c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005150:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005152:	e070      	b.n	8005236 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	4413      	add	r3, r2
 800515c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	0151      	lsls	r1, r2, #5
 8005166:	69fa      	ldr	r2, [r7, #28]
 8005168:	440a      	add	r2, r1
 800516a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800516e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005172:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005174:	e05f      	b.n	8005236 <USB_HC_Halt+0x232>
            break;
 8005176:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005178:	e05d      	b.n	8005236 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	4413      	add	r3, r2
 8005182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	0151      	lsls	r1, r2, #5
 800518c:	69fa      	ldr	r2, [r7, #28]
 800518e:	440a      	add	r2, r1
 8005190:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005194:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005198:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d133      	bne.n	8005212 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	0151      	lsls	r1, r2, #5
 80051bc:	69fa      	ldr	r2, [r7, #28]
 80051be:	440a      	add	r2, r1
 80051c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051c8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	0151      	lsls	r1, r2, #5
 80051dc:	69fa      	ldr	r2, [r7, #28]
 80051de:	440a      	add	r2, r1
 80051e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051e8:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	3301      	adds	r3, #1
 80051ee:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051f6:	d81d      	bhi.n	8005234 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800520a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800520e:	d0ec      	beq.n	80051ea <USB_HC_Halt+0x1e6>
 8005210:	e011      	b.n	8005236 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	4413      	add	r3, r2
 800521a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	0151      	lsls	r1, r2, #5
 8005224:	69fa      	ldr	r2, [r7, #28]
 8005226:	440a      	add	r2, r1
 8005228:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800522c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	e000      	b.n	8005236 <USB_HC_Halt+0x232>
          break;
 8005234:	bf00      	nop
    }
  }

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3724      	adds	r7, #36	; 0x24
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b088      	sub	sp, #32
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800524c:	2300      	movs	r3, #0
 800524e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7ff fd7a 	bl	8004d52 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800525e:	2110      	movs	r1, #16
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f7ff fd87 	bl	8004d74 <USB_FlushTxFifo>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7ff fdb1 	bl	8004dd8 <USB_FlushRxFifo>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005280:	2300      	movs	r3, #0
 8005282:	61bb      	str	r3, [r7, #24]
 8005284:	e01f      	b.n	80052c6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	4413      	add	r3, r2
 800528e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800529c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052a4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052ac:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ba:	461a      	mov	r2, r3
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	3301      	adds	r3, #1
 80052c4:	61bb      	str	r3, [r7, #24]
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	2b0f      	cmp	r3, #15
 80052ca:	d9dc      	bls.n	8005286 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80052cc:	2300      	movs	r3, #0
 80052ce:	61bb      	str	r3, [r7, #24]
 80052d0:	e034      	b.n	800533c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052e8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052f0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052f8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	4413      	add	r3, r2
 8005302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005306:	461a      	mov	r2, r3
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	3301      	adds	r3, #1
 8005310:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005318:	d80c      	bhi.n	8005334 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	4413      	add	r3, r2
 8005322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800532c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005330:	d0ec      	beq.n	800530c <USB_StopHost+0xc8>
 8005332:	e000      	b.n	8005336 <USB_StopHost+0xf2>
        break;
 8005334:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	3301      	adds	r3, #1
 800533a:	61bb      	str	r3, [r7, #24]
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	2b0f      	cmp	r3, #15
 8005340:	d9c7      	bls.n	80052d2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005348:	461a      	mov	r2, r3
 800534a:	f04f 33ff 	mov.w	r3, #4294967295
 800534e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f04f 32ff 	mov.w	r2, #4294967295
 8005356:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7ff fce9 	bl	8004d30 <USB_EnableGlobalInt>

  return ret;
 800535e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005360:	4618      	mov	r0, r3
 8005362:	3720      	adds	r7, #32
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005376:	1c5a      	adds	r2, r3, #1
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f804 	bl	800538c <USBH_HandleSof>
}
 8005384:	bf00      	nop
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b0b      	cmp	r3, #11
 800539c:	d10a      	bne.n	80053b4 <USBH_HandleSof+0x28>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d005      	beq.n	80053b4 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	4798      	blx	r3
  }
}
 80053b4:	bf00      	nop
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80053e0:	2300      	movs	r3, #0
 80053e2:	2200      	movs	r2, #0
 80053e4:	f000 f8d0 	bl	8005588 <osMessageQueuePut>
#endif
#endif

  return;
 80053e8:	bf00      	nop
}
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8005400:	bf00      	nop
}
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8005440:	2300      	movs	r3, #0
 8005442:	2200      	movs	r2, #0
 8005444:	f000 f8a0 	bl	8005588 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b082      	sub	sp, #8
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f002 fd92 	bl	8007f9c <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	791b      	ldrb	r3, [r3, #4]
 800547c:	4619      	mov	r1, r3
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f830 	bl	80054e4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	795b      	ldrb	r3, [r3, #5]
 8005488:	4619      	mov	r1, r3
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f82a 	bl	80054e4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80054a4:	2300      	movs	r3, #0
 80054a6:	2200      	movs	r2, #0
 80054a8:	f000 f86e 	bl	8005588 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b082      	sub	sp, #8
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80054d2:	2300      	movs	r3, #0
 80054d4:	2200      	movs	r2, #0
 80054d6:	f000 f857 	bl	8005588 <osMessageQueuePut>
#endif

  return USBH_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	460b      	mov	r3, r1
 80054ee:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80054f0:	78fb      	ldrb	r3, [r7, #3]
 80054f2:	2b0f      	cmp	r3, #15
 80054f4:	d80d      	bhi.n	8005512 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80054f6:	78fb      	ldrb	r3, [r7, #3]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	33e0      	adds	r3, #224	; 0xe0
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	78fb      	ldrb	r3, [r7, #3]
 8005504:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8005508:	6879      	ldr	r1, [r7, #4]
 800550a:	33e0      	adds	r3, #224	; 0xe0
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	440b      	add	r3, r1
 8005510:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005524:	4b05      	ldr	r3, [pc, #20]	; (800553c <SysTick_Handler+0x1c>)
 8005526:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005528:	f001 fc76 	bl	8006e18 <xTaskGetSchedulerState>
 800552c:	4603      	mov	r3, r0
 800552e:	2b01      	cmp	r3, #1
 8005530:	d001      	beq.n	8005536 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005532:	f002 fa61 	bl	80079f8 <xPortSysTickHandler>
  }
}
 8005536:	bf00      	nop
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	e000e010 	.word	0xe000e010

08005540 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005546:	f3ef 8305 	mrs	r3, IPSR
 800554a:	603b      	str	r3, [r7, #0]
  return(result);
 800554c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005552:	f06f 0305 	mvn.w	r3, #5
 8005556:	607b      	str	r3, [r7, #4]
 8005558:	e00c      	b.n	8005574 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800555a:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <osKernelInitialize+0x44>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d105      	bne.n	800556e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005562:	4b08      	ldr	r3, [pc, #32]	; (8005584 <osKernelInitialize+0x44>)
 8005564:	2201      	movs	r2, #1
 8005566:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005568:	2300      	movs	r3, #0
 800556a:	607b      	str	r3, [r7, #4]
 800556c:	e002      	b.n	8005574 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800556e:	f04f 33ff 	mov.w	r3, #4294967295
 8005572:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005574:	687b      	ldr	r3, [r7, #4]
}
 8005576:	4618      	mov	r0, r3
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	20000204 	.word	0x20000204

08005588 <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005588:	b580      	push	{r7, lr}
 800558a:	b088      	sub	sp, #32
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	603b      	str	r3, [r7, #0]
 8005594:	4613      	mov	r3, r2
 8005596:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800559c:	2300      	movs	r3, #0
 800559e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055a0:	f3ef 8305 	mrs	r3, IPSR
 80055a4:	617b      	str	r3, [r7, #20]
  return(result);
 80055a6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d028      	beq.n	80055fe <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d005      	beq.n	80055be <osMessageQueuePut+0x36>
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <osMessageQueuePut+0x36>
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80055be:	f06f 0303 	mvn.w	r3, #3
 80055c2:	61fb      	str	r3, [r7, #28]
 80055c4:	e038      	b.n	8005638 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80055c6:	2300      	movs	r3, #0
 80055c8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80055ca:	f107 0210 	add.w	r2, r7, #16
 80055ce:	2300      	movs	r3, #0
 80055d0:	68b9      	ldr	r1, [r7, #8]
 80055d2:	69b8      	ldr	r0, [r7, #24]
 80055d4:	f000 fb22 	bl	8005c1c <xQueueGenericSendFromISR>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d003      	beq.n	80055e6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80055de:	f06f 0302 	mvn.w	r3, #2
 80055e2:	61fb      	str	r3, [r7, #28]
 80055e4:	e028      	b.n	8005638 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d025      	beq.n	8005638 <osMessageQueuePut+0xb0>
 80055ec:	4b15      	ldr	r3, [pc, #84]	; (8005644 <osMessageQueuePut+0xbc>)
 80055ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	e01c      	b.n	8005638 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <osMessageQueuePut+0x82>
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d103      	bne.n	8005612 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800560a:	f06f 0303 	mvn.w	r3, #3
 800560e:	61fb      	str	r3, [r7, #28]
 8005610:	e012      	b.n	8005638 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005612:	2300      	movs	r3, #0
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	68b9      	ldr	r1, [r7, #8]
 8005618:	69b8      	ldr	r0, [r7, #24]
 800561a:	f000 fa01 	bl	8005a20 <xQueueGenericSend>
 800561e:	4603      	mov	r3, r0
 8005620:	2b01      	cmp	r3, #1
 8005622:	d009      	beq.n	8005638 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d003      	beq.n	8005632 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800562a:	f06f 0301 	mvn.w	r3, #1
 800562e:	61fb      	str	r3, [r7, #28]
 8005630:	e002      	b.n	8005638 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005632:	f06f 0302 	mvn.w	r3, #2
 8005636:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005638:	69fb      	ldr	r3, [r7, #28]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3720      	adds	r7, #32
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	e000ed04 	.word	0xe000ed04

08005648 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4a07      	ldr	r2, [pc, #28]	; (8005674 <vApplicationGetIdleTaskMemory+0x2c>)
 8005658:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	4a06      	ldr	r2, [pc, #24]	; (8005678 <vApplicationGetIdleTaskMemory+0x30>)
 800565e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2280      	movs	r2, #128	; 0x80
 8005664:	601a      	str	r2, [r3, #0]
}
 8005666:	bf00      	nop
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	20000208 	.word	0x20000208
 8005678:	200002b0 	.word	0x200002b0

0800567c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4a07      	ldr	r2, [pc, #28]	; (80056a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800568c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	4a06      	ldr	r2, [pc, #24]	; (80056ac <vApplicationGetTimerTaskMemory+0x30>)
 8005692:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f44f 7280 	mov.w	r2, #256	; 0x100
 800569a:	601a      	str	r2, [r3, #0]
}
 800569c:	bf00      	nop
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	200004b0 	.word	0x200004b0
 80056ac:	20000558 	.word	0x20000558

080056b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f103 0208 	add.w	r2, r3, #8
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f04f 32ff 	mov.w	r2, #4294967295
 80056c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f103 0208 	add.w	r2, r3, #8
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f103 0208 	add.w	r2, r3, #8
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056fe:	bf00      	nop
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800570a:	b480      	push	{r7}
 800570c:	b085      	sub	sp, #20
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	601a      	str	r2, [r3, #0]
}
 8005746:	bf00      	nop
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005752:	b480      	push	{r7}
 8005754:	b085      	sub	sp, #20
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005768:	d103      	bne.n	8005772 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	e00c      	b.n	800578c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	3308      	adds	r3, #8
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	e002      	b.n	8005780 <vListInsert+0x2e>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	429a      	cmp	r2, r3
 800578a:	d2f6      	bcs.n	800577a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	601a      	str	r2, [r3, #0]
}
 80057b8:	bf00      	nop
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	6892      	ldr	r2, [r2, #8]
 80057da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	6852      	ldr	r2, [r2, #4]
 80057e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d103      	bne.n	80057f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	1e5a      	subs	r2, r3, #1
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10a      	bne.n	8005842 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800582c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005830:	f383 8811 	msr	BASEPRI, r3
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800583e:	bf00      	nop
 8005840:	e7fe      	b.n	8005840 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005842:	f002 f847 	bl	80078d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584e:	68f9      	ldr	r1, [r7, #12]
 8005850:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005852:	fb01 f303 	mul.w	r3, r1, r3
 8005856:	441a      	add	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005872:	3b01      	subs	r3, #1
 8005874:	68f9      	ldr	r1, [r7, #12]
 8005876:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005878:	fb01 f303 	mul.w	r3, r1, r3
 800587c:	441a      	add	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	22ff      	movs	r2, #255	; 0xff
 8005886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	22ff      	movs	r2, #255	; 0xff
 800588e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d114      	bne.n	80058c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d01a      	beq.n	80058d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	3310      	adds	r3, #16
 80058a4:	4618      	mov	r0, r3
 80058a6:	f001 f8f5 	bl	8006a94 <xTaskRemoveFromEventList>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d012      	beq.n	80058d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80058b0:	4b0c      	ldr	r3, [pc, #48]	; (80058e4 <xQueueGenericReset+0xcc>)
 80058b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	e009      	b.n	80058d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	3310      	adds	r3, #16
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7ff fef2 	bl	80056b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	3324      	adds	r3, #36	; 0x24
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7ff feed 	bl	80056b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80058d6:	f002 f82d 	bl	8007934 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80058da:	2301      	movs	r3, #1
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	e000ed04 	.word	0xe000ed04

080058e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08e      	sub	sp, #56	; 0x38
 80058ec:	af02      	add	r7, sp, #8
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
 80058f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10a      	bne.n	8005912 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800590e:	bf00      	nop
 8005910:	e7fe      	b.n	8005910 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10a      	bne.n	800592e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	627b      	str	r3, [r7, #36]	; 0x24
}
 800592a:	bf00      	nop
 800592c:	e7fe      	b.n	800592c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <xQueueGenericCreateStatic+0x52>
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <xQueueGenericCreateStatic+0x56>
 800593a:	2301      	movs	r3, #1
 800593c:	e000      	b.n	8005940 <xQueueGenericCreateStatic+0x58>
 800593e:	2300      	movs	r3, #0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10a      	bne.n	800595a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005948:	f383 8811 	msr	BASEPRI, r3
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	623b      	str	r3, [r7, #32]
}
 8005956:	bf00      	nop
 8005958:	e7fe      	b.n	8005958 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d102      	bne.n	8005966 <xQueueGenericCreateStatic+0x7e>
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <xQueueGenericCreateStatic+0x82>
 8005966:	2301      	movs	r3, #1
 8005968:	e000      	b.n	800596c <xQueueGenericCreateStatic+0x84>
 800596a:	2300      	movs	r3, #0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10a      	bne.n	8005986 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	61fb      	str	r3, [r7, #28]
}
 8005982:	bf00      	nop
 8005984:	e7fe      	b.n	8005984 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005986:	2350      	movs	r3, #80	; 0x50
 8005988:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2b50      	cmp	r3, #80	; 0x50
 800598e:	d00a      	beq.n	80059a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	61bb      	str	r3, [r7, #24]
}
 80059a2:	bf00      	nop
 80059a4:	e7fe      	b.n	80059a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80059a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80059ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00d      	beq.n	80059ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80059b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80059be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	4613      	mov	r3, r2
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	68b9      	ldr	r1, [r7, #8]
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 f805 	bl	80059d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80059ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3730      	adds	r7, #48	; 0x30
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d103      	bne.n	80059f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	e002      	b.n	80059fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a06:	2101      	movs	r1, #1
 8005a08:	69b8      	ldr	r0, [r7, #24]
 8005a0a:	f7ff ff05 	bl	8005818 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	78fa      	ldrb	r2, [r7, #3]
 8005a12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a16:	bf00      	nop
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
	...

08005a20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b08e      	sub	sp, #56	; 0x38
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
 8005a2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10a      	bne.n	8005a52 <xQueueGenericSend+0x32>
	__asm volatile
 8005a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a4e:	bf00      	nop
 8005a50:	e7fe      	b.n	8005a50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d103      	bne.n	8005a60 <xQueueGenericSend+0x40>
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <xQueueGenericSend+0x44>
 8005a60:	2301      	movs	r3, #1
 8005a62:	e000      	b.n	8005a66 <xQueueGenericSend+0x46>
 8005a64:	2300      	movs	r3, #0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10a      	bne.n	8005a80 <xQueueGenericSend+0x60>
	__asm volatile
 8005a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a7c:	bf00      	nop
 8005a7e:	e7fe      	b.n	8005a7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d103      	bne.n	8005a8e <xQueueGenericSend+0x6e>
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d101      	bne.n	8005a92 <xQueueGenericSend+0x72>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e000      	b.n	8005a94 <xQueueGenericSend+0x74>
 8005a92:	2300      	movs	r3, #0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10a      	bne.n	8005aae <xQueueGenericSend+0x8e>
	__asm volatile
 8005a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9c:	f383 8811 	msr	BASEPRI, r3
 8005aa0:	f3bf 8f6f 	isb	sy
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	623b      	str	r3, [r7, #32]
}
 8005aaa:	bf00      	nop
 8005aac:	e7fe      	b.n	8005aac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005aae:	f001 f9b3 	bl	8006e18 <xTaskGetSchedulerState>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d102      	bne.n	8005abe <xQueueGenericSend+0x9e>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <xQueueGenericSend+0xa2>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e000      	b.n	8005ac4 <xQueueGenericSend+0xa4>
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10a      	bne.n	8005ade <xQueueGenericSend+0xbe>
	__asm volatile
 8005ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005acc:	f383 8811 	msr	BASEPRI, r3
 8005ad0:	f3bf 8f6f 	isb	sy
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	61fb      	str	r3, [r7, #28]
}
 8005ada:	bf00      	nop
 8005adc:	e7fe      	b.n	8005adc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ade:	f001 fef9 	bl	80078d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d302      	bcc.n	8005af4 <xQueueGenericSend+0xd4>
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d129      	bne.n	8005b48 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005afa:	f000 fa0b 	bl	8005f14 <prvCopyDataToQueue>
 8005afe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d010      	beq.n	8005b2a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0a:	3324      	adds	r3, #36	; 0x24
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 ffc1 	bl	8006a94 <xTaskRemoveFromEventList>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d013      	beq.n	8005b40 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005b18:	4b3f      	ldr	r3, [pc, #252]	; (8005c18 <xQueueGenericSend+0x1f8>)
 8005b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	e00a      	b.n	8005b40 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d007      	beq.n	8005b40 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005b30:	4b39      	ldr	r3, [pc, #228]	; (8005c18 <xQueueGenericSend+0x1f8>)
 8005b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005b40:	f001 fef8 	bl	8007934 <vPortExitCritical>
				return pdPASS;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e063      	b.n	8005c10 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d103      	bne.n	8005b56 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b4e:	f001 fef1 	bl	8007934 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005b52:	2300      	movs	r3, #0
 8005b54:	e05c      	b.n	8005c10 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d106      	bne.n	8005b6a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b5c:	f107 0314 	add.w	r3, r7, #20
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 fffb 	bl	8006b5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b66:	2301      	movs	r3, #1
 8005b68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b6a:	f001 fee3 	bl	8007934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b6e:	f000 fd67 	bl	8006640 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b72:	f001 feaf 	bl	80078d4 <vPortEnterCritical>
 8005b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b7c:	b25b      	sxtb	r3, r3
 8005b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b82:	d103      	bne.n	8005b8c <xQueueGenericSend+0x16c>
 8005b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b92:	b25b      	sxtb	r3, r3
 8005b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b98:	d103      	bne.n	8005ba2 <xQueueGenericSend+0x182>
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ba2:	f001 fec7 	bl	8007934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ba6:	1d3a      	adds	r2, r7, #4
 8005ba8:	f107 0314 	add.w	r3, r7, #20
 8005bac:	4611      	mov	r1, r2
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 ffea 	bl	8006b88 <xTaskCheckForTimeOut>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d124      	bne.n	8005c04 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005bba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bbc:	f000 faa2 	bl	8006104 <prvIsQueueFull>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d018      	beq.n	8005bf8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	3310      	adds	r3, #16
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	4611      	mov	r1, r2
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 ff10 	bl	80069f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005bd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bd6:	f000 fa2d 	bl	8006034 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005bda:	f000 fd3f 	bl	800665c <xTaskResumeAll>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f47f af7c 	bne.w	8005ade <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005be6:	4b0c      	ldr	r3, [pc, #48]	; (8005c18 <xQueueGenericSend+0x1f8>)
 8005be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	e772      	b.n	8005ade <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005bf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bfa:	f000 fa1b 	bl	8006034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bfe:	f000 fd2d 	bl	800665c <xTaskResumeAll>
 8005c02:	e76c      	b.n	8005ade <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005c04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c06:	f000 fa15 	bl	8006034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c0a:	f000 fd27 	bl	800665c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3738      	adds	r7, #56	; 0x38
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	e000ed04 	.word	0xe000ed04

08005c1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b090      	sub	sp, #64	; 0x40
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
 8005c28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10a      	bne.n	8005c4a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c38:	f383 8811 	msr	BASEPRI, r3
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f3bf 8f4f 	dsb	sy
 8005c44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c46:	bf00      	nop
 8005c48:	e7fe      	b.n	8005c48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d103      	bne.n	8005c58 <xQueueGenericSendFromISR+0x3c>
 8005c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <xQueueGenericSendFromISR+0x40>
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e000      	b.n	8005c5e <xQueueGenericSendFromISR+0x42>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10a      	bne.n	8005c78 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c66:	f383 8811 	msr	BASEPRI, r3
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c74:	bf00      	nop
 8005c76:	e7fe      	b.n	8005c76 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d103      	bne.n	8005c86 <xQueueGenericSendFromISR+0x6a>
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d101      	bne.n	8005c8a <xQueueGenericSendFromISR+0x6e>
 8005c86:	2301      	movs	r3, #1
 8005c88:	e000      	b.n	8005c8c <xQueueGenericSendFromISR+0x70>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10a      	bne.n	8005ca6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	623b      	str	r3, [r7, #32]
}
 8005ca2:	bf00      	nop
 8005ca4:	e7fe      	b.n	8005ca4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ca6:	f001 fef7 	bl	8007a98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005caa:	f3ef 8211 	mrs	r2, BASEPRI
 8005cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	61fa      	str	r2, [r7, #28]
 8005cc0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005cc2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cc4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d302      	bcc.n	8005cd8 <xQueueGenericSendFromISR+0xbc>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d12f      	bne.n	8005d38 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	68b9      	ldr	r1, [r7, #8]
 8005cec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005cee:	f000 f911 	bl	8005f14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005cf2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfa:	d112      	bne.n	8005d22 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d016      	beq.n	8005d32 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d06:	3324      	adds	r3, #36	; 0x24
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 fec3 	bl	8006a94 <xTaskRemoveFromEventList>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00e      	beq.n	8005d32 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00b      	beq.n	8005d32 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	e007      	b.n	8005d32 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d26:	3301      	adds	r3, #1
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	b25a      	sxtb	r2, r3
 8005d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005d32:	2301      	movs	r3, #1
 8005d34:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005d36:	e001      	b.n	8005d3c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d3e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3740      	adds	r7, #64	; 0x40
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
	...

08005d54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08c      	sub	sp, #48	; 0x30
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d60:	2300      	movs	r3, #0
 8005d62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10a      	bne.n	8005d84 <xQueueReceive+0x30>
	__asm volatile
 8005d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	623b      	str	r3, [r7, #32]
}
 8005d80:	bf00      	nop
 8005d82:	e7fe      	b.n	8005d82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d103      	bne.n	8005d92 <xQueueReceive+0x3e>
 8005d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <xQueueReceive+0x42>
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <xQueueReceive+0x44>
 8005d96:	2300      	movs	r3, #0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10a      	bne.n	8005db2 <xQueueReceive+0x5e>
	__asm volatile
 8005d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	61fb      	str	r3, [r7, #28]
}
 8005dae:	bf00      	nop
 8005db0:	e7fe      	b.n	8005db0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005db2:	f001 f831 	bl	8006e18 <xTaskGetSchedulerState>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d102      	bne.n	8005dc2 <xQueueReceive+0x6e>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <xQueueReceive+0x72>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e000      	b.n	8005dc8 <xQueueReceive+0x74>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10a      	bne.n	8005de2 <xQueueReceive+0x8e>
	__asm volatile
 8005dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	61bb      	str	r3, [r7, #24]
}
 8005dde:	bf00      	nop
 8005de0:	e7fe      	b.n	8005de0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005de2:	f001 fd77 	bl	80078d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d01f      	beq.n	8005e32 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005df2:	68b9      	ldr	r1, [r7, #8]
 8005df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005df6:	f000 f8f7 	bl	8005fe8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	1e5a      	subs	r2, r3, #1
 8005dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00f      	beq.n	8005e2a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0c:	3310      	adds	r3, #16
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 fe40 	bl	8006a94 <xTaskRemoveFromEventList>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d007      	beq.n	8005e2a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e1a:	4b3d      	ldr	r3, [pc, #244]	; (8005f10 <xQueueReceive+0x1bc>)
 8005e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e2a:	f001 fd83 	bl	8007934 <vPortExitCritical>
				return pdPASS;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e069      	b.n	8005f06 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d103      	bne.n	8005e40 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e38:	f001 fd7c 	bl	8007934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	e062      	b.n	8005f06 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d106      	bne.n	8005e54 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e46:	f107 0310 	add.w	r3, r7, #16
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 fe86 	bl	8006b5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e50:	2301      	movs	r3, #1
 8005e52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e54:	f001 fd6e 	bl	8007934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e58:	f000 fbf2 	bl	8006640 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e5c:	f001 fd3a 	bl	80078d4 <vPortEnterCritical>
 8005e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e66:	b25b      	sxtb	r3, r3
 8005e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6c:	d103      	bne.n	8005e76 <xQueueReceive+0x122>
 8005e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e7c:	b25b      	sxtb	r3, r3
 8005e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e82:	d103      	bne.n	8005e8c <xQueueReceive+0x138>
 8005e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e8c:	f001 fd52 	bl	8007934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e90:	1d3a      	adds	r2, r7, #4
 8005e92:	f107 0310 	add.w	r3, r7, #16
 8005e96:	4611      	mov	r1, r2
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 fe75 	bl	8006b88 <xTaskCheckForTimeOut>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d123      	bne.n	8005eec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ea6:	f000 f917 	bl	80060d8 <prvIsQueueEmpty>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d017      	beq.n	8005ee0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb2:	3324      	adds	r3, #36	; 0x24
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	4611      	mov	r1, r2
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f000 fd9b 	bl	80069f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ec0:	f000 f8b8 	bl	8006034 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ec4:	f000 fbca 	bl	800665c <xTaskResumeAll>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d189      	bne.n	8005de2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005ece:	4b10      	ldr	r3, [pc, #64]	; (8005f10 <xQueueReceive+0x1bc>)
 8005ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	e780      	b.n	8005de2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ee2:	f000 f8a7 	bl	8006034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ee6:	f000 fbb9 	bl	800665c <xTaskResumeAll>
 8005eea:	e77a      	b.n	8005de2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eee:	f000 f8a1 	bl	8006034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ef2:	f000 fbb3 	bl	800665c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ef6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ef8:	f000 f8ee 	bl	80060d8 <prvIsQueueEmpty>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f43f af6f 	beq.w	8005de2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3730      	adds	r7, #48	; 0x30
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	e000ed04 	.word	0xe000ed04

08005f14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f20:	2300      	movs	r3, #0
 8005f22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10d      	bne.n	8005f4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d14d      	bne.n	8005fd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f000 ff88 	bl	8006e54 <xTaskPriorityDisinherit>
 8005f44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	609a      	str	r2, [r3, #8]
 8005f4c:	e043      	b.n	8005fd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d119      	bne.n	8005f88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6858      	ldr	r0, [r3, #4]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	68b9      	ldr	r1, [r7, #8]
 8005f60:	f002 f8f4 	bl	800814c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	685a      	ldr	r2, [r3, #4]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6c:	441a      	add	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d32b      	bcc.n	8005fd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	605a      	str	r2, [r3, #4]
 8005f86:	e026      	b.n	8005fd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	68d8      	ldr	r0, [r3, #12]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f90:	461a      	mov	r2, r3
 8005f92:	68b9      	ldr	r1, [r7, #8]
 8005f94:	f002 f8da 	bl	800814c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	68da      	ldr	r2, [r3, #12]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa0:	425b      	negs	r3, r3
 8005fa2:	441a      	add	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	68da      	ldr	r2, [r3, #12]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d207      	bcs.n	8005fc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	689a      	ldr	r2, [r3, #8]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbc:	425b      	negs	r3, r3
 8005fbe:	441a      	add	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d105      	bne.n	8005fd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	1c5a      	adds	r2, r3, #1
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005fde:	697b      	ldr	r3, [r7, #20]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d018      	beq.n	800602c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68da      	ldr	r2, [r3, #12]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	441a      	add	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68da      	ldr	r2, [r3, #12]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	429a      	cmp	r2, r3
 8006012:	d303      	bcc.n	800601c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68d9      	ldr	r1, [r3, #12]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006024:	461a      	mov	r2, r3
 8006026:	6838      	ldr	r0, [r7, #0]
 8006028:	f002 f890 	bl	800814c <memcpy>
	}
}
 800602c:	bf00      	nop
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800603c:	f001 fc4a 	bl	80078d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006046:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006048:	e011      	b.n	800606e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604e:	2b00      	cmp	r3, #0
 8006050:	d012      	beq.n	8006078 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	3324      	adds	r3, #36	; 0x24
 8006056:	4618      	mov	r0, r3
 8006058:	f000 fd1c 	bl	8006a94 <xTaskRemoveFromEventList>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006062:	f000 fdf3 	bl	8006c4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006066:	7bfb      	ldrb	r3, [r7, #15]
 8006068:	3b01      	subs	r3, #1
 800606a:	b2db      	uxtb	r3, r3
 800606c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800606e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006072:	2b00      	cmp	r3, #0
 8006074:	dce9      	bgt.n	800604a <prvUnlockQueue+0x16>
 8006076:	e000      	b.n	800607a <prvUnlockQueue+0x46>
					break;
 8006078:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	22ff      	movs	r2, #255	; 0xff
 800607e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006082:	f001 fc57 	bl	8007934 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006086:	f001 fc25 	bl	80078d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006090:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006092:	e011      	b.n	80060b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d012      	beq.n	80060c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	3310      	adds	r3, #16
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 fcf7 	bl	8006a94 <xTaskRemoveFromEventList>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80060ac:	f000 fdce 	bl	8006c4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80060b0:	7bbb      	ldrb	r3, [r7, #14]
 80060b2:	3b01      	subs	r3, #1
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	dce9      	bgt.n	8006094 <prvUnlockQueue+0x60>
 80060c0:	e000      	b.n	80060c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80060c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	22ff      	movs	r2, #255	; 0xff
 80060c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80060cc:	f001 fc32 	bl	8007934 <vPortExitCritical>
}
 80060d0:	bf00      	nop
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060e0:	f001 fbf8 	bl	80078d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d102      	bne.n	80060f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80060ec:	2301      	movs	r3, #1
 80060ee:	60fb      	str	r3, [r7, #12]
 80060f0:	e001      	b.n	80060f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80060f2:	2300      	movs	r3, #0
 80060f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060f6:	f001 fc1d 	bl	8007934 <vPortExitCritical>

	return xReturn;
 80060fa:	68fb      	ldr	r3, [r7, #12]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800610c:	f001 fbe2 	bl	80078d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006118:	429a      	cmp	r2, r3
 800611a:	d102      	bne.n	8006122 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800611c:	2301      	movs	r3, #1
 800611e:	60fb      	str	r3, [r7, #12]
 8006120:	e001      	b.n	8006126 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006122:	2300      	movs	r3, #0
 8006124:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006126:	f001 fc05 	bl	8007934 <vPortExitCritical>

	return xReturn;
 800612a:	68fb      	ldr	r3, [r7, #12]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800613e:	2300      	movs	r3, #0
 8006140:	60fb      	str	r3, [r7, #12]
 8006142:	e014      	b.n	800616e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006144:	4a0f      	ldr	r2, [pc, #60]	; (8006184 <vQueueAddToRegistry+0x50>)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10b      	bne.n	8006168 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006150:	490c      	ldr	r1, [pc, #48]	; (8006184 <vQueueAddToRegistry+0x50>)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800615a:	4a0a      	ldr	r2, [pc, #40]	; (8006184 <vQueueAddToRegistry+0x50>)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	00db      	lsls	r3, r3, #3
 8006160:	4413      	add	r3, r2
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006166:	e006      	b.n	8006176 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	3301      	adds	r3, #1
 800616c:	60fb      	str	r3, [r7, #12]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b07      	cmp	r3, #7
 8006172:	d9e7      	bls.n	8006144 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006174:	bf00      	nop
 8006176:	bf00      	nop
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	20000958 	.word	0x20000958

08006188 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006198:	f001 fb9c 	bl	80078d4 <vPortEnterCritical>
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061a2:	b25b      	sxtb	r3, r3
 80061a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a8:	d103      	bne.n	80061b2 <vQueueWaitForMessageRestricted+0x2a>
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061b8:	b25b      	sxtb	r3, r3
 80061ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061be:	d103      	bne.n	80061c8 <vQueueWaitForMessageRestricted+0x40>
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061c8:	f001 fbb4 	bl	8007934 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d106      	bne.n	80061e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	3324      	adds	r3, #36	; 0x24
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	68b9      	ldr	r1, [r7, #8]
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 fc2d 	bl	8006a3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80061e2:	6978      	ldr	r0, [r7, #20]
 80061e4:	f7ff ff26 	bl	8006034 <prvUnlockQueue>
	}
 80061e8:	bf00      	nop
 80061ea:	3718      	adds	r7, #24
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08e      	sub	sp, #56	; 0x38
 80061f4:	af04      	add	r7, sp, #16
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80061fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10a      	bne.n	800621a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	623b      	str	r3, [r7, #32]
}
 8006216:	bf00      	nop
 8006218:	e7fe      	b.n	8006218 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800621a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10a      	bne.n	8006236 <xTaskCreateStatic+0x46>
	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	61fb      	str	r3, [r7, #28]
}
 8006232:	bf00      	nop
 8006234:	e7fe      	b.n	8006234 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006236:	23a8      	movs	r3, #168	; 0xa8
 8006238:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	2ba8      	cmp	r3, #168	; 0xa8
 800623e:	d00a      	beq.n	8006256 <xTaskCreateStatic+0x66>
	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	61bb      	str	r3, [r7, #24]
}
 8006252:	bf00      	nop
 8006254:	e7fe      	b.n	8006254 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006256:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625a:	2b00      	cmp	r3, #0
 800625c:	d01e      	beq.n	800629c <xTaskCreateStatic+0xac>
 800625e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006260:	2b00      	cmp	r3, #0
 8006262:	d01b      	beq.n	800629c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006266:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800626c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	2202      	movs	r2, #2
 8006272:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006276:	2300      	movs	r3, #0
 8006278:	9303      	str	r3, [sp, #12]
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	9302      	str	r3, [sp, #8]
 800627e:	f107 0314 	add.w	r3, r7, #20
 8006282:	9301      	str	r3, [sp, #4]
 8006284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	68b9      	ldr	r1, [r7, #8]
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 f850 	bl	8006334 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006294:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006296:	f000 f8f3 	bl	8006480 <prvAddNewTaskToReadyList>
 800629a:	e001      	b.n	80062a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800629c:	2300      	movs	r3, #0
 800629e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80062a0:	697b      	ldr	r3, [r7, #20]
	}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3728      	adds	r7, #40	; 0x28
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b08c      	sub	sp, #48	; 0x30
 80062ae:	af04      	add	r7, sp, #16
 80062b0:	60f8      	str	r0, [r7, #12]
 80062b2:	60b9      	str	r1, [r7, #8]
 80062b4:	603b      	str	r3, [r7, #0]
 80062b6:	4613      	mov	r3, r2
 80062b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80062ba:	88fb      	ldrh	r3, [r7, #6]
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4618      	mov	r0, r3
 80062c0:	f001 fc2a 	bl	8007b18 <pvPortMalloc>
 80062c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00e      	beq.n	80062ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80062cc:	20a8      	movs	r0, #168	; 0xa8
 80062ce:	f001 fc23 	bl	8007b18 <pvPortMalloc>
 80062d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	631a      	str	r2, [r3, #48]	; 0x30
 80062e0:	e005      	b.n	80062ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80062e2:	6978      	ldr	r0, [r7, #20]
 80062e4:	f001 fce4 	bl	8007cb0 <vPortFree>
 80062e8:	e001      	b.n	80062ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d017      	beq.n	8006324 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80062fc:	88fa      	ldrh	r2, [r7, #6]
 80062fe:	2300      	movs	r3, #0
 8006300:	9303      	str	r3, [sp, #12]
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	9302      	str	r3, [sp, #8]
 8006306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006308:	9301      	str	r3, [sp, #4]
 800630a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	68b9      	ldr	r1, [r7, #8]
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 f80e 	bl	8006334 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006318:	69f8      	ldr	r0, [r7, #28]
 800631a:	f000 f8b1 	bl	8006480 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800631e:	2301      	movs	r3, #1
 8006320:	61bb      	str	r3, [r7, #24]
 8006322:	e002      	b.n	800632a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006324:	f04f 33ff 	mov.w	r3, #4294967295
 8006328:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800632a:	69bb      	ldr	r3, [r7, #24]
	}
 800632c:	4618      	mov	r0, r3
 800632e:	3720      	adds	r7, #32
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b088      	sub	sp, #32
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
 8006340:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006344:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	461a      	mov	r2, r3
 800634c:	21a5      	movs	r1, #165	; 0xa5
 800634e:	f001 fe79 	bl	8008044 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800635c:	3b01      	subs	r3, #1
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4413      	add	r3, r2
 8006362:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	f023 0307 	bic.w	r3, r3, #7
 800636a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	f003 0307 	and.w	r3, r3, #7
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00a      	beq.n	800638c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	617b      	str	r3, [r7, #20]
}
 8006388:	bf00      	nop
 800638a:	e7fe      	b.n	800638a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d01f      	beq.n	80063d2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006392:	2300      	movs	r3, #0
 8006394:	61fb      	str	r3, [r7, #28]
 8006396:	e012      	b.n	80063be <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	4413      	add	r3, r2
 800639e:	7819      	ldrb	r1, [r3, #0]
 80063a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	4413      	add	r3, r2
 80063a6:	3334      	adds	r3, #52	; 0x34
 80063a8:	460a      	mov	r2, r1
 80063aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	4413      	add	r3, r2
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d006      	beq.n	80063c6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	3301      	adds	r3, #1
 80063bc:	61fb      	str	r3, [r7, #28]
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	2b0f      	cmp	r3, #15
 80063c2:	d9e9      	bls.n	8006398 <prvInitialiseNewTask+0x64>
 80063c4:	e000      	b.n	80063c8 <prvInitialiseNewTask+0x94>
			{
				break;
 80063c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80063c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063d0:	e003      	b.n	80063da <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80063da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063dc:	2b37      	cmp	r3, #55	; 0x37
 80063de:	d901      	bls.n	80063e4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80063e0:	2337      	movs	r3, #55	; 0x37
 80063e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80063e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80063ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80063f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f2:	2200      	movs	r2, #0
 80063f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80063f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f8:	3304      	adds	r3, #4
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7ff f978 	bl	80056f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006402:	3318      	adds	r3, #24
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff f973 	bl	80056f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800640a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800640e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006412:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006418:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800641a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800641e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006422:	2200      	movs	r2, #0
 8006424:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642a:	2200      	movs	r2, #0
 800642c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006432:	3354      	adds	r3, #84	; 0x54
 8006434:	224c      	movs	r2, #76	; 0x4c
 8006436:	2100      	movs	r1, #0
 8006438:	4618      	mov	r0, r3
 800643a:	f001 fe03 	bl	8008044 <memset>
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	4a0c      	ldr	r2, [pc, #48]	; (8006474 <prvInitialiseNewTask+0x140>)
 8006442:	659a      	str	r2, [r3, #88]	; 0x58
 8006444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006446:	4a0c      	ldr	r2, [pc, #48]	; (8006478 <prvInitialiseNewTask+0x144>)
 8006448:	65da      	str	r2, [r3, #92]	; 0x5c
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	4a0b      	ldr	r2, [pc, #44]	; (800647c <prvInitialiseNewTask+0x148>)
 800644e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	68f9      	ldr	r1, [r7, #12]
 8006454:	69b8      	ldr	r0, [r7, #24]
 8006456:	f001 f90d 	bl	8007674 <pxPortInitialiseStack>
 800645a:	4602      	mov	r2, r0
 800645c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800646a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800646c:	bf00      	nop
 800646e:	3720      	adds	r7, #32
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	20004fd0 	.word	0x20004fd0
 8006478:	20005038 	.word	0x20005038
 800647c:	200050a0 	.word	0x200050a0

08006480 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006488:	f001 fa24 	bl	80078d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800648c:	4b2d      	ldr	r3, [pc, #180]	; (8006544 <prvAddNewTaskToReadyList+0xc4>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3301      	adds	r3, #1
 8006492:	4a2c      	ldr	r2, [pc, #176]	; (8006544 <prvAddNewTaskToReadyList+0xc4>)
 8006494:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006496:	4b2c      	ldr	r3, [pc, #176]	; (8006548 <prvAddNewTaskToReadyList+0xc8>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d109      	bne.n	80064b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800649e:	4a2a      	ldr	r2, [pc, #168]	; (8006548 <prvAddNewTaskToReadyList+0xc8>)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064a4:	4b27      	ldr	r3, [pc, #156]	; (8006544 <prvAddNewTaskToReadyList+0xc4>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d110      	bne.n	80064ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80064ac:	f000 fbf2 	bl	8006c94 <prvInitialiseTaskLists>
 80064b0:	e00d      	b.n	80064ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80064b2:	4b26      	ldr	r3, [pc, #152]	; (800654c <prvAddNewTaskToReadyList+0xcc>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d109      	bne.n	80064ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80064ba:	4b23      	ldr	r3, [pc, #140]	; (8006548 <prvAddNewTaskToReadyList+0xc8>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d802      	bhi.n	80064ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80064c8:	4a1f      	ldr	r2, [pc, #124]	; (8006548 <prvAddNewTaskToReadyList+0xc8>)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80064ce:	4b20      	ldr	r3, [pc, #128]	; (8006550 <prvAddNewTaskToReadyList+0xd0>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3301      	adds	r3, #1
 80064d4:	4a1e      	ldr	r2, [pc, #120]	; (8006550 <prvAddNewTaskToReadyList+0xd0>)
 80064d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80064d8:	4b1d      	ldr	r3, [pc, #116]	; (8006550 <prvAddNewTaskToReadyList+0xd0>)
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e4:	4b1b      	ldr	r3, [pc, #108]	; (8006554 <prvAddNewTaskToReadyList+0xd4>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d903      	bls.n	80064f4 <prvAddNewTaskToReadyList+0x74>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f0:	4a18      	ldr	r2, [pc, #96]	; (8006554 <prvAddNewTaskToReadyList+0xd4>)
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f8:	4613      	mov	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4a15      	ldr	r2, [pc, #84]	; (8006558 <prvAddNewTaskToReadyList+0xd8>)
 8006502:	441a      	add	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	3304      	adds	r3, #4
 8006508:	4619      	mov	r1, r3
 800650a:	4610      	mov	r0, r2
 800650c:	f7ff f8fd 	bl	800570a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006510:	f001 fa10 	bl	8007934 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006514:	4b0d      	ldr	r3, [pc, #52]	; (800654c <prvAddNewTaskToReadyList+0xcc>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00e      	beq.n	800653a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800651c:	4b0a      	ldr	r3, [pc, #40]	; (8006548 <prvAddNewTaskToReadyList+0xc8>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006526:	429a      	cmp	r2, r3
 8006528:	d207      	bcs.n	800653a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800652a:	4b0c      	ldr	r3, [pc, #48]	; (800655c <prvAddNewTaskToReadyList+0xdc>)
 800652c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800653a:	bf00      	nop
 800653c:	3708      	adds	r7, #8
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	20000e6c 	.word	0x20000e6c
 8006548:	20000998 	.word	0x20000998
 800654c:	20000e78 	.word	0x20000e78
 8006550:	20000e88 	.word	0x20000e88
 8006554:	20000e74 	.word	0x20000e74
 8006558:	2000099c 	.word	0x2000099c
 800655c:	e000ed04 	.word	0xe000ed04

08006560 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b08a      	sub	sp, #40	; 0x28
 8006564:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006566:	2300      	movs	r3, #0
 8006568:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800656a:	2300      	movs	r3, #0
 800656c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800656e:	463a      	mov	r2, r7
 8006570:	1d39      	adds	r1, r7, #4
 8006572:	f107 0308 	add.w	r3, r7, #8
 8006576:	4618      	mov	r0, r3
 8006578:	f7ff f866 	bl	8005648 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800657c:	6839      	ldr	r1, [r7, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	9202      	str	r2, [sp, #8]
 8006584:	9301      	str	r3, [sp, #4]
 8006586:	2300      	movs	r3, #0
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	2300      	movs	r3, #0
 800658c:	460a      	mov	r2, r1
 800658e:	4924      	ldr	r1, [pc, #144]	; (8006620 <vTaskStartScheduler+0xc0>)
 8006590:	4824      	ldr	r0, [pc, #144]	; (8006624 <vTaskStartScheduler+0xc4>)
 8006592:	f7ff fe2d 	bl	80061f0 <xTaskCreateStatic>
 8006596:	4603      	mov	r3, r0
 8006598:	4a23      	ldr	r2, [pc, #140]	; (8006628 <vTaskStartScheduler+0xc8>)
 800659a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800659c:	4b22      	ldr	r3, [pc, #136]	; (8006628 <vTaskStartScheduler+0xc8>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d002      	beq.n	80065aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80065a4:	2301      	movs	r3, #1
 80065a6:	617b      	str	r3, [r7, #20]
 80065a8:	e001      	b.n	80065ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80065aa:	2300      	movs	r3, #0
 80065ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d102      	bne.n	80065ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80065b4:	f000 fd10 	bl	8006fd8 <xTimerCreateTimerTask>
 80065b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d11b      	bne.n	80065f8 <vTaskStartScheduler+0x98>
	__asm volatile
 80065c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	613b      	str	r3, [r7, #16]
}
 80065d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80065d4:	4b15      	ldr	r3, [pc, #84]	; (800662c <vTaskStartScheduler+0xcc>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3354      	adds	r3, #84	; 0x54
 80065da:	4a15      	ldr	r2, [pc, #84]	; (8006630 <vTaskStartScheduler+0xd0>)
 80065dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80065de:	4b15      	ldr	r3, [pc, #84]	; (8006634 <vTaskStartScheduler+0xd4>)
 80065e0:	f04f 32ff 	mov.w	r2, #4294967295
 80065e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065e6:	4b14      	ldr	r3, [pc, #80]	; (8006638 <vTaskStartScheduler+0xd8>)
 80065e8:	2201      	movs	r2, #1
 80065ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065ec:	4b13      	ldr	r3, [pc, #76]	; (800663c <vTaskStartScheduler+0xdc>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065f2:	f001 f8cd 	bl	8007790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065f6:	e00e      	b.n	8006616 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fe:	d10a      	bne.n	8006616 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	60fb      	str	r3, [r7, #12]
}
 8006612:	bf00      	nop
 8006614:	e7fe      	b.n	8006614 <vTaskStartScheduler+0xb4>
}
 8006616:	bf00      	nop
 8006618:	3718      	adds	r7, #24
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	0800822c 	.word	0x0800822c
 8006624:	08006c65 	.word	0x08006c65
 8006628:	20000e90 	.word	0x20000e90
 800662c:	20000998 	.word	0x20000998
 8006630:	2000005c 	.word	0x2000005c
 8006634:	20000e8c 	.word	0x20000e8c
 8006638:	20000e78 	.word	0x20000e78
 800663c:	20000e70 	.word	0x20000e70

08006640 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006640:	b480      	push	{r7}
 8006642:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006644:	4b04      	ldr	r3, [pc, #16]	; (8006658 <vTaskSuspendAll+0x18>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	3301      	adds	r3, #1
 800664a:	4a03      	ldr	r2, [pc, #12]	; (8006658 <vTaskSuspendAll+0x18>)
 800664c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800664e:	bf00      	nop
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	20000e94 	.word	0x20000e94

0800665c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006662:	2300      	movs	r3, #0
 8006664:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006666:	2300      	movs	r3, #0
 8006668:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800666a:	4b42      	ldr	r3, [pc, #264]	; (8006774 <xTaskResumeAll+0x118>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10a      	bne.n	8006688 <xTaskResumeAll+0x2c>
	__asm volatile
 8006672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	603b      	str	r3, [r7, #0]
}
 8006684:	bf00      	nop
 8006686:	e7fe      	b.n	8006686 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006688:	f001 f924 	bl	80078d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800668c:	4b39      	ldr	r3, [pc, #228]	; (8006774 <xTaskResumeAll+0x118>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	3b01      	subs	r3, #1
 8006692:	4a38      	ldr	r2, [pc, #224]	; (8006774 <xTaskResumeAll+0x118>)
 8006694:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006696:	4b37      	ldr	r3, [pc, #220]	; (8006774 <xTaskResumeAll+0x118>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d162      	bne.n	8006764 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800669e:	4b36      	ldr	r3, [pc, #216]	; (8006778 <xTaskResumeAll+0x11c>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d05e      	beq.n	8006764 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066a6:	e02f      	b.n	8006708 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066a8:	4b34      	ldr	r3, [pc, #208]	; (800677c <xTaskResumeAll+0x120>)
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	3318      	adds	r3, #24
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7ff f885 	bl	80057c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	3304      	adds	r3, #4
 80066be:	4618      	mov	r0, r3
 80066c0:	f7ff f880 	bl	80057c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c8:	4b2d      	ldr	r3, [pc, #180]	; (8006780 <xTaskResumeAll+0x124>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d903      	bls.n	80066d8 <xTaskResumeAll+0x7c>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d4:	4a2a      	ldr	r2, [pc, #168]	; (8006780 <xTaskResumeAll+0x124>)
 80066d6:	6013      	str	r3, [r2, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066dc:	4613      	mov	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4a27      	ldr	r2, [pc, #156]	; (8006784 <xTaskResumeAll+0x128>)
 80066e6:	441a      	add	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3304      	adds	r3, #4
 80066ec:	4619      	mov	r1, r3
 80066ee:	4610      	mov	r0, r2
 80066f0:	f7ff f80b 	bl	800570a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f8:	4b23      	ldr	r3, [pc, #140]	; (8006788 <xTaskResumeAll+0x12c>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fe:	429a      	cmp	r2, r3
 8006700:	d302      	bcc.n	8006708 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006702:	4b22      	ldr	r3, [pc, #136]	; (800678c <xTaskResumeAll+0x130>)
 8006704:	2201      	movs	r2, #1
 8006706:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006708:	4b1c      	ldr	r3, [pc, #112]	; (800677c <xTaskResumeAll+0x120>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1cb      	bne.n	80066a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006716:	f000 fb5f 	bl	8006dd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800671a:	4b1d      	ldr	r3, [pc, #116]	; (8006790 <xTaskResumeAll+0x134>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d010      	beq.n	8006748 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006726:	f000 f847 	bl	80067b8 <xTaskIncrementTick>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d002      	beq.n	8006736 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006730:	4b16      	ldr	r3, [pc, #88]	; (800678c <xTaskResumeAll+0x130>)
 8006732:	2201      	movs	r2, #1
 8006734:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3b01      	subs	r3, #1
 800673a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1f1      	bne.n	8006726 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006742:	4b13      	ldr	r3, [pc, #76]	; (8006790 <xTaskResumeAll+0x134>)
 8006744:	2200      	movs	r2, #0
 8006746:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006748:	4b10      	ldr	r3, [pc, #64]	; (800678c <xTaskResumeAll+0x130>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d009      	beq.n	8006764 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006750:	2301      	movs	r3, #1
 8006752:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006754:	4b0f      	ldr	r3, [pc, #60]	; (8006794 <xTaskResumeAll+0x138>)
 8006756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800675a:	601a      	str	r2, [r3, #0]
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006764:	f001 f8e6 	bl	8007934 <vPortExitCritical>

	return xAlreadyYielded;
 8006768:	68bb      	ldr	r3, [r7, #8]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	20000e94 	.word	0x20000e94
 8006778:	20000e6c 	.word	0x20000e6c
 800677c:	20000e2c 	.word	0x20000e2c
 8006780:	20000e74 	.word	0x20000e74
 8006784:	2000099c 	.word	0x2000099c
 8006788:	20000998 	.word	0x20000998
 800678c:	20000e80 	.word	0x20000e80
 8006790:	20000e7c 	.word	0x20000e7c
 8006794:	e000ed04 	.word	0xe000ed04

08006798 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800679e:	4b05      	ldr	r3, [pc, #20]	; (80067b4 <xTaskGetTickCount+0x1c>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80067a4:	687b      	ldr	r3, [r7, #4]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	20000e70 	.word	0x20000e70

080067b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80067be:	2300      	movs	r3, #0
 80067c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067c2:	4b4f      	ldr	r3, [pc, #316]	; (8006900 <xTaskIncrementTick+0x148>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f040 808f 	bne.w	80068ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80067cc:	4b4d      	ldr	r3, [pc, #308]	; (8006904 <xTaskIncrementTick+0x14c>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	3301      	adds	r3, #1
 80067d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80067d4:	4a4b      	ldr	r2, [pc, #300]	; (8006904 <xTaskIncrementTick+0x14c>)
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d120      	bne.n	8006822 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80067e0:	4b49      	ldr	r3, [pc, #292]	; (8006908 <xTaskIncrementTick+0x150>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00a      	beq.n	8006800 <xTaskIncrementTick+0x48>
	__asm volatile
 80067ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	603b      	str	r3, [r7, #0]
}
 80067fc:	bf00      	nop
 80067fe:	e7fe      	b.n	80067fe <xTaskIncrementTick+0x46>
 8006800:	4b41      	ldr	r3, [pc, #260]	; (8006908 <xTaskIncrementTick+0x150>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	60fb      	str	r3, [r7, #12]
 8006806:	4b41      	ldr	r3, [pc, #260]	; (800690c <xTaskIncrementTick+0x154>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a3f      	ldr	r2, [pc, #252]	; (8006908 <xTaskIncrementTick+0x150>)
 800680c:	6013      	str	r3, [r2, #0]
 800680e:	4a3f      	ldr	r2, [pc, #252]	; (800690c <xTaskIncrementTick+0x154>)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6013      	str	r3, [r2, #0]
 8006814:	4b3e      	ldr	r3, [pc, #248]	; (8006910 <xTaskIncrementTick+0x158>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3301      	adds	r3, #1
 800681a:	4a3d      	ldr	r2, [pc, #244]	; (8006910 <xTaskIncrementTick+0x158>)
 800681c:	6013      	str	r3, [r2, #0]
 800681e:	f000 fadb 	bl	8006dd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006822:	4b3c      	ldr	r3, [pc, #240]	; (8006914 <xTaskIncrementTick+0x15c>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	429a      	cmp	r2, r3
 800682a:	d349      	bcc.n	80068c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800682c:	4b36      	ldr	r3, [pc, #216]	; (8006908 <xTaskIncrementTick+0x150>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d104      	bne.n	8006840 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006836:	4b37      	ldr	r3, [pc, #220]	; (8006914 <xTaskIncrementTick+0x15c>)
 8006838:	f04f 32ff 	mov.w	r2, #4294967295
 800683c:	601a      	str	r2, [r3, #0]
					break;
 800683e:	e03f      	b.n	80068c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006840:	4b31      	ldr	r3, [pc, #196]	; (8006908 <xTaskIncrementTick+0x150>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	429a      	cmp	r2, r3
 8006856:	d203      	bcs.n	8006860 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006858:	4a2e      	ldr	r2, [pc, #184]	; (8006914 <xTaskIncrementTick+0x15c>)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800685e:	e02f      	b.n	80068c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	3304      	adds	r3, #4
 8006864:	4618      	mov	r0, r3
 8006866:	f7fe ffad 	bl	80057c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686e:	2b00      	cmp	r3, #0
 8006870:	d004      	beq.n	800687c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	3318      	adds	r3, #24
 8006876:	4618      	mov	r0, r3
 8006878:	f7fe ffa4 	bl	80057c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006880:	4b25      	ldr	r3, [pc, #148]	; (8006918 <xTaskIncrementTick+0x160>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	429a      	cmp	r2, r3
 8006886:	d903      	bls.n	8006890 <xTaskIncrementTick+0xd8>
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688c:	4a22      	ldr	r2, [pc, #136]	; (8006918 <xTaskIncrementTick+0x160>)
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006894:	4613      	mov	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4a1f      	ldr	r2, [pc, #124]	; (800691c <xTaskIncrementTick+0x164>)
 800689e:	441a      	add	r2, r3
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	3304      	adds	r3, #4
 80068a4:	4619      	mov	r1, r3
 80068a6:	4610      	mov	r0, r2
 80068a8:	f7fe ff2f 	bl	800570a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b0:	4b1b      	ldr	r3, [pc, #108]	; (8006920 <xTaskIncrementTick+0x168>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d3b8      	bcc.n	800682c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80068ba:	2301      	movs	r3, #1
 80068bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068be:	e7b5      	b.n	800682c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80068c0:	4b17      	ldr	r3, [pc, #92]	; (8006920 <xTaskIncrementTick+0x168>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c6:	4915      	ldr	r1, [pc, #84]	; (800691c <xTaskIncrementTick+0x164>)
 80068c8:	4613      	mov	r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	4413      	add	r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	440b      	add	r3, r1
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d901      	bls.n	80068dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80068d8:	2301      	movs	r3, #1
 80068da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80068dc:	4b11      	ldr	r3, [pc, #68]	; (8006924 <xTaskIncrementTick+0x16c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d007      	beq.n	80068f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80068e4:	2301      	movs	r3, #1
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	e004      	b.n	80068f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80068ea:	4b0f      	ldr	r3, [pc, #60]	; (8006928 <xTaskIncrementTick+0x170>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3301      	adds	r3, #1
 80068f0:	4a0d      	ldr	r2, [pc, #52]	; (8006928 <xTaskIncrementTick+0x170>)
 80068f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80068f4:	697b      	ldr	r3, [r7, #20]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3718      	adds	r7, #24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	20000e94 	.word	0x20000e94
 8006904:	20000e70 	.word	0x20000e70
 8006908:	20000e24 	.word	0x20000e24
 800690c:	20000e28 	.word	0x20000e28
 8006910:	20000e84 	.word	0x20000e84
 8006914:	20000e8c 	.word	0x20000e8c
 8006918:	20000e74 	.word	0x20000e74
 800691c:	2000099c 	.word	0x2000099c
 8006920:	20000998 	.word	0x20000998
 8006924:	20000e80 	.word	0x20000e80
 8006928:	20000e7c 	.word	0x20000e7c

0800692c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006932:	4b2a      	ldr	r3, [pc, #168]	; (80069dc <vTaskSwitchContext+0xb0>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800693a:	4b29      	ldr	r3, [pc, #164]	; (80069e0 <vTaskSwitchContext+0xb4>)
 800693c:	2201      	movs	r2, #1
 800693e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006940:	e046      	b.n	80069d0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006942:	4b27      	ldr	r3, [pc, #156]	; (80069e0 <vTaskSwitchContext+0xb4>)
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006948:	4b26      	ldr	r3, [pc, #152]	; (80069e4 <vTaskSwitchContext+0xb8>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	60fb      	str	r3, [r7, #12]
 800694e:	e010      	b.n	8006972 <vTaskSwitchContext+0x46>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10a      	bne.n	800696c <vTaskSwitchContext+0x40>
	__asm volatile
 8006956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	607b      	str	r3, [r7, #4]
}
 8006968:	bf00      	nop
 800696a:	e7fe      	b.n	800696a <vTaskSwitchContext+0x3e>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	3b01      	subs	r3, #1
 8006970:	60fb      	str	r3, [r7, #12]
 8006972:	491d      	ldr	r1, [pc, #116]	; (80069e8 <vTaskSwitchContext+0xbc>)
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	4613      	mov	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	440b      	add	r3, r1
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d0e4      	beq.n	8006950 <vTaskSwitchContext+0x24>
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	4613      	mov	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4a15      	ldr	r2, [pc, #84]	; (80069e8 <vTaskSwitchContext+0xbc>)
 8006992:	4413      	add	r3, r2
 8006994:	60bb      	str	r3, [r7, #8]
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	605a      	str	r2, [r3, #4]
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	3308      	adds	r3, #8
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d104      	bne.n	80069b6 <vTaskSwitchContext+0x8a>
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	605a      	str	r2, [r3, #4]
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	4a0b      	ldr	r2, [pc, #44]	; (80069ec <vTaskSwitchContext+0xc0>)
 80069be:	6013      	str	r3, [r2, #0]
 80069c0:	4a08      	ldr	r2, [pc, #32]	; (80069e4 <vTaskSwitchContext+0xb8>)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80069c6:	4b09      	ldr	r3, [pc, #36]	; (80069ec <vTaskSwitchContext+0xc0>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	3354      	adds	r3, #84	; 0x54
 80069cc:	4a08      	ldr	r2, [pc, #32]	; (80069f0 <vTaskSwitchContext+0xc4>)
 80069ce:	6013      	str	r3, [r2, #0]
}
 80069d0:	bf00      	nop
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	20000e94 	.word	0x20000e94
 80069e0:	20000e80 	.word	0x20000e80
 80069e4:	20000e74 	.word	0x20000e74
 80069e8:	2000099c 	.word	0x2000099c
 80069ec:	20000998 	.word	0x20000998
 80069f0:	2000005c 	.word	0x2000005c

080069f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10a      	bne.n	8006a1a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	60fb      	str	r3, [r7, #12]
}
 8006a16:	bf00      	nop
 8006a18:	e7fe      	b.n	8006a18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a1a:	4b07      	ldr	r3, [pc, #28]	; (8006a38 <vTaskPlaceOnEventList+0x44>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3318      	adds	r3, #24
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7fe fe95 	bl	8005752 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a28:	2101      	movs	r1, #1
 8006a2a:	6838      	ldr	r0, [r7, #0]
 8006a2c:	f000 fa80 	bl	8006f30 <prvAddCurrentTaskToDelayedList>
}
 8006a30:	bf00      	nop
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	20000998 	.word	0x20000998

08006a3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10a      	bne.n	8006a64 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	617b      	str	r3, [r7, #20]
}
 8006a60:	bf00      	nop
 8006a62:	e7fe      	b.n	8006a62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a64:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <vTaskPlaceOnEventListRestricted+0x54>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3318      	adds	r3, #24
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f7fe fe4c 	bl	800570a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006a78:	f04f 33ff 	mov.w	r3, #4294967295
 8006a7c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a7e:	6879      	ldr	r1, [r7, #4]
 8006a80:	68b8      	ldr	r0, [r7, #8]
 8006a82:	f000 fa55 	bl	8006f30 <prvAddCurrentTaskToDelayedList>
	}
 8006a86:	bf00      	nop
 8006a88:	3718      	adds	r7, #24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20000998 	.word	0x20000998

08006a94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10a      	bne.n	8006ac0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	60fb      	str	r3, [r7, #12]
}
 8006abc:	bf00      	nop
 8006abe:	e7fe      	b.n	8006abe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	3318      	adds	r3, #24
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fe fe7d 	bl	80057c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aca:	4b1e      	ldr	r3, [pc, #120]	; (8006b44 <xTaskRemoveFromEventList+0xb0>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d11d      	bne.n	8006b0e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fe fe74 	bl	80057c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae0:	4b19      	ldr	r3, [pc, #100]	; (8006b48 <xTaskRemoveFromEventList+0xb4>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d903      	bls.n	8006af0 <xTaskRemoveFromEventList+0x5c>
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aec:	4a16      	ldr	r2, [pc, #88]	; (8006b48 <xTaskRemoveFromEventList+0xb4>)
 8006aee:	6013      	str	r3, [r2, #0]
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af4:	4613      	mov	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	4a13      	ldr	r2, [pc, #76]	; (8006b4c <xTaskRemoveFromEventList+0xb8>)
 8006afe:	441a      	add	r2, r3
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	3304      	adds	r3, #4
 8006b04:	4619      	mov	r1, r3
 8006b06:	4610      	mov	r0, r2
 8006b08:	f7fe fdff 	bl	800570a <vListInsertEnd>
 8006b0c:	e005      	b.n	8006b1a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	3318      	adds	r3, #24
 8006b12:	4619      	mov	r1, r3
 8006b14:	480e      	ldr	r0, [pc, #56]	; (8006b50 <xTaskRemoveFromEventList+0xbc>)
 8006b16:	f7fe fdf8 	bl	800570a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1e:	4b0d      	ldr	r3, [pc, #52]	; (8006b54 <xTaskRemoveFromEventList+0xc0>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d905      	bls.n	8006b34 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b2c:	4b0a      	ldr	r3, [pc, #40]	; (8006b58 <xTaskRemoveFromEventList+0xc4>)
 8006b2e:	2201      	movs	r2, #1
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	e001      	b.n	8006b38 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006b34:	2300      	movs	r3, #0
 8006b36:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b38:	697b      	ldr	r3, [r7, #20]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3718      	adds	r7, #24
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	20000e94 	.word	0x20000e94
 8006b48:	20000e74 	.word	0x20000e74
 8006b4c:	2000099c 	.word	0x2000099c
 8006b50:	20000e2c 	.word	0x20000e2c
 8006b54:	20000998 	.word	0x20000998
 8006b58:	20000e80 	.word	0x20000e80

08006b5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b64:	4b06      	ldr	r3, [pc, #24]	; (8006b80 <vTaskInternalSetTimeOutState+0x24>)
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b6c:	4b05      	ldr	r3, [pc, #20]	; (8006b84 <vTaskInternalSetTimeOutState+0x28>)
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	605a      	str	r2, [r3, #4]
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr
 8006b80:	20000e84 	.word	0x20000e84
 8006b84:	20000e70 	.word	0x20000e70

08006b88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b088      	sub	sp, #32
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10a      	bne.n	8006bae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	613b      	str	r3, [r7, #16]
}
 8006baa:	bf00      	nop
 8006bac:	e7fe      	b.n	8006bac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10a      	bne.n	8006bca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb8:	f383 8811 	msr	BASEPRI, r3
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	60fb      	str	r3, [r7, #12]
}
 8006bc6:	bf00      	nop
 8006bc8:	e7fe      	b.n	8006bc8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006bca:	f000 fe83 	bl	80078d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006bce:	4b1d      	ldr	r3, [pc, #116]	; (8006c44 <xTaskCheckForTimeOut+0xbc>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	69ba      	ldr	r2, [r7, #24]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be6:	d102      	bne.n	8006bee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006be8:	2300      	movs	r3, #0
 8006bea:	61fb      	str	r3, [r7, #28]
 8006bec:	e023      	b.n	8006c36 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	4b15      	ldr	r3, [pc, #84]	; (8006c48 <xTaskCheckForTimeOut+0xc0>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d007      	beq.n	8006c0a <xTaskCheckForTimeOut+0x82>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d302      	bcc.n	8006c0a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c04:	2301      	movs	r3, #1
 8006c06:	61fb      	str	r3, [r7, #28]
 8006c08:	e015      	b.n	8006c36 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d20b      	bcs.n	8006c2c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	1ad2      	subs	r2, r2, r3
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f7ff ff9b 	bl	8006b5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c26:	2300      	movs	r3, #0
 8006c28:	61fb      	str	r3, [r7, #28]
 8006c2a:	e004      	b.n	8006c36 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c32:	2301      	movs	r3, #1
 8006c34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c36:	f000 fe7d 	bl	8007934 <vPortExitCritical>

	return xReturn;
 8006c3a:	69fb      	ldr	r3, [r7, #28]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3720      	adds	r7, #32
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	20000e70 	.word	0x20000e70
 8006c48:	20000e84 	.word	0x20000e84

08006c4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c50:	4b03      	ldr	r3, [pc, #12]	; (8006c60 <vTaskMissedYield+0x14>)
 8006c52:	2201      	movs	r2, #1
 8006c54:	601a      	str	r2, [r3, #0]
}
 8006c56:	bf00      	nop
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr
 8006c60:	20000e80 	.word	0x20000e80

08006c64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c6c:	f000 f852 	bl	8006d14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c70:	4b06      	ldr	r3, [pc, #24]	; (8006c8c <prvIdleTask+0x28>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d9f9      	bls.n	8006c6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c78:	4b05      	ldr	r3, [pc, #20]	; (8006c90 <prvIdleTask+0x2c>)
 8006c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c88:	e7f0      	b.n	8006c6c <prvIdleTask+0x8>
 8006c8a:	bf00      	nop
 8006c8c:	2000099c 	.word	0x2000099c
 8006c90:	e000ed04 	.word	0xe000ed04

08006c94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	607b      	str	r3, [r7, #4]
 8006c9e:	e00c      	b.n	8006cba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4a12      	ldr	r2, [pc, #72]	; (8006cf4 <prvInitialiseTaskLists+0x60>)
 8006cac:	4413      	add	r3, r2
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fe fcfe 	bl	80056b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	607b      	str	r3, [r7, #4]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b37      	cmp	r3, #55	; 0x37
 8006cbe:	d9ef      	bls.n	8006ca0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006cc0:	480d      	ldr	r0, [pc, #52]	; (8006cf8 <prvInitialiseTaskLists+0x64>)
 8006cc2:	f7fe fcf5 	bl	80056b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006cc6:	480d      	ldr	r0, [pc, #52]	; (8006cfc <prvInitialiseTaskLists+0x68>)
 8006cc8:	f7fe fcf2 	bl	80056b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ccc:	480c      	ldr	r0, [pc, #48]	; (8006d00 <prvInitialiseTaskLists+0x6c>)
 8006cce:	f7fe fcef 	bl	80056b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006cd2:	480c      	ldr	r0, [pc, #48]	; (8006d04 <prvInitialiseTaskLists+0x70>)
 8006cd4:	f7fe fcec 	bl	80056b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006cd8:	480b      	ldr	r0, [pc, #44]	; (8006d08 <prvInitialiseTaskLists+0x74>)
 8006cda:	f7fe fce9 	bl	80056b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006cde:	4b0b      	ldr	r3, [pc, #44]	; (8006d0c <prvInitialiseTaskLists+0x78>)
 8006ce0:	4a05      	ldr	r2, [pc, #20]	; (8006cf8 <prvInitialiseTaskLists+0x64>)
 8006ce2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ce4:	4b0a      	ldr	r3, [pc, #40]	; (8006d10 <prvInitialiseTaskLists+0x7c>)
 8006ce6:	4a05      	ldr	r2, [pc, #20]	; (8006cfc <prvInitialiseTaskLists+0x68>)
 8006ce8:	601a      	str	r2, [r3, #0]
}
 8006cea:	bf00      	nop
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	2000099c 	.word	0x2000099c
 8006cf8:	20000dfc 	.word	0x20000dfc
 8006cfc:	20000e10 	.word	0x20000e10
 8006d00:	20000e2c 	.word	0x20000e2c
 8006d04:	20000e40 	.word	0x20000e40
 8006d08:	20000e58 	.word	0x20000e58
 8006d0c:	20000e24 	.word	0x20000e24
 8006d10:	20000e28 	.word	0x20000e28

08006d14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d1a:	e019      	b.n	8006d50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d1c:	f000 fdda 	bl	80078d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d20:	4b10      	ldr	r3, [pc, #64]	; (8006d64 <prvCheckTasksWaitingTermination+0x50>)
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fe fd49 	bl	80057c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d32:	4b0d      	ldr	r3, [pc, #52]	; (8006d68 <prvCheckTasksWaitingTermination+0x54>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3b01      	subs	r3, #1
 8006d38:	4a0b      	ldr	r2, [pc, #44]	; (8006d68 <prvCheckTasksWaitingTermination+0x54>)
 8006d3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d3c:	4b0b      	ldr	r3, [pc, #44]	; (8006d6c <prvCheckTasksWaitingTermination+0x58>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	3b01      	subs	r3, #1
 8006d42:	4a0a      	ldr	r2, [pc, #40]	; (8006d6c <prvCheckTasksWaitingTermination+0x58>)
 8006d44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d46:	f000 fdf5 	bl	8007934 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f810 	bl	8006d70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d50:	4b06      	ldr	r3, [pc, #24]	; (8006d6c <prvCheckTasksWaitingTermination+0x58>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1e1      	bne.n	8006d1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d58:	bf00      	nop
 8006d5a:	bf00      	nop
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	20000e40 	.word	0x20000e40
 8006d68:	20000e6c 	.word	0x20000e6c
 8006d6c:	20000e54 	.word	0x20000e54

08006d70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	3354      	adds	r3, #84	; 0x54
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f001 f969 	bl	8008054 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d108      	bne.n	8006d9e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 ff8d 	bl	8007cb0 <vPortFree>
				vPortFree( pxTCB );
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 ff8a 	bl	8007cb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d9c:	e018      	b.n	8006dd0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d103      	bne.n	8006db0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 ff81 	bl	8007cb0 <vPortFree>
	}
 8006dae:	e00f      	b.n	8006dd0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d00a      	beq.n	8006dd0 <prvDeleteTCB+0x60>
	__asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	60fb      	str	r3, [r7, #12]
}
 8006dcc:	bf00      	nop
 8006dce:	e7fe      	b.n	8006dce <prvDeleteTCB+0x5e>
	}
 8006dd0:	bf00      	nop
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dde:	4b0c      	ldr	r3, [pc, #48]	; (8006e10 <prvResetNextTaskUnblockTime+0x38>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d104      	bne.n	8006df2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006de8:	4b0a      	ldr	r3, [pc, #40]	; (8006e14 <prvResetNextTaskUnblockTime+0x3c>)
 8006dea:	f04f 32ff 	mov.w	r2, #4294967295
 8006dee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006df0:	e008      	b.n	8006e04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006df2:	4b07      	ldr	r3, [pc, #28]	; (8006e10 <prvResetNextTaskUnblockTime+0x38>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	4a04      	ldr	r2, [pc, #16]	; (8006e14 <prvResetNextTaskUnblockTime+0x3c>)
 8006e02:	6013      	str	r3, [r2, #0]
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	20000e24 	.word	0x20000e24
 8006e14:	20000e8c 	.word	0x20000e8c

08006e18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e1e:	4b0b      	ldr	r3, [pc, #44]	; (8006e4c <xTaskGetSchedulerState+0x34>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d102      	bne.n	8006e2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e26:	2301      	movs	r3, #1
 8006e28:	607b      	str	r3, [r7, #4]
 8006e2a:	e008      	b.n	8006e3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e2c:	4b08      	ldr	r3, [pc, #32]	; (8006e50 <xTaskGetSchedulerState+0x38>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d102      	bne.n	8006e3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e34:	2302      	movs	r3, #2
 8006e36:	607b      	str	r3, [r7, #4]
 8006e38:	e001      	b.n	8006e3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e3e:	687b      	ldr	r3, [r7, #4]
	}
 8006e40:	4618      	mov	r0, r3
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	20000e78 	.word	0x20000e78
 8006e50:	20000e94 	.word	0x20000e94

08006e54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e60:	2300      	movs	r3, #0
 8006e62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d056      	beq.n	8006f18 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e6a:	4b2e      	ldr	r3, [pc, #184]	; (8006f24 <xTaskPriorityDisinherit+0xd0>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d00a      	beq.n	8006e8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	60fb      	str	r3, [r7, #12]
}
 8006e86:	bf00      	nop
 8006e88:	e7fe      	b.n	8006e88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10a      	bne.n	8006ea8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	60bb      	str	r3, [r7, #8]
}
 8006ea4:	bf00      	nop
 8006ea6:	e7fe      	b.n	8006ea6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eac:	1e5a      	subs	r2, r3, #1
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d02c      	beq.n	8006f18 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d128      	bne.n	8006f18 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	3304      	adds	r3, #4
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7fe fc7a 	bl	80057c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006edc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee8:	4b0f      	ldr	r3, [pc, #60]	; (8006f28 <xTaskPriorityDisinherit+0xd4>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d903      	bls.n	8006ef8 <xTaskPriorityDisinherit+0xa4>
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef4:	4a0c      	ldr	r2, [pc, #48]	; (8006f28 <xTaskPriorityDisinherit+0xd4>)
 8006ef6:	6013      	str	r3, [r2, #0]
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006efc:	4613      	mov	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4a09      	ldr	r2, [pc, #36]	; (8006f2c <xTaskPriorityDisinherit+0xd8>)
 8006f06:	441a      	add	r2, r3
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4610      	mov	r0, r2
 8006f10:	f7fe fbfb 	bl	800570a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f14:	2301      	movs	r3, #1
 8006f16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f18:	697b      	ldr	r3, [r7, #20]
	}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	20000998 	.word	0x20000998
 8006f28:	20000e74 	.word	0x20000e74
 8006f2c:	2000099c 	.word	0x2000099c

08006f30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f3a:	4b21      	ldr	r3, [pc, #132]	; (8006fc0 <prvAddCurrentTaskToDelayedList+0x90>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f40:	4b20      	ldr	r3, [pc, #128]	; (8006fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	3304      	adds	r3, #4
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fe fc3c 	bl	80057c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f52:	d10a      	bne.n	8006f6a <prvAddCurrentTaskToDelayedList+0x3a>
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d007      	beq.n	8006f6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f5a:	4b1a      	ldr	r3, [pc, #104]	; (8006fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3304      	adds	r3, #4
 8006f60:	4619      	mov	r1, r3
 8006f62:	4819      	ldr	r0, [pc, #100]	; (8006fc8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006f64:	f7fe fbd1 	bl	800570a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f68:	e026      	b.n	8006fb8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4413      	add	r3, r2
 8006f70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f72:	4b14      	ldr	r3, [pc, #80]	; (8006fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d209      	bcs.n	8006f96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f82:	4b12      	ldr	r3, [pc, #72]	; (8006fcc <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	4b0f      	ldr	r3, [pc, #60]	; (8006fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	4610      	mov	r0, r2
 8006f90:	f7fe fbdf 	bl	8005752 <vListInsert>
}
 8006f94:	e010      	b.n	8006fb8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f96:	4b0e      	ldr	r3, [pc, #56]	; (8006fd0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	4b0a      	ldr	r3, [pc, #40]	; (8006fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4610      	mov	r0, r2
 8006fa4:	f7fe fbd5 	bl	8005752 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006fa8:	4b0a      	ldr	r3, [pc, #40]	; (8006fd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d202      	bcs.n	8006fb8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006fb2:	4a08      	ldr	r2, [pc, #32]	; (8006fd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	6013      	str	r3, [r2, #0]
}
 8006fb8:	bf00      	nop
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	20000e70 	.word	0x20000e70
 8006fc4:	20000998 	.word	0x20000998
 8006fc8:	20000e58 	.word	0x20000e58
 8006fcc:	20000e28 	.word	0x20000e28
 8006fd0:	20000e24 	.word	0x20000e24
 8006fd4:	20000e8c 	.word	0x20000e8c

08006fd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b08a      	sub	sp, #40	; 0x28
 8006fdc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006fe2:	f000 fb07 	bl	80075f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006fe6:	4b1c      	ldr	r3, [pc, #112]	; (8007058 <xTimerCreateTimerTask+0x80>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d021      	beq.n	8007032 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006ff6:	1d3a      	adds	r2, r7, #4
 8006ff8:	f107 0108 	add.w	r1, r7, #8
 8006ffc:	f107 030c 	add.w	r3, r7, #12
 8007000:	4618      	mov	r0, r3
 8007002:	f7fe fb3b 	bl	800567c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	9202      	str	r2, [sp, #8]
 800700e:	9301      	str	r3, [sp, #4]
 8007010:	2302      	movs	r3, #2
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	2300      	movs	r3, #0
 8007016:	460a      	mov	r2, r1
 8007018:	4910      	ldr	r1, [pc, #64]	; (800705c <xTimerCreateTimerTask+0x84>)
 800701a:	4811      	ldr	r0, [pc, #68]	; (8007060 <xTimerCreateTimerTask+0x88>)
 800701c:	f7ff f8e8 	bl	80061f0 <xTaskCreateStatic>
 8007020:	4603      	mov	r3, r0
 8007022:	4a10      	ldr	r2, [pc, #64]	; (8007064 <xTimerCreateTimerTask+0x8c>)
 8007024:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007026:	4b0f      	ldr	r3, [pc, #60]	; (8007064 <xTimerCreateTimerTask+0x8c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800702e:	2301      	movs	r3, #1
 8007030:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10a      	bne.n	800704e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703c:	f383 8811 	msr	BASEPRI, r3
 8007040:	f3bf 8f6f 	isb	sy
 8007044:	f3bf 8f4f 	dsb	sy
 8007048:	613b      	str	r3, [r7, #16]
}
 800704a:	bf00      	nop
 800704c:	e7fe      	b.n	800704c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800704e:	697b      	ldr	r3, [r7, #20]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3718      	adds	r7, #24
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	20000ec8 	.word	0x20000ec8
 800705c:	08008234 	.word	0x08008234
 8007060:	0800719d 	.word	0x0800719d
 8007064:	20000ecc 	.word	0x20000ecc

08007068 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b08a      	sub	sp, #40	; 0x28
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
 8007074:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007076:	2300      	movs	r3, #0
 8007078:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10a      	bne.n	8007096 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	623b      	str	r3, [r7, #32]
}
 8007092:	bf00      	nop
 8007094:	e7fe      	b.n	8007094 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007096:	4b1a      	ldr	r3, [pc, #104]	; (8007100 <xTimerGenericCommand+0x98>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d02a      	beq.n	80070f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2b05      	cmp	r3, #5
 80070ae:	dc18      	bgt.n	80070e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80070b0:	f7ff feb2 	bl	8006e18 <xTaskGetSchedulerState>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d109      	bne.n	80070ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80070ba:	4b11      	ldr	r3, [pc, #68]	; (8007100 <xTimerGenericCommand+0x98>)
 80070bc:	6818      	ldr	r0, [r3, #0]
 80070be:	f107 0110 	add.w	r1, r7, #16
 80070c2:	2300      	movs	r3, #0
 80070c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070c6:	f7fe fcab 	bl	8005a20 <xQueueGenericSend>
 80070ca:	6278      	str	r0, [r7, #36]	; 0x24
 80070cc:	e012      	b.n	80070f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80070ce:	4b0c      	ldr	r3, [pc, #48]	; (8007100 <xTimerGenericCommand+0x98>)
 80070d0:	6818      	ldr	r0, [r3, #0]
 80070d2:	f107 0110 	add.w	r1, r7, #16
 80070d6:	2300      	movs	r3, #0
 80070d8:	2200      	movs	r2, #0
 80070da:	f7fe fca1 	bl	8005a20 <xQueueGenericSend>
 80070de:	6278      	str	r0, [r7, #36]	; 0x24
 80070e0:	e008      	b.n	80070f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80070e2:	4b07      	ldr	r3, [pc, #28]	; (8007100 <xTimerGenericCommand+0x98>)
 80070e4:	6818      	ldr	r0, [r3, #0]
 80070e6:	f107 0110 	add.w	r1, r7, #16
 80070ea:	2300      	movs	r3, #0
 80070ec:	683a      	ldr	r2, [r7, #0]
 80070ee:	f7fe fd95 	bl	8005c1c <xQueueGenericSendFromISR>
 80070f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3728      	adds	r7, #40	; 0x28
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	20000ec8 	.word	0x20000ec8

08007104 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b088      	sub	sp, #32
 8007108:	af02      	add	r7, sp, #8
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800710e:	4b22      	ldr	r3, [pc, #136]	; (8007198 <prvProcessExpiredTimer+0x94>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	3304      	adds	r3, #4
 800711c:	4618      	mov	r0, r3
 800711e:	f7fe fb51 	bl	80057c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007128:	f003 0304 	and.w	r3, r3, #4
 800712c:	2b00      	cmp	r3, #0
 800712e:	d022      	beq.n	8007176 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	699a      	ldr	r2, [r3, #24]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	18d1      	adds	r1, r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	683a      	ldr	r2, [r7, #0]
 800713c:	6978      	ldr	r0, [r7, #20]
 800713e:	f000 f8d1 	bl	80072e4 <prvInsertTimerInActiveList>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d01f      	beq.n	8007188 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007148:	2300      	movs	r3, #0
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	2300      	movs	r3, #0
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	2100      	movs	r1, #0
 8007152:	6978      	ldr	r0, [r7, #20]
 8007154:	f7ff ff88 	bl	8007068 <xTimerGenericCommand>
 8007158:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d113      	bne.n	8007188 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	60fb      	str	r3, [r7, #12]
}
 8007172:	bf00      	nop
 8007174:	e7fe      	b.n	8007174 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800717c:	f023 0301 	bic.w	r3, r3, #1
 8007180:	b2da      	uxtb	r2, r3
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	6a1b      	ldr	r3, [r3, #32]
 800718c:	6978      	ldr	r0, [r7, #20]
 800718e:	4798      	blx	r3
}
 8007190:	bf00      	nop
 8007192:	3718      	adds	r7, #24
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	20000ec0 	.word	0x20000ec0

0800719c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071a4:	f107 0308 	add.w	r3, r7, #8
 80071a8:	4618      	mov	r0, r3
 80071aa:	f000 f857 	bl	800725c <prvGetNextExpireTime>
 80071ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	4619      	mov	r1, r3
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f000 f803 	bl	80071c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80071ba:	f000 f8d5 	bl	8007368 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071be:	e7f1      	b.n	80071a4 <prvTimerTask+0x8>

080071c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80071ca:	f7ff fa39 	bl	8006640 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071ce:	f107 0308 	add.w	r3, r7, #8
 80071d2:	4618      	mov	r0, r3
 80071d4:	f000 f866 	bl	80072a4 <prvSampleTimeNow>
 80071d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d130      	bne.n	8007242 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10a      	bne.n	80071fc <prvProcessTimerOrBlockTask+0x3c>
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d806      	bhi.n	80071fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80071ee:	f7ff fa35 	bl	800665c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80071f2:	68f9      	ldr	r1, [r7, #12]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7ff ff85 	bl	8007104 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80071fa:	e024      	b.n	8007246 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d008      	beq.n	8007214 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007202:	4b13      	ldr	r3, [pc, #76]	; (8007250 <prvProcessTimerOrBlockTask+0x90>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <prvProcessTimerOrBlockTask+0x50>
 800720c:	2301      	movs	r3, #1
 800720e:	e000      	b.n	8007212 <prvProcessTimerOrBlockTask+0x52>
 8007210:	2300      	movs	r3, #0
 8007212:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007214:	4b0f      	ldr	r3, [pc, #60]	; (8007254 <prvProcessTimerOrBlockTask+0x94>)
 8007216:	6818      	ldr	r0, [r3, #0]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	4619      	mov	r1, r3
 8007222:	f7fe ffb1 	bl	8006188 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007226:	f7ff fa19 	bl	800665c <xTaskResumeAll>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10a      	bne.n	8007246 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007230:	4b09      	ldr	r3, [pc, #36]	; (8007258 <prvProcessTimerOrBlockTask+0x98>)
 8007232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007236:	601a      	str	r2, [r3, #0]
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	f3bf 8f6f 	isb	sy
}
 8007240:	e001      	b.n	8007246 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007242:	f7ff fa0b 	bl	800665c <xTaskResumeAll>
}
 8007246:	bf00      	nop
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	20000ec4 	.word	0x20000ec4
 8007254:	20000ec8 	.word	0x20000ec8
 8007258:	e000ed04 	.word	0xe000ed04

0800725c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007264:	4b0e      	ldr	r3, [pc, #56]	; (80072a0 <prvGetNextExpireTime+0x44>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <prvGetNextExpireTime+0x16>
 800726e:	2201      	movs	r2, #1
 8007270:	e000      	b.n	8007274 <prvGetNextExpireTime+0x18>
 8007272:	2200      	movs	r2, #0
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d105      	bne.n	800728c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007280:	4b07      	ldr	r3, [pc, #28]	; (80072a0 <prvGetNextExpireTime+0x44>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	60fb      	str	r3, [r7, #12]
 800728a:	e001      	b.n	8007290 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800728c:	2300      	movs	r3, #0
 800728e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007290:	68fb      	ldr	r3, [r7, #12]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	20000ec0 	.word	0x20000ec0

080072a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80072ac:	f7ff fa74 	bl	8006798 <xTaskGetTickCount>
 80072b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80072b2:	4b0b      	ldr	r3, [pc, #44]	; (80072e0 <prvSampleTimeNow+0x3c>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d205      	bcs.n	80072c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80072bc:	f000 f936 	bl	800752c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	e002      	b.n	80072ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80072ce:	4a04      	ldr	r2, [pc, #16]	; (80072e0 <prvSampleTimeNow+0x3c>)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80072d4:	68fb      	ldr	r3, [r7, #12]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	20000ed0 	.word	0x20000ed0

080072e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
 80072f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80072f2:	2300      	movs	r3, #0
 80072f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	429a      	cmp	r2, r3
 8007308:	d812      	bhi.n	8007330 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	1ad2      	subs	r2, r2, r3
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	429a      	cmp	r2, r3
 8007316:	d302      	bcc.n	800731e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007318:	2301      	movs	r3, #1
 800731a:	617b      	str	r3, [r7, #20]
 800731c:	e01b      	b.n	8007356 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800731e:	4b10      	ldr	r3, [pc, #64]	; (8007360 <prvInsertTimerInActiveList+0x7c>)
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	3304      	adds	r3, #4
 8007326:	4619      	mov	r1, r3
 8007328:	4610      	mov	r0, r2
 800732a:	f7fe fa12 	bl	8005752 <vListInsert>
 800732e:	e012      	b.n	8007356 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	429a      	cmp	r2, r3
 8007336:	d206      	bcs.n	8007346 <prvInsertTimerInActiveList+0x62>
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	429a      	cmp	r2, r3
 800733e:	d302      	bcc.n	8007346 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007340:	2301      	movs	r3, #1
 8007342:	617b      	str	r3, [r7, #20]
 8007344:	e007      	b.n	8007356 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007346:	4b07      	ldr	r3, [pc, #28]	; (8007364 <prvInsertTimerInActiveList+0x80>)
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	3304      	adds	r3, #4
 800734e:	4619      	mov	r1, r3
 8007350:	4610      	mov	r0, r2
 8007352:	f7fe f9fe 	bl	8005752 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007356:	697b      	ldr	r3, [r7, #20]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3718      	adds	r7, #24
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	20000ec4 	.word	0x20000ec4
 8007364:	20000ec0 	.word	0x20000ec0

08007368 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08e      	sub	sp, #56	; 0x38
 800736c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800736e:	e0ca      	b.n	8007506 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	da18      	bge.n	80073a8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007376:	1d3b      	adds	r3, r7, #4
 8007378:	3304      	adds	r3, #4
 800737a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800737c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10a      	bne.n	8007398 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007386:	f383 8811 	msr	BASEPRI, r3
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	61fb      	str	r3, [r7, #28]
}
 8007394:	bf00      	nop
 8007396:	e7fe      	b.n	8007396 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800739e:	6850      	ldr	r0, [r2, #4]
 80073a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073a2:	6892      	ldr	r2, [r2, #8]
 80073a4:	4611      	mov	r1, r2
 80073a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f2c0 80ab 	blt.w	8007506 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80073b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d004      	beq.n	80073c6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073be:	3304      	adds	r3, #4
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7fe f9ff 	bl	80057c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073c6:	463b      	mov	r3, r7
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7ff ff6b 	bl	80072a4 <prvSampleTimeNow>
 80073ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2b09      	cmp	r3, #9
 80073d4:	f200 8096 	bhi.w	8007504 <prvProcessReceivedCommands+0x19c>
 80073d8:	a201      	add	r2, pc, #4	; (adr r2, 80073e0 <prvProcessReceivedCommands+0x78>)
 80073da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073de:	bf00      	nop
 80073e0:	08007409 	.word	0x08007409
 80073e4:	08007409 	.word	0x08007409
 80073e8:	08007409 	.word	0x08007409
 80073ec:	0800747d 	.word	0x0800747d
 80073f0:	08007491 	.word	0x08007491
 80073f4:	080074db 	.word	0x080074db
 80073f8:	08007409 	.word	0x08007409
 80073fc:	08007409 	.word	0x08007409
 8007400:	0800747d 	.word	0x0800747d
 8007404:	08007491 	.word	0x08007491
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800740e:	f043 0301 	orr.w	r3, r3, #1
 8007412:	b2da      	uxtb	r2, r3
 8007414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007416:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	18d1      	adds	r1, r2, r3
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007426:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007428:	f7ff ff5c 	bl	80072e4 <prvInsertTimerInActiveList>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d069      	beq.n	8007506 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007438:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800743a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007440:	f003 0304 	and.w	r3, r3, #4
 8007444:	2b00      	cmp	r3, #0
 8007446:	d05e      	beq.n	8007506 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	441a      	add	r2, r3
 8007450:	2300      	movs	r3, #0
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	2300      	movs	r3, #0
 8007456:	2100      	movs	r1, #0
 8007458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800745a:	f7ff fe05 	bl	8007068 <xTimerGenericCommand>
 800745e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d14f      	bne.n	8007506 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746a:	f383 8811 	msr	BASEPRI, r3
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	61bb      	str	r3, [r7, #24]
}
 8007478:	bf00      	nop
 800747a:	e7fe      	b.n	800747a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800747c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007482:	f023 0301 	bic.w	r3, r3, #1
 8007486:	b2da      	uxtb	r2, r3
 8007488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800748e:	e03a      	b.n	8007506 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007492:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007496:	f043 0301 	orr.w	r3, r3, #1
 800749a:	b2da      	uxtb	r2, r3
 800749c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80074a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10a      	bne.n	80074c6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	617b      	str	r3, [r7, #20]
}
 80074c2:	bf00      	nop
 80074c4:	e7fe      	b.n	80074c4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80074c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c8:	699a      	ldr	r2, [r3, #24]
 80074ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074cc:	18d1      	adds	r1, r2, r3
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074d4:	f7ff ff06 	bl	80072e4 <prvInsertTimerInActiveList>
					break;
 80074d8:	e015      	b.n	8007506 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80074da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074e0:	f003 0302 	and.w	r3, r3, #2
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d103      	bne.n	80074f0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80074e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074ea:	f000 fbe1 	bl	8007cb0 <vPortFree>
 80074ee:	e00a      	b.n	8007506 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074f6:	f023 0301 	bic.w	r3, r3, #1
 80074fa:	b2da      	uxtb	r2, r3
 80074fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007502:	e000      	b.n	8007506 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007504:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007506:	4b08      	ldr	r3, [pc, #32]	; (8007528 <prvProcessReceivedCommands+0x1c0>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	1d39      	adds	r1, r7, #4
 800750c:	2200      	movs	r2, #0
 800750e:	4618      	mov	r0, r3
 8007510:	f7fe fc20 	bl	8005d54 <xQueueReceive>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	f47f af2a 	bne.w	8007370 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800751c:	bf00      	nop
 800751e:	bf00      	nop
 8007520:	3730      	adds	r7, #48	; 0x30
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	20000ec8 	.word	0x20000ec8

0800752c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b088      	sub	sp, #32
 8007530:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007532:	e048      	b.n	80075c6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007534:	4b2d      	ldr	r3, [pc, #180]	; (80075ec <prvSwitchTimerLists+0xc0>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800753e:	4b2b      	ldr	r3, [pc, #172]	; (80075ec <prvSwitchTimerLists+0xc0>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	3304      	adds	r3, #4
 800754c:	4618      	mov	r0, r3
 800754e:	f7fe f939 	bl	80057c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007560:	f003 0304 	and.w	r3, r3, #4
 8007564:	2b00      	cmp	r3, #0
 8007566:	d02e      	beq.n	80075c6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	4413      	add	r3, r2
 8007570:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	429a      	cmp	r2, r3
 8007578:	d90e      	bls.n	8007598 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007586:	4b19      	ldr	r3, [pc, #100]	; (80075ec <prvSwitchTimerLists+0xc0>)
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	3304      	adds	r3, #4
 800758e:	4619      	mov	r1, r3
 8007590:	4610      	mov	r0, r2
 8007592:	f7fe f8de 	bl	8005752 <vListInsert>
 8007596:	e016      	b.n	80075c6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007598:	2300      	movs	r3, #0
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	2300      	movs	r3, #0
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	2100      	movs	r1, #0
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f7ff fd60 	bl	8007068 <xTimerGenericCommand>
 80075a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10a      	bne.n	80075c6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80075b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b4:	f383 8811 	msr	BASEPRI, r3
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	603b      	str	r3, [r7, #0]
}
 80075c2:	bf00      	nop
 80075c4:	e7fe      	b.n	80075c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075c6:	4b09      	ldr	r3, [pc, #36]	; (80075ec <prvSwitchTimerLists+0xc0>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1b1      	bne.n	8007534 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80075d0:	4b06      	ldr	r3, [pc, #24]	; (80075ec <prvSwitchTimerLists+0xc0>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80075d6:	4b06      	ldr	r3, [pc, #24]	; (80075f0 <prvSwitchTimerLists+0xc4>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a04      	ldr	r2, [pc, #16]	; (80075ec <prvSwitchTimerLists+0xc0>)
 80075dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80075de:	4a04      	ldr	r2, [pc, #16]	; (80075f0 <prvSwitchTimerLists+0xc4>)
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	6013      	str	r3, [r2, #0]
}
 80075e4:	bf00      	nop
 80075e6:	3718      	adds	r7, #24
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	20000ec0 	.word	0x20000ec0
 80075f0:	20000ec4 	.word	0x20000ec4

080075f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80075fa:	f000 f96b 	bl	80078d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80075fe:	4b15      	ldr	r3, [pc, #84]	; (8007654 <prvCheckForValidListAndQueue+0x60>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d120      	bne.n	8007648 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007606:	4814      	ldr	r0, [pc, #80]	; (8007658 <prvCheckForValidListAndQueue+0x64>)
 8007608:	f7fe f852 	bl	80056b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800760c:	4813      	ldr	r0, [pc, #76]	; (800765c <prvCheckForValidListAndQueue+0x68>)
 800760e:	f7fe f84f 	bl	80056b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007612:	4b13      	ldr	r3, [pc, #76]	; (8007660 <prvCheckForValidListAndQueue+0x6c>)
 8007614:	4a10      	ldr	r2, [pc, #64]	; (8007658 <prvCheckForValidListAndQueue+0x64>)
 8007616:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007618:	4b12      	ldr	r3, [pc, #72]	; (8007664 <prvCheckForValidListAndQueue+0x70>)
 800761a:	4a10      	ldr	r2, [pc, #64]	; (800765c <prvCheckForValidListAndQueue+0x68>)
 800761c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800761e:	2300      	movs	r3, #0
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	4b11      	ldr	r3, [pc, #68]	; (8007668 <prvCheckForValidListAndQueue+0x74>)
 8007624:	4a11      	ldr	r2, [pc, #68]	; (800766c <prvCheckForValidListAndQueue+0x78>)
 8007626:	2110      	movs	r1, #16
 8007628:	200a      	movs	r0, #10
 800762a:	f7fe f95d 	bl	80058e8 <xQueueGenericCreateStatic>
 800762e:	4603      	mov	r3, r0
 8007630:	4a08      	ldr	r2, [pc, #32]	; (8007654 <prvCheckForValidListAndQueue+0x60>)
 8007632:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007634:	4b07      	ldr	r3, [pc, #28]	; (8007654 <prvCheckForValidListAndQueue+0x60>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d005      	beq.n	8007648 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800763c:	4b05      	ldr	r3, [pc, #20]	; (8007654 <prvCheckForValidListAndQueue+0x60>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	490b      	ldr	r1, [pc, #44]	; (8007670 <prvCheckForValidListAndQueue+0x7c>)
 8007642:	4618      	mov	r0, r3
 8007644:	f7fe fd76 	bl	8006134 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007648:	f000 f974 	bl	8007934 <vPortExitCritical>
}
 800764c:	bf00      	nop
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	20000ec8 	.word	0x20000ec8
 8007658:	20000e98 	.word	0x20000e98
 800765c:	20000eac 	.word	0x20000eac
 8007660:	20000ec0 	.word	0x20000ec0
 8007664:	20000ec4 	.word	0x20000ec4
 8007668:	20000f74 	.word	0x20000f74
 800766c:	20000ed4 	.word	0x20000ed4
 8007670:	0800823c 	.word	0x0800823c

08007674 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	3b04      	subs	r3, #4
 8007684:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800768c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	3b04      	subs	r3, #4
 8007692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	f023 0201 	bic.w	r2, r3, #1
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	3b04      	subs	r3, #4
 80076a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076a4:	4a0c      	ldr	r2, [pc, #48]	; (80076d8 <pxPortInitialiseStack+0x64>)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3b14      	subs	r3, #20
 80076ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	3b04      	subs	r3, #4
 80076ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f06f 0202 	mvn.w	r2, #2
 80076c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	3b20      	subs	r3, #32
 80076c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80076ca:	68fb      	ldr	r3, [r7, #12]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3714      	adds	r7, #20
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	080076dd 	.word	0x080076dd

080076dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80076e2:	2300      	movs	r3, #0
 80076e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80076e6:	4b12      	ldr	r3, [pc, #72]	; (8007730 <prvTaskExitError+0x54>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ee:	d00a      	beq.n	8007706 <prvTaskExitError+0x2a>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	60fb      	str	r3, [r7, #12]
}
 8007702:	bf00      	nop
 8007704:	e7fe      	b.n	8007704 <prvTaskExitError+0x28>
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770a:	f383 8811 	msr	BASEPRI, r3
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	60bb      	str	r3, [r7, #8]
}
 8007718:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800771a:	bf00      	nop
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d0fc      	beq.n	800771c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007722:	bf00      	nop
 8007724:	bf00      	nop
 8007726:	3714      	adds	r7, #20
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	2000000c 	.word	0x2000000c
	...

08007740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007740:	4b07      	ldr	r3, [pc, #28]	; (8007760 <pxCurrentTCBConst2>)
 8007742:	6819      	ldr	r1, [r3, #0]
 8007744:	6808      	ldr	r0, [r1, #0]
 8007746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800774a:	f380 8809 	msr	PSP, r0
 800774e:	f3bf 8f6f 	isb	sy
 8007752:	f04f 0000 	mov.w	r0, #0
 8007756:	f380 8811 	msr	BASEPRI, r0
 800775a:	4770      	bx	lr
 800775c:	f3af 8000 	nop.w

08007760 <pxCurrentTCBConst2>:
 8007760:	20000998 	.word	0x20000998
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop

08007768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007768:	4808      	ldr	r0, [pc, #32]	; (800778c <prvPortStartFirstTask+0x24>)
 800776a:	6800      	ldr	r0, [r0, #0]
 800776c:	6800      	ldr	r0, [r0, #0]
 800776e:	f380 8808 	msr	MSP, r0
 8007772:	f04f 0000 	mov.w	r0, #0
 8007776:	f380 8814 	msr	CONTROL, r0
 800777a:	b662      	cpsie	i
 800777c:	b661      	cpsie	f
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	df00      	svc	0
 8007788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800778a:	bf00      	nop
 800778c:	e000ed08 	.word	0xe000ed08

08007790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007796:	4b46      	ldr	r3, [pc, #280]	; (80078b0 <xPortStartScheduler+0x120>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a46      	ldr	r2, [pc, #280]	; (80078b4 <xPortStartScheduler+0x124>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d10a      	bne.n	80077b6 <xPortStartScheduler+0x26>
	__asm volatile
 80077a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a4:	f383 8811 	msr	BASEPRI, r3
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	f3bf 8f4f 	dsb	sy
 80077b0:	613b      	str	r3, [r7, #16]
}
 80077b2:	bf00      	nop
 80077b4:	e7fe      	b.n	80077b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80077b6:	4b3e      	ldr	r3, [pc, #248]	; (80078b0 <xPortStartScheduler+0x120>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a3f      	ldr	r2, [pc, #252]	; (80078b8 <xPortStartScheduler+0x128>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d10a      	bne.n	80077d6 <xPortStartScheduler+0x46>
	__asm volatile
 80077c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c4:	f383 8811 	msr	BASEPRI, r3
 80077c8:	f3bf 8f6f 	isb	sy
 80077cc:	f3bf 8f4f 	dsb	sy
 80077d0:	60fb      	str	r3, [r7, #12]
}
 80077d2:	bf00      	nop
 80077d4:	e7fe      	b.n	80077d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80077d6:	4b39      	ldr	r3, [pc, #228]	; (80078bc <xPortStartScheduler+0x12c>)
 80077d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	22ff      	movs	r2, #255	; 0xff
 80077e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80077f0:	78fb      	ldrb	r3, [r7, #3]
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	4b31      	ldr	r3, [pc, #196]	; (80078c0 <xPortStartScheduler+0x130>)
 80077fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80077fe:	4b31      	ldr	r3, [pc, #196]	; (80078c4 <xPortStartScheduler+0x134>)
 8007800:	2207      	movs	r2, #7
 8007802:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007804:	e009      	b.n	800781a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007806:	4b2f      	ldr	r3, [pc, #188]	; (80078c4 <xPortStartScheduler+0x134>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	3b01      	subs	r3, #1
 800780c:	4a2d      	ldr	r2, [pc, #180]	; (80078c4 <xPortStartScheduler+0x134>)
 800780e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007810:	78fb      	ldrb	r3, [r7, #3]
 8007812:	b2db      	uxtb	r3, r3
 8007814:	005b      	lsls	r3, r3, #1
 8007816:	b2db      	uxtb	r3, r3
 8007818:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800781a:	78fb      	ldrb	r3, [r7, #3]
 800781c:	b2db      	uxtb	r3, r3
 800781e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007822:	2b80      	cmp	r3, #128	; 0x80
 8007824:	d0ef      	beq.n	8007806 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007826:	4b27      	ldr	r3, [pc, #156]	; (80078c4 <xPortStartScheduler+0x134>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f1c3 0307 	rsb	r3, r3, #7
 800782e:	2b04      	cmp	r3, #4
 8007830:	d00a      	beq.n	8007848 <xPortStartScheduler+0xb8>
	__asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	60bb      	str	r3, [r7, #8]
}
 8007844:	bf00      	nop
 8007846:	e7fe      	b.n	8007846 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007848:	4b1e      	ldr	r3, [pc, #120]	; (80078c4 <xPortStartScheduler+0x134>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	021b      	lsls	r3, r3, #8
 800784e:	4a1d      	ldr	r2, [pc, #116]	; (80078c4 <xPortStartScheduler+0x134>)
 8007850:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007852:	4b1c      	ldr	r3, [pc, #112]	; (80078c4 <xPortStartScheduler+0x134>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800785a:	4a1a      	ldr	r2, [pc, #104]	; (80078c4 <xPortStartScheduler+0x134>)
 800785c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	b2da      	uxtb	r2, r3
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007866:	4b18      	ldr	r3, [pc, #96]	; (80078c8 <xPortStartScheduler+0x138>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a17      	ldr	r2, [pc, #92]	; (80078c8 <xPortStartScheduler+0x138>)
 800786c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007870:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007872:	4b15      	ldr	r3, [pc, #84]	; (80078c8 <xPortStartScheduler+0x138>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a14      	ldr	r2, [pc, #80]	; (80078c8 <xPortStartScheduler+0x138>)
 8007878:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800787c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800787e:	f000 f8dd 	bl	8007a3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007882:	4b12      	ldr	r3, [pc, #72]	; (80078cc <xPortStartScheduler+0x13c>)
 8007884:	2200      	movs	r2, #0
 8007886:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007888:	f000 f8fc 	bl	8007a84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800788c:	4b10      	ldr	r3, [pc, #64]	; (80078d0 <xPortStartScheduler+0x140>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a0f      	ldr	r2, [pc, #60]	; (80078d0 <xPortStartScheduler+0x140>)
 8007892:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007896:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007898:	f7ff ff66 	bl	8007768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800789c:	f7ff f846 	bl	800692c <vTaskSwitchContext>
	prvTaskExitError();
 80078a0:	f7ff ff1c 	bl	80076dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3718      	adds	r7, #24
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	e000ed00 	.word	0xe000ed00
 80078b4:	410fc271 	.word	0x410fc271
 80078b8:	410fc270 	.word	0x410fc270
 80078bc:	e000e400 	.word	0xe000e400
 80078c0:	20000fc4 	.word	0x20000fc4
 80078c4:	20000fc8 	.word	0x20000fc8
 80078c8:	e000ed20 	.word	0xe000ed20
 80078cc:	2000000c 	.word	0x2000000c
 80078d0:	e000ef34 	.word	0xe000ef34

080078d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
	__asm volatile
 80078da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078de:	f383 8811 	msr	BASEPRI, r3
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	f3bf 8f4f 	dsb	sy
 80078ea:	607b      	str	r3, [r7, #4]
}
 80078ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80078ee:	4b0f      	ldr	r3, [pc, #60]	; (800792c <vPortEnterCritical+0x58>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	3301      	adds	r3, #1
 80078f4:	4a0d      	ldr	r2, [pc, #52]	; (800792c <vPortEnterCritical+0x58>)
 80078f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80078f8:	4b0c      	ldr	r3, [pc, #48]	; (800792c <vPortEnterCritical+0x58>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d10f      	bne.n	8007920 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007900:	4b0b      	ldr	r3, [pc, #44]	; (8007930 <vPortEnterCritical+0x5c>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <vPortEnterCritical+0x4c>
	__asm volatile
 800790a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790e:	f383 8811 	msr	BASEPRI, r3
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	603b      	str	r3, [r7, #0]
}
 800791c:	bf00      	nop
 800791e:	e7fe      	b.n	800791e <vPortEnterCritical+0x4a>
	}
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	2000000c 	.word	0x2000000c
 8007930:	e000ed04 	.word	0xe000ed04

08007934 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800793a:	4b12      	ldr	r3, [pc, #72]	; (8007984 <vPortExitCritical+0x50>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10a      	bne.n	8007958 <vPortExitCritical+0x24>
	__asm volatile
 8007942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	607b      	str	r3, [r7, #4]
}
 8007954:	bf00      	nop
 8007956:	e7fe      	b.n	8007956 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007958:	4b0a      	ldr	r3, [pc, #40]	; (8007984 <vPortExitCritical+0x50>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	3b01      	subs	r3, #1
 800795e:	4a09      	ldr	r2, [pc, #36]	; (8007984 <vPortExitCritical+0x50>)
 8007960:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007962:	4b08      	ldr	r3, [pc, #32]	; (8007984 <vPortExitCritical+0x50>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d105      	bne.n	8007976 <vPortExitCritical+0x42>
 800796a:	2300      	movs	r3, #0
 800796c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	f383 8811 	msr	BASEPRI, r3
}
 8007974:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	2000000c 	.word	0x2000000c
	...

08007990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007990:	f3ef 8009 	mrs	r0, PSP
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	4b15      	ldr	r3, [pc, #84]	; (80079f0 <pxCurrentTCBConst>)
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	f01e 0f10 	tst.w	lr, #16
 80079a0:	bf08      	it	eq
 80079a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079aa:	6010      	str	r0, [r2, #0]
 80079ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80079b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80079b4:	f380 8811 	msr	BASEPRI, r0
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f7fe ffb4 	bl	800692c <vTaskSwitchContext>
 80079c4:	f04f 0000 	mov.w	r0, #0
 80079c8:	f380 8811 	msr	BASEPRI, r0
 80079cc:	bc09      	pop	{r0, r3}
 80079ce:	6819      	ldr	r1, [r3, #0]
 80079d0:	6808      	ldr	r0, [r1, #0]
 80079d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d6:	f01e 0f10 	tst.w	lr, #16
 80079da:	bf08      	it	eq
 80079dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80079e0:	f380 8809 	msr	PSP, r0
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	f3af 8000 	nop.w

080079f0 <pxCurrentTCBConst>:
 80079f0:	20000998 	.word	0x20000998
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80079f4:	bf00      	nop
 80079f6:	bf00      	nop

080079f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
	__asm volatile
 80079fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	607b      	str	r3, [r7, #4]
}
 8007a10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a12:	f7fe fed1 	bl	80067b8 <xTaskIncrementTick>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d003      	beq.n	8007a24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a1c:	4b06      	ldr	r3, [pc, #24]	; (8007a38 <xPortSysTickHandler+0x40>)
 8007a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	2300      	movs	r3, #0
 8007a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	f383 8811 	msr	BASEPRI, r3
}
 8007a2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a30:	bf00      	nop
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	e000ed04 	.word	0xe000ed04

08007a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a40:	4b0b      	ldr	r3, [pc, #44]	; (8007a70 <vPortSetupTimerInterrupt+0x34>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a46:	4b0b      	ldr	r3, [pc, #44]	; (8007a74 <vPortSetupTimerInterrupt+0x38>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a4c:	4b0a      	ldr	r3, [pc, #40]	; (8007a78 <vPortSetupTimerInterrupt+0x3c>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a0a      	ldr	r2, [pc, #40]	; (8007a7c <vPortSetupTimerInterrupt+0x40>)
 8007a52:	fba2 2303 	umull	r2, r3, r2, r3
 8007a56:	099b      	lsrs	r3, r3, #6
 8007a58:	4a09      	ldr	r2, [pc, #36]	; (8007a80 <vPortSetupTimerInterrupt+0x44>)
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a5e:	4b04      	ldr	r3, [pc, #16]	; (8007a70 <vPortSetupTimerInterrupt+0x34>)
 8007a60:	2207      	movs	r2, #7
 8007a62:	601a      	str	r2, [r3, #0]
}
 8007a64:	bf00      	nop
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	e000e010 	.word	0xe000e010
 8007a74:	e000e018 	.word	0xe000e018
 8007a78:	20000000 	.word	0x20000000
 8007a7c:	10624dd3 	.word	0x10624dd3
 8007a80:	e000e014 	.word	0xe000e014

08007a84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007a94 <vPortEnableVFP+0x10>
 8007a88:	6801      	ldr	r1, [r0, #0]
 8007a8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007a8e:	6001      	str	r1, [r0, #0]
 8007a90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a92:	bf00      	nop
 8007a94:	e000ed88 	.word	0xe000ed88

08007a98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a9e:	f3ef 8305 	mrs	r3, IPSR
 8007aa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2b0f      	cmp	r3, #15
 8007aa8:	d914      	bls.n	8007ad4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007aaa:	4a17      	ldr	r2, [pc, #92]	; (8007b08 <vPortValidateInterruptPriority+0x70>)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4413      	add	r3, r2
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ab4:	4b15      	ldr	r3, [pc, #84]	; (8007b0c <vPortValidateInterruptPriority+0x74>)
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	7afa      	ldrb	r2, [r7, #11]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d20a      	bcs.n	8007ad4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	607b      	str	r3, [r7, #4]
}
 8007ad0:	bf00      	nop
 8007ad2:	e7fe      	b.n	8007ad2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ad4:	4b0e      	ldr	r3, [pc, #56]	; (8007b10 <vPortValidateInterruptPriority+0x78>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007adc:	4b0d      	ldr	r3, [pc, #52]	; (8007b14 <vPortValidateInterruptPriority+0x7c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d90a      	bls.n	8007afa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae8:	f383 8811 	msr	BASEPRI, r3
 8007aec:	f3bf 8f6f 	isb	sy
 8007af0:	f3bf 8f4f 	dsb	sy
 8007af4:	603b      	str	r3, [r7, #0]
}
 8007af6:	bf00      	nop
 8007af8:	e7fe      	b.n	8007af8 <vPortValidateInterruptPriority+0x60>
	}
 8007afa:	bf00      	nop
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	e000e3f0 	.word	0xe000e3f0
 8007b0c:	20000fc4 	.word	0x20000fc4
 8007b10:	e000ed0c 	.word	0xe000ed0c
 8007b14:	20000fc8 	.word	0x20000fc8

08007b18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b08a      	sub	sp, #40	; 0x28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b20:	2300      	movs	r3, #0
 8007b22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b24:	f7fe fd8c 	bl	8006640 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b28:	4b5b      	ldr	r3, [pc, #364]	; (8007c98 <pvPortMalloc+0x180>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d101      	bne.n	8007b34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b30:	f000 f920 	bl	8007d74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b34:	4b59      	ldr	r3, [pc, #356]	; (8007c9c <pvPortMalloc+0x184>)
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f040 8093 	bne.w	8007c68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d01d      	beq.n	8007b84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007b48:	2208      	movs	r2, #8
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f003 0307 	and.w	r3, r3, #7
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d014      	beq.n	8007b84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f023 0307 	bic.w	r3, r3, #7
 8007b60:	3308      	adds	r3, #8
 8007b62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f003 0307 	and.w	r3, r3, #7
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00a      	beq.n	8007b84 <pvPortMalloc+0x6c>
	__asm volatile
 8007b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b72:	f383 8811 	msr	BASEPRI, r3
 8007b76:	f3bf 8f6f 	isb	sy
 8007b7a:	f3bf 8f4f 	dsb	sy
 8007b7e:	617b      	str	r3, [r7, #20]
}
 8007b80:	bf00      	nop
 8007b82:	e7fe      	b.n	8007b82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d06e      	beq.n	8007c68 <pvPortMalloc+0x150>
 8007b8a:	4b45      	ldr	r3, [pc, #276]	; (8007ca0 <pvPortMalloc+0x188>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d869      	bhi.n	8007c68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b94:	4b43      	ldr	r3, [pc, #268]	; (8007ca4 <pvPortMalloc+0x18c>)
 8007b96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007b98:	4b42      	ldr	r3, [pc, #264]	; (8007ca4 <pvPortMalloc+0x18c>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b9e:	e004      	b.n	8007baa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d903      	bls.n	8007bbc <pvPortMalloc+0xa4>
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1f1      	bne.n	8007ba0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007bbc:	4b36      	ldr	r3, [pc, #216]	; (8007c98 <pvPortMalloc+0x180>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d050      	beq.n	8007c68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2208      	movs	r2, #8
 8007bcc:	4413      	add	r3, r2
 8007bce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	6a3b      	ldr	r3, [r7, #32]
 8007bd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	1ad2      	subs	r2, r2, r3
 8007be0:	2308      	movs	r3, #8
 8007be2:	005b      	lsls	r3, r3, #1
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d91f      	bls.n	8007c28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4413      	add	r3, r2
 8007bee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	f003 0307 	and.w	r3, r3, #7
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00a      	beq.n	8007c10 <pvPortMalloc+0xf8>
	__asm volatile
 8007bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfe:	f383 8811 	msr	BASEPRI, r3
 8007c02:	f3bf 8f6f 	isb	sy
 8007c06:	f3bf 8f4f 	dsb	sy
 8007c0a:	613b      	str	r3, [r7, #16]
}
 8007c0c:	bf00      	nop
 8007c0e:	e7fe      	b.n	8007c0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	685a      	ldr	r2, [r3, #4]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	1ad2      	subs	r2, r2, r3
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c22:	69b8      	ldr	r0, [r7, #24]
 8007c24:	f000 f908 	bl	8007e38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c28:	4b1d      	ldr	r3, [pc, #116]	; (8007ca0 <pvPortMalloc+0x188>)
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	4a1b      	ldr	r2, [pc, #108]	; (8007ca0 <pvPortMalloc+0x188>)
 8007c34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c36:	4b1a      	ldr	r3, [pc, #104]	; (8007ca0 <pvPortMalloc+0x188>)
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	4b1b      	ldr	r3, [pc, #108]	; (8007ca8 <pvPortMalloc+0x190>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d203      	bcs.n	8007c4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c42:	4b17      	ldr	r3, [pc, #92]	; (8007ca0 <pvPortMalloc+0x188>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a18      	ldr	r2, [pc, #96]	; (8007ca8 <pvPortMalloc+0x190>)
 8007c48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4c:	685a      	ldr	r2, [r3, #4]
 8007c4e:	4b13      	ldr	r3, [pc, #76]	; (8007c9c <pvPortMalloc+0x184>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	431a      	orrs	r2, r3
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007c5e:	4b13      	ldr	r3, [pc, #76]	; (8007cac <pvPortMalloc+0x194>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	3301      	adds	r3, #1
 8007c64:	4a11      	ldr	r2, [pc, #68]	; (8007cac <pvPortMalloc+0x194>)
 8007c66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c68:	f7fe fcf8 	bl	800665c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	f003 0307 	and.w	r3, r3, #7
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00a      	beq.n	8007c8c <pvPortMalloc+0x174>
	__asm volatile
 8007c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7a:	f383 8811 	msr	BASEPRI, r3
 8007c7e:	f3bf 8f6f 	isb	sy
 8007c82:	f3bf 8f4f 	dsb	sy
 8007c86:	60fb      	str	r3, [r7, #12]
}
 8007c88:	bf00      	nop
 8007c8a:	e7fe      	b.n	8007c8a <pvPortMalloc+0x172>
	return pvReturn;
 8007c8c:	69fb      	ldr	r3, [r7, #28]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3728      	adds	r7, #40	; 0x28
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	20004bd4 	.word	0x20004bd4
 8007c9c:	20004be8 	.word	0x20004be8
 8007ca0:	20004bd8 	.word	0x20004bd8
 8007ca4:	20004bcc 	.word	0x20004bcc
 8007ca8:	20004bdc 	.word	0x20004bdc
 8007cac:	20004be0 	.word	0x20004be0

08007cb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d04d      	beq.n	8007d5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007cc2:	2308      	movs	r3, #8
 8007cc4:	425b      	negs	r3, r3
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	4413      	add	r3, r2
 8007cca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	685a      	ldr	r2, [r3, #4]
 8007cd4:	4b24      	ldr	r3, [pc, #144]	; (8007d68 <vPortFree+0xb8>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4013      	ands	r3, r2
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10a      	bne.n	8007cf4 <vPortFree+0x44>
	__asm volatile
 8007cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce2:	f383 8811 	msr	BASEPRI, r3
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	60fb      	str	r3, [r7, #12]
}
 8007cf0:	bf00      	nop
 8007cf2:	e7fe      	b.n	8007cf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00a      	beq.n	8007d12 <vPortFree+0x62>
	__asm volatile
 8007cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	60bb      	str	r3, [r7, #8]
}
 8007d0e:	bf00      	nop
 8007d10:	e7fe      	b.n	8007d10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	4b14      	ldr	r3, [pc, #80]	; (8007d68 <vPortFree+0xb8>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d01e      	beq.n	8007d5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d11a      	bne.n	8007d5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	4b0e      	ldr	r3, [pc, #56]	; (8007d68 <vPortFree+0xb8>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	43db      	mvns	r3, r3
 8007d32:	401a      	ands	r2, r3
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d38:	f7fe fc82 	bl	8006640 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	685a      	ldr	r2, [r3, #4]
 8007d40:	4b0a      	ldr	r3, [pc, #40]	; (8007d6c <vPortFree+0xbc>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4413      	add	r3, r2
 8007d46:	4a09      	ldr	r2, [pc, #36]	; (8007d6c <vPortFree+0xbc>)
 8007d48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d4a:	6938      	ldr	r0, [r7, #16]
 8007d4c:	f000 f874 	bl	8007e38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007d50:	4b07      	ldr	r3, [pc, #28]	; (8007d70 <vPortFree+0xc0>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	3301      	adds	r3, #1
 8007d56:	4a06      	ldr	r2, [pc, #24]	; (8007d70 <vPortFree+0xc0>)
 8007d58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007d5a:	f7fe fc7f 	bl	800665c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d5e:	bf00      	nop
 8007d60:	3718      	adds	r7, #24
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	20004be8 	.word	0x20004be8
 8007d6c:	20004bd8 	.word	0x20004bd8
 8007d70:	20004be4 	.word	0x20004be4

08007d74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007d7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d80:	4b27      	ldr	r3, [pc, #156]	; (8007e20 <prvHeapInit+0xac>)
 8007d82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f003 0307 	and.w	r3, r3, #7
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00c      	beq.n	8007da8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3307      	adds	r3, #7
 8007d92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f023 0307 	bic.w	r3, r3, #7
 8007d9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	4a1f      	ldr	r2, [pc, #124]	; (8007e20 <prvHeapInit+0xac>)
 8007da4:	4413      	add	r3, r2
 8007da6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007dac:	4a1d      	ldr	r2, [pc, #116]	; (8007e24 <prvHeapInit+0xb0>)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007db2:	4b1c      	ldr	r3, [pc, #112]	; (8007e24 <prvHeapInit+0xb0>)
 8007db4:	2200      	movs	r2, #0
 8007db6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007dc0:	2208      	movs	r2, #8
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	1a9b      	subs	r3, r3, r2
 8007dc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f023 0307 	bic.w	r3, r3, #7
 8007dce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	4a15      	ldr	r2, [pc, #84]	; (8007e28 <prvHeapInit+0xb4>)
 8007dd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007dd6:	4b14      	ldr	r3, [pc, #80]	; (8007e28 <prvHeapInit+0xb4>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007dde:	4b12      	ldr	r3, [pc, #72]	; (8007e28 <prvHeapInit+0xb4>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2200      	movs	r2, #0
 8007de4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	1ad2      	subs	r2, r2, r3
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007df4:	4b0c      	ldr	r3, [pc, #48]	; (8007e28 <prvHeapInit+0xb4>)
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	4a0a      	ldr	r2, [pc, #40]	; (8007e2c <prvHeapInit+0xb8>)
 8007e02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	4a09      	ldr	r2, [pc, #36]	; (8007e30 <prvHeapInit+0xbc>)
 8007e0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e0c:	4b09      	ldr	r3, [pc, #36]	; (8007e34 <prvHeapInit+0xc0>)
 8007e0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e12:	601a      	str	r2, [r3, #0]
}
 8007e14:	bf00      	nop
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	20000fcc 	.word	0x20000fcc
 8007e24:	20004bcc 	.word	0x20004bcc
 8007e28:	20004bd4 	.word	0x20004bd4
 8007e2c:	20004bdc 	.word	0x20004bdc
 8007e30:	20004bd8 	.word	0x20004bd8
 8007e34:	20004be8 	.word	0x20004be8

08007e38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e40:	4b28      	ldr	r3, [pc, #160]	; (8007ee4 <prvInsertBlockIntoFreeList+0xac>)
 8007e42:	60fb      	str	r3, [r7, #12]
 8007e44:	e002      	b.n	8007e4c <prvInsertBlockIntoFreeList+0x14>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	60fb      	str	r3, [r7, #12]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d8f7      	bhi.n	8007e46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	68ba      	ldr	r2, [r7, #8]
 8007e60:	4413      	add	r3, r2
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d108      	bne.n	8007e7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	685a      	ldr	r2, [r3, #4]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	441a      	add	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	68ba      	ldr	r2, [r7, #8]
 8007e84:	441a      	add	r2, r3
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d118      	bne.n	8007ec0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	4b15      	ldr	r3, [pc, #84]	; (8007ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d00d      	beq.n	8007eb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685a      	ldr	r2, [r3, #4]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	441a      	add	r2, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	e008      	b.n	8007ec8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007eb6:	4b0c      	ldr	r3, [pc, #48]	; (8007ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	601a      	str	r2, [r3, #0]
 8007ebe:	e003      	b.n	8007ec8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d002      	beq.n	8007ed6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ed6:	bf00      	nop
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	20004bcc 	.word	0x20004bcc
 8007ee8:	20004bd4 	.word	0x20004bd4

08007eec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fd fa34 	bl	8005368 <USBH_LL_IncTimer>
}
 8007f00:	bf00      	nop
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fd fa78 	bl	800540c <USBH_LL_Connect>
}
 8007f1c:	bf00      	nop
 8007f1e:	3708      	adds	r7, #8
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fd fa8d 	bl	8005452 <USBH_LL_Disconnect>
}
 8007f38:	bf00      	nop
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	460b      	mov	r3, r1
 8007f4a:	70fb      	strb	r3, [r7, #3]
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fd faad 	bl	80054b6 <USBH_LL_NotifyURBChange>
#endif
}
 8007f5c:	bf00      	nop
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fd fa22 	bl	80053bc <USBH_LL_PortEnabled>
}
 8007f78:	bf00      	nop
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fd fa2e 	bl	80053f0 <USBH_LL_PortDisabled>
}
 8007f94:	bf00      	nop
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7f9 fb43 	bl	800163e <HAL_HCD_Stop>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f000 f808 	bl	8007fd4 <USBH_Get_USB_Status>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
	...

08007fd4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	4603      	mov	r3, r0
 8007fdc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007fe2:	79fb      	ldrb	r3, [r7, #7]
 8007fe4:	2b03      	cmp	r3, #3
 8007fe6:	d817      	bhi.n	8008018 <USBH_Get_USB_Status+0x44>
 8007fe8:	a201      	add	r2, pc, #4	; (adr r2, 8007ff0 <USBH_Get_USB_Status+0x1c>)
 8007fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fee:	bf00      	nop
 8007ff0:	08008001 	.word	0x08008001
 8007ff4:	08008007 	.word	0x08008007
 8007ff8:	0800800d 	.word	0x0800800d
 8007ffc:	08008013 	.word	0x08008013
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008000:	2300      	movs	r3, #0
 8008002:	73fb      	strb	r3, [r7, #15]
    break;
 8008004:	e00b      	b.n	800801e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008006:	2302      	movs	r3, #2
 8008008:	73fb      	strb	r3, [r7, #15]
    break;
 800800a:	e008      	b.n	800801e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800800c:	2301      	movs	r3, #1
 800800e:	73fb      	strb	r3, [r7, #15]
    break;
 8008010:	e005      	b.n	800801e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008012:	2302      	movs	r3, #2
 8008014:	73fb      	strb	r3, [r7, #15]
    break;
 8008016:	e002      	b.n	800801e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008018:	2302      	movs	r3, #2
 800801a:	73fb      	strb	r3, [r7, #15]
    break;
 800801c:	bf00      	nop
  }
  return usb_status;
 800801e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3714      	adds	r7, #20
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <__malloc_lock>:
 800802c:	4801      	ldr	r0, [pc, #4]	; (8008034 <__malloc_lock+0x8>)
 800802e:	f000 b88b 	b.w	8008148 <__retarget_lock_acquire_recursive>
 8008032:	bf00      	nop
 8008034:	20005108 	.word	0x20005108

08008038 <__malloc_unlock>:
 8008038:	4801      	ldr	r0, [pc, #4]	; (8008040 <__malloc_unlock+0x8>)
 800803a:	f000 b886 	b.w	800814a <__retarget_lock_release_recursive>
 800803e:	bf00      	nop
 8008040:	20005108 	.word	0x20005108

08008044 <memset>:
 8008044:	4402      	add	r2, r0
 8008046:	4603      	mov	r3, r0
 8008048:	4293      	cmp	r3, r2
 800804a:	d100      	bne.n	800804e <memset+0xa>
 800804c:	4770      	bx	lr
 800804e:	f803 1b01 	strb.w	r1, [r3], #1
 8008052:	e7f9      	b.n	8008048 <memset+0x4>

08008054 <_reclaim_reent>:
 8008054:	4b29      	ldr	r3, [pc, #164]	; (80080fc <_reclaim_reent+0xa8>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4283      	cmp	r3, r0
 800805a:	b570      	push	{r4, r5, r6, lr}
 800805c:	4604      	mov	r4, r0
 800805e:	d04b      	beq.n	80080f8 <_reclaim_reent+0xa4>
 8008060:	69c3      	ldr	r3, [r0, #28]
 8008062:	b143      	cbz	r3, 8008076 <_reclaim_reent+0x22>
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d144      	bne.n	80080f4 <_reclaim_reent+0xa0>
 800806a:	69e3      	ldr	r3, [r4, #28]
 800806c:	6819      	ldr	r1, [r3, #0]
 800806e:	b111      	cbz	r1, 8008076 <_reclaim_reent+0x22>
 8008070:	4620      	mov	r0, r4
 8008072:	f000 f879 	bl	8008168 <_free_r>
 8008076:	6961      	ldr	r1, [r4, #20]
 8008078:	b111      	cbz	r1, 8008080 <_reclaim_reent+0x2c>
 800807a:	4620      	mov	r0, r4
 800807c:	f000 f874 	bl	8008168 <_free_r>
 8008080:	69e1      	ldr	r1, [r4, #28]
 8008082:	b111      	cbz	r1, 800808a <_reclaim_reent+0x36>
 8008084:	4620      	mov	r0, r4
 8008086:	f000 f86f 	bl	8008168 <_free_r>
 800808a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800808c:	b111      	cbz	r1, 8008094 <_reclaim_reent+0x40>
 800808e:	4620      	mov	r0, r4
 8008090:	f000 f86a 	bl	8008168 <_free_r>
 8008094:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008096:	b111      	cbz	r1, 800809e <_reclaim_reent+0x4a>
 8008098:	4620      	mov	r0, r4
 800809a:	f000 f865 	bl	8008168 <_free_r>
 800809e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80080a0:	b111      	cbz	r1, 80080a8 <_reclaim_reent+0x54>
 80080a2:	4620      	mov	r0, r4
 80080a4:	f000 f860 	bl	8008168 <_free_r>
 80080a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80080aa:	b111      	cbz	r1, 80080b2 <_reclaim_reent+0x5e>
 80080ac:	4620      	mov	r0, r4
 80080ae:	f000 f85b 	bl	8008168 <_free_r>
 80080b2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80080b4:	b111      	cbz	r1, 80080bc <_reclaim_reent+0x68>
 80080b6:	4620      	mov	r0, r4
 80080b8:	f000 f856 	bl	8008168 <_free_r>
 80080bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80080be:	b111      	cbz	r1, 80080c6 <_reclaim_reent+0x72>
 80080c0:	4620      	mov	r0, r4
 80080c2:	f000 f851 	bl	8008168 <_free_r>
 80080c6:	6a23      	ldr	r3, [r4, #32]
 80080c8:	b1b3      	cbz	r3, 80080f8 <_reclaim_reent+0xa4>
 80080ca:	4620      	mov	r0, r4
 80080cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80080d0:	4718      	bx	r3
 80080d2:	5949      	ldr	r1, [r1, r5]
 80080d4:	b941      	cbnz	r1, 80080e8 <_reclaim_reent+0x94>
 80080d6:	3504      	adds	r5, #4
 80080d8:	69e3      	ldr	r3, [r4, #28]
 80080da:	2d80      	cmp	r5, #128	; 0x80
 80080dc:	68d9      	ldr	r1, [r3, #12]
 80080de:	d1f8      	bne.n	80080d2 <_reclaim_reent+0x7e>
 80080e0:	4620      	mov	r0, r4
 80080e2:	f000 f841 	bl	8008168 <_free_r>
 80080e6:	e7c0      	b.n	800806a <_reclaim_reent+0x16>
 80080e8:	680e      	ldr	r6, [r1, #0]
 80080ea:	4620      	mov	r0, r4
 80080ec:	f000 f83c 	bl	8008168 <_free_r>
 80080f0:	4631      	mov	r1, r6
 80080f2:	e7ef      	b.n	80080d4 <_reclaim_reent+0x80>
 80080f4:	2500      	movs	r5, #0
 80080f6:	e7ef      	b.n	80080d8 <_reclaim_reent+0x84>
 80080f8:	bd70      	pop	{r4, r5, r6, pc}
 80080fa:	bf00      	nop
 80080fc:	2000005c 	.word	0x2000005c

08008100 <__libc_init_array>:
 8008100:	b570      	push	{r4, r5, r6, lr}
 8008102:	4d0d      	ldr	r5, [pc, #52]	; (8008138 <__libc_init_array+0x38>)
 8008104:	4c0d      	ldr	r4, [pc, #52]	; (800813c <__libc_init_array+0x3c>)
 8008106:	1b64      	subs	r4, r4, r5
 8008108:	10a4      	asrs	r4, r4, #2
 800810a:	2600      	movs	r6, #0
 800810c:	42a6      	cmp	r6, r4
 800810e:	d109      	bne.n	8008124 <__libc_init_array+0x24>
 8008110:	4d0b      	ldr	r5, [pc, #44]	; (8008140 <__libc_init_array+0x40>)
 8008112:	4c0c      	ldr	r4, [pc, #48]	; (8008144 <__libc_init_array+0x44>)
 8008114:	f000 f874 	bl	8008200 <_init>
 8008118:	1b64      	subs	r4, r4, r5
 800811a:	10a4      	asrs	r4, r4, #2
 800811c:	2600      	movs	r6, #0
 800811e:	42a6      	cmp	r6, r4
 8008120:	d105      	bne.n	800812e <__libc_init_array+0x2e>
 8008122:	bd70      	pop	{r4, r5, r6, pc}
 8008124:	f855 3b04 	ldr.w	r3, [r5], #4
 8008128:	4798      	blx	r3
 800812a:	3601      	adds	r6, #1
 800812c:	e7ee      	b.n	800810c <__libc_init_array+0xc>
 800812e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008132:	4798      	blx	r3
 8008134:	3601      	adds	r6, #1
 8008136:	e7f2      	b.n	800811e <__libc_init_array+0x1e>
 8008138:	08008264 	.word	0x08008264
 800813c:	08008264 	.word	0x08008264
 8008140:	08008264 	.word	0x08008264
 8008144:	08008268 	.word	0x08008268

08008148 <__retarget_lock_acquire_recursive>:
 8008148:	4770      	bx	lr

0800814a <__retarget_lock_release_recursive>:
 800814a:	4770      	bx	lr

0800814c <memcpy>:
 800814c:	440a      	add	r2, r1
 800814e:	4291      	cmp	r1, r2
 8008150:	f100 33ff 	add.w	r3, r0, #4294967295
 8008154:	d100      	bne.n	8008158 <memcpy+0xc>
 8008156:	4770      	bx	lr
 8008158:	b510      	push	{r4, lr}
 800815a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800815e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008162:	4291      	cmp	r1, r2
 8008164:	d1f9      	bne.n	800815a <memcpy+0xe>
 8008166:	bd10      	pop	{r4, pc}

08008168 <_free_r>:
 8008168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800816a:	2900      	cmp	r1, #0
 800816c:	d044      	beq.n	80081f8 <_free_r+0x90>
 800816e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008172:	9001      	str	r0, [sp, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	f1a1 0404 	sub.w	r4, r1, #4
 800817a:	bfb8      	it	lt
 800817c:	18e4      	addlt	r4, r4, r3
 800817e:	f7ff ff55 	bl	800802c <__malloc_lock>
 8008182:	4a1e      	ldr	r2, [pc, #120]	; (80081fc <_free_r+0x94>)
 8008184:	9801      	ldr	r0, [sp, #4]
 8008186:	6813      	ldr	r3, [r2, #0]
 8008188:	b933      	cbnz	r3, 8008198 <_free_r+0x30>
 800818a:	6063      	str	r3, [r4, #4]
 800818c:	6014      	str	r4, [r2, #0]
 800818e:	b003      	add	sp, #12
 8008190:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008194:	f7ff bf50 	b.w	8008038 <__malloc_unlock>
 8008198:	42a3      	cmp	r3, r4
 800819a:	d908      	bls.n	80081ae <_free_r+0x46>
 800819c:	6825      	ldr	r5, [r4, #0]
 800819e:	1961      	adds	r1, r4, r5
 80081a0:	428b      	cmp	r3, r1
 80081a2:	bf01      	itttt	eq
 80081a4:	6819      	ldreq	r1, [r3, #0]
 80081a6:	685b      	ldreq	r3, [r3, #4]
 80081a8:	1949      	addeq	r1, r1, r5
 80081aa:	6021      	streq	r1, [r4, #0]
 80081ac:	e7ed      	b.n	800818a <_free_r+0x22>
 80081ae:	461a      	mov	r2, r3
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	b10b      	cbz	r3, 80081b8 <_free_r+0x50>
 80081b4:	42a3      	cmp	r3, r4
 80081b6:	d9fa      	bls.n	80081ae <_free_r+0x46>
 80081b8:	6811      	ldr	r1, [r2, #0]
 80081ba:	1855      	adds	r5, r2, r1
 80081bc:	42a5      	cmp	r5, r4
 80081be:	d10b      	bne.n	80081d8 <_free_r+0x70>
 80081c0:	6824      	ldr	r4, [r4, #0]
 80081c2:	4421      	add	r1, r4
 80081c4:	1854      	adds	r4, r2, r1
 80081c6:	42a3      	cmp	r3, r4
 80081c8:	6011      	str	r1, [r2, #0]
 80081ca:	d1e0      	bne.n	800818e <_free_r+0x26>
 80081cc:	681c      	ldr	r4, [r3, #0]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	6053      	str	r3, [r2, #4]
 80081d2:	440c      	add	r4, r1
 80081d4:	6014      	str	r4, [r2, #0]
 80081d6:	e7da      	b.n	800818e <_free_r+0x26>
 80081d8:	d902      	bls.n	80081e0 <_free_r+0x78>
 80081da:	230c      	movs	r3, #12
 80081dc:	6003      	str	r3, [r0, #0]
 80081de:	e7d6      	b.n	800818e <_free_r+0x26>
 80081e0:	6825      	ldr	r5, [r4, #0]
 80081e2:	1961      	adds	r1, r4, r5
 80081e4:	428b      	cmp	r3, r1
 80081e6:	bf04      	itt	eq
 80081e8:	6819      	ldreq	r1, [r3, #0]
 80081ea:	685b      	ldreq	r3, [r3, #4]
 80081ec:	6063      	str	r3, [r4, #4]
 80081ee:	bf04      	itt	eq
 80081f0:	1949      	addeq	r1, r1, r5
 80081f2:	6021      	streq	r1, [r4, #0]
 80081f4:	6054      	str	r4, [r2, #4]
 80081f6:	e7ca      	b.n	800818e <_free_r+0x26>
 80081f8:	b003      	add	sp, #12
 80081fa:	bd30      	pop	{r4, r5, pc}
 80081fc:	20004fcc 	.word	0x20004fcc

08008200 <_init>:
 8008200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008202:	bf00      	nop
 8008204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008206:	bc08      	pop	{r3}
 8008208:	469e      	mov	lr, r3
 800820a:	4770      	bx	lr

0800820c <_fini>:
 800820c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800820e:	bf00      	nop
 8008210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008212:	bc08      	pop	{r3}
 8008214:	469e      	mov	lr, r3
 8008216:	4770      	bx	lr
