
RTPLaboratories.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008578  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008708  08008708  00018708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008778  08008778  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008778  08008778  00018778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008780  08008780  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008780  08008780  00018780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008784  08008784  00018784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00004498  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004510  20004510  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001df1f  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000048f5  00000000  00000000  0003e00a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b80  00000000  00000000  00042900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000154f  00000000  00000000  00044480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024ef4  00000000  00000000  000459cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00021a35  00000000  00000000  0006a8c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dbe39  00000000  00000000  0008c2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000077c4  00000000  00000000  00168134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0016f8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080086f0 	.word	0x080086f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080086f0 	.word	0x080086f0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <rand>:
const TickType_t xMaxBlockTimeTicks = 0x20;

TickType_t delay1=mainDELAY_LOOP_COUNT, delay2=mainDELAY_LOOP_COUNT/10;

unsigned int rand (void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
   static unsigned int z1 = 12345, z2 = 12345, z3 = 12345, z4 = 12345;
   unsigned int b;
   b  = ((z1 << 6) ^ z1) >> 13;
 80004d2:	4b2b      	ldr	r3, [pc, #172]	; (8000580 <rand+0xb4>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	019a      	lsls	r2, r3, #6
 80004d8:	4b29      	ldr	r3, [pc, #164]	; (8000580 <rand+0xb4>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4053      	eors	r3, r2
 80004de:	0b5b      	lsrs	r3, r3, #13
 80004e0:	607b      	str	r3, [r7, #4]
   z1 = ((z1 & 4294967294U) << 18) ^ b;
 80004e2:	4b27      	ldr	r3, [pc, #156]	; (8000580 <rand+0xb4>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	049b      	lsls	r3, r3, #18
 80004e8:	0cdb      	lsrs	r3, r3, #19
 80004ea:	04db      	lsls	r3, r3, #19
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	4053      	eors	r3, r2
 80004f0:	4a23      	ldr	r2, [pc, #140]	; (8000580 <rand+0xb4>)
 80004f2:	6013      	str	r3, [r2, #0]
   b  = ((z2 << 2) ^ z2) >> 27;
 80004f4:	4b23      	ldr	r3, [pc, #140]	; (8000584 <rand+0xb8>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	009a      	lsls	r2, r3, #2
 80004fa:	4b22      	ldr	r3, [pc, #136]	; (8000584 <rand+0xb8>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4053      	eors	r3, r2
 8000500:	0edb      	lsrs	r3, r3, #27
 8000502:	607b      	str	r3, [r7, #4]
   z2 = ((z2 & 4294967288U) << 2) ^ b;
 8000504:	4b1f      	ldr	r3, [pc, #124]	; (8000584 <rand+0xb8>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	f023 021f 	bic.w	r2, r3, #31
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4053      	eors	r3, r2
 8000512:	4a1c      	ldr	r2, [pc, #112]	; (8000584 <rand+0xb8>)
 8000514:	6013      	str	r3, [r2, #0]
   b  = ((z3 << 13) ^ z3) >> 21;
 8000516:	4b1c      	ldr	r3, [pc, #112]	; (8000588 <rand+0xbc>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	035a      	lsls	r2, r3, #13
 800051c:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <rand+0xbc>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4053      	eors	r3, r2
 8000522:	0d5b      	lsrs	r3, r3, #21
 8000524:	607b      	str	r3, [r7, #4]
   z3 = ((z3 & 4294967280U) << 7) ^ b;
 8000526:	4b18      	ldr	r3, [pc, #96]	; (8000588 <rand+0xbc>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	01db      	lsls	r3, r3, #7
 800052c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000530:	f023 0307 	bic.w	r3, r3, #7
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	4053      	eors	r3, r2
 8000538:	4a13      	ldr	r2, [pc, #76]	; (8000588 <rand+0xbc>)
 800053a:	6013      	str	r3, [r2, #0]
   b  = ((z4 << 3) ^ z4) >> 12;
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <rand+0xc0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	00da      	lsls	r2, r3, #3
 8000542:	4b12      	ldr	r3, [pc, #72]	; (800058c <rand+0xc0>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4053      	eors	r3, r2
 8000548:	0b1b      	lsrs	r3, r3, #12
 800054a:	607b      	str	r3, [r7, #4]
   z4 = ((z4 & 4294967168U) << 13) ^ b;
 800054c:	4b0f      	ldr	r3, [pc, #60]	; (800058c <rand+0xc0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	035b      	lsls	r3, r3, #13
 8000552:	0d1b      	lsrs	r3, r3, #20
 8000554:	051b      	lsls	r3, r3, #20
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	4053      	eors	r3, r2
 800055a:	4a0c      	ldr	r2, [pc, #48]	; (800058c <rand+0xc0>)
 800055c:	6013      	str	r3, [r2, #0]
   return (z1 ^ z2 ^ z3 ^ z4);
 800055e:	4b08      	ldr	r3, [pc, #32]	; (8000580 <rand+0xb4>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <rand+0xb8>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	405a      	eors	r2, r3
 8000568:	4b07      	ldr	r3, [pc, #28]	; (8000588 <rand+0xbc>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	405a      	eors	r2, r3
 800056e:	4b07      	ldr	r3, [pc, #28]	; (800058c <rand+0xc0>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4053      	eors	r3, r2
}
 8000574:	4618      	mov	r0, r3
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	20000008 	.word	0x20000008
 8000584:	2000000c 	.word	0x2000000c
 8000588:	20000010 	.word	0x20000010
 800058c:	20000014 	.word	0x20000014

08000590 <prvBlinky>:

static void prvBlinky( uint32_t *delay )
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	available immediately.  The call to xSemaphoreTake() will only return when
	the semaphore has been successfully obtained so there is no need to check the
	return value.  If any other delay period was used then the code must check
	that xSemaphoreTake() returns pdTRUE before accessing the resource (in this
	case standard out. */
	xSemaphoreTake( xMutex, portMAX_DELAY );
 8000598:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <prvBlinky+0x68>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f04f 31ff 	mov.w	r1, #4294967295
 80005a0:	4618      	mov	r0, r3
 80005a2:	f005 fd63 	bl	800606c <xQueueSemaphoreTake>
	//xSemaphoreTake( xBinarySemaphore, portMAX_DELAY );
	{
		/* The following line will only execute once the semaphore has been
		successfully obtained - so standard out can be accessed freely. */

		for (i=0; i<10 ;i++)
 80005a6:	2300      	movs	r3, #0
 80005a8:	73fb      	strb	r3, [r7, #15]
 80005aa:	e015      	b.n	80005d8 <prvBlinky+0x48>
		{
			HAL_GPIO_TogglePin(GPIOD, RED_LED);
 80005ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b0:	4812      	ldr	r0, [pc, #72]	; (80005fc <prvBlinky+0x6c>)
 80005b2:	f001 f83c 	bl	800162e <HAL_GPIO_TogglePin>
			/* Delay for a period. */
			for (ul = 0; ul < (*delay)/2; ul++)
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	e002      	b.n	80005c2 <prvBlinky+0x32>
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	3301      	adds	r3, #1
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	085a      	lsrs	r2, r3, #1
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d8f6      	bhi.n	80005bc <prvBlinky+0x2c>
		for (i=0; i<10 ;i++)
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	3301      	adds	r3, #1
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	73fb      	strb	r3, [r7, #15]
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	2b09      	cmp	r3, #9
 80005de:	d9e5      	bls.n	80005ac <prvBlinky+0x1c>
			{
				/* This loop is just a very crude delay implementation. */
			}
		}
	}
	xSemaphoreGive( xMutex );
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <prvBlinky+0x68>)
 80005e2:	6818      	ldr	r0, [r3, #0]
 80005e4:	2300      	movs	r3, #0
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	f005 fac5 	bl	8005b78 <xQueueGenericSend>
	//xSemaphoreGive( xBinarySemaphore );

}
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000094 	.word	0x20000094
 80005fc:	40020c00 	.word	0x40020c00

08000600 <prvBlinkLEDL>:

static void prvBlinkLEDL( void *pvParameters )
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	uint32_t *delay;
	const TickType_t xSlowDownDelay = pdMS_TO_TICKS( 500 );
 8000608:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800060c:	60fb      	str	r3, [r7, #12]

	/* Two instances of this task are created.  The string printed by the task
	is passed into the task using the task's parameter.  The parameter is cast
	to the required type. */
	delay = ( uint32_t * ) pvParameters;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	60bb      	str	r3, [r7, #8]


	for( ;; )
	{
		/* Print out the string using the newly defined function. */
		prvBlinky( delay );
 8000612:	68b8      	ldr	r0, [r7, #8]
 8000614:	f7ff ffbc 	bl	8000590 <prvBlinky>
		/* Wait a pseudo random time.  Note that rand() is not necessarily
		re-entrant, but in this case it does not really matter as the code does
		not care what value is returned.  In a more secure application a version
		of rand() that is known to be re-entrant should be used - or calls to
		rand() should be protected using a critical section. */
		vTaskDelay( rand() % xMaxBlockTimeTicks );
 8000618:	f7ff ff58 	bl	80004cc <rand>
 800061c:	4603      	mov	r3, r0
 800061e:	2220      	movs	r2, #32
 8000620:	fbb3 f1f2 	udiv	r1, r3, r2
 8000624:	fb01 f202 	mul.w	r2, r1, r2
 8000628:	1a9b      	subs	r3, r3, r2
 800062a:	4618      	mov	r0, r3
 800062c:	f006 f8fa 	bl	8006824 <vTaskDelay>

		/* Just to ensure the scrolling is not too fast! */
		vTaskDelay( xSlowDownDelay );
 8000630:	68f8      	ldr	r0, [r7, #12]
 8000632:	f006 f8f7 	bl	8006824 <vTaskDelay>
		prvBlinky( delay );
 8000636:	e7ec      	b.n	8000612 <prvBlinkLEDL+0x12>

08000638 <prvBlinkLEDH>:
	}
}


static void prvBlinkLEDH( void *pvParameters )
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	uint32_t *delay;
	const TickType_t xSlowDownDelay = pdMS_TO_TICKS( 500 );
 8000640:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000644:	60fb      	str	r3, [r7, #12]

	/* Two instances of this task are created.  The string printed by the task
	is passed into the task using the task's parameter.  The parameter is cast
	to the required type. */
	delay = ( uint32_t * ) pvParameters;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	60bb      	str	r3, [r7, #8]
	//postpone the start of the high priority task, so that the low priority task will run first
	vTaskDelay( xSlowDownDelay );
 800064a:	68f8      	ldr	r0, [r7, #12]
 800064c:	f006 f8ea 	bl	8006824 <vTaskDelay>
	for( ;; )
	{
		/* Print out the string using the newly defined function. */
		prvBlinky( delay );
 8000650:	68b8      	ldr	r0, [r7, #8]
 8000652:	f7ff ff9d 	bl	8000590 <prvBlinky>
		/* Wait a pseudo random time.  Note that rand() is not necessarily
		re-entrant, but in this case it does not really matter as the code does
		not care what value is returned.  In a more secure application a version
		of rand() that is known to be re-entrant should be used - or calls to
		rand() should be protected using a critical section. */
		vTaskDelay( rand() % xMaxBlockTimeTicks );
 8000656:	f7ff ff39 	bl	80004cc <rand>
 800065a:	4603      	mov	r3, r0
 800065c:	2220      	movs	r2, #32
 800065e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000662:	fb01 f202 	mul.w	r2, r1, r2
 8000666:	1a9b      	subs	r3, r3, r2
 8000668:	4618      	mov	r0, r3
 800066a:	f006 f8db 	bl	8006824 <vTaskDelay>

		/* Just to ensure the scrolling is not too fast! */
		vTaskDelay( xSlowDownDelay );
 800066e:	68f8      	ldr	r0, [r7, #12]
 8000670:	f006 f8d8 	bl	8006824 <vTaskDelay>
		prvBlinky( delay );
 8000674:	e7ec      	b.n	8000650 <prvBlinkLEDH+0x18>
	...

08000678 <prvBlinkLEDM>:
	}
}


static void prvBlinkLEDM( void *pvParameters )
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	uint32_t *delay;
	const TickType_t xSlowDownDelay = pdMS_TO_TICKS( 500 );
 8000680:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000684:	617b      	str	r3, [r7, #20]
	volatile uint32_t ul;

	/* Two instances of this task are created.  The string printed by the task
	is passed into the task using the task's parameter.  The parameter is cast
	to the required type. */
	delay = ( uint32_t * ) pvParameters;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	613b      	str	r3, [r7, #16]
	//start the medium priority task between the low and the high priority task
	vTaskDelay( 2*xSlowDownDelay );
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	4618      	mov	r0, r3
 8000690:	f006 f8c8 	bl	8006824 <vTaskDelay>
	for( ;; )
	{
		for (i=0; i<20 ;i++)
 8000694:	2300      	movs	r3, #0
 8000696:	73fb      	strb	r3, [r7, #15]
 8000698:	e014      	b.n	80006c4 <prvBlinkLEDM+0x4c>
		{
			HAL_GPIO_TogglePin(GPIOD, GREEN_LED);
 800069a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800069e:	480d      	ldr	r0, [pc, #52]	; (80006d4 <prvBlinkLEDM+0x5c>)
 80006a0:	f000 ffc5 	bl	800162e <HAL_GPIO_TogglePin>
			/* Delay for a period. */
			for (ul = 0; ul < *delay; ul++)
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	e002      	b.n	80006b0 <prvBlinkLEDM+0x38>
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	3301      	adds	r3, #1
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d8f7      	bhi.n	80006aa <prvBlinkLEDM+0x32>
		for (i=0; i<20 ;i++)
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	3301      	adds	r3, #1
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	73fb      	strb	r3, [r7, #15]
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	2b13      	cmp	r3, #19
 80006ca:	d9e6      	bls.n	800069a <prvBlinkLEDM+0x22>
			{
				/* This loop is just a very crude delay implementation. */
			}
		}
		/* Just to ensure the scrolling is not too fast! */
		vTaskDelay( xSlowDownDelay );
 80006cc:	6978      	ldr	r0, [r7, #20]
 80006ce:	f006 f8a9 	bl	8006824 <vTaskDelay>
		for (i=0; i<20 ;i++)
 80006d2:	e7df      	b.n	8000694 <prvBlinkLEDM+0x1c>
 80006d4:	40020c00 	.word	0x40020c00

080006d8 <application20>:
	}
}


void application20(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af02      	add	r7, sp, #8
	 /* Before a semaphore is used it must be explicitly created.  In this example
		a mutex type semaphore is created. */
	 xMutex = xSemaphoreCreateMutex();
 80006de:	2001      	movs	r0, #1
 80006e0:	f005 fa31 	bl	8005b46 <xQueueCreateMutex>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4a15      	ldr	r2, [pc, #84]	; (800073c <application20+0x64>)
 80006e8:	6013      	str	r3, [r2, #0]
	 //xBinarySemaphore = xSemaphoreCreateBinary();
	 //xSemaphoreGive( xBinarySemaphore );
		/* Check the semaphore was created successfully. */
	if( xMutex != NULL )
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <application20+0x64>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d020      	beq.n	8000734 <application20+0x5c>
	//if( xBinarySemaphore != NULL )
	{

		xTaskCreate( prvBlinkLEDL, "BlinkLedLowPriority", 1000, &delay1, 1, NULL );
 80006f2:	2300      	movs	r3, #0
 80006f4:	9301      	str	r3, [sp, #4]
 80006f6:	2301      	movs	r3, #1
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <application20+0x68>)
 80006fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000700:	4910      	ldr	r1, [pc, #64]	; (8000744 <application20+0x6c>)
 8000702:	4811      	ldr	r0, [pc, #68]	; (8000748 <application20+0x70>)
 8000704:	f005 ff44 	bl	8006590 <xTaskCreate>
		xTaskCreate( prvBlinkLEDM, "BlinkGreenLedMedium", 1000, &delay1, 2, NULL );
 8000708:	2300      	movs	r3, #0
 800070a:	9301      	str	r3, [sp, #4]
 800070c:	2302      	movs	r3, #2
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <application20+0x68>)
 8000712:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000716:	490d      	ldr	r1, [pc, #52]	; (800074c <application20+0x74>)
 8000718:	480d      	ldr	r0, [pc, #52]	; (8000750 <application20+0x78>)
 800071a:	f005 ff39 	bl	8006590 <xTaskCreate>
		xTaskCreate( prvBlinkLEDH, "BlinkLedHighPriority", 1000, &delay2, 3, NULL );
 800071e:	2300      	movs	r3, #0
 8000720:	9301      	str	r3, [sp, #4]
 8000722:	2303      	movs	r3, #3
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <application20+0x7c>)
 8000728:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800072c:	490a      	ldr	r1, [pc, #40]	; (8000758 <application20+0x80>)
 800072e:	480b      	ldr	r0, [pc, #44]	; (800075c <application20+0x84>)
 8000730:	f005 ff2e 	bl	8006590 <xTaskCreate>
	}


}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000094 	.word	0x20000094
 8000740:	20000000 	.word	0x20000000
 8000744:	08008708 	.word	0x08008708
 8000748:	08000601 	.word	0x08000601
 800074c:	0800871c 	.word	0x0800871c
 8000750:	08000679 	.word	0x08000679
 8000754:	20000004 	.word	0x20000004
 8000758:	08008730 	.word	0x08008730
 800075c:	08000639 	.word	0x08000639

08000760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000764:	f000 fc8a 	bl	800107c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000768:	f000 f810 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076c:	f000 f930 	bl	80009d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000770:	f000 f876 	bl	8000860 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000774:	f000 f8a2 	bl	80008bc <MX_I2S3_Init>
  MX_SPI1_Init();
 8000778:	f000 f8d0 	bl	800091c <MX_SPI1_Init>
  MX_TIM11_Init();
 800077c:	f000 f904 	bl	8000988 <MX_TIM11_Init>
  /* definition and creation of defaultTask */


  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	application20();
 8000780:	f7ff ffaa 	bl	80006d8 <application20>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 8000784:	f006 f882 	bl	800688c <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000788:	e7fe      	b.n	8000788 <main+0x28>
	...

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0320 	add.w	r3, r7, #32
 8000796:	2230      	movs	r2, #48	; 0x30
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f007 feca 	bl	8008534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	4b28      	ldr	r3, [pc, #160]	; (8000858 <SystemClock_Config+0xcc>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	4a27      	ldr	r2, [pc, #156]	; (8000858 <SystemClock_Config+0xcc>)
 80007ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007be:	6413      	str	r3, [r2, #64]	; 0x40
 80007c0:	4b25      	ldr	r3, [pc, #148]	; (8000858 <SystemClock_Config+0xcc>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	4b22      	ldr	r3, [pc, #136]	; (800085c <SystemClock_Config+0xd0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a21      	ldr	r2, [pc, #132]	; (800085c <SystemClock_Config+0xd0>)
 80007d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <SystemClock_Config+0xd0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e8:	2301      	movs	r3, #1
 80007ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f2:	2302      	movs	r3, #2
 80007f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007fc:	2308      	movs	r3, #8
 80007fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000800:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000804:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000806:	2302      	movs	r3, #2
 8000808:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800080a:	2307      	movs	r3, #7
 800080c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080e:	f107 0320 	add.w	r3, r7, #32
 8000812:	4618      	mov	r0, r3
 8000814:	f003 fa96 	bl	8003d44 <HAL_RCC_OscConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800081e:	f000 f9ef 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000822:	230f      	movs	r3, #15
 8000824:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000826:	2302      	movs	r3, #2
 8000828:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800082e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000832:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000838:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	2105      	movs	r1, #5
 8000840:	4618      	mov	r0, r3
 8000842:	f003 fcf7 	bl	8004234 <HAL_RCC_ClockConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800084c:	f000 f9d8 	bl	8000c00 <Error_Handler>
  }
}
 8000850:	bf00      	nop
 8000852:	3750      	adds	r7, #80	; 0x50
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40023800 	.word	0x40023800
 800085c:	40007000 	.word	0x40007000

08000860 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_I2C1_Init+0x50>)
 8000866:	4a13      	ldr	r2, [pc, #76]	; (80008b4 <MX_I2C1_Init+0x54>)
 8000868:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_I2C1_Init+0x50>)
 800086c:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <MX_I2C1_Init+0x58>)
 800086e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_I2C1_Init+0x50>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_I2C1_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_I2C1_Init+0x50>)
 800087e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000882:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MX_I2C1_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_I2C1_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MX_I2C1_Init+0x50>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_I2C1_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_I2C1_Init+0x50>)
 800089e:	f002 fc6d 	bl	800317c <HAL_I2C_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008a8:	f000 f9aa 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000098 	.word	0x20000098
 80008b4:	40005400 	.word	0x40005400
 80008b8:	000186a0 	.word	0x000186a0

080008bc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008c0:	4b13      	ldr	r3, [pc, #76]	; (8000910 <MX_I2S3_Init+0x54>)
 80008c2:	4a14      	ldr	r2, [pc, #80]	; (8000914 <MX_I2S3_Init+0x58>)
 80008c4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008c6:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_I2S3_Init+0x54>)
 80008c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008cc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_I2S3_Init+0x54>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008d4:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_I2S3_Init+0x54>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008da:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <MX_I2S3_Init+0x54>)
 80008dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_I2S3_Init+0x54>)
 80008e4:	4a0c      	ldr	r2, [pc, #48]	; (8000918 <MX_I2S3_Init+0x5c>)
 80008e6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_I2S3_Init+0x54>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MX_I2S3_Init+0x54>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_I2S3_Init+0x54>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_I2S3_Init+0x54>)
 80008fc:	f002 fd82 	bl	8003404 <HAL_I2S_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000906:	f000 f97b 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200000ec 	.word	0x200000ec
 8000914:	40003c00 	.word	0x40003c00
 8000918:	00017700 	.word	0x00017700

0800091c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000920:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_SPI1_Init+0x64>)
 8000922:	4a18      	ldr	r2, [pc, #96]	; (8000984 <MX_SPI1_Init+0x68>)
 8000924:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <MX_SPI1_Init+0x64>)
 8000928:	f44f 7282 	mov.w	r2, #260	; 0x104
 800092c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_SPI1_Init+0x64>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_SPI1_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_SPI1_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_SPI1_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_SPI1_Init+0x64>)
 8000948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800094c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_SPI1_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <MX_SPI1_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_SPI1_Init+0x64>)
 800095c:	2200      	movs	r2, #0
 800095e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <MX_SPI1_Init+0x64>)
 8000962:	2200      	movs	r2, #0
 8000964:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_SPI1_Init+0x64>)
 8000968:	220a      	movs	r2, #10
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <MX_SPI1_Init+0x64>)
 800096e:	f003 fff5 	bl	800495c <HAL_SPI_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000978:	f000 f942 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000134 	.word	0x20000134
 8000984:	40013000 	.word	0x40013000

08000988 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_TIM11_Init+0x40>)
 800098e:	4a0f      	ldr	r2, [pc, #60]	; (80009cc <MX_TIM11_Init+0x44>)
 8000990:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8000992:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <MX_TIM11_Init+0x40>)
 8000994:	2200      	movs	r2, #0
 8000996:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_TIM11_Init+0x40>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <MX_TIM11_Init+0x40>)
 80009a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009a4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <MX_TIM11_Init+0x40>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_TIM11_Init+0x40>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_TIM11_Init+0x40>)
 80009b4:	f004 f85b 	bl	8004a6e <HAL_TIM_Base_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80009be:	f000 f91f 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2000018c 	.word	0x2000018c
 80009cc:	40014800 	.word	0x40014800

080009d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08c      	sub	sp, #48	; 0x30
 80009d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	61bb      	str	r3, [r7, #24]
 80009ea:	4b76      	ldr	r3, [pc, #472]	; (8000bc4 <MX_GPIO_Init+0x1f4>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a75      	ldr	r2, [pc, #468]	; (8000bc4 <MX_GPIO_Init+0x1f4>)
 80009f0:	f043 0310 	orr.w	r3, r3, #16
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b73      	ldr	r3, [pc, #460]	; (8000bc4 <MX_GPIO_Init+0x1f4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0310 	and.w	r3, r3, #16
 80009fe:	61bb      	str	r3, [r7, #24]
 8000a00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	4b6f      	ldr	r3, [pc, #444]	; (8000bc4 <MX_GPIO_Init+0x1f4>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a6e      	ldr	r2, [pc, #440]	; (8000bc4 <MX_GPIO_Init+0x1f4>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b6c      	ldr	r3, [pc, #432]	; (8000bc4 <MX_GPIO_Init+0x1f4>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	4b68      	ldr	r3, [pc, #416]	; (8000bc4 <MX_GPIO_Init+0x1f4>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a67      	ldr	r2, [pc, #412]	; (8000bc4 <MX_GPIO_Init+0x1f4>)
 8000a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b65      	ldr	r3, [pc, #404]	; (8000bc4 <MX_GPIO_Init+0x1f4>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b61      	ldr	r3, [pc, #388]	; (8000bc4 <MX_GPIO_Init+0x1f4>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a60      	ldr	r2, [pc, #384]	; (8000bc4 <MX_GPIO_Init+0x1f4>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b5e      	ldr	r3, [pc, #376]	; (8000bc4 <MX_GPIO_Init+0x1f4>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	4b5a      	ldr	r3, [pc, #360]	; (8000bc4 <MX_GPIO_Init+0x1f4>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a59      	ldr	r2, [pc, #356]	; (8000bc4 <MX_GPIO_Init+0x1f4>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b57      	ldr	r3, [pc, #348]	; (8000bc4 <MX_GPIO_Init+0x1f4>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b53      	ldr	r3, [pc, #332]	; (8000bc4 <MX_GPIO_Init+0x1f4>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a52      	ldr	r2, [pc, #328]	; (8000bc4 <MX_GPIO_Init+0x1f4>)
 8000a7c:	f043 0308 	orr.w	r3, r3, #8
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b50      	ldr	r3, [pc, #320]	; (8000bc4 <MX_GPIO_Init+0x1f4>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0308 	and.w	r3, r3, #8
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2108      	movs	r1, #8
 8000a92:	484d      	ldr	r0, [pc, #308]	; (8000bc8 <MX_GPIO_Init+0x1f8>)
 8000a94:	f000 fdb2 	bl	80015fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	484b      	ldr	r0, [pc, #300]	; (8000bcc <MX_GPIO_Init+0x1fc>)
 8000a9e:	f000 fdad 	bl	80015fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000aa8:	4849      	ldr	r0, [pc, #292]	; (8000bd0 <MX_GPIO_Init+0x200>)
 8000aaa:	f000 fda7 	bl	80015fc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000aae:	2308      	movs	r3, #8
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4840      	ldr	r0, [pc, #256]	; (8000bc8 <MX_GPIO_Init+0x1f8>)
 8000ac6:	f000 fbfd 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000aca:	2301      	movs	r3, #1
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	483a      	ldr	r0, [pc, #232]	; (8000bcc <MX_GPIO_Init+0x1fc>)
 8000ae2:	f000 fbef 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ae6:	2308      	movs	r3, #8
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000af6:	2305      	movs	r3, #5
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	4832      	ldr	r0, [pc, #200]	; (8000bcc <MX_GPIO_Init+0x1fc>)
 8000b02:	f000 fbdf 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b06:	2301      	movs	r3, #1
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	482e      	ldr	r0, [pc, #184]	; (8000bd4 <MX_GPIO_Init+0x204>)
 8000b1c:	f000 fbd2 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b20:	2304      	movs	r3, #4
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 031c 	add.w	r3, r7, #28
 8000b30:	4619      	mov	r1, r3
 8000b32:	4829      	ldr	r0, [pc, #164]	; (8000bd8 <MX_GPIO_Init+0x208>)
 8000b34:	f000 fbc6 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b4a:	2305      	movs	r3, #5
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	4820      	ldr	r0, [pc, #128]	; (8000bd8 <MX_GPIO_Init+0x208>)
 8000b56:	f000 fbb5 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b5a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b5e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	4619      	mov	r1, r3
 8000b72:	4817      	ldr	r0, [pc, #92]	; (8000bd0 <MX_GPIO_Init+0x200>)
 8000b74:	f000 fba6 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b78:	2320      	movs	r3, #32
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4811      	ldr	r0, [pc, #68]	; (8000bd0 <MX_GPIO_Init+0x200>)
 8000b8c:	f000 fb9a 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b90:	2302      	movs	r3, #2
 8000b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b94:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4808      	ldr	r0, [pc, #32]	; (8000bc8 <MX_GPIO_Init+0x1f8>)
 8000ba6:	f000 fb8d 	bl	80012c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2105      	movs	r1, #5
 8000bae:	2006      	movs	r0, #6
 8000bb0:	f000 fb5e 	bl	8001270 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bb4:	2006      	movs	r0, #6
 8000bb6:	f000 fb77 	bl	80012a8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bba:	bf00      	nop
 8000bbc:	3730      	adds	r7, #48	; 0x30
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40020800 	.word	0x40020800
 8000bd0:	40020c00 	.word	0x40020c00
 8000bd4:	40020000 	.word	0x40020000
 8000bd8:	40020400 	.word	0x40020400

08000bdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d101      	bne.n	8000bf2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bee:	f000 fa67 	bl	80010c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40010000 	.word	0x40010000

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c08:	e7fe      	b.n	8000c08 <Error_Handler+0x8>
	...

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_MspInit+0x54>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	4a11      	ldr	r2, [pc, #68]	; (8000c60 <HAL_MspInit+0x54>)
 8000c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c20:	6453      	str	r3, [r2, #68]	; 0x44
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <HAL_MspInit+0x54>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <HAL_MspInit+0x54>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <HAL_MspInit+0x54>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <HAL_MspInit+0x54>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	210f      	movs	r1, #15
 8000c4e:	f06f 0001 	mvn.w	r0, #1
 8000c52:	f000 fb0d 	bl	8001270 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800

08000c64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	; 0x28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a19      	ldr	r2, [pc, #100]	; (8000ce8 <HAL_I2C_MspInit+0x84>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d12c      	bne.n	8000ce0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <HAL_I2C_MspInit+0x88>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a17      	ldr	r2, [pc, #92]	; (8000cec <HAL_I2C_MspInit+0x88>)
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <HAL_I2C_MspInit+0x88>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ca2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca8:	2312      	movs	r3, #18
 8000caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cb4:	2304      	movs	r3, #4
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <HAL_I2C_MspInit+0x8c>)
 8000cc0:	f000 fb00 	bl	80012c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_I2C_MspInit+0x88>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	4a07      	ldr	r2, [pc, #28]	; (8000cec <HAL_I2C_MspInit+0x88>)
 8000cce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <HAL_I2C_MspInit+0x88>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ce0:	bf00      	nop
 8000ce2:	3728      	adds	r7, #40	; 0x28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40005400 	.word	0x40005400
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020400 	.word	0x40020400

08000cf4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08e      	sub	sp, #56	; 0x38
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a31      	ldr	r2, [pc, #196]	; (8000de4 <HAL_I2S_MspInit+0xf0>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d15a      	bne.n	8000dda <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d24:	2301      	movs	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d28:	23c0      	movs	r3, #192	; 0xc0
 8000d2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4618      	mov	r0, r3
 8000d36:	f003 fccf 	bl	80046d8 <HAL_RCCEx_PeriphCLKConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d40:	f7ff ff5e 	bl	8000c00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	4b27      	ldr	r3, [pc, #156]	; (8000de8 <HAL_I2S_MspInit+0xf4>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	4a26      	ldr	r2, [pc, #152]	; (8000de8 <HAL_I2S_MspInit+0xf4>)
 8000d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d52:	6413      	str	r3, [r2, #64]	; 0x40
 8000d54:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <HAL_I2S_MspInit+0xf4>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <HAL_I2S_MspInit+0xf4>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	4a1f      	ldr	r2, [pc, #124]	; (8000de8 <HAL_I2S_MspInit+0xf4>)
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d70:	4b1d      	ldr	r3, [pc, #116]	; (8000de8 <HAL_I2S_MspInit+0xf4>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <HAL_I2S_MspInit+0xf4>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	4a18      	ldr	r2, [pc, #96]	; (8000de8 <HAL_I2S_MspInit+0xf4>)
 8000d86:	f043 0304 	orr.w	r3, r3, #4
 8000d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8c:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <HAL_I2S_MspInit+0xf4>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d90:	f003 0304 	and.w	r3, r3, #4
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d98:	2310      	movs	r3, #16
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000da8:	2306      	movs	r3, #6
 8000daa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db0:	4619      	mov	r1, r3
 8000db2:	480e      	ldr	r0, [pc, #56]	; (8000dec <HAL_I2S_MspInit+0xf8>)
 8000db4:	f000 fa86 	bl	80012c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000db8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dca:	2306      	movs	r3, #6
 8000dcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4806      	ldr	r0, [pc, #24]	; (8000df0 <HAL_I2S_MspInit+0xfc>)
 8000dd6:	f000 fa75 	bl	80012c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000dda:	bf00      	nop
 8000ddc:	3738      	adds	r7, #56	; 0x38
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40003c00 	.word	0x40003c00
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020000 	.word	0x40020000
 8000df0:	40020800 	.word	0x40020800

08000df4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a19      	ldr	r2, [pc, #100]	; (8000e78 <HAL_SPI_MspInit+0x84>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d12b      	bne.n	8000e6e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <HAL_SPI_MspInit+0x88>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	4a17      	ldr	r2, [pc, #92]	; (8000e7c <HAL_SPI_MspInit+0x88>)
 8000e20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e24:	6453      	str	r3, [r2, #68]	; 0x44
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <HAL_SPI_MspInit+0x88>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <HAL_SPI_MspInit+0x88>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a10      	ldr	r2, [pc, #64]	; (8000e7c <HAL_SPI_MspInit+0x88>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_SPI_MspInit+0x88>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e4e:	23e0      	movs	r3, #224	; 0xe0
 8000e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e5e:	2305      	movs	r3, #5
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4619      	mov	r1, r3
 8000e68:	4805      	ldr	r0, [pc, #20]	; (8000e80 <HAL_SPI_MspInit+0x8c>)
 8000e6a:	f000 fa2b 	bl	80012c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e6e:	bf00      	nop
 8000e70:	3728      	adds	r7, #40	; 0x28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40013000 	.word	0x40013000
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020000 	.word	0x40020000

08000e84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <HAL_TIM_Base_MspInit+0x3c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d10d      	bne.n	8000eb2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <HAL_TIM_Base_MspInit+0x40>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	4a09      	ldr	r2, [pc, #36]	; (8000ec4 <HAL_TIM_Base_MspInit+0x40>)
 8000ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea6:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <HAL_TIM_Base_MspInit+0x40>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	40014800 	.word	0x40014800
 8000ec4:	40023800 	.word	0x40023800

08000ec8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08c      	sub	sp, #48	; 0x30
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	4b2f      	ldr	r3, [pc, #188]	; (8000f9c <HAL_InitTick+0xd4>)
 8000ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee0:	4a2e      	ldr	r2, [pc, #184]	; (8000f9c <HAL_InitTick+0xd4>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee8:	4b2c      	ldr	r3, [pc, #176]	; (8000f9c <HAL_InitTick+0xd4>)
 8000eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ef4:	f107 020c 	add.w	r2, r7, #12
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	4611      	mov	r1, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f003 fbb8 	bl	8004674 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000f04:	f003 fba2 	bl	800464c <HAL_RCC_GetPCLK2Freq>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f10:	4a23      	ldr	r2, [pc, #140]	; (8000fa0 <HAL_InitTick+0xd8>)
 8000f12:	fba2 2303 	umull	r2, r3, r2, r3
 8000f16:	0c9b      	lsrs	r3, r3, #18
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f1c:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <HAL_InitTick+0xdc>)
 8000f1e:	4a22      	ldr	r2, [pc, #136]	; (8000fa8 <HAL_InitTick+0xe0>)
 8000f20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <HAL_InitTick+0xdc>)
 8000f24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f28:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f2a:	4a1e      	ldr	r2, [pc, #120]	; (8000fa4 <HAL_InitTick+0xdc>)
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f30:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <HAL_InitTick+0xdc>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f36:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <HAL_InitTick+0xdc>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <HAL_InitTick+0xdc>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000f42:	4818      	ldr	r0, [pc, #96]	; (8000fa4 <HAL_InitTick+0xdc>)
 8000f44:	f003 fd93 	bl	8004a6e <HAL_TIM_Base_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000f4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d11b      	bne.n	8000f8e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000f56:	4813      	ldr	r0, [pc, #76]	; (8000fa4 <HAL_InitTick+0xdc>)
 8000f58:	f003 fdd8 	bl	8004b0c <HAL_TIM_Base_Start_IT>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000f62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d111      	bne.n	8000f8e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f6a:	2019      	movs	r0, #25
 8000f6c:	f000 f99c 	bl	80012a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b0f      	cmp	r3, #15
 8000f74:	d808      	bhi.n	8000f88 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000f76:	2200      	movs	r2, #0
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	2019      	movs	r0, #25
 8000f7c:	f000 f978 	bl	8001270 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f80:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <HAL_InitTick+0xe4>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	e002      	b.n	8000f8e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3730      	adds	r7, #48	; 0x30
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	431bde83 	.word	0x431bde83
 8000fa4:	200001d4 	.word	0x200001d4
 8000fa8:	40010000 	.word	0x40010000
 8000fac:	2000001c 	.word	0x2000001c

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000fe2:	f003 fe03 	bl	8004bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200001d4 	.word	0x200001d4

08000ff0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <OTG_FS_IRQHandler+0x10>)
 8000ff6:	f000 fb34 	bl	8001662 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20003ff0 	.word	0x20003ff0

08001004 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <SystemInit+0x20>)
 800100a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100e:	4a05      	ldr	r2, [pc, #20]	; (8001024 <SystemInit+0x20>)
 8001010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001060 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800102c:	f7ff ffea 	bl	8001004 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001030:	480c      	ldr	r0, [pc, #48]	; (8001064 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001032:	490d      	ldr	r1, [pc, #52]	; (8001068 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001034:	4a0d      	ldr	r2, [pc, #52]	; (800106c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001038:	e002      	b.n	8001040 <LoopCopyDataInit>

0800103a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800103c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103e:	3304      	adds	r3, #4

08001040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001044:	d3f9      	bcc.n	800103a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001048:	4c0a      	ldr	r4, [pc, #40]	; (8001074 <LoopFillZerobss+0x22>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800104c:	e001      	b.n	8001052 <LoopFillZerobss>

0800104e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001050:	3204      	adds	r2, #4

08001052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001056:	f007 facb 	bl	80085f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105a:	f7ff fb81 	bl	8000760 <main>
  bx  lr    
 800105e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001060:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800106c:	08008788 	.word	0x08008788
  ldr r2, =_sbss
 8001070:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001074:	20004510 	.word	0x20004510

08001078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC_IRQHandler>
	...

0800107c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <HAL_Init+0x40>)
 8001086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800108a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <HAL_Init+0x40>)
 8001092:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001096:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HAL_Init+0x40>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a07      	ldr	r2, [pc, #28]	; (80010bc <HAL_Init+0x40>)
 800109e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f000 f8d8 	bl	800125a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010aa:	200f      	movs	r0, #15
 80010ac:	f7ff ff0c 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b0:	f7ff fdac 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023c00 	.word	0x40023c00

080010c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_IncTick+0x20>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_IncTick+0x24>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <HAL_IncTick+0x24>)
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000020 	.word	0x20000020
 80010e4:	2000021c 	.word	0x2000021c

080010e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return uwTick;
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <HAL_GetTick+0x14>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	2000021c 	.word	0x2000021c

08001100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800111c:	4013      	ands	r3, r2
 800111e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001128:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800112c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001132:	4a04      	ldr	r2, [pc, #16]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	60d3      	str	r3, [r2, #12]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <__NVIC_GetPriorityGrouping+0x18>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	f003 0307 	and.w	r3, r3, #7
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	2b00      	cmp	r3, #0
 8001174:	db0b      	blt.n	800118e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	f003 021f 	and.w	r2, r3, #31
 800117c:	4907      	ldr	r1, [pc, #28]	; (800119c <__NVIC_EnableIRQ+0x38>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	095b      	lsrs	r3, r3, #5
 8001184:	2001      	movs	r0, #1
 8001186:	fa00 f202 	lsl.w	r2, r0, r2
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000e100 	.word	0xe000e100

080011a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	db0a      	blt.n	80011ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	490c      	ldr	r1, [pc, #48]	; (80011ec <__NVIC_SetPriority+0x4c>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	440b      	add	r3, r1
 80011c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c8:	e00a      	b.n	80011e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4908      	ldr	r1, [pc, #32]	; (80011f0 <__NVIC_SetPriority+0x50>)
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	3b04      	subs	r3, #4
 80011d8:	0112      	lsls	r2, r2, #4
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	440b      	add	r3, r1
 80011de:	761a      	strb	r2, [r3, #24]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000e100 	.word	0xe000e100
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f1c3 0307 	rsb	r3, r3, #7
 800120e:	2b04      	cmp	r3, #4
 8001210:	bf28      	it	cs
 8001212:	2304      	movcs	r3, #4
 8001214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3304      	adds	r3, #4
 800121a:	2b06      	cmp	r3, #6
 800121c:	d902      	bls.n	8001224 <NVIC_EncodePriority+0x30>
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3b03      	subs	r3, #3
 8001222:	e000      	b.n	8001226 <NVIC_EncodePriority+0x32>
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	f04f 32ff 	mov.w	r2, #4294967295
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43da      	mvns	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	401a      	ands	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800123c:	f04f 31ff 	mov.w	r1, #4294967295
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	43d9      	mvns	r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	4313      	orrs	r3, r2
         );
}
 800124e:	4618      	mov	r0, r3
 8001250:	3724      	adds	r7, #36	; 0x24
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ff4c 	bl	8001100 <__NVIC_SetPriorityGrouping>
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
 800127c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001282:	f7ff ff61 	bl	8001148 <__NVIC_GetPriorityGrouping>
 8001286:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	68b9      	ldr	r1, [r7, #8]
 800128c:	6978      	ldr	r0, [r7, #20]
 800128e:	f7ff ffb1 	bl	80011f4 <NVIC_EncodePriority>
 8001292:	4602      	mov	r2, r0
 8001294:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001298:	4611      	mov	r1, r2
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff ff80 	bl	80011a0 <__NVIC_SetPriority>
}
 80012a0:	bf00      	nop
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff54 	bl	8001164 <__NVIC_EnableIRQ>
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b089      	sub	sp, #36	; 0x24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
 80012de:	e16b      	b.n	80015b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012e0:	2201      	movs	r2, #1
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	f040 815a 	bne.w	80015b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	2b01      	cmp	r3, #1
 8001308:	d005      	beq.n	8001316 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001312:	2b02      	cmp	r3, #2
 8001314:	d130      	bne.n	8001378 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	2203      	movs	r2, #3
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800134c:	2201      	movs	r2, #1
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	091b      	lsrs	r3, r3, #4
 8001362:	f003 0201 	and.w	r2, r3, #1
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	2b03      	cmp	r3, #3
 8001382:	d017      	beq.n	80013b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d123      	bne.n	8001408 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	08da      	lsrs	r2, r3, #3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3208      	adds	r2, #8
 80013c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	220f      	movs	r2, #15
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	691a      	ldr	r2, [r3, #16]
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	08da      	lsrs	r2, r3, #3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3208      	adds	r2, #8
 8001402:	69b9      	ldr	r1, [r7, #24]
 8001404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2203      	movs	r2, #3
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0203 	and.w	r2, r3, #3
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 80b4 	beq.w	80015b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b60      	ldr	r3, [pc, #384]	; (80015d0 <HAL_GPIO_Init+0x30c>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	4a5f      	ldr	r2, [pc, #380]	; (80015d0 <HAL_GPIO_Init+0x30c>)
 8001454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001458:	6453      	str	r3, [r2, #68]	; 0x44
 800145a:	4b5d      	ldr	r3, [pc, #372]	; (80015d0 <HAL_GPIO_Init+0x30c>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001466:	4a5b      	ldr	r2, [pc, #364]	; (80015d4 <HAL_GPIO_Init+0x310>)
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	089b      	lsrs	r3, r3, #2
 800146c:	3302      	adds	r3, #2
 800146e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	220f      	movs	r2, #15
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a52      	ldr	r2, [pc, #328]	; (80015d8 <HAL_GPIO_Init+0x314>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d02b      	beq.n	80014ea <HAL_GPIO_Init+0x226>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a51      	ldr	r2, [pc, #324]	; (80015dc <HAL_GPIO_Init+0x318>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d025      	beq.n	80014e6 <HAL_GPIO_Init+0x222>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a50      	ldr	r2, [pc, #320]	; (80015e0 <HAL_GPIO_Init+0x31c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d01f      	beq.n	80014e2 <HAL_GPIO_Init+0x21e>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4f      	ldr	r2, [pc, #316]	; (80015e4 <HAL_GPIO_Init+0x320>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d019      	beq.n	80014de <HAL_GPIO_Init+0x21a>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4e      	ldr	r2, [pc, #312]	; (80015e8 <HAL_GPIO_Init+0x324>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d013      	beq.n	80014da <HAL_GPIO_Init+0x216>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a4d      	ldr	r2, [pc, #308]	; (80015ec <HAL_GPIO_Init+0x328>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d00d      	beq.n	80014d6 <HAL_GPIO_Init+0x212>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a4c      	ldr	r2, [pc, #304]	; (80015f0 <HAL_GPIO_Init+0x32c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d007      	beq.n	80014d2 <HAL_GPIO_Init+0x20e>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a4b      	ldr	r2, [pc, #300]	; (80015f4 <HAL_GPIO_Init+0x330>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d101      	bne.n	80014ce <HAL_GPIO_Init+0x20a>
 80014ca:	2307      	movs	r3, #7
 80014cc:	e00e      	b.n	80014ec <HAL_GPIO_Init+0x228>
 80014ce:	2308      	movs	r3, #8
 80014d0:	e00c      	b.n	80014ec <HAL_GPIO_Init+0x228>
 80014d2:	2306      	movs	r3, #6
 80014d4:	e00a      	b.n	80014ec <HAL_GPIO_Init+0x228>
 80014d6:	2305      	movs	r3, #5
 80014d8:	e008      	b.n	80014ec <HAL_GPIO_Init+0x228>
 80014da:	2304      	movs	r3, #4
 80014dc:	e006      	b.n	80014ec <HAL_GPIO_Init+0x228>
 80014de:	2303      	movs	r3, #3
 80014e0:	e004      	b.n	80014ec <HAL_GPIO_Init+0x228>
 80014e2:	2302      	movs	r3, #2
 80014e4:	e002      	b.n	80014ec <HAL_GPIO_Init+0x228>
 80014e6:	2301      	movs	r3, #1
 80014e8:	e000      	b.n	80014ec <HAL_GPIO_Init+0x228>
 80014ea:	2300      	movs	r3, #0
 80014ec:	69fa      	ldr	r2, [r7, #28]
 80014ee:	f002 0203 	and.w	r2, r2, #3
 80014f2:	0092      	lsls	r2, r2, #2
 80014f4:	4093      	lsls	r3, r2
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014fc:	4935      	ldr	r1, [pc, #212]	; (80015d4 <HAL_GPIO_Init+0x310>)
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	089b      	lsrs	r3, r3, #2
 8001502:	3302      	adds	r3, #2
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800150a:	4b3b      	ldr	r3, [pc, #236]	; (80015f8 <HAL_GPIO_Init+0x334>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800152e:	4a32      	ldr	r2, [pc, #200]	; (80015f8 <HAL_GPIO_Init+0x334>)
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001534:	4b30      	ldr	r3, [pc, #192]	; (80015f8 <HAL_GPIO_Init+0x334>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001558:	4a27      	ldr	r2, [pc, #156]	; (80015f8 <HAL_GPIO_Init+0x334>)
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800155e:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <HAL_GPIO_Init+0x334>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001582:	4a1d      	ldr	r2, [pc, #116]	; (80015f8 <HAL_GPIO_Init+0x334>)
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <HAL_GPIO_Init+0x334>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015ac:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <HAL_GPIO_Init+0x334>)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3301      	adds	r3, #1
 80015b6:	61fb      	str	r3, [r7, #28]
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	2b0f      	cmp	r3, #15
 80015bc:	f67f ae90 	bls.w	80012e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	3724      	adds	r7, #36	; 0x24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40013800 	.word	0x40013800
 80015d8:	40020000 	.word	0x40020000
 80015dc:	40020400 	.word	0x40020400
 80015e0:	40020800 	.word	0x40020800
 80015e4:	40020c00 	.word	0x40020c00
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40021400 	.word	0x40021400
 80015f0:	40021800 	.word	0x40021800
 80015f4:	40021c00 	.word	0x40021c00
 80015f8:	40013c00 	.word	0x40013c00

080015fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	807b      	strh	r3, [r7, #2]
 8001608:	4613      	mov	r3, r2
 800160a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800160c:	787b      	ldrb	r3, [r7, #1]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001612:	887a      	ldrh	r2, [r7, #2]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001618:	e003      	b.n	8001622 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800161a:	887b      	ldrh	r3, [r7, #2]
 800161c:	041a      	lsls	r2, r3, #16
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	619a      	str	r2, [r3, #24]
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800162e:	b480      	push	{r7}
 8001630:	b085      	sub	sp, #20
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	460b      	mov	r3, r1
 8001638:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001640:	887a      	ldrh	r2, [r7, #2]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4013      	ands	r3, r2
 8001646:	041a      	lsls	r2, r3, #16
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	43d9      	mvns	r1, r3
 800164c:	887b      	ldrh	r3, [r7, #2]
 800164e:	400b      	ands	r3, r1
 8001650:	431a      	orrs	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	619a      	str	r2, [r3, #24]
}
 8001656:	bf00      	nop
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b086      	sub	sp, #24
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f003 fd9d 	bl	80051b8 <USB_GetMode>
 800167e:	4603      	mov	r3, r0
 8001680:	2b01      	cmp	r3, #1
 8001682:	f040 80fb 	bne.w	800187c <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f003 fd60 	bl	8005150 <USB_ReadInterrupts>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 80f1 	beq.w	800187a <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f003 fd57 	bl	8005150 <USB_ReadInterrupts>
 80016a2:	4603      	mov	r3, r0
 80016a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80016ac:	d104      	bne.n	80016b8 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80016b6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f003 fd47 	bl	8005150 <USB_ReadInterrupts>
 80016c2:	4603      	mov	r3, r0
 80016c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016cc:	d104      	bne.n	80016d8 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016d6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f003 fd37 	bl	8005150 <USB_ReadInterrupts>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80016ec:	d104      	bne.n	80016f8 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016f6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f003 fd27 	bl	8005150 <USB_ReadInterrupts>
 8001702:	4603      	mov	r3, r0
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b02      	cmp	r3, #2
 800170a:	d103      	bne.n	8001714 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2202      	movs	r2, #2
 8001712:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f003 fd19 	bl	8005150 <USB_ReadInterrupts>
 800171e:	4603      	mov	r3, r0
 8001720:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001724:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001728:	d120      	bne.n	800176c <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001732:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b00      	cmp	r3, #0
 8001742:	d113      	bne.n	800176c <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001744:	2110      	movs	r1, #16
 8001746:	6938      	ldr	r0, [r7, #16]
 8001748:	f003 fc4a 	bl	8004fe0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800174c:	6938      	ldr	r0, [r7, #16]
 800174e:	f003 fc79 	bl	8005044 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	7a5b      	ldrb	r3, [r3, #9]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d105      	bne.n	8001766 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2101      	movs	r1, #1
 8001760:	4618      	mov	r0, r3
 8001762:	f003 fd37 	bl	80051d4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f006 fe54 	bl	8008414 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f003 fced 	bl	8005150 <USB_ReadInterrupts>
 8001776:	4603      	mov	r3, r0
 8001778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800177c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001780:	d102      	bne.n	8001788 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f001 fc87 	bl	8003096 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f003 fcdf 	bl	8005150 <USB_ReadInterrupts>
 8001792:	4603      	mov	r3, r0
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	2b08      	cmp	r3, #8
 800179a:	d106      	bne.n	80017aa <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f006 fe1d 	bl	80083dc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2208      	movs	r2, #8
 80017a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f003 fcce 	bl	8005150 <USB_ReadInterrupts>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80017be:	d139      	bne.n	8001834 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f003 fd42 	bl	800524e <USB_HC_ReadInterrupt>
 80017ca:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	e025      	b.n	800181e <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f003 030f 	and.w	r3, r3, #15
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	fa22 f303 	lsr.w	r3, r2, r3
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d018      	beq.n	8001818 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	015a      	lsls	r2, r3, #5
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4413      	add	r3, r2
 80017ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017fc:	d106      	bne.n	800180c <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	4619      	mov	r1, r3
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 f859 	bl	80018bc <HCD_HC_IN_IRQHandler>
 800180a:	e005      	b.n	8001818 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	4619      	mov	r1, r3
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 febb 	bl	800258e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	3301      	adds	r3, #1
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	795b      	ldrb	r3, [r3, #5]
 8001822:	461a      	mov	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	4293      	cmp	r3, r2
 8001828:	d3d3      	bcc.n	80017d2 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001832:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f003 fc89 	bl	8005150 <USB_ReadInterrupts>
 800183e:	4603      	mov	r3, r0
 8001840:	f003 0310 	and.w	r3, r3, #16
 8001844:	2b10      	cmp	r3, #16
 8001846:	d101      	bne.n	800184c <HAL_HCD_IRQHandler+0x1ea>
 8001848:	2301      	movs	r3, #1
 800184a:	e000      	b.n	800184e <HAL_HCD_IRQHandler+0x1ec>
 800184c:	2300      	movs	r3, #0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d014      	beq.n	800187c <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	699a      	ldr	r2, [r3, #24]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 0210 	bic.w	r2, r2, #16
 8001860:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f001 fb38 	bl	8002ed8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	699a      	ldr	r2, [r3, #24]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f042 0210 	orr.w	r2, r2, #16
 8001876:	619a      	str	r2, [r3, #24]
 8001878:	e000      	b.n	800187c <HAL_HCD_IRQHandler+0x21a>
      return;
 800187a:	bf00      	nop
    }
  }
}
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001890:	2b01      	cmp	r3, #1
 8001892:	d101      	bne.n	8001898 <HAL_HCD_Stop+0x16>
 8001894:	2302      	movs	r3, #2
 8001896:	e00d      	b.n	80018b4 <HAL_HCD_Stop+0x32>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f003 fe03 	bl	80054b0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	78fa      	ldrb	r2, [r7, #3]
 80018d8:	4611      	mov	r1, r2
 80018da:	4618      	mov	r0, r3
 80018dc:	f003 fc4b 	bl	8005176 <USB_ReadChInterrupts>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	d11a      	bne.n	8001920 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80018ea:	78fb      	ldrb	r3, [r7, #3]
 80018ec:	015a      	lsls	r2, r3, #5
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4413      	add	r3, r2
 80018f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018f6:	461a      	mov	r2, r3
 80018f8:	2304      	movs	r3, #4
 80018fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80018fc:	78fa      	ldrb	r2, [r7, #3]
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	011b      	lsls	r3, r3, #4
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	334d      	adds	r3, #77	; 0x4d
 800190c:	2207      	movs	r2, #7
 800190e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	78fa      	ldrb	r2, [r7, #3]
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f003 fca9 	bl	8005270 <USB_HC_Halt>
 800191e:	e09e      	b.n	8001a5e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	78fa      	ldrb	r2, [r7, #3]
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f003 fc24 	bl	8005176 <USB_ReadChInterrupts>
 800192e:	4603      	mov	r3, r0
 8001930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001938:	d11b      	bne.n	8001972 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800193a:	78fb      	ldrb	r3, [r7, #3]
 800193c:	015a      	lsls	r2, r3, #5
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4413      	add	r3, r2
 8001942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001946:	461a      	mov	r2, r3
 8001948:	f44f 7380 	mov.w	r3, #256	; 0x100
 800194c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800194e:	78fa      	ldrb	r2, [r7, #3]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	1a9b      	subs	r3, r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	440b      	add	r3, r1
 800195c:	334d      	adds	r3, #77	; 0x4d
 800195e:	2208      	movs	r2, #8
 8001960:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	78fa      	ldrb	r2, [r7, #3]
 8001968:	4611      	mov	r1, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f003 fc80 	bl	8005270 <USB_HC_Halt>
 8001970:	e075      	b.n	8001a5e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	78fa      	ldrb	r2, [r7, #3]
 8001978:	4611      	mov	r1, r2
 800197a:	4618      	mov	r0, r3
 800197c:	f003 fbfb 	bl	8005176 <USB_ReadChInterrupts>
 8001980:	4603      	mov	r3, r0
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	2b08      	cmp	r3, #8
 8001988:	d11a      	bne.n	80019c0 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800198a:	78fb      	ldrb	r3, [r7, #3]
 800198c:	015a      	lsls	r2, r3, #5
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4413      	add	r3, r2
 8001992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001996:	461a      	mov	r2, r3
 8001998:	2308      	movs	r3, #8
 800199a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800199c:	78fa      	ldrb	r2, [r7, #3]
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	1a9b      	subs	r3, r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	334d      	adds	r3, #77	; 0x4d
 80019ac:	2206      	movs	r2, #6
 80019ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	78fa      	ldrb	r2, [r7, #3]
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f003 fc59 	bl	8005270 <USB_HC_Halt>
 80019be:	e04e      	b.n	8001a5e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	78fa      	ldrb	r2, [r7, #3]
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f003 fbd4 	bl	8005176 <USB_ReadChInterrupts>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019d8:	d11b      	bne.n	8001a12 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	015a      	lsls	r2, r3, #5
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	4413      	add	r3, r2
 80019e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019e6:	461a      	mov	r2, r3
 80019e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80019ee:	78fa      	ldrb	r2, [r7, #3]
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	4613      	mov	r3, r2
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	1a9b      	subs	r3, r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	334d      	adds	r3, #77	; 0x4d
 80019fe:	2209      	movs	r2, #9
 8001a00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	78fa      	ldrb	r2, [r7, #3]
 8001a08:	4611      	mov	r1, r2
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f003 fc30 	bl	8005270 <USB_HC_Halt>
 8001a10:	e025      	b.n	8001a5e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	78fa      	ldrb	r2, [r7, #3]
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f003 fbab 	bl	8005176 <USB_ReadChInterrupts>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a26:	2b80      	cmp	r3, #128	; 0x80
 8001a28:	d119      	bne.n	8001a5e <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	015a      	lsls	r2, r3, #5
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	4413      	add	r3, r2
 8001a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a36:	461a      	mov	r2, r3
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001a3c:	78fa      	ldrb	r2, [r7, #3]
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	1a9b      	subs	r3, r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	334d      	adds	r3, #77	; 0x4d
 8001a4c:	2207      	movs	r2, #7
 8001a4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	78fa      	ldrb	r2, [r7, #3]
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f003 fc09 	bl	8005270 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	78fa      	ldrb	r2, [r7, #3]
 8001a64:	4611      	mov	r1, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f003 fb85 	bl	8005176 <USB_ReadChInterrupts>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a76:	d112      	bne.n	8001a9e <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	78fa      	ldrb	r2, [r7, #3]
 8001a7e:	4611      	mov	r1, r2
 8001a80:	4618      	mov	r0, r3
 8001a82:	f003 fbf5 	bl	8005270 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001a86:	78fb      	ldrb	r3, [r7, #3]
 8001a88:	015a      	lsls	r2, r3, #5
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a92:	461a      	mov	r2, r3
 8001a94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a98:	6093      	str	r3, [r2, #8]
 8001a9a:	f000 bd75 	b.w	8002588 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	78fa      	ldrb	r2, [r7, #3]
 8001aa4:	4611      	mov	r1, r2
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f003 fb65 	bl	8005176 <USB_ReadChInterrupts>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	f040 8128 	bne.w	8001d08 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	015a      	lsls	r2, r3, #5
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4413      	add	r3, r2
 8001ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	2320      	movs	r3, #32
 8001ac8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001aca:	78fa      	ldrb	r2, [r7, #3]
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	011b      	lsls	r3, r3, #4
 8001ad2:	1a9b      	subs	r3, r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	331b      	adds	r3, #27
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d119      	bne.n	8001b14 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001ae0:	78fa      	ldrb	r2, [r7, #3]
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	1a9b      	subs	r3, r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	331b      	adds	r3, #27
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001af4:	78fb      	ldrb	r3, [r7, #3]
 8001af6:	015a      	lsls	r2, r3, #5
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	4413      	add	r3, r2
 8001afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	78fa      	ldrb	r2, [r7, #3]
 8001b04:	0151      	lsls	r1, r2, #5
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	440a      	add	r2, r1
 8001b0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b12:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	799b      	ldrb	r3, [r3, #6]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d01b      	beq.n	8001b54 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001b1c:	78fa      	ldrb	r2, [r7, #3]
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	4613      	mov	r3, r2
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	1a9b      	subs	r3, r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	3330      	adds	r3, #48	; 0x30
 8001b2c:	6819      	ldr	r1, [r3, #0]
 8001b2e:	78fb      	ldrb	r3, [r7, #3]
 8001b30:	015a      	lsls	r2, r3, #5
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4413      	add	r3, r2
 8001b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b40:	78fa      	ldrb	r2, [r7, #3]
 8001b42:	1ac9      	subs	r1, r1, r3
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	011b      	lsls	r3, r3, #4
 8001b4a:	1a9b      	subs	r3, r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4403      	add	r3, r0
 8001b50:	3338      	adds	r3, #56	; 0x38
 8001b52:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001b54:	78fa      	ldrb	r2, [r7, #3]
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	011b      	lsls	r3, r3, #4
 8001b5c:	1a9b      	subs	r3, r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	440b      	add	r3, r1
 8001b62:	334d      	adds	r3, #77	; 0x4d
 8001b64:	2201      	movs	r2, #1
 8001b66:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001b68:	78fa      	ldrb	r2, [r7, #3]
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	1a9b      	subs	r3, r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	3344      	adds	r3, #68	; 0x44
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001b7c:	78fb      	ldrb	r3, [r7, #3]
 8001b7e:	015a      	lsls	r2, r3, #5
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4413      	add	r3, r2
 8001b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b88:	461a      	mov	r2, r3
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001b8e:	78fa      	ldrb	r2, [r7, #3]
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	1a9b      	subs	r3, r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	3326      	adds	r3, #38	; 0x26
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00a      	beq.n	8001bba <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001ba4:	78fa      	ldrb	r2, [r7, #3]
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	1a9b      	subs	r3, r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	3326      	adds	r3, #38	; 0x26
 8001bb4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d110      	bne.n	8001bdc <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	78fa      	ldrb	r2, [r7, #3]
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f003 fb54 	bl	8005270 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001bc8:	78fb      	ldrb	r3, [r7, #3]
 8001bca:	015a      	lsls	r2, r3, #5
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	4413      	add	r3, r2
 8001bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	2310      	movs	r3, #16
 8001bd8:	6093      	str	r3, [r2, #8]
 8001bda:	e03d      	b.n	8001c58 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001bdc:	78fa      	ldrb	r2, [r7, #3]
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	1a9b      	subs	r3, r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	3326      	adds	r3, #38	; 0x26
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d00a      	beq.n	8001c08 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001bf2:	78fa      	ldrb	r2, [r7, #3]
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	1a9b      	subs	r3, r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	440b      	add	r3, r1
 8001c00:	3326      	adds	r3, #38	; 0x26
 8001c02:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d127      	bne.n	8001c58 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001c08:	78fb      	ldrb	r3, [r7, #3]
 8001c0a:	015a      	lsls	r2, r3, #5
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	4413      	add	r3, r2
 8001c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	78fa      	ldrb	r2, [r7, #3]
 8001c18:	0151      	lsls	r1, r2, #5
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	440a      	add	r2, r1
 8001c1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c26:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001c28:	78fa      	ldrb	r2, [r7, #3]
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	011b      	lsls	r3, r3, #4
 8001c30:	1a9b      	subs	r3, r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	334c      	adds	r3, #76	; 0x4c
 8001c38:	2201      	movs	r2, #1
 8001c3a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001c3c:	78fa      	ldrb	r2, [r7, #3]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	1a9b      	subs	r3, r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	334c      	adds	r3, #76	; 0x4c
 8001c4c:	781a      	ldrb	r2, [r3, #0]
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	4619      	mov	r1, r3
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f006 fbec 	bl	8008430 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	799b      	ldrb	r3, [r3, #6]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d13b      	bne.n	8001cd8 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001c60:	78fa      	ldrb	r2, [r7, #3]
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	011b      	lsls	r3, r3, #4
 8001c68:	1a9b      	subs	r3, r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	3338      	adds	r3, #56	; 0x38
 8001c70:	6819      	ldr	r1, [r3, #0]
 8001c72:	78fa      	ldrb	r2, [r7, #3]
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	4613      	mov	r3, r2
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	1a9b      	subs	r3, r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4403      	add	r3, r0
 8001c80:	3328      	adds	r3, #40	; 0x28
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	440b      	add	r3, r1
 8001c86:	1e59      	subs	r1, r3, #1
 8001c88:	78fa      	ldrb	r2, [r7, #3]
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	011b      	lsls	r3, r3, #4
 8001c90:	1a9b      	subs	r3, r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4403      	add	r3, r0
 8001c96:	3328      	adds	r3, #40	; 0x28
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 8470 	beq.w	8002588 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001ca8:	78fa      	ldrb	r2, [r7, #3]
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	011b      	lsls	r3, r3, #4
 8001cb0:	1a9b      	subs	r3, r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	333c      	adds	r3, #60	; 0x3c
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	78fa      	ldrb	r2, [r7, #3]
 8001cbc:	f083 0301 	eor.w	r3, r3, #1
 8001cc0:	b2d8      	uxtb	r0, r3
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	1a9b      	subs	r3, r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	333c      	adds	r3, #60	; 0x3c
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	701a      	strb	r2, [r3, #0]
 8001cd4:	f000 bc58 	b.w	8002588 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001cd8:	78fa      	ldrb	r2, [r7, #3]
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	1a9b      	subs	r3, r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	333c      	adds	r3, #60	; 0x3c
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	78fa      	ldrb	r2, [r7, #3]
 8001cec:	f083 0301 	eor.w	r3, r3, #1
 8001cf0:	b2d8      	uxtb	r0, r3
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	011b      	lsls	r3, r3, #4
 8001cf8:	1a9b      	subs	r3, r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	333c      	adds	r3, #60	; 0x3c
 8001d00:	4602      	mov	r2, r0
 8001d02:	701a      	strb	r2, [r3, #0]
 8001d04:	f000 bc40 	b.w	8002588 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	78fa      	ldrb	r2, [r7, #3]
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f003 fa30 	bl	8005176 <USB_ReadChInterrupts>
 8001d16:	4603      	mov	r3, r0
 8001d18:	f003 0320 	and.w	r3, r3, #32
 8001d1c:	2b20      	cmp	r3, #32
 8001d1e:	d131      	bne.n	8001d84 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	015a      	lsls	r2, r3, #5
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4413      	add	r3, r2
 8001d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	2320      	movs	r3, #32
 8001d30:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8001d32:	78fa      	ldrb	r2, [r7, #3]
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	4613      	mov	r3, r2
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	1a9b      	subs	r3, r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	440b      	add	r3, r1
 8001d40:	331a      	adds	r3, #26
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	f040 841f 	bne.w	8002588 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8001d4a:	78fa      	ldrb	r2, [r7, #3]
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	1a9b      	subs	r3, r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	440b      	add	r3, r1
 8001d58:	331b      	adds	r3, #27
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001d5e:	78fa      	ldrb	r2, [r7, #3]
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	4613      	mov	r3, r2
 8001d64:	011b      	lsls	r3, r3, #4
 8001d66:	1a9b      	subs	r3, r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	334d      	adds	r3, #77	; 0x4d
 8001d6e:	2203      	movs	r2, #3
 8001d70:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	78fa      	ldrb	r2, [r7, #3]
 8001d78:	4611      	mov	r1, r2
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f003 fa78 	bl	8005270 <USB_HC_Halt>
 8001d80:	f000 bc02 	b.w	8002588 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	78fa      	ldrb	r2, [r7, #3]
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f003 f9f2 	bl	8005176 <USB_ReadChInterrupts>
 8001d92:	4603      	mov	r3, r0
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	f040 8305 	bne.w	80023a8 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	015a      	lsls	r2, r3, #5
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001daa:	461a      	mov	r2, r3
 8001dac:	2302      	movs	r3, #2
 8001dae:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001db0:	78fa      	ldrb	r2, [r7, #3]
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	1a9b      	subs	r3, r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	334d      	adds	r3, #77	; 0x4d
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d114      	bne.n	8001df0 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001dc6:	78fa      	ldrb	r2, [r7, #3]
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	1a9b      	subs	r3, r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	334d      	adds	r3, #77	; 0x4d
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001dda:	78fa      	ldrb	r2, [r7, #3]
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	4613      	mov	r3, r2
 8001de0:	011b      	lsls	r3, r3, #4
 8001de2:	1a9b      	subs	r3, r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	440b      	add	r3, r1
 8001de8:	334c      	adds	r3, #76	; 0x4c
 8001dea:	2201      	movs	r2, #1
 8001dec:	701a      	strb	r2, [r3, #0]
 8001dee:	e2cc      	b.n	800238a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001df0:	78fa      	ldrb	r2, [r7, #3]
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	4613      	mov	r3, r2
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	334d      	adds	r3, #77	; 0x4d
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	d114      	bne.n	8001e30 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001e06:	78fa      	ldrb	r2, [r7, #3]
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	1a9b      	subs	r3, r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	440b      	add	r3, r1
 8001e14:	334d      	adds	r3, #77	; 0x4d
 8001e16:	2202      	movs	r2, #2
 8001e18:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8001e1a:	78fa      	ldrb	r2, [r7, #3]
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	011b      	lsls	r3, r3, #4
 8001e22:	1a9b      	subs	r3, r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	440b      	add	r3, r1
 8001e28:	334c      	adds	r3, #76	; 0x4c
 8001e2a:	2205      	movs	r2, #5
 8001e2c:	701a      	strb	r2, [r3, #0]
 8001e2e:	e2ac      	b.n	800238a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001e30:	78fa      	ldrb	r2, [r7, #3]
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	011b      	lsls	r3, r3, #4
 8001e38:	1a9b      	subs	r3, r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	334d      	adds	r3, #77	; 0x4d
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b07      	cmp	r3, #7
 8001e44:	d00b      	beq.n	8001e5e <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001e46:	78fa      	ldrb	r2, [r7, #3]
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	011b      	lsls	r3, r3, #4
 8001e4e:	1a9b      	subs	r3, r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	440b      	add	r3, r1
 8001e54:	334d      	adds	r3, #77	; 0x4d
 8001e56:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001e58:	2b09      	cmp	r3, #9
 8001e5a:	f040 80a6 	bne.w	8001faa <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001e5e:	78fa      	ldrb	r2, [r7, #3]
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	1a9b      	subs	r3, r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	334d      	adds	r3, #77	; 0x4d
 8001e6e:	2202      	movs	r2, #2
 8001e70:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001e72:	78fa      	ldrb	r2, [r7, #3]
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	1a9b      	subs	r3, r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	3344      	adds	r3, #68	; 0x44
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	1c59      	adds	r1, r3, #1
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	1a9b      	subs	r3, r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4403      	add	r3, r0
 8001e92:	3344      	adds	r3, #68	; 0x44
 8001e94:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001e96:	78fa      	ldrb	r2, [r7, #3]
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	011b      	lsls	r3, r3, #4
 8001e9e:	1a9b      	subs	r3, r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	3344      	adds	r3, #68	; 0x44
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d943      	bls.n	8001f34 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001eac:	78fa      	ldrb	r2, [r7, #3]
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	011b      	lsls	r3, r3, #4
 8001eb4:	1a9b      	subs	r3, r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	3344      	adds	r3, #68	; 0x44
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8001ec0:	78fa      	ldrb	r2, [r7, #3]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	331a      	adds	r3, #26
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d123      	bne.n	8001f1e <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8001ed6:	78fa      	ldrb	r2, [r7, #3]
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	011b      	lsls	r3, r3, #4
 8001ede:	1a9b      	subs	r3, r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	331b      	adds	r3, #27
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8001eea:	78fa      	ldrb	r2, [r7, #3]
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	011b      	lsls	r3, r3, #4
 8001ef2:	1a9b      	subs	r3, r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	331c      	adds	r3, #28
 8001efa:	2200      	movs	r2, #0
 8001efc:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001efe:	78fb      	ldrb	r3, [r7, #3]
 8001f00:	015a      	lsls	r2, r3, #5
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4413      	add	r3, r2
 8001f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	78fa      	ldrb	r2, [r7, #3]
 8001f0e:	0151      	lsls	r1, r2, #5
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	440a      	add	r2, r1
 8001f14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f1c:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001f1e:	78fa      	ldrb	r2, [r7, #3]
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	011b      	lsls	r3, r3, #4
 8001f26:	1a9b      	subs	r3, r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	334c      	adds	r3, #76	; 0x4c
 8001f2e:	2204      	movs	r2, #4
 8001f30:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001f32:	e229      	b.n	8002388 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001f34:	78fa      	ldrb	r2, [r7, #3]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	1a9b      	subs	r3, r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	334c      	adds	r3, #76	; 0x4c
 8001f44:	2202      	movs	r2, #2
 8001f46:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001f48:	78fa      	ldrb	r2, [r7, #3]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	1a9b      	subs	r3, r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	3326      	adds	r3, #38	; 0x26
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00b      	beq.n	8001f76 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001f5e:	78fa      	ldrb	r2, [r7, #3]
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	1a9b      	subs	r3, r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	3326      	adds	r3, #38	; 0x26
 8001f6e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	f040 8209 	bne.w	8002388 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	015a      	lsls	r2, r3, #5
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f8c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f94:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	015a      	lsls	r2, r3, #5
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001fa8:	e1ee      	b.n	8002388 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8001faa:	78fa      	ldrb	r2, [r7, #3]
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	1a9b      	subs	r3, r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	334d      	adds	r3, #77	; 0x4d
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b05      	cmp	r3, #5
 8001fbe:	f040 80c8 	bne.w	8002152 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001fc2:	78fa      	ldrb	r2, [r7, #3]
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	1a9b      	subs	r3, r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	334d      	adds	r3, #77	; 0x4d
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001fd6:	78fa      	ldrb	r2, [r7, #3]
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	011b      	lsls	r3, r3, #4
 8001fde:	1a9b      	subs	r3, r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	331b      	adds	r3, #27
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	f040 81ce 	bne.w	800238a <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001fee:	78fa      	ldrb	r2, [r7, #3]
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	1a9b      	subs	r3, r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	3326      	adds	r3, #38	; 0x26
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b03      	cmp	r3, #3
 8002002:	d16b      	bne.n	80020dc <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002004:	78fa      	ldrb	r2, [r7, #3]
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	011b      	lsls	r3, r3, #4
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	3348      	adds	r3, #72	; 0x48
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	1c59      	adds	r1, r3, #1
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	1a9b      	subs	r3, r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4403      	add	r3, r0
 8002024:	3348      	adds	r3, #72	; 0x48
 8002026:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002028:	78fa      	ldrb	r2, [r7, #3]
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	011b      	lsls	r3, r3, #4
 8002030:	1a9b      	subs	r3, r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	3348      	adds	r3, #72	; 0x48
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d943      	bls.n	80020c6 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800203e:	78fa      	ldrb	r2, [r7, #3]
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	4613      	mov	r3, r2
 8002044:	011b      	lsls	r3, r3, #4
 8002046:	1a9b      	subs	r3, r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	440b      	add	r3, r1
 800204c:	3348      	adds	r3, #72	; 0x48
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002052:	78fa      	ldrb	r2, [r7, #3]
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	1a9b      	subs	r3, r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	331b      	adds	r3, #27
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002066:	78fa      	ldrb	r2, [r7, #3]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	3344      	adds	r3, #68	; 0x44
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b02      	cmp	r3, #2
 800207a:	d809      	bhi.n	8002090 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800207c:	78fa      	ldrb	r2, [r7, #3]
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	331c      	adds	r3, #28
 800208c:	2201      	movs	r2, #1
 800208e:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	015a      	lsls	r2, r3, #5
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4413      	add	r3, r2
 8002098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	78fa      	ldrb	r2, [r7, #3]
 80020a0:	0151      	lsls	r1, r2, #5
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	440a      	add	r2, r1
 80020a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ae:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80020b0:	78fa      	ldrb	r2, [r7, #3]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	334c      	adds	r3, #76	; 0x4c
 80020c0:	2204      	movs	r2, #4
 80020c2:	701a      	strb	r2, [r3, #0]
 80020c4:	e014      	b.n	80020f0 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80020c6:	78fa      	ldrb	r2, [r7, #3]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	1a9b      	subs	r3, r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	334c      	adds	r3, #76	; 0x4c
 80020d6:	2202      	movs	r2, #2
 80020d8:	701a      	strb	r2, [r3, #0]
 80020da:	e009      	b.n	80020f0 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80020dc:	78fa      	ldrb	r2, [r7, #3]
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	011b      	lsls	r3, r3, #4
 80020e4:	1a9b      	subs	r3, r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	334c      	adds	r3, #76	; 0x4c
 80020ec:	2202      	movs	r2, #2
 80020ee:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020f0:	78fa      	ldrb	r2, [r7, #3]
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	1a9b      	subs	r3, r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	3326      	adds	r3, #38	; 0x26
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00b      	beq.n	800211e <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002106:	78fa      	ldrb	r2, [r7, #3]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	1a9b      	subs	r3, r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	3326      	adds	r3, #38	; 0x26
 8002116:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002118:	2b02      	cmp	r3, #2
 800211a:	f040 8136 	bne.w	800238a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800211e:	78fb      	ldrb	r3, [r7, #3]
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4413      	add	r3, r2
 8002126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002134:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800213c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214a:	461a      	mov	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	e11b      	b.n	800238a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002152:	78fa      	ldrb	r2, [r7, #3]
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	1a9b      	subs	r3, r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	334d      	adds	r3, #77	; 0x4d
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b03      	cmp	r3, #3
 8002166:	f040 8081 	bne.w	800226c <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800216a:	78fa      	ldrb	r2, [r7, #3]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	334d      	adds	r3, #77	; 0x4d
 800217a:	2202      	movs	r2, #2
 800217c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800217e:	78fa      	ldrb	r2, [r7, #3]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	011b      	lsls	r3, r3, #4
 8002186:	1a9b      	subs	r3, r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	331b      	adds	r3, #27
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b01      	cmp	r3, #1
 8002192:	f040 80fa 	bne.w	800238a <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002196:	78fa      	ldrb	r2, [r7, #3]
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	1a9b      	subs	r3, r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	334c      	adds	r3, #76	; 0x4c
 80021a6:	2202      	movs	r2, #2
 80021a8:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	78fa      	ldrb	r2, [r7, #3]
 80021ba:	0151      	lsls	r1, r2, #5
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	440a      	add	r2, r1
 80021c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c8:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	78fa      	ldrb	r2, [r7, #3]
 80021da:	0151      	lsls	r1, r2, #5
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	440a      	add	r2, r1
 80021e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021e8:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	015a      	lsls	r2, r3, #5
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	78fa      	ldrb	r2, [r7, #3]
 80021fa:	0151      	lsls	r1, r2, #5
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	440a      	add	r2, r1
 8002200:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002204:	f023 0320 	bic.w	r3, r3, #32
 8002208:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800220a:	78fa      	ldrb	r2, [r7, #3]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	011b      	lsls	r3, r3, #4
 8002212:	1a9b      	subs	r3, r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	440b      	add	r3, r1
 8002218:	3326      	adds	r3, #38	; 0x26
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00b      	beq.n	8002238 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002220:	78fa      	ldrb	r2, [r7, #3]
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	011b      	lsls	r3, r3, #4
 8002228:	1a9b      	subs	r3, r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	3326      	adds	r3, #38	; 0x26
 8002230:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002232:	2b02      	cmp	r3, #2
 8002234:	f040 80a9 	bne.w	800238a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	015a      	lsls	r2, r3, #5
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4413      	add	r3, r2
 8002240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800224e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002256:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	015a      	lsls	r2, r3, #5
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4413      	add	r3, r2
 8002260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002264:	461a      	mov	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	e08e      	b.n	800238a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800226c:	78fa      	ldrb	r2, [r7, #3]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	1a9b      	subs	r3, r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	334d      	adds	r3, #77	; 0x4d
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b04      	cmp	r3, #4
 8002280:	d143      	bne.n	800230a <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002282:	78fa      	ldrb	r2, [r7, #3]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	1a9b      	subs	r3, r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	334d      	adds	r3, #77	; 0x4d
 8002292:	2202      	movs	r2, #2
 8002294:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002296:	78fa      	ldrb	r2, [r7, #3]
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	334c      	adds	r3, #76	; 0x4c
 80022a6:	2202      	movs	r2, #2
 80022a8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022aa:	78fa      	ldrb	r2, [r7, #3]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	011b      	lsls	r3, r3, #4
 80022b2:	1a9b      	subs	r3, r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	3326      	adds	r3, #38	; 0x26
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00a      	beq.n	80022d6 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80022c0:	78fa      	ldrb	r2, [r7, #3]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	1a9b      	subs	r3, r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	3326      	adds	r3, #38	; 0x26
 80022d0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d159      	bne.n	800238a <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	015a      	lsls	r2, r3, #5
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022ec:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022f4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80022f6:	78fb      	ldrb	r3, [r7, #3]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002302:	461a      	mov	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	e03f      	b.n	800238a <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800230a:	78fa      	ldrb	r2, [r7, #3]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	1a9b      	subs	r3, r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	334d      	adds	r3, #77	; 0x4d
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b08      	cmp	r3, #8
 800231e:	d126      	bne.n	800236e <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002320:	78fa      	ldrb	r2, [r7, #3]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	334d      	adds	r3, #77	; 0x4d
 8002330:	2202      	movs	r2, #2
 8002332:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	3344      	adds	r3, #68	; 0x44
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	1c59      	adds	r1, r3, #1
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	1a9b      	subs	r3, r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4403      	add	r3, r0
 8002354:	3344      	adds	r3, #68	; 0x44
 8002356:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	334c      	adds	r3, #76	; 0x4c
 8002368:	2204      	movs	r2, #4
 800236a:	701a      	strb	r2, [r3, #0]
 800236c:	e00d      	b.n	800238a <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800236e:	78fa      	ldrb	r2, [r7, #3]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	1a9b      	subs	r3, r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	334d      	adds	r3, #77	; 0x4d
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b02      	cmp	r3, #2
 8002382:	f000 8100 	beq.w	8002586 <HCD_HC_IN_IRQHandler+0xcca>
 8002386:	e000      	b.n	800238a <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002388:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800238a:	78fa      	ldrb	r2, [r7, #3]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	334c      	adds	r3, #76	; 0x4c
 800239a:	781a      	ldrb	r2, [r3, #0]
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	4619      	mov	r1, r3
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f006 f845 	bl	8008430 <HAL_HCD_HC_NotifyURBChange_Callback>
 80023a6:	e0ef      	b.n	8002588 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	78fa      	ldrb	r2, [r7, #3]
 80023ae:	4611      	mov	r1, r2
 80023b0:	4618      	mov	r0, r3
 80023b2:	f002 fee0 	bl	8005176 <USB_ReadChInterrupts>
 80023b6:	4603      	mov	r3, r0
 80023b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023bc:	2b40      	cmp	r3, #64	; 0x40
 80023be:	d12f      	bne.n	8002420 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	015a      	lsls	r2, r3, #5
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4413      	add	r3, r2
 80023c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023cc:	461a      	mov	r2, r3
 80023ce:	2340      	movs	r3, #64	; 0x40
 80023d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80023d2:	78fa      	ldrb	r2, [r7, #3]
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	1a9b      	subs	r3, r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	440b      	add	r3, r1
 80023e0:	334d      	adds	r3, #77	; 0x4d
 80023e2:	2205      	movs	r2, #5
 80023e4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80023e6:	78fa      	ldrb	r2, [r7, #3]
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	1a9b      	subs	r3, r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	331a      	adds	r3, #26
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d109      	bne.n	8002410 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	3344      	adds	r3, #68	; 0x44
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	78fa      	ldrb	r2, [r7, #3]
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f002 ff29 	bl	8005270 <USB_HC_Halt>
 800241e:	e0b3      	b.n	8002588 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f002 fea4 	bl	8005176 <USB_ReadChInterrupts>
 800242e:	4603      	mov	r3, r0
 8002430:	f003 0310 	and.w	r3, r3, #16
 8002434:	2b10      	cmp	r3, #16
 8002436:	f040 80a7 	bne.w	8002588 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800243a:	78fa      	ldrb	r2, [r7, #3]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	3326      	adds	r3, #38	; 0x26
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b03      	cmp	r3, #3
 800244e:	d11b      	bne.n	8002488 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002450:	78fa      	ldrb	r2, [r7, #3]
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	1a9b      	subs	r3, r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	3344      	adds	r3, #68	; 0x44
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002464:	78fa      	ldrb	r2, [r7, #3]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	334d      	adds	r3, #77	; 0x4d
 8002474:	2204      	movs	r2, #4
 8002476:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	78fa      	ldrb	r2, [r7, #3]
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f002 fef5 	bl	8005270 <USB_HC_Halt>
 8002486:	e03f      	b.n	8002508 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002488:	78fa      	ldrb	r2, [r7, #3]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	1a9b      	subs	r3, r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	3326      	adds	r3, #38	; 0x26
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800249e:	78fa      	ldrb	r2, [r7, #3]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	1a9b      	subs	r3, r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	3326      	adds	r3, #38	; 0x26
 80024ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d129      	bne.n	8002508 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80024b4:	78fa      	ldrb	r2, [r7, #3]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	3344      	adds	r3, #68	; 0x44
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	799b      	ldrb	r3, [r3, #6]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00a      	beq.n	80024e6 <HCD_HC_IN_IRQHandler+0xc2a>
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	331b      	adds	r3, #27
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d110      	bne.n	8002508 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80024e6:	78fa      	ldrb	r2, [r7, #3]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	011b      	lsls	r3, r3, #4
 80024ee:	1a9b      	subs	r3, r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	334d      	adds	r3, #77	; 0x4d
 80024f6:	2204      	movs	r2, #4
 80024f8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	78fa      	ldrb	r2, [r7, #3]
 8002500:	4611      	mov	r1, r2
 8002502:	4618      	mov	r0, r3
 8002504:	f002 feb4 	bl	8005270 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002508:	78fa      	ldrb	r2, [r7, #3]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	331b      	adds	r3, #27
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d129      	bne.n	8002572 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800251e:	78fa      	ldrb	r2, [r7, #3]
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	011b      	lsls	r3, r3, #4
 8002526:	1a9b      	subs	r3, r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	331b      	adds	r3, #27
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002532:	78fb      	ldrb	r3, [r7, #3]
 8002534:	015a      	lsls	r2, r3, #5
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4413      	add	r3, r2
 800253a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	78fa      	ldrb	r2, [r7, #3]
 8002542:	0151      	lsls	r1, r2, #5
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	440a      	add	r2, r1
 8002548:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800254c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002550:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002552:	78fb      	ldrb	r3, [r7, #3]
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4413      	add	r3, r2
 800255a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	78fa      	ldrb	r2, [r7, #3]
 8002562:	0151      	lsls	r1, r2, #5
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	440a      	add	r2, r1
 8002568:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800256c:	f043 0320 	orr.w	r3, r3, #32
 8002570:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	015a      	lsls	r2, r3, #5
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4413      	add	r3, r2
 800257a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257e:	461a      	mov	r2, r3
 8002580:	2310      	movs	r3, #16
 8002582:	6093      	str	r3, [r2, #8]
 8002584:	e000      	b.n	8002588 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002586:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b086      	sub	sp, #24
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	460b      	mov	r3, r1
 8002598:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	78fa      	ldrb	r2, [r7, #3]
 80025aa:	4611      	mov	r1, r2
 80025ac:	4618      	mov	r0, r3
 80025ae:	f002 fde2 	bl	8005176 <USB_ReadChInterrupts>
 80025b2:	4603      	mov	r3, r0
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d11b      	bne.n	80025f4 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80025bc:	78fb      	ldrb	r3, [r7, #3]
 80025be:	015a      	lsls	r2, r3, #5
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4413      	add	r3, r2
 80025c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c8:	461a      	mov	r2, r3
 80025ca:	2304      	movs	r3, #4
 80025cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	334d      	adds	r3, #77	; 0x4d
 80025de:	2207      	movs	r2, #7
 80025e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	78fa      	ldrb	r2, [r7, #3]
 80025e8:	4611      	mov	r1, r2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f002 fe40 	bl	8005270 <USB_HC_Halt>
 80025f0:	f000 bc6f 	b.w	8002ed2 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	78fa      	ldrb	r2, [r7, #3]
 80025fa:	4611      	mov	r1, r2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f002 fdba 	bl	8005176 <USB_ReadChInterrupts>
 8002602:	4603      	mov	r3, r0
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b20      	cmp	r3, #32
 800260a:	f040 8082 	bne.w	8002712 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	015a      	lsls	r2, r3, #5
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4413      	add	r3, r2
 8002616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261a:	461a      	mov	r2, r3
 800261c:	2320      	movs	r3, #32
 800261e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002620:	78fa      	ldrb	r2, [r7, #3]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	1a9b      	subs	r3, r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	3319      	adds	r3, #25
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d124      	bne.n	8002680 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002636:	78fa      	ldrb	r2, [r7, #3]
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	1a9b      	subs	r3, r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	440b      	add	r3, r1
 8002644:	3319      	adds	r3, #25
 8002646:	2200      	movs	r2, #0
 8002648:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800264a:	78fa      	ldrb	r2, [r7, #3]
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	1a9b      	subs	r3, r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	334c      	adds	r3, #76	; 0x4c
 800265a:	2202      	movs	r2, #2
 800265c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800265e:	78fa      	ldrb	r2, [r7, #3]
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	1a9b      	subs	r3, r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	440b      	add	r3, r1
 800266c:	334d      	adds	r3, #77	; 0x4d
 800266e:	2203      	movs	r2, #3
 8002670:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	78fa      	ldrb	r2, [r7, #3]
 8002678:	4611      	mov	r1, r2
 800267a:	4618      	mov	r0, r3
 800267c:	f002 fdf8 	bl	8005270 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002680:	78fa      	ldrb	r2, [r7, #3]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	1a9b      	subs	r3, r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	331a      	adds	r3, #26
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b01      	cmp	r3, #1
 8002694:	f040 841d 	bne.w	8002ed2 <HCD_HC_OUT_IRQHandler+0x944>
 8002698:	78fa      	ldrb	r2, [r7, #3]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	331b      	adds	r3, #27
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f040 8411 	bne.w	8002ed2 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80026b0:	78fa      	ldrb	r2, [r7, #3]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	3326      	adds	r3, #38	; 0x26
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d009      	beq.n	80026da <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80026c6:	78fa      	ldrb	r2, [r7, #3]
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	1a9b      	subs	r3, r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	440b      	add	r3, r1
 80026d4:	331b      	adds	r3, #27
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80026da:	78fa      	ldrb	r2, [r7, #3]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	1a9b      	subs	r3, r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	334d      	adds	r3, #77	; 0x4d
 80026ea:	2203      	movs	r2, #3
 80026ec:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	78fa      	ldrb	r2, [r7, #3]
 80026f4:	4611      	mov	r1, r2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f002 fdba 	bl	8005270 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	1a9b      	subs	r3, r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	3344      	adds	r3, #68	; 0x44
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	e3df      	b.n	8002ed2 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	78fa      	ldrb	r2, [r7, #3]
 8002718:	4611      	mov	r1, r2
 800271a:	4618      	mov	r0, r3
 800271c:	f002 fd2b 	bl	8005176 <USB_ReadChInterrupts>
 8002720:	4603      	mov	r3, r0
 8002722:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002726:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800272a:	d111      	bne.n	8002750 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800272c:	78fb      	ldrb	r3, [r7, #3]
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4413      	add	r3, r2
 8002734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002738:	461a      	mov	r2, r3
 800273a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800273e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f002 fd91 	bl	8005270 <USB_HC_Halt>
 800274e:	e3c0      	b.n	8002ed2 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	78fa      	ldrb	r2, [r7, #3]
 8002756:	4611      	mov	r1, r2
 8002758:	4618      	mov	r0, r3
 800275a:	f002 fd0c 	bl	8005176 <USB_ReadChInterrupts>
 800275e:	4603      	mov	r3, r0
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b01      	cmp	r3, #1
 8002766:	d168      	bne.n	800283a <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002768:	78fa      	ldrb	r2, [r7, #3]
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	1a9b      	subs	r3, r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	3344      	adds	r3, #68	; 0x44
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	78fa      	ldrb	r2, [r7, #3]
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f002 fcf6 	bl	8005176 <USB_ReadChInterrupts>
 800278a:	4603      	mov	r3, r0
 800278c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002790:	2b40      	cmp	r3, #64	; 0x40
 8002792:	d112      	bne.n	80027ba <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002794:	78fa      	ldrb	r2, [r7, #3]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	1a9b      	subs	r3, r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	3319      	adds	r3, #25
 80027a4:	2201      	movs	r2, #1
 80027a6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b4:	461a      	mov	r2, r3
 80027b6:	2340      	movs	r3, #64	; 0x40
 80027b8:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80027ba:	78fa      	ldrb	r2, [r7, #3]
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	1a9b      	subs	r3, r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	440b      	add	r3, r1
 80027c8:	331b      	adds	r3, #27
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d019      	beq.n	8002804 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80027d0:	78fa      	ldrb	r2, [r7, #3]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	331b      	adds	r3, #27
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80027e4:	78fb      	ldrb	r3, [r7, #3]
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	78fa      	ldrb	r2, [r7, #3]
 80027f4:	0151      	lsls	r1, r2, #5
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	440a      	add	r2, r1
 80027fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002802:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002804:	78fb      	ldrb	r3, [r7, #3]
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4413      	add	r3, r2
 800280c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002810:	461a      	mov	r2, r3
 8002812:	2301      	movs	r3, #1
 8002814:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002816:	78fa      	ldrb	r2, [r7, #3]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	1a9b      	subs	r3, r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	334d      	adds	r3, #77	; 0x4d
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	78fa      	ldrb	r2, [r7, #3]
 8002830:	4611      	mov	r1, r2
 8002832:	4618      	mov	r0, r3
 8002834:	f002 fd1c 	bl	8005270 <USB_HC_Halt>
 8002838:	e34b      	b.n	8002ed2 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	78fa      	ldrb	r2, [r7, #3]
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f002 fc97 	bl	8005176 <USB_ReadChInterrupts>
 8002848:	4603      	mov	r3, r0
 800284a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284e:	2b40      	cmp	r3, #64	; 0x40
 8002850:	d139      	bne.n	80028c6 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002852:	78fa      	ldrb	r2, [r7, #3]
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	1a9b      	subs	r3, r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	334d      	adds	r3, #77	; 0x4d
 8002862:	2205      	movs	r2, #5
 8002864:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002866:	78fa      	ldrb	r2, [r7, #3]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	1a9b      	subs	r3, r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	331a      	adds	r3, #26
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d109      	bne.n	8002890 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800287c:	78fa      	ldrb	r2, [r7, #3]
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	4613      	mov	r3, r2
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	1a9b      	subs	r3, r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	3319      	adds	r3, #25
 800288c:	2201      	movs	r2, #1
 800288e:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002890:	78fa      	ldrb	r2, [r7, #3]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	1a9b      	subs	r3, r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	3344      	adds	r3, #68	; 0x44
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	78fa      	ldrb	r2, [r7, #3]
 80028aa:	4611      	mov	r1, r2
 80028ac:	4618      	mov	r0, r3
 80028ae:	f002 fcdf 	bl	8005270 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80028b2:	78fb      	ldrb	r3, [r7, #3]
 80028b4:	015a      	lsls	r2, r3, #5
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4413      	add	r3, r2
 80028ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028be:	461a      	mov	r2, r3
 80028c0:	2340      	movs	r3, #64	; 0x40
 80028c2:	6093      	str	r3, [r2, #8]
 80028c4:	e305      	b.n	8002ed2 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	78fa      	ldrb	r2, [r7, #3]
 80028cc:	4611      	mov	r1, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f002 fc51 	bl	8005176 <USB_ReadChInterrupts>
 80028d4:	4603      	mov	r3, r0
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d11a      	bne.n	8002914 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80028de:	78fb      	ldrb	r3, [r7, #3]
 80028e0:	015a      	lsls	r2, r3, #5
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ea:	461a      	mov	r2, r3
 80028ec:	2308      	movs	r3, #8
 80028ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80028f0:	78fa      	ldrb	r2, [r7, #3]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	334d      	adds	r3, #77	; 0x4d
 8002900:	2206      	movs	r2, #6
 8002902:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	78fa      	ldrb	r2, [r7, #3]
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f002 fcaf 	bl	8005270 <USB_HC_Halt>
 8002912:	e2de      	b.n	8002ed2 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	78fa      	ldrb	r2, [r7, #3]
 800291a:	4611      	mov	r1, r2
 800291c:	4618      	mov	r0, r3
 800291e:	f002 fc2a 	bl	8005176 <USB_ReadChInterrupts>
 8002922:	4603      	mov	r3, r0
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	2b10      	cmp	r3, #16
 800292a:	d144      	bne.n	80029b6 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800292c:	78fa      	ldrb	r2, [r7, #3]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	3344      	adds	r3, #68	; 0x44
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002940:	78fa      	ldrb	r2, [r7, #3]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	334d      	adds	r3, #77	; 0x4d
 8002950:	2204      	movs	r2, #4
 8002952:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002954:	78fa      	ldrb	r2, [r7, #3]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	1a9b      	subs	r3, r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	3319      	adds	r3, #25
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d114      	bne.n	8002994 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800296a:	78fa      	ldrb	r2, [r7, #3]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	1a9b      	subs	r3, r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	3318      	adds	r3, #24
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d109      	bne.n	8002994 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	3319      	adds	r3, #25
 8002990:	2201      	movs	r2, #1
 8002992:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	78fa      	ldrb	r2, [r7, #3]
 800299a:	4611      	mov	r1, r2
 800299c:	4618      	mov	r0, r3
 800299e:	f002 fc67 	bl	8005270 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80029a2:	78fb      	ldrb	r3, [r7, #3]
 80029a4:	015a      	lsls	r2, r3, #5
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	4413      	add	r3, r2
 80029aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ae:	461a      	mov	r2, r3
 80029b0:	2310      	movs	r3, #16
 80029b2:	6093      	str	r3, [r2, #8]
 80029b4:	e28d      	b.n	8002ed2 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	78fa      	ldrb	r2, [r7, #3]
 80029bc:	4611      	mov	r1, r2
 80029be:	4618      	mov	r0, r3
 80029c0:	f002 fbd9 	bl	8005176 <USB_ReadChInterrupts>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ca:	2b80      	cmp	r3, #128	; 0x80
 80029cc:	d169      	bne.n	8002aa2 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	799b      	ldrb	r3, [r3, #6]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d111      	bne.n	80029fa <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80029d6:	78fa      	ldrb	r2, [r7, #3]
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	1a9b      	subs	r3, r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	334d      	adds	r3, #77	; 0x4d
 80029e6:	2207      	movs	r2, #7
 80029e8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	78fa      	ldrb	r2, [r7, #3]
 80029f0:	4611      	mov	r1, r2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f002 fc3c 	bl	8005270 <USB_HC_Halt>
 80029f8:	e049      	b.n	8002a8e <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80029fa:	78fa      	ldrb	r2, [r7, #3]
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	1a9b      	subs	r3, r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	440b      	add	r3, r1
 8002a08:	3344      	adds	r3, #68	; 0x44
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	1c59      	adds	r1, r3, #1
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4403      	add	r3, r0
 8002a1a:	3344      	adds	r3, #68	; 0x44
 8002a1c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a1e:	78fa      	ldrb	r2, [r7, #3]
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	1a9b      	subs	r3, r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	3344      	adds	r3, #68	; 0x44
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d922      	bls.n	8002a7a <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002a34:	78fa      	ldrb	r2, [r7, #3]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	1a9b      	subs	r3, r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	3344      	adds	r3, #68	; 0x44
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002a48:	78fa      	ldrb	r2, [r7, #3]
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	1a9b      	subs	r3, r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	334c      	adds	r3, #76	; 0x4c
 8002a58:	2204      	movs	r2, #4
 8002a5a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002a5c:	78fa      	ldrb	r2, [r7, #3]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	1a9b      	subs	r3, r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	334c      	adds	r3, #76	; 0x4c
 8002a6c:	781a      	ldrb	r2, [r3, #0]
 8002a6e:	78fb      	ldrb	r3, [r7, #3]
 8002a70:	4619      	mov	r1, r3
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f005 fcdc 	bl	8008430 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a78:	e009      	b.n	8002a8e <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	334c      	adds	r3, #76	; 0x4c
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002a8e:	78fb      	ldrb	r3, [r7, #3]
 8002a90:	015a      	lsls	r2, r3, #5
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	2380      	movs	r3, #128	; 0x80
 8002a9e:	6093      	str	r3, [r2, #8]
 8002aa0:	e217      	b.n	8002ed2 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	78fa      	ldrb	r2, [r7, #3]
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f002 fb63 	bl	8005176 <USB_ReadChInterrupts>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aba:	d11b      	bne.n	8002af4 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002abc:	78fa      	ldrb	r2, [r7, #3]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	334d      	adds	r3, #77	; 0x4d
 8002acc:	2209      	movs	r2, #9
 8002ace:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	78fa      	ldrb	r2, [r7, #3]
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f002 fbc9 	bl	8005270 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002ade:	78fb      	ldrb	r3, [r7, #3]
 8002ae0:	015a      	lsls	r2, r3, #5
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aea:	461a      	mov	r2, r3
 8002aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002af0:	6093      	str	r3, [r2, #8]
 8002af2:	e1ee      	b.n	8002ed2 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	78fa      	ldrb	r2, [r7, #3]
 8002afa:	4611      	mov	r1, r2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f002 fb3a 	bl	8005176 <USB_ReadChInterrupts>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	f040 81df 	bne.w	8002ecc <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002b0e:	78fb      	ldrb	r3, [r7, #3]
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002b20:	78fa      	ldrb	r2, [r7, #3]
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	1a9b      	subs	r3, r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	334d      	adds	r3, #77	; 0x4d
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	f040 8093 	bne.w	8002c5e <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b38:	78fa      	ldrb	r2, [r7, #3]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	334d      	adds	r3, #77	; 0x4d
 8002b48:	2202      	movs	r2, #2
 8002b4a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002b4c:	78fa      	ldrb	r2, [r7, #3]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	334c      	adds	r3, #76	; 0x4c
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002b60:	78fa      	ldrb	r2, [r7, #3]
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	1a9b      	subs	r3, r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	3326      	adds	r3, #38	; 0x26
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d00b      	beq.n	8002b8e <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002b76:	78fa      	ldrb	r2, [r7, #3]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	1a9b      	subs	r3, r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	3326      	adds	r3, #38	; 0x26
 8002b86:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	f040 8190 	bne.w	8002eae <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	799b      	ldrb	r3, [r3, #6]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d115      	bne.n	8002bc2 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002b96:	78fa      	ldrb	r2, [r7, #3]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	1a9b      	subs	r3, r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	333d      	adds	r3, #61	; 0x3d
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	f083 0301 	eor.w	r3, r3, #1
 8002bae:	b2d8      	uxtb	r0, r3
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	1a9b      	subs	r3, r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	333d      	adds	r3, #61	; 0x3d
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	799b      	ldrb	r3, [r3, #6]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	f040 8171 	bne.w	8002eae <HCD_HC_OUT_IRQHandler+0x920>
 8002bcc:	78fa      	ldrb	r2, [r7, #3]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	1a9b      	subs	r3, r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	3334      	adds	r3, #52	; 0x34
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 8165 	beq.w	8002eae <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002be4:	78fa      	ldrb	r2, [r7, #3]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	3334      	adds	r3, #52	; 0x34
 8002bf4:	6819      	ldr	r1, [r3, #0]
 8002bf6:	78fa      	ldrb	r2, [r7, #3]
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	1a9b      	subs	r3, r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4403      	add	r3, r0
 8002c04:	3328      	adds	r3, #40	; 0x28
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	440b      	add	r3, r1
 8002c0a:	1e59      	subs	r1, r3, #1
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4403      	add	r3, r0
 8002c1a:	3328      	adds	r3, #40	; 0x28
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c22:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 813f 	beq.w	8002eae <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002c30:	78fa      	ldrb	r2, [r7, #3]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	1a9b      	subs	r3, r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	333d      	adds	r3, #61	; 0x3d
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	f083 0301 	eor.w	r3, r3, #1
 8002c48:	b2d8      	uxtb	r0, r3
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	1a9b      	subs	r3, r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	333d      	adds	r3, #61	; 0x3d
 8002c58:	4602      	mov	r2, r0
 8002c5a:	701a      	strb	r2, [r3, #0]
 8002c5c:	e127      	b.n	8002eae <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002c5e:	78fa      	ldrb	r2, [r7, #3]
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	1a9b      	subs	r3, r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	334d      	adds	r3, #77	; 0x4d
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d120      	bne.n	8002cb6 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c74:	78fa      	ldrb	r2, [r7, #3]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	1a9b      	subs	r3, r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	334d      	adds	r3, #77	; 0x4d
 8002c84:	2202      	movs	r2, #2
 8002c86:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002c88:	78fa      	ldrb	r2, [r7, #3]
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	1a9b      	subs	r3, r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	331b      	adds	r3, #27
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	f040 8107 	bne.w	8002eae <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ca0:	78fa      	ldrb	r2, [r7, #3]
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	1a9b      	subs	r3, r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	334c      	adds	r3, #76	; 0x4c
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	701a      	strb	r2, [r3, #0]
 8002cb4:	e0fb      	b.n	8002eae <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002cb6:	78fa      	ldrb	r2, [r7, #3]
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	1a9b      	subs	r3, r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	334d      	adds	r3, #77	; 0x4d
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d13a      	bne.n	8002d42 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ccc:	78fa      	ldrb	r2, [r7, #3]
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	1a9b      	subs	r3, r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	334d      	adds	r3, #77	; 0x4d
 8002cdc:	2202      	movs	r2, #2
 8002cde:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ce0:	78fa      	ldrb	r2, [r7, #3]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	1a9b      	subs	r3, r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	334c      	adds	r3, #76	; 0x4c
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002cf4:	78fa      	ldrb	r2, [r7, #3]
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	1a9b      	subs	r3, r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	331b      	adds	r3, #27
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	f040 80d1 	bne.w	8002eae <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8002d0c:	78fa      	ldrb	r2, [r7, #3]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	1a9b      	subs	r3, r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	331b      	adds	r3, #27
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	015a      	lsls	r2, r3, #5
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	78fa      	ldrb	r2, [r7, #3]
 8002d30:	0151      	lsls	r1, r2, #5
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	440a      	add	r2, r1
 8002d36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d3e:	6053      	str	r3, [r2, #4]
 8002d40:	e0b5      	b.n	8002eae <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	1a9b      	subs	r3, r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	440b      	add	r3, r1
 8002d50:	334d      	adds	r3, #77	; 0x4d
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b05      	cmp	r3, #5
 8002d56:	d114      	bne.n	8002d82 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	334d      	adds	r3, #77	; 0x4d
 8002d68:	2202      	movs	r2, #2
 8002d6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002d6c:	78fa      	ldrb	r2, [r7, #3]
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	1a9b      	subs	r3, r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	334c      	adds	r3, #76	; 0x4c
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	701a      	strb	r2, [r3, #0]
 8002d80:	e095      	b.n	8002eae <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	334d      	adds	r3, #77	; 0x4d
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b06      	cmp	r3, #6
 8002d96:	d114      	bne.n	8002dc2 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d98:	78fa      	ldrb	r2, [r7, #3]
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	334d      	adds	r3, #77	; 0x4d
 8002da8:	2202      	movs	r2, #2
 8002daa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002dac:	78fa      	ldrb	r2, [r7, #3]
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	4613      	mov	r3, r2
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	1a9b      	subs	r3, r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	334c      	adds	r3, #76	; 0x4c
 8002dbc:	2205      	movs	r2, #5
 8002dbe:	701a      	strb	r2, [r3, #0]
 8002dc0:	e075      	b.n	8002eae <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	334d      	adds	r3, #77	; 0x4d
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b07      	cmp	r3, #7
 8002dd6:	d00a      	beq.n	8002dee <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	1a9b      	subs	r3, r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	334d      	adds	r3, #77	; 0x4d
 8002de8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002dea:	2b09      	cmp	r3, #9
 8002dec:	d170      	bne.n	8002ed0 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002dee:	78fa      	ldrb	r2, [r7, #3]
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	1a9b      	subs	r3, r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	334d      	adds	r3, #77	; 0x4d
 8002dfe:	2202      	movs	r2, #2
 8002e00:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002e02:	78fa      	ldrb	r2, [r7, #3]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	1a9b      	subs	r3, r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	3344      	adds	r3, #68	; 0x44
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	1c59      	adds	r1, r3, #1
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	1a9b      	subs	r3, r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4403      	add	r3, r0
 8002e22:	3344      	adds	r3, #68	; 0x44
 8002e24:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e26:	78fa      	ldrb	r2, [r7, #3]
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	1a9b      	subs	r3, r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	3344      	adds	r3, #68	; 0x44
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d914      	bls.n	8002e66 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	1a9b      	subs	r3, r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	3344      	adds	r3, #68	; 0x44
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	1a9b      	subs	r3, r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	334c      	adds	r3, #76	; 0x4c
 8002e60:	2204      	movs	r2, #4
 8002e62:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e64:	e022      	b.n	8002eac <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	334c      	adds	r3, #76	; 0x4c
 8002e76:	2202      	movs	r2, #2
 8002e78:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002e7a:	78fb      	ldrb	r3, [r7, #3]
 8002e7c:	015a      	lsls	r2, r3, #5
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	4413      	add	r3, r2
 8002e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e90:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e98:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e9a:	78fb      	ldrb	r3, [r7, #3]
 8002e9c:	015a      	lsls	r2, r3, #5
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002eac:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002eae:	78fa      	ldrb	r2, [r7, #3]
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	1a9b      	subs	r3, r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	440b      	add	r3, r1
 8002ebc:	334c      	adds	r3, #76	; 0x4c
 8002ebe:	781a      	ldrb	r2, [r3, #0]
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f005 fab3 	bl	8008430 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002eca:	e002      	b.n	8002ed2 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8002ecc:	bf00      	nop
 8002ece:	e000      	b.n	8002ed2 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8002ed0:	bf00      	nop
  }
}
 8002ed2:	3718      	adds	r7, #24
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08a      	sub	sp, #40	; 0x28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	f003 030f 	and.w	r3, r3, #15
 8002ef8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	0c5b      	lsrs	r3, r3, #17
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	091b      	lsrs	r3, r3, #4
 8002f08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f0c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d004      	beq.n	8002f1e <HCD_RXQLVL_IRQHandler+0x46>
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	2b05      	cmp	r3, #5
 8002f18:	f000 80b6 	beq.w	8003088 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002f1c:	e0b7      	b.n	800308e <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80b3 	beq.w	800308c <HCD_RXQLVL_IRQHandler+0x1b4>
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	332c      	adds	r3, #44	; 0x2c
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 80a7 	beq.w	800308c <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4613      	mov	r3, r2
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	1a9b      	subs	r3, r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	3338      	adds	r3, #56	; 0x38
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	18d1      	adds	r1, r2, r3
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	1a9b      	subs	r3, r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4403      	add	r3, r0
 8002f62:	3334      	adds	r3, #52	; 0x34
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4299      	cmp	r1, r3
 8002f68:	f200 8083 	bhi.w	8003072 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4613      	mov	r3, r2
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	332c      	adds	r3, #44	; 0x2c
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	b292      	uxth	r2, r2
 8002f86:	4619      	mov	r1, r3
 8002f88:	f002 f88a 	bl	80050a0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4613      	mov	r3, r2
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	332c      	adds	r3, #44	; 0x2c
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	18d1      	adds	r1, r2, r3
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4403      	add	r3, r0
 8002fb0:	332c      	adds	r3, #44	; 0x2c
 8002fb2:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	3338      	adds	r3, #56	; 0x38
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	18d1      	adds	r1, r2, r3
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4403      	add	r3, r0
 8002fd8:	3338      	adds	r3, #56	; 0x38
 8002fda:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	0cdb      	lsrs	r3, r3, #19
 8002fec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ff0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	3328      	adds	r3, #40	; 0x28
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	461a      	mov	r2, r3
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4293      	cmp	r3, r2
 800300a:	d13f      	bne.n	800308c <HCD_RXQLVL_IRQHandler+0x1b4>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d03c      	beq.n	800308c <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	4413      	add	r3, r2
 800301a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003028:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003030:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	6a3b      	ldr	r3, [r7, #32]
 8003038:	4413      	add	r3, r2
 800303a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303e:	461a      	mov	r2, r3
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4613      	mov	r3, r2
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	1a9b      	subs	r3, r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	333c      	adds	r3, #60	; 0x3c
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	f083 0301 	eor.w	r3, r3, #1
 800305a:	b2d8      	uxtb	r0, r3
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4613      	mov	r3, r2
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	1a9b      	subs	r3, r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	333c      	adds	r3, #60	; 0x3c
 800306c:	4602      	mov	r2, r0
 800306e:	701a      	strb	r2, [r3, #0]
      break;
 8003070:	e00c      	b.n	800308c <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4613      	mov	r3, r2
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	334c      	adds	r3, #76	; 0x4c
 8003082:	2204      	movs	r2, #4
 8003084:	701a      	strb	r2, [r3, #0]
      break;
 8003086:	e001      	b.n	800308c <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003088:	bf00      	nop
 800308a:	e000      	b.n	800308e <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800308c:	bf00      	nop
  }
}
 800308e:	bf00      	nop
 8003090:	3728      	adds	r7, #40	; 0x28
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b086      	sub	sp, #24
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80030c2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d10b      	bne.n	80030e6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d102      	bne.n	80030de <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f005 f98d 	bl	80083f8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	f043 0302 	orr.w	r3, r3, #2
 80030e4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d132      	bne.n	8003156 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f043 0308 	orr.w	r3, r3, #8
 80030f6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d126      	bne.n	8003150 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	7a5b      	ldrb	r3, [r3, #9]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d113      	bne.n	8003132 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003110:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003114:	d106      	bne.n	8003124 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2102      	movs	r1, #2
 800311c:	4618      	mov	r0, r3
 800311e:	f002 f859 	bl	80051d4 <USB_InitFSLSPClkSel>
 8003122:	e011      	b.n	8003148 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2101      	movs	r1, #1
 800312a:	4618      	mov	r0, r3
 800312c:	f002 f852 	bl	80051d4 <USB_InitFSLSPClkSel>
 8003130:	e00a      	b.n	8003148 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	79db      	ldrb	r3, [r3, #7]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d106      	bne.n	8003148 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003140:	461a      	mov	r2, r3
 8003142:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003146:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f005 f983 	bl	8008454 <HAL_HCD_PortEnabled_Callback>
 800314e:	e002      	b.n	8003156 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f005 f98d 	bl	8008470 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f003 0320 	and.w	r3, r3, #32
 800315c:	2b20      	cmp	r3, #32
 800315e:	d103      	bne.n	8003168 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f043 0320 	orr.w	r3, r3, #32
 8003166:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800316e:	461a      	mov	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	6013      	str	r3, [r2, #0]
}
 8003174:	bf00      	nop
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e12b      	b.n	80033e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d106      	bne.n	80031a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7fd fd5e 	bl	8000c64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2224      	movs	r2, #36	; 0x24
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0201 	bic.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031e0:	f001 fa20 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 80031e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	4a81      	ldr	r2, [pc, #516]	; (80033f0 <HAL_I2C_Init+0x274>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d807      	bhi.n	8003200 <HAL_I2C_Init+0x84>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4a80      	ldr	r2, [pc, #512]	; (80033f4 <HAL_I2C_Init+0x278>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	bf94      	ite	ls
 80031f8:	2301      	movls	r3, #1
 80031fa:	2300      	movhi	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	e006      	b.n	800320e <HAL_I2C_Init+0x92>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4a7d      	ldr	r2, [pc, #500]	; (80033f8 <HAL_I2C_Init+0x27c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	bf94      	ite	ls
 8003208:	2301      	movls	r3, #1
 800320a:	2300      	movhi	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e0e7      	b.n	80033e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4a78      	ldr	r2, [pc, #480]	; (80033fc <HAL_I2C_Init+0x280>)
 800321a:	fba2 2303 	umull	r2, r3, r2, r3
 800321e:	0c9b      	lsrs	r3, r3, #18
 8003220:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	430a      	orrs	r2, r1
 8003234:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4a6a      	ldr	r2, [pc, #424]	; (80033f0 <HAL_I2C_Init+0x274>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d802      	bhi.n	8003250 <HAL_I2C_Init+0xd4>
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	3301      	adds	r3, #1
 800324e:	e009      	b.n	8003264 <HAL_I2C_Init+0xe8>
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003256:	fb02 f303 	mul.w	r3, r2, r3
 800325a:	4a69      	ldr	r2, [pc, #420]	; (8003400 <HAL_I2C_Init+0x284>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	099b      	lsrs	r3, r3, #6
 8003262:	3301      	adds	r3, #1
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6812      	ldr	r2, [r2, #0]
 8003268:	430b      	orrs	r3, r1
 800326a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003276:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	495c      	ldr	r1, [pc, #368]	; (80033f0 <HAL_I2C_Init+0x274>)
 8003280:	428b      	cmp	r3, r1
 8003282:	d819      	bhi.n	80032b8 <HAL_I2C_Init+0x13c>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	1e59      	subs	r1, r3, #1
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003292:	1c59      	adds	r1, r3, #1
 8003294:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003298:	400b      	ands	r3, r1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <HAL_I2C_Init+0x138>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	1e59      	subs	r1, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80032ac:	3301      	adds	r3, #1
 80032ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b2:	e051      	b.n	8003358 <HAL_I2C_Init+0x1dc>
 80032b4:	2304      	movs	r3, #4
 80032b6:	e04f      	b.n	8003358 <HAL_I2C_Init+0x1dc>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d111      	bne.n	80032e4 <HAL_I2C_Init+0x168>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	1e58      	subs	r0, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6859      	ldr	r1, [r3, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	440b      	add	r3, r1
 80032ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80032d2:	3301      	adds	r3, #1
 80032d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d8:	2b00      	cmp	r3, #0
 80032da:	bf0c      	ite	eq
 80032dc:	2301      	moveq	r3, #1
 80032de:	2300      	movne	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	e012      	b.n	800330a <HAL_I2C_Init+0x18e>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	1e58      	subs	r0, r3, #1
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6859      	ldr	r1, [r3, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	0099      	lsls	r1, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032fa:	3301      	adds	r3, #1
 80032fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003300:	2b00      	cmp	r3, #0
 8003302:	bf0c      	ite	eq
 8003304:	2301      	moveq	r3, #1
 8003306:	2300      	movne	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <HAL_I2C_Init+0x196>
 800330e:	2301      	movs	r3, #1
 8003310:	e022      	b.n	8003358 <HAL_I2C_Init+0x1dc>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10e      	bne.n	8003338 <HAL_I2C_Init+0x1bc>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	1e58      	subs	r0, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6859      	ldr	r1, [r3, #4]
 8003322:	460b      	mov	r3, r1
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	440b      	add	r3, r1
 8003328:	fbb0 f3f3 	udiv	r3, r0, r3
 800332c:	3301      	adds	r3, #1
 800332e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003336:	e00f      	b.n	8003358 <HAL_I2C_Init+0x1dc>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	1e58      	subs	r0, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6859      	ldr	r1, [r3, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	0099      	lsls	r1, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	fbb0 f3f3 	udiv	r3, r0, r3
 800334e:	3301      	adds	r3, #1
 8003350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003354:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	6809      	ldr	r1, [r1, #0]
 800335c:	4313      	orrs	r3, r2
 800335e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69da      	ldr	r2, [r3, #28]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003386:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6911      	ldr	r1, [r2, #16]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	68d2      	ldr	r2, [r2, #12]
 8003392:	4311      	orrs	r1, r2
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	430b      	orrs	r3, r1
 800339a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695a      	ldr	r2, [r3, #20]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2220      	movs	r2, #32
 80033d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	000186a0 	.word	0x000186a0
 80033f4:	001e847f 	.word	0x001e847f
 80033f8:	003d08ff 	.word	0x003d08ff
 80033fc:	431bde83 	.word	0x431bde83
 8003400:	10624dd3 	.word	0x10624dd3

08003404 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e128      	b.n	8003668 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d109      	bne.n	8003436 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a90      	ldr	r2, [pc, #576]	; (8003670 <HAL_I2S_Init+0x26c>)
 800342e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7fd fc5f 	bl	8000cf4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2202      	movs	r2, #2
 800343a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800344c:	f023 030f 	bic.w	r3, r3, #15
 8003450:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2202      	movs	r2, #2
 8003458:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d060      	beq.n	8003524 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d102      	bne.n	8003470 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800346a:	2310      	movs	r3, #16
 800346c:	617b      	str	r3, [r7, #20]
 800346e:	e001      	b.n	8003474 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003470:	2320      	movs	r3, #32
 8003472:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2b20      	cmp	r3, #32
 800347a:	d802      	bhi.n	8003482 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003482:	2001      	movs	r0, #1
 8003484:	f001 fa0a 	bl	800489c <HAL_RCCEx_GetPeriphCLKFreq>
 8003488:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003492:	d125      	bne.n	80034e0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d010      	beq.n	80034be <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	461a      	mov	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b8:	3305      	adds	r3, #5
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	e01f      	b.n	80034fe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	461a      	mov	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034da:	3305      	adds	r3, #5
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	e00e      	b.n	80034fe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	461a      	mov	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fa:	3305      	adds	r3, #5
 80034fc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	4a5c      	ldr	r2, [pc, #368]	; (8003674 <HAL_I2S_Init+0x270>)
 8003502:	fba2 2303 	umull	r2, r3, r2, r3
 8003506:	08db      	lsrs	r3, r3, #3
 8003508:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	085b      	lsrs	r3, r3, #1
 800351a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	021b      	lsls	r3, r3, #8
 8003520:	61bb      	str	r3, [r7, #24]
 8003522:	e003      	b.n	800352c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003524:	2302      	movs	r3, #2
 8003526:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d902      	bls.n	8003538 <HAL_I2S_Init+0x134>
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	2bff      	cmp	r3, #255	; 0xff
 8003536:	d907      	bls.n	8003548 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353c:	f043 0210 	orr.w	r2, r3, #16
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e08f      	b.n	8003668 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	ea42 0103 	orr.w	r1, r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	430a      	orrs	r2, r1
 800355a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003566:	f023 030f 	bic.w	r3, r3, #15
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6851      	ldr	r1, [r2, #4]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6892      	ldr	r2, [r2, #8]
 8003572:	4311      	orrs	r1, r2
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	68d2      	ldr	r2, [r2, #12]
 8003578:	4311      	orrs	r1, r2
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6992      	ldr	r2, [r2, #24]
 800357e:	430a      	orrs	r2, r1
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800358a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d161      	bne.n	8003658 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a38      	ldr	r2, [pc, #224]	; (8003678 <HAL_I2S_Init+0x274>)
 8003598:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a37      	ldr	r2, [pc, #220]	; (800367c <HAL_I2S_Init+0x278>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d101      	bne.n	80035a8 <HAL_I2S_Init+0x1a4>
 80035a4:	4b36      	ldr	r3, [pc, #216]	; (8003680 <HAL_I2S_Init+0x27c>)
 80035a6:	e001      	b.n	80035ac <HAL_I2S_Init+0x1a8>
 80035a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6812      	ldr	r2, [r2, #0]
 80035b2:	4932      	ldr	r1, [pc, #200]	; (800367c <HAL_I2S_Init+0x278>)
 80035b4:	428a      	cmp	r2, r1
 80035b6:	d101      	bne.n	80035bc <HAL_I2S_Init+0x1b8>
 80035b8:	4a31      	ldr	r2, [pc, #196]	; (8003680 <HAL_I2S_Init+0x27c>)
 80035ba:	e001      	b.n	80035c0 <HAL_I2S_Init+0x1bc>
 80035bc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80035c0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80035c4:	f023 030f 	bic.w	r3, r3, #15
 80035c8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a2b      	ldr	r2, [pc, #172]	; (800367c <HAL_I2S_Init+0x278>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d101      	bne.n	80035d8 <HAL_I2S_Init+0x1d4>
 80035d4:	4b2a      	ldr	r3, [pc, #168]	; (8003680 <HAL_I2S_Init+0x27c>)
 80035d6:	e001      	b.n	80035dc <HAL_I2S_Init+0x1d8>
 80035d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035dc:	2202      	movs	r2, #2
 80035de:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a25      	ldr	r2, [pc, #148]	; (800367c <HAL_I2S_Init+0x278>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d101      	bne.n	80035ee <HAL_I2S_Init+0x1ea>
 80035ea:	4b25      	ldr	r3, [pc, #148]	; (8003680 <HAL_I2S_Init+0x27c>)
 80035ec:	e001      	b.n	80035f2 <HAL_I2S_Init+0x1ee>
 80035ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035f2:	69db      	ldr	r3, [r3, #28]
 80035f4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035fe:	d003      	beq.n	8003608 <HAL_I2S_Init+0x204>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d103      	bne.n	8003610 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003608:	f44f 7380 	mov.w	r3, #256	; 0x100
 800360c:	613b      	str	r3, [r7, #16]
 800360e:	e001      	b.n	8003614 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003610:	2300      	movs	r3, #0
 8003612:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800361e:	4313      	orrs	r3, r2
 8003620:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003628:	4313      	orrs	r3, r2
 800362a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003632:	4313      	orrs	r3, r2
 8003634:	b29a      	uxth	r2, r3
 8003636:	897b      	ldrh	r3, [r7, #10]
 8003638:	4313      	orrs	r3, r2
 800363a:	b29b      	uxth	r3, r3
 800363c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003640:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a0d      	ldr	r2, [pc, #52]	; (800367c <HAL_I2S_Init+0x278>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d101      	bne.n	8003650 <HAL_I2S_Init+0x24c>
 800364c:	4b0c      	ldr	r3, [pc, #48]	; (8003680 <HAL_I2S_Init+0x27c>)
 800364e:	e001      	b.n	8003654 <HAL_I2S_Init+0x250>
 8003650:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003654:	897a      	ldrh	r2, [r7, #10]
 8003656:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3720      	adds	r7, #32
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	0800377b 	.word	0x0800377b
 8003674:	cccccccd 	.word	0xcccccccd
 8003678:	08003891 	.word	0x08003891
 800367c:	40003800 	.word	0x40003800
 8003680:	40003400 	.word	0x40003400

08003684 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	881a      	ldrh	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	1c9a      	adds	r2, r3, #2
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10e      	bne.n	8003714 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003704:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7ff ffb8 	bl	8003684 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003714:	bf00      	nop
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	b292      	uxth	r2, r2
 8003730:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003736:	1c9a      	adds	r2, r3, #2
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b01      	subs	r3, #1
 8003744:	b29a      	uxth	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800374e:	b29b      	uxth	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10e      	bne.n	8003772 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003762:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7ff ff93 	bl	8003698 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b086      	sub	sp, #24
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b04      	cmp	r3, #4
 8003794:	d13a      	bne.n	800380c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b01      	cmp	r3, #1
 800379e:	d109      	bne.n	80037b4 <I2S_IRQHandler+0x3a>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037aa:	2b40      	cmp	r3, #64	; 0x40
 80037ac:	d102      	bne.n	80037b4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7ff ffb4 	bl	800371c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ba:	2b40      	cmp	r3, #64	; 0x40
 80037bc:	d126      	bne.n	800380c <I2S_IRQHandler+0x92>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d11f      	bne.n	800380c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037da:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80037dc:	2300      	movs	r3, #0
 80037de:	613b      	str	r3, [r7, #16]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	613b      	str	r3, [r7, #16]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	f043 0202 	orr.w	r2, r3, #2
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff ff50 	bl	80036ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b03      	cmp	r3, #3
 8003816:	d136      	bne.n	8003886 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b02      	cmp	r3, #2
 8003820:	d109      	bne.n	8003836 <I2S_IRQHandler+0xbc>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382c:	2b80      	cmp	r3, #128	; 0x80
 800382e:	d102      	bne.n	8003836 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7ff ff45 	bl	80036c0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b08      	cmp	r3, #8
 800383e:	d122      	bne.n	8003886 <I2S_IRQHandler+0x10c>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f003 0320 	and.w	r3, r3, #32
 800384a:	2b20      	cmp	r3, #32
 800384c:	d11b      	bne.n	8003886 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800385c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003878:	f043 0204 	orr.w	r2, r3, #4
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff ff13 	bl	80036ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003886:	bf00      	nop
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
	...

08003890 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a92      	ldr	r2, [pc, #584]	; (8003af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d101      	bne.n	80038ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80038aa:	4b92      	ldr	r3, [pc, #584]	; (8003af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038ac:	e001      	b.n	80038b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80038ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a8b      	ldr	r2, [pc, #556]	; (8003af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d101      	bne.n	80038cc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80038c8:	4b8a      	ldr	r3, [pc, #552]	; (8003af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038ca:	e001      	b.n	80038d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80038cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038dc:	d004      	beq.n	80038e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f040 8099 	bne.w	8003a1a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d107      	bne.n	8003902 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f925 	bl	8003b4c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b01      	cmp	r3, #1
 800390a:	d107      	bne.n	800391c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f9c8 	bl	8003cac <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b40      	cmp	r3, #64	; 0x40
 8003924:	d13a      	bne.n	800399c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	2b00      	cmp	r3, #0
 800392e:	d035      	beq.n	800399c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a6e      	ldr	r2, [pc, #440]	; (8003af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d101      	bne.n	800393e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800393a:	4b6e      	ldr	r3, [pc, #440]	; (8003af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800393c:	e001      	b.n	8003942 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800393e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4969      	ldr	r1, [pc, #420]	; (8003af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800394a:	428b      	cmp	r3, r1
 800394c:	d101      	bne.n	8003952 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800394e:	4b69      	ldr	r3, [pc, #420]	; (8003af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003950:	e001      	b.n	8003956 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003952:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003956:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800395a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800396a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398e:	f043 0202 	orr.w	r2, r3, #2
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff fe88 	bl	80036ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f003 0308 	and.w	r3, r3, #8
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	f040 80c3 	bne.w	8003b2e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 80bd 	beq.w	8003b2e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039c2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a49      	ldr	r2, [pc, #292]	; (8003af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d101      	bne.n	80039d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80039ce:	4b49      	ldr	r3, [pc, #292]	; (8003af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039d0:	e001      	b.n	80039d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80039d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4944      	ldr	r1, [pc, #272]	; (8003af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039de:	428b      	cmp	r3, r1
 80039e0:	d101      	bne.n	80039e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80039e2:	4b44      	ldr	r3, [pc, #272]	; (8003af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039e4:	e001      	b.n	80039ea <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80039e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039ee:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80039f0:	2300      	movs	r3, #0
 80039f2:	60bb      	str	r3, [r7, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	60bb      	str	r3, [r7, #8]
 80039fc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0a:	f043 0204 	orr.w	r2, r3, #4
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff fe4a 	bl	80036ac <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a18:	e089      	b.n	8003b2e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d107      	bne.n	8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f8be 	bl	8003bb0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d107      	bne.n	8003a4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f8fd 	bl	8003c48 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a54:	2b40      	cmp	r3, #64	; 0x40
 8003a56:	d12f      	bne.n	8003ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d02a      	beq.n	8003ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a70:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a1e      	ldr	r2, [pc, #120]	; (8003af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d101      	bne.n	8003a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003a7c:	4b1d      	ldr	r3, [pc, #116]	; (8003af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a7e:	e001      	b.n	8003a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003a80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4919      	ldr	r1, [pc, #100]	; (8003af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a8c:	428b      	cmp	r3, r1
 8003a8e:	d101      	bne.n	8003a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003a90:	4b18      	ldr	r3, [pc, #96]	; (8003af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a92:	e001      	b.n	8003a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003a94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a9c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	f043 0202 	orr.w	r2, r3, #2
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff fdfa 	bl	80036ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d136      	bne.n	8003b30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d031      	beq.n	8003b30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a07      	ldr	r2, [pc, #28]	; (8003af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d101      	bne.n	8003ada <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003ad6:	4b07      	ldr	r3, [pc, #28]	; (8003af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ad8:	e001      	b.n	8003ade <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003ada:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4902      	ldr	r1, [pc, #8]	; (8003af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ae6:	428b      	cmp	r3, r1
 8003ae8:	d106      	bne.n	8003af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003aea:	4b02      	ldr	r3, [pc, #8]	; (8003af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003aec:	e006      	b.n	8003afc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003aee:	bf00      	nop
 8003af0:	40003800 	.word	0x40003800
 8003af4:	40003400 	.word	0x40003400
 8003af8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003afc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b00:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b10:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1e:	f043 0204 	orr.w	r2, r3, #4
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7ff fdc0 	bl	80036ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b2c:	e000      	b.n	8003b30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b2e:	bf00      	nop
}
 8003b30:	bf00      	nop
 8003b32:	3720      	adds	r7, #32
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	1c99      	adds	r1, r3, #2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6251      	str	r1, [r2, #36]	; 0x24
 8003b5e:	881a      	ldrh	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d113      	bne.n	8003ba6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b8c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d106      	bne.n	8003ba6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff ffc9 	bl	8003b38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ba6:	bf00      	nop
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	1c99      	adds	r1, r3, #2
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6251      	str	r1, [r2, #36]	; 0x24
 8003bc2:	8819      	ldrh	r1, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a1d      	ldr	r2, [pc, #116]	; (8003c40 <I2SEx_TxISR_I2SExt+0x90>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d101      	bne.n	8003bd2 <I2SEx_TxISR_I2SExt+0x22>
 8003bce:	4b1d      	ldr	r3, [pc, #116]	; (8003c44 <I2SEx_TxISR_I2SExt+0x94>)
 8003bd0:	e001      	b.n	8003bd6 <I2SEx_TxISR_I2SExt+0x26>
 8003bd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bd6:	460a      	mov	r2, r1
 8003bd8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d121      	bne.n	8003c36 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a12      	ldr	r2, [pc, #72]	; (8003c40 <I2SEx_TxISR_I2SExt+0x90>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d101      	bne.n	8003c00 <I2SEx_TxISR_I2SExt+0x50>
 8003bfc:	4b11      	ldr	r3, [pc, #68]	; (8003c44 <I2SEx_TxISR_I2SExt+0x94>)
 8003bfe:	e001      	b.n	8003c04 <I2SEx_TxISR_I2SExt+0x54>
 8003c00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	490d      	ldr	r1, [pc, #52]	; (8003c40 <I2SEx_TxISR_I2SExt+0x90>)
 8003c0c:	428b      	cmp	r3, r1
 8003c0e:	d101      	bne.n	8003c14 <I2SEx_TxISR_I2SExt+0x64>
 8003c10:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <I2SEx_TxISR_I2SExt+0x94>)
 8003c12:	e001      	b.n	8003c18 <I2SEx_TxISR_I2SExt+0x68>
 8003c14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c1c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d106      	bne.n	8003c36 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff ff81 	bl	8003b38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c36:	bf00      	nop
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40003800 	.word	0x40003800
 8003c44:	40003400 	.word	0x40003400

08003c48 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68d8      	ldr	r0, [r3, #12]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5a:	1c99      	adds	r1, r3, #2
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c60:	b282      	uxth	r2, r0
 8003c62:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d113      	bne.n	8003ca4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c8a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d106      	bne.n	8003ca4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7ff ff4a 	bl	8003b38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ca4:	bf00      	nop
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a20      	ldr	r2, [pc, #128]	; (8003d3c <I2SEx_RxISR_I2SExt+0x90>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d101      	bne.n	8003cc2 <I2SEx_RxISR_I2SExt+0x16>
 8003cbe:	4b20      	ldr	r3, [pc, #128]	; (8003d40 <I2SEx_RxISR_I2SExt+0x94>)
 8003cc0:	e001      	b.n	8003cc6 <I2SEx_RxISR_I2SExt+0x1a>
 8003cc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cc6:	68d8      	ldr	r0, [r3, #12]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ccc:	1c99      	adds	r1, r3, #2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003cd2:	b282      	uxth	r2, r0
 8003cd4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d121      	bne.n	8003d32 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a12      	ldr	r2, [pc, #72]	; (8003d3c <I2SEx_RxISR_I2SExt+0x90>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d101      	bne.n	8003cfc <I2SEx_RxISR_I2SExt+0x50>
 8003cf8:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <I2SEx_RxISR_I2SExt+0x94>)
 8003cfa:	e001      	b.n	8003d00 <I2SEx_RxISR_I2SExt+0x54>
 8003cfc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	490d      	ldr	r1, [pc, #52]	; (8003d3c <I2SEx_RxISR_I2SExt+0x90>)
 8003d08:	428b      	cmp	r3, r1
 8003d0a:	d101      	bne.n	8003d10 <I2SEx_RxISR_I2SExt+0x64>
 8003d0c:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <I2SEx_RxISR_I2SExt+0x94>)
 8003d0e:	e001      	b.n	8003d14 <I2SEx_RxISR_I2SExt+0x68>
 8003d10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d18:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d106      	bne.n	8003d32 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7ff ff03 	bl	8003b38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d32:	bf00      	nop
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40003800 	.word	0x40003800
 8003d40:	40003400 	.word	0x40003400

08003d44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e267      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d075      	beq.n	8003e4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d62:	4b88      	ldr	r3, [pc, #544]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d00c      	beq.n	8003d88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d6e:	4b85      	ldr	r3, [pc, #532]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d112      	bne.n	8003da0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d7a:	4b82      	ldr	r3, [pc, #520]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d86:	d10b      	bne.n	8003da0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d88:	4b7e      	ldr	r3, [pc, #504]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d05b      	beq.n	8003e4c <HAL_RCC_OscConfig+0x108>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d157      	bne.n	8003e4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e242      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da8:	d106      	bne.n	8003db8 <HAL_RCC_OscConfig+0x74>
 8003daa:	4b76      	ldr	r3, [pc, #472]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a75      	ldr	r2, [pc, #468]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	e01d      	b.n	8003df4 <HAL_RCC_OscConfig+0xb0>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dc0:	d10c      	bne.n	8003ddc <HAL_RCC_OscConfig+0x98>
 8003dc2:	4b70      	ldr	r3, [pc, #448]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a6f      	ldr	r2, [pc, #444]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	4b6d      	ldr	r3, [pc, #436]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a6c      	ldr	r2, [pc, #432]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	e00b      	b.n	8003df4 <HAL_RCC_OscConfig+0xb0>
 8003ddc:	4b69      	ldr	r3, [pc, #420]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a68      	ldr	r2, [pc, #416]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de6:	6013      	str	r3, [r2, #0]
 8003de8:	4b66      	ldr	r3, [pc, #408]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a65      	ldr	r2, [pc, #404]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d013      	beq.n	8003e24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfc:	f7fd f974 	bl	80010e8 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e04:	f7fd f970 	bl	80010e8 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b64      	cmp	r3, #100	; 0x64
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e207      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e16:	4b5b      	ldr	r3, [pc, #364]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f0      	beq.n	8003e04 <HAL_RCC_OscConfig+0xc0>
 8003e22:	e014      	b.n	8003e4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e24:	f7fd f960 	bl	80010e8 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e2c:	f7fd f95c 	bl	80010e8 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b64      	cmp	r3, #100	; 0x64
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e1f3      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e3e:	4b51      	ldr	r3, [pc, #324]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1f0      	bne.n	8003e2c <HAL_RCC_OscConfig+0xe8>
 8003e4a:	e000      	b.n	8003e4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d063      	beq.n	8003f22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e5a:	4b4a      	ldr	r3, [pc, #296]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00b      	beq.n	8003e7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e66:	4b47      	ldr	r3, [pc, #284]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d11c      	bne.n	8003eac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e72:	4b44      	ldr	r3, [pc, #272]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d116      	bne.n	8003eac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e7e:	4b41      	ldr	r3, [pc, #260]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d005      	beq.n	8003e96 <HAL_RCC_OscConfig+0x152>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d001      	beq.n	8003e96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e1c7      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e96:	4b3b      	ldr	r3, [pc, #236]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	4937      	ldr	r1, [pc, #220]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eaa:	e03a      	b.n	8003f22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d020      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eb4:	4b34      	ldr	r3, [pc, #208]	; (8003f88 <HAL_RCC_OscConfig+0x244>)
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eba:	f7fd f915 	bl	80010e8 <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ec2:	f7fd f911 	bl	80010e8 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e1a8      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed4:	4b2b      	ldr	r3, [pc, #172]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0f0      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee0:	4b28      	ldr	r3, [pc, #160]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	4925      	ldr	r1, [pc, #148]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	600b      	str	r3, [r1, #0]
 8003ef4:	e015      	b.n	8003f22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ef6:	4b24      	ldr	r3, [pc, #144]	; (8003f88 <HAL_RCC_OscConfig+0x244>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fd f8f4 	bl	80010e8 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f04:	f7fd f8f0 	bl	80010e8 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e187      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f16:	4b1b      	ldr	r3, [pc, #108]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f0      	bne.n	8003f04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d036      	beq.n	8003f9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d016      	beq.n	8003f64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f36:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <HAL_RCC_OscConfig+0x248>)
 8003f38:	2201      	movs	r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3c:	f7fd f8d4 	bl	80010e8 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f44:	f7fd f8d0 	bl	80010e8 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e167      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f56:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCC_OscConfig+0x200>
 8003f62:	e01b      	b.n	8003f9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f64:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <HAL_RCC_OscConfig+0x248>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f6a:	f7fd f8bd 	bl	80010e8 <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f70:	e00e      	b.n	8003f90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f72:	f7fd f8b9 	bl	80010e8 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d907      	bls.n	8003f90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e150      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
 8003f84:	40023800 	.word	0x40023800
 8003f88:	42470000 	.word	0x42470000
 8003f8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f90:	4b88      	ldr	r3, [pc, #544]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8003f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1ea      	bne.n	8003f72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 8097 	beq.w	80040d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003faa:	2300      	movs	r3, #0
 8003fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fae:	4b81      	ldr	r3, [pc, #516]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10f      	bne.n	8003fda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	4b7d      	ldr	r3, [pc, #500]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	4a7c      	ldr	r2, [pc, #496]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8003fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fca:	4b7a      	ldr	r3, [pc, #488]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd2:	60bb      	str	r3, [r7, #8]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fda:	4b77      	ldr	r3, [pc, #476]	; (80041b8 <HAL_RCC_OscConfig+0x474>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d118      	bne.n	8004018 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fe6:	4b74      	ldr	r3, [pc, #464]	; (80041b8 <HAL_RCC_OscConfig+0x474>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a73      	ldr	r2, [pc, #460]	; (80041b8 <HAL_RCC_OscConfig+0x474>)
 8003fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ff2:	f7fd f879 	bl	80010e8 <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff8:	e008      	b.n	800400c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffa:	f7fd f875 	bl	80010e8 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d901      	bls.n	800400c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e10c      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400c:	4b6a      	ldr	r3, [pc, #424]	; (80041b8 <HAL_RCC_OscConfig+0x474>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0f0      	beq.n	8003ffa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d106      	bne.n	800402e <HAL_RCC_OscConfig+0x2ea>
 8004020:	4b64      	ldr	r3, [pc, #400]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004024:	4a63      	ldr	r2, [pc, #396]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004026:	f043 0301 	orr.w	r3, r3, #1
 800402a:	6713      	str	r3, [r2, #112]	; 0x70
 800402c:	e01c      	b.n	8004068 <HAL_RCC_OscConfig+0x324>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	2b05      	cmp	r3, #5
 8004034:	d10c      	bne.n	8004050 <HAL_RCC_OscConfig+0x30c>
 8004036:	4b5f      	ldr	r3, [pc, #380]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403a:	4a5e      	ldr	r2, [pc, #376]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 800403c:	f043 0304 	orr.w	r3, r3, #4
 8004040:	6713      	str	r3, [r2, #112]	; 0x70
 8004042:	4b5c      	ldr	r3, [pc, #368]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004046:	4a5b      	ldr	r2, [pc, #364]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	6713      	str	r3, [r2, #112]	; 0x70
 800404e:	e00b      	b.n	8004068 <HAL_RCC_OscConfig+0x324>
 8004050:	4b58      	ldr	r3, [pc, #352]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004054:	4a57      	ldr	r2, [pc, #348]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004056:	f023 0301 	bic.w	r3, r3, #1
 800405a:	6713      	str	r3, [r2, #112]	; 0x70
 800405c:	4b55      	ldr	r3, [pc, #340]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 800405e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004060:	4a54      	ldr	r2, [pc, #336]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004062:	f023 0304 	bic.w	r3, r3, #4
 8004066:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d015      	beq.n	800409c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004070:	f7fd f83a 	bl	80010e8 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004076:	e00a      	b.n	800408e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004078:	f7fd f836 	bl	80010e8 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	f241 3288 	movw	r2, #5000	; 0x1388
 8004086:	4293      	cmp	r3, r2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e0cb      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800408e:	4b49      	ldr	r3, [pc, #292]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0ee      	beq.n	8004078 <HAL_RCC_OscConfig+0x334>
 800409a:	e014      	b.n	80040c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800409c:	f7fd f824 	bl	80010e8 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a2:	e00a      	b.n	80040ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040a4:	f7fd f820 	bl	80010e8 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e0b5      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ba:	4b3e      	ldr	r3, [pc, #248]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 80040bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1ee      	bne.n	80040a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040c6:	7dfb      	ldrb	r3, [r7, #23]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d105      	bne.n	80040d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040cc:	4b39      	ldr	r3, [pc, #228]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 80040ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d0:	4a38      	ldr	r2, [pc, #224]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 80040d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 80a1 	beq.w	8004224 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040e2:	4b34      	ldr	r3, [pc, #208]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 030c 	and.w	r3, r3, #12
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d05c      	beq.n	80041a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d141      	bne.n	800417a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f6:	4b31      	ldr	r3, [pc, #196]	; (80041bc <HAL_RCC_OscConfig+0x478>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fc:	f7fc fff4 	bl	80010e8 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004104:	f7fc fff0 	bl	80010e8 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e087      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004116:	4b27      	ldr	r3, [pc, #156]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69da      	ldr	r2, [r3, #28]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	019b      	lsls	r3, r3, #6
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004138:	085b      	lsrs	r3, r3, #1
 800413a:	3b01      	subs	r3, #1
 800413c:	041b      	lsls	r3, r3, #16
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004144:	061b      	lsls	r3, r3, #24
 8004146:	491b      	ldr	r1, [pc, #108]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004148:	4313      	orrs	r3, r2
 800414a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800414c:	4b1b      	ldr	r3, [pc, #108]	; (80041bc <HAL_RCC_OscConfig+0x478>)
 800414e:	2201      	movs	r2, #1
 8004150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004152:	f7fc ffc9 	bl	80010e8 <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800415a:	f7fc ffc5 	bl	80010e8 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e05c      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416c:	4b11      	ldr	r3, [pc, #68]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f0      	beq.n	800415a <HAL_RCC_OscConfig+0x416>
 8004178:	e054      	b.n	8004224 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417a:	4b10      	ldr	r3, [pc, #64]	; (80041bc <HAL_RCC_OscConfig+0x478>)
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004180:	f7fc ffb2 	bl	80010e8 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004188:	f7fc ffae 	bl	80010e8 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e045      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419a:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0x444>
 80041a6:	e03d      	b.n	8004224 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d107      	bne.n	80041c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e038      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
 80041b4:	40023800 	.word	0x40023800
 80041b8:	40007000 	.word	0x40007000
 80041bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041c0:	4b1b      	ldr	r3, [pc, #108]	; (8004230 <HAL_RCC_OscConfig+0x4ec>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d028      	beq.n	8004220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041d8:	429a      	cmp	r2, r3
 80041da:	d121      	bne.n	8004220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d11a      	bne.n	8004220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041f0:	4013      	ands	r3, r2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d111      	bne.n	8004220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004206:	085b      	lsrs	r3, r3, #1
 8004208:	3b01      	subs	r3, #1
 800420a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800420c:	429a      	cmp	r2, r3
 800420e:	d107      	bne.n	8004220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800421c:	429a      	cmp	r2, r3
 800421e:	d001      	beq.n	8004224 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e000      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	40023800 	.word	0x40023800

08004234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e0cc      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004248:	4b68      	ldr	r3, [pc, #416]	; (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	429a      	cmp	r2, r3
 8004254:	d90c      	bls.n	8004270 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004256:	4b65      	ldr	r3, [pc, #404]	; (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800425e:	4b63      	ldr	r3, [pc, #396]	; (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d001      	beq.n	8004270 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e0b8      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d020      	beq.n	80042be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d005      	beq.n	8004294 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004288:	4b59      	ldr	r3, [pc, #356]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	4a58      	ldr	r2, [pc, #352]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004292:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b00      	cmp	r3, #0
 800429e:	d005      	beq.n	80042ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042a0:	4b53      	ldr	r3, [pc, #332]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	4a52      	ldr	r2, [pc, #328]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042ac:	4b50      	ldr	r3, [pc, #320]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	494d      	ldr	r1, [pc, #308]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d044      	beq.n	8004354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d107      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d2:	4b47      	ldr	r3, [pc, #284]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d119      	bne.n	8004312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e07f      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d003      	beq.n	80042f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ee:	2b03      	cmp	r3, #3
 80042f0:	d107      	bne.n	8004302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f2:	4b3f      	ldr	r3, [pc, #252]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d109      	bne.n	8004312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e06f      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004302:	4b3b      	ldr	r3, [pc, #236]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e067      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004312:	4b37      	ldr	r3, [pc, #220]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f023 0203 	bic.w	r2, r3, #3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	4934      	ldr	r1, [pc, #208]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004320:	4313      	orrs	r3, r2
 8004322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004324:	f7fc fee0 	bl	80010e8 <HAL_GetTick>
 8004328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432a:	e00a      	b.n	8004342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800432c:	f7fc fedc 	bl	80010e8 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	f241 3288 	movw	r2, #5000	; 0x1388
 800433a:	4293      	cmp	r3, r2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e04f      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004342:	4b2b      	ldr	r3, [pc, #172]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 020c 	and.w	r2, r3, #12
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	429a      	cmp	r2, r3
 8004352:	d1eb      	bne.n	800432c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004354:	4b25      	ldr	r3, [pc, #148]	; (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d20c      	bcs.n	800437c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004362:	4b22      	ldr	r3, [pc, #136]	; (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800436a:	4b20      	ldr	r3, [pc, #128]	; (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d001      	beq.n	800437c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e032      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b00      	cmp	r3, #0
 8004386:	d008      	beq.n	800439a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004388:	4b19      	ldr	r3, [pc, #100]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	4916      	ldr	r1, [pc, #88]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	4313      	orrs	r3, r2
 8004398:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d009      	beq.n	80043ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043a6:	4b12      	ldr	r3, [pc, #72]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	490e      	ldr	r1, [pc, #56]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043ba:	f000 f821 	bl	8004400 <HAL_RCC_GetSysClockFreq>
 80043be:	4602      	mov	r2, r0
 80043c0:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	091b      	lsrs	r3, r3, #4
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	490a      	ldr	r1, [pc, #40]	; (80043f4 <HAL_RCC_ClockConfig+0x1c0>)
 80043cc:	5ccb      	ldrb	r3, [r1, r3]
 80043ce:	fa22 f303 	lsr.w	r3, r2, r3
 80043d2:	4a09      	ldr	r2, [pc, #36]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 80043d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043d6:	4b09      	ldr	r3, [pc, #36]	; (80043fc <HAL_RCC_ClockConfig+0x1c8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fc fd74 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40023c00 	.word	0x40023c00
 80043f0:	40023800 	.word	0x40023800
 80043f4:	08008760 	.word	0x08008760
 80043f8:	20000018 	.word	0x20000018
 80043fc:	2000001c 	.word	0x2000001c

08004400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004404:	b094      	sub	sp, #80	; 0x50
 8004406:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	647b      	str	r3, [r7, #68]	; 0x44
 800440c:	2300      	movs	r3, #0
 800440e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004410:	2300      	movs	r3, #0
 8004412:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004418:	4b79      	ldr	r3, [pc, #484]	; (8004600 <HAL_RCC_GetSysClockFreq+0x200>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 030c 	and.w	r3, r3, #12
 8004420:	2b08      	cmp	r3, #8
 8004422:	d00d      	beq.n	8004440 <HAL_RCC_GetSysClockFreq+0x40>
 8004424:	2b08      	cmp	r3, #8
 8004426:	f200 80e1 	bhi.w	80045ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <HAL_RCC_GetSysClockFreq+0x34>
 800442e:	2b04      	cmp	r3, #4
 8004430:	d003      	beq.n	800443a <HAL_RCC_GetSysClockFreq+0x3a>
 8004432:	e0db      	b.n	80045ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004434:	4b73      	ldr	r3, [pc, #460]	; (8004604 <HAL_RCC_GetSysClockFreq+0x204>)
 8004436:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004438:	e0db      	b.n	80045f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800443a:	4b73      	ldr	r3, [pc, #460]	; (8004608 <HAL_RCC_GetSysClockFreq+0x208>)
 800443c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800443e:	e0d8      	b.n	80045f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004440:	4b6f      	ldr	r3, [pc, #444]	; (8004600 <HAL_RCC_GetSysClockFreq+0x200>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004448:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800444a:	4b6d      	ldr	r3, [pc, #436]	; (8004600 <HAL_RCC_GetSysClockFreq+0x200>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d063      	beq.n	800451e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004456:	4b6a      	ldr	r3, [pc, #424]	; (8004600 <HAL_RCC_GetSysClockFreq+0x200>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	099b      	lsrs	r3, r3, #6
 800445c:	2200      	movs	r2, #0
 800445e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004460:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004468:	633b      	str	r3, [r7, #48]	; 0x30
 800446a:	2300      	movs	r3, #0
 800446c:	637b      	str	r3, [r7, #52]	; 0x34
 800446e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004472:	4622      	mov	r2, r4
 8004474:	462b      	mov	r3, r5
 8004476:	f04f 0000 	mov.w	r0, #0
 800447a:	f04f 0100 	mov.w	r1, #0
 800447e:	0159      	lsls	r1, r3, #5
 8004480:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004484:	0150      	lsls	r0, r2, #5
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	4621      	mov	r1, r4
 800448c:	1a51      	subs	r1, r2, r1
 800448e:	6139      	str	r1, [r7, #16]
 8004490:	4629      	mov	r1, r5
 8004492:	eb63 0301 	sbc.w	r3, r3, r1
 8004496:	617b      	str	r3, [r7, #20]
 8004498:	f04f 0200 	mov.w	r2, #0
 800449c:	f04f 0300 	mov.w	r3, #0
 80044a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044a4:	4659      	mov	r1, fp
 80044a6:	018b      	lsls	r3, r1, #6
 80044a8:	4651      	mov	r1, sl
 80044aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044ae:	4651      	mov	r1, sl
 80044b0:	018a      	lsls	r2, r1, #6
 80044b2:	4651      	mov	r1, sl
 80044b4:	ebb2 0801 	subs.w	r8, r2, r1
 80044b8:	4659      	mov	r1, fp
 80044ba:	eb63 0901 	sbc.w	r9, r3, r1
 80044be:	f04f 0200 	mov.w	r2, #0
 80044c2:	f04f 0300 	mov.w	r3, #0
 80044c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044d2:	4690      	mov	r8, r2
 80044d4:	4699      	mov	r9, r3
 80044d6:	4623      	mov	r3, r4
 80044d8:	eb18 0303 	adds.w	r3, r8, r3
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	462b      	mov	r3, r5
 80044e0:	eb49 0303 	adc.w	r3, r9, r3
 80044e4:	60fb      	str	r3, [r7, #12]
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044f2:	4629      	mov	r1, r5
 80044f4:	024b      	lsls	r3, r1, #9
 80044f6:	4621      	mov	r1, r4
 80044f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044fc:	4621      	mov	r1, r4
 80044fe:	024a      	lsls	r2, r1, #9
 8004500:	4610      	mov	r0, r2
 8004502:	4619      	mov	r1, r3
 8004504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004506:	2200      	movs	r2, #0
 8004508:	62bb      	str	r3, [r7, #40]	; 0x28
 800450a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800450c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004510:	f7fb fe5e 	bl	80001d0 <__aeabi_uldivmod>
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	4613      	mov	r3, r2
 800451a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800451c:	e058      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800451e:	4b38      	ldr	r3, [pc, #224]	; (8004600 <HAL_RCC_GetSysClockFreq+0x200>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	099b      	lsrs	r3, r3, #6
 8004524:	2200      	movs	r2, #0
 8004526:	4618      	mov	r0, r3
 8004528:	4611      	mov	r1, r2
 800452a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800452e:	623b      	str	r3, [r7, #32]
 8004530:	2300      	movs	r3, #0
 8004532:	627b      	str	r3, [r7, #36]	; 0x24
 8004534:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004538:	4642      	mov	r2, r8
 800453a:	464b      	mov	r3, r9
 800453c:	f04f 0000 	mov.w	r0, #0
 8004540:	f04f 0100 	mov.w	r1, #0
 8004544:	0159      	lsls	r1, r3, #5
 8004546:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800454a:	0150      	lsls	r0, r2, #5
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4641      	mov	r1, r8
 8004552:	ebb2 0a01 	subs.w	sl, r2, r1
 8004556:	4649      	mov	r1, r9
 8004558:	eb63 0b01 	sbc.w	fp, r3, r1
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	f04f 0300 	mov.w	r3, #0
 8004564:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004568:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800456c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004570:	ebb2 040a 	subs.w	r4, r2, sl
 8004574:	eb63 050b 	sbc.w	r5, r3, fp
 8004578:	f04f 0200 	mov.w	r2, #0
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	00eb      	lsls	r3, r5, #3
 8004582:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004586:	00e2      	lsls	r2, r4, #3
 8004588:	4614      	mov	r4, r2
 800458a:	461d      	mov	r5, r3
 800458c:	4643      	mov	r3, r8
 800458e:	18e3      	adds	r3, r4, r3
 8004590:	603b      	str	r3, [r7, #0]
 8004592:	464b      	mov	r3, r9
 8004594:	eb45 0303 	adc.w	r3, r5, r3
 8004598:	607b      	str	r3, [r7, #4]
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045a6:	4629      	mov	r1, r5
 80045a8:	028b      	lsls	r3, r1, #10
 80045aa:	4621      	mov	r1, r4
 80045ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045b0:	4621      	mov	r1, r4
 80045b2:	028a      	lsls	r2, r1, #10
 80045b4:	4610      	mov	r0, r2
 80045b6:	4619      	mov	r1, r3
 80045b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045ba:	2200      	movs	r2, #0
 80045bc:	61bb      	str	r3, [r7, #24]
 80045be:	61fa      	str	r2, [r7, #28]
 80045c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045c4:	f7fb fe04 	bl	80001d0 <__aeabi_uldivmod>
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	4613      	mov	r3, r2
 80045ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <HAL_RCC_GetSysClockFreq+0x200>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	0c1b      	lsrs	r3, r3, #16
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	3301      	adds	r3, #1
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80045e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045ea:	e002      	b.n	80045f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045ec:	4b05      	ldr	r3, [pc, #20]	; (8004604 <HAL_RCC_GetSysClockFreq+0x204>)
 80045ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3750      	adds	r7, #80	; 0x50
 80045f8:	46bd      	mov	sp, r7
 80045fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045fe:	bf00      	nop
 8004600:	40023800 	.word	0x40023800
 8004604:	00f42400 	.word	0x00f42400
 8004608:	007a1200 	.word	0x007a1200

0800460c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004610:	4b03      	ldr	r3, [pc, #12]	; (8004620 <HAL_RCC_GetHCLKFreq+0x14>)
 8004612:	681b      	ldr	r3, [r3, #0]
}
 8004614:	4618      	mov	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	20000018 	.word	0x20000018

08004624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004628:	f7ff fff0 	bl	800460c <HAL_RCC_GetHCLKFreq>
 800462c:	4602      	mov	r2, r0
 800462e:	4b05      	ldr	r3, [pc, #20]	; (8004644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	0a9b      	lsrs	r3, r3, #10
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	4903      	ldr	r1, [pc, #12]	; (8004648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800463a:	5ccb      	ldrb	r3, [r1, r3]
 800463c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004640:	4618      	mov	r0, r3
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40023800 	.word	0x40023800
 8004648:	08008770 	.word	0x08008770

0800464c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004650:	f7ff ffdc 	bl	800460c <HAL_RCC_GetHCLKFreq>
 8004654:	4602      	mov	r2, r0
 8004656:	4b05      	ldr	r3, [pc, #20]	; (800466c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	0b5b      	lsrs	r3, r3, #13
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	4903      	ldr	r1, [pc, #12]	; (8004670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004662:	5ccb      	ldrb	r3, [r1, r3]
 8004664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004668:	4618      	mov	r0, r3
 800466a:	bd80      	pop	{r7, pc}
 800466c:	40023800 	.word	0x40023800
 8004670:	08008770 	.word	0x08008770

08004674 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	220f      	movs	r2, #15
 8004682:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004684:	4b12      	ldr	r3, [pc, #72]	; (80046d0 <HAL_RCC_GetClockConfig+0x5c>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 0203 	and.w	r2, r3, #3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004690:	4b0f      	ldr	r3, [pc, #60]	; (80046d0 <HAL_RCC_GetClockConfig+0x5c>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800469c:	4b0c      	ldr	r3, [pc, #48]	; (80046d0 <HAL_RCC_GetClockConfig+0x5c>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80046a8:	4b09      	ldr	r3, [pc, #36]	; (80046d0 <HAL_RCC_GetClockConfig+0x5c>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	08db      	lsrs	r3, r3, #3
 80046ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046b6:	4b07      	ldr	r3, [pc, #28]	; (80046d4 <HAL_RCC_GetClockConfig+0x60>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0207 	and.w	r2, r3, #7
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	601a      	str	r2, [r3, #0]
}
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	40023800 	.word	0x40023800
 80046d4:	40023c00 	.word	0x40023c00

080046d8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d105      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d035      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004700:	4b62      	ldr	r3, [pc, #392]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004706:	f7fc fcef 	bl	80010e8 <HAL_GetTick>
 800470a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800470c:	e008      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800470e:	f7fc fceb 	bl	80010e8 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d901      	bls.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e0b0      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004720:	4b5b      	ldr	r3, [pc, #364]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1f0      	bne.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	019a      	lsls	r2, r3, #6
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	071b      	lsls	r3, r3, #28
 8004738:	4955      	ldr	r1, [pc, #340]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004740:	4b52      	ldr	r3, [pc, #328]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004742:	2201      	movs	r2, #1
 8004744:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004746:	f7fc fccf 	bl	80010e8 <HAL_GetTick>
 800474a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800474c:	e008      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800474e:	f7fc fccb 	bl	80010e8 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d901      	bls.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e090      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004760:	4b4b      	ldr	r3, [pc, #300]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0f0      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 8083 	beq.w	8004880 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	4b44      	ldr	r3, [pc, #272]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	4a43      	ldr	r2, [pc, #268]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004788:	6413      	str	r3, [r2, #64]	; 0x40
 800478a:	4b41      	ldr	r3, [pc, #260]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004796:	4b3f      	ldr	r3, [pc, #252]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a3e      	ldr	r2, [pc, #248]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800479c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047a2:	f7fc fca1 	bl	80010e8 <HAL_GetTick>
 80047a6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047a8:	e008      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80047aa:	f7fc fc9d 	bl	80010e8 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d901      	bls.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e062      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047bc:	4b35      	ldr	r3, [pc, #212]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0f0      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047c8:	4b31      	ldr	r3, [pc, #196]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d02f      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d028      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047e6:	4b2a      	ldr	r3, [pc, #168]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047f0:	4b29      	ldr	r3, [pc, #164]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047f6:	4b28      	ldr	r3, [pc, #160]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80047fc:	4a24      	ldr	r2, [pc, #144]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004802:	4b23      	ldr	r3, [pc, #140]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b01      	cmp	r3, #1
 800480c:	d114      	bne.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800480e:	f7fc fc6b 	bl	80010e8 <HAL_GetTick>
 8004812:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004814:	e00a      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004816:	f7fc fc67 	bl	80010e8 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	f241 3288 	movw	r2, #5000	; 0x1388
 8004824:	4293      	cmp	r3, r2
 8004826:	d901      	bls.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e02a      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800482c:	4b18      	ldr	r3, [pc, #96]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800482e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0ee      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004840:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004844:	d10d      	bne.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004846:	4b12      	ldr	r3, [pc, #72]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800485a:	490d      	ldr	r1, [pc, #52]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800485c:	4313      	orrs	r3, r2
 800485e:	608b      	str	r3, [r1, #8]
 8004860:	e005      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004862:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	4a0a      	ldr	r2, [pc, #40]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004868:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800486c:	6093      	str	r3, [r2, #8]
 800486e:	4b08      	ldr	r3, [pc, #32]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004870:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800487a:	4905      	ldr	r1, [pc, #20]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800487c:	4313      	orrs	r3, r2
 800487e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	42470068 	.word	0x42470068
 8004890:	40023800 	.word	0x40023800
 8004894:	40007000 	.word	0x40007000
 8004898:	42470e40 	.word	0x42470e40

0800489c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d13f      	bne.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80048ba:	4b24      	ldr	r3, [pc, #144]	; (800494c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d006      	beq.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048d0:	d12f      	bne.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80048d2:	4b1f      	ldr	r3, [pc, #124]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80048d4:	617b      	str	r3, [r7, #20]
          break;
 80048d6:	e02f      	b.n	8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80048d8:	4b1c      	ldr	r3, [pc, #112]	; (800494c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048e4:	d108      	bne.n	80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048e6:	4b19      	ldr	r3, [pc, #100]	; (800494c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048ee:	4a19      	ldr	r2, [pc, #100]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80048f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f4:	613b      	str	r3, [r7, #16]
 80048f6:	e007      	b.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048f8:	4b14      	ldr	r3, [pc, #80]	; (800494c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004900:	4a15      	ldr	r2, [pc, #84]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004902:	fbb2 f3f3 	udiv	r3, r2, r3
 8004906:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004908:	4b10      	ldr	r3, [pc, #64]	; (800494c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800490a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800490e:	099b      	lsrs	r3, r3, #6
 8004910:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	fb02 f303 	mul.w	r3, r2, r3
 800491a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800491c:	4b0b      	ldr	r3, [pc, #44]	; (800494c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800491e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004922:	0f1b      	lsrs	r3, r3, #28
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	fbb2 f3f3 	udiv	r3, r2, r3
 800492e:	617b      	str	r3, [r7, #20]
          break;
 8004930:	e002      	b.n	8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	617b      	str	r3, [r7, #20]
          break;
 8004936:	bf00      	nop
        }
      }
      break;
 8004938:	e000      	b.n	800493c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 800493a:	bf00      	nop
    }
  }
  return frequency;
 800493c:	697b      	ldr	r3, [r7, #20]
}
 800493e:	4618      	mov	r0, r3
 8004940:	371c      	adds	r7, #28
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40023800 	.word	0x40023800
 8004950:	00bb8000 	.word	0x00bb8000
 8004954:	007a1200 	.word	0x007a1200
 8004958:	00f42400 	.word	0x00f42400

0800495c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e07b      	b.n	8004a66 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	2b00      	cmp	r3, #0
 8004974:	d108      	bne.n	8004988 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800497e:	d009      	beq.n	8004994 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	61da      	str	r2, [r3, #28]
 8004986:	e005      	b.n	8004994 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d106      	bne.n	80049b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7fc fa20 	bl	8000df4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2202      	movs	r2, #2
 80049b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	431a      	orrs	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a04:	431a      	orrs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a18:	ea42 0103 	orr.w	r1, r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a20:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	0c1b      	lsrs	r3, r3, #16
 8004a32:	f003 0104 	and.w	r1, r3, #4
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	f003 0210 	and.w	r2, r3, #16
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69da      	ldr	r2, [r3, #28]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b082      	sub	sp, #8
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e041      	b.n	8004b04 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d106      	bne.n	8004a9a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7fc f9f5 	bl	8000e84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4610      	mov	r0, r2
 8004aae:	f000 f9b5 	bl	8004e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d001      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e04e      	b.n	8004bc2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0201 	orr.w	r2, r2, #1
 8004b3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a23      	ldr	r2, [pc, #140]	; (8004bd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d022      	beq.n	8004b8c <HAL_TIM_Base_Start_IT+0x80>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b4e:	d01d      	beq.n	8004b8c <HAL_TIM_Base_Start_IT+0x80>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a1f      	ldr	r2, [pc, #124]	; (8004bd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d018      	beq.n	8004b8c <HAL_TIM_Base_Start_IT+0x80>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a1e      	ldr	r2, [pc, #120]	; (8004bd8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d013      	beq.n	8004b8c <HAL_TIM_Base_Start_IT+0x80>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a1c      	ldr	r2, [pc, #112]	; (8004bdc <HAL_TIM_Base_Start_IT+0xd0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d00e      	beq.n	8004b8c <HAL_TIM_Base_Start_IT+0x80>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a1b      	ldr	r2, [pc, #108]	; (8004be0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d009      	beq.n	8004b8c <HAL_TIM_Base_Start_IT+0x80>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a19      	ldr	r2, [pc, #100]	; (8004be4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d004      	beq.n	8004b8c <HAL_TIM_Base_Start_IT+0x80>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a18      	ldr	r2, [pc, #96]	; (8004be8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d111      	bne.n	8004bb0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 0307 	and.w	r3, r3, #7
 8004b96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b06      	cmp	r3, #6
 8004b9c:	d010      	beq.n	8004bc0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f042 0201 	orr.w	r2, r2, #1
 8004bac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bae:	e007      	b.n	8004bc0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	40010000 	.word	0x40010000
 8004bd4:	40000400 	.word	0x40000400
 8004bd8:	40000800 	.word	0x40000800
 8004bdc:	40000c00 	.word	0x40000c00
 8004be0:	40010400 	.word	0x40010400
 8004be4:	40014000 	.word	0x40014000
 8004be8:	40001800 	.word	0x40001800

08004bec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d020      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d01b      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0202 	mvn.w	r2, #2
 8004c20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f8d2 	bl	8004de0 <HAL_TIM_IC_CaptureCallback>
 8004c3c:	e005      	b.n	8004c4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f8c4 	bl	8004dcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f8d5 	bl	8004df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f003 0304 	and.w	r3, r3, #4
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d020      	beq.n	8004c9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d01b      	beq.n	8004c9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0204 	mvn.w	r2, #4
 8004c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2202      	movs	r2, #2
 8004c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f8ac 	bl	8004de0 <HAL_TIM_IC_CaptureCallback>
 8004c88:	e005      	b.n	8004c96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f89e 	bl	8004dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f8af 	bl	8004df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d020      	beq.n	8004ce8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f003 0308 	and.w	r3, r3, #8
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d01b      	beq.n	8004ce8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f06f 0208 	mvn.w	r2, #8
 8004cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2204      	movs	r2, #4
 8004cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f886 	bl	8004de0 <HAL_TIM_IC_CaptureCallback>
 8004cd4:	e005      	b.n	8004ce2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f878 	bl	8004dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f889 	bl	8004df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f003 0310 	and.w	r3, r3, #16
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d020      	beq.n	8004d34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f003 0310 	and.w	r3, r3, #16
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d01b      	beq.n	8004d34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f06f 0210 	mvn.w	r2, #16
 8004d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2208      	movs	r2, #8
 8004d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f860 	bl	8004de0 <HAL_TIM_IC_CaptureCallback>
 8004d20:	e005      	b.n	8004d2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f852 	bl	8004dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f863 	bl	8004df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00c      	beq.n	8004d58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d007      	beq.n	8004d58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f06f 0201 	mvn.w	r2, #1
 8004d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7fb ff42 	bl	8000bdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00c      	beq.n	8004d7c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d007      	beq.n	8004d7c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f906 	bl	8004f88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00c      	beq.n	8004da0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d007      	beq.n	8004da0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f834 	bl	8004e08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	f003 0320 	and.w	r3, r3, #32
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00c      	beq.n	8004dc4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f003 0320 	and.w	r3, r3, #32
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d007      	beq.n	8004dc4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f06f 0220 	mvn.w	r2, #32
 8004dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f8d8 	bl	8004f74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dc4:	bf00      	nop
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a46      	ldr	r2, [pc, #280]	; (8004f48 <TIM_Base_SetConfig+0x12c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d013      	beq.n	8004e5c <TIM_Base_SetConfig+0x40>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3a:	d00f      	beq.n	8004e5c <TIM_Base_SetConfig+0x40>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a43      	ldr	r2, [pc, #268]	; (8004f4c <TIM_Base_SetConfig+0x130>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d00b      	beq.n	8004e5c <TIM_Base_SetConfig+0x40>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a42      	ldr	r2, [pc, #264]	; (8004f50 <TIM_Base_SetConfig+0x134>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d007      	beq.n	8004e5c <TIM_Base_SetConfig+0x40>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a41      	ldr	r2, [pc, #260]	; (8004f54 <TIM_Base_SetConfig+0x138>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d003      	beq.n	8004e5c <TIM_Base_SetConfig+0x40>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a40      	ldr	r2, [pc, #256]	; (8004f58 <TIM_Base_SetConfig+0x13c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d108      	bne.n	8004e6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a35      	ldr	r2, [pc, #212]	; (8004f48 <TIM_Base_SetConfig+0x12c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d02b      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7c:	d027      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a32      	ldr	r2, [pc, #200]	; (8004f4c <TIM_Base_SetConfig+0x130>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d023      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a31      	ldr	r2, [pc, #196]	; (8004f50 <TIM_Base_SetConfig+0x134>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d01f      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a30      	ldr	r2, [pc, #192]	; (8004f54 <TIM_Base_SetConfig+0x138>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d01b      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a2f      	ldr	r2, [pc, #188]	; (8004f58 <TIM_Base_SetConfig+0x13c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d017      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a2e      	ldr	r2, [pc, #184]	; (8004f5c <TIM_Base_SetConfig+0x140>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d013      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a2d      	ldr	r2, [pc, #180]	; (8004f60 <TIM_Base_SetConfig+0x144>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00f      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a2c      	ldr	r2, [pc, #176]	; (8004f64 <TIM_Base_SetConfig+0x148>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d00b      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a2b      	ldr	r2, [pc, #172]	; (8004f68 <TIM_Base_SetConfig+0x14c>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d007      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a2a      	ldr	r2, [pc, #168]	; (8004f6c <TIM_Base_SetConfig+0x150>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d003      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a29      	ldr	r2, [pc, #164]	; (8004f70 <TIM_Base_SetConfig+0x154>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d108      	bne.n	8004ee0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a10      	ldr	r2, [pc, #64]	; (8004f48 <TIM_Base_SetConfig+0x12c>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d003      	beq.n	8004f14 <TIM_Base_SetConfig+0xf8>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a12      	ldr	r2, [pc, #72]	; (8004f58 <TIM_Base_SetConfig+0x13c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d103      	bne.n	8004f1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d105      	bne.n	8004f3a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f023 0201 	bic.w	r2, r3, #1
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	611a      	str	r2, [r3, #16]
  }
}
 8004f3a:	bf00      	nop
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40010000 	.word	0x40010000
 8004f4c:	40000400 	.word	0x40000400
 8004f50:	40000800 	.word	0x40000800
 8004f54:	40000c00 	.word	0x40000c00
 8004f58:	40010400 	.word	0x40010400
 8004f5c:	40014000 	.word	0x40014000
 8004f60:	40014400 	.word	0x40014400
 8004f64:	40014800 	.word	0x40014800
 8004f68:	40001800 	.word	0x40001800
 8004f6c:	40001c00 	.word	0x40001c00
 8004f70:	40002000 	.word	0x40002000

08004f74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f043 0201 	orr.w	r2, r3, #1
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f023 0201 	bic.w	r2, r3, #1
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004ffa:	d901      	bls.n	8005000 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e01b      	b.n	8005038 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	2b00      	cmp	r3, #0
 8005006:	daf2      	bge.n	8004fee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	019b      	lsls	r3, r3, #6
 8005010:	f043 0220 	orr.w	r2, r3, #32
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	3301      	adds	r3, #1
 800501c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005024:	d901      	bls.n	800502a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e006      	b.n	8005038 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b20      	cmp	r3, #32
 8005034:	d0f0      	beq.n	8005018 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800504c:	2300      	movs	r3, #0
 800504e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	3301      	adds	r3, #1
 8005054:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800505c:	d901      	bls.n	8005062 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e018      	b.n	8005094 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	daf2      	bge.n	8005050 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800506a:	2300      	movs	r3, #0
 800506c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2210      	movs	r2, #16
 8005072:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	3301      	adds	r3, #1
 8005078:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005080:	d901      	bls.n	8005086 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e006      	b.n	8005094 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f003 0310 	and.w	r3, r3, #16
 800508e:	2b10      	cmp	r3, #16
 8005090:	d0f0      	beq.n	8005074 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b08b      	sub	sp, #44	; 0x2c
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	4613      	mov	r3, r2
 80050ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80050b6:	88fb      	ldrh	r3, [r7, #6]
 80050b8:	089b      	lsrs	r3, r3, #2
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80050be:	88fb      	ldrh	r3, [r7, #6]
 80050c0:	f003 0303 	and.w	r3, r3, #3
 80050c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80050c6:	2300      	movs	r3, #0
 80050c8:	623b      	str	r3, [r7, #32]
 80050ca:	e014      	b.n	80050f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	3301      	adds	r3, #1
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	3301      	adds	r3, #1
 80050e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	3301      	adds	r3, #1
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	3301      	adds	r3, #1
 80050ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	3301      	adds	r3, #1
 80050f4:	623b      	str	r3, [r7, #32]
 80050f6:	6a3a      	ldr	r2, [r7, #32]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d3e6      	bcc.n	80050cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80050fe:	8bfb      	ldrh	r3, [r7, #30]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d01e      	beq.n	8005142 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800510e:	461a      	mov	r2, r3
 8005110:	f107 0310 	add.w	r3, r7, #16
 8005114:	6812      	ldr	r2, [r2, #0]
 8005116:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	b2db      	uxtb	r3, r3
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	fa22 f303 	lsr.w	r3, r2, r3
 8005124:	b2da      	uxtb	r2, r3
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	701a      	strb	r2, [r3, #0]
      i++;
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	3301      	adds	r3, #1
 800512e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	3301      	adds	r3, #1
 8005134:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005136:	8bfb      	ldrh	r3, [r7, #30]
 8005138:	3b01      	subs	r3, #1
 800513a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800513c:	8bfb      	ldrh	r3, [r7, #30]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1ea      	bne.n	8005118 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005144:	4618      	mov	r0, r3
 8005146:	372c      	adds	r7, #44	; 0x2c
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4013      	ands	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005168:	68fb      	ldr	r3, [r7, #12]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005176:	b480      	push	{r7}
 8005178:	b085      	sub	sp, #20
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	460b      	mov	r3, r1
 8005180:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005186:	78fb      	ldrb	r3, [r7, #3]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4413      	add	r3, r2
 800518e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005196:	78fb      	ldrb	r3, [r7, #3]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4413      	add	r3, r2
 800519e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	4013      	ands	r3, r2
 80051a8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80051aa:	68bb      	ldr	r3, [r7, #8]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	f003 0301 	and.w	r3, r3, #1
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	460b      	mov	r3, r1
 80051de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051f2:	f023 0303 	bic.w	r3, r3, #3
 80051f6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	78fb      	ldrb	r3, [r7, #3]
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	68f9      	ldr	r1, [r7, #12]
 8005208:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800520c:	4313      	orrs	r3, r2
 800520e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005210:	78fb      	ldrb	r3, [r7, #3]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d107      	bne.n	8005226 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800521c:	461a      	mov	r2, r3
 800521e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005222:	6053      	str	r3, [r2, #4]
 8005224:	e00c      	b.n	8005240 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005226:	78fb      	ldrb	r3, [r7, #3]
 8005228:	2b02      	cmp	r3, #2
 800522a:	d107      	bne.n	800523c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005232:	461a      	mov	r2, r3
 8005234:	f241 7370 	movw	r3, #6000	; 0x1770
 8005238:	6053      	str	r3, [r2, #4]
 800523a:	e001      	b.n	8005240 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e000      	b.n	8005242 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800524e:	b480      	push	{r7}
 8005250:	b085      	sub	sp, #20
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	b29b      	uxth	r3, r3
}
 8005264:	4618      	mov	r0, r3
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005270:	b480      	push	{r7}
 8005272:	b089      	sub	sp, #36	; 0x24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	460b      	mov	r3, r1
 800527a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005280:	78fb      	ldrb	r3, [r7, #3]
 8005282:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	4413      	add	r3, r2
 8005290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	0c9b      	lsrs	r3, r3, #18
 8005298:	f003 0303 	and.w	r3, r3, #3
 800529c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	0fdb      	lsrs	r3, r3, #31
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	0fdb      	lsrs	r3, r3, #31
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 0320 	and.w	r3, r3, #32
 80052d2:	2b20      	cmp	r3, #32
 80052d4:	d10d      	bne.n	80052f2 <USB_HC_Halt+0x82>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10a      	bne.n	80052f2 <USB_HC_Halt+0x82>
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d005      	beq.n	80052ee <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d002      	beq.n	80052ee <USB_HC_Halt+0x7e>
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	d101      	bne.n	80052f2 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	e0d8      	b.n	80054a4 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <USB_HC_Halt+0x8e>
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d173      	bne.n	80053e6 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	4413      	add	r3, r2
 8005306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	0151      	lsls	r1, r2, #5
 8005310:	69fa      	ldr	r2, [r7, #28]
 8005312:	440a      	add	r2, r1
 8005314:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005318:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800531c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	2b00      	cmp	r3, #0
 8005328:	d14a      	bne.n	80053c0 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d133      	bne.n	800539e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	015a      	lsls	r2, r3, #5
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	4413      	add	r3, r2
 800533e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	0151      	lsls	r1, r2, #5
 8005348:	69fa      	ldr	r2, [r7, #28]
 800534a:	440a      	add	r2, r1
 800534c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005350:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005354:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	4413      	add	r3, r2
 800535e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	0151      	lsls	r1, r2, #5
 8005368:	69fa      	ldr	r2, [r7, #28]
 800536a:	440a      	add	r2, r1
 800536c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005370:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005374:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	3301      	adds	r3, #1
 800537a:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005382:	d82e      	bhi.n	80053e2 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	4413      	add	r3, r2
 800538c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800539a:	d0ec      	beq.n	8005376 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800539c:	e081      	b.n	80054a2 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	0151      	lsls	r1, r2, #5
 80053b0:	69fa      	ldr	r2, [r7, #28]
 80053b2:	440a      	add	r2, r1
 80053b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053bc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80053be:	e070      	b.n	80054a2 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	0151      	lsls	r1, r2, #5
 80053d2:	69fa      	ldr	r2, [r7, #28]
 80053d4:	440a      	add	r2, r1
 80053d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053de:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80053e0:	e05f      	b.n	80054a2 <USB_HC_Halt+0x232>
            break;
 80053e2:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80053e4:	e05d      	b.n	80054a2 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	0151      	lsls	r1, r2, #5
 80053f8:	69fa      	ldr	r2, [r7, #28]
 80053fa:	440a      	add	r2, r1
 80053fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005400:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005404:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d133      	bne.n	800547e <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	4413      	add	r3, r2
 800541e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	0151      	lsls	r1, r2, #5
 8005428:	69fa      	ldr	r2, [r7, #28]
 800542a:	440a      	add	r2, r1
 800542c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005430:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005434:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	4413      	add	r3, r2
 800543e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	0151      	lsls	r1, r2, #5
 8005448:	69fa      	ldr	r2, [r7, #28]
 800544a:	440a      	add	r2, r1
 800544c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005450:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005454:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	3301      	adds	r3, #1
 800545a:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005462:	d81d      	bhi.n	80054a0 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	4413      	add	r3, r2
 800546c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005476:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800547a:	d0ec      	beq.n	8005456 <USB_HC_Halt+0x1e6>
 800547c:	e011      	b.n	80054a2 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	4413      	add	r3, r2
 8005486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	0151      	lsls	r1, r2, #5
 8005490:	69fa      	ldr	r2, [r7, #28]
 8005492:	440a      	add	r2, r1
 8005494:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005498:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	e000      	b.n	80054a2 <USB_HC_Halt+0x232>
          break;
 80054a0:	bf00      	nop
    }
  }

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3724      	adds	r7, #36	; 0x24
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b088      	sub	sp, #32
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80054b8:	2300      	movs	r3, #0
 80054ba:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7ff fd7a 	bl	8004fbe <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054ca:	2110      	movs	r1, #16
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7ff fd87 	bl	8004fe0 <USB_FlushTxFifo>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7ff fdb1 	bl	8005044 <USB_FlushRxFifo>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80054ec:	2300      	movs	r3, #0
 80054ee:	61bb      	str	r3, [r7, #24]
 80054f0:	e01f      	b.n	8005532 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005508:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005510:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005518:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	4413      	add	r3, r2
 8005522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005526:	461a      	mov	r2, r3
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	3301      	adds	r3, #1
 8005530:	61bb      	str	r3, [r7, #24]
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	2b0f      	cmp	r3, #15
 8005536:	d9dc      	bls.n	80054f2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005538:	2300      	movs	r3, #0
 800553a:	61bb      	str	r3, [r7, #24]
 800553c:	e034      	b.n	80055a8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	4413      	add	r3, r2
 8005546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005554:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800555c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005564:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	4413      	add	r3, r2
 800556e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005572:	461a      	mov	r2, r3
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	3301      	adds	r3, #1
 800557c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005584:	d80c      	bhi.n	80055a0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	4413      	add	r3, r2
 800558e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800559c:	d0ec      	beq.n	8005578 <USB_StopHost+0xc8>
 800559e:	e000      	b.n	80055a2 <USB_StopHost+0xf2>
        break;
 80055a0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	3301      	adds	r3, #1
 80055a6:	61bb      	str	r3, [r7, #24]
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	2b0f      	cmp	r3, #15
 80055ac:	d9c7      	bls.n	800553e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055b4:	461a      	mov	r2, r3
 80055b6:	f04f 33ff 	mov.w	r3, #4294967295
 80055ba:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f04f 32ff 	mov.w	r2, #4294967295
 80055c2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7ff fce9 	bl	8004f9c <USB_EnableGlobalInt>

  return ret;
 80055ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3720      	adds	r7, #32
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80055e2:	1c5a      	adds	r2, r3, #1
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f804 	bl	80055f8 <USBH_HandleSof>
}
 80055f0:	bf00      	nop
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b0b      	cmp	r3, #11
 8005608:	d10a      	bne.n	8005620 <USBH_HandleSof+0x28>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005610:	2b00      	cmp	r3, #0
 8005612:	d005      	beq.n	8005620 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	4798      	blx	r3
  }
}
 8005620:	bf00      	nop
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800564c:	2200      	movs	r2, #0
 800564e:	4619      	mov	r1, r3
 8005650:	f000 f8ae 	bl	80057b0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8005654:	bf00      	nop
}
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800566c:	bf00      	nop
}
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80056ac:	2200      	movs	r2, #0
 80056ae:	4619      	mov	r1, r3
 80056b0:	f000 f87e 	bl	80057b0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b082      	sub	sp, #8
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f002 fed4 	bl	800848c <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	791b      	ldrb	r3, [r3, #4]
 80056e8:	4619      	mov	r1, r3
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f830 	bl	8005750 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	795b      	ldrb	r3, [r3, #5]
 80056f4:	4619      	mov	r1, r3
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f82a 	bl	8005750 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005710:	2200      	movs	r2, #0
 8005712:	4619      	mov	r1, r3
 8005714:	f000 f84c 	bl	80057b0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b082      	sub	sp, #8
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800573e:	2200      	movs	r2, #0
 8005740:	4619      	mov	r1, r3
 8005742:	f000 f835 	bl	80057b0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	460b      	mov	r3, r1
 800575a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800575c:	78fb      	ldrb	r3, [r7, #3]
 800575e:	2b0f      	cmp	r3, #15
 8005760:	d80d      	bhi.n	800577e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8005762:	78fb      	ldrb	r3, [r7, #3]
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	33e0      	adds	r3, #224	; 0xe0
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	78fb      	ldrb	r3, [r7, #3]
 8005770:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8005774:	6879      	ldr	r1, [r7, #4]
 8005776:	33e0      	adds	r3, #224	; 0xe0
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	440b      	add	r3, r1
 800577c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005792:	f3ef 8305 	mrs	r3, IPSR
 8005796:	607b      	str	r3, [r7, #4]
  return(result);
 8005798:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800579a:	2b00      	cmp	r3, #0
 800579c:	bf14      	ite	ne
 800579e:	2301      	movne	r3, #1
 80057a0:	2300      	moveq	r3, #0
 80057a2:	b2db      	uxtb	r3, r3
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80057bc:	2300      	movs	r3, #0
 80057be:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <osMessagePut+0x1e>
    ticks = 1;
 80057ca:	2301      	movs	r3, #1
 80057cc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80057ce:	f7ff ffdd 	bl	800578c <inHandlerMode>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d018      	beq.n	800580a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80057d8:	f107 0210 	add.w	r2, r7, #16
 80057dc:	f107 0108 	add.w	r1, r7, #8
 80057e0:	2300      	movs	r3, #0
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 fac6 	bl	8005d74 <xQueueGenericSendFromISR>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d001      	beq.n	80057f2 <osMessagePut+0x42>
      return osErrorOS;
 80057ee:	23ff      	movs	r3, #255	; 0xff
 80057f0:	e018      	b.n	8005824 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d014      	beq.n	8005822 <osMessagePut+0x72>
 80057f8:	4b0c      	ldr	r3, [pc, #48]	; (800582c <osMessagePut+0x7c>)
 80057fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	e00b      	b.n	8005822 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800580a:	f107 0108 	add.w	r1, r7, #8
 800580e:	2300      	movs	r3, #0
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f000 f9b0 	bl	8005b78 <xQueueGenericSend>
 8005818:	4603      	mov	r3, r0
 800581a:	2b01      	cmp	r3, #1
 800581c:	d001      	beq.n	8005822 <osMessagePut+0x72>
      return osErrorOS;
 800581e:	23ff      	movs	r3, #255	; 0xff
 8005820:	e000      	b.n	8005824 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	e000ed04 	.word	0xe000ed04

08005830 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f103 0208 	add.w	r2, r3, #8
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f04f 32ff 	mov.w	r2, #4294967295
 8005848:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f103 0208 	add.w	r2, r3, #8
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f103 0208 	add.w	r2, r3, #8
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800587e:	bf00      	nop
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800588a:	b480      	push	{r7}
 800588c:	b085      	sub	sp, #20
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
 8005892:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	601a      	str	r2, [r3, #0]
}
 80058c6:	bf00      	nop
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058d2:	b480      	push	{r7}
 80058d4:	b085      	sub	sp, #20
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e8:	d103      	bne.n	80058f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	e00c      	b.n	800590c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	3308      	adds	r3, #8
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	e002      	b.n	8005900 <vListInsert+0x2e>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	60fb      	str	r3, [r7, #12]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	429a      	cmp	r2, r3
 800590a:	d2f6      	bcs.n	80058fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	601a      	str	r2, [r3, #0]
}
 8005938:	bf00      	nop
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	6892      	ldr	r2, [r2, #8]
 800595a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	6852      	ldr	r2, [r2, #4]
 8005964:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	429a      	cmp	r2, r3
 800596e:	d103      	bne.n	8005978 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	1e5a      	subs	r2, r3, #1
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10a      	bne.n	80059c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80059ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b0:	f383 8811 	msr	BASEPRI, r3
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80059be:	bf00      	nop
 80059c0:	e7fe      	b.n	80059c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80059c2:	f002 f9ff 	bl	8007dc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ce:	68f9      	ldr	r1, [r7, #12]
 80059d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80059d2:	fb01 f303 	mul.w	r3, r1, r3
 80059d6:	441a      	add	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f2:	3b01      	subs	r3, #1
 80059f4:	68f9      	ldr	r1, [r7, #12]
 80059f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80059f8:	fb01 f303 	mul.w	r3, r1, r3
 80059fc:	441a      	add	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	22ff      	movs	r2, #255	; 0xff
 8005a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	22ff      	movs	r2, #255	; 0xff
 8005a0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d114      	bne.n	8005a42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d01a      	beq.n	8005a56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	3310      	adds	r3, #16
 8005a24:	4618      	mov	r0, r3
 8005a26:	f001 f9ab 	bl	8006d80 <xTaskRemoveFromEventList>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d012      	beq.n	8005a56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a30:	4b0c      	ldr	r3, [pc, #48]	; (8005a64 <xQueueGenericReset+0xcc>)
 8005a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	e009      	b.n	8005a56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	3310      	adds	r3, #16
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7ff fef2 	bl	8005830 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	3324      	adds	r3, #36	; 0x24
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7ff feed 	bl	8005830 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a56:	f002 f9e5 	bl	8007e24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a5a:	2301      	movs	r3, #1
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	e000ed04 	.word	0xe000ed04

08005a68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08a      	sub	sp, #40	; 0x28
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	4613      	mov	r3, r2
 8005a74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10a      	bne.n	8005a92 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	613b      	str	r3, [r7, #16]
}
 8005a8e:	bf00      	nop
 8005a90:	e7fe      	b.n	8005a90 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	fb02 f303 	mul.w	r3, r2, r3
 8005a9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	3348      	adds	r3, #72	; 0x48
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f002 fab1 	bl	8008008 <pvPortMalloc>
 8005aa6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00d      	beq.n	8005aca <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	3348      	adds	r3, #72	; 0x48
 8005ab6:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ab8:	79fa      	ldrb	r2, [r7, #7]
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	68b9      	ldr	r1, [r7, #8]
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 f805 	bl	8005ad4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005aca:	69bb      	ldr	r3, [r7, #24]
	}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3720      	adds	r7, #32
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d103      	bne.n	8005af0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	e002      	b.n	8005af6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b02:	2101      	movs	r1, #1
 8005b04:	69b8      	ldr	r0, [r7, #24]
 8005b06:	f7ff ff47 	bl	8005998 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b0a:	bf00      	nop
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b082      	sub	sp, #8
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00e      	beq.n	8005b3e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005b32:	2300      	movs	r3, #0
 8005b34:	2200      	movs	r2, #0
 8005b36:	2100      	movs	r1, #0
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f81d 	bl	8005b78 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005b3e:	bf00      	nop
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b086      	sub	sp, #24
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b50:	2301      	movs	r3, #1
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	2300      	movs	r3, #0
 8005b56:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005b58:	79fb      	ldrb	r3, [r7, #7]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	6939      	ldr	r1, [r7, #16]
 8005b5e:	6978      	ldr	r0, [r7, #20]
 8005b60:	f7ff ff82 	bl	8005a68 <xQueueGenericCreate>
 8005b64:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f7ff ffd3 	bl	8005b12 <prvInitialiseMutex>

		return xNewQueue;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
	}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3718      	adds	r7, #24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
	...

08005b78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08e      	sub	sp, #56	; 0x38
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
 8005b84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b86:	2300      	movs	r3, #0
 8005b88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10a      	bne.n	8005baa <xQueueGenericSend+0x32>
	__asm volatile
 8005b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ba6:	bf00      	nop
 8005ba8:	e7fe      	b.n	8005ba8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d103      	bne.n	8005bb8 <xQueueGenericSend+0x40>
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <xQueueGenericSend+0x44>
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e000      	b.n	8005bbe <xQueueGenericSend+0x46>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10a      	bne.n	8005bd8 <xQueueGenericSend+0x60>
	__asm volatile
 8005bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc6:	f383 8811 	msr	BASEPRI, r3
 8005bca:	f3bf 8f6f 	isb	sy
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005bd4:	bf00      	nop
 8005bd6:	e7fe      	b.n	8005bd6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d103      	bne.n	8005be6 <xQueueGenericSend+0x6e>
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d101      	bne.n	8005bea <xQueueGenericSend+0x72>
 8005be6:	2301      	movs	r3, #1
 8005be8:	e000      	b.n	8005bec <xQueueGenericSend+0x74>
 8005bea:	2300      	movs	r3, #0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10a      	bne.n	8005c06 <xQueueGenericSend+0x8e>
	__asm volatile
 8005bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	623b      	str	r3, [r7, #32]
}
 8005c02:	bf00      	nop
 8005c04:	e7fe      	b.n	8005c04 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c06:	f001 fa5d 	bl	80070c4 <xTaskGetSchedulerState>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d102      	bne.n	8005c16 <xQueueGenericSend+0x9e>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <xQueueGenericSend+0xa2>
 8005c16:	2301      	movs	r3, #1
 8005c18:	e000      	b.n	8005c1c <xQueueGenericSend+0xa4>
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10a      	bne.n	8005c36 <xQueueGenericSend+0xbe>
	__asm volatile
 8005c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	61fb      	str	r3, [r7, #28]
}
 8005c32:	bf00      	nop
 8005c34:	e7fe      	b.n	8005c34 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c36:	f002 f8c5 	bl	8007dc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d302      	bcc.n	8005c4c <xQueueGenericSend+0xd4>
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d129      	bne.n	8005ca0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	68b9      	ldr	r1, [r7, #8]
 8005c50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c52:	f000 fb2f 	bl	80062b4 <prvCopyDataToQueue>
 8005c56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d010      	beq.n	8005c82 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c62:	3324      	adds	r3, #36	; 0x24
 8005c64:	4618      	mov	r0, r3
 8005c66:	f001 f88b 	bl	8006d80 <xTaskRemoveFromEventList>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d013      	beq.n	8005c98 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c70:	4b3f      	ldr	r3, [pc, #252]	; (8005d70 <xQueueGenericSend+0x1f8>)
 8005c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	e00a      	b.n	8005c98 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d007      	beq.n	8005c98 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c88:	4b39      	ldr	r3, [pc, #228]	; (8005d70 <xQueueGenericSend+0x1f8>)
 8005c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c98:	f002 f8c4 	bl	8007e24 <vPortExitCritical>
				return pdPASS;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e063      	b.n	8005d68 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d103      	bne.n	8005cae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ca6:	f002 f8bd 	bl	8007e24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005caa:	2300      	movs	r3, #0
 8005cac:	e05c      	b.n	8005d68 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d106      	bne.n	8005cc2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cb4:	f107 0314 	add.w	r3, r7, #20
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f001 f8c3 	bl	8006e44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cc2:	f002 f8af 	bl	8007e24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cc6:	f000 fe37 	bl	8006938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cca:	f002 f87b 	bl	8007dc4 <vPortEnterCritical>
 8005cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cd4:	b25b      	sxtb	r3, r3
 8005cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cda:	d103      	bne.n	8005ce4 <xQueueGenericSend+0x16c>
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cea:	b25b      	sxtb	r3, r3
 8005cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf0:	d103      	bne.n	8005cfa <xQueueGenericSend+0x182>
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cfa:	f002 f893 	bl	8007e24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cfe:	1d3a      	adds	r2, r7, #4
 8005d00:	f107 0314 	add.w	r3, r7, #20
 8005d04:	4611      	mov	r1, r2
 8005d06:	4618      	mov	r0, r3
 8005d08:	f001 f8b2 	bl	8006e70 <xTaskCheckForTimeOut>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d124      	bne.n	8005d5c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d14:	f000 fbc6 	bl	80064a4 <prvIsQueueFull>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d018      	beq.n	8005d50 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	3310      	adds	r3, #16
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	4611      	mov	r1, r2
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 ffda 	bl	8006ce0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005d2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d2e:	f000 fb51 	bl	80063d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005d32:	f000 fe0f 	bl	8006954 <xTaskResumeAll>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f47f af7c 	bne.w	8005c36 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005d3e:	4b0c      	ldr	r3, [pc, #48]	; (8005d70 <xQueueGenericSend+0x1f8>)
 8005d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	e772      	b.n	8005c36 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d52:	f000 fb3f 	bl	80063d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d56:	f000 fdfd 	bl	8006954 <xTaskResumeAll>
 8005d5a:	e76c      	b.n	8005c36 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d5e:	f000 fb39 	bl	80063d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d62:	f000 fdf7 	bl	8006954 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3738      	adds	r7, #56	; 0x38
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	e000ed04 	.word	0xe000ed04

08005d74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b090      	sub	sp, #64	; 0x40
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
 8005d80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10a      	bne.n	8005da2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d9e:	bf00      	nop
 8005da0:	e7fe      	b.n	8005da0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d103      	bne.n	8005db0 <xQueueGenericSendFromISR+0x3c>
 8005da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d101      	bne.n	8005db4 <xQueueGenericSendFromISR+0x40>
 8005db0:	2301      	movs	r3, #1
 8005db2:	e000      	b.n	8005db6 <xQueueGenericSendFromISR+0x42>
 8005db4:	2300      	movs	r3, #0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10a      	bne.n	8005dd0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbe:	f383 8811 	msr	BASEPRI, r3
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005dcc:	bf00      	nop
 8005dce:	e7fe      	b.n	8005dce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d103      	bne.n	8005dde <xQueueGenericSendFromISR+0x6a>
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d101      	bne.n	8005de2 <xQueueGenericSendFromISR+0x6e>
 8005dde:	2301      	movs	r3, #1
 8005de0:	e000      	b.n	8005de4 <xQueueGenericSendFromISR+0x70>
 8005de2:	2300      	movs	r3, #0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10a      	bne.n	8005dfe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	623b      	str	r3, [r7, #32]
}
 8005dfa:	bf00      	nop
 8005dfc:	e7fe      	b.n	8005dfc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005dfe:	f002 f8c3 	bl	8007f88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005e02:	f3ef 8211 	mrs	r2, BASEPRI
 8005e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	61fa      	str	r2, [r7, #28]
 8005e18:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005e1a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e1c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d302      	bcc.n	8005e30 <xQueueGenericSendFromISR+0xbc>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d12f      	bne.n	8005e90 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	68b9      	ldr	r1, [r7, #8]
 8005e44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e46:	f000 fa35 	bl	80062b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e4a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e52:	d112      	bne.n	8005e7a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d016      	beq.n	8005e8a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5e:	3324      	adds	r3, #36	; 0x24
 8005e60:	4618      	mov	r0, r3
 8005e62:	f000 ff8d 	bl	8006d80 <xTaskRemoveFromEventList>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00e      	beq.n	8005e8a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00b      	beq.n	8005e8a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	e007      	b.n	8005e8a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005e7e:	3301      	adds	r3, #1
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	b25a      	sxtb	r2, r3
 8005e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005e8e:	e001      	b.n	8005e94 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e90:	2300      	movs	r3, #0
 8005e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e96:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e9e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3740      	adds	r7, #64	; 0x40
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
	...

08005eac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b08c      	sub	sp, #48	; 0x30
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10a      	bne.n	8005edc <xQueueReceive+0x30>
	__asm volatile
 8005ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eca:	f383 8811 	msr	BASEPRI, r3
 8005ece:	f3bf 8f6f 	isb	sy
 8005ed2:	f3bf 8f4f 	dsb	sy
 8005ed6:	623b      	str	r3, [r7, #32]
}
 8005ed8:	bf00      	nop
 8005eda:	e7fe      	b.n	8005eda <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d103      	bne.n	8005eea <xQueueReceive+0x3e>
 8005ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <xQueueReceive+0x42>
 8005eea:	2301      	movs	r3, #1
 8005eec:	e000      	b.n	8005ef0 <xQueueReceive+0x44>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10a      	bne.n	8005f0a <xQueueReceive+0x5e>
	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	61fb      	str	r3, [r7, #28]
}
 8005f06:	bf00      	nop
 8005f08:	e7fe      	b.n	8005f08 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f0a:	f001 f8db 	bl	80070c4 <xTaskGetSchedulerState>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d102      	bne.n	8005f1a <xQueueReceive+0x6e>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d101      	bne.n	8005f1e <xQueueReceive+0x72>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e000      	b.n	8005f20 <xQueueReceive+0x74>
 8005f1e:	2300      	movs	r3, #0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10a      	bne.n	8005f3a <xQueueReceive+0x8e>
	__asm volatile
 8005f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	61bb      	str	r3, [r7, #24]
}
 8005f36:	bf00      	nop
 8005f38:	e7fe      	b.n	8005f38 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f3a:	f001 ff43 	bl	8007dc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f42:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d01f      	beq.n	8005f8a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f4a:	68b9      	ldr	r1, [r7, #8]
 8005f4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f4e:	f000 fa1b 	bl	8006388 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	1e5a      	subs	r2, r3, #1
 8005f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f58:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00f      	beq.n	8005f82 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f64:	3310      	adds	r3, #16
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 ff0a 	bl	8006d80 <xTaskRemoveFromEventList>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d007      	beq.n	8005f82 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f72:	4b3d      	ldr	r3, [pc, #244]	; (8006068 <xQueueReceive+0x1bc>)
 8005f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f78:	601a      	str	r2, [r3, #0]
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f82:	f001 ff4f 	bl	8007e24 <vPortExitCritical>
				return pdPASS;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e069      	b.n	800605e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d103      	bne.n	8005f98 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f90:	f001 ff48 	bl	8007e24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f94:	2300      	movs	r3, #0
 8005f96:	e062      	b.n	800605e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d106      	bne.n	8005fac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f9e:	f107 0310 	add.w	r3, r7, #16
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 ff4e 	bl	8006e44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fac:	f001 ff3a 	bl	8007e24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fb0:	f000 fcc2 	bl	8006938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fb4:	f001 ff06 	bl	8007dc4 <vPortEnterCritical>
 8005fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fbe:	b25b      	sxtb	r3, r3
 8005fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc4:	d103      	bne.n	8005fce <xQueueReceive+0x122>
 8005fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fd4:	b25b      	sxtb	r3, r3
 8005fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fda:	d103      	bne.n	8005fe4 <xQueueReceive+0x138>
 8005fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fe4:	f001 ff1e 	bl	8007e24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fe8:	1d3a      	adds	r2, r7, #4
 8005fea:	f107 0310 	add.w	r3, r7, #16
 8005fee:	4611      	mov	r1, r2
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f000 ff3d 	bl	8006e70 <xTaskCheckForTimeOut>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d123      	bne.n	8006044 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ffe:	f000 fa3b 	bl	8006478 <prvIsQueueEmpty>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d017      	beq.n	8006038 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600a:	3324      	adds	r3, #36	; 0x24
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	4611      	mov	r1, r2
 8006010:	4618      	mov	r0, r3
 8006012:	f000 fe65 	bl	8006ce0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006018:	f000 f9dc 	bl	80063d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800601c:	f000 fc9a 	bl	8006954 <xTaskResumeAll>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d189      	bne.n	8005f3a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006026:	4b10      	ldr	r3, [pc, #64]	; (8006068 <xQueueReceive+0x1bc>)
 8006028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	e780      	b.n	8005f3a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006038:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800603a:	f000 f9cb 	bl	80063d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800603e:	f000 fc89 	bl	8006954 <xTaskResumeAll>
 8006042:	e77a      	b.n	8005f3a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006046:	f000 f9c5 	bl	80063d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800604a:	f000 fc83 	bl	8006954 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800604e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006050:	f000 fa12 	bl	8006478 <prvIsQueueEmpty>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	f43f af6f 	beq.w	8005f3a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800605c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800605e:	4618      	mov	r0, r3
 8006060:	3730      	adds	r7, #48	; 0x30
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	e000ed04 	.word	0xe000ed04

0800606c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b08e      	sub	sp, #56	; 0x38
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006076:	2300      	movs	r3, #0
 8006078:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800607e:	2300      	movs	r3, #0
 8006080:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10a      	bne.n	800609e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608c:	f383 8811 	msr	BASEPRI, r3
 8006090:	f3bf 8f6f 	isb	sy
 8006094:	f3bf 8f4f 	dsb	sy
 8006098:	623b      	str	r3, [r7, #32]
}
 800609a:	bf00      	nop
 800609c:	e7fe      	b.n	800609c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800609e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00a      	beq.n	80060bc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80060a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060aa:	f383 8811 	msr	BASEPRI, r3
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	61fb      	str	r3, [r7, #28]
}
 80060b8:	bf00      	nop
 80060ba:	e7fe      	b.n	80060ba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060bc:	f001 f802 	bl	80070c4 <xTaskGetSchedulerState>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d102      	bne.n	80060cc <xQueueSemaphoreTake+0x60>
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <xQueueSemaphoreTake+0x64>
 80060cc:	2301      	movs	r3, #1
 80060ce:	e000      	b.n	80060d2 <xQueueSemaphoreTake+0x66>
 80060d0:	2300      	movs	r3, #0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10a      	bne.n	80060ec <xQueueSemaphoreTake+0x80>
	__asm volatile
 80060d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060da:	f383 8811 	msr	BASEPRI, r3
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	61bb      	str	r3, [r7, #24]
}
 80060e8:	bf00      	nop
 80060ea:	e7fe      	b.n	80060ea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060ec:	f001 fe6a 	bl	8007dc4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80060f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d024      	beq.n	8006146 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	1e5a      	subs	r2, r3, #1
 8006100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006102:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d104      	bne.n	8006116 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800610c:	f001 f982 	bl	8007414 <pvTaskIncrementMutexHeldCount>
 8006110:	4602      	mov	r2, r0
 8006112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006114:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00f      	beq.n	800613e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800611e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006120:	3310      	adds	r3, #16
 8006122:	4618      	mov	r0, r3
 8006124:	f000 fe2c 	bl	8006d80 <xTaskRemoveFromEventList>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d007      	beq.n	800613e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800612e:	4b54      	ldr	r3, [pc, #336]	; (8006280 <xQueueSemaphoreTake+0x214>)
 8006130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800613e:	f001 fe71 	bl	8007e24 <vPortExitCritical>
				return pdPASS;
 8006142:	2301      	movs	r3, #1
 8006144:	e097      	b.n	8006276 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d111      	bne.n	8006170 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800614c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	617b      	str	r3, [r7, #20]
}
 8006164:	bf00      	nop
 8006166:	e7fe      	b.n	8006166 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006168:	f001 fe5c 	bl	8007e24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800616c:	2300      	movs	r3, #0
 800616e:	e082      	b.n	8006276 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006176:	f107 030c 	add.w	r3, r7, #12
 800617a:	4618      	mov	r0, r3
 800617c:	f000 fe62 	bl	8006e44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006180:	2301      	movs	r3, #1
 8006182:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006184:	f001 fe4e 	bl	8007e24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006188:	f000 fbd6 	bl	8006938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800618c:	f001 fe1a 	bl	8007dc4 <vPortEnterCritical>
 8006190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006192:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006196:	b25b      	sxtb	r3, r3
 8006198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619c:	d103      	bne.n	80061a6 <xQueueSemaphoreTake+0x13a>
 800619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061ac:	b25b      	sxtb	r3, r3
 80061ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b2:	d103      	bne.n	80061bc <xQueueSemaphoreTake+0x150>
 80061b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061bc:	f001 fe32 	bl	8007e24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061c0:	463a      	mov	r2, r7
 80061c2:	f107 030c 	add.w	r3, r7, #12
 80061c6:	4611      	mov	r1, r2
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 fe51 	bl	8006e70 <xTaskCheckForTimeOut>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d132      	bne.n	800623a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061d6:	f000 f94f 	bl	8006478 <prvIsQueueEmpty>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d026      	beq.n	800622e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d109      	bne.n	80061fc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80061e8:	f001 fdec 	bl	8007dc4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80061ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 ff85 	bl	8007100 <xTaskPriorityInherit>
 80061f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80061f8:	f001 fe14 	bl	8007e24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fe:	3324      	adds	r3, #36	; 0x24
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	4611      	mov	r1, r2
 8006204:	4618      	mov	r0, r3
 8006206:	f000 fd6b 	bl	8006ce0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800620a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800620c:	f000 f8e2 	bl	80063d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006210:	f000 fba0 	bl	8006954 <xTaskResumeAll>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	f47f af68 	bne.w	80060ec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800621c:	4b18      	ldr	r3, [pc, #96]	; (8006280 <xQueueSemaphoreTake+0x214>)
 800621e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	e75e      	b.n	80060ec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800622e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006230:	f000 f8d0 	bl	80063d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006234:	f000 fb8e 	bl	8006954 <xTaskResumeAll>
 8006238:	e758      	b.n	80060ec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800623a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800623c:	f000 f8ca 	bl	80063d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006240:	f000 fb88 	bl	8006954 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006244:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006246:	f000 f917 	bl	8006478 <prvIsQueueEmpty>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	f43f af4d 	beq.w	80060ec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00d      	beq.n	8006274 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006258:	f001 fdb4 	bl	8007dc4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800625c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800625e:	f000 f811 	bl	8006284 <prvGetDisinheritPriorityAfterTimeout>
 8006262:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800626a:	4618      	mov	r0, r3
 800626c:	f001 f844 	bl	80072f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006270:	f001 fdd8 	bl	8007e24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006274:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006276:	4618      	mov	r0, r3
 8006278:	3738      	adds	r7, #56	; 0x38
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	e000ed04 	.word	0xe000ed04

08006284 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	2b00      	cmp	r3, #0
 8006292:	d006      	beq.n	80062a2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f1c3 0307 	rsb	r3, r3, #7
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	e001      	b.n	80062a6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80062a2:	2300      	movs	r3, #0
 80062a4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80062a6:	68fb      	ldr	r3, [r7, #12]
	}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80062c0:	2300      	movs	r3, #0
 80062c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10d      	bne.n	80062ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d14d      	bne.n	8006376 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 ff84 	bl	80071ec <xTaskPriorityDisinherit>
 80062e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	609a      	str	r2, [r3, #8]
 80062ec:	e043      	b.n	8006376 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d119      	bne.n	8006328 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6858      	ldr	r0, [r3, #4]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	461a      	mov	r2, r3
 80062fe:	68b9      	ldr	r1, [r7, #8]
 8006300:	f002 f99c 	bl	800863c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630c:	441a      	add	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	429a      	cmp	r2, r3
 800631c:	d32b      	bcc.n	8006376 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	605a      	str	r2, [r3, #4]
 8006326:	e026      	b.n	8006376 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	68d8      	ldr	r0, [r3, #12]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006330:	461a      	mov	r2, r3
 8006332:	68b9      	ldr	r1, [r7, #8]
 8006334:	f002 f982 	bl	800863c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006340:	425b      	negs	r3, r3
 8006342:	441a      	add	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	68da      	ldr	r2, [r3, #12]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	429a      	cmp	r2, r3
 8006352:	d207      	bcs.n	8006364 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635c:	425b      	negs	r3, r3
 800635e:	441a      	add	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b02      	cmp	r3, #2
 8006368:	d105      	bne.n	8006376 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	3b01      	subs	r3, #1
 8006374:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800637e:	697b      	ldr	r3, [r7, #20]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3718      	adds	r7, #24
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	2b00      	cmp	r3, #0
 8006398:	d018      	beq.n	80063cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68da      	ldr	r2, [r3, #12]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a2:	441a      	add	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68da      	ldr	r2, [r3, #12]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d303      	bcc.n	80063bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68d9      	ldr	r1, [r3, #12]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c4:	461a      	mov	r2, r3
 80063c6:	6838      	ldr	r0, [r7, #0]
 80063c8:	f002 f938 	bl	800863c <memcpy>
	}
}
 80063cc:	bf00      	nop
 80063ce:	3708      	adds	r7, #8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80063dc:	f001 fcf2 	bl	8007dc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063e8:	e011      	b.n	800640e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d012      	beq.n	8006418 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	3324      	adds	r3, #36	; 0x24
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 fcc2 	bl	8006d80 <xTaskRemoveFromEventList>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006402:	f000 fd97 	bl	8006f34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006406:	7bfb      	ldrb	r3, [r7, #15]
 8006408:	3b01      	subs	r3, #1
 800640a:	b2db      	uxtb	r3, r3
 800640c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800640e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006412:	2b00      	cmp	r3, #0
 8006414:	dce9      	bgt.n	80063ea <prvUnlockQueue+0x16>
 8006416:	e000      	b.n	800641a <prvUnlockQueue+0x46>
					break;
 8006418:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	22ff      	movs	r2, #255	; 0xff
 800641e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006422:	f001 fcff 	bl	8007e24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006426:	f001 fccd 	bl	8007dc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006430:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006432:	e011      	b.n	8006458 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d012      	beq.n	8006462 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	3310      	adds	r3, #16
 8006440:	4618      	mov	r0, r3
 8006442:	f000 fc9d 	bl	8006d80 <xTaskRemoveFromEventList>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800644c:	f000 fd72 	bl	8006f34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006450:	7bbb      	ldrb	r3, [r7, #14]
 8006452:	3b01      	subs	r3, #1
 8006454:	b2db      	uxtb	r3, r3
 8006456:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006458:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800645c:	2b00      	cmp	r3, #0
 800645e:	dce9      	bgt.n	8006434 <prvUnlockQueue+0x60>
 8006460:	e000      	b.n	8006464 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006462:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	22ff      	movs	r2, #255	; 0xff
 8006468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800646c:	f001 fcda 	bl	8007e24 <vPortExitCritical>
}
 8006470:	bf00      	nop
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006480:	f001 fca0 	bl	8007dc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006488:	2b00      	cmp	r3, #0
 800648a:	d102      	bne.n	8006492 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800648c:	2301      	movs	r3, #1
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	e001      	b.n	8006496 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006492:	2300      	movs	r3, #0
 8006494:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006496:	f001 fcc5 	bl	8007e24 <vPortExitCritical>

	return xReturn;
 800649a:	68fb      	ldr	r3, [r7, #12]
}
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064ac:	f001 fc8a 	bl	8007dc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d102      	bne.n	80064c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80064bc:	2301      	movs	r3, #1
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	e001      	b.n	80064c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064c6:	f001 fcad 	bl	8007e24 <vPortExitCritical>

	return xReturn;
 80064ca:	68fb      	ldr	r3, [r7, #12]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064de:	2300      	movs	r3, #0
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	e014      	b.n	800650e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80064e4:	4a0f      	ldr	r2, [pc, #60]	; (8006524 <vQueueAddToRegistry+0x50>)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10b      	bne.n	8006508 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80064f0:	490c      	ldr	r1, [pc, #48]	; (8006524 <vQueueAddToRegistry+0x50>)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80064fa:	4a0a      	ldr	r2, [pc, #40]	; (8006524 <vQueueAddToRegistry+0x50>)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	4413      	add	r3, r2
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006506:	e006      	b.n	8006516 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	3301      	adds	r3, #1
 800650c:	60fb      	str	r3, [r7, #12]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2b07      	cmp	r3, #7
 8006512:	d9e7      	bls.n	80064e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006514:	bf00      	nop
 8006516:	bf00      	nop
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	20000220 	.word	0x20000220

08006528 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006538:	f001 fc44 	bl	8007dc4 <vPortEnterCritical>
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006542:	b25b      	sxtb	r3, r3
 8006544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006548:	d103      	bne.n	8006552 <vQueueWaitForMessageRestricted+0x2a>
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006558:	b25b      	sxtb	r3, r3
 800655a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655e:	d103      	bne.n	8006568 <vQueueWaitForMessageRestricted+0x40>
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006568:	f001 fc5c 	bl	8007e24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006570:	2b00      	cmp	r3, #0
 8006572:	d106      	bne.n	8006582 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	3324      	adds	r3, #36	; 0x24
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	68b9      	ldr	r1, [r7, #8]
 800657c:	4618      	mov	r0, r3
 800657e:	f000 fbd3 	bl	8006d28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006582:	6978      	ldr	r0, [r7, #20]
 8006584:	f7ff ff26 	bl	80063d4 <prvUnlockQueue>
	}
 8006588:	bf00      	nop
 800658a:	3718      	adds	r7, #24
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006590:	b580      	push	{r7, lr}
 8006592:	b08c      	sub	sp, #48	; 0x30
 8006594:	af04      	add	r7, sp, #16
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	603b      	str	r3, [r7, #0]
 800659c:	4613      	mov	r3, r2
 800659e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80065a0:	88fb      	ldrh	r3, [r7, #6]
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4618      	mov	r0, r3
 80065a6:	f001 fd2f 	bl	8008008 <pvPortMalloc>
 80065aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00e      	beq.n	80065d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80065b2:	20a0      	movs	r0, #160	; 0xa0
 80065b4:	f001 fd28 	bl	8008008 <pvPortMalloc>
 80065b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d003      	beq.n	80065c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	631a      	str	r2, [r3, #48]	; 0x30
 80065c6:	e005      	b.n	80065d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80065c8:	6978      	ldr	r0, [r7, #20]
 80065ca:	f001 fde9 	bl	80081a0 <vPortFree>
 80065ce:	e001      	b.n	80065d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80065d0:	2300      	movs	r3, #0
 80065d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d013      	beq.n	8006602 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80065da:	88fa      	ldrh	r2, [r7, #6]
 80065dc:	2300      	movs	r3, #0
 80065de:	9303      	str	r3, [sp, #12]
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	9302      	str	r3, [sp, #8]
 80065e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e6:	9301      	str	r3, [sp, #4]
 80065e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	68b9      	ldr	r1, [r7, #8]
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 f80f 	bl	8006614 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065f6:	69f8      	ldr	r0, [r7, #28]
 80065f8:	f000 f8aa 	bl	8006750 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80065fc:	2301      	movs	r3, #1
 80065fe:	61bb      	str	r3, [r7, #24]
 8006600:	e002      	b.n	8006608 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006602:	f04f 33ff 	mov.w	r3, #4294967295
 8006606:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006608:	69bb      	ldr	r3, [r7, #24]
	}
 800660a:	4618      	mov	r0, r3
 800660c:	3720      	adds	r7, #32
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
	...

08006614 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b088      	sub	sp, #32
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
 8006620:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800662c:	3b01      	subs	r3, #1
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4413      	add	r3, r2
 8006632:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	f023 0307 	bic.w	r3, r3, #7
 800663a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	f003 0307 	and.w	r3, r3, #7
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00a      	beq.n	800665c <prvInitialiseNewTask+0x48>
	__asm volatile
 8006646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	617b      	str	r3, [r7, #20]
}
 8006658:	bf00      	nop
 800665a:	e7fe      	b.n	800665a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d01f      	beq.n	80066a2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006662:	2300      	movs	r3, #0
 8006664:	61fb      	str	r3, [r7, #28]
 8006666:	e012      	b.n	800668e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	4413      	add	r3, r2
 800666e:	7819      	ldrb	r1, [r3, #0]
 8006670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	4413      	add	r3, r2
 8006676:	3334      	adds	r3, #52	; 0x34
 8006678:	460a      	mov	r2, r1
 800667a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	4413      	add	r3, r2
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d006      	beq.n	8006696 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	3301      	adds	r3, #1
 800668c:	61fb      	str	r3, [r7, #28]
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	2b0f      	cmp	r3, #15
 8006692:	d9e9      	bls.n	8006668 <prvInitialiseNewTask+0x54>
 8006694:	e000      	b.n	8006698 <prvInitialiseNewTask+0x84>
			{
				break;
 8006696:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066a0:	e003      	b.n	80066aa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80066a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80066aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ac:	2b06      	cmp	r3, #6
 80066ae:	d901      	bls.n	80066b4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80066b0:	2306      	movs	r3, #6
 80066b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80066b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80066ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066be:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80066c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c2:	2200      	movs	r2, #0
 80066c4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80066c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c8:	3304      	adds	r3, #4
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7ff f8d0 	bl	8005870 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80066d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d2:	3318      	adds	r3, #24
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7ff f8cb 	bl	8005870 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80066da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	f1c3 0207 	rsb	r2, r3, #7
 80066e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80066ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80066f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f2:	2200      	movs	r2, #0
 80066f4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80066f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006702:	334c      	adds	r3, #76	; 0x4c
 8006704:	224c      	movs	r2, #76	; 0x4c
 8006706:	2100      	movs	r1, #0
 8006708:	4618      	mov	r0, r3
 800670a:	f001 ff13 	bl	8008534 <memset>
 800670e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006710:	4a0c      	ldr	r2, [pc, #48]	; (8006744 <prvInitialiseNewTask+0x130>)
 8006712:	651a      	str	r2, [r3, #80]	; 0x50
 8006714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006716:	4a0c      	ldr	r2, [pc, #48]	; (8006748 <prvInitialiseNewTask+0x134>)
 8006718:	655a      	str	r2, [r3, #84]	; 0x54
 800671a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671c:	4a0b      	ldr	r2, [pc, #44]	; (800674c <prvInitialiseNewTask+0x138>)
 800671e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006720:	683a      	ldr	r2, [r7, #0]
 8006722:	68f9      	ldr	r1, [r7, #12]
 8006724:	69b8      	ldr	r0, [r7, #24]
 8006726:	f001 fa1d 	bl	8007b64 <pxPortInitialiseStack>
 800672a:	4602      	mov	r2, r0
 800672c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800673a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800673c:	bf00      	nop
 800673e:	3720      	adds	r7, #32
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	200043d4 	.word	0x200043d4
 8006748:	2000443c 	.word	0x2000443c
 800674c:	200044a4 	.word	0x200044a4

08006750 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006758:	f001 fb34 	bl	8007dc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800675c:	4b2a      	ldr	r3, [pc, #168]	; (8006808 <prvAddNewTaskToReadyList+0xb8>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	3301      	adds	r3, #1
 8006762:	4a29      	ldr	r2, [pc, #164]	; (8006808 <prvAddNewTaskToReadyList+0xb8>)
 8006764:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006766:	4b29      	ldr	r3, [pc, #164]	; (800680c <prvAddNewTaskToReadyList+0xbc>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d109      	bne.n	8006782 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800676e:	4a27      	ldr	r2, [pc, #156]	; (800680c <prvAddNewTaskToReadyList+0xbc>)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006774:	4b24      	ldr	r3, [pc, #144]	; (8006808 <prvAddNewTaskToReadyList+0xb8>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d110      	bne.n	800679e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800677c:	f000 fbfe 	bl	8006f7c <prvInitialiseTaskLists>
 8006780:	e00d      	b.n	800679e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006782:	4b23      	ldr	r3, [pc, #140]	; (8006810 <prvAddNewTaskToReadyList+0xc0>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d109      	bne.n	800679e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800678a:	4b20      	ldr	r3, [pc, #128]	; (800680c <prvAddNewTaskToReadyList+0xbc>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006794:	429a      	cmp	r2, r3
 8006796:	d802      	bhi.n	800679e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006798:	4a1c      	ldr	r2, [pc, #112]	; (800680c <prvAddNewTaskToReadyList+0xbc>)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800679e:	4b1d      	ldr	r3, [pc, #116]	; (8006814 <prvAddNewTaskToReadyList+0xc4>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3301      	adds	r3, #1
 80067a4:	4a1b      	ldr	r2, [pc, #108]	; (8006814 <prvAddNewTaskToReadyList+0xc4>)
 80067a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ac:	2201      	movs	r2, #1
 80067ae:	409a      	lsls	r2, r3
 80067b0:	4b19      	ldr	r3, [pc, #100]	; (8006818 <prvAddNewTaskToReadyList+0xc8>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	4a18      	ldr	r2, [pc, #96]	; (8006818 <prvAddNewTaskToReadyList+0xc8>)
 80067b8:	6013      	str	r3, [r2, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067be:	4613      	mov	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4a15      	ldr	r2, [pc, #84]	; (800681c <prvAddNewTaskToReadyList+0xcc>)
 80067c8:	441a      	add	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	3304      	adds	r3, #4
 80067ce:	4619      	mov	r1, r3
 80067d0:	4610      	mov	r0, r2
 80067d2:	f7ff f85a 	bl	800588a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80067d6:	f001 fb25 	bl	8007e24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80067da:	4b0d      	ldr	r3, [pc, #52]	; (8006810 <prvAddNewTaskToReadyList+0xc0>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00e      	beq.n	8006800 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80067e2:	4b0a      	ldr	r3, [pc, #40]	; (800680c <prvAddNewTaskToReadyList+0xbc>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d207      	bcs.n	8006800 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80067f0:	4b0b      	ldr	r3, [pc, #44]	; (8006820 <prvAddNewTaskToReadyList+0xd0>)
 80067f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067f6:	601a      	str	r2, [r3, #0]
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006800:	bf00      	nop
 8006802:	3708      	adds	r7, #8
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	20000360 	.word	0x20000360
 800680c:	20000260 	.word	0x20000260
 8006810:	2000036c 	.word	0x2000036c
 8006814:	2000037c 	.word	0x2000037c
 8006818:	20000368 	.word	0x20000368
 800681c:	20000264 	.word	0x20000264
 8006820:	e000ed04 	.word	0xe000ed04

08006824 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800682c:	2300      	movs	r3, #0
 800682e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d017      	beq.n	8006866 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006836:	4b13      	ldr	r3, [pc, #76]	; (8006884 <vTaskDelay+0x60>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00a      	beq.n	8006854 <vTaskDelay+0x30>
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	60bb      	str	r3, [r7, #8]
}
 8006850:	bf00      	nop
 8006852:	e7fe      	b.n	8006852 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006854:	f000 f870 	bl	8006938 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006858:	2100      	movs	r1, #0
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fdee 	bl	800743c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006860:	f000 f878 	bl	8006954 <xTaskResumeAll>
 8006864:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d107      	bne.n	800687c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800686c:	4b06      	ldr	r3, [pc, #24]	; (8006888 <vTaskDelay+0x64>)
 800686e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800687c:	bf00      	nop
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	20000388 	.word	0x20000388
 8006888:	e000ed04 	.word	0xe000ed04

0800688c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8006892:	4b21      	ldr	r3, [pc, #132]	; (8006918 <vTaskStartScheduler+0x8c>)
 8006894:	9301      	str	r3, [sp, #4]
 8006896:	2300      	movs	r3, #0
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	2300      	movs	r3, #0
 800689c:	2280      	movs	r2, #128	; 0x80
 800689e:	491f      	ldr	r1, [pc, #124]	; (800691c <vTaskStartScheduler+0x90>)
 80068a0:	481f      	ldr	r0, [pc, #124]	; (8006920 <vTaskStartScheduler+0x94>)
 80068a2:	f7ff fe75 	bl	8006590 <xTaskCreate>
 80068a6:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d102      	bne.n	80068b4 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80068ae:	f000 fe2b 	bl	8007508 <xTimerCreateTimerTask>
 80068b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d11b      	bne.n	80068f2 <vTaskStartScheduler+0x66>
	__asm volatile
 80068ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068be:	f383 8811 	msr	BASEPRI, r3
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	f3bf 8f4f 	dsb	sy
 80068ca:	60bb      	str	r3, [r7, #8]
}
 80068cc:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80068ce:	4b15      	ldr	r3, [pc, #84]	; (8006924 <vTaskStartScheduler+0x98>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	334c      	adds	r3, #76	; 0x4c
 80068d4:	4a14      	ldr	r2, [pc, #80]	; (8006928 <vTaskStartScheduler+0x9c>)
 80068d6:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80068d8:	4b14      	ldr	r3, [pc, #80]	; (800692c <vTaskStartScheduler+0xa0>)
 80068da:	f04f 32ff 	mov.w	r2, #4294967295
 80068de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80068e0:	4b13      	ldr	r3, [pc, #76]	; (8006930 <vTaskStartScheduler+0xa4>)
 80068e2:	2201      	movs	r2, #1
 80068e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80068e6:	4b13      	ldr	r3, [pc, #76]	; (8006934 <vTaskStartScheduler+0xa8>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80068ec:	f001 f9c8 	bl	8007c80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80068f0:	e00e      	b.n	8006910 <vTaskStartScheduler+0x84>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f8:	d10a      	bne.n	8006910 <vTaskStartScheduler+0x84>
	__asm volatile
 80068fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	607b      	str	r3, [r7, #4]
}
 800690c:	bf00      	nop
 800690e:	e7fe      	b.n	800690e <vTaskStartScheduler+0x82>
}
 8006910:	bf00      	nop
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	20000384 	.word	0x20000384
 800691c:	08008748 	.word	0x08008748
 8006920:	08006f4d 	.word	0x08006f4d
 8006924:	20000260 	.word	0x20000260
 8006928:	20000074 	.word	0x20000074
 800692c:	20000380 	.word	0x20000380
 8006930:	2000036c 	.word	0x2000036c
 8006934:	20000364 	.word	0x20000364

08006938 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006938:	b480      	push	{r7}
 800693a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800693c:	4b04      	ldr	r3, [pc, #16]	; (8006950 <vTaskSuspendAll+0x18>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	3301      	adds	r3, #1
 8006942:	4a03      	ldr	r2, [pc, #12]	; (8006950 <vTaskSuspendAll+0x18>)
 8006944:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006946:	bf00      	nop
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr
 8006950:	20000388 	.word	0x20000388

08006954 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800695a:	2300      	movs	r3, #0
 800695c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800695e:	2300      	movs	r3, #0
 8006960:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006962:	4b41      	ldr	r3, [pc, #260]	; (8006a68 <xTaskResumeAll+0x114>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10a      	bne.n	8006980 <xTaskResumeAll+0x2c>
	__asm volatile
 800696a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696e:	f383 8811 	msr	BASEPRI, r3
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	603b      	str	r3, [r7, #0]
}
 800697c:	bf00      	nop
 800697e:	e7fe      	b.n	800697e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006980:	f001 fa20 	bl	8007dc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006984:	4b38      	ldr	r3, [pc, #224]	; (8006a68 <xTaskResumeAll+0x114>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3b01      	subs	r3, #1
 800698a:	4a37      	ldr	r2, [pc, #220]	; (8006a68 <xTaskResumeAll+0x114>)
 800698c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800698e:	4b36      	ldr	r3, [pc, #216]	; (8006a68 <xTaskResumeAll+0x114>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d161      	bne.n	8006a5a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006996:	4b35      	ldr	r3, [pc, #212]	; (8006a6c <xTaskResumeAll+0x118>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d05d      	beq.n	8006a5a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800699e:	e02e      	b.n	80069fe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069a0:	4b33      	ldr	r3, [pc, #204]	; (8006a70 <xTaskResumeAll+0x11c>)
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	3318      	adds	r3, #24
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7fe ffc9 	bl	8005944 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3304      	adds	r3, #4
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7fe ffc4 	bl	8005944 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c0:	2201      	movs	r2, #1
 80069c2:	409a      	lsls	r2, r3
 80069c4:	4b2b      	ldr	r3, [pc, #172]	; (8006a74 <xTaskResumeAll+0x120>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	4a2a      	ldr	r2, [pc, #168]	; (8006a74 <xTaskResumeAll+0x120>)
 80069cc:	6013      	str	r3, [r2, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d2:	4613      	mov	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4a27      	ldr	r2, [pc, #156]	; (8006a78 <xTaskResumeAll+0x124>)
 80069dc:	441a      	add	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	3304      	adds	r3, #4
 80069e2:	4619      	mov	r1, r3
 80069e4:	4610      	mov	r0, r2
 80069e6:	f7fe ff50 	bl	800588a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ee:	4b23      	ldr	r3, [pc, #140]	; (8006a7c <xTaskResumeAll+0x128>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d302      	bcc.n	80069fe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80069f8:	4b21      	ldr	r3, [pc, #132]	; (8006a80 <xTaskResumeAll+0x12c>)
 80069fa:	2201      	movs	r2, #1
 80069fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069fe:	4b1c      	ldr	r3, [pc, #112]	; (8006a70 <xTaskResumeAll+0x11c>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1cc      	bne.n	80069a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a0c:	f000 fb3a 	bl	8007084 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006a10:	4b1c      	ldr	r3, [pc, #112]	; (8006a84 <xTaskResumeAll+0x130>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d010      	beq.n	8006a3e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a1c:	f000 f846 	bl	8006aac <xTaskIncrementTick>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d002      	beq.n	8006a2c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006a26:	4b16      	ldr	r3, [pc, #88]	; (8006a80 <xTaskResumeAll+0x12c>)
 8006a28:	2201      	movs	r2, #1
 8006a2a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1f1      	bne.n	8006a1c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006a38:	4b12      	ldr	r3, [pc, #72]	; (8006a84 <xTaskResumeAll+0x130>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a3e:	4b10      	ldr	r3, [pc, #64]	; (8006a80 <xTaskResumeAll+0x12c>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d009      	beq.n	8006a5a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a46:	2301      	movs	r3, #1
 8006a48:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a4a:	4b0f      	ldr	r3, [pc, #60]	; (8006a88 <xTaskResumeAll+0x134>)
 8006a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a5a:	f001 f9e3 	bl	8007e24 <vPortExitCritical>

	return xAlreadyYielded;
 8006a5e:	68bb      	ldr	r3, [r7, #8]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	20000388 	.word	0x20000388
 8006a6c:	20000360 	.word	0x20000360
 8006a70:	20000320 	.word	0x20000320
 8006a74:	20000368 	.word	0x20000368
 8006a78:	20000264 	.word	0x20000264
 8006a7c:	20000260 	.word	0x20000260
 8006a80:	20000374 	.word	0x20000374
 8006a84:	20000370 	.word	0x20000370
 8006a88:	e000ed04 	.word	0xe000ed04

08006a8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006a92:	4b05      	ldr	r3, [pc, #20]	; (8006aa8 <xTaskGetTickCount+0x1c>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006a98:	687b      	ldr	r3, [r7, #4]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	20000364 	.word	0x20000364

08006aac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ab6:	4b4e      	ldr	r3, [pc, #312]	; (8006bf0 <xTaskIncrementTick+0x144>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f040 808e 	bne.w	8006bdc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ac0:	4b4c      	ldr	r3, [pc, #304]	; (8006bf4 <xTaskIncrementTick+0x148>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ac8:	4a4a      	ldr	r2, [pc, #296]	; (8006bf4 <xTaskIncrementTick+0x148>)
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d120      	bne.n	8006b16 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ad4:	4b48      	ldr	r3, [pc, #288]	; (8006bf8 <xTaskIncrementTick+0x14c>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00a      	beq.n	8006af4 <xTaskIncrementTick+0x48>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	603b      	str	r3, [r7, #0]
}
 8006af0:	bf00      	nop
 8006af2:	e7fe      	b.n	8006af2 <xTaskIncrementTick+0x46>
 8006af4:	4b40      	ldr	r3, [pc, #256]	; (8006bf8 <xTaskIncrementTick+0x14c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	60fb      	str	r3, [r7, #12]
 8006afa:	4b40      	ldr	r3, [pc, #256]	; (8006bfc <xTaskIncrementTick+0x150>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a3e      	ldr	r2, [pc, #248]	; (8006bf8 <xTaskIncrementTick+0x14c>)
 8006b00:	6013      	str	r3, [r2, #0]
 8006b02:	4a3e      	ldr	r2, [pc, #248]	; (8006bfc <xTaskIncrementTick+0x150>)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6013      	str	r3, [r2, #0]
 8006b08:	4b3d      	ldr	r3, [pc, #244]	; (8006c00 <xTaskIncrementTick+0x154>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	4a3c      	ldr	r2, [pc, #240]	; (8006c00 <xTaskIncrementTick+0x154>)
 8006b10:	6013      	str	r3, [r2, #0]
 8006b12:	f000 fab7 	bl	8007084 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b16:	4b3b      	ldr	r3, [pc, #236]	; (8006c04 <xTaskIncrementTick+0x158>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d348      	bcc.n	8006bb2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b20:	4b35      	ldr	r3, [pc, #212]	; (8006bf8 <xTaskIncrementTick+0x14c>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d104      	bne.n	8006b34 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b2a:	4b36      	ldr	r3, [pc, #216]	; (8006c04 <xTaskIncrementTick+0x158>)
 8006b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b30:	601a      	str	r2, [r3, #0]
					break;
 8006b32:	e03e      	b.n	8006bb2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b34:	4b30      	ldr	r3, [pc, #192]	; (8006bf8 <xTaskIncrementTick+0x14c>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d203      	bcs.n	8006b54 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b4c:	4a2d      	ldr	r2, [pc, #180]	; (8006c04 <xTaskIncrementTick+0x158>)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b52:	e02e      	b.n	8006bb2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	3304      	adds	r3, #4
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7fe fef3 	bl	8005944 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d004      	beq.n	8006b70 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	3318      	adds	r3, #24
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fe feea 	bl	8005944 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b74:	2201      	movs	r2, #1
 8006b76:	409a      	lsls	r2, r3
 8006b78:	4b23      	ldr	r3, [pc, #140]	; (8006c08 <xTaskIncrementTick+0x15c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	4a22      	ldr	r2, [pc, #136]	; (8006c08 <xTaskIncrementTick+0x15c>)
 8006b80:	6013      	str	r3, [r2, #0]
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b86:	4613      	mov	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4a1f      	ldr	r2, [pc, #124]	; (8006c0c <xTaskIncrementTick+0x160>)
 8006b90:	441a      	add	r2, r3
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	3304      	adds	r3, #4
 8006b96:	4619      	mov	r1, r3
 8006b98:	4610      	mov	r0, r2
 8006b9a:	f7fe fe76 	bl	800588a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba2:	4b1b      	ldr	r3, [pc, #108]	; (8006c10 <xTaskIncrementTick+0x164>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d3b9      	bcc.n	8006b20 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006bac:	2301      	movs	r3, #1
 8006bae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bb0:	e7b6      	b.n	8006b20 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006bb2:	4b17      	ldr	r3, [pc, #92]	; (8006c10 <xTaskIncrementTick+0x164>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb8:	4914      	ldr	r1, [pc, #80]	; (8006c0c <xTaskIncrementTick+0x160>)
 8006bba:	4613      	mov	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	440b      	add	r3, r1
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d901      	bls.n	8006bce <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006bce:	4b11      	ldr	r3, [pc, #68]	; (8006c14 <xTaskIncrementTick+0x168>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d007      	beq.n	8006be6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	617b      	str	r3, [r7, #20]
 8006bda:	e004      	b.n	8006be6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006bdc:	4b0e      	ldr	r3, [pc, #56]	; (8006c18 <xTaskIncrementTick+0x16c>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3301      	adds	r3, #1
 8006be2:	4a0d      	ldr	r2, [pc, #52]	; (8006c18 <xTaskIncrementTick+0x16c>)
 8006be4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006be6:	697b      	ldr	r3, [r7, #20]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3718      	adds	r7, #24
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	20000388 	.word	0x20000388
 8006bf4:	20000364 	.word	0x20000364
 8006bf8:	20000318 	.word	0x20000318
 8006bfc:	2000031c 	.word	0x2000031c
 8006c00:	20000378 	.word	0x20000378
 8006c04:	20000380 	.word	0x20000380
 8006c08:	20000368 	.word	0x20000368
 8006c0c:	20000264 	.word	0x20000264
 8006c10:	20000260 	.word	0x20000260
 8006c14:	20000374 	.word	0x20000374
 8006c18:	20000370 	.word	0x20000370

08006c1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c22:	4b29      	ldr	r3, [pc, #164]	; (8006cc8 <vTaskSwitchContext+0xac>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d003      	beq.n	8006c32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c2a:	4b28      	ldr	r3, [pc, #160]	; (8006ccc <vTaskSwitchContext+0xb0>)
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c30:	e044      	b.n	8006cbc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006c32:	4b26      	ldr	r3, [pc, #152]	; (8006ccc <vTaskSwitchContext+0xb0>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c38:	4b25      	ldr	r3, [pc, #148]	; (8006cd0 <vTaskSwitchContext+0xb4>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	fab3 f383 	clz	r3, r3
 8006c44:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006c46:	7afb      	ldrb	r3, [r7, #11]
 8006c48:	f1c3 031f 	rsb	r3, r3, #31
 8006c4c:	617b      	str	r3, [r7, #20]
 8006c4e:	4921      	ldr	r1, [pc, #132]	; (8006cd4 <vTaskSwitchContext+0xb8>)
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	4613      	mov	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	440b      	add	r3, r1
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10a      	bne.n	8006c78 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c66:	f383 8811 	msr	BASEPRI, r3
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	607b      	str	r3, [r7, #4]
}
 8006c74:	bf00      	nop
 8006c76:	e7fe      	b.n	8006c76 <vTaskSwitchContext+0x5a>
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4a14      	ldr	r2, [pc, #80]	; (8006cd4 <vTaskSwitchContext+0xb8>)
 8006c84:	4413      	add	r3, r2
 8006c86:	613b      	str	r3, [r7, #16]
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	605a      	str	r2, [r3, #4]
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	3308      	adds	r3, #8
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d104      	bne.n	8006ca8 <vTaskSwitchContext+0x8c>
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	605a      	str	r2, [r3, #4]
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	4a0a      	ldr	r2, [pc, #40]	; (8006cd8 <vTaskSwitchContext+0xbc>)
 8006cb0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006cb2:	4b09      	ldr	r3, [pc, #36]	; (8006cd8 <vTaskSwitchContext+0xbc>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	334c      	adds	r3, #76	; 0x4c
 8006cb8:	4a08      	ldr	r2, [pc, #32]	; (8006cdc <vTaskSwitchContext+0xc0>)
 8006cba:	6013      	str	r3, [r2, #0]
}
 8006cbc:	bf00      	nop
 8006cbe:	371c      	adds	r7, #28
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	20000388 	.word	0x20000388
 8006ccc:	20000374 	.word	0x20000374
 8006cd0:	20000368 	.word	0x20000368
 8006cd4:	20000264 	.word	0x20000264
 8006cd8:	20000260 	.word	0x20000260
 8006cdc:	20000074 	.word	0x20000074

08006ce0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10a      	bne.n	8006d06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	60fb      	str	r3, [r7, #12]
}
 8006d02:	bf00      	nop
 8006d04:	e7fe      	b.n	8006d04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d06:	4b07      	ldr	r3, [pc, #28]	; (8006d24 <vTaskPlaceOnEventList+0x44>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3318      	adds	r3, #24
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7fe fddf 	bl	80058d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d14:	2101      	movs	r1, #1
 8006d16:	6838      	ldr	r0, [r7, #0]
 8006d18:	f000 fb90 	bl	800743c <prvAddCurrentTaskToDelayedList>
}
 8006d1c:	bf00      	nop
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	20000260 	.word	0x20000260

08006d28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10a      	bne.n	8006d50 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3e:	f383 8811 	msr	BASEPRI, r3
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	617b      	str	r3, [r7, #20]
}
 8006d4c:	bf00      	nop
 8006d4e:	e7fe      	b.n	8006d4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d50:	4b0a      	ldr	r3, [pc, #40]	; (8006d7c <vTaskPlaceOnEventListRestricted+0x54>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	3318      	adds	r3, #24
 8006d56:	4619      	mov	r1, r3
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f7fe fd96 	bl	800588a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006d64:	f04f 33ff 	mov.w	r3, #4294967295
 8006d68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d6a:	6879      	ldr	r1, [r7, #4]
 8006d6c:	68b8      	ldr	r0, [r7, #8]
 8006d6e:	f000 fb65 	bl	800743c <prvAddCurrentTaskToDelayedList>
	}
 8006d72:	bf00      	nop
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	20000260 	.word	0x20000260

08006d80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10a      	bne.n	8006dac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	60fb      	str	r3, [r7, #12]
}
 8006da8:	bf00      	nop
 8006daa:	e7fe      	b.n	8006daa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	3318      	adds	r3, #24
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7fe fdc7 	bl	8005944 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006db6:	4b1d      	ldr	r3, [pc, #116]	; (8006e2c <xTaskRemoveFromEventList+0xac>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d11c      	bne.n	8006df8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fe fdbe 	bl	8005944 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dcc:	2201      	movs	r2, #1
 8006dce:	409a      	lsls	r2, r3
 8006dd0:	4b17      	ldr	r3, [pc, #92]	; (8006e30 <xTaskRemoveFromEventList+0xb0>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	4a16      	ldr	r2, [pc, #88]	; (8006e30 <xTaskRemoveFromEventList+0xb0>)
 8006dd8:	6013      	str	r3, [r2, #0]
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dde:	4613      	mov	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4413      	add	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4a13      	ldr	r2, [pc, #76]	; (8006e34 <xTaskRemoveFromEventList+0xb4>)
 8006de8:	441a      	add	r2, r3
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	3304      	adds	r3, #4
 8006dee:	4619      	mov	r1, r3
 8006df0:	4610      	mov	r0, r2
 8006df2:	f7fe fd4a 	bl	800588a <vListInsertEnd>
 8006df6:	e005      	b.n	8006e04 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	3318      	adds	r3, #24
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	480e      	ldr	r0, [pc, #56]	; (8006e38 <xTaskRemoveFromEventList+0xb8>)
 8006e00:	f7fe fd43 	bl	800588a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e08:	4b0c      	ldr	r3, [pc, #48]	; (8006e3c <xTaskRemoveFromEventList+0xbc>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d905      	bls.n	8006e1e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e12:	2301      	movs	r3, #1
 8006e14:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e16:	4b0a      	ldr	r3, [pc, #40]	; (8006e40 <xTaskRemoveFromEventList+0xc0>)
 8006e18:	2201      	movs	r2, #1
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	e001      	b.n	8006e22 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006e22:	697b      	ldr	r3, [r7, #20]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3718      	adds	r7, #24
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	20000388 	.word	0x20000388
 8006e30:	20000368 	.word	0x20000368
 8006e34:	20000264 	.word	0x20000264
 8006e38:	20000320 	.word	0x20000320
 8006e3c:	20000260 	.word	0x20000260
 8006e40:	20000374 	.word	0x20000374

08006e44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e4c:	4b06      	ldr	r3, [pc, #24]	; (8006e68 <vTaskInternalSetTimeOutState+0x24>)
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006e54:	4b05      	ldr	r3, [pc, #20]	; (8006e6c <vTaskInternalSetTimeOutState+0x28>)
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	605a      	str	r2, [r3, #4]
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	20000378 	.word	0x20000378
 8006e6c:	20000364 	.word	0x20000364

08006e70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b088      	sub	sp, #32
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10a      	bne.n	8006e96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e84:	f383 8811 	msr	BASEPRI, r3
 8006e88:	f3bf 8f6f 	isb	sy
 8006e8c:	f3bf 8f4f 	dsb	sy
 8006e90:	613b      	str	r3, [r7, #16]
}
 8006e92:	bf00      	nop
 8006e94:	e7fe      	b.n	8006e94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10a      	bne.n	8006eb2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	60fb      	str	r3, [r7, #12]
}
 8006eae:	bf00      	nop
 8006eb0:	e7fe      	b.n	8006eb0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006eb2:	f000 ff87 	bl	8007dc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006eb6:	4b1d      	ldr	r3, [pc, #116]	; (8006f2c <xTaskCheckForTimeOut+0xbc>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	69ba      	ldr	r2, [r7, #24]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ece:	d102      	bne.n	8006ed6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	61fb      	str	r3, [r7, #28]
 8006ed4:	e023      	b.n	8006f1e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	4b15      	ldr	r3, [pc, #84]	; (8006f30 <xTaskCheckForTimeOut+0xc0>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d007      	beq.n	8006ef2 <xTaskCheckForTimeOut+0x82>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d302      	bcc.n	8006ef2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006eec:	2301      	movs	r3, #1
 8006eee:	61fb      	str	r3, [r7, #28]
 8006ef0:	e015      	b.n	8006f1e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d20b      	bcs.n	8006f14 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	1ad2      	subs	r2, r2, r3
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f7ff ff9b 	bl	8006e44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	61fb      	str	r3, [r7, #28]
 8006f12:	e004      	b.n	8006f1e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	2200      	movs	r2, #0
 8006f18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006f1e:	f000 ff81 	bl	8007e24 <vPortExitCritical>

	return xReturn;
 8006f22:	69fb      	ldr	r3, [r7, #28]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3720      	adds	r7, #32
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	20000364 	.word	0x20000364
 8006f30:	20000378 	.word	0x20000378

08006f34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f34:	b480      	push	{r7}
 8006f36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006f38:	4b03      	ldr	r3, [pc, #12]	; (8006f48 <vTaskMissedYield+0x14>)
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	601a      	str	r2, [r3, #0]
}
 8006f3e:	bf00      	nop
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr
 8006f48:	20000374 	.word	0x20000374

08006f4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f54:	f000 f852 	bl	8006ffc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f58:	4b06      	ldr	r3, [pc, #24]	; (8006f74 <prvIdleTask+0x28>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d9f9      	bls.n	8006f54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f60:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <prvIdleTask+0x2c>)
 8006f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f70:	e7f0      	b.n	8006f54 <prvIdleTask+0x8>
 8006f72:	bf00      	nop
 8006f74:	20000264 	.word	0x20000264
 8006f78:	e000ed04 	.word	0xe000ed04

08006f7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f82:	2300      	movs	r3, #0
 8006f84:	607b      	str	r3, [r7, #4]
 8006f86:	e00c      	b.n	8006fa2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4a12      	ldr	r2, [pc, #72]	; (8006fdc <prvInitialiseTaskLists+0x60>)
 8006f94:	4413      	add	r3, r2
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7fe fc4a 	bl	8005830 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	607b      	str	r3, [r7, #4]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b06      	cmp	r3, #6
 8006fa6:	d9ef      	bls.n	8006f88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006fa8:	480d      	ldr	r0, [pc, #52]	; (8006fe0 <prvInitialiseTaskLists+0x64>)
 8006faa:	f7fe fc41 	bl	8005830 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006fae:	480d      	ldr	r0, [pc, #52]	; (8006fe4 <prvInitialiseTaskLists+0x68>)
 8006fb0:	f7fe fc3e 	bl	8005830 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006fb4:	480c      	ldr	r0, [pc, #48]	; (8006fe8 <prvInitialiseTaskLists+0x6c>)
 8006fb6:	f7fe fc3b 	bl	8005830 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006fba:	480c      	ldr	r0, [pc, #48]	; (8006fec <prvInitialiseTaskLists+0x70>)
 8006fbc:	f7fe fc38 	bl	8005830 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006fc0:	480b      	ldr	r0, [pc, #44]	; (8006ff0 <prvInitialiseTaskLists+0x74>)
 8006fc2:	f7fe fc35 	bl	8005830 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006fc6:	4b0b      	ldr	r3, [pc, #44]	; (8006ff4 <prvInitialiseTaskLists+0x78>)
 8006fc8:	4a05      	ldr	r2, [pc, #20]	; (8006fe0 <prvInitialiseTaskLists+0x64>)
 8006fca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006fcc:	4b0a      	ldr	r3, [pc, #40]	; (8006ff8 <prvInitialiseTaskLists+0x7c>)
 8006fce:	4a05      	ldr	r2, [pc, #20]	; (8006fe4 <prvInitialiseTaskLists+0x68>)
 8006fd0:	601a      	str	r2, [r3, #0]
}
 8006fd2:	bf00      	nop
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	20000264 	.word	0x20000264
 8006fe0:	200002f0 	.word	0x200002f0
 8006fe4:	20000304 	.word	0x20000304
 8006fe8:	20000320 	.word	0x20000320
 8006fec:	20000334 	.word	0x20000334
 8006ff0:	2000034c 	.word	0x2000034c
 8006ff4:	20000318 	.word	0x20000318
 8006ff8:	2000031c 	.word	0x2000031c

08006ffc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007002:	e019      	b.n	8007038 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007004:	f000 fede 	bl	8007dc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007008:	4b10      	ldr	r3, [pc, #64]	; (800704c <prvCheckTasksWaitingTermination+0x50>)
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3304      	adds	r3, #4
 8007014:	4618      	mov	r0, r3
 8007016:	f7fe fc95 	bl	8005944 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800701a:	4b0d      	ldr	r3, [pc, #52]	; (8007050 <prvCheckTasksWaitingTermination+0x54>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	3b01      	subs	r3, #1
 8007020:	4a0b      	ldr	r2, [pc, #44]	; (8007050 <prvCheckTasksWaitingTermination+0x54>)
 8007022:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007024:	4b0b      	ldr	r3, [pc, #44]	; (8007054 <prvCheckTasksWaitingTermination+0x58>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3b01      	subs	r3, #1
 800702a:	4a0a      	ldr	r2, [pc, #40]	; (8007054 <prvCheckTasksWaitingTermination+0x58>)
 800702c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800702e:	f000 fef9 	bl	8007e24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f810 	bl	8007058 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007038:	4b06      	ldr	r3, [pc, #24]	; (8007054 <prvCheckTasksWaitingTermination+0x58>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1e1      	bne.n	8007004 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007040:	bf00      	nop
 8007042:	bf00      	nop
 8007044:	3708      	adds	r7, #8
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	20000334 	.word	0x20000334
 8007050:	20000360 	.word	0x20000360
 8007054:	20000348 	.word	0x20000348

08007058 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	334c      	adds	r3, #76	; 0x4c
 8007064:	4618      	mov	r0, r3
 8007066:	f001 fa6d 	bl	8008544 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706e:	4618      	mov	r0, r3
 8007070:	f001 f896 	bl	80081a0 <vPortFree>
			vPortFree( pxTCB );
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f001 f893 	bl	80081a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800707a:	bf00      	nop
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
	...

08007084 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800708a:	4b0c      	ldr	r3, [pc, #48]	; (80070bc <prvResetNextTaskUnblockTime+0x38>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d104      	bne.n	800709e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007094:	4b0a      	ldr	r3, [pc, #40]	; (80070c0 <prvResetNextTaskUnblockTime+0x3c>)
 8007096:	f04f 32ff 	mov.w	r2, #4294967295
 800709a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800709c:	e008      	b.n	80070b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800709e:	4b07      	ldr	r3, [pc, #28]	; (80070bc <prvResetNextTaskUnblockTime+0x38>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	4a04      	ldr	r2, [pc, #16]	; (80070c0 <prvResetNextTaskUnblockTime+0x3c>)
 80070ae:	6013      	str	r3, [r2, #0]
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	20000318 	.word	0x20000318
 80070c0:	20000380 	.word	0x20000380

080070c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80070ca:	4b0b      	ldr	r3, [pc, #44]	; (80070f8 <xTaskGetSchedulerState+0x34>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d102      	bne.n	80070d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80070d2:	2301      	movs	r3, #1
 80070d4:	607b      	str	r3, [r7, #4]
 80070d6:	e008      	b.n	80070ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070d8:	4b08      	ldr	r3, [pc, #32]	; (80070fc <xTaskGetSchedulerState+0x38>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d102      	bne.n	80070e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80070e0:	2302      	movs	r3, #2
 80070e2:	607b      	str	r3, [r7, #4]
 80070e4:	e001      	b.n	80070ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80070e6:	2300      	movs	r3, #0
 80070e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80070ea:	687b      	ldr	r3, [r7, #4]
	}
 80070ec:	4618      	mov	r0, r3
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr
 80070f8:	2000036c 	.word	0x2000036c
 80070fc:	20000388 	.word	0x20000388

08007100 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800710c:	2300      	movs	r3, #0
 800710e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d05e      	beq.n	80071d4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800711a:	4b31      	ldr	r3, [pc, #196]	; (80071e0 <xTaskPriorityInherit+0xe0>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007120:	429a      	cmp	r2, r3
 8007122:	d24e      	bcs.n	80071c2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	2b00      	cmp	r3, #0
 800712a:	db06      	blt.n	800713a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800712c:	4b2c      	ldr	r3, [pc, #176]	; (80071e0 <xTaskPriorityInherit+0xe0>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007132:	f1c3 0207 	rsb	r2, r3, #7
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	6959      	ldr	r1, [r3, #20]
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007142:	4613      	mov	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4a26      	ldr	r2, [pc, #152]	; (80071e4 <xTaskPriorityInherit+0xe4>)
 800714c:	4413      	add	r3, r2
 800714e:	4299      	cmp	r1, r3
 8007150:	d12f      	bne.n	80071b2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	3304      	adds	r3, #4
 8007156:	4618      	mov	r0, r3
 8007158:	f7fe fbf4 	bl	8005944 <uxListRemove>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10a      	bne.n	8007178 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007166:	2201      	movs	r2, #1
 8007168:	fa02 f303 	lsl.w	r3, r2, r3
 800716c:	43da      	mvns	r2, r3
 800716e:	4b1e      	ldr	r3, [pc, #120]	; (80071e8 <xTaskPriorityInherit+0xe8>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4013      	ands	r3, r2
 8007174:	4a1c      	ldr	r2, [pc, #112]	; (80071e8 <xTaskPriorityInherit+0xe8>)
 8007176:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007178:	4b19      	ldr	r3, [pc, #100]	; (80071e0 <xTaskPriorityInherit+0xe0>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007186:	2201      	movs	r2, #1
 8007188:	409a      	lsls	r2, r3
 800718a:	4b17      	ldr	r3, [pc, #92]	; (80071e8 <xTaskPriorityInherit+0xe8>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4313      	orrs	r3, r2
 8007190:	4a15      	ldr	r2, [pc, #84]	; (80071e8 <xTaskPriorityInherit+0xe8>)
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007198:	4613      	mov	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4413      	add	r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4a10      	ldr	r2, [pc, #64]	; (80071e4 <xTaskPriorityInherit+0xe4>)
 80071a2:	441a      	add	r2, r3
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	3304      	adds	r3, #4
 80071a8:	4619      	mov	r1, r3
 80071aa:	4610      	mov	r0, r2
 80071ac:	f7fe fb6d 	bl	800588a <vListInsertEnd>
 80071b0:	e004      	b.n	80071bc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80071b2:	4b0b      	ldr	r3, [pc, #44]	; (80071e0 <xTaskPriorityInherit+0xe0>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80071bc:	2301      	movs	r3, #1
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	e008      	b.n	80071d4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071c6:	4b06      	ldr	r3, [pc, #24]	; (80071e0 <xTaskPriorityInherit+0xe0>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d201      	bcs.n	80071d4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80071d0:	2301      	movs	r3, #1
 80071d2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071d4:	68fb      	ldr	r3, [r7, #12]
	}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	20000260 	.word	0x20000260
 80071e4:	20000264 	.word	0x20000264
 80071e8:	20000368 	.word	0x20000368

080071ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80071f8:	2300      	movs	r3, #0
 80071fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d06e      	beq.n	80072e0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007202:	4b3a      	ldr	r3, [pc, #232]	; (80072ec <xTaskPriorityDisinherit+0x100>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	429a      	cmp	r2, r3
 800720a:	d00a      	beq.n	8007222 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800720c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007210:	f383 8811 	msr	BASEPRI, r3
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	60fb      	str	r3, [r7, #12]
}
 800721e:	bf00      	nop
 8007220:	e7fe      	b.n	8007220 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10a      	bne.n	8007240 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800722a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722e:	f383 8811 	msr	BASEPRI, r3
 8007232:	f3bf 8f6f 	isb	sy
 8007236:	f3bf 8f4f 	dsb	sy
 800723a:	60bb      	str	r3, [r7, #8]
}
 800723c:	bf00      	nop
 800723e:	e7fe      	b.n	800723e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007244:	1e5a      	subs	r2, r3, #1
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007252:	429a      	cmp	r2, r3
 8007254:	d044      	beq.n	80072e0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800725a:	2b00      	cmp	r3, #0
 800725c:	d140      	bne.n	80072e0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	3304      	adds	r3, #4
 8007262:	4618      	mov	r0, r3
 8007264:	f7fe fb6e 	bl	8005944 <uxListRemove>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d115      	bne.n	800729a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007272:	491f      	ldr	r1, [pc, #124]	; (80072f0 <xTaskPriorityDisinherit+0x104>)
 8007274:	4613      	mov	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4413      	add	r3, r2
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	440b      	add	r3, r1
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10a      	bne.n	800729a <xTaskPriorityDisinherit+0xae>
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007288:	2201      	movs	r2, #1
 800728a:	fa02 f303 	lsl.w	r3, r2, r3
 800728e:	43da      	mvns	r2, r3
 8007290:	4b18      	ldr	r3, [pc, #96]	; (80072f4 <xTaskPriorityDisinherit+0x108>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4013      	ands	r3, r2
 8007296:	4a17      	ldr	r2, [pc, #92]	; (80072f4 <xTaskPriorityDisinherit+0x108>)
 8007298:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a6:	f1c3 0207 	rsb	r2, r3, #7
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b2:	2201      	movs	r2, #1
 80072b4:	409a      	lsls	r2, r3
 80072b6:	4b0f      	ldr	r3, [pc, #60]	; (80072f4 <xTaskPriorityDisinherit+0x108>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	4a0d      	ldr	r2, [pc, #52]	; (80072f4 <xTaskPriorityDisinherit+0x108>)
 80072be:	6013      	str	r3, [r2, #0]
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c4:	4613      	mov	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4a08      	ldr	r2, [pc, #32]	; (80072f0 <xTaskPriorityDisinherit+0x104>)
 80072ce:	441a      	add	r2, r3
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	3304      	adds	r3, #4
 80072d4:	4619      	mov	r1, r3
 80072d6:	4610      	mov	r0, r2
 80072d8:	f7fe fad7 	bl	800588a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80072dc:	2301      	movs	r3, #1
 80072de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80072e0:	697b      	ldr	r3, [r7, #20]
	}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3718      	adds	r7, #24
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	20000260 	.word	0x20000260
 80072f0:	20000264 	.word	0x20000264
 80072f4:	20000368 	.word	0x20000368

080072f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b088      	sub	sp, #32
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007306:	2301      	movs	r3, #1
 8007308:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d077      	beq.n	8007400 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10a      	bne.n	800732e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731c:	f383 8811 	msr	BASEPRI, r3
 8007320:	f3bf 8f6f 	isb	sy
 8007324:	f3bf 8f4f 	dsb	sy
 8007328:	60fb      	str	r3, [r7, #12]
}
 800732a:	bf00      	nop
 800732c:	e7fe      	b.n	800732c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007332:	683a      	ldr	r2, [r7, #0]
 8007334:	429a      	cmp	r2, r3
 8007336:	d902      	bls.n	800733e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	61fb      	str	r3, [r7, #28]
 800733c:	e002      	b.n	8007344 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007342:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007348:	69fa      	ldr	r2, [r7, #28]
 800734a:	429a      	cmp	r2, r3
 800734c:	d058      	beq.n	8007400 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	429a      	cmp	r2, r3
 8007356:	d153      	bne.n	8007400 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007358:	4b2b      	ldr	r3, [pc, #172]	; (8007408 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	69ba      	ldr	r2, [r7, #24]
 800735e:	429a      	cmp	r2, r3
 8007360:	d10a      	bne.n	8007378 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007366:	f383 8811 	msr	BASEPRI, r3
 800736a:	f3bf 8f6f 	isb	sy
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	60bb      	str	r3, [r7, #8]
}
 8007374:	bf00      	nop
 8007376:	e7fe      	b.n	8007376 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	69fa      	ldr	r2, [r7, #28]
 8007382:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	2b00      	cmp	r3, #0
 800738a:	db04      	blt.n	8007396 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	f1c3 0207 	rsb	r2, r3, #7
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	6959      	ldr	r1, [r3, #20]
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	4613      	mov	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4413      	add	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4a19      	ldr	r2, [pc, #100]	; (800740c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80073a6:	4413      	add	r3, r2
 80073a8:	4299      	cmp	r1, r3
 80073aa:	d129      	bne.n	8007400 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	3304      	adds	r3, #4
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7fe fac7 	bl	8005944 <uxListRemove>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10a      	bne.n	80073d2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c0:	2201      	movs	r2, #1
 80073c2:	fa02 f303 	lsl.w	r3, r2, r3
 80073c6:	43da      	mvns	r2, r3
 80073c8:	4b11      	ldr	r3, [pc, #68]	; (8007410 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4013      	ands	r3, r2
 80073ce:	4a10      	ldr	r2, [pc, #64]	; (8007410 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80073d0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d6:	2201      	movs	r2, #1
 80073d8:	409a      	lsls	r2, r3
 80073da:	4b0d      	ldr	r3, [pc, #52]	; (8007410 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4313      	orrs	r3, r2
 80073e0:	4a0b      	ldr	r2, [pc, #44]	; (8007410 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80073e2:	6013      	str	r3, [r2, #0]
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e8:	4613      	mov	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4413      	add	r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4a06      	ldr	r2, [pc, #24]	; (800740c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80073f2:	441a      	add	r2, r3
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	3304      	adds	r3, #4
 80073f8:	4619      	mov	r1, r3
 80073fa:	4610      	mov	r0, r2
 80073fc:	f7fe fa45 	bl	800588a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007400:	bf00      	nop
 8007402:	3720      	adds	r7, #32
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	20000260 	.word	0x20000260
 800740c:	20000264 	.word	0x20000264
 8007410:	20000368 	.word	0x20000368

08007414 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007414:	b480      	push	{r7}
 8007416:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007418:	4b07      	ldr	r3, [pc, #28]	; (8007438 <pvTaskIncrementMutexHeldCount+0x24>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d004      	beq.n	800742a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007420:	4b05      	ldr	r3, [pc, #20]	; (8007438 <pvTaskIncrementMutexHeldCount+0x24>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007426:	3201      	adds	r2, #1
 8007428:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800742a:	4b03      	ldr	r3, [pc, #12]	; (8007438 <pvTaskIncrementMutexHeldCount+0x24>)
 800742c:	681b      	ldr	r3, [r3, #0]
	}
 800742e:	4618      	mov	r0, r3
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr
 8007438:	20000260 	.word	0x20000260

0800743c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007446:	4b29      	ldr	r3, [pc, #164]	; (80074ec <prvAddCurrentTaskToDelayedList+0xb0>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800744c:	4b28      	ldr	r3, [pc, #160]	; (80074f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3304      	adds	r3, #4
 8007452:	4618      	mov	r0, r3
 8007454:	f7fe fa76 	bl	8005944 <uxListRemove>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10b      	bne.n	8007476 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800745e:	4b24      	ldr	r3, [pc, #144]	; (80074f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007464:	2201      	movs	r2, #1
 8007466:	fa02 f303 	lsl.w	r3, r2, r3
 800746a:	43da      	mvns	r2, r3
 800746c:	4b21      	ldr	r3, [pc, #132]	; (80074f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4013      	ands	r3, r2
 8007472:	4a20      	ldr	r2, [pc, #128]	; (80074f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007474:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747c:	d10a      	bne.n	8007494 <prvAddCurrentTaskToDelayedList+0x58>
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d007      	beq.n	8007494 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007484:	4b1a      	ldr	r3, [pc, #104]	; (80074f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	3304      	adds	r3, #4
 800748a:	4619      	mov	r1, r3
 800748c:	481a      	ldr	r0, [pc, #104]	; (80074f8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800748e:	f7fe f9fc 	bl	800588a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007492:	e026      	b.n	80074e2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4413      	add	r3, r2
 800749a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800749c:	4b14      	ldr	r3, [pc, #80]	; (80074f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d209      	bcs.n	80074c0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074ac:	4b13      	ldr	r3, [pc, #76]	; (80074fc <prvAddCurrentTaskToDelayedList+0xc0>)
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	4b0f      	ldr	r3, [pc, #60]	; (80074f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	3304      	adds	r3, #4
 80074b6:	4619      	mov	r1, r3
 80074b8:	4610      	mov	r0, r2
 80074ba:	f7fe fa0a 	bl	80058d2 <vListInsert>
}
 80074be:	e010      	b.n	80074e2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074c0:	4b0f      	ldr	r3, [pc, #60]	; (8007500 <prvAddCurrentTaskToDelayedList+0xc4>)
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	4b0a      	ldr	r3, [pc, #40]	; (80074f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3304      	adds	r3, #4
 80074ca:	4619      	mov	r1, r3
 80074cc:	4610      	mov	r0, r2
 80074ce:	f7fe fa00 	bl	80058d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80074d2:	4b0c      	ldr	r3, [pc, #48]	; (8007504 <prvAddCurrentTaskToDelayedList+0xc8>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d202      	bcs.n	80074e2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80074dc:	4a09      	ldr	r2, [pc, #36]	; (8007504 <prvAddCurrentTaskToDelayedList+0xc8>)
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	6013      	str	r3, [r2, #0]
}
 80074e2:	bf00      	nop
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	20000364 	.word	0x20000364
 80074f0:	20000260 	.word	0x20000260
 80074f4:	20000368 	.word	0x20000368
 80074f8:	2000034c 	.word	0x2000034c
 80074fc:	2000031c 	.word	0x2000031c
 8007500:	20000318 	.word	0x20000318
 8007504:	20000380 	.word	0x20000380

08007508 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800750e:	2300      	movs	r3, #0
 8007510:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007512:	f000 faf1 	bl	8007af8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007516:	4b11      	ldr	r3, [pc, #68]	; (800755c <xTimerCreateTimerTask+0x54>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00b      	beq.n	8007536 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800751e:	4b10      	ldr	r3, [pc, #64]	; (8007560 <xTimerCreateTimerTask+0x58>)
 8007520:	9301      	str	r3, [sp, #4]
 8007522:	2305      	movs	r3, #5
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	2300      	movs	r3, #0
 8007528:	f44f 7280 	mov.w	r2, #256	; 0x100
 800752c:	490d      	ldr	r1, [pc, #52]	; (8007564 <xTimerCreateTimerTask+0x5c>)
 800752e:	480e      	ldr	r0, [pc, #56]	; (8007568 <xTimerCreateTimerTask+0x60>)
 8007530:	f7ff f82e 	bl	8006590 <xTaskCreate>
 8007534:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10a      	bne.n	8007552 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	603b      	str	r3, [r7, #0]
}
 800754e:	bf00      	nop
 8007550:	e7fe      	b.n	8007550 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8007552:	687b      	ldr	r3, [r7, #4]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	200003bc 	.word	0x200003bc
 8007560:	200003c0 	.word	0x200003c0
 8007564:	08008750 	.word	0x08008750
 8007568:	080076a1 	.word	0x080076a1

0800756c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b08a      	sub	sp, #40	; 0x28
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
 8007578:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800757a:	2300      	movs	r3, #0
 800757c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10a      	bne.n	800759a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007588:	f383 8811 	msr	BASEPRI, r3
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	623b      	str	r3, [r7, #32]
}
 8007596:	bf00      	nop
 8007598:	e7fe      	b.n	8007598 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800759a:	4b1a      	ldr	r3, [pc, #104]	; (8007604 <xTimerGenericCommand+0x98>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d02a      	beq.n	80075f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	2b05      	cmp	r3, #5
 80075b2:	dc18      	bgt.n	80075e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80075b4:	f7ff fd86 	bl	80070c4 <xTaskGetSchedulerState>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d109      	bne.n	80075d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80075be:	4b11      	ldr	r3, [pc, #68]	; (8007604 <xTimerGenericCommand+0x98>)
 80075c0:	6818      	ldr	r0, [r3, #0]
 80075c2:	f107 0110 	add.w	r1, r7, #16
 80075c6:	2300      	movs	r3, #0
 80075c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ca:	f7fe fad5 	bl	8005b78 <xQueueGenericSend>
 80075ce:	6278      	str	r0, [r7, #36]	; 0x24
 80075d0:	e012      	b.n	80075f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80075d2:	4b0c      	ldr	r3, [pc, #48]	; (8007604 <xTimerGenericCommand+0x98>)
 80075d4:	6818      	ldr	r0, [r3, #0]
 80075d6:	f107 0110 	add.w	r1, r7, #16
 80075da:	2300      	movs	r3, #0
 80075dc:	2200      	movs	r2, #0
 80075de:	f7fe facb 	bl	8005b78 <xQueueGenericSend>
 80075e2:	6278      	str	r0, [r7, #36]	; 0x24
 80075e4:	e008      	b.n	80075f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80075e6:	4b07      	ldr	r3, [pc, #28]	; (8007604 <xTimerGenericCommand+0x98>)
 80075e8:	6818      	ldr	r0, [r3, #0]
 80075ea:	f107 0110 	add.w	r1, r7, #16
 80075ee:	2300      	movs	r3, #0
 80075f0:	683a      	ldr	r2, [r7, #0]
 80075f2:	f7fe fbbf 	bl	8005d74 <xQueueGenericSendFromISR>
 80075f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3728      	adds	r7, #40	; 0x28
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	200003bc 	.word	0x200003bc

08007608 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b088      	sub	sp, #32
 800760c:	af02      	add	r7, sp, #8
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007612:	4b22      	ldr	r3, [pc, #136]	; (800769c <prvProcessExpiredTimer+0x94>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	3304      	adds	r3, #4
 8007620:	4618      	mov	r0, r3
 8007622:	f7fe f98f 	bl	8005944 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800762c:	f003 0304 	and.w	r3, r3, #4
 8007630:	2b00      	cmp	r3, #0
 8007632:	d022      	beq.n	800767a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	699a      	ldr	r2, [r3, #24]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	18d1      	adds	r1, r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	6978      	ldr	r0, [r7, #20]
 8007642:	f000 f8d1 	bl	80077e8 <prvInsertTimerInActiveList>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d01f      	beq.n	800768c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800764c:	2300      	movs	r3, #0
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	2300      	movs	r3, #0
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	2100      	movs	r1, #0
 8007656:	6978      	ldr	r0, [r7, #20]
 8007658:	f7ff ff88 	bl	800756c <xTimerGenericCommand>
 800765c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d113      	bne.n	800768c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007668:	f383 8811 	msr	BASEPRI, r3
 800766c:	f3bf 8f6f 	isb	sy
 8007670:	f3bf 8f4f 	dsb	sy
 8007674:	60fb      	str	r3, [r7, #12]
}
 8007676:	bf00      	nop
 8007678:	e7fe      	b.n	8007678 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007680:	f023 0301 	bic.w	r3, r3, #1
 8007684:	b2da      	uxtb	r2, r3
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	6a1b      	ldr	r3, [r3, #32]
 8007690:	6978      	ldr	r0, [r7, #20]
 8007692:	4798      	blx	r3
}
 8007694:	bf00      	nop
 8007696:	3718      	adds	r7, #24
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	200003b4 	.word	0x200003b4

080076a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80076a8:	f107 0308 	add.w	r3, r7, #8
 80076ac:	4618      	mov	r0, r3
 80076ae:	f000 f857 	bl	8007760 <prvGetNextExpireTime>
 80076b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	4619      	mov	r1, r3
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f000 f803 	bl	80076c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80076be:	f000 f8d5 	bl	800786c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80076c2:	e7f1      	b.n	80076a8 <prvTimerTask+0x8>

080076c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80076ce:	f7ff f933 	bl	8006938 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076d2:	f107 0308 	add.w	r3, r7, #8
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 f866 	bl	80077a8 <prvSampleTimeNow>
 80076dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d130      	bne.n	8007746 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10a      	bne.n	8007700 <prvProcessTimerOrBlockTask+0x3c>
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d806      	bhi.n	8007700 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80076f2:	f7ff f92f 	bl	8006954 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80076f6:	68f9      	ldr	r1, [r7, #12]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff ff85 	bl	8007608 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80076fe:	e024      	b.n	800774a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d008      	beq.n	8007718 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007706:	4b13      	ldr	r3, [pc, #76]	; (8007754 <prvProcessTimerOrBlockTask+0x90>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d101      	bne.n	8007714 <prvProcessTimerOrBlockTask+0x50>
 8007710:	2301      	movs	r3, #1
 8007712:	e000      	b.n	8007716 <prvProcessTimerOrBlockTask+0x52>
 8007714:	2300      	movs	r3, #0
 8007716:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007718:	4b0f      	ldr	r3, [pc, #60]	; (8007758 <prvProcessTimerOrBlockTask+0x94>)
 800771a:	6818      	ldr	r0, [r3, #0]
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	4619      	mov	r1, r3
 8007726:	f7fe feff 	bl	8006528 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800772a:	f7ff f913 	bl	8006954 <xTaskResumeAll>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10a      	bne.n	800774a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007734:	4b09      	ldr	r3, [pc, #36]	; (800775c <prvProcessTimerOrBlockTask+0x98>)
 8007736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800773a:	601a      	str	r2, [r3, #0]
 800773c:	f3bf 8f4f 	dsb	sy
 8007740:	f3bf 8f6f 	isb	sy
}
 8007744:	e001      	b.n	800774a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007746:	f7ff f905 	bl	8006954 <xTaskResumeAll>
}
 800774a:	bf00      	nop
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	200003b8 	.word	0x200003b8
 8007758:	200003bc 	.word	0x200003bc
 800775c:	e000ed04 	.word	0xe000ed04

08007760 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007768:	4b0e      	ldr	r3, [pc, #56]	; (80077a4 <prvGetNextExpireTime+0x44>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d101      	bne.n	8007776 <prvGetNextExpireTime+0x16>
 8007772:	2201      	movs	r2, #1
 8007774:	e000      	b.n	8007778 <prvGetNextExpireTime+0x18>
 8007776:	2200      	movs	r2, #0
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d105      	bne.n	8007790 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007784:	4b07      	ldr	r3, [pc, #28]	; (80077a4 <prvGetNextExpireTime+0x44>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	60fb      	str	r3, [r7, #12]
 800778e:	e001      	b.n	8007794 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007790:	2300      	movs	r3, #0
 8007792:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007794:	68fb      	ldr	r3, [r7, #12]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3714      	adds	r7, #20
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	200003b4 	.word	0x200003b4

080077a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80077b0:	f7ff f96c 	bl	8006a8c <xTaskGetTickCount>
 80077b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80077b6:	4b0b      	ldr	r3, [pc, #44]	; (80077e4 <prvSampleTimeNow+0x3c>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d205      	bcs.n	80077cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80077c0:	f000 f936 	bl	8007a30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	601a      	str	r2, [r3, #0]
 80077ca:	e002      	b.n	80077d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80077d2:	4a04      	ldr	r2, [pc, #16]	; (80077e4 <prvSampleTimeNow+0x3c>)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80077d8:	68fb      	ldr	r3, [r7, #12]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	200003c4 	.word	0x200003c4

080077e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
 80077f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80077f6:	2300      	movs	r3, #0
 80077f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	429a      	cmp	r2, r3
 800780c:	d812      	bhi.n	8007834 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	1ad2      	subs	r2, r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	429a      	cmp	r2, r3
 800781a:	d302      	bcc.n	8007822 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800781c:	2301      	movs	r3, #1
 800781e:	617b      	str	r3, [r7, #20]
 8007820:	e01b      	b.n	800785a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007822:	4b10      	ldr	r3, [pc, #64]	; (8007864 <prvInsertTimerInActiveList+0x7c>)
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3304      	adds	r3, #4
 800782a:	4619      	mov	r1, r3
 800782c:	4610      	mov	r0, r2
 800782e:	f7fe f850 	bl	80058d2 <vListInsert>
 8007832:	e012      	b.n	800785a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	429a      	cmp	r2, r3
 800783a:	d206      	bcs.n	800784a <prvInsertTimerInActiveList+0x62>
 800783c:	68ba      	ldr	r2, [r7, #8]
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	429a      	cmp	r2, r3
 8007842:	d302      	bcc.n	800784a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007844:	2301      	movs	r3, #1
 8007846:	617b      	str	r3, [r7, #20]
 8007848:	e007      	b.n	800785a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800784a:	4b07      	ldr	r3, [pc, #28]	; (8007868 <prvInsertTimerInActiveList+0x80>)
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	3304      	adds	r3, #4
 8007852:	4619      	mov	r1, r3
 8007854:	4610      	mov	r0, r2
 8007856:	f7fe f83c 	bl	80058d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800785a:	697b      	ldr	r3, [r7, #20]
}
 800785c:	4618      	mov	r0, r3
 800785e:	3718      	adds	r7, #24
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	200003b8 	.word	0x200003b8
 8007868:	200003b4 	.word	0x200003b4

0800786c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b08e      	sub	sp, #56	; 0x38
 8007870:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007872:	e0ca      	b.n	8007a0a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	da18      	bge.n	80078ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800787a:	1d3b      	adds	r3, r7, #4
 800787c:	3304      	adds	r3, #4
 800787e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10a      	bne.n	800789c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	61fb      	str	r3, [r7, #28]
}
 8007898:	bf00      	nop
 800789a:	e7fe      	b.n	800789a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800789c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078a2:	6850      	ldr	r0, [r2, #4]
 80078a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078a6:	6892      	ldr	r2, [r2, #8]
 80078a8:	4611      	mov	r1, r2
 80078aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f2c0 80ab 	blt.w	8007a0a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80078b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ba:	695b      	ldr	r3, [r3, #20]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d004      	beq.n	80078ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c2:	3304      	adds	r3, #4
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fe f83d 	bl	8005944 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078ca:	463b      	mov	r3, r7
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7ff ff6b 	bl	80077a8 <prvSampleTimeNow>
 80078d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b09      	cmp	r3, #9
 80078d8:	f200 8096 	bhi.w	8007a08 <prvProcessReceivedCommands+0x19c>
 80078dc:	a201      	add	r2, pc, #4	; (adr r2, 80078e4 <prvProcessReceivedCommands+0x78>)
 80078de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e2:	bf00      	nop
 80078e4:	0800790d 	.word	0x0800790d
 80078e8:	0800790d 	.word	0x0800790d
 80078ec:	0800790d 	.word	0x0800790d
 80078f0:	08007981 	.word	0x08007981
 80078f4:	08007995 	.word	0x08007995
 80078f8:	080079df 	.word	0x080079df
 80078fc:	0800790d 	.word	0x0800790d
 8007900:	0800790d 	.word	0x0800790d
 8007904:	08007981 	.word	0x08007981
 8007908:	08007995 	.word	0x08007995
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800790c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007912:	f043 0301 	orr.w	r3, r3, #1
 8007916:	b2da      	uxtb	r2, r3
 8007918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	18d1      	adds	r1, r2, r3
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800792a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800792c:	f7ff ff5c 	bl	80077e8 <prvInsertTimerInActiveList>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d069      	beq.n	8007a0a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800793c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800793e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007940:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007944:	f003 0304 	and.w	r3, r3, #4
 8007948:	2b00      	cmp	r3, #0
 800794a:	d05e      	beq.n	8007a0a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007950:	699b      	ldr	r3, [r3, #24]
 8007952:	441a      	add	r2, r3
 8007954:	2300      	movs	r3, #0
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	2300      	movs	r3, #0
 800795a:	2100      	movs	r1, #0
 800795c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800795e:	f7ff fe05 	bl	800756c <xTimerGenericCommand>
 8007962:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007964:	6a3b      	ldr	r3, [r7, #32]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d14f      	bne.n	8007a0a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800796a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	61bb      	str	r3, [r7, #24]
}
 800797c:	bf00      	nop
 800797e:	e7fe      	b.n	800797e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007982:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007986:	f023 0301 	bic.w	r3, r3, #1
 800798a:	b2da      	uxtb	r2, r3
 800798c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8007992:	e03a      	b.n	8007a0a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007996:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800799a:	f043 0301 	orr.w	r3, r3, #1
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80079ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10a      	bne.n	80079ca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80079b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	617b      	str	r3, [r7, #20]
}
 80079c6:	bf00      	nop
 80079c8:	e7fe      	b.n	80079c8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80079ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079cc:	699a      	ldr	r2, [r3, #24]
 80079ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d0:	18d1      	adds	r1, r2, r3
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079d8:	f7ff ff06 	bl	80077e8 <prvInsertTimerInActiveList>
					break;
 80079dc:	e015      	b.n	8007a0a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80079de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80079e4:	f003 0302 	and.w	r3, r3, #2
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d103      	bne.n	80079f4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80079ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079ee:	f000 fbd7 	bl	80081a0 <vPortFree>
 80079f2:	e00a      	b.n	8007a0a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80079fa:	f023 0301 	bic.w	r3, r3, #1
 80079fe:	b2da      	uxtb	r2, r3
 8007a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007a06:	e000      	b.n	8007a0a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007a08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a0a:	4b08      	ldr	r3, [pc, #32]	; (8007a2c <prvProcessReceivedCommands+0x1c0>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	1d39      	adds	r1, r7, #4
 8007a10:	2200      	movs	r2, #0
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fe fa4a 	bl	8005eac <xQueueReceive>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	f47f af2a 	bne.w	8007874 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007a20:	bf00      	nop
 8007a22:	bf00      	nop
 8007a24:	3730      	adds	r7, #48	; 0x30
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	200003bc 	.word	0x200003bc

08007a30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b088      	sub	sp, #32
 8007a34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a36:	e048      	b.n	8007aca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a38:	4b2d      	ldr	r3, [pc, #180]	; (8007af0 <prvSwitchTimerLists+0xc0>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a42:	4b2b      	ldr	r3, [pc, #172]	; (8007af0 <prvSwitchTimerLists+0xc0>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	3304      	adds	r3, #4
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7fd ff77 	bl	8005944 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6a1b      	ldr	r3, [r3, #32]
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a64:	f003 0304 	and.w	r3, r3, #4
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d02e      	beq.n	8007aca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	693a      	ldr	r2, [r7, #16]
 8007a72:	4413      	add	r3, r2
 8007a74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d90e      	bls.n	8007a9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	68ba      	ldr	r2, [r7, #8]
 8007a82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a8a:	4b19      	ldr	r3, [pc, #100]	; (8007af0 <prvSwitchTimerLists+0xc0>)
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	3304      	adds	r3, #4
 8007a92:	4619      	mov	r1, r3
 8007a94:	4610      	mov	r0, r2
 8007a96:	f7fd ff1c 	bl	80058d2 <vListInsert>
 8007a9a:	e016      	b.n	8007aca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	693a      	ldr	r2, [r7, #16]
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f7ff fd60 	bl	800756c <xTimerGenericCommand>
 8007aac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10a      	bne.n	8007aca <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab8:	f383 8811 	msr	BASEPRI, r3
 8007abc:	f3bf 8f6f 	isb	sy
 8007ac0:	f3bf 8f4f 	dsb	sy
 8007ac4:	603b      	str	r3, [r7, #0]
}
 8007ac6:	bf00      	nop
 8007ac8:	e7fe      	b.n	8007ac8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007aca:	4b09      	ldr	r3, [pc, #36]	; (8007af0 <prvSwitchTimerLists+0xc0>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1b1      	bne.n	8007a38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007ad4:	4b06      	ldr	r3, [pc, #24]	; (8007af0 <prvSwitchTimerLists+0xc0>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007ada:	4b06      	ldr	r3, [pc, #24]	; (8007af4 <prvSwitchTimerLists+0xc4>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a04      	ldr	r2, [pc, #16]	; (8007af0 <prvSwitchTimerLists+0xc0>)
 8007ae0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007ae2:	4a04      	ldr	r2, [pc, #16]	; (8007af4 <prvSwitchTimerLists+0xc4>)
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	6013      	str	r3, [r2, #0]
}
 8007ae8:	bf00      	nop
 8007aea:	3718      	adds	r7, #24
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	200003b4 	.word	0x200003b4
 8007af4:	200003b8 	.word	0x200003b8

08007af8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007afc:	f000 f962 	bl	8007dc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007b00:	4b12      	ldr	r3, [pc, #72]	; (8007b4c <prvCheckForValidListAndQueue+0x54>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d11d      	bne.n	8007b44 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8007b08:	4811      	ldr	r0, [pc, #68]	; (8007b50 <prvCheckForValidListAndQueue+0x58>)
 8007b0a:	f7fd fe91 	bl	8005830 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007b0e:	4811      	ldr	r0, [pc, #68]	; (8007b54 <prvCheckForValidListAndQueue+0x5c>)
 8007b10:	f7fd fe8e 	bl	8005830 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007b14:	4b10      	ldr	r3, [pc, #64]	; (8007b58 <prvCheckForValidListAndQueue+0x60>)
 8007b16:	4a0e      	ldr	r2, [pc, #56]	; (8007b50 <prvCheckForValidListAndQueue+0x58>)
 8007b18:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007b1a:	4b10      	ldr	r3, [pc, #64]	; (8007b5c <prvCheckForValidListAndQueue+0x64>)
 8007b1c:	4a0d      	ldr	r2, [pc, #52]	; (8007b54 <prvCheckForValidListAndQueue+0x5c>)
 8007b1e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007b20:	2200      	movs	r2, #0
 8007b22:	2110      	movs	r1, #16
 8007b24:	2014      	movs	r0, #20
 8007b26:	f7fd ff9f 	bl	8005a68 <xQueueGenericCreate>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	4a07      	ldr	r2, [pc, #28]	; (8007b4c <prvCheckForValidListAndQueue+0x54>)
 8007b2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007b30:	4b06      	ldr	r3, [pc, #24]	; (8007b4c <prvCheckForValidListAndQueue+0x54>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d005      	beq.n	8007b44 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007b38:	4b04      	ldr	r3, [pc, #16]	; (8007b4c <prvCheckForValidListAndQueue+0x54>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4908      	ldr	r1, [pc, #32]	; (8007b60 <prvCheckForValidListAndQueue+0x68>)
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fe fcc8 	bl	80064d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b44:	f000 f96e 	bl	8007e24 <vPortExitCritical>
}
 8007b48:	bf00      	nop
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	200003bc 	.word	0x200003bc
 8007b50:	2000038c 	.word	0x2000038c
 8007b54:	200003a0 	.word	0x200003a0
 8007b58:	200003b4 	.word	0x200003b4
 8007b5c:	200003b8 	.word	0x200003b8
 8007b60:	08008758 	.word	0x08008758

08007b64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	3b04      	subs	r3, #4
 8007b74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3b04      	subs	r3, #4
 8007b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	f023 0201 	bic.w	r2, r3, #1
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	3b04      	subs	r3, #4
 8007b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b94:	4a0c      	ldr	r2, [pc, #48]	; (8007bc8 <pxPortInitialiseStack+0x64>)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	3b14      	subs	r3, #20
 8007b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	3b04      	subs	r3, #4
 8007baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f06f 0202 	mvn.w	r2, #2
 8007bb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	3b20      	subs	r3, #32
 8007bb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007bba:	68fb      	ldr	r3, [r7, #12]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3714      	adds	r7, #20
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr
 8007bc8:	08007bcd 	.word	0x08007bcd

08007bcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007bd6:	4b12      	ldr	r3, [pc, #72]	; (8007c20 <prvTaskExitError+0x54>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bde:	d00a      	beq.n	8007bf6 <prvTaskExitError+0x2a>
	__asm volatile
 8007be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be4:	f383 8811 	msr	BASEPRI, r3
 8007be8:	f3bf 8f6f 	isb	sy
 8007bec:	f3bf 8f4f 	dsb	sy
 8007bf0:	60fb      	str	r3, [r7, #12]
}
 8007bf2:	bf00      	nop
 8007bf4:	e7fe      	b.n	8007bf4 <prvTaskExitError+0x28>
	__asm volatile
 8007bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfa:	f383 8811 	msr	BASEPRI, r3
 8007bfe:	f3bf 8f6f 	isb	sy
 8007c02:	f3bf 8f4f 	dsb	sy
 8007c06:	60bb      	str	r3, [r7, #8]
}
 8007c08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c0a:	bf00      	nop
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d0fc      	beq.n	8007c0c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c12:	bf00      	nop
 8007c14:	bf00      	nop
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	20000024 	.word	0x20000024
	...

08007c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c30:	4b07      	ldr	r3, [pc, #28]	; (8007c50 <pxCurrentTCBConst2>)
 8007c32:	6819      	ldr	r1, [r3, #0]
 8007c34:	6808      	ldr	r0, [r1, #0]
 8007c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c3a:	f380 8809 	msr	PSP, r0
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f04f 0000 	mov.w	r0, #0
 8007c46:	f380 8811 	msr	BASEPRI, r0
 8007c4a:	4770      	bx	lr
 8007c4c:	f3af 8000 	nop.w

08007c50 <pxCurrentTCBConst2>:
 8007c50:	20000260 	.word	0x20000260
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop

08007c58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c58:	4808      	ldr	r0, [pc, #32]	; (8007c7c <prvPortStartFirstTask+0x24>)
 8007c5a:	6800      	ldr	r0, [r0, #0]
 8007c5c:	6800      	ldr	r0, [r0, #0]
 8007c5e:	f380 8808 	msr	MSP, r0
 8007c62:	f04f 0000 	mov.w	r0, #0
 8007c66:	f380 8814 	msr	CONTROL, r0
 8007c6a:	b662      	cpsie	i
 8007c6c:	b661      	cpsie	f
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	df00      	svc	0
 8007c78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c7a:	bf00      	nop
 8007c7c:	e000ed08 	.word	0xe000ed08

08007c80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b086      	sub	sp, #24
 8007c84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c86:	4b46      	ldr	r3, [pc, #280]	; (8007da0 <xPortStartScheduler+0x120>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a46      	ldr	r2, [pc, #280]	; (8007da4 <xPortStartScheduler+0x124>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d10a      	bne.n	8007ca6 <xPortStartScheduler+0x26>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	613b      	str	r3, [r7, #16]
}
 8007ca2:	bf00      	nop
 8007ca4:	e7fe      	b.n	8007ca4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ca6:	4b3e      	ldr	r3, [pc, #248]	; (8007da0 <xPortStartScheduler+0x120>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a3f      	ldr	r2, [pc, #252]	; (8007da8 <xPortStartScheduler+0x128>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d10a      	bne.n	8007cc6 <xPortStartScheduler+0x46>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	60fb      	str	r3, [r7, #12]
}
 8007cc2:	bf00      	nop
 8007cc4:	e7fe      	b.n	8007cc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007cc6:	4b39      	ldr	r3, [pc, #228]	; (8007dac <xPortStartScheduler+0x12c>)
 8007cc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	22ff      	movs	r2, #255	; 0xff
 8007cd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ce0:	78fb      	ldrb	r3, [r7, #3]
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	4b31      	ldr	r3, [pc, #196]	; (8007db0 <xPortStartScheduler+0x130>)
 8007cec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007cee:	4b31      	ldr	r3, [pc, #196]	; (8007db4 <xPortStartScheduler+0x134>)
 8007cf0:	2207      	movs	r2, #7
 8007cf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cf4:	e009      	b.n	8007d0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007cf6:	4b2f      	ldr	r3, [pc, #188]	; (8007db4 <xPortStartScheduler+0x134>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	4a2d      	ldr	r2, [pc, #180]	; (8007db4 <xPortStartScheduler+0x134>)
 8007cfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d00:	78fb      	ldrb	r3, [r7, #3]
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	005b      	lsls	r3, r3, #1
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d0a:	78fb      	ldrb	r3, [r7, #3]
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d12:	2b80      	cmp	r3, #128	; 0x80
 8007d14:	d0ef      	beq.n	8007cf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d16:	4b27      	ldr	r3, [pc, #156]	; (8007db4 <xPortStartScheduler+0x134>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f1c3 0307 	rsb	r3, r3, #7
 8007d1e:	2b04      	cmp	r3, #4
 8007d20:	d00a      	beq.n	8007d38 <xPortStartScheduler+0xb8>
	__asm volatile
 8007d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	60bb      	str	r3, [r7, #8]
}
 8007d34:	bf00      	nop
 8007d36:	e7fe      	b.n	8007d36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d38:	4b1e      	ldr	r3, [pc, #120]	; (8007db4 <xPortStartScheduler+0x134>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	021b      	lsls	r3, r3, #8
 8007d3e:	4a1d      	ldr	r2, [pc, #116]	; (8007db4 <xPortStartScheduler+0x134>)
 8007d40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d42:	4b1c      	ldr	r3, [pc, #112]	; (8007db4 <xPortStartScheduler+0x134>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d4a:	4a1a      	ldr	r2, [pc, #104]	; (8007db4 <xPortStartScheduler+0x134>)
 8007d4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d56:	4b18      	ldr	r3, [pc, #96]	; (8007db8 <xPortStartScheduler+0x138>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a17      	ldr	r2, [pc, #92]	; (8007db8 <xPortStartScheduler+0x138>)
 8007d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d62:	4b15      	ldr	r3, [pc, #84]	; (8007db8 <xPortStartScheduler+0x138>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a14      	ldr	r2, [pc, #80]	; (8007db8 <xPortStartScheduler+0x138>)
 8007d68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d6e:	f000 f8dd 	bl	8007f2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d72:	4b12      	ldr	r3, [pc, #72]	; (8007dbc <xPortStartScheduler+0x13c>)
 8007d74:	2200      	movs	r2, #0
 8007d76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d78:	f000 f8fc 	bl	8007f74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d7c:	4b10      	ldr	r3, [pc, #64]	; (8007dc0 <xPortStartScheduler+0x140>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a0f      	ldr	r2, [pc, #60]	; (8007dc0 <xPortStartScheduler+0x140>)
 8007d82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d88:	f7ff ff66 	bl	8007c58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d8c:	f7fe ff46 	bl	8006c1c <vTaskSwitchContext>
	prvTaskExitError();
 8007d90:	f7ff ff1c 	bl	8007bcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3718      	adds	r7, #24
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	e000ed00 	.word	0xe000ed00
 8007da4:	410fc271 	.word	0x410fc271
 8007da8:	410fc270 	.word	0x410fc270
 8007dac:	e000e400 	.word	0xe000e400
 8007db0:	200003c8 	.word	0x200003c8
 8007db4:	200003cc 	.word	0x200003cc
 8007db8:	e000ed20 	.word	0xe000ed20
 8007dbc:	20000024 	.word	0x20000024
 8007dc0:	e000ef34 	.word	0xe000ef34

08007dc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	607b      	str	r3, [r7, #4]
}
 8007ddc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007dde:	4b0f      	ldr	r3, [pc, #60]	; (8007e1c <vPortEnterCritical+0x58>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3301      	adds	r3, #1
 8007de4:	4a0d      	ldr	r2, [pc, #52]	; (8007e1c <vPortEnterCritical+0x58>)
 8007de6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007de8:	4b0c      	ldr	r3, [pc, #48]	; (8007e1c <vPortEnterCritical+0x58>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d10f      	bne.n	8007e10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007df0:	4b0b      	ldr	r3, [pc, #44]	; (8007e20 <vPortEnterCritical+0x5c>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00a      	beq.n	8007e10 <vPortEnterCritical+0x4c>
	__asm volatile
 8007dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfe:	f383 8811 	msr	BASEPRI, r3
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	603b      	str	r3, [r7, #0]
}
 8007e0c:	bf00      	nop
 8007e0e:	e7fe      	b.n	8007e0e <vPortEnterCritical+0x4a>
	}
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr
 8007e1c:	20000024 	.word	0x20000024
 8007e20:	e000ed04 	.word	0xe000ed04

08007e24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e2a:	4b12      	ldr	r3, [pc, #72]	; (8007e74 <vPortExitCritical+0x50>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10a      	bne.n	8007e48 <vPortExitCritical+0x24>
	__asm volatile
 8007e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e36:	f383 8811 	msr	BASEPRI, r3
 8007e3a:	f3bf 8f6f 	isb	sy
 8007e3e:	f3bf 8f4f 	dsb	sy
 8007e42:	607b      	str	r3, [r7, #4]
}
 8007e44:	bf00      	nop
 8007e46:	e7fe      	b.n	8007e46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007e48:	4b0a      	ldr	r3, [pc, #40]	; (8007e74 <vPortExitCritical+0x50>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	4a09      	ldr	r2, [pc, #36]	; (8007e74 <vPortExitCritical+0x50>)
 8007e50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e52:	4b08      	ldr	r3, [pc, #32]	; (8007e74 <vPortExitCritical+0x50>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d105      	bne.n	8007e66 <vPortExitCritical+0x42>
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	f383 8811 	msr	BASEPRI, r3
}
 8007e64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e66:	bf00      	nop
 8007e68:	370c      	adds	r7, #12
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	20000024 	.word	0x20000024
	...

08007e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e80:	f3ef 8009 	mrs	r0, PSP
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	4b15      	ldr	r3, [pc, #84]	; (8007ee0 <pxCurrentTCBConst>)
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	f01e 0f10 	tst.w	lr, #16
 8007e90:	bf08      	it	eq
 8007e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e9a:	6010      	str	r0, [r2, #0]
 8007e9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ea4:	f380 8811 	msr	BASEPRI, r0
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	f7fe feb4 	bl	8006c1c <vTaskSwitchContext>
 8007eb4:	f04f 0000 	mov.w	r0, #0
 8007eb8:	f380 8811 	msr	BASEPRI, r0
 8007ebc:	bc09      	pop	{r0, r3}
 8007ebe:	6819      	ldr	r1, [r3, #0]
 8007ec0:	6808      	ldr	r0, [r1, #0]
 8007ec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec6:	f01e 0f10 	tst.w	lr, #16
 8007eca:	bf08      	it	eq
 8007ecc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ed0:	f380 8809 	msr	PSP, r0
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	f3af 8000 	nop.w

08007ee0 <pxCurrentTCBConst>:
 8007ee0:	20000260 	.word	0x20000260
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ee4:	bf00      	nop
 8007ee6:	bf00      	nop

08007ee8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
	__asm volatile
 8007eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	607b      	str	r3, [r7, #4]
}
 8007f00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f02:	f7fe fdd3 	bl	8006aac <xTaskIncrementTick>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d003      	beq.n	8007f14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f0c:	4b06      	ldr	r3, [pc, #24]	; (8007f28 <SysTick_Handler+0x40>)
 8007f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f12:	601a      	str	r2, [r3, #0]
 8007f14:	2300      	movs	r3, #0
 8007f16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	f383 8811 	msr	BASEPRI, r3
}
 8007f1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f20:	bf00      	nop
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	e000ed04 	.word	0xe000ed04

08007f2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f30:	4b0b      	ldr	r3, [pc, #44]	; (8007f60 <vPortSetupTimerInterrupt+0x34>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f36:	4b0b      	ldr	r3, [pc, #44]	; (8007f64 <vPortSetupTimerInterrupt+0x38>)
 8007f38:	2200      	movs	r2, #0
 8007f3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f3c:	4b0a      	ldr	r3, [pc, #40]	; (8007f68 <vPortSetupTimerInterrupt+0x3c>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a0a      	ldr	r2, [pc, #40]	; (8007f6c <vPortSetupTimerInterrupt+0x40>)
 8007f42:	fba2 2303 	umull	r2, r3, r2, r3
 8007f46:	099b      	lsrs	r3, r3, #6
 8007f48:	4a09      	ldr	r2, [pc, #36]	; (8007f70 <vPortSetupTimerInterrupt+0x44>)
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f4e:	4b04      	ldr	r3, [pc, #16]	; (8007f60 <vPortSetupTimerInterrupt+0x34>)
 8007f50:	2207      	movs	r2, #7
 8007f52:	601a      	str	r2, [r3, #0]
}
 8007f54:	bf00      	nop
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	e000e010 	.word	0xe000e010
 8007f64:	e000e018 	.word	0xe000e018
 8007f68:	20000018 	.word	0x20000018
 8007f6c:	10624dd3 	.word	0x10624dd3
 8007f70:	e000e014 	.word	0xe000e014

08007f74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007f84 <vPortEnableVFP+0x10>
 8007f78:	6801      	ldr	r1, [r0, #0]
 8007f7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f7e:	6001      	str	r1, [r0, #0]
 8007f80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f82:	bf00      	nop
 8007f84:	e000ed88 	.word	0xe000ed88

08007f88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f8e:	f3ef 8305 	mrs	r3, IPSR
 8007f92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2b0f      	cmp	r3, #15
 8007f98:	d914      	bls.n	8007fc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f9a:	4a17      	ldr	r2, [pc, #92]	; (8007ff8 <vPortValidateInterruptPriority+0x70>)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007fa4:	4b15      	ldr	r3, [pc, #84]	; (8007ffc <vPortValidateInterruptPriority+0x74>)
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	7afa      	ldrb	r2, [r7, #11]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d20a      	bcs.n	8007fc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	607b      	str	r3, [r7, #4]
}
 8007fc0:	bf00      	nop
 8007fc2:	e7fe      	b.n	8007fc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007fc4:	4b0e      	ldr	r3, [pc, #56]	; (8008000 <vPortValidateInterruptPriority+0x78>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007fcc:	4b0d      	ldr	r3, [pc, #52]	; (8008004 <vPortValidateInterruptPriority+0x7c>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d90a      	bls.n	8007fea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	603b      	str	r3, [r7, #0]
}
 8007fe6:	bf00      	nop
 8007fe8:	e7fe      	b.n	8007fe8 <vPortValidateInterruptPriority+0x60>
	}
 8007fea:	bf00      	nop
 8007fec:	3714      	adds	r7, #20
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	e000e3f0 	.word	0xe000e3f0
 8007ffc:	200003c8 	.word	0x200003c8
 8008000:	e000ed0c 	.word	0xe000ed0c
 8008004:	200003cc 	.word	0x200003cc

08008008 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b08a      	sub	sp, #40	; 0x28
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008010:	2300      	movs	r3, #0
 8008012:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008014:	f7fe fc90 	bl	8006938 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008018:	4b5b      	ldr	r3, [pc, #364]	; (8008188 <pvPortMalloc+0x180>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d101      	bne.n	8008024 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008020:	f000 f920 	bl	8008264 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008024:	4b59      	ldr	r3, [pc, #356]	; (800818c <pvPortMalloc+0x184>)
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4013      	ands	r3, r2
 800802c:	2b00      	cmp	r3, #0
 800802e:	f040 8093 	bne.w	8008158 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d01d      	beq.n	8008074 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008038:	2208      	movs	r2, #8
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4413      	add	r3, r2
 800803e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f003 0307 	and.w	r3, r3, #7
 8008046:	2b00      	cmp	r3, #0
 8008048:	d014      	beq.n	8008074 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f023 0307 	bic.w	r3, r3, #7
 8008050:	3308      	adds	r3, #8
 8008052:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f003 0307 	and.w	r3, r3, #7
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00a      	beq.n	8008074 <pvPortMalloc+0x6c>
	__asm volatile
 800805e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008062:	f383 8811 	msr	BASEPRI, r3
 8008066:	f3bf 8f6f 	isb	sy
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	617b      	str	r3, [r7, #20]
}
 8008070:	bf00      	nop
 8008072:	e7fe      	b.n	8008072 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d06e      	beq.n	8008158 <pvPortMalloc+0x150>
 800807a:	4b45      	ldr	r3, [pc, #276]	; (8008190 <pvPortMalloc+0x188>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	429a      	cmp	r2, r3
 8008082:	d869      	bhi.n	8008158 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008084:	4b43      	ldr	r3, [pc, #268]	; (8008194 <pvPortMalloc+0x18c>)
 8008086:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008088:	4b42      	ldr	r3, [pc, #264]	; (8008194 <pvPortMalloc+0x18c>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800808e:	e004      	b.n	800809a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800809a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d903      	bls.n	80080ac <pvPortMalloc+0xa4>
 80080a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d1f1      	bne.n	8008090 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80080ac:	4b36      	ldr	r3, [pc, #216]	; (8008188 <pvPortMalloc+0x180>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d050      	beq.n	8008158 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2208      	movs	r2, #8
 80080bc:	4413      	add	r3, r2
 80080be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80080c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	6a3b      	ldr	r3, [r7, #32]
 80080c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80080c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ca:	685a      	ldr	r2, [r3, #4]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	1ad2      	subs	r2, r2, r3
 80080d0:	2308      	movs	r3, #8
 80080d2:	005b      	lsls	r3, r3, #1
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d91f      	bls.n	8008118 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80080d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4413      	add	r3, r2
 80080de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	f003 0307 	and.w	r3, r3, #7
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00a      	beq.n	8008100 <pvPortMalloc+0xf8>
	__asm volatile
 80080ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ee:	f383 8811 	msr	BASEPRI, r3
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	f3bf 8f4f 	dsb	sy
 80080fa:	613b      	str	r3, [r7, #16]
}
 80080fc:	bf00      	nop
 80080fe:	e7fe      	b.n	80080fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	685a      	ldr	r2, [r3, #4]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	1ad2      	subs	r2, r2, r3
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008112:	69b8      	ldr	r0, [r7, #24]
 8008114:	f000 f908 	bl	8008328 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008118:	4b1d      	ldr	r3, [pc, #116]	; (8008190 <pvPortMalloc+0x188>)
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	4a1b      	ldr	r2, [pc, #108]	; (8008190 <pvPortMalloc+0x188>)
 8008124:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008126:	4b1a      	ldr	r3, [pc, #104]	; (8008190 <pvPortMalloc+0x188>)
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	4b1b      	ldr	r3, [pc, #108]	; (8008198 <pvPortMalloc+0x190>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	429a      	cmp	r2, r3
 8008130:	d203      	bcs.n	800813a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008132:	4b17      	ldr	r3, [pc, #92]	; (8008190 <pvPortMalloc+0x188>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a18      	ldr	r2, [pc, #96]	; (8008198 <pvPortMalloc+0x190>)
 8008138:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	4b13      	ldr	r3, [pc, #76]	; (800818c <pvPortMalloc+0x184>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	431a      	orrs	r2, r3
 8008144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008146:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814a:	2200      	movs	r2, #0
 800814c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800814e:	4b13      	ldr	r3, [pc, #76]	; (800819c <pvPortMalloc+0x194>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	3301      	adds	r3, #1
 8008154:	4a11      	ldr	r2, [pc, #68]	; (800819c <pvPortMalloc+0x194>)
 8008156:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008158:	f7fe fbfc 	bl	8006954 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	f003 0307 	and.w	r3, r3, #7
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00a      	beq.n	800817c <pvPortMalloc+0x174>
	__asm volatile
 8008166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	60fb      	str	r3, [r7, #12]
}
 8008178:	bf00      	nop
 800817a:	e7fe      	b.n	800817a <pvPortMalloc+0x172>
	return pvReturn;
 800817c:	69fb      	ldr	r3, [r7, #28]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3728      	adds	r7, #40	; 0x28
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	20003fd8 	.word	0x20003fd8
 800818c:	20003fec 	.word	0x20003fec
 8008190:	20003fdc 	.word	0x20003fdc
 8008194:	20003fd0 	.word	0x20003fd0
 8008198:	20003fe0 	.word	0x20003fe0
 800819c:	20003fe4 	.word	0x20003fe4

080081a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d04d      	beq.n	800824e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80081b2:	2308      	movs	r3, #8
 80081b4:	425b      	negs	r3, r3
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	4413      	add	r3, r2
 80081ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	685a      	ldr	r2, [r3, #4]
 80081c4:	4b24      	ldr	r3, [pc, #144]	; (8008258 <vPortFree+0xb8>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4013      	ands	r3, r2
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10a      	bne.n	80081e4 <vPortFree+0x44>
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	60fb      	str	r3, [r7, #12]
}
 80081e0:	bf00      	nop
 80081e2:	e7fe      	b.n	80081e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00a      	beq.n	8008202 <vPortFree+0x62>
	__asm volatile
 80081ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f0:	f383 8811 	msr	BASEPRI, r3
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	60bb      	str	r3, [r7, #8]
}
 80081fe:	bf00      	nop
 8008200:	e7fe      	b.n	8008200 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	685a      	ldr	r2, [r3, #4]
 8008206:	4b14      	ldr	r3, [pc, #80]	; (8008258 <vPortFree+0xb8>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4013      	ands	r3, r2
 800820c:	2b00      	cmp	r3, #0
 800820e:	d01e      	beq.n	800824e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d11a      	bne.n	800824e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	685a      	ldr	r2, [r3, #4]
 800821c:	4b0e      	ldr	r3, [pc, #56]	; (8008258 <vPortFree+0xb8>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	43db      	mvns	r3, r3
 8008222:	401a      	ands	r2, r3
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008228:	f7fe fb86 	bl	8006938 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	4b0a      	ldr	r3, [pc, #40]	; (800825c <vPortFree+0xbc>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4413      	add	r3, r2
 8008236:	4a09      	ldr	r2, [pc, #36]	; (800825c <vPortFree+0xbc>)
 8008238:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800823a:	6938      	ldr	r0, [r7, #16]
 800823c:	f000 f874 	bl	8008328 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008240:	4b07      	ldr	r3, [pc, #28]	; (8008260 <vPortFree+0xc0>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	3301      	adds	r3, #1
 8008246:	4a06      	ldr	r2, [pc, #24]	; (8008260 <vPortFree+0xc0>)
 8008248:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800824a:	f7fe fb83 	bl	8006954 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800824e:	bf00      	nop
 8008250:	3718      	adds	r7, #24
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20003fec 	.word	0x20003fec
 800825c:	20003fdc 	.word	0x20003fdc
 8008260:	20003fe8 	.word	0x20003fe8

08008264 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800826a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800826e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008270:	4b27      	ldr	r3, [pc, #156]	; (8008310 <prvHeapInit+0xac>)
 8008272:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f003 0307 	and.w	r3, r3, #7
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00c      	beq.n	8008298 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	3307      	adds	r3, #7
 8008282:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f023 0307 	bic.w	r3, r3, #7
 800828a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	4a1f      	ldr	r2, [pc, #124]	; (8008310 <prvHeapInit+0xac>)
 8008294:	4413      	add	r3, r2
 8008296:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800829c:	4a1d      	ldr	r2, [pc, #116]	; (8008314 <prvHeapInit+0xb0>)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80082a2:	4b1c      	ldr	r3, [pc, #112]	; (8008314 <prvHeapInit+0xb0>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	4413      	add	r3, r2
 80082ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80082b0:	2208      	movs	r2, #8
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	1a9b      	subs	r3, r3, r2
 80082b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f023 0307 	bic.w	r3, r3, #7
 80082be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	4a15      	ldr	r2, [pc, #84]	; (8008318 <prvHeapInit+0xb4>)
 80082c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80082c6:	4b14      	ldr	r3, [pc, #80]	; (8008318 <prvHeapInit+0xb4>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2200      	movs	r2, #0
 80082cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80082ce:	4b12      	ldr	r3, [pc, #72]	; (8008318 <prvHeapInit+0xb4>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2200      	movs	r2, #0
 80082d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	1ad2      	subs	r2, r2, r3
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80082e4:	4b0c      	ldr	r3, [pc, #48]	; (8008318 <prvHeapInit+0xb4>)
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	4a0a      	ldr	r2, [pc, #40]	; (800831c <prvHeapInit+0xb8>)
 80082f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	4a09      	ldr	r2, [pc, #36]	; (8008320 <prvHeapInit+0xbc>)
 80082fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80082fc:	4b09      	ldr	r3, [pc, #36]	; (8008324 <prvHeapInit+0xc0>)
 80082fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008302:	601a      	str	r2, [r3, #0]
}
 8008304:	bf00      	nop
 8008306:	3714      	adds	r7, #20
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	200003d0 	.word	0x200003d0
 8008314:	20003fd0 	.word	0x20003fd0
 8008318:	20003fd8 	.word	0x20003fd8
 800831c:	20003fe0 	.word	0x20003fe0
 8008320:	20003fdc 	.word	0x20003fdc
 8008324:	20003fec 	.word	0x20003fec

08008328 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008330:	4b28      	ldr	r3, [pc, #160]	; (80083d4 <prvInsertBlockIntoFreeList+0xac>)
 8008332:	60fb      	str	r3, [r7, #12]
 8008334:	e002      	b.n	800833c <prvInsertBlockIntoFreeList+0x14>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	60fb      	str	r3, [r7, #12]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	429a      	cmp	r2, r3
 8008344:	d8f7      	bhi.n	8008336 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	4413      	add	r3, r2
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	429a      	cmp	r2, r3
 8008356:	d108      	bne.n	800836a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	685a      	ldr	r2, [r3, #4]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	441a      	add	r2, r3
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	68ba      	ldr	r2, [r7, #8]
 8008374:	441a      	add	r2, r3
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	429a      	cmp	r2, r3
 800837c:	d118      	bne.n	80083b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	4b15      	ldr	r3, [pc, #84]	; (80083d8 <prvInsertBlockIntoFreeList+0xb0>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	429a      	cmp	r2, r3
 8008388:	d00d      	beq.n	80083a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	685a      	ldr	r2, [r3, #4]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	441a      	add	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	601a      	str	r2, [r3, #0]
 80083a4:	e008      	b.n	80083b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80083a6:	4b0c      	ldr	r3, [pc, #48]	; (80083d8 <prvInsertBlockIntoFreeList+0xb0>)
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	601a      	str	r2, [r3, #0]
 80083ae:	e003      	b.n	80083b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d002      	beq.n	80083c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083c6:	bf00      	nop
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	20003fd0 	.word	0x20003fd0
 80083d8:	20003fd8 	.word	0x20003fd8

080083dc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7fd f8f2 	bl	80055d4 <USBH_LL_IncTimer>
}
 80083f0:	bf00      	nop
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008406:	4618      	mov	r0, r3
 8008408:	f7fd f936 	bl	8005678 <USBH_LL_Connect>
}
 800840c:	bf00      	nop
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008422:	4618      	mov	r0, r3
 8008424:	f7fd f94b 	bl	80056be <USBH_LL_Disconnect>
}
 8008428:	bf00      	nop
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	460b      	mov	r3, r1
 800843a:	70fb      	strb	r3, [r7, #3]
 800843c:	4613      	mov	r3, r2
 800843e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008446:	4618      	mov	r0, r3
 8008448:	f7fd f96b 	bl	8005722 <USBH_LL_NotifyURBChange>
#endif
}
 800844c:	bf00      	nop
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008462:	4618      	mov	r0, r3
 8008464:	f7fd f8e0 	bl	8005628 <USBH_LL_PortEnabled>
}
 8008468:	bf00      	nop
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800847e:	4618      	mov	r0, r3
 8008480:	f7fd f8ec 	bl	800565c <USBH_LL_PortDisabled>
}
 8008484:	bf00      	nop
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008494:	2300      	movs	r3, #0
 8008496:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008498:	2300      	movs	r3, #0
 800849a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7f9 f9ed 	bl	8001882 <HAL_HCD_Stop>
 80084a8:	4603      	mov	r3, r0
 80084aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 f808 	bl	80084c4 <USBH_Get_USB_Status>
 80084b4:	4603      	mov	r3, r0
 80084b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
	...

080084c4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	4603      	mov	r3, r0
 80084cc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084ce:	2300      	movs	r3, #0
 80084d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80084d2:	79fb      	ldrb	r3, [r7, #7]
 80084d4:	2b03      	cmp	r3, #3
 80084d6:	d817      	bhi.n	8008508 <USBH_Get_USB_Status+0x44>
 80084d8:	a201      	add	r2, pc, #4	; (adr r2, 80084e0 <USBH_Get_USB_Status+0x1c>)
 80084da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084de:	bf00      	nop
 80084e0:	080084f1 	.word	0x080084f1
 80084e4:	080084f7 	.word	0x080084f7
 80084e8:	080084fd 	.word	0x080084fd
 80084ec:	08008503 	.word	0x08008503
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80084f0:	2300      	movs	r3, #0
 80084f2:	73fb      	strb	r3, [r7, #15]
    break;
 80084f4:	e00b      	b.n	800850e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80084f6:	2302      	movs	r3, #2
 80084f8:	73fb      	strb	r3, [r7, #15]
    break;
 80084fa:	e008      	b.n	800850e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80084fc:	2301      	movs	r3, #1
 80084fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008500:	e005      	b.n	800850e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008502:	2302      	movs	r3, #2
 8008504:	73fb      	strb	r3, [r7, #15]
    break;
 8008506:	e002      	b.n	800850e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008508:	2302      	movs	r3, #2
 800850a:	73fb      	strb	r3, [r7, #15]
    break;
 800850c:	bf00      	nop
  }
  return usb_status;
 800850e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3714      	adds	r7, #20
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <__malloc_lock>:
 800851c:	4801      	ldr	r0, [pc, #4]	; (8008524 <__malloc_lock+0x8>)
 800851e:	f000 b88b 	b.w	8008638 <__retarget_lock_acquire_recursive>
 8008522:	bf00      	nop
 8008524:	2000450c 	.word	0x2000450c

08008528 <__malloc_unlock>:
 8008528:	4801      	ldr	r0, [pc, #4]	; (8008530 <__malloc_unlock+0x8>)
 800852a:	f000 b886 	b.w	800863a <__retarget_lock_release_recursive>
 800852e:	bf00      	nop
 8008530:	2000450c 	.word	0x2000450c

08008534 <memset>:
 8008534:	4402      	add	r2, r0
 8008536:	4603      	mov	r3, r0
 8008538:	4293      	cmp	r3, r2
 800853a:	d100      	bne.n	800853e <memset+0xa>
 800853c:	4770      	bx	lr
 800853e:	f803 1b01 	strb.w	r1, [r3], #1
 8008542:	e7f9      	b.n	8008538 <memset+0x4>

08008544 <_reclaim_reent>:
 8008544:	4b29      	ldr	r3, [pc, #164]	; (80085ec <_reclaim_reent+0xa8>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4283      	cmp	r3, r0
 800854a:	b570      	push	{r4, r5, r6, lr}
 800854c:	4604      	mov	r4, r0
 800854e:	d04b      	beq.n	80085e8 <_reclaim_reent+0xa4>
 8008550:	69c3      	ldr	r3, [r0, #28]
 8008552:	b143      	cbz	r3, 8008566 <_reclaim_reent+0x22>
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d144      	bne.n	80085e4 <_reclaim_reent+0xa0>
 800855a:	69e3      	ldr	r3, [r4, #28]
 800855c:	6819      	ldr	r1, [r3, #0]
 800855e:	b111      	cbz	r1, 8008566 <_reclaim_reent+0x22>
 8008560:	4620      	mov	r0, r4
 8008562:	f000 f879 	bl	8008658 <_free_r>
 8008566:	6961      	ldr	r1, [r4, #20]
 8008568:	b111      	cbz	r1, 8008570 <_reclaim_reent+0x2c>
 800856a:	4620      	mov	r0, r4
 800856c:	f000 f874 	bl	8008658 <_free_r>
 8008570:	69e1      	ldr	r1, [r4, #28]
 8008572:	b111      	cbz	r1, 800857a <_reclaim_reent+0x36>
 8008574:	4620      	mov	r0, r4
 8008576:	f000 f86f 	bl	8008658 <_free_r>
 800857a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800857c:	b111      	cbz	r1, 8008584 <_reclaim_reent+0x40>
 800857e:	4620      	mov	r0, r4
 8008580:	f000 f86a 	bl	8008658 <_free_r>
 8008584:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008586:	b111      	cbz	r1, 800858e <_reclaim_reent+0x4a>
 8008588:	4620      	mov	r0, r4
 800858a:	f000 f865 	bl	8008658 <_free_r>
 800858e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008590:	b111      	cbz	r1, 8008598 <_reclaim_reent+0x54>
 8008592:	4620      	mov	r0, r4
 8008594:	f000 f860 	bl	8008658 <_free_r>
 8008598:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800859a:	b111      	cbz	r1, 80085a2 <_reclaim_reent+0x5e>
 800859c:	4620      	mov	r0, r4
 800859e:	f000 f85b 	bl	8008658 <_free_r>
 80085a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80085a4:	b111      	cbz	r1, 80085ac <_reclaim_reent+0x68>
 80085a6:	4620      	mov	r0, r4
 80085a8:	f000 f856 	bl	8008658 <_free_r>
 80085ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80085ae:	b111      	cbz	r1, 80085b6 <_reclaim_reent+0x72>
 80085b0:	4620      	mov	r0, r4
 80085b2:	f000 f851 	bl	8008658 <_free_r>
 80085b6:	6a23      	ldr	r3, [r4, #32]
 80085b8:	b1b3      	cbz	r3, 80085e8 <_reclaim_reent+0xa4>
 80085ba:	4620      	mov	r0, r4
 80085bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80085c0:	4718      	bx	r3
 80085c2:	5949      	ldr	r1, [r1, r5]
 80085c4:	b941      	cbnz	r1, 80085d8 <_reclaim_reent+0x94>
 80085c6:	3504      	adds	r5, #4
 80085c8:	69e3      	ldr	r3, [r4, #28]
 80085ca:	2d80      	cmp	r5, #128	; 0x80
 80085cc:	68d9      	ldr	r1, [r3, #12]
 80085ce:	d1f8      	bne.n	80085c2 <_reclaim_reent+0x7e>
 80085d0:	4620      	mov	r0, r4
 80085d2:	f000 f841 	bl	8008658 <_free_r>
 80085d6:	e7c0      	b.n	800855a <_reclaim_reent+0x16>
 80085d8:	680e      	ldr	r6, [r1, #0]
 80085da:	4620      	mov	r0, r4
 80085dc:	f000 f83c 	bl	8008658 <_free_r>
 80085e0:	4631      	mov	r1, r6
 80085e2:	e7ef      	b.n	80085c4 <_reclaim_reent+0x80>
 80085e4:	2500      	movs	r5, #0
 80085e6:	e7ef      	b.n	80085c8 <_reclaim_reent+0x84>
 80085e8:	bd70      	pop	{r4, r5, r6, pc}
 80085ea:	bf00      	nop
 80085ec:	20000074 	.word	0x20000074

080085f0 <__libc_init_array>:
 80085f0:	b570      	push	{r4, r5, r6, lr}
 80085f2:	4d0d      	ldr	r5, [pc, #52]	; (8008628 <__libc_init_array+0x38>)
 80085f4:	4c0d      	ldr	r4, [pc, #52]	; (800862c <__libc_init_array+0x3c>)
 80085f6:	1b64      	subs	r4, r4, r5
 80085f8:	10a4      	asrs	r4, r4, #2
 80085fa:	2600      	movs	r6, #0
 80085fc:	42a6      	cmp	r6, r4
 80085fe:	d109      	bne.n	8008614 <__libc_init_array+0x24>
 8008600:	4d0b      	ldr	r5, [pc, #44]	; (8008630 <__libc_init_array+0x40>)
 8008602:	4c0c      	ldr	r4, [pc, #48]	; (8008634 <__libc_init_array+0x44>)
 8008604:	f000 f874 	bl	80086f0 <_init>
 8008608:	1b64      	subs	r4, r4, r5
 800860a:	10a4      	asrs	r4, r4, #2
 800860c:	2600      	movs	r6, #0
 800860e:	42a6      	cmp	r6, r4
 8008610:	d105      	bne.n	800861e <__libc_init_array+0x2e>
 8008612:	bd70      	pop	{r4, r5, r6, pc}
 8008614:	f855 3b04 	ldr.w	r3, [r5], #4
 8008618:	4798      	blx	r3
 800861a:	3601      	adds	r6, #1
 800861c:	e7ee      	b.n	80085fc <__libc_init_array+0xc>
 800861e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008622:	4798      	blx	r3
 8008624:	3601      	adds	r6, #1
 8008626:	e7f2      	b.n	800860e <__libc_init_array+0x1e>
 8008628:	08008780 	.word	0x08008780
 800862c:	08008780 	.word	0x08008780
 8008630:	08008780 	.word	0x08008780
 8008634:	08008784 	.word	0x08008784

08008638 <__retarget_lock_acquire_recursive>:
 8008638:	4770      	bx	lr

0800863a <__retarget_lock_release_recursive>:
 800863a:	4770      	bx	lr

0800863c <memcpy>:
 800863c:	440a      	add	r2, r1
 800863e:	4291      	cmp	r1, r2
 8008640:	f100 33ff 	add.w	r3, r0, #4294967295
 8008644:	d100      	bne.n	8008648 <memcpy+0xc>
 8008646:	4770      	bx	lr
 8008648:	b510      	push	{r4, lr}
 800864a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800864e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008652:	4291      	cmp	r1, r2
 8008654:	d1f9      	bne.n	800864a <memcpy+0xe>
 8008656:	bd10      	pop	{r4, pc}

08008658 <_free_r>:
 8008658:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800865a:	2900      	cmp	r1, #0
 800865c:	d044      	beq.n	80086e8 <_free_r+0x90>
 800865e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008662:	9001      	str	r0, [sp, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	f1a1 0404 	sub.w	r4, r1, #4
 800866a:	bfb8      	it	lt
 800866c:	18e4      	addlt	r4, r4, r3
 800866e:	f7ff ff55 	bl	800851c <__malloc_lock>
 8008672:	4a1e      	ldr	r2, [pc, #120]	; (80086ec <_free_r+0x94>)
 8008674:	9801      	ldr	r0, [sp, #4]
 8008676:	6813      	ldr	r3, [r2, #0]
 8008678:	b933      	cbnz	r3, 8008688 <_free_r+0x30>
 800867a:	6063      	str	r3, [r4, #4]
 800867c:	6014      	str	r4, [r2, #0]
 800867e:	b003      	add	sp, #12
 8008680:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008684:	f7ff bf50 	b.w	8008528 <__malloc_unlock>
 8008688:	42a3      	cmp	r3, r4
 800868a:	d908      	bls.n	800869e <_free_r+0x46>
 800868c:	6825      	ldr	r5, [r4, #0]
 800868e:	1961      	adds	r1, r4, r5
 8008690:	428b      	cmp	r3, r1
 8008692:	bf01      	itttt	eq
 8008694:	6819      	ldreq	r1, [r3, #0]
 8008696:	685b      	ldreq	r3, [r3, #4]
 8008698:	1949      	addeq	r1, r1, r5
 800869a:	6021      	streq	r1, [r4, #0]
 800869c:	e7ed      	b.n	800867a <_free_r+0x22>
 800869e:	461a      	mov	r2, r3
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	b10b      	cbz	r3, 80086a8 <_free_r+0x50>
 80086a4:	42a3      	cmp	r3, r4
 80086a6:	d9fa      	bls.n	800869e <_free_r+0x46>
 80086a8:	6811      	ldr	r1, [r2, #0]
 80086aa:	1855      	adds	r5, r2, r1
 80086ac:	42a5      	cmp	r5, r4
 80086ae:	d10b      	bne.n	80086c8 <_free_r+0x70>
 80086b0:	6824      	ldr	r4, [r4, #0]
 80086b2:	4421      	add	r1, r4
 80086b4:	1854      	adds	r4, r2, r1
 80086b6:	42a3      	cmp	r3, r4
 80086b8:	6011      	str	r1, [r2, #0]
 80086ba:	d1e0      	bne.n	800867e <_free_r+0x26>
 80086bc:	681c      	ldr	r4, [r3, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	6053      	str	r3, [r2, #4]
 80086c2:	440c      	add	r4, r1
 80086c4:	6014      	str	r4, [r2, #0]
 80086c6:	e7da      	b.n	800867e <_free_r+0x26>
 80086c8:	d902      	bls.n	80086d0 <_free_r+0x78>
 80086ca:	230c      	movs	r3, #12
 80086cc:	6003      	str	r3, [r0, #0]
 80086ce:	e7d6      	b.n	800867e <_free_r+0x26>
 80086d0:	6825      	ldr	r5, [r4, #0]
 80086d2:	1961      	adds	r1, r4, r5
 80086d4:	428b      	cmp	r3, r1
 80086d6:	bf04      	itt	eq
 80086d8:	6819      	ldreq	r1, [r3, #0]
 80086da:	685b      	ldreq	r3, [r3, #4]
 80086dc:	6063      	str	r3, [r4, #4]
 80086de:	bf04      	itt	eq
 80086e0:	1949      	addeq	r1, r1, r5
 80086e2:	6021      	streq	r1, [r4, #0]
 80086e4:	6054      	str	r4, [r2, #4]
 80086e6:	e7ca      	b.n	800867e <_free_r+0x26>
 80086e8:	b003      	add	sp, #12
 80086ea:	bd30      	pop	{r4, r5, pc}
 80086ec:	200043d0 	.word	0x200043d0

080086f0 <_init>:
 80086f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f2:	bf00      	nop
 80086f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086f6:	bc08      	pop	{r3}
 80086f8:	469e      	mov	lr, r3
 80086fa:	4770      	bx	lr

080086fc <_fini>:
 80086fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fe:	bf00      	nop
 8008700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008702:	bc08      	pop	{r3}
 8008704:	469e      	mov	lr, r3
 8008706:	4770      	bx	lr
