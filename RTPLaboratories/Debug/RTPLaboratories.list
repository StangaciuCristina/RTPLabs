
RTPLaboratories.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08008288  08008288  00018288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082cc  080082cc  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080082cc  080082cc  000182cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082d4  080082d4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082d4  080082d4  000182d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082d8  080082d8  000182d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080082dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00004498  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200044f8  200044f8  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001dd7f  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000048e4  00000000  00000000  0003de52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b70  00000000  00000000  00042738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001541  00000000  00000000  000442a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000255cc  00000000  00000000  000457e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000219ca  00000000  00000000  0006adb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dc8b2  00000000  00000000  0008c77f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000777c  00000000  00000000  00169034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  001707b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008270 	.word	0x08008270

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08008270 	.word	0x08008270

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <vHandlerTask>:
/* Stores the handle of the task to which interrupt processing is deferred. */
static TaskHandle_t xHandlerTask = NULL;


static void vHandlerTask( void *pvParameters )
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	/* xMaxExpectedBlockTime is set to be a little longer than the maximum expected
	time between events. */
	const TickType_t xMaxExpectedBlockTime = xInterruptFrequency + pdMS_TO_TICKS( 10 );
 80004d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004d8:	330a      	adds	r3, #10
 80004da:	60fb      	str	r3, [r7, #12]
		{
			/* Wait to receive a notification sent directly to this task from the
			interrupt handler.  The xClearCountOnExit parameter is now pdFALSE, so
			the task's notification will be decremented when ulTaskNotifyTake()
			returns having received a notification. */
			if( ulTaskNotifyTake( pdFALSE, xMaxExpectedBlockTime ) != 0 )
 80004dc:	68f9      	ldr	r1, [r7, #12]
 80004de:	2000      	movs	r0, #0
 80004e0:	f006 fc92 	bl	8006e08 <ulTaskNotifyTake>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d0f8      	beq.n	80004dc <vHandlerTask+0x10>
			{
				/* To get here the event must have occurred.  Process the event (in
				this case just print out a message). */
				HAL_GPIO_TogglePin(GPIOD, BLUE_LED);
 80004ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004ee:	4802      	ldr	r0, [pc, #8]	; (80004f8 <vHandlerTask+0x2c>)
 80004f0:	f000 ffcd 	bl	800148e <HAL_GPIO_TogglePin>
			if( ulTaskNotifyTake( pdFALSE, xMaxExpectedBlockTime ) != 0 )
 80004f4:	e7f2      	b.n	80004dc <vHandlerTask+0x10>
 80004f6:	bf00      	nop
 80004f8:	40020c00 	.word	0x40020c00

080004fc <vPeriodicTask>:
		}
}
/*-----------------------------------------------------------*/

static void vPeriodicTask( void *pvParameters )
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	for( ;; )
	{
		/* This task is just used to 'simulate' an interrupt.  This is done by
		periodically generating a simulated software interrupt.  Block until it
		is time to generate the software interrupt again. */
		vTaskDelay( xInterruptFrequency );
 8000504:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000508:	4618      	mov	r0, r3
 800050a:	f005 ff89 	bl	8006420 <vTaskDelay>

		The syntax used to generate a software interrupt is dependent on the
		FreeRTOS port being used.  The syntax used below can only be used with
		the FreeRTOS Windows port, in which such interrupts are only
		simulated. */
		HAL_GPIO_TogglePin(GPIOD, GREEN_LED);
 800050e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000512:	4802      	ldr	r0, [pc, #8]	; (800051c <vPeriodicTask+0x20>)
 8000514:	f000 ffbb 	bl	800148e <HAL_GPIO_TogglePin>
		vTaskDelay( xInterruptFrequency );
 8000518:	e7f4      	b.n	8000504 <vPeriodicTask+0x8>
 800051a:	bf00      	nop
 800051c:	40020c00 	.word	0x40020c00

08000520 <EXTI0_IRQHandler>:
	}
}

void EXTI0_IRQHandler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken;

	/* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE as
	it will get set to pdTRUE inside the interrupt safe API function if a
	context switch is required. */
	xHigherPriorityTaskWoken = pdFALSE;
 8000526:	2300      	movs	r3, #0
 8000528:	607b      	str	r3, [r7, #4]

	/* Send a notification to the handler task multiple times.  The first will
	unblock the task, the following 'gives' are to demonstrate that the
	receiving task's notification value is being used to latch events - allowing
	the task to process the events in turn. */
	vTaskNotifyGiveFromISR( xHandlerTask, &xHigherPriorityTaskWoken );
 800052a:	4b10      	ldr	r3, [pc, #64]	; (800056c <EXTI0_IRQHandler+0x4c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	1d3a      	adds	r2, r7, #4
 8000530:	4611      	mov	r1, r2
 8000532:	4618      	mov	r0, r3
 8000534:	f006 fcb4 	bl	8006ea0 <vTaskNotifyGiveFromISR>
	vTaskNotifyGiveFromISR( xHandlerTask, &xHigherPriorityTaskWoken );
 8000538:	4b0c      	ldr	r3, [pc, #48]	; (800056c <EXTI0_IRQHandler+0x4c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	1d3a      	adds	r2, r7, #4
 800053e:	4611      	mov	r1, r2
 8000540:	4618      	mov	r0, r3
 8000542:	f006 fcad 	bl	8006ea0 <vTaskNotifyGiveFromISR>
	vTaskNotifyGiveFromISR( xHandlerTask, &xHigherPriorityTaskWoken );
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <EXTI0_IRQHandler+0x4c>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	1d3a      	adds	r2, r7, #4
 800054c:	4611      	mov	r1, r2
 800054e:	4618      	mov	r0, r3
 8000550:	f006 fca6 	bl	8006ea0 <vTaskNotifyGiveFromISR>


  HAL_GPIO_TogglePin(GPIOD, RED_LED);
 8000554:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000558:	4805      	ldr	r0, [pc, #20]	; (8000570 <EXTI0_IRQHandler+0x50>)
 800055a:	f000 ff98 	bl	800148e <HAL_GPIO_TogglePin>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800055e:	2001      	movs	r0, #1
 8000560:	f000 ffb0 	bl	80014c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	2000007c 	.word	0x2000007c
 8000570:	40020c00 	.word	0x40020c00

08000574 <application25>:


void application25(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af02      	add	r7, sp, #8
	processing is deferred, and so is the task that will be synchronized
	with the interrupt.  The handler task is created with a high priority to
	ensure it runs immediately after the interrupt exits.  In this case a
	priority of 3 is chosen.  The handle of the task is saved for use by the
	ISR. */
	xTaskCreate( vHandlerTask, "Handler", 1000, NULL, 3, &xHandlerTask );
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <application25+0x38>)
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	2303      	movs	r3, #3
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2300      	movs	r3, #0
 8000584:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000588:	4909      	ldr	r1, [pc, #36]	; (80005b0 <application25+0x3c>)
 800058a:	480a      	ldr	r0, [pc, #40]	; (80005b4 <application25+0x40>)
 800058c:	f005 fdfe 	bl	800618c <xTaskCreate>

	/* Create the task that will periodically generate a software interrupt.
	This is created with a priority below the handler task to ensure it will
	get preempted each time the handler task exits the Blocked state. */
	xTaskCreate( vPeriodicTask, "Periodic", 1000, NULL, 1, NULL );
 8000590:	2300      	movs	r3, #0
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	2301      	movs	r3, #1
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2300      	movs	r3, #0
 800059a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800059e:	4906      	ldr	r1, [pc, #24]	; (80005b8 <application25+0x44>)
 80005a0:	4806      	ldr	r0, [pc, #24]	; (80005bc <application25+0x48>)
 80005a2:	f005 fdf3 	bl	800618c <xTaskCreate>


}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	2000007c 	.word	0x2000007c
 80005b0:	08008288 	.word	0x08008288
 80005b4:	080004cd 	.word	0x080004cd
 80005b8:	08008290 	.word	0x08008290
 80005bc:	080004fd 	.word	0x080004fd

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fc8a 	bl	8000edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f810 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f930 	bl	8000830 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005d0:	f000 f876 	bl	80006c0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005d4:	f000 f8a2 	bl	800071c <MX_I2S3_Init>
  MX_SPI1_Init();
 80005d8:	f000 f8d0 	bl	800077c <MX_SPI1_Init>
  MX_TIM11_Init();
 80005dc:	f000 f904 	bl	80007e8 <MX_TIM11_Init>
  /* definition and creation of defaultTask */


  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	application25();
 80005e0:	f7ff ffc8 	bl	8000574 <application25>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 80005e4:	f005 ff50 	bl	8006488 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80005e8:	e7fe      	b.n	80005e8 <main+0x28>
	...

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	; 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f007 fd5a 	bl	80080b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <SystemClock_Config+0xcc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a27      	ldr	r2, [pc, #156]	; (80006b8 <SystemClock_Config+0xcc>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <SystemClock_Config+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b22      	ldr	r3, [pc, #136]	; (80006bc <SystemClock_Config+0xd0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a21      	ldr	r2, [pc, #132]	; (80006bc <SystemClock_Config+0xd0>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2301      	movs	r3, #1
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800065c:	2308      	movs	r3, #8
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000660:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000664:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800066a:	2307      	movs	r3, #7
 800066c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	4618      	mov	r0, r3
 8000674:	f003 faba 	bl	8003bec <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800067e:	f000 f9ef 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2302      	movs	r3, #2
 8000688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000692:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000698:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2105      	movs	r1, #5
 80006a0:	4618      	mov	r0, r3
 80006a2:	f003 fd1b 	bl	80040dc <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006ac:	f000 f9d8 	bl	8000a60 <Error_Handler>
  }
}
 80006b0:	bf00      	nop
 80006b2:	3750      	adds	r7, #80	; 0x50
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_I2C1_Init+0x50>)
 80006c6:	4a13      	ldr	r2, [pc, #76]	; (8000714 <MX_I2C1_Init+0x54>)
 80006c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_I2C1_Init+0x50>)
 80006cc:	4a12      	ldr	r2, [pc, #72]	; (8000718 <MX_I2C1_Init+0x58>)
 80006ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_I2C1_Init+0x50>)
 80006de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <MX_I2C1_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_I2C1_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <MX_I2C1_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_I2C1_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <MX_I2C1_Init+0x50>)
 80006fe:	f002 fc91 	bl	8003024 <HAL_I2C_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000708:	f000 f9aa 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000080 	.word	0x20000080
 8000714:	40005400 	.word	0x40005400
 8000718:	000186a0 	.word	0x000186a0

0800071c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000720:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_I2S3_Init+0x54>)
 8000722:	4a14      	ldr	r2, [pc, #80]	; (8000774 <MX_I2S3_Init+0x58>)
 8000724:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000726:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_I2S3_Init+0x54>)
 8000728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800072c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_I2S3_Init+0x54>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_I2S3_Init+0x54>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800073a:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_I2S3_Init+0x54>)
 800073c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000740:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_I2S3_Init+0x54>)
 8000744:	4a0c      	ldr	r2, [pc, #48]	; (8000778 <MX_I2S3_Init+0x5c>)
 8000746:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_I2S3_Init+0x54>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_I2S3_Init+0x54>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_I2S3_Init+0x54>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_I2S3_Init+0x54>)
 800075c:	f002 fda6 	bl	80032ac <HAL_I2S_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000766:	f000 f97b 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200000d4 	.word	0x200000d4
 8000774:	40003c00 	.word	0x40003c00
 8000778:	00017700 	.word	0x00017700

0800077c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_SPI1_Init+0x64>)
 8000782:	4a18      	ldr	r2, [pc, #96]	; (80007e4 <MX_SPI1_Init+0x68>)
 8000784:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_SPI1_Init+0x64>)
 8000788:	f44f 7282 	mov.w	r2, #260	; 0x104
 800078c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_SPI1_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_SPI1_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_SPI1_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_SPI1_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_SPI1_Init+0x64>)
 80007a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_SPI1_Init+0x64>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_SPI1_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_SPI1_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <MX_SPI1_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_SPI1_Init+0x64>)
 80007c8:	220a      	movs	r2, #10
 80007ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_SPI1_Init+0x64>)
 80007ce:	f004 f819 	bl	8004804 <HAL_SPI_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007d8:	f000 f942 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	2000011c 	.word	0x2000011c
 80007e4:	40013000 	.word	0x40013000

080007e8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_TIM11_Init+0x40>)
 80007ee:	4a0f      	ldr	r2, [pc, #60]	; (800082c <MX_TIM11_Init+0x44>)
 80007f0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_TIM11_Init+0x40>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f8:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_TIM11_Init+0x40>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <MX_TIM11_Init+0x40>)
 8000800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000804:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_TIM11_Init+0x40>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_TIM11_Init+0x40>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_TIM11_Init+0x40>)
 8000814:	f004 f87f 	bl	8004916 <HAL_TIM_Base_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800081e:	f000 f91f 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000174 	.word	0x20000174
 800082c:	40014800 	.word	0x40014800

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	; 0x30
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	4b76      	ldr	r3, [pc, #472]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a75      	ldr	r2, [pc, #468]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 8000850:	f043 0310 	orr.w	r3, r3, #16
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b73      	ldr	r3, [pc, #460]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0310 	and.w	r3, r3, #16
 800085e:	61bb      	str	r3, [r7, #24]
 8000860:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	4b6f      	ldr	r3, [pc, #444]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a6e      	ldr	r2, [pc, #440]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b6c      	ldr	r3, [pc, #432]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b68      	ldr	r3, [pc, #416]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a67      	ldr	r2, [pc, #412]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b65      	ldr	r3, [pc, #404]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b61      	ldr	r3, [pc, #388]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a60      	ldr	r2, [pc, #384]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b5e      	ldr	r3, [pc, #376]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b5a      	ldr	r3, [pc, #360]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a59      	ldr	r2, [pc, #356]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b57      	ldr	r3, [pc, #348]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b53      	ldr	r3, [pc, #332]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a52      	ldr	r2, [pc, #328]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 80008dc:	f043 0308 	orr.w	r3, r3, #8
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b50      	ldr	r3, [pc, #320]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0308 	and.w	r3, r3, #8
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2108      	movs	r1, #8
 80008f2:	484d      	ldr	r0, [pc, #308]	; (8000a28 <MX_GPIO_Init+0x1f8>)
 80008f4:	f000 fdb2 	bl	800145c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2101      	movs	r1, #1
 80008fc:	484b      	ldr	r0, [pc, #300]	; (8000a2c <MX_GPIO_Init+0x1fc>)
 80008fe:	f000 fdad 	bl	800145c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000902:	2200      	movs	r2, #0
 8000904:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000908:	4849      	ldr	r0, [pc, #292]	; (8000a30 <MX_GPIO_Init+0x200>)
 800090a:	f000 fda7 	bl	800145c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800090e:	2308      	movs	r3, #8
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	4840      	ldr	r0, [pc, #256]	; (8000a28 <MX_GPIO_Init+0x1f8>)
 8000926:	f000 fbfd 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800092a:	2301      	movs	r3, #1
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	483a      	ldr	r0, [pc, #232]	; (8000a2c <MX_GPIO_Init+0x1fc>)
 8000942:	f000 fbef 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000946:	2308      	movs	r3, #8
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000956:	2305      	movs	r3, #5
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4832      	ldr	r0, [pc, #200]	; (8000a2c <MX_GPIO_Init+0x1fc>)
 8000962:	f000 fbdf 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000966:	2301      	movs	r3, #1
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800096a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	482e      	ldr	r0, [pc, #184]	; (8000a34 <MX_GPIO_Init+0x204>)
 800097c:	f000 fbd2 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000980:	2304      	movs	r3, #4
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4829      	ldr	r0, [pc, #164]	; (8000a38 <MX_GPIO_Init+0x208>)
 8000994:	f000 fbc6 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009aa:	2305      	movs	r3, #5
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4820      	ldr	r0, [pc, #128]	; (8000a38 <MX_GPIO_Init+0x208>)
 80009b6:	f000 fbb5 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ba:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009be:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4817      	ldr	r0, [pc, #92]	; (8000a30 <MX_GPIO_Init+0x200>)
 80009d4:	f000 fba6 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d8:	2320      	movs	r3, #32
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4811      	ldr	r0, [pc, #68]	; (8000a30 <MX_GPIO_Init+0x200>)
 80009ec:	f000 fb9a 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009f0:	2302      	movs	r3, #2
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4808      	ldr	r0, [pc, #32]	; (8000a28 <MX_GPIO_Init+0x1f8>)
 8000a06:	f000 fb8d 	bl	8001124 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2105      	movs	r1, #5
 8000a0e:	2006      	movs	r0, #6
 8000a10:	f000 fb5e 	bl	80010d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a14:	2006      	movs	r0, #6
 8000a16:	f000 fb77 	bl	8001108 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a1a:	bf00      	nop
 8000a1c:	3730      	adds	r7, #48	; 0x30
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40020800 	.word	0x40020800
 8000a30:	40020c00 	.word	0x40020c00
 8000a34:	40020000 	.word	0x40020000
 8000a38:	40020400 	.word	0x40020400

08000a3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d101      	bne.n	8000a52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a4e:	f000 fa67 	bl	8000f20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40010000 	.word	0x40010000

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a68:	e7fe      	b.n	8000a68 <Error_Handler+0x8>
	...

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a11      	ldr	r2, [pc, #68]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_MspInit+0x54>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	210f      	movs	r1, #15
 8000aae:	f06f 0001 	mvn.w	r0, #1
 8000ab2:	f000 fb0d 	bl	80010d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a19      	ldr	r2, [pc, #100]	; (8000b48 <HAL_I2C_MspInit+0x84>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d12c      	bne.n	8000b40 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <HAL_I2C_MspInit+0x88>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a17      	ldr	r2, [pc, #92]	; (8000b4c <HAL_I2C_MspInit+0x88>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <HAL_I2C_MspInit+0x88>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b02:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b08:	2312      	movs	r3, #18
 8000b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b14:	2304      	movs	r3, #4
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480c      	ldr	r0, [pc, #48]	; (8000b50 <HAL_I2C_MspInit+0x8c>)
 8000b20:	f000 fb00 	bl	8001124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <HAL_I2C_MspInit+0x88>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <HAL_I2C_MspInit+0x88>)
 8000b2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b32:	6413      	str	r3, [r2, #64]	; 0x40
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_I2C_MspInit+0x88>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b40:	bf00      	nop
 8000b42:	3728      	adds	r7, #40	; 0x28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40005400 	.word	0x40005400
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020400 	.word	0x40020400

08000b54 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08e      	sub	sp, #56	; 0x38
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a31      	ldr	r2, [pc, #196]	; (8000c44 <HAL_I2S_MspInit+0xf0>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d15a      	bne.n	8000c3a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b84:	2301      	movs	r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b88:	23c0      	movs	r3, #192	; 0xc0
 8000b8a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4618      	mov	r0, r3
 8000b96:	f003 fcf3 	bl	8004580 <HAL_RCCEx_PeriphCLKConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000ba0:	f7ff ff5e 	bl	8000a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <HAL_I2S_MspInit+0xf4>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	4a26      	ldr	r2, [pc, #152]	; (8000c48 <HAL_I2S_MspInit+0xf4>)
 8000bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb4:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <HAL_I2S_MspInit+0xf4>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <HAL_I2S_MspInit+0xf4>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	4a1f      	ldr	r2, [pc, #124]	; (8000c48 <HAL_I2S_MspInit+0xf4>)
 8000bca:	f043 0301 	orr.w	r3, r3, #1
 8000bce:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd0:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <HAL_I2S_MspInit+0xf4>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <HAL_I2S_MspInit+0xf4>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be4:	4a18      	ldr	r2, [pc, #96]	; (8000c48 <HAL_I2S_MspInit+0xf4>)
 8000be6:	f043 0304 	orr.w	r3, r3, #4
 8000bea:	6313      	str	r3, [r2, #48]	; 0x30
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <HAL_I2S_MspInit+0xf4>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	f003 0304 	and.w	r3, r3, #4
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bf8:	2310      	movs	r3, #16
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c08:	2306      	movs	r3, #6
 8000c0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c10:	4619      	mov	r1, r3
 8000c12:	480e      	ldr	r0, [pc, #56]	; (8000c4c <HAL_I2S_MspInit+0xf8>)
 8000c14:	f000 fa86 	bl	8001124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c18:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c2a:	2306      	movs	r3, #6
 8000c2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c32:	4619      	mov	r1, r3
 8000c34:	4806      	ldr	r0, [pc, #24]	; (8000c50 <HAL_I2S_MspInit+0xfc>)
 8000c36:	f000 fa75 	bl	8001124 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c3a:	bf00      	nop
 8000c3c:	3738      	adds	r7, #56	; 0x38
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40003c00 	.word	0x40003c00
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020000 	.word	0x40020000
 8000c50:	40020800 	.word	0x40020800

08000c54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a19      	ldr	r2, [pc, #100]	; (8000cd8 <HAL_SPI_MspInit+0x84>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d12b      	bne.n	8000cce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	4a17      	ldr	r2, [pc, #92]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000c80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a10      	ldr	r2, [pc, #64]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cae:	23e0      	movs	r3, #224	; 0xe0
 8000cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cbe:	2305      	movs	r3, #5
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <HAL_SPI_MspInit+0x8c>)
 8000cca:	f000 fa2b 	bl	8001124 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	3728      	adds	r7, #40	; 0x28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40013000 	.word	0x40013000
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020000 	.word	0x40020000

08000ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <HAL_TIM_Base_MspInit+0x3c>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d10d      	bne.n	8000d12 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_TIM_Base_MspInit+0x40>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	4a09      	ldr	r2, [pc, #36]	; (8000d24 <HAL_TIM_Base_MspInit+0x40>)
 8000d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d04:	6453      	str	r3, [r2, #68]	; 0x44
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <HAL_TIM_Base_MspInit+0x40>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000d12:	bf00      	nop
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	40014800 	.word	0x40014800
 8000d24:	40023800 	.word	0x40023800

08000d28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08c      	sub	sp, #48	; 0x30
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	4b2f      	ldr	r3, [pc, #188]	; (8000dfc <HAL_InitTick+0xd4>)
 8000d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d40:	4a2e      	ldr	r2, [pc, #184]	; (8000dfc <HAL_InitTick+0xd4>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6453      	str	r3, [r2, #68]	; 0x44
 8000d48:	4b2c      	ldr	r3, [pc, #176]	; (8000dfc <HAL_InitTick+0xd4>)
 8000d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d54:	f107 020c 	add.w	r2, r7, #12
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f003 fbdc 	bl	800451c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d64:	f003 fbc6 	bl	80044f4 <HAL_RCC_GetPCLK2Freq>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d70:	4a23      	ldr	r2, [pc, #140]	; (8000e00 <HAL_InitTick+0xd8>)
 8000d72:	fba2 2303 	umull	r2, r3, r2, r3
 8000d76:	0c9b      	lsrs	r3, r3, #18
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d7c:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <HAL_InitTick+0xdc>)
 8000d7e:	4a22      	ldr	r2, [pc, #136]	; (8000e08 <HAL_InitTick+0xe0>)
 8000d80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d82:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <HAL_InitTick+0xdc>)
 8000d84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d88:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d8a:	4a1e      	ldr	r2, [pc, #120]	; (8000e04 <HAL_InitTick+0xdc>)
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <HAL_InitTick+0xdc>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d96:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <HAL_InitTick+0xdc>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9c:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <HAL_InitTick+0xdc>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000da2:	4818      	ldr	r0, [pc, #96]	; (8000e04 <HAL_InitTick+0xdc>)
 8000da4:	f003 fdb7 	bl	8004916 <HAL_TIM_Base_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000dae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d11b      	bne.n	8000dee <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000db6:	4813      	ldr	r0, [pc, #76]	; (8000e04 <HAL_InitTick+0xdc>)
 8000db8:	f003 fdfc 	bl	80049b4 <HAL_TIM_Base_Start_IT>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000dc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d111      	bne.n	8000dee <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000dca:	2019      	movs	r0, #25
 8000dcc:	f000 f99c 	bl	8001108 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b0f      	cmp	r3, #15
 8000dd4:	d808      	bhi.n	8000de8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	6879      	ldr	r1, [r7, #4]
 8000dda:	2019      	movs	r0, #25
 8000ddc:	f000 f978 	bl	80010d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000de0:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <HAL_InitTick+0xe4>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	e002      	b.n	8000dee <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000dee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3730      	adds	r7, #48	; 0x30
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	431bde83 	.word	0x431bde83
 8000e04:	200001bc 	.word	0x200001bc
 8000e08:	40010000 	.word	0x40010000
 8000e0c:	20000004 	.word	0x20000004

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e14:	e7fe      	b.n	8000e14 <NMI_Handler+0x4>

08000e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <MemManage_Handler+0x4>

08000e22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e42:	f003 fe27 	bl	8004a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200001bc 	.word	0x200001bc

08000e50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <OTG_FS_IRQHandler+0x10>)
 8000e56:	f000 fb58 	bl	800150a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20003fd8 	.word	0x20003fd8

08000e64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <SystemInit+0x20>)
 8000e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <SystemInit+0x20>)
 8000e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e8c:	f7ff ffea 	bl	8000e64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e90:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e92:	490d      	ldr	r1, [pc, #52]	; (8000ec8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e94:	4a0d      	ldr	r2, [pc, #52]	; (8000ecc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ea8:	4c0a      	ldr	r4, [pc, #40]	; (8000ed4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eb6:	f007 f95b 	bl	8008170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eba:	f7ff fb81 	bl	80005c0 <main>
  bx  lr    
 8000ebe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ec0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ecc:	080082dc 	.word	0x080082dc
  ldr r2, =_sbss
 8000ed0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ed4:	200044f8 	.word	0x200044f8

08000ed8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <ADC_IRQHandler>
	...

08000edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	; (8000f1c <HAL_Init+0x40>)
 8000ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eec:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <HAL_Init+0x40>)
 8000ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a07      	ldr	r2, [pc, #28]	; (8000f1c <HAL_Init+0x40>)
 8000efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f04:	2003      	movs	r0, #3
 8000f06:	f000 f8d8 	bl	80010ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0a:	200f      	movs	r0, #15
 8000f0c:	f7ff ff0c 	bl	8000d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f10:	f7ff fdac 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023c00 	.word	0x40023c00

08000f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x20>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_IncTick+0x24>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <HAL_IncTick+0x24>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000008 	.word	0x20000008
 8000f44:	20000204 	.word	0x20000204

08000f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <HAL_GetTick+0x14>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000204 	.word	0x20000204

08000f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f92:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	60d3      	str	r3, [r2, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f003 0307 	and.w	r3, r3, #7
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	db0b      	blt.n	8000fee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	f003 021f 	and.w	r2, r3, #31
 8000fdc:	4907      	ldr	r1, [pc, #28]	; (8000ffc <__NVIC_EnableIRQ+0x38>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	095b      	lsrs	r3, r3, #5
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000e100 	.word	0xe000e100

08001000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	; (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	; (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
         );
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ff4c 	bl	8000f60 <__NVIC_SetPriorityGrouping>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e2:	f7ff ff61 	bl	8000fa8 <__NVIC_GetPriorityGrouping>
 80010e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	68b9      	ldr	r1, [r7, #8]
 80010ec:	6978      	ldr	r0, [r7, #20]
 80010ee:	f7ff ffb1 	bl	8001054 <NVIC_EncodePriority>
 80010f2:	4602      	mov	r2, r0
 80010f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f8:	4611      	mov	r1, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ff80 	bl	8001000 <__NVIC_SetPriority>
}
 8001100:	bf00      	nop
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ff54 	bl	8000fc4 <__NVIC_EnableIRQ>
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	e16b      	b.n	8001418 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001140:	2201      	movs	r2, #1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	429a      	cmp	r2, r3
 800115a:	f040 815a 	bne.w	8001412 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	2b01      	cmp	r3, #1
 8001168:	d005      	beq.n	8001176 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001172:	2b02      	cmp	r3, #2
 8001174:	d130      	bne.n	80011d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	2203      	movs	r2, #3
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	68da      	ldr	r2, [r3, #12]
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	091b      	lsrs	r3, r3, #4
 80011c2:	f003 0201 	and.w	r2, r3, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	d017      	beq.n	8001214 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d123      	bne.n	8001268 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	08da      	lsrs	r2, r3, #3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3208      	adds	r2, #8
 8001228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	220f      	movs	r2, #15
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	691a      	ldr	r2, [r3, #16]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	08da      	lsrs	r2, r3, #3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3208      	adds	r2, #8
 8001262:	69b9      	ldr	r1, [r7, #24]
 8001264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0203 	and.w	r2, r3, #3
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 80b4 	beq.w	8001412 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	4b60      	ldr	r3, [pc, #384]	; (8001430 <HAL_GPIO_Init+0x30c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	4a5f      	ldr	r2, [pc, #380]	; (8001430 <HAL_GPIO_Init+0x30c>)
 80012b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ba:	4b5d      	ldr	r3, [pc, #372]	; (8001430 <HAL_GPIO_Init+0x30c>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012c6:	4a5b      	ldr	r2, [pc, #364]	; (8001434 <HAL_GPIO_Init+0x310>)
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	3302      	adds	r3, #2
 80012ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	220f      	movs	r2, #15
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a52      	ldr	r2, [pc, #328]	; (8001438 <HAL_GPIO_Init+0x314>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d02b      	beq.n	800134a <HAL_GPIO_Init+0x226>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a51      	ldr	r2, [pc, #324]	; (800143c <HAL_GPIO_Init+0x318>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d025      	beq.n	8001346 <HAL_GPIO_Init+0x222>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a50      	ldr	r2, [pc, #320]	; (8001440 <HAL_GPIO_Init+0x31c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d01f      	beq.n	8001342 <HAL_GPIO_Init+0x21e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4f      	ldr	r2, [pc, #316]	; (8001444 <HAL_GPIO_Init+0x320>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d019      	beq.n	800133e <HAL_GPIO_Init+0x21a>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4e      	ldr	r2, [pc, #312]	; (8001448 <HAL_GPIO_Init+0x324>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d013      	beq.n	800133a <HAL_GPIO_Init+0x216>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4d      	ldr	r2, [pc, #308]	; (800144c <HAL_GPIO_Init+0x328>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d00d      	beq.n	8001336 <HAL_GPIO_Init+0x212>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4c      	ldr	r2, [pc, #304]	; (8001450 <HAL_GPIO_Init+0x32c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d007      	beq.n	8001332 <HAL_GPIO_Init+0x20e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4b      	ldr	r2, [pc, #300]	; (8001454 <HAL_GPIO_Init+0x330>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d101      	bne.n	800132e <HAL_GPIO_Init+0x20a>
 800132a:	2307      	movs	r3, #7
 800132c:	e00e      	b.n	800134c <HAL_GPIO_Init+0x228>
 800132e:	2308      	movs	r3, #8
 8001330:	e00c      	b.n	800134c <HAL_GPIO_Init+0x228>
 8001332:	2306      	movs	r3, #6
 8001334:	e00a      	b.n	800134c <HAL_GPIO_Init+0x228>
 8001336:	2305      	movs	r3, #5
 8001338:	e008      	b.n	800134c <HAL_GPIO_Init+0x228>
 800133a:	2304      	movs	r3, #4
 800133c:	e006      	b.n	800134c <HAL_GPIO_Init+0x228>
 800133e:	2303      	movs	r3, #3
 8001340:	e004      	b.n	800134c <HAL_GPIO_Init+0x228>
 8001342:	2302      	movs	r3, #2
 8001344:	e002      	b.n	800134c <HAL_GPIO_Init+0x228>
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <HAL_GPIO_Init+0x228>
 800134a:	2300      	movs	r3, #0
 800134c:	69fa      	ldr	r2, [r7, #28]
 800134e:	f002 0203 	and.w	r2, r2, #3
 8001352:	0092      	lsls	r2, r2, #2
 8001354:	4093      	lsls	r3, r2
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800135c:	4935      	ldr	r1, [pc, #212]	; (8001434 <HAL_GPIO_Init+0x310>)
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	089b      	lsrs	r3, r3, #2
 8001362:	3302      	adds	r3, #2
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136a:	4b3b      	ldr	r3, [pc, #236]	; (8001458 <HAL_GPIO_Init+0x334>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800138e:	4a32      	ldr	r2, [pc, #200]	; (8001458 <HAL_GPIO_Init+0x334>)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001394:	4b30      	ldr	r3, [pc, #192]	; (8001458 <HAL_GPIO_Init+0x334>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013b8:	4a27      	ldr	r2, [pc, #156]	; (8001458 <HAL_GPIO_Init+0x334>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013be:	4b26      	ldr	r3, [pc, #152]	; (8001458 <HAL_GPIO_Init+0x334>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013e2:	4a1d      	ldr	r2, [pc, #116]	; (8001458 <HAL_GPIO_Init+0x334>)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <HAL_GPIO_Init+0x334>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800140c:	4a12      	ldr	r2, [pc, #72]	; (8001458 <HAL_GPIO_Init+0x334>)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3301      	adds	r3, #1
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	2b0f      	cmp	r3, #15
 800141c:	f67f ae90 	bls.w	8001140 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	3724      	adds	r7, #36	; 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800
 8001434:	40013800 	.word	0x40013800
 8001438:	40020000 	.word	0x40020000
 800143c:	40020400 	.word	0x40020400
 8001440:	40020800 	.word	0x40020800
 8001444:	40020c00 	.word	0x40020c00
 8001448:	40021000 	.word	0x40021000
 800144c:	40021400 	.word	0x40021400
 8001450:	40021800 	.word	0x40021800
 8001454:	40021c00 	.word	0x40021c00
 8001458:	40013c00 	.word	0x40013c00

0800145c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	807b      	strh	r3, [r7, #2]
 8001468:	4613      	mov	r3, r2
 800146a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800146c:	787b      	ldrb	r3, [r7, #1]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001472:	887a      	ldrh	r2, [r7, #2]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001478:	e003      	b.n	8001482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800147a:	887b      	ldrh	r3, [r7, #2]
 800147c:	041a      	lsls	r2, r3, #16
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	619a      	str	r2, [r3, #24]
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800148e:	b480      	push	{r7}
 8001490:	b085      	sub	sp, #20
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	460b      	mov	r3, r1
 8001498:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014a0:	887a      	ldrh	r2, [r7, #2]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4013      	ands	r3, r2
 80014a6:	041a      	lsls	r2, r3, #16
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	43d9      	mvns	r1, r3
 80014ac:	887b      	ldrh	r3, [r7, #2]
 80014ae:	400b      	ands	r3, r1
 80014b0:	431a      	orrs	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	619a      	str	r2, [r3, #24]
}
 80014b6:	bf00      	nop
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014d0:	695a      	ldr	r2, [r3, #20]
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	4013      	ands	r3, r2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d006      	beq.n	80014e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014da:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014e0:	88fb      	ldrh	r3, [r7, #6]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 f806 	bl	80014f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40013c00 	.word	0x40013c00

080014f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f003 fd9d 	bl	8005060 <USB_GetMode>
 8001526:	4603      	mov	r3, r0
 8001528:	2b01      	cmp	r3, #1
 800152a:	f040 80fb 	bne.w	8001724 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f003 fd60 	bl	8004ff8 <USB_ReadInterrupts>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 80f1 	beq.w	8001722 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f003 fd57 	bl	8004ff8 <USB_ReadInterrupts>
 800154a:	4603      	mov	r3, r0
 800154c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001550:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001554:	d104      	bne.n	8001560 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800155e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f003 fd47 	bl	8004ff8 <USB_ReadInterrupts>
 800156a:	4603      	mov	r3, r0
 800156c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001570:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001574:	d104      	bne.n	8001580 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800157e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f003 fd37 	bl	8004ff8 <USB_ReadInterrupts>
 800158a:	4603      	mov	r3, r0
 800158c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001590:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001594:	d104      	bne.n	80015a0 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800159e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f003 fd27 	bl	8004ff8 <USB_ReadInterrupts>
 80015aa:	4603      	mov	r3, r0
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d103      	bne.n	80015bc <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2202      	movs	r2, #2
 80015ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f003 fd19 	bl	8004ff8 <USB_ReadInterrupts>
 80015c6:	4603      	mov	r3, r0
 80015c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015d0:	d120      	bne.n	8001614 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80015da:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d113      	bne.n	8001614 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80015ec:	2110      	movs	r1, #16
 80015ee:	6938      	ldr	r0, [r7, #16]
 80015f0:	f003 fc4a 	bl	8004e88 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80015f4:	6938      	ldr	r0, [r7, #16]
 80015f6:	f003 fc79 	bl	8004eec <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	7a5b      	ldrb	r3, [r3, #9]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d105      	bne.n	800160e <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2101      	movs	r1, #1
 8001608:	4618      	mov	r0, r3
 800160a:	f003 fd37 	bl	800507c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f006 fcc0 	bl	8007f94 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f003 fced 	bl	8004ff8 <USB_ReadInterrupts>
 800161e:	4603      	mov	r3, r0
 8001620:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001628:	d102      	bne.n	8001630 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f001 fc87 	bl	8002f3e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f003 fcdf 	bl	8004ff8 <USB_ReadInterrupts>
 800163a:	4603      	mov	r3, r0
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	2b08      	cmp	r3, #8
 8001642:	d106      	bne.n	8001652 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f006 fc89 	bl	8007f5c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2208      	movs	r2, #8
 8001650:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f003 fcce 	bl	8004ff8 <USB_ReadInterrupts>
 800165c:	4603      	mov	r3, r0
 800165e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001662:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001666:	d139      	bne.n	80016dc <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f003 fd42 	bl	80050f6 <USB_HC_ReadInterrupt>
 8001672:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	e025      	b.n	80016c6 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	f003 030f 	and.w	r3, r3, #15
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	fa22 f303 	lsr.w	r3, r2, r3
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d018      	beq.n	80016c0 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	015a      	lsls	r2, r3, #5
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4413      	add	r3, r2
 8001696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016a4:	d106      	bne.n	80016b4 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	4619      	mov	r1, r3
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 f859 	bl	8001764 <HCD_HC_IN_IRQHandler>
 80016b2:	e005      	b.n	80016c0 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	4619      	mov	r1, r3
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 febb 	bl	8002436 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	3301      	adds	r3, #1
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	795b      	ldrb	r3, [r3, #5]
 80016ca:	461a      	mov	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d3d3      	bcc.n	800167a <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f003 fc89 	bl	8004ff8 <USB_ReadInterrupts>
 80016e6:	4603      	mov	r3, r0
 80016e8:	f003 0310 	and.w	r3, r3, #16
 80016ec:	2b10      	cmp	r3, #16
 80016ee:	d101      	bne.n	80016f4 <HAL_HCD_IRQHandler+0x1ea>
 80016f0:	2301      	movs	r3, #1
 80016f2:	e000      	b.n	80016f6 <HAL_HCD_IRQHandler+0x1ec>
 80016f4:	2300      	movs	r3, #0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d014      	beq.n	8001724 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	699a      	ldr	r2, [r3, #24]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 0210 	bic.w	r2, r2, #16
 8001708:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f001 fb38 	bl	8002d80 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	699a      	ldr	r2, [r3, #24]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0210 	orr.w	r2, r2, #16
 800171e:	619a      	str	r2, [r3, #24]
 8001720:	e000      	b.n	8001724 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001722:	bf00      	nop
    }
  }
}
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001738:	2b01      	cmp	r3, #1
 800173a:	d101      	bne.n	8001740 <HAL_HCD_Stop+0x16>
 800173c:	2302      	movs	r3, #2
 800173e:	e00d      	b.n	800175c <HAL_HCD_Stop+0x32>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f003 fe03 	bl	8005358 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	78fa      	ldrb	r2, [r7, #3]
 8001780:	4611      	mov	r1, r2
 8001782:	4618      	mov	r0, r3
 8001784:	f003 fc4b 	bl	800501e <USB_ReadChInterrupts>
 8001788:	4603      	mov	r3, r0
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	2b04      	cmp	r3, #4
 8001790:	d11a      	bne.n	80017c8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	015a      	lsls	r2, r3, #5
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4413      	add	r3, r2
 800179a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800179e:	461a      	mov	r2, r3
 80017a0:	2304      	movs	r3, #4
 80017a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80017a4:	78fa      	ldrb	r2, [r7, #3]
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	4613      	mov	r3, r2
 80017aa:	011b      	lsls	r3, r3, #4
 80017ac:	1a9b      	subs	r3, r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	334d      	adds	r3, #77	; 0x4d
 80017b4:	2207      	movs	r2, #7
 80017b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	78fa      	ldrb	r2, [r7, #3]
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f003 fca9 	bl	8005118 <USB_HC_Halt>
 80017c6:	e09e      	b.n	8001906 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	78fa      	ldrb	r2, [r7, #3]
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f003 fc24 	bl	800501e <USB_ReadChInterrupts>
 80017d6:	4603      	mov	r3, r0
 80017d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017e0:	d11b      	bne.n	800181a <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	015a      	lsls	r2, r3, #5
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	4413      	add	r3, r2
 80017ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017ee:	461a      	mov	r2, r3
 80017f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80017f6:	78fa      	ldrb	r2, [r7, #3]
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	011b      	lsls	r3, r3, #4
 80017fe:	1a9b      	subs	r3, r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	440b      	add	r3, r1
 8001804:	334d      	adds	r3, #77	; 0x4d
 8001806:	2208      	movs	r2, #8
 8001808:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	78fa      	ldrb	r2, [r7, #3]
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f003 fc80 	bl	8005118 <USB_HC_Halt>
 8001818:	e075      	b.n	8001906 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	78fa      	ldrb	r2, [r7, #3]
 8001820:	4611      	mov	r1, r2
 8001822:	4618      	mov	r0, r3
 8001824:	f003 fbfb 	bl	800501e <USB_ReadChInterrupts>
 8001828:	4603      	mov	r3, r0
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b08      	cmp	r3, #8
 8001830:	d11a      	bne.n	8001868 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001832:	78fb      	ldrb	r3, [r7, #3]
 8001834:	015a      	lsls	r2, r3, #5
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	4413      	add	r3, r2
 800183a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800183e:	461a      	mov	r2, r3
 8001840:	2308      	movs	r3, #8
 8001842:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001844:	78fa      	ldrb	r2, [r7, #3]
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	1a9b      	subs	r3, r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	334d      	adds	r3, #77	; 0x4d
 8001854:	2206      	movs	r2, #6
 8001856:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	78fa      	ldrb	r2, [r7, #3]
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f003 fc59 	bl	8005118 <USB_HC_Halt>
 8001866:	e04e      	b.n	8001906 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f003 fbd4 	bl	800501e <USB_ReadChInterrupts>
 8001876:	4603      	mov	r3, r0
 8001878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800187c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001880:	d11b      	bne.n	80018ba <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	015a      	lsls	r2, r3, #5
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4413      	add	r3, r2
 800188a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800188e:	461a      	mov	r2, r3
 8001890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001894:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001896:	78fa      	ldrb	r2, [r7, #3]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	1a9b      	subs	r3, r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	334d      	adds	r3, #77	; 0x4d
 80018a6:	2209      	movs	r2, #9
 80018a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	78fa      	ldrb	r2, [r7, #3]
 80018b0:	4611      	mov	r1, r2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f003 fc30 	bl	8005118 <USB_HC_Halt>
 80018b8:	e025      	b.n	8001906 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	78fa      	ldrb	r2, [r7, #3]
 80018c0:	4611      	mov	r1, r2
 80018c2:	4618      	mov	r0, r3
 80018c4:	f003 fbab 	bl	800501e <USB_ReadChInterrupts>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ce:	2b80      	cmp	r3, #128	; 0x80
 80018d0:	d119      	bne.n	8001906 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	015a      	lsls	r2, r3, #5
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4413      	add	r3, r2
 80018da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018de:	461a      	mov	r2, r3
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80018e4:	78fa      	ldrb	r2, [r7, #3]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	011b      	lsls	r3, r3, #4
 80018ec:	1a9b      	subs	r3, r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	334d      	adds	r3, #77	; 0x4d
 80018f4:	2207      	movs	r2, #7
 80018f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	78fa      	ldrb	r2, [r7, #3]
 80018fe:	4611      	mov	r1, r2
 8001900:	4618      	mov	r0, r3
 8001902:	f003 fc09 	bl	8005118 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	78fa      	ldrb	r2, [r7, #3]
 800190c:	4611      	mov	r1, r2
 800190e:	4618      	mov	r0, r3
 8001910:	f003 fb85 	bl	800501e <USB_ReadChInterrupts>
 8001914:	4603      	mov	r3, r0
 8001916:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800191a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800191e:	d112      	bne.n	8001946 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	78fa      	ldrb	r2, [r7, #3]
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f003 fbf5 	bl	8005118 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800192e:	78fb      	ldrb	r3, [r7, #3]
 8001930:	015a      	lsls	r2, r3, #5
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	4413      	add	r3, r2
 8001936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800193a:	461a      	mov	r2, r3
 800193c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001940:	6093      	str	r3, [r2, #8]
 8001942:	f000 bd75 	b.w	8002430 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	78fa      	ldrb	r2, [r7, #3]
 800194c:	4611      	mov	r1, r2
 800194e:	4618      	mov	r0, r3
 8001950:	f003 fb65 	bl	800501e <USB_ReadChInterrupts>
 8001954:	4603      	mov	r3, r0
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b01      	cmp	r3, #1
 800195c:	f040 8128 	bne.w	8001bb0 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001960:	78fb      	ldrb	r3, [r7, #3]
 8001962:	015a      	lsls	r2, r3, #5
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4413      	add	r3, r2
 8001968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800196c:	461a      	mov	r2, r3
 800196e:	2320      	movs	r3, #32
 8001970:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001972:	78fa      	ldrb	r2, [r7, #3]
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	1a9b      	subs	r3, r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	331b      	adds	r3, #27
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d119      	bne.n	80019bc <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001988:	78fa      	ldrb	r2, [r7, #3]
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	331b      	adds	r3, #27
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	015a      	lsls	r2, r3, #5
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	4413      	add	r3, r2
 80019a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	78fa      	ldrb	r2, [r7, #3]
 80019ac:	0151      	lsls	r1, r2, #5
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	440a      	add	r2, r1
 80019b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ba:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	799b      	ldrb	r3, [r3, #6]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d01b      	beq.n	80019fc <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80019c4:	78fa      	ldrb	r2, [r7, #3]
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	1a9b      	subs	r3, r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	3330      	adds	r3, #48	; 0x30
 80019d4:	6819      	ldr	r1, [r3, #0]
 80019d6:	78fb      	ldrb	r3, [r7, #3]
 80019d8:	015a      	lsls	r2, r3, #5
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	4413      	add	r3, r2
 80019de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e8:	78fa      	ldrb	r2, [r7, #3]
 80019ea:	1ac9      	subs	r1, r1, r3
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	011b      	lsls	r3, r3, #4
 80019f2:	1a9b      	subs	r3, r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4403      	add	r3, r0
 80019f8:	3338      	adds	r3, #56	; 0x38
 80019fa:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80019fc:	78fa      	ldrb	r2, [r7, #3]
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	1a9b      	subs	r3, r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	334d      	adds	r3, #77	; 0x4d
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001a10:	78fa      	ldrb	r2, [r7, #3]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	1a9b      	subs	r3, r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	3344      	adds	r3, #68	; 0x44
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001a24:	78fb      	ldrb	r3, [r7, #3]
 8001a26:	015a      	lsls	r2, r3, #5
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a30:	461a      	mov	r2, r3
 8001a32:	2301      	movs	r3, #1
 8001a34:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001a36:	78fa      	ldrb	r2, [r7, #3]
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	011b      	lsls	r3, r3, #4
 8001a3e:	1a9b      	subs	r3, r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	440b      	add	r3, r1
 8001a44:	3326      	adds	r3, #38	; 0x26
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d00a      	beq.n	8001a62 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001a4c:	78fa      	ldrb	r2, [r7, #3]
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	4613      	mov	r3, r2
 8001a52:	011b      	lsls	r3, r3, #4
 8001a54:	1a9b      	subs	r3, r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	440b      	add	r3, r1
 8001a5a:	3326      	adds	r3, #38	; 0x26
 8001a5c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d110      	bne.n	8001a84 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	78fa      	ldrb	r2, [r7, #3]
 8001a68:	4611      	mov	r1, r2
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f003 fb54 	bl	8005118 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	015a      	lsls	r2, r3, #5
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4413      	add	r3, r2
 8001a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	2310      	movs	r3, #16
 8001a80:	6093      	str	r3, [r2, #8]
 8001a82:	e03d      	b.n	8001b00 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001a84:	78fa      	ldrb	r2, [r7, #3]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	1a9b      	subs	r3, r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	3326      	adds	r3, #38	; 0x26
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d00a      	beq.n	8001ab0 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001a9a:	78fa      	ldrb	r2, [r7, #3]
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	011b      	lsls	r3, r3, #4
 8001aa2:	1a9b      	subs	r3, r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	3326      	adds	r3, #38	; 0x26
 8001aaa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d127      	bne.n	8001b00 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001ab0:	78fb      	ldrb	r3, [r7, #3]
 8001ab2:	015a      	lsls	r2, r3, #5
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	78fa      	ldrb	r2, [r7, #3]
 8001ac0:	0151      	lsls	r1, r2, #5
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	440a      	add	r2, r1
 8001ac6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001aca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ace:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001ad0:	78fa      	ldrb	r2, [r7, #3]
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	011b      	lsls	r3, r3, #4
 8001ad8:	1a9b      	subs	r3, r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	334c      	adds	r3, #76	; 0x4c
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001ae4:	78fa      	ldrb	r2, [r7, #3]
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	1a9b      	subs	r3, r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	334c      	adds	r3, #76	; 0x4c
 8001af4:	781a      	ldrb	r2, [r3, #0]
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	4619      	mov	r1, r3
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f006 fa58 	bl	8007fb0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	799b      	ldrb	r3, [r3, #6]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d13b      	bne.n	8001b80 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001b08:	78fa      	ldrb	r2, [r7, #3]
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	1a9b      	subs	r3, r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	3338      	adds	r3, #56	; 0x38
 8001b18:	6819      	ldr	r1, [r3, #0]
 8001b1a:	78fa      	ldrb	r2, [r7, #3]
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	1a9b      	subs	r3, r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4403      	add	r3, r0
 8001b28:	3328      	adds	r3, #40	; 0x28
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	440b      	add	r3, r1
 8001b2e:	1e59      	subs	r1, r3, #1
 8001b30:	78fa      	ldrb	r2, [r7, #3]
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	1a9b      	subs	r3, r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4403      	add	r3, r0
 8001b3e:	3328      	adds	r3, #40	; 0x28
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 8470 	beq.w	8002430 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001b50:	78fa      	ldrb	r2, [r7, #3]
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	4613      	mov	r3, r2
 8001b56:	011b      	lsls	r3, r3, #4
 8001b58:	1a9b      	subs	r3, r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	333c      	adds	r3, #60	; 0x3c
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	78fa      	ldrb	r2, [r7, #3]
 8001b64:	f083 0301 	eor.w	r3, r3, #1
 8001b68:	b2d8      	uxtb	r0, r3
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	1a9b      	subs	r3, r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	333c      	adds	r3, #60	; 0x3c
 8001b78:	4602      	mov	r2, r0
 8001b7a:	701a      	strb	r2, [r3, #0]
 8001b7c:	f000 bc58 	b.w	8002430 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001b80:	78fa      	ldrb	r2, [r7, #3]
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	1a9b      	subs	r3, r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	333c      	adds	r3, #60	; 0x3c
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	78fa      	ldrb	r2, [r7, #3]
 8001b94:	f083 0301 	eor.w	r3, r3, #1
 8001b98:	b2d8      	uxtb	r0, r3
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	1a9b      	subs	r3, r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	333c      	adds	r3, #60	; 0x3c
 8001ba8:	4602      	mov	r2, r0
 8001baa:	701a      	strb	r2, [r3, #0]
 8001bac:	f000 bc40 	b.w	8002430 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	78fa      	ldrb	r2, [r7, #3]
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f003 fa30 	bl	800501e <USB_ReadChInterrupts>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	f003 0320 	and.w	r3, r3, #32
 8001bc4:	2b20      	cmp	r3, #32
 8001bc6:	d131      	bne.n	8001c2c <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001bc8:	78fb      	ldrb	r3, [r7, #3]
 8001bca:	015a      	lsls	r2, r3, #5
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	4413      	add	r3, r2
 8001bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	2320      	movs	r3, #32
 8001bd8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8001bda:	78fa      	ldrb	r2, [r7, #3]
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	1a9b      	subs	r3, r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	440b      	add	r3, r1
 8001be8:	331a      	adds	r3, #26
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	f040 841f 	bne.w	8002430 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8001bf2:	78fa      	ldrb	r2, [r7, #3]
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	1a9b      	subs	r3, r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	440b      	add	r3, r1
 8001c00:	331b      	adds	r3, #27
 8001c02:	2201      	movs	r2, #1
 8001c04:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001c06:	78fa      	ldrb	r2, [r7, #3]
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	1a9b      	subs	r3, r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	334d      	adds	r3, #77	; 0x4d
 8001c16:	2203      	movs	r2, #3
 8001c18:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	78fa      	ldrb	r2, [r7, #3]
 8001c20:	4611      	mov	r1, r2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 fa78 	bl	8005118 <USB_HC_Halt>
 8001c28:	f000 bc02 	b.w	8002430 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	78fa      	ldrb	r2, [r7, #3]
 8001c32:	4611      	mov	r1, r2
 8001c34:	4618      	mov	r0, r3
 8001c36:	f003 f9f2 	bl	800501e <USB_ReadChInterrupts>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	f040 8305 	bne.w	8002250 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001c46:	78fb      	ldrb	r3, [r7, #3]
 8001c48:	015a      	lsls	r2, r3, #5
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c52:	461a      	mov	r2, r3
 8001c54:	2302      	movs	r3, #2
 8001c56:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001c58:	78fa      	ldrb	r2, [r7, #3]
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	011b      	lsls	r3, r3, #4
 8001c60:	1a9b      	subs	r3, r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	440b      	add	r3, r1
 8001c66:	334d      	adds	r3, #77	; 0x4d
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d114      	bne.n	8001c98 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001c6e:	78fa      	ldrb	r2, [r7, #3]
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	011b      	lsls	r3, r3, #4
 8001c76:	1a9b      	subs	r3, r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	334d      	adds	r3, #77	; 0x4d
 8001c7e:	2202      	movs	r2, #2
 8001c80:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001c82:	78fa      	ldrb	r2, [r7, #3]
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	1a9b      	subs	r3, r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	440b      	add	r3, r1
 8001c90:	334c      	adds	r3, #76	; 0x4c
 8001c92:	2201      	movs	r2, #1
 8001c94:	701a      	strb	r2, [r3, #0]
 8001c96:	e2cc      	b.n	8002232 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001c98:	78fa      	ldrb	r2, [r7, #3]
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	011b      	lsls	r3, r3, #4
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	334d      	adds	r3, #77	; 0x4d
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b06      	cmp	r3, #6
 8001cac:	d114      	bne.n	8001cd8 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001cae:	78fa      	ldrb	r2, [r7, #3]
 8001cb0:	6879      	ldr	r1, [r7, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	1a9b      	subs	r3, r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	440b      	add	r3, r1
 8001cbc:	334d      	adds	r3, #77	; 0x4d
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8001cc2:	78fa      	ldrb	r2, [r7, #3]
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	1a9b      	subs	r3, r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	440b      	add	r3, r1
 8001cd0:	334c      	adds	r3, #76	; 0x4c
 8001cd2:	2205      	movs	r2, #5
 8001cd4:	701a      	strb	r2, [r3, #0]
 8001cd6:	e2ac      	b.n	8002232 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001cd8:	78fa      	ldrb	r2, [r7, #3]
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	1a9b      	subs	r3, r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	334d      	adds	r3, #77	; 0x4d
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b07      	cmp	r3, #7
 8001cec:	d00b      	beq.n	8001d06 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001cee:	78fa      	ldrb	r2, [r7, #3]
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	011b      	lsls	r3, r3, #4
 8001cf6:	1a9b      	subs	r3, r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	334d      	adds	r3, #77	; 0x4d
 8001cfe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001d00:	2b09      	cmp	r3, #9
 8001d02:	f040 80a6 	bne.w	8001e52 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001d06:	78fa      	ldrb	r2, [r7, #3]
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	011b      	lsls	r3, r3, #4
 8001d0e:	1a9b      	subs	r3, r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	440b      	add	r3, r1
 8001d14:	334d      	adds	r3, #77	; 0x4d
 8001d16:	2202      	movs	r2, #2
 8001d18:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001d1a:	78fa      	ldrb	r2, [r7, #3]
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	011b      	lsls	r3, r3, #4
 8001d22:	1a9b      	subs	r3, r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	440b      	add	r3, r1
 8001d28:	3344      	adds	r3, #68	; 0x44
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	1c59      	adds	r1, r3, #1
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	4613      	mov	r3, r2
 8001d32:	011b      	lsls	r3, r3, #4
 8001d34:	1a9b      	subs	r3, r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4403      	add	r3, r0
 8001d3a:	3344      	adds	r3, #68	; 0x44
 8001d3c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001d3e:	78fa      	ldrb	r2, [r7, #3]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	011b      	lsls	r3, r3, #4
 8001d46:	1a9b      	subs	r3, r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	3344      	adds	r3, #68	; 0x44
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d943      	bls.n	8001ddc <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001d54:	78fa      	ldrb	r2, [r7, #3]
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	011b      	lsls	r3, r3, #4
 8001d5c:	1a9b      	subs	r3, r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	440b      	add	r3, r1
 8001d62:	3344      	adds	r3, #68	; 0x44
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8001d68:	78fa      	ldrb	r2, [r7, #3]
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	1a9b      	subs	r3, r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	331a      	adds	r3, #26
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d123      	bne.n	8001dc6 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8001d7e:	78fa      	ldrb	r2, [r7, #3]
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	011b      	lsls	r3, r3, #4
 8001d86:	1a9b      	subs	r3, r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	331b      	adds	r3, #27
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8001d92:	78fa      	ldrb	r2, [r7, #3]
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	011b      	lsls	r3, r3, #4
 8001d9a:	1a9b      	subs	r3, r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	440b      	add	r3, r1
 8001da0:	331c      	adds	r3, #28
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001da6:	78fb      	ldrb	r3, [r7, #3]
 8001da8:	015a      	lsls	r2, r3, #5
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	78fa      	ldrb	r2, [r7, #3]
 8001db6:	0151      	lsls	r1, r2, #5
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	440a      	add	r2, r1
 8001dbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc4:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001dc6:	78fa      	ldrb	r2, [r7, #3]
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	1a9b      	subs	r3, r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	334c      	adds	r3, #76	; 0x4c
 8001dd6:	2204      	movs	r2, #4
 8001dd8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001dda:	e229      	b.n	8002230 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001ddc:	78fa      	ldrb	r2, [r7, #3]
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	1a9b      	subs	r3, r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	334c      	adds	r3, #76	; 0x4c
 8001dec:	2202      	movs	r2, #2
 8001dee:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001df0:	78fa      	ldrb	r2, [r7, #3]
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	4613      	mov	r3, r2
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	3326      	adds	r3, #38	; 0x26
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00b      	beq.n	8001e1e <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001e06:	78fa      	ldrb	r2, [r7, #3]
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	1a9b      	subs	r3, r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	440b      	add	r3, r1
 8001e14:	3326      	adds	r3, #38	; 0x26
 8001e16:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	f040 8209 	bne.w	8002230 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	015a      	lsls	r2, r3, #5
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4413      	add	r3, r2
 8001e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e34:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e3c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001e3e:	78fb      	ldrb	r3, [r7, #3]
 8001e40:	015a      	lsls	r2, r3, #5
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4413      	add	r3, r2
 8001e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001e50:	e1ee      	b.n	8002230 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8001e52:	78fa      	ldrb	r2, [r7, #3]
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	1a9b      	subs	r3, r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	440b      	add	r3, r1
 8001e60:	334d      	adds	r3, #77	; 0x4d
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b05      	cmp	r3, #5
 8001e66:	f040 80c8 	bne.w	8001ffa <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001e6a:	78fa      	ldrb	r2, [r7, #3]
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	1a9b      	subs	r3, r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	440b      	add	r3, r1
 8001e78:	334d      	adds	r3, #77	; 0x4d
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001e7e:	78fa      	ldrb	r2, [r7, #3]
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	4613      	mov	r3, r2
 8001e84:	011b      	lsls	r3, r3, #4
 8001e86:	1a9b      	subs	r3, r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	331b      	adds	r3, #27
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	f040 81ce 	bne.w	8002232 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001e96:	78fa      	ldrb	r2, [r7, #3]
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	011b      	lsls	r3, r3, #4
 8001e9e:	1a9b      	subs	r3, r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	3326      	adds	r3, #38	; 0x26
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d16b      	bne.n	8001f84 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8001eac:	78fa      	ldrb	r2, [r7, #3]
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	011b      	lsls	r3, r3, #4
 8001eb4:	1a9b      	subs	r3, r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	3348      	adds	r3, #72	; 0x48
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	1c59      	adds	r1, r3, #1
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	1a9b      	subs	r3, r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4403      	add	r3, r0
 8001ecc:	3348      	adds	r3, #72	; 0x48
 8001ece:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8001ed0:	78fa      	ldrb	r2, [r7, #3]
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	011b      	lsls	r3, r3, #4
 8001ed8:	1a9b      	subs	r3, r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	3348      	adds	r3, #72	; 0x48
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d943      	bls.n	8001f6e <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8001ee6:	78fa      	ldrb	r2, [r7, #3]
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	011b      	lsls	r3, r3, #4
 8001eee:	1a9b      	subs	r3, r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	3348      	adds	r3, #72	; 0x48
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8001efa:	78fa      	ldrb	r2, [r7, #3]
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	1a9b      	subs	r3, r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	440b      	add	r3, r1
 8001f08:	331b      	adds	r3, #27
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8001f0e:	78fa      	ldrb	r2, [r7, #3]
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	011b      	lsls	r3, r3, #4
 8001f16:	1a9b      	subs	r3, r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	3344      	adds	r3, #68	; 0x44
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d809      	bhi.n	8001f38 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8001f24:	78fa      	ldrb	r2, [r7, #3]
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	1a9b      	subs	r3, r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	331c      	adds	r3, #28
 8001f34:	2201      	movs	r2, #1
 8001f36:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	78fa      	ldrb	r2, [r7, #3]
 8001f48:	0151      	lsls	r1, r2, #5
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	440a      	add	r2, r1
 8001f4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f56:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8001f58:	78fa      	ldrb	r2, [r7, #3]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	1a9b      	subs	r3, r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	334c      	adds	r3, #76	; 0x4c
 8001f68:	2204      	movs	r2, #4
 8001f6a:	701a      	strb	r2, [r3, #0]
 8001f6c:	e014      	b.n	8001f98 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001f6e:	78fa      	ldrb	r2, [r7, #3]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	1a9b      	subs	r3, r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	334c      	adds	r3, #76	; 0x4c
 8001f7e:	2202      	movs	r2, #2
 8001f80:	701a      	strb	r2, [r3, #0]
 8001f82:	e009      	b.n	8001f98 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001f84:	78fa      	ldrb	r2, [r7, #3]
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	011b      	lsls	r3, r3, #4
 8001f8c:	1a9b      	subs	r3, r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	334c      	adds	r3, #76	; 0x4c
 8001f94:	2202      	movs	r2, #2
 8001f96:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001f98:	78fa      	ldrb	r2, [r7, #3]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	3326      	adds	r3, #38	; 0x26
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00b      	beq.n	8001fc6 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001fae:	78fa      	ldrb	r2, [r7, #3]
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	1a9b      	subs	r3, r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	3326      	adds	r3, #38	; 0x26
 8001fbe:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	f040 8136 	bne.w	8002232 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001fc6:	78fb      	ldrb	r3, [r7, #3]
 8001fc8:	015a      	lsls	r2, r3, #5
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001fdc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fe4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001fe6:	78fb      	ldrb	r3, [r7, #3]
 8001fe8:	015a      	lsls	r2, r3, #5
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	e11b      	b.n	8002232 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8001ffa:	78fa      	ldrb	r2, [r7, #3]
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	1a9b      	subs	r3, r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	440b      	add	r3, r1
 8002008:	334d      	adds	r3, #77	; 0x4d
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b03      	cmp	r3, #3
 800200e:	f040 8081 	bne.w	8002114 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002012:	78fa      	ldrb	r2, [r7, #3]
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	1a9b      	subs	r3, r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	334d      	adds	r3, #77	; 0x4d
 8002022:	2202      	movs	r2, #2
 8002024:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002026:	78fa      	ldrb	r2, [r7, #3]
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	1a9b      	subs	r3, r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	331b      	adds	r3, #27
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b01      	cmp	r3, #1
 800203a:	f040 80fa 	bne.w	8002232 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800203e:	78fa      	ldrb	r2, [r7, #3]
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	4613      	mov	r3, r2
 8002044:	011b      	lsls	r3, r3, #4
 8002046:	1a9b      	subs	r3, r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	440b      	add	r3, r1
 800204c:	334c      	adds	r3, #76	; 0x4c
 800204e:	2202      	movs	r2, #2
 8002050:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	015a      	lsls	r2, r3, #5
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	4413      	add	r3, r2
 800205a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	78fa      	ldrb	r2, [r7, #3]
 8002062:	0151      	lsls	r1, r2, #5
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	440a      	add	r2, r1
 8002068:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800206c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002070:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	015a      	lsls	r2, r3, #5
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4413      	add	r3, r2
 800207a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	78fa      	ldrb	r2, [r7, #3]
 8002082:	0151      	lsls	r1, r2, #5
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	440a      	add	r2, r1
 8002088:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800208c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002090:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	015a      	lsls	r2, r3, #5
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4413      	add	r3, r2
 800209a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	78fa      	ldrb	r2, [r7, #3]
 80020a2:	0151      	lsls	r1, r2, #5
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	440a      	add	r2, r1
 80020a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020ac:	f023 0320 	bic.w	r3, r3, #32
 80020b0:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020b2:	78fa      	ldrb	r2, [r7, #3]
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	011b      	lsls	r3, r3, #4
 80020ba:	1a9b      	subs	r3, r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	3326      	adds	r3, #38	; 0x26
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00b      	beq.n	80020e0 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80020c8:	78fa      	ldrb	r2, [r7, #3]
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	1a9b      	subs	r3, r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	3326      	adds	r3, #38	; 0x26
 80020d8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020da:	2b02      	cmp	r3, #2
 80020dc:	f040 80a9 	bne.w	8002232 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80020e0:	78fb      	ldrb	r3, [r7, #3]
 80020e2:	015a      	lsls	r2, r3, #5
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4413      	add	r3, r2
 80020e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020f6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020fe:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	015a      	lsls	r2, r3, #5
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4413      	add	r3, r2
 8002108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210c:	461a      	mov	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	e08e      	b.n	8002232 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002114:	78fa      	ldrb	r2, [r7, #3]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	1a9b      	subs	r3, r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	334d      	adds	r3, #77	; 0x4d
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b04      	cmp	r3, #4
 8002128:	d143      	bne.n	80021b2 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	334d      	adds	r3, #77	; 0x4d
 800213a:	2202      	movs	r2, #2
 800213c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800213e:	78fa      	ldrb	r2, [r7, #3]
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	1a9b      	subs	r3, r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	440b      	add	r3, r1
 800214c:	334c      	adds	r3, #76	; 0x4c
 800214e:	2202      	movs	r2, #2
 8002150:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002152:	78fa      	ldrb	r2, [r7, #3]
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	1a9b      	subs	r3, r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	3326      	adds	r3, #38	; 0x26
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00a      	beq.n	800217e <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002168:	78fa      	ldrb	r2, [r7, #3]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	3326      	adds	r3, #38	; 0x26
 8002178:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800217a:	2b02      	cmp	r3, #2
 800217c:	d159      	bne.n	8002232 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800217e:	78fb      	ldrb	r3, [r7, #3]
 8002180:	015a      	lsls	r2, r3, #5
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4413      	add	r3, r2
 8002186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002194:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800219c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021aa:	461a      	mov	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	e03f      	b.n	8002232 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80021b2:	78fa      	ldrb	r2, [r7, #3]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	1a9b      	subs	r3, r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	334d      	adds	r3, #77	; 0x4d
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d126      	bne.n	8002216 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80021c8:	78fa      	ldrb	r2, [r7, #3]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	334d      	adds	r3, #77	; 0x4d
 80021d8:	2202      	movs	r2, #2
 80021da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80021dc:	78fa      	ldrb	r2, [r7, #3]
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	1a9b      	subs	r3, r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	3344      	adds	r3, #68	; 0x44
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	1c59      	adds	r1, r3, #1
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	1a9b      	subs	r3, r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4403      	add	r3, r0
 80021fc:	3344      	adds	r3, #68	; 0x44
 80021fe:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002200:	78fa      	ldrb	r2, [r7, #3]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	334c      	adds	r3, #76	; 0x4c
 8002210:	2204      	movs	r2, #4
 8002212:	701a      	strb	r2, [r3, #0]
 8002214:	e00d      	b.n	8002232 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002216:	78fa      	ldrb	r2, [r7, #3]
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	011b      	lsls	r3, r3, #4
 800221e:	1a9b      	subs	r3, r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	334d      	adds	r3, #77	; 0x4d
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b02      	cmp	r3, #2
 800222a:	f000 8100 	beq.w	800242e <HCD_HC_IN_IRQHandler+0xcca>
 800222e:	e000      	b.n	8002232 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002230:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002232:	78fa      	ldrb	r2, [r7, #3]
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	1a9b      	subs	r3, r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	440b      	add	r3, r1
 8002240:	334c      	adds	r3, #76	; 0x4c
 8002242:	781a      	ldrb	r2, [r3, #0]
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	4619      	mov	r1, r3
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f005 feb1 	bl	8007fb0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800224e:	e0ef      	b.n	8002430 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	78fa      	ldrb	r2, [r7, #3]
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f002 fee0 	bl	800501e <USB_ReadChInterrupts>
 800225e:	4603      	mov	r3, r0
 8002260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002264:	2b40      	cmp	r3, #64	; 0x40
 8002266:	d12f      	bne.n	80022c8 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4413      	add	r3, r2
 8002270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002274:	461a      	mov	r2, r3
 8002276:	2340      	movs	r3, #64	; 0x40
 8002278:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800227a:	78fa      	ldrb	r2, [r7, #3]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	1a9b      	subs	r3, r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	334d      	adds	r3, #77	; 0x4d
 800228a:	2205      	movs	r2, #5
 800228c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800228e:	78fa      	ldrb	r2, [r7, #3]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	1a9b      	subs	r3, r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	331a      	adds	r3, #26
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d109      	bne.n	80022b8 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80022a4:	78fa      	ldrb	r2, [r7, #3]
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	1a9b      	subs	r3, r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	3344      	adds	r3, #68	; 0x44
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	78fa      	ldrb	r2, [r7, #3]
 80022be:	4611      	mov	r1, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f002 ff29 	bl	8005118 <USB_HC_Halt>
 80022c6:	e0b3      	b.n	8002430 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	78fa      	ldrb	r2, [r7, #3]
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f002 fea4 	bl	800501e <USB_ReadChInterrupts>
 80022d6:	4603      	mov	r3, r0
 80022d8:	f003 0310 	and.w	r3, r3, #16
 80022dc:	2b10      	cmp	r3, #16
 80022de:	f040 80a7 	bne.w	8002430 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80022e2:	78fa      	ldrb	r2, [r7, #3]
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	011b      	lsls	r3, r3, #4
 80022ea:	1a9b      	subs	r3, r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	440b      	add	r3, r1
 80022f0:	3326      	adds	r3, #38	; 0x26
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b03      	cmp	r3, #3
 80022f6:	d11b      	bne.n	8002330 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80022f8:	78fa      	ldrb	r2, [r7, #3]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	3344      	adds	r3, #68	; 0x44
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800230c:	78fa      	ldrb	r2, [r7, #3]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	334d      	adds	r3, #77	; 0x4d
 800231c:	2204      	movs	r2, #4
 800231e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	78fa      	ldrb	r2, [r7, #3]
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f002 fef5 	bl	8005118 <USB_HC_Halt>
 800232e:	e03f      	b.n	80023b0 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002330:	78fa      	ldrb	r2, [r7, #3]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	1a9b      	subs	r3, r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	3326      	adds	r3, #38	; 0x26
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002346:	78fa      	ldrb	r2, [r7, #3]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	1a9b      	subs	r3, r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	3326      	adds	r3, #38	; 0x26
 8002356:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002358:	2b02      	cmp	r3, #2
 800235a:	d129      	bne.n	80023b0 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800235c:	78fa      	ldrb	r2, [r7, #3]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	3344      	adds	r3, #68	; 0x44
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	799b      	ldrb	r3, [r3, #6]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00a      	beq.n	800238e <HCD_HC_IN_IRQHandler+0xc2a>
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	331b      	adds	r3, #27
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d110      	bne.n	80023b0 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800238e:	78fa      	ldrb	r2, [r7, #3]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	1a9b      	subs	r3, r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	334d      	adds	r3, #77	; 0x4d
 800239e:	2204      	movs	r2, #4
 80023a0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	4611      	mov	r1, r2
 80023aa:	4618      	mov	r0, r3
 80023ac:	f002 feb4 	bl	8005118 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80023b0:	78fa      	ldrb	r2, [r7, #3]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	331b      	adds	r3, #27
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d129      	bne.n	800241a <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80023c6:	78fa      	ldrb	r2, [r7, #3]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	1a9b      	subs	r3, r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	331b      	adds	r3, #27
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80023da:	78fb      	ldrb	r3, [r7, #3]
 80023dc:	015a      	lsls	r2, r3, #5
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4413      	add	r3, r2
 80023e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	78fa      	ldrb	r2, [r7, #3]
 80023ea:	0151      	lsls	r1, r2, #5
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	440a      	add	r2, r1
 80023f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f8:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80023fa:	78fb      	ldrb	r3, [r7, #3]
 80023fc:	015a      	lsls	r2, r3, #5
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4413      	add	r3, r2
 8002402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	78fa      	ldrb	r2, [r7, #3]
 800240a:	0151      	lsls	r1, r2, #5
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	440a      	add	r2, r1
 8002410:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002414:	f043 0320 	orr.w	r3, r3, #32
 8002418:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800241a:	78fb      	ldrb	r3, [r7, #3]
 800241c:	015a      	lsls	r2, r3, #5
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4413      	add	r3, r2
 8002422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002426:	461a      	mov	r2, r3
 8002428:	2310      	movs	r3, #16
 800242a:	6093      	str	r3, [r2, #8]
 800242c:	e000      	b.n	8002430 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800242e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b086      	sub	sp, #24
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	460b      	mov	r3, r1
 8002440:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	78fa      	ldrb	r2, [r7, #3]
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f002 fde2 	bl	800501e <USB_ReadChInterrupts>
 800245a:	4603      	mov	r3, r0
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b04      	cmp	r3, #4
 8002462:	d11b      	bne.n	800249c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	015a      	lsls	r2, r3, #5
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4413      	add	r3, r2
 800246c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002470:	461a      	mov	r2, r3
 8002472:	2304      	movs	r3, #4
 8002474:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002476:	78fa      	ldrb	r2, [r7, #3]
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	1a9b      	subs	r3, r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	334d      	adds	r3, #77	; 0x4d
 8002486:	2207      	movs	r2, #7
 8002488:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	78fa      	ldrb	r2, [r7, #3]
 8002490:	4611      	mov	r1, r2
 8002492:	4618      	mov	r0, r3
 8002494:	f002 fe40 	bl	8005118 <USB_HC_Halt>
 8002498:	f000 bc6f 	b.w	8002d7a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	78fa      	ldrb	r2, [r7, #3]
 80024a2:	4611      	mov	r1, r2
 80024a4:	4618      	mov	r0, r3
 80024a6:	f002 fdba 	bl	800501e <USB_ReadChInterrupts>
 80024aa:	4603      	mov	r3, r0
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	2b20      	cmp	r3, #32
 80024b2:	f040 8082 	bne.w	80025ba <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c2:	461a      	mov	r2, r3
 80024c4:	2320      	movs	r3, #32
 80024c6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	3319      	adds	r3, #25
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d124      	bne.n	8002528 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80024de:	78fa      	ldrb	r2, [r7, #3]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	3319      	adds	r3, #25
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024f2:	78fa      	ldrb	r2, [r7, #3]
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	1a9b      	subs	r3, r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	440b      	add	r3, r1
 8002500:	334c      	adds	r3, #76	; 0x4c
 8002502:	2202      	movs	r2, #2
 8002504:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002506:	78fa      	ldrb	r2, [r7, #3]
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	1a9b      	subs	r3, r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	440b      	add	r3, r1
 8002514:	334d      	adds	r3, #77	; 0x4d
 8002516:	2203      	movs	r2, #3
 8002518:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	78fa      	ldrb	r2, [r7, #3]
 8002520:	4611      	mov	r1, r2
 8002522:	4618      	mov	r0, r3
 8002524:	f002 fdf8 	bl	8005118 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	331a      	adds	r3, #26
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b01      	cmp	r3, #1
 800253c:	f040 841d 	bne.w	8002d7a <HCD_HC_OUT_IRQHandler+0x944>
 8002540:	78fa      	ldrb	r2, [r7, #3]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	1a9b      	subs	r3, r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	331b      	adds	r3, #27
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	f040 8411 	bne.w	8002d7a <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	3326      	adds	r3, #38	; 0x26
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d009      	beq.n	8002582 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800256e:	78fa      	ldrb	r2, [r7, #3]
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	1a9b      	subs	r3, r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	331b      	adds	r3, #27
 800257e:	2201      	movs	r2, #1
 8002580:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002582:	78fa      	ldrb	r2, [r7, #3]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	1a9b      	subs	r3, r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	334d      	adds	r3, #77	; 0x4d
 8002592:	2203      	movs	r2, #3
 8002594:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	78fa      	ldrb	r2, [r7, #3]
 800259c:	4611      	mov	r1, r2
 800259e:	4618      	mov	r0, r3
 80025a0:	f002 fdba 	bl	8005118 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80025a4:	78fa      	ldrb	r2, [r7, #3]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	3344      	adds	r3, #68	; 0x44
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	e3df      	b.n	8002d7a <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	78fa      	ldrb	r2, [r7, #3]
 80025c0:	4611      	mov	r1, r2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f002 fd2b 	bl	800501e <USB_ReadChInterrupts>
 80025c8:	4603      	mov	r3, r0
 80025ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025d2:	d111      	bne.n	80025f8 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80025d4:	78fb      	ldrb	r3, [r7, #3]
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e0:	461a      	mov	r2, r3
 80025e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025e6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	78fa      	ldrb	r2, [r7, #3]
 80025ee:	4611      	mov	r1, r2
 80025f0:	4618      	mov	r0, r3
 80025f2:	f002 fd91 	bl	8005118 <USB_HC_Halt>
 80025f6:	e3c0      	b.n	8002d7a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	78fa      	ldrb	r2, [r7, #3]
 80025fe:	4611      	mov	r1, r2
 8002600:	4618      	mov	r0, r3
 8002602:	f002 fd0c 	bl	800501e <USB_ReadChInterrupts>
 8002606:	4603      	mov	r3, r0
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b01      	cmp	r3, #1
 800260e:	d168      	bne.n	80026e2 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	1a9b      	subs	r3, r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	3344      	adds	r3, #68	; 0x44
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f002 fcf6 	bl	800501e <USB_ReadChInterrupts>
 8002632:	4603      	mov	r3, r0
 8002634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002638:	2b40      	cmp	r3, #64	; 0x40
 800263a:	d112      	bne.n	8002662 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	3319      	adds	r3, #25
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4413      	add	r3, r2
 8002658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265c:	461a      	mov	r2, r3
 800265e:	2340      	movs	r3, #64	; 0x40
 8002660:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002662:	78fa      	ldrb	r2, [r7, #3]
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	4613      	mov	r3, r2
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	1a9b      	subs	r3, r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	440b      	add	r3, r1
 8002670:	331b      	adds	r3, #27
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d019      	beq.n	80026ac <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002678:	78fa      	ldrb	r2, [r7, #3]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	1a9b      	subs	r3, r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	331b      	adds	r3, #27
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800268c:	78fb      	ldrb	r3, [r7, #3]
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4413      	add	r3, r2
 8002694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	0151      	lsls	r1, r2, #5
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	440a      	add	r2, r1
 80026a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026aa:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b8:	461a      	mov	r2, r3
 80026ba:	2301      	movs	r3, #1
 80026bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80026be:	78fa      	ldrb	r2, [r7, #3]
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	1a9b      	subs	r3, r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	334d      	adds	r3, #77	; 0x4d
 80026ce:	2201      	movs	r2, #1
 80026d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	78fa      	ldrb	r2, [r7, #3]
 80026d8:	4611      	mov	r1, r2
 80026da:	4618      	mov	r0, r3
 80026dc:	f002 fd1c 	bl	8005118 <USB_HC_Halt>
 80026e0:	e34b      	b.n	8002d7a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	4611      	mov	r1, r2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f002 fc97 	bl	800501e <USB_ReadChInterrupts>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f6:	2b40      	cmp	r3, #64	; 0x40
 80026f8:	d139      	bne.n	800276e <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80026fa:	78fa      	ldrb	r2, [r7, #3]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	1a9b      	subs	r3, r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	334d      	adds	r3, #77	; 0x4d
 800270a:	2205      	movs	r2, #5
 800270c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800270e:	78fa      	ldrb	r2, [r7, #3]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	1a9b      	subs	r3, r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	331a      	adds	r3, #26
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d109      	bne.n	8002738 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002724:	78fa      	ldrb	r2, [r7, #3]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	1a9b      	subs	r3, r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	3319      	adds	r3, #25
 8002734:	2201      	movs	r2, #1
 8002736:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002738:	78fa      	ldrb	r2, [r7, #3]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	1a9b      	subs	r3, r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	3344      	adds	r3, #68	; 0x44
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	78fa      	ldrb	r2, [r7, #3]
 8002752:	4611      	mov	r1, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f002 fcdf 	bl	8005118 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800275a:	78fb      	ldrb	r3, [r7, #3]
 800275c:	015a      	lsls	r2, r3, #5
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4413      	add	r3, r2
 8002762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002766:	461a      	mov	r2, r3
 8002768:	2340      	movs	r3, #64	; 0x40
 800276a:	6093      	str	r3, [r2, #8]
 800276c:	e305      	b.n	8002d7a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	78fa      	ldrb	r2, [r7, #3]
 8002774:	4611      	mov	r1, r2
 8002776:	4618      	mov	r0, r3
 8002778:	f002 fc51 	bl	800501e <USB_ReadChInterrupts>
 800277c:	4603      	mov	r3, r0
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b08      	cmp	r3, #8
 8002784:	d11a      	bne.n	80027bc <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002786:	78fb      	ldrb	r3, [r7, #3]
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4413      	add	r3, r2
 800278e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002792:	461a      	mov	r2, r3
 8002794:	2308      	movs	r3, #8
 8002796:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002798:	78fa      	ldrb	r2, [r7, #3]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	334d      	adds	r3, #77	; 0x4d
 80027a8:	2206      	movs	r2, #6
 80027aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	78fa      	ldrb	r2, [r7, #3]
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f002 fcaf 	bl	8005118 <USB_HC_Halt>
 80027ba:	e2de      	b.n	8002d7a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	78fa      	ldrb	r2, [r7, #3]
 80027c2:	4611      	mov	r1, r2
 80027c4:	4618      	mov	r0, r3
 80027c6:	f002 fc2a 	bl	800501e <USB_ReadChInterrupts>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b10      	cmp	r3, #16
 80027d2:	d144      	bne.n	800285e <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80027d4:	78fa      	ldrb	r2, [r7, #3]
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	4613      	mov	r3, r2
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	1a9b      	subs	r3, r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	3344      	adds	r3, #68	; 0x44
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80027e8:	78fa      	ldrb	r2, [r7, #3]
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	1a9b      	subs	r3, r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	334d      	adds	r3, #77	; 0x4d
 80027f8:	2204      	movs	r2, #4
 80027fa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	3319      	adds	r3, #25
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d114      	bne.n	800283c <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002812:	78fa      	ldrb	r2, [r7, #3]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	3318      	adds	r3, #24
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d109      	bne.n	800283c <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002828:	78fa      	ldrb	r2, [r7, #3]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	1a9b      	subs	r3, r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	3319      	adds	r3, #25
 8002838:	2201      	movs	r2, #1
 800283a:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f002 fc67 	bl	8005118 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800284a:	78fb      	ldrb	r3, [r7, #3]
 800284c:	015a      	lsls	r2, r3, #5
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4413      	add	r3, r2
 8002852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002856:	461a      	mov	r2, r3
 8002858:	2310      	movs	r3, #16
 800285a:	6093      	str	r3, [r2, #8]
 800285c:	e28d      	b.n	8002d7a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	78fa      	ldrb	r2, [r7, #3]
 8002864:	4611      	mov	r1, r2
 8002866:	4618      	mov	r0, r3
 8002868:	f002 fbd9 	bl	800501e <USB_ReadChInterrupts>
 800286c:	4603      	mov	r3, r0
 800286e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002872:	2b80      	cmp	r3, #128	; 0x80
 8002874:	d169      	bne.n	800294a <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	799b      	ldrb	r3, [r3, #6]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d111      	bne.n	80028a2 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800287e:	78fa      	ldrb	r2, [r7, #3]
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	1a9b      	subs	r3, r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	440b      	add	r3, r1
 800288c:	334d      	adds	r3, #77	; 0x4d
 800288e:	2207      	movs	r2, #7
 8002890:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	78fa      	ldrb	r2, [r7, #3]
 8002898:	4611      	mov	r1, r2
 800289a:	4618      	mov	r0, r3
 800289c:	f002 fc3c 	bl	8005118 <USB_HC_Halt>
 80028a0:	e049      	b.n	8002936 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80028a2:	78fa      	ldrb	r2, [r7, #3]
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	1a9b      	subs	r3, r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	3344      	adds	r3, #68	; 0x44
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	1c59      	adds	r1, r3, #1
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	1a9b      	subs	r3, r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4403      	add	r3, r0
 80028c2:	3344      	adds	r3, #68	; 0x44
 80028c4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80028c6:	78fa      	ldrb	r2, [r7, #3]
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	1a9b      	subs	r3, r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	3344      	adds	r3, #68	; 0x44
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d922      	bls.n	8002922 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	3344      	adds	r3, #68	; 0x44
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80028f0:	78fa      	ldrb	r2, [r7, #3]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	334c      	adds	r3, #76	; 0x4c
 8002900:	2204      	movs	r2, #4
 8002902:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002904:	78fa      	ldrb	r2, [r7, #3]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	334c      	adds	r3, #76	; 0x4c
 8002914:	781a      	ldrb	r2, [r3, #0]
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	4619      	mov	r1, r3
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f005 fb48 	bl	8007fb0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002920:	e009      	b.n	8002936 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002922:	78fa      	ldrb	r2, [r7, #3]
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	011b      	lsls	r3, r3, #4
 800292a:	1a9b      	subs	r3, r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	440b      	add	r3, r1
 8002930:	334c      	adds	r3, #76	; 0x4c
 8002932:	2202      	movs	r2, #2
 8002934:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002936:	78fb      	ldrb	r3, [r7, #3]
 8002938:	015a      	lsls	r2, r3, #5
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4413      	add	r3, r2
 800293e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002942:	461a      	mov	r2, r3
 8002944:	2380      	movs	r3, #128	; 0x80
 8002946:	6093      	str	r3, [r2, #8]
 8002948:	e217      	b.n	8002d7a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	78fa      	ldrb	r2, [r7, #3]
 8002950:	4611      	mov	r1, r2
 8002952:	4618      	mov	r0, r3
 8002954:	f002 fb63 	bl	800501e <USB_ReadChInterrupts>
 8002958:	4603      	mov	r3, r0
 800295a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800295e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002962:	d11b      	bne.n	800299c <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	334d      	adds	r3, #77	; 0x4d
 8002974:	2209      	movs	r2, #9
 8002976:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	78fa      	ldrb	r2, [r7, #3]
 800297e:	4611      	mov	r1, r2
 8002980:	4618      	mov	r0, r3
 8002982:	f002 fbc9 	bl	8005118 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	015a      	lsls	r2, r3, #5
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4413      	add	r3, r2
 800298e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002992:	461a      	mov	r2, r3
 8002994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002998:	6093      	str	r3, [r2, #8]
 800299a:	e1ee      	b.n	8002d7a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	78fa      	ldrb	r2, [r7, #3]
 80029a2:	4611      	mov	r1, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f002 fb3a 	bl	800501e <USB_ReadChInterrupts>
 80029aa:	4603      	mov	r3, r0
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	f040 81df 	bne.w	8002d74 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80029b6:	78fb      	ldrb	r3, [r7, #3]
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c2:	461a      	mov	r2, r3
 80029c4:	2302      	movs	r3, #2
 80029c6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	1a9b      	subs	r3, r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	334d      	adds	r3, #77	; 0x4d
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	f040 8093 	bne.w	8002b06 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029e0:	78fa      	ldrb	r2, [r7, #3]
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	1a9b      	subs	r3, r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	334d      	adds	r3, #77	; 0x4d
 80029f0:	2202      	movs	r2, #2
 80029f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80029f4:	78fa      	ldrb	r2, [r7, #3]
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	4613      	mov	r3, r2
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	1a9b      	subs	r3, r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	334c      	adds	r3, #76	; 0x4c
 8002a04:	2201      	movs	r2, #1
 8002a06:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002a08:	78fa      	ldrb	r2, [r7, #3]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	1a9b      	subs	r3, r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	3326      	adds	r3, #38	; 0x26
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d00b      	beq.n	8002a36 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002a1e:	78fa      	ldrb	r2, [r7, #3]
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	1a9b      	subs	r3, r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	3326      	adds	r3, #38	; 0x26
 8002a2e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	f040 8190 	bne.w	8002d56 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	799b      	ldrb	r3, [r3, #6]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d115      	bne.n	8002a6a <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	333d      	adds	r3, #61	; 0x3d
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	78fa      	ldrb	r2, [r7, #3]
 8002a52:	f083 0301 	eor.w	r3, r3, #1
 8002a56:	b2d8      	uxtb	r0, r3
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	333d      	adds	r3, #61	; 0x3d
 8002a66:	4602      	mov	r2, r0
 8002a68:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	799b      	ldrb	r3, [r3, #6]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	f040 8171 	bne.w	8002d56 <HCD_HC_OUT_IRQHandler+0x920>
 8002a74:	78fa      	ldrb	r2, [r7, #3]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	3334      	adds	r3, #52	; 0x34
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 8165 	beq.w	8002d56 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002a8c:	78fa      	ldrb	r2, [r7, #3]
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	1a9b      	subs	r3, r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	3334      	adds	r3, #52	; 0x34
 8002a9c:	6819      	ldr	r1, [r3, #0]
 8002a9e:	78fa      	ldrb	r2, [r7, #3]
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	1a9b      	subs	r3, r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4403      	add	r3, r0
 8002aac:	3328      	adds	r3, #40	; 0x28
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	440b      	add	r3, r1
 8002ab2:	1e59      	subs	r1, r3, #1
 8002ab4:	78fa      	ldrb	r2, [r7, #3]
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	1a9b      	subs	r3, r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4403      	add	r3, r0
 8002ac2:	3328      	adds	r3, #40	; 0x28
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aca:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 813f 	beq.w	8002d56 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002ad8:	78fa      	ldrb	r2, [r7, #3]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	1a9b      	subs	r3, r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	333d      	adds	r3, #61	; 0x3d
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	78fa      	ldrb	r2, [r7, #3]
 8002aec:	f083 0301 	eor.w	r3, r3, #1
 8002af0:	b2d8      	uxtb	r0, r3
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	333d      	adds	r3, #61	; 0x3d
 8002b00:	4602      	mov	r2, r0
 8002b02:	701a      	strb	r2, [r3, #0]
 8002b04:	e127      	b.n	8002d56 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002b06:	78fa      	ldrb	r2, [r7, #3]
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	1a9b      	subs	r3, r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	334d      	adds	r3, #77	; 0x4d
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d120      	bne.n	8002b5e <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b1c:	78fa      	ldrb	r2, [r7, #3]
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	1a9b      	subs	r3, r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	334d      	adds	r3, #77	; 0x4d
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	331b      	adds	r3, #27
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	f040 8107 	bne.w	8002d56 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b48:	78fa      	ldrb	r2, [r7, #3]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	1a9b      	subs	r3, r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	334c      	adds	r3, #76	; 0x4c
 8002b58:	2202      	movs	r2, #2
 8002b5a:	701a      	strb	r2, [r3, #0]
 8002b5c:	e0fb      	b.n	8002d56 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002b5e:	78fa      	ldrb	r2, [r7, #3]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	1a9b      	subs	r3, r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	334d      	adds	r3, #77	; 0x4d
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d13a      	bne.n	8002bea <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b74:	78fa      	ldrb	r2, [r7, #3]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	334d      	adds	r3, #77	; 0x4d
 8002b84:	2202      	movs	r2, #2
 8002b86:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b88:	78fa      	ldrb	r2, [r7, #3]
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	1a9b      	subs	r3, r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	334c      	adds	r3, #76	; 0x4c
 8002b98:	2202      	movs	r2, #2
 8002b9a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002b9c:	78fa      	ldrb	r2, [r7, #3]
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	011b      	lsls	r3, r3, #4
 8002ba4:	1a9b      	subs	r3, r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	331b      	adds	r3, #27
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	f040 80d1 	bne.w	8002d56 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8002bb4:	78fa      	ldrb	r2, [r7, #3]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	1a9b      	subs	r3, r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	331b      	adds	r3, #27
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	78fa      	ldrb	r2, [r7, #3]
 8002bd8:	0151      	lsls	r1, r2, #5
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	440a      	add	r2, r1
 8002bde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be6:	6053      	str	r3, [r2, #4]
 8002be8:	e0b5      	b.n	8002d56 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002bea:	78fa      	ldrb	r2, [r7, #3]
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	1a9b      	subs	r3, r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	334d      	adds	r3, #77	; 0x4d
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b05      	cmp	r3, #5
 8002bfe:	d114      	bne.n	8002c2a <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c00:	78fa      	ldrb	r2, [r7, #3]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	334d      	adds	r3, #77	; 0x4d
 8002c10:	2202      	movs	r2, #2
 8002c12:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002c14:	78fa      	ldrb	r2, [r7, #3]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	334c      	adds	r3, #76	; 0x4c
 8002c24:	2202      	movs	r2, #2
 8002c26:	701a      	strb	r2, [r3, #0]
 8002c28:	e095      	b.n	8002d56 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002c2a:	78fa      	ldrb	r2, [r7, #3]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	334d      	adds	r3, #77	; 0x4d
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b06      	cmp	r3, #6
 8002c3e:	d114      	bne.n	8002c6a <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c40:	78fa      	ldrb	r2, [r7, #3]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	334d      	adds	r3, #77	; 0x4d
 8002c50:	2202      	movs	r2, #2
 8002c52:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002c54:	78fa      	ldrb	r2, [r7, #3]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	334c      	adds	r3, #76	; 0x4c
 8002c64:	2205      	movs	r2, #5
 8002c66:	701a      	strb	r2, [r3, #0]
 8002c68:	e075      	b.n	8002d56 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002c6a:	78fa      	ldrb	r2, [r7, #3]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	1a9b      	subs	r3, r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	334d      	adds	r3, #77	; 0x4d
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b07      	cmp	r3, #7
 8002c7e:	d00a      	beq.n	8002c96 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002c80:	78fa      	ldrb	r2, [r7, #3]
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	334d      	adds	r3, #77	; 0x4d
 8002c90:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002c92:	2b09      	cmp	r3, #9
 8002c94:	d170      	bne.n	8002d78 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	334d      	adds	r3, #77	; 0x4d
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002caa:	78fa      	ldrb	r2, [r7, #3]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	1a9b      	subs	r3, r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	3344      	adds	r3, #68	; 0x44
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	1c59      	adds	r1, r3, #1
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4403      	add	r3, r0
 8002cca:	3344      	adds	r3, #68	; 0x44
 8002ccc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002cce:	78fa      	ldrb	r2, [r7, #3]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	1a9b      	subs	r3, r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	3344      	adds	r3, #68	; 0x44
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d914      	bls.n	8002d0e <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	3344      	adds	r3, #68	; 0x44
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002cf8:	78fa      	ldrb	r2, [r7, #3]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	334c      	adds	r3, #76	; 0x4c
 8002d08:	2204      	movs	r2, #4
 8002d0a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d0c:	e022      	b.n	8002d54 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d0e:	78fa      	ldrb	r2, [r7, #3]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	334c      	adds	r3, #76	; 0x4c
 8002d1e:	2202      	movs	r2, #2
 8002d20:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d38:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d40:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002d42:	78fb      	ldrb	r3, [r7, #3]
 8002d44:	015a      	lsls	r2, r3, #5
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4e:	461a      	mov	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d54:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002d56:	78fa      	ldrb	r2, [r7, #3]
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	334c      	adds	r3, #76	; 0x4c
 8002d66:	781a      	ldrb	r2, [r3, #0]
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f005 f91f 	bl	8007fb0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002d72:	e002      	b.n	8002d7a <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8002d74:	bf00      	nop
 8002d76:	e000      	b.n	8002d7a <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8002d78:	bf00      	nop
  }
}
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08a      	sub	sp, #40	; 0x28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f003 030f 	and.w	r3, r3, #15
 8002da0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	0c5b      	lsrs	r3, r3, #17
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	091b      	lsrs	r3, r3, #4
 8002db0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002db4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d004      	beq.n	8002dc6 <HCD_RXQLVL_IRQHandler+0x46>
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	2b05      	cmp	r3, #5
 8002dc0:	f000 80b6 	beq.w	8002f30 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002dc4:	e0b7      	b.n	8002f36 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 80b3 	beq.w	8002f34 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	1a9b      	subs	r3, r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	440b      	add	r3, r1
 8002ddc:	332c      	adds	r3, #44	; 0x2c
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 80a7 	beq.w	8002f34 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4613      	mov	r3, r2
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	1a9b      	subs	r3, r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	3338      	adds	r3, #56	; 0x38
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	18d1      	adds	r1, r2, r3
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4613      	mov	r3, r2
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4403      	add	r3, r0
 8002e0a:	3334      	adds	r3, #52	; 0x34
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4299      	cmp	r1, r3
 8002e10:	f200 8083 	bhi.w	8002f1a <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6818      	ldr	r0, [r3, #0]
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	332c      	adds	r3, #44	; 0x2c
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	b292      	uxth	r2, r2
 8002e2e:	4619      	mov	r1, r3
 8002e30:	f002 f88a 	bl	8004f48 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	1a9b      	subs	r3, r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	332c      	adds	r3, #44	; 0x2c
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	18d1      	adds	r1, r2, r3
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	1a9b      	subs	r3, r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4403      	add	r3, r0
 8002e58:	332c      	adds	r3, #44	; 0x2c
 8002e5a:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4613      	mov	r3, r2
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	1a9b      	subs	r3, r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	3338      	adds	r3, #56	; 0x38
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	18d1      	adds	r1, r2, r3
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4613      	mov	r3, r2
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	1a9b      	subs	r3, r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4403      	add	r3, r0
 8002e80:	3338      	adds	r3, #56	; 0x38
 8002e82:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	0cdb      	lsrs	r3, r3, #19
 8002e94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e98:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	1a9b      	subs	r3, r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	3328      	adds	r3, #40	; 0x28
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	461a      	mov	r2, r3
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d13f      	bne.n	8002f34 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d03c      	beq.n	8002f34 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ed0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ed8:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	015a      	lsls	r2, r3, #5
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	1a9b      	subs	r3, r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	333c      	adds	r3, #60	; 0x3c
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	f083 0301 	eor.w	r3, r3, #1
 8002f02:	b2d8      	uxtb	r0, r3
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	333c      	adds	r3, #60	; 0x3c
 8002f14:	4602      	mov	r2, r0
 8002f16:	701a      	strb	r2, [r3, #0]
      break;
 8002f18:	e00c      	b.n	8002f34 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	334c      	adds	r3, #76	; 0x4c
 8002f2a:	2204      	movs	r2, #4
 8002f2c:	701a      	strb	r2, [r3, #0]
      break;
 8002f2e:	e001      	b.n	8002f34 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8002f30:	bf00      	nop
 8002f32:	e000      	b.n	8002f36 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8002f34:	bf00      	nop
  }
}
 8002f36:	bf00      	nop
 8002f38:	3728      	adds	r7, #40	; 0x28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b086      	sub	sp, #24
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f6a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d10b      	bne.n	8002f8e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d102      	bne.n	8002f86 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f004 fff9 	bl	8007f78 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f043 0302 	orr.w	r3, r3, #2
 8002f8c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d132      	bne.n	8002ffe <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f043 0308 	orr.w	r3, r3, #8
 8002f9e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d126      	bne.n	8002ff8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	7a5b      	ldrb	r3, [r3, #9]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d113      	bne.n	8002fda <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002fb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fbc:	d106      	bne.n	8002fcc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2102      	movs	r1, #2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f002 f859 	bl	800507c <USB_InitFSLSPClkSel>
 8002fca:	e011      	b.n	8002ff0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f002 f852 	bl	800507c <USB_InitFSLSPClkSel>
 8002fd8:	e00a      	b.n	8002ff0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	79db      	ldrb	r3, [r3, #7]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d106      	bne.n	8002ff0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fe8:	461a      	mov	r2, r3
 8002fea:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002fee:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f004 ffef 	bl	8007fd4 <HAL_HCD_PortEnabled_Callback>
 8002ff6:	e002      	b.n	8002ffe <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f004 fff9 	bl	8007ff0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f003 0320 	and.w	r3, r3, #32
 8003004:	2b20      	cmp	r3, #32
 8003006:	d103      	bne.n	8003010 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f043 0320 	orr.w	r3, r3, #32
 800300e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003016:	461a      	mov	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	6013      	str	r3, [r2, #0]
}
 800301c:	bf00      	nop
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e12b      	b.n	800328e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d106      	bne.n	8003050 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7fd fd3a 	bl	8000ac4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2224      	movs	r2, #36	; 0x24
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0201 	bic.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003076:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003086:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003088:	f001 fa20 	bl	80044cc <HAL_RCC_GetPCLK1Freq>
 800308c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	4a81      	ldr	r2, [pc, #516]	; (8003298 <HAL_I2C_Init+0x274>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d807      	bhi.n	80030a8 <HAL_I2C_Init+0x84>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4a80      	ldr	r2, [pc, #512]	; (800329c <HAL_I2C_Init+0x278>)
 800309c:	4293      	cmp	r3, r2
 800309e:	bf94      	ite	ls
 80030a0:	2301      	movls	r3, #1
 80030a2:	2300      	movhi	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	e006      	b.n	80030b6 <HAL_I2C_Init+0x92>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4a7d      	ldr	r2, [pc, #500]	; (80032a0 <HAL_I2C_Init+0x27c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	bf94      	ite	ls
 80030b0:	2301      	movls	r3, #1
 80030b2:	2300      	movhi	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e0e7      	b.n	800328e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	4a78      	ldr	r2, [pc, #480]	; (80032a4 <HAL_I2C_Init+0x280>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	0c9b      	lsrs	r3, r3, #18
 80030c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	430a      	orrs	r2, r1
 80030dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	4a6a      	ldr	r2, [pc, #424]	; (8003298 <HAL_I2C_Init+0x274>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d802      	bhi.n	80030f8 <HAL_I2C_Init+0xd4>
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	3301      	adds	r3, #1
 80030f6:	e009      	b.n	800310c <HAL_I2C_Init+0xe8>
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030fe:	fb02 f303 	mul.w	r3, r2, r3
 8003102:	4a69      	ldr	r2, [pc, #420]	; (80032a8 <HAL_I2C_Init+0x284>)
 8003104:	fba2 2303 	umull	r2, r3, r2, r3
 8003108:	099b      	lsrs	r3, r3, #6
 800310a:	3301      	adds	r3, #1
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	430b      	orrs	r3, r1
 8003112:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800311e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	495c      	ldr	r1, [pc, #368]	; (8003298 <HAL_I2C_Init+0x274>)
 8003128:	428b      	cmp	r3, r1
 800312a:	d819      	bhi.n	8003160 <HAL_I2C_Init+0x13c>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	1e59      	subs	r1, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	fbb1 f3f3 	udiv	r3, r1, r3
 800313a:	1c59      	adds	r1, r3, #1
 800313c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003140:	400b      	ands	r3, r1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <HAL_I2C_Init+0x138>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1e59      	subs	r1, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	fbb1 f3f3 	udiv	r3, r1, r3
 8003154:	3301      	adds	r3, #1
 8003156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800315a:	e051      	b.n	8003200 <HAL_I2C_Init+0x1dc>
 800315c:	2304      	movs	r3, #4
 800315e:	e04f      	b.n	8003200 <HAL_I2C_Init+0x1dc>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d111      	bne.n	800318c <HAL_I2C_Init+0x168>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	1e58      	subs	r0, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6859      	ldr	r1, [r3, #4]
 8003170:	460b      	mov	r3, r1
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	440b      	add	r3, r1
 8003176:	fbb0 f3f3 	udiv	r3, r0, r3
 800317a:	3301      	adds	r3, #1
 800317c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003180:	2b00      	cmp	r3, #0
 8003182:	bf0c      	ite	eq
 8003184:	2301      	moveq	r3, #1
 8003186:	2300      	movne	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	e012      	b.n	80031b2 <HAL_I2C_Init+0x18e>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	1e58      	subs	r0, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6859      	ldr	r1, [r3, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	0099      	lsls	r1, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	fbb0 f3f3 	udiv	r3, r0, r3
 80031a2:	3301      	adds	r3, #1
 80031a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	bf0c      	ite	eq
 80031ac:	2301      	moveq	r3, #1
 80031ae:	2300      	movne	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <HAL_I2C_Init+0x196>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e022      	b.n	8003200 <HAL_I2C_Init+0x1dc>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10e      	bne.n	80031e0 <HAL_I2C_Init+0x1bc>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	1e58      	subs	r0, r3, #1
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6859      	ldr	r1, [r3, #4]
 80031ca:	460b      	mov	r3, r1
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	440b      	add	r3, r1
 80031d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80031d4:	3301      	adds	r3, #1
 80031d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031de:	e00f      	b.n	8003200 <HAL_I2C_Init+0x1dc>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	1e58      	subs	r0, r3, #1
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6859      	ldr	r1, [r3, #4]
 80031e8:	460b      	mov	r3, r1
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	0099      	lsls	r1, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031f6:	3301      	adds	r3, #1
 80031f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	6809      	ldr	r1, [r1, #0]
 8003204:	4313      	orrs	r3, r2
 8003206:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69da      	ldr	r2, [r3, #28]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800322e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6911      	ldr	r1, [r2, #16]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	68d2      	ldr	r2, [r2, #12]
 800323a:	4311      	orrs	r1, r2
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	430b      	orrs	r3, r1
 8003242:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695a      	ldr	r2, [r3, #20]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	000186a0 	.word	0x000186a0
 800329c:	001e847f 	.word	0x001e847f
 80032a0:	003d08ff 	.word	0x003d08ff
 80032a4:	431bde83 	.word	0x431bde83
 80032a8:	10624dd3 	.word	0x10624dd3

080032ac <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b088      	sub	sp, #32
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e128      	b.n	8003510 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a90      	ldr	r2, [pc, #576]	; (8003518 <HAL_I2S_Init+0x26c>)
 80032d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7fd fc3b 	bl	8000b54 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2202      	movs	r2, #2
 80032e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032f4:	f023 030f 	bic.w	r3, r3, #15
 80032f8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2202      	movs	r2, #2
 8003300:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d060      	beq.n	80033cc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d102      	bne.n	8003318 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003312:	2310      	movs	r3, #16
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	e001      	b.n	800331c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003318:	2320      	movs	r3, #32
 800331a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2b20      	cmp	r3, #32
 8003322:	d802      	bhi.n	800332a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800332a:	2001      	movs	r0, #1
 800332c:	f001 fa0a 	bl	8004744 <HAL_RCCEx_GetPeriphCLKFreq>
 8003330:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800333a:	d125      	bne.n	8003388 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d010      	beq.n	8003366 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	fbb2 f2f3 	udiv	r2, r2, r3
 800334e:	4613      	mov	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	461a      	mov	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003360:	3305      	adds	r3, #5
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	e01f      	b.n	80033a6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003370:	4613      	mov	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	461a      	mov	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003382:	3305      	adds	r3, #5
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	e00e      	b.n	80033a6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003390:	4613      	mov	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	461a      	mov	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a2:	3305      	adds	r3, #5
 80033a4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	4a5c      	ldr	r2, [pc, #368]	; (800351c <HAL_I2S_Init+0x270>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	08db      	lsrs	r3, r3, #3
 80033b0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	085b      	lsrs	r3, r3, #1
 80033c2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	021b      	lsls	r3, r3, #8
 80033c8:	61bb      	str	r3, [r7, #24]
 80033ca:	e003      	b.n	80033d4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80033cc:	2302      	movs	r3, #2
 80033ce:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d902      	bls.n	80033e0 <HAL_I2S_Init+0x134>
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	2bff      	cmp	r3, #255	; 0xff
 80033de:	d907      	bls.n	80033f0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e4:	f043 0210 	orr.w	r2, r3, #16
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e08f      	b.n	8003510 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	ea42 0103 	orr.w	r1, r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69fa      	ldr	r2, [r7, #28]
 8003400:	430a      	orrs	r2, r1
 8003402:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800340e:	f023 030f 	bic.w	r3, r3, #15
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6851      	ldr	r1, [r2, #4]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6892      	ldr	r2, [r2, #8]
 800341a:	4311      	orrs	r1, r2
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	68d2      	ldr	r2, [r2, #12]
 8003420:	4311      	orrs	r1, r2
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6992      	ldr	r2, [r2, #24]
 8003426:	430a      	orrs	r2, r1
 8003428:	431a      	orrs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003432:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d161      	bne.n	8003500 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a38      	ldr	r2, [pc, #224]	; (8003520 <HAL_I2S_Init+0x274>)
 8003440:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a37      	ldr	r2, [pc, #220]	; (8003524 <HAL_I2S_Init+0x278>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d101      	bne.n	8003450 <HAL_I2S_Init+0x1a4>
 800344c:	4b36      	ldr	r3, [pc, #216]	; (8003528 <HAL_I2S_Init+0x27c>)
 800344e:	e001      	b.n	8003454 <HAL_I2S_Init+0x1a8>
 8003450:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6812      	ldr	r2, [r2, #0]
 800345a:	4932      	ldr	r1, [pc, #200]	; (8003524 <HAL_I2S_Init+0x278>)
 800345c:	428a      	cmp	r2, r1
 800345e:	d101      	bne.n	8003464 <HAL_I2S_Init+0x1b8>
 8003460:	4a31      	ldr	r2, [pc, #196]	; (8003528 <HAL_I2S_Init+0x27c>)
 8003462:	e001      	b.n	8003468 <HAL_I2S_Init+0x1bc>
 8003464:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003468:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800346c:	f023 030f 	bic.w	r3, r3, #15
 8003470:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a2b      	ldr	r2, [pc, #172]	; (8003524 <HAL_I2S_Init+0x278>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d101      	bne.n	8003480 <HAL_I2S_Init+0x1d4>
 800347c:	4b2a      	ldr	r3, [pc, #168]	; (8003528 <HAL_I2S_Init+0x27c>)
 800347e:	e001      	b.n	8003484 <HAL_I2S_Init+0x1d8>
 8003480:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003484:	2202      	movs	r2, #2
 8003486:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a25      	ldr	r2, [pc, #148]	; (8003524 <HAL_I2S_Init+0x278>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d101      	bne.n	8003496 <HAL_I2S_Init+0x1ea>
 8003492:	4b25      	ldr	r3, [pc, #148]	; (8003528 <HAL_I2S_Init+0x27c>)
 8003494:	e001      	b.n	800349a <HAL_I2S_Init+0x1ee>
 8003496:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a6:	d003      	beq.n	80034b0 <HAL_I2S_Init+0x204>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d103      	bne.n	80034b8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80034b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034b4:	613b      	str	r3, [r7, #16]
 80034b6:	e001      	b.n	80034bc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80034b8:	2300      	movs	r3, #0
 80034ba:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034c6:	4313      	orrs	r3, r2
 80034c8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034d0:	4313      	orrs	r3, r2
 80034d2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034da:	4313      	orrs	r3, r2
 80034dc:	b29a      	uxth	r2, r3
 80034de:	897b      	ldrh	r3, [r7, #10]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034e8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a0d      	ldr	r2, [pc, #52]	; (8003524 <HAL_I2S_Init+0x278>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d101      	bne.n	80034f8 <HAL_I2S_Init+0x24c>
 80034f4:	4b0c      	ldr	r3, [pc, #48]	; (8003528 <HAL_I2S_Init+0x27c>)
 80034f6:	e001      	b.n	80034fc <HAL_I2S_Init+0x250>
 80034f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034fc:	897a      	ldrh	r2, [r7, #10]
 80034fe:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3720      	adds	r7, #32
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	08003623 	.word	0x08003623
 800351c:	cccccccd 	.word	0xcccccccd
 8003520:	08003739 	.word	0x08003739
 8003524:	40003800 	.word	0x40003800
 8003528:	40003400 	.word	0x40003400

0800352c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	881a      	ldrh	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	1c9a      	adds	r2, r3, #2
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003598:	b29b      	uxth	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10e      	bne.n	80035bc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035ac:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff ffb8 	bl	800352c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80035bc:	bf00      	nop
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d6:	b292      	uxth	r2, r2
 80035d8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	1c9a      	adds	r2, r3, #2
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10e      	bne.n	800361a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800360a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff ff93 	bl	8003540 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b086      	sub	sp, #24
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b04      	cmp	r3, #4
 800363c:	d13a      	bne.n	80036b4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b01      	cmp	r3, #1
 8003646:	d109      	bne.n	800365c <I2S_IRQHandler+0x3a>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003652:	2b40      	cmp	r3, #64	; 0x40
 8003654:	d102      	bne.n	800365c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7ff ffb4 	bl	80035c4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003662:	2b40      	cmp	r3, #64	; 0x40
 8003664:	d126      	bne.n	80036b4 <I2S_IRQHandler+0x92>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	2b20      	cmp	r3, #32
 8003672:	d11f      	bne.n	80036b4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003682:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003684:	2300      	movs	r3, #0
 8003686:	613b      	str	r3, [r7, #16]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	613b      	str	r3, [r7, #16]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	613b      	str	r3, [r7, #16]
 8003698:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	f043 0202 	orr.w	r2, r3, #2
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7ff ff50 	bl	8003554 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d136      	bne.n	800372e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d109      	bne.n	80036de <I2S_IRQHandler+0xbc>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d4:	2b80      	cmp	r3, #128	; 0x80
 80036d6:	d102      	bne.n	80036de <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7ff ff45 	bl	8003568 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d122      	bne.n	800372e <I2S_IRQHandler+0x10c>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b20      	cmp	r3, #32
 80036f4:	d11b      	bne.n	800372e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003704:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003720:	f043 0204 	orr.w	r2, r3, #4
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff ff13 	bl	8003554 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800372e:	bf00      	nop
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a92      	ldr	r2, [pc, #584]	; (8003998 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d101      	bne.n	8003756 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003752:	4b92      	ldr	r3, [pc, #584]	; (800399c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003754:	e001      	b.n	800375a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003756:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a8b      	ldr	r2, [pc, #556]	; (8003998 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d101      	bne.n	8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003770:	4b8a      	ldr	r3, [pc, #552]	; (800399c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003772:	e001      	b.n	8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003774:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003784:	d004      	beq.n	8003790 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	f040 8099 	bne.w	80038c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b02      	cmp	r3, #2
 8003798:	d107      	bne.n	80037aa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d002      	beq.n	80037aa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f925 	bl	80039f4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d107      	bne.n	80037c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f9c8 	bl	8003b54 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ca:	2b40      	cmp	r3, #64	; 0x40
 80037cc:	d13a      	bne.n	8003844 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f003 0320 	and.w	r3, r3, #32
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d035      	beq.n	8003844 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a6e      	ldr	r2, [pc, #440]	; (8003998 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d101      	bne.n	80037e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80037e2:	4b6e      	ldr	r3, [pc, #440]	; (800399c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037e4:	e001      	b.n	80037ea <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80037e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4969      	ldr	r1, [pc, #420]	; (8003998 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037f2:	428b      	cmp	r3, r1
 80037f4:	d101      	bne.n	80037fa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80037f6:	4b69      	ldr	r3, [pc, #420]	; (800399c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037f8:	e001      	b.n	80037fe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80037fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003802:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003812:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003814:	2300      	movs	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	f043 0202 	orr.w	r2, r3, #2
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7ff fe88 	bl	8003554 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b08      	cmp	r3, #8
 800384c:	f040 80c3 	bne.w	80039d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f003 0320 	and.w	r3, r3, #32
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 80bd 	beq.w	80039d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800386a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a49      	ldr	r2, [pc, #292]	; (8003998 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d101      	bne.n	800387a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003876:	4b49      	ldr	r3, [pc, #292]	; (800399c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003878:	e001      	b.n	800387e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800387a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4944      	ldr	r1, [pc, #272]	; (8003998 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003886:	428b      	cmp	r3, r1
 8003888:	d101      	bne.n	800388e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800388a:	4b44      	ldr	r3, [pc, #272]	; (800399c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800388c:	e001      	b.n	8003892 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800388e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003892:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003896:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003898:	2300      	movs	r3, #0
 800389a:	60bb      	str	r3, [r7, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	60bb      	str	r3, [r7, #8]
 80038a4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b2:	f043 0204 	orr.w	r2, r3, #4
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff fe4a 	bl	8003554 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038c0:	e089      	b.n	80039d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d107      	bne.n	80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f8be 	bl	8003a58 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d107      	bne.n	80038f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f8fd 	bl	8003af0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fc:	2b40      	cmp	r3, #64	; 0x40
 80038fe:	d12f      	bne.n	8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b00      	cmp	r3, #0
 8003908:	d02a      	beq.n	8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003918:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a1e      	ldr	r2, [pc, #120]	; (8003998 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d101      	bne.n	8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003924:	4b1d      	ldr	r3, [pc, #116]	; (800399c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003926:	e001      	b.n	800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003928:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4919      	ldr	r1, [pc, #100]	; (8003998 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003934:	428b      	cmp	r3, r1
 8003936:	d101      	bne.n	800393c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003938:	4b18      	ldr	r3, [pc, #96]	; (800399c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800393a:	e001      	b.n	8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800393c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003940:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003944:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003952:	f043 0202 	orr.w	r2, r3, #2
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff fdfa 	bl	8003554 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b08      	cmp	r3, #8
 8003968:	d136      	bne.n	80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b00      	cmp	r3, #0
 8003972:	d031      	beq.n	80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a07      	ldr	r2, [pc, #28]	; (8003998 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d101      	bne.n	8003982 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800397e:	4b07      	ldr	r3, [pc, #28]	; (800399c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003980:	e001      	b.n	8003986 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003982:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4902      	ldr	r1, [pc, #8]	; (8003998 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800398e:	428b      	cmp	r3, r1
 8003990:	d106      	bne.n	80039a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003992:	4b02      	ldr	r3, [pc, #8]	; (800399c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003994:	e006      	b.n	80039a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003996:	bf00      	nop
 8003998:	40003800 	.word	0x40003800
 800399c:	40003400 	.word	0x40003400
 80039a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039a8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	f043 0204 	orr.w	r2, r3, #4
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7ff fdc0 	bl	8003554 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039d4:	e000      	b.n	80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039d6:	bf00      	nop
}
 80039d8:	bf00      	nop
 80039da:	3720      	adds	r7, #32
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	1c99      	adds	r1, r3, #2
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6251      	str	r1, [r2, #36]	; 0x24
 8003a06:	881a      	ldrh	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d113      	bne.n	8003a4e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a34:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d106      	bne.n	8003a4e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff ffc9 	bl	80039e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a4e:	bf00      	nop
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	1c99      	adds	r1, r3, #2
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6251      	str	r1, [r2, #36]	; 0x24
 8003a6a:	8819      	ldrh	r1, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1d      	ldr	r2, [pc, #116]	; (8003ae8 <I2SEx_TxISR_I2SExt+0x90>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d101      	bne.n	8003a7a <I2SEx_TxISR_I2SExt+0x22>
 8003a76:	4b1d      	ldr	r3, [pc, #116]	; (8003aec <I2SEx_TxISR_I2SExt+0x94>)
 8003a78:	e001      	b.n	8003a7e <I2SEx_TxISR_I2SExt+0x26>
 8003a7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a7e:	460a      	mov	r2, r1
 8003a80:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d121      	bne.n	8003ade <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a12      	ldr	r2, [pc, #72]	; (8003ae8 <I2SEx_TxISR_I2SExt+0x90>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d101      	bne.n	8003aa8 <I2SEx_TxISR_I2SExt+0x50>
 8003aa4:	4b11      	ldr	r3, [pc, #68]	; (8003aec <I2SEx_TxISR_I2SExt+0x94>)
 8003aa6:	e001      	b.n	8003aac <I2SEx_TxISR_I2SExt+0x54>
 8003aa8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	490d      	ldr	r1, [pc, #52]	; (8003ae8 <I2SEx_TxISR_I2SExt+0x90>)
 8003ab4:	428b      	cmp	r3, r1
 8003ab6:	d101      	bne.n	8003abc <I2SEx_TxISR_I2SExt+0x64>
 8003ab8:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <I2SEx_TxISR_I2SExt+0x94>)
 8003aba:	e001      	b.n	8003ac0 <I2SEx_TxISR_I2SExt+0x68>
 8003abc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ac0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ac4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d106      	bne.n	8003ade <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff ff81 	bl	80039e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40003800 	.word	0x40003800
 8003aec:	40003400 	.word	0x40003400

08003af0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68d8      	ldr	r0, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	1c99      	adds	r1, r3, #2
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b08:	b282      	uxth	r2, r0
 8003b0a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d113      	bne.n	8003b4c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b32:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d106      	bne.n	8003b4c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7ff ff4a 	bl	80039e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a20      	ldr	r2, [pc, #128]	; (8003be4 <I2SEx_RxISR_I2SExt+0x90>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d101      	bne.n	8003b6a <I2SEx_RxISR_I2SExt+0x16>
 8003b66:	4b20      	ldr	r3, [pc, #128]	; (8003be8 <I2SEx_RxISR_I2SExt+0x94>)
 8003b68:	e001      	b.n	8003b6e <I2SEx_RxISR_I2SExt+0x1a>
 8003b6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b6e:	68d8      	ldr	r0, [r3, #12]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	1c99      	adds	r1, r3, #2
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b7a:	b282      	uxth	r2, r0
 8003b7c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d121      	bne.n	8003bda <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a12      	ldr	r2, [pc, #72]	; (8003be4 <I2SEx_RxISR_I2SExt+0x90>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d101      	bne.n	8003ba4 <I2SEx_RxISR_I2SExt+0x50>
 8003ba0:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <I2SEx_RxISR_I2SExt+0x94>)
 8003ba2:	e001      	b.n	8003ba8 <I2SEx_RxISR_I2SExt+0x54>
 8003ba4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	490d      	ldr	r1, [pc, #52]	; (8003be4 <I2SEx_RxISR_I2SExt+0x90>)
 8003bb0:	428b      	cmp	r3, r1
 8003bb2:	d101      	bne.n	8003bb8 <I2SEx_RxISR_I2SExt+0x64>
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <I2SEx_RxISR_I2SExt+0x94>)
 8003bb6:	e001      	b.n	8003bbc <I2SEx_RxISR_I2SExt+0x68>
 8003bb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bbc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bc0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d106      	bne.n	8003bda <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7ff ff03 	bl	80039e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bda:	bf00      	nop
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40003800 	.word	0x40003800
 8003be8:	40003400 	.word	0x40003400

08003bec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e267      	b.n	80040ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d075      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c0a:	4b88      	ldr	r3, [pc, #544]	; (8003e2c <HAL_RCC_OscConfig+0x240>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 030c 	and.w	r3, r3, #12
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d00c      	beq.n	8003c30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c16:	4b85      	ldr	r3, [pc, #532]	; (8003e2c <HAL_RCC_OscConfig+0x240>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d112      	bne.n	8003c48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c22:	4b82      	ldr	r3, [pc, #520]	; (8003e2c <HAL_RCC_OscConfig+0x240>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c2e:	d10b      	bne.n	8003c48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c30:	4b7e      	ldr	r3, [pc, #504]	; (8003e2c <HAL_RCC_OscConfig+0x240>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d05b      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x108>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d157      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e242      	b.n	80040ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c50:	d106      	bne.n	8003c60 <HAL_RCC_OscConfig+0x74>
 8003c52:	4b76      	ldr	r3, [pc, #472]	; (8003e2c <HAL_RCC_OscConfig+0x240>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a75      	ldr	r2, [pc, #468]	; (8003e2c <HAL_RCC_OscConfig+0x240>)
 8003c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	e01d      	b.n	8003c9c <HAL_RCC_OscConfig+0xb0>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c68:	d10c      	bne.n	8003c84 <HAL_RCC_OscConfig+0x98>
 8003c6a:	4b70      	ldr	r3, [pc, #448]	; (8003e2c <HAL_RCC_OscConfig+0x240>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a6f      	ldr	r2, [pc, #444]	; (8003e2c <HAL_RCC_OscConfig+0x240>)
 8003c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	4b6d      	ldr	r3, [pc, #436]	; (8003e2c <HAL_RCC_OscConfig+0x240>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a6c      	ldr	r2, [pc, #432]	; (8003e2c <HAL_RCC_OscConfig+0x240>)
 8003c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	e00b      	b.n	8003c9c <HAL_RCC_OscConfig+0xb0>
 8003c84:	4b69      	ldr	r3, [pc, #420]	; (8003e2c <HAL_RCC_OscConfig+0x240>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a68      	ldr	r2, [pc, #416]	; (8003e2c <HAL_RCC_OscConfig+0x240>)
 8003c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	4b66      	ldr	r3, [pc, #408]	; (8003e2c <HAL_RCC_OscConfig+0x240>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a65      	ldr	r2, [pc, #404]	; (8003e2c <HAL_RCC_OscConfig+0x240>)
 8003c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d013      	beq.n	8003ccc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fd f950 	bl	8000f48 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cac:	f7fd f94c 	bl	8000f48 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b64      	cmp	r3, #100	; 0x64
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e207      	b.n	80040ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cbe:	4b5b      	ldr	r3, [pc, #364]	; (8003e2c <HAL_RCC_OscConfig+0x240>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f0      	beq.n	8003cac <HAL_RCC_OscConfig+0xc0>
 8003cca:	e014      	b.n	8003cf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ccc:	f7fd f93c 	bl	8000f48 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cd4:	f7fd f938 	bl	8000f48 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b64      	cmp	r3, #100	; 0x64
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e1f3      	b.n	80040ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ce6:	4b51      	ldr	r3, [pc, #324]	; (8003e2c <HAL_RCC_OscConfig+0x240>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f0      	bne.n	8003cd4 <HAL_RCC_OscConfig+0xe8>
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d063      	beq.n	8003dca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d02:	4b4a      	ldr	r3, [pc, #296]	; (8003e2c <HAL_RCC_OscConfig+0x240>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 030c 	and.w	r3, r3, #12
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00b      	beq.n	8003d26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d0e:	4b47      	ldr	r3, [pc, #284]	; (8003e2c <HAL_RCC_OscConfig+0x240>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d16:	2b08      	cmp	r3, #8
 8003d18:	d11c      	bne.n	8003d54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d1a:	4b44      	ldr	r3, [pc, #272]	; (8003e2c <HAL_RCC_OscConfig+0x240>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d116      	bne.n	8003d54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d26:	4b41      	ldr	r3, [pc, #260]	; (8003e2c <HAL_RCC_OscConfig+0x240>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d005      	beq.n	8003d3e <HAL_RCC_OscConfig+0x152>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d001      	beq.n	8003d3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e1c7      	b.n	80040ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d3e:	4b3b      	ldr	r3, [pc, #236]	; (8003e2c <HAL_RCC_OscConfig+0x240>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	4937      	ldr	r1, [pc, #220]	; (8003e2c <HAL_RCC_OscConfig+0x240>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d52:	e03a      	b.n	8003dca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d020      	beq.n	8003d9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d5c:	4b34      	ldr	r3, [pc, #208]	; (8003e30 <HAL_RCC_OscConfig+0x244>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d62:	f7fd f8f1 	bl	8000f48 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d6a:	f7fd f8ed 	bl	8000f48 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e1a8      	b.n	80040ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d7c:	4b2b      	ldr	r3, [pc, #172]	; (8003e2c <HAL_RCC_OscConfig+0x240>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0f0      	beq.n	8003d6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d88:	4b28      	ldr	r3, [pc, #160]	; (8003e2c <HAL_RCC_OscConfig+0x240>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	4925      	ldr	r1, [pc, #148]	; (8003e2c <HAL_RCC_OscConfig+0x240>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	600b      	str	r3, [r1, #0]
 8003d9c:	e015      	b.n	8003dca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d9e:	4b24      	ldr	r3, [pc, #144]	; (8003e30 <HAL_RCC_OscConfig+0x244>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da4:	f7fd f8d0 	bl	8000f48 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dac:	f7fd f8cc 	bl	8000f48 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e187      	b.n	80040ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dbe:	4b1b      	ldr	r3, [pc, #108]	; (8003e2c <HAL_RCC_OscConfig+0x240>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d036      	beq.n	8003e44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d016      	beq.n	8003e0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dde:	4b15      	ldr	r3, [pc, #84]	; (8003e34 <HAL_RCC_OscConfig+0x248>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de4:	f7fd f8b0 	bl	8000f48 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dec:	f7fd f8ac 	bl	8000f48 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e167      	b.n	80040ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dfe:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <HAL_RCC_OscConfig+0x240>)
 8003e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0f0      	beq.n	8003dec <HAL_RCC_OscConfig+0x200>
 8003e0a:	e01b      	b.n	8003e44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e0c:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <HAL_RCC_OscConfig+0x248>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e12:	f7fd f899 	bl	8000f48 <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e18:	e00e      	b.n	8003e38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e1a:	f7fd f895 	bl	8000f48 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d907      	bls.n	8003e38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e150      	b.n	80040ce <HAL_RCC_OscConfig+0x4e2>
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	42470000 	.word	0x42470000
 8003e34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e38:	4b88      	ldr	r3, [pc, #544]	; (800405c <HAL_RCC_OscConfig+0x470>)
 8003e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1ea      	bne.n	8003e1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 8097 	beq.w	8003f80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e52:	2300      	movs	r3, #0
 8003e54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e56:	4b81      	ldr	r3, [pc, #516]	; (800405c <HAL_RCC_OscConfig+0x470>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10f      	bne.n	8003e82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e62:	2300      	movs	r3, #0
 8003e64:	60bb      	str	r3, [r7, #8]
 8003e66:	4b7d      	ldr	r3, [pc, #500]	; (800405c <HAL_RCC_OscConfig+0x470>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	4a7c      	ldr	r2, [pc, #496]	; (800405c <HAL_RCC_OscConfig+0x470>)
 8003e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e70:	6413      	str	r3, [r2, #64]	; 0x40
 8003e72:	4b7a      	ldr	r3, [pc, #488]	; (800405c <HAL_RCC_OscConfig+0x470>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7a:	60bb      	str	r3, [r7, #8]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e82:	4b77      	ldr	r3, [pc, #476]	; (8004060 <HAL_RCC_OscConfig+0x474>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d118      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e8e:	4b74      	ldr	r3, [pc, #464]	; (8004060 <HAL_RCC_OscConfig+0x474>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a73      	ldr	r2, [pc, #460]	; (8004060 <HAL_RCC_OscConfig+0x474>)
 8003e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e9a:	f7fd f855 	bl	8000f48 <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea2:	f7fd f851 	bl	8000f48 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e10c      	b.n	80040ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb4:	4b6a      	ldr	r3, [pc, #424]	; (8004060 <HAL_RCC_OscConfig+0x474>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0f0      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d106      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x2ea>
 8003ec8:	4b64      	ldr	r3, [pc, #400]	; (800405c <HAL_RCC_OscConfig+0x470>)
 8003eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ecc:	4a63      	ldr	r2, [pc, #396]	; (800405c <HAL_RCC_OscConfig+0x470>)
 8003ece:	f043 0301 	orr.w	r3, r3, #1
 8003ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed4:	e01c      	b.n	8003f10 <HAL_RCC_OscConfig+0x324>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	2b05      	cmp	r3, #5
 8003edc:	d10c      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x30c>
 8003ede:	4b5f      	ldr	r3, [pc, #380]	; (800405c <HAL_RCC_OscConfig+0x470>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	4a5e      	ldr	r2, [pc, #376]	; (800405c <HAL_RCC_OscConfig+0x470>)
 8003ee4:	f043 0304 	orr.w	r3, r3, #4
 8003ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eea:	4b5c      	ldr	r3, [pc, #368]	; (800405c <HAL_RCC_OscConfig+0x470>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eee:	4a5b      	ldr	r2, [pc, #364]	; (800405c <HAL_RCC_OscConfig+0x470>)
 8003ef0:	f043 0301 	orr.w	r3, r3, #1
 8003ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef6:	e00b      	b.n	8003f10 <HAL_RCC_OscConfig+0x324>
 8003ef8:	4b58      	ldr	r3, [pc, #352]	; (800405c <HAL_RCC_OscConfig+0x470>)
 8003efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efc:	4a57      	ldr	r2, [pc, #348]	; (800405c <HAL_RCC_OscConfig+0x470>)
 8003efe:	f023 0301 	bic.w	r3, r3, #1
 8003f02:	6713      	str	r3, [r2, #112]	; 0x70
 8003f04:	4b55      	ldr	r3, [pc, #340]	; (800405c <HAL_RCC_OscConfig+0x470>)
 8003f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f08:	4a54      	ldr	r2, [pc, #336]	; (800405c <HAL_RCC_OscConfig+0x470>)
 8003f0a:	f023 0304 	bic.w	r3, r3, #4
 8003f0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d015      	beq.n	8003f44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f18:	f7fd f816 	bl	8000f48 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1e:	e00a      	b.n	8003f36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f20:	f7fd f812 	bl	8000f48 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e0cb      	b.n	80040ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f36:	4b49      	ldr	r3, [pc, #292]	; (800405c <HAL_RCC_OscConfig+0x470>)
 8003f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0ee      	beq.n	8003f20 <HAL_RCC_OscConfig+0x334>
 8003f42:	e014      	b.n	8003f6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f44:	f7fd f800 	bl	8000f48 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f4a:	e00a      	b.n	8003f62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f4c:	f7fc fffc 	bl	8000f48 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e0b5      	b.n	80040ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f62:	4b3e      	ldr	r3, [pc, #248]	; (800405c <HAL_RCC_OscConfig+0x470>)
 8003f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1ee      	bne.n	8003f4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f6e:	7dfb      	ldrb	r3, [r7, #23]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d105      	bne.n	8003f80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f74:	4b39      	ldr	r3, [pc, #228]	; (800405c <HAL_RCC_OscConfig+0x470>)
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	4a38      	ldr	r2, [pc, #224]	; (800405c <HAL_RCC_OscConfig+0x470>)
 8003f7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 80a1 	beq.w	80040cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f8a:	4b34      	ldr	r3, [pc, #208]	; (800405c <HAL_RCC_OscConfig+0x470>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 030c 	and.w	r3, r3, #12
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d05c      	beq.n	8004050 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d141      	bne.n	8004022 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f9e:	4b31      	ldr	r3, [pc, #196]	; (8004064 <HAL_RCC_OscConfig+0x478>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa4:	f7fc ffd0 	bl	8000f48 <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fac:	f7fc ffcc 	bl	8000f48 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e087      	b.n	80040ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fbe:	4b27      	ldr	r3, [pc, #156]	; (800405c <HAL_RCC_OscConfig+0x470>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1f0      	bne.n	8003fac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69da      	ldr	r2, [r3, #28]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	019b      	lsls	r3, r3, #6
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe0:	085b      	lsrs	r3, r3, #1
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	041b      	lsls	r3, r3, #16
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	061b      	lsls	r3, r3, #24
 8003fee:	491b      	ldr	r1, [pc, #108]	; (800405c <HAL_RCC_OscConfig+0x470>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ff4:	4b1b      	ldr	r3, [pc, #108]	; (8004064 <HAL_RCC_OscConfig+0x478>)
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffa:	f7fc ffa5 	bl	8000f48 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004000:	e008      	b.n	8004014 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004002:	f7fc ffa1 	bl	8000f48 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e05c      	b.n	80040ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004014:	4b11      	ldr	r3, [pc, #68]	; (800405c <HAL_RCC_OscConfig+0x470>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0f0      	beq.n	8004002 <HAL_RCC_OscConfig+0x416>
 8004020:	e054      	b.n	80040cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004022:	4b10      	ldr	r3, [pc, #64]	; (8004064 <HAL_RCC_OscConfig+0x478>)
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004028:	f7fc ff8e 	bl	8000f48 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004030:	f7fc ff8a 	bl	8000f48 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e045      	b.n	80040ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004042:	4b06      	ldr	r3, [pc, #24]	; (800405c <HAL_RCC_OscConfig+0x470>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0x444>
 800404e:	e03d      	b.n	80040cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d107      	bne.n	8004068 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e038      	b.n	80040ce <HAL_RCC_OscConfig+0x4e2>
 800405c:	40023800 	.word	0x40023800
 8004060:	40007000 	.word	0x40007000
 8004064:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004068:	4b1b      	ldr	r3, [pc, #108]	; (80040d8 <HAL_RCC_OscConfig+0x4ec>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d028      	beq.n	80040c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004080:	429a      	cmp	r2, r3
 8004082:	d121      	bne.n	80040c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800408e:	429a      	cmp	r2, r3
 8004090:	d11a      	bne.n	80040c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004098:	4013      	ands	r3, r2
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800409e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d111      	bne.n	80040c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ae:	085b      	lsrs	r3, r3, #1
 80040b0:	3b01      	subs	r3, #1
 80040b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d107      	bne.n	80040c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d001      	beq.n	80040cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e000      	b.n	80040ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40023800 	.word	0x40023800

080040dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e0cc      	b.n	800428a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040f0:	4b68      	ldr	r3, [pc, #416]	; (8004294 <HAL_RCC_ClockConfig+0x1b8>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d90c      	bls.n	8004118 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fe:	4b65      	ldr	r3, [pc, #404]	; (8004294 <HAL_RCC_ClockConfig+0x1b8>)
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004106:	4b63      	ldr	r3, [pc, #396]	; (8004294 <HAL_RCC_ClockConfig+0x1b8>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d001      	beq.n	8004118 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e0b8      	b.n	800428a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d020      	beq.n	8004166 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b00      	cmp	r3, #0
 800412e:	d005      	beq.n	800413c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004130:	4b59      	ldr	r3, [pc, #356]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	4a58      	ldr	r2, [pc, #352]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800413a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b00      	cmp	r3, #0
 8004146:	d005      	beq.n	8004154 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004148:	4b53      	ldr	r3, [pc, #332]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	4a52      	ldr	r2, [pc, #328]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 800414e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004152:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004154:	4b50      	ldr	r3, [pc, #320]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	494d      	ldr	r1, [pc, #308]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	4313      	orrs	r3, r2
 8004164:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d044      	beq.n	80041fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d107      	bne.n	800418a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800417a:	4b47      	ldr	r3, [pc, #284]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d119      	bne.n	80041ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e07f      	b.n	800428a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b02      	cmp	r3, #2
 8004190:	d003      	beq.n	800419a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004196:	2b03      	cmp	r3, #3
 8004198:	d107      	bne.n	80041aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800419a:	4b3f      	ldr	r3, [pc, #252]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d109      	bne.n	80041ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e06f      	b.n	800428a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041aa:	4b3b      	ldr	r3, [pc, #236]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e067      	b.n	800428a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ba:	4b37      	ldr	r3, [pc, #220]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f023 0203 	bic.w	r2, r3, #3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	4934      	ldr	r1, [pc, #208]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041cc:	f7fc febc 	bl	8000f48 <HAL_GetTick>
 80041d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d2:	e00a      	b.n	80041ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d4:	f7fc feb8 	bl	8000f48 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e04f      	b.n	800428a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ea:	4b2b      	ldr	r3, [pc, #172]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 020c 	and.w	r2, r3, #12
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d1eb      	bne.n	80041d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041fc:	4b25      	ldr	r3, [pc, #148]	; (8004294 <HAL_RCC_ClockConfig+0x1b8>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	429a      	cmp	r2, r3
 8004208:	d20c      	bcs.n	8004224 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800420a:	4b22      	ldr	r3, [pc, #136]	; (8004294 <HAL_RCC_ClockConfig+0x1b8>)
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004212:	4b20      	ldr	r3, [pc, #128]	; (8004294 <HAL_RCC_ClockConfig+0x1b8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0307 	and.w	r3, r3, #7
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d001      	beq.n	8004224 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e032      	b.n	800428a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004230:	4b19      	ldr	r3, [pc, #100]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	4916      	ldr	r1, [pc, #88]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	4313      	orrs	r3, r2
 8004240:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0308 	and.w	r3, r3, #8
 800424a:	2b00      	cmp	r3, #0
 800424c:	d009      	beq.n	8004262 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800424e:	4b12      	ldr	r3, [pc, #72]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	490e      	ldr	r1, [pc, #56]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	4313      	orrs	r3, r2
 8004260:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004262:	f000 f821 	bl	80042a8 <HAL_RCC_GetSysClockFreq>
 8004266:	4602      	mov	r2, r0
 8004268:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	091b      	lsrs	r3, r3, #4
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	490a      	ldr	r1, [pc, #40]	; (800429c <HAL_RCC_ClockConfig+0x1c0>)
 8004274:	5ccb      	ldrb	r3, [r1, r3]
 8004276:	fa22 f303 	lsr.w	r3, r2, r3
 800427a:	4a09      	ldr	r2, [pc, #36]	; (80042a0 <HAL_RCC_ClockConfig+0x1c4>)
 800427c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800427e:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f7fc fd50 	bl	8000d28 <HAL_InitTick>

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	40023c00 	.word	0x40023c00
 8004298:	40023800 	.word	0x40023800
 800429c:	080082b4 	.word	0x080082b4
 80042a0:	20000000 	.word	0x20000000
 80042a4:	20000004 	.word	0x20000004

080042a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042ac:	b094      	sub	sp, #80	; 0x50
 80042ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	647b      	str	r3, [r7, #68]	; 0x44
 80042b4:	2300      	movs	r3, #0
 80042b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042b8:	2300      	movs	r3, #0
 80042ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042c0:	4b79      	ldr	r3, [pc, #484]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 030c 	and.w	r3, r3, #12
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d00d      	beq.n	80042e8 <HAL_RCC_GetSysClockFreq+0x40>
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	f200 80e1 	bhi.w	8004494 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <HAL_RCC_GetSysClockFreq+0x34>
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d003      	beq.n	80042e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80042da:	e0db      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042dc:	4b73      	ldr	r3, [pc, #460]	; (80044ac <HAL_RCC_GetSysClockFreq+0x204>)
 80042de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80042e0:	e0db      	b.n	800449a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042e2:	4b73      	ldr	r3, [pc, #460]	; (80044b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80042e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042e6:	e0d8      	b.n	800449a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042e8:	4b6f      	ldr	r3, [pc, #444]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042f2:	4b6d      	ldr	r3, [pc, #436]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d063      	beq.n	80043c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042fe:	4b6a      	ldr	r3, [pc, #424]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	099b      	lsrs	r3, r3, #6
 8004304:	2200      	movs	r2, #0
 8004306:	63bb      	str	r3, [r7, #56]	; 0x38
 8004308:	63fa      	str	r2, [r7, #60]	; 0x3c
 800430a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800430c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004310:	633b      	str	r3, [r7, #48]	; 0x30
 8004312:	2300      	movs	r3, #0
 8004314:	637b      	str	r3, [r7, #52]	; 0x34
 8004316:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800431a:	4622      	mov	r2, r4
 800431c:	462b      	mov	r3, r5
 800431e:	f04f 0000 	mov.w	r0, #0
 8004322:	f04f 0100 	mov.w	r1, #0
 8004326:	0159      	lsls	r1, r3, #5
 8004328:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800432c:	0150      	lsls	r0, r2, #5
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	4621      	mov	r1, r4
 8004334:	1a51      	subs	r1, r2, r1
 8004336:	6139      	str	r1, [r7, #16]
 8004338:	4629      	mov	r1, r5
 800433a:	eb63 0301 	sbc.w	r3, r3, r1
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800434c:	4659      	mov	r1, fp
 800434e:	018b      	lsls	r3, r1, #6
 8004350:	4651      	mov	r1, sl
 8004352:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004356:	4651      	mov	r1, sl
 8004358:	018a      	lsls	r2, r1, #6
 800435a:	4651      	mov	r1, sl
 800435c:	ebb2 0801 	subs.w	r8, r2, r1
 8004360:	4659      	mov	r1, fp
 8004362:	eb63 0901 	sbc.w	r9, r3, r1
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004372:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004376:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800437a:	4690      	mov	r8, r2
 800437c:	4699      	mov	r9, r3
 800437e:	4623      	mov	r3, r4
 8004380:	eb18 0303 	adds.w	r3, r8, r3
 8004384:	60bb      	str	r3, [r7, #8]
 8004386:	462b      	mov	r3, r5
 8004388:	eb49 0303 	adc.w	r3, r9, r3
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	f04f 0200 	mov.w	r2, #0
 8004392:	f04f 0300 	mov.w	r3, #0
 8004396:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800439a:	4629      	mov	r1, r5
 800439c:	024b      	lsls	r3, r1, #9
 800439e:	4621      	mov	r1, r4
 80043a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043a4:	4621      	mov	r1, r4
 80043a6:	024a      	lsls	r2, r1, #9
 80043a8:	4610      	mov	r0, r2
 80043aa:	4619      	mov	r1, r3
 80043ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043ae:	2200      	movs	r2, #0
 80043b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80043b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043b8:	f7fb ff0a 	bl	80001d0 <__aeabi_uldivmod>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4613      	mov	r3, r2
 80043c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043c4:	e058      	b.n	8004478 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043c6:	4b38      	ldr	r3, [pc, #224]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	099b      	lsrs	r3, r3, #6
 80043cc:	2200      	movs	r2, #0
 80043ce:	4618      	mov	r0, r3
 80043d0:	4611      	mov	r1, r2
 80043d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043d6:	623b      	str	r3, [r7, #32]
 80043d8:	2300      	movs	r3, #0
 80043da:	627b      	str	r3, [r7, #36]	; 0x24
 80043dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043e0:	4642      	mov	r2, r8
 80043e2:	464b      	mov	r3, r9
 80043e4:	f04f 0000 	mov.w	r0, #0
 80043e8:	f04f 0100 	mov.w	r1, #0
 80043ec:	0159      	lsls	r1, r3, #5
 80043ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043f2:	0150      	lsls	r0, r2, #5
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	4641      	mov	r1, r8
 80043fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80043fe:	4649      	mov	r1, r9
 8004400:	eb63 0b01 	sbc.w	fp, r3, r1
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004410:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004414:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004418:	ebb2 040a 	subs.w	r4, r2, sl
 800441c:	eb63 050b 	sbc.w	r5, r3, fp
 8004420:	f04f 0200 	mov.w	r2, #0
 8004424:	f04f 0300 	mov.w	r3, #0
 8004428:	00eb      	lsls	r3, r5, #3
 800442a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800442e:	00e2      	lsls	r2, r4, #3
 8004430:	4614      	mov	r4, r2
 8004432:	461d      	mov	r5, r3
 8004434:	4643      	mov	r3, r8
 8004436:	18e3      	adds	r3, r4, r3
 8004438:	603b      	str	r3, [r7, #0]
 800443a:	464b      	mov	r3, r9
 800443c:	eb45 0303 	adc.w	r3, r5, r3
 8004440:	607b      	str	r3, [r7, #4]
 8004442:	f04f 0200 	mov.w	r2, #0
 8004446:	f04f 0300 	mov.w	r3, #0
 800444a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800444e:	4629      	mov	r1, r5
 8004450:	028b      	lsls	r3, r1, #10
 8004452:	4621      	mov	r1, r4
 8004454:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004458:	4621      	mov	r1, r4
 800445a:	028a      	lsls	r2, r1, #10
 800445c:	4610      	mov	r0, r2
 800445e:	4619      	mov	r1, r3
 8004460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004462:	2200      	movs	r2, #0
 8004464:	61bb      	str	r3, [r7, #24]
 8004466:	61fa      	str	r2, [r7, #28]
 8004468:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800446c:	f7fb feb0 	bl	80001d0 <__aeabi_uldivmod>
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	4613      	mov	r3, r2
 8004476:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004478:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	0c1b      	lsrs	r3, r3, #16
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	3301      	adds	r3, #1
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004488:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800448a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800448c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004490:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004492:	e002      	b.n	800449a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004494:	4b05      	ldr	r3, [pc, #20]	; (80044ac <HAL_RCC_GetSysClockFreq+0x204>)
 8004496:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004498:	bf00      	nop
    }
  }
  return sysclockfreq;
 800449a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800449c:	4618      	mov	r0, r3
 800449e:	3750      	adds	r7, #80	; 0x50
 80044a0:	46bd      	mov	sp, r7
 80044a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044a6:	bf00      	nop
 80044a8:	40023800 	.word	0x40023800
 80044ac:	00f42400 	.word	0x00f42400
 80044b0:	007a1200 	.word	0x007a1200

080044b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044b8:	4b03      	ldr	r3, [pc, #12]	; (80044c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80044ba:	681b      	ldr	r3, [r3, #0]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	20000000 	.word	0x20000000

080044cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044d0:	f7ff fff0 	bl	80044b4 <HAL_RCC_GetHCLKFreq>
 80044d4:	4602      	mov	r2, r0
 80044d6:	4b05      	ldr	r3, [pc, #20]	; (80044ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	0a9b      	lsrs	r3, r3, #10
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	4903      	ldr	r1, [pc, #12]	; (80044f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044e2:	5ccb      	ldrb	r3, [r1, r3]
 80044e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	40023800 	.word	0x40023800
 80044f0:	080082c4 	.word	0x080082c4

080044f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044f8:	f7ff ffdc 	bl	80044b4 <HAL_RCC_GetHCLKFreq>
 80044fc:	4602      	mov	r2, r0
 80044fe:	4b05      	ldr	r3, [pc, #20]	; (8004514 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	0b5b      	lsrs	r3, r3, #13
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	4903      	ldr	r1, [pc, #12]	; (8004518 <HAL_RCC_GetPCLK2Freq+0x24>)
 800450a:	5ccb      	ldrb	r3, [r1, r3]
 800450c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004510:	4618      	mov	r0, r3
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40023800 	.word	0x40023800
 8004518:	080082c4 	.word	0x080082c4

0800451c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	220f      	movs	r2, #15
 800452a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800452c:	4b12      	ldr	r3, [pc, #72]	; (8004578 <HAL_RCC_GetClockConfig+0x5c>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f003 0203 	and.w	r2, r3, #3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004538:	4b0f      	ldr	r3, [pc, #60]	; (8004578 <HAL_RCC_GetClockConfig+0x5c>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004544:	4b0c      	ldr	r3, [pc, #48]	; (8004578 <HAL_RCC_GetClockConfig+0x5c>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004550:	4b09      	ldr	r3, [pc, #36]	; (8004578 <HAL_RCC_GetClockConfig+0x5c>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	08db      	lsrs	r3, r3, #3
 8004556:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800455e:	4b07      	ldr	r3, [pc, #28]	; (800457c <HAL_RCC_GetClockConfig+0x60>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0207 	and.w	r2, r3, #7
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	601a      	str	r2, [r3, #0]
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40023800 	.word	0x40023800
 800457c:	40023c00 	.word	0x40023c00

08004580 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d105      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d035      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045a8:	4b62      	ldr	r3, [pc, #392]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045ae:	f7fc fccb 	bl	8000f48 <HAL_GetTick>
 80045b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045b4:	e008      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045b6:	f7fc fcc7 	bl	8000f48 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e0b0      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045c8:	4b5b      	ldr	r3, [pc, #364]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1f0      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	019a      	lsls	r2, r3, #6
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	071b      	lsls	r3, r3, #28
 80045e0:	4955      	ldr	r1, [pc, #340]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045e8:	4b52      	ldr	r3, [pc, #328]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80045ea:	2201      	movs	r2, #1
 80045ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045ee:	f7fc fcab 	bl	8000f48 <HAL_GetTick>
 80045f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045f4:	e008      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045f6:	f7fc fca7 	bl	8000f48 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e090      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004608:	4b4b      	ldr	r3, [pc, #300]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d0f0      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 8083 	beq.w	8004728 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	4b44      	ldr	r3, [pc, #272]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	4a43      	ldr	r2, [pc, #268]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800462c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004630:	6413      	str	r3, [r2, #64]	; 0x40
 8004632:	4b41      	ldr	r3, [pc, #260]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800463e:	4b3f      	ldr	r3, [pc, #252]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a3e      	ldr	r2, [pc, #248]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004648:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800464a:	f7fc fc7d 	bl	8000f48 <HAL_GetTick>
 800464e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004650:	e008      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004652:	f7fc fc79 	bl	8000f48 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d901      	bls.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e062      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004664:	4b35      	ldr	r3, [pc, #212]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0f0      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004670:	4b31      	ldr	r3, [pc, #196]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004674:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004678:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d02f      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	429a      	cmp	r2, r3
 800468c:	d028      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800468e:	4b2a      	ldr	r3, [pc, #168]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004696:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004698:	4b29      	ldr	r3, [pc, #164]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800469a:	2201      	movs	r2, #1
 800469c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800469e:	4b28      	ldr	r3, [pc, #160]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80046a4:	4a24      	ldr	r2, [pc, #144]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046aa:	4b23      	ldr	r3, [pc, #140]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d114      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80046b6:	f7fc fc47 	bl	8000f48 <HAL_GetTick>
 80046ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046bc:	e00a      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046be:	f7fc fc43 	bl	8000f48 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e02a      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d4:	4b18      	ldr	r3, [pc, #96]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0ee      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ec:	d10d      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80046ee:	4b12      	ldr	r3, [pc, #72]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80046fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004702:	490d      	ldr	r1, [pc, #52]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004704:	4313      	orrs	r3, r2
 8004706:	608b      	str	r3, [r1, #8]
 8004708:	e005      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800470a:	4b0b      	ldr	r3, [pc, #44]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	4a0a      	ldr	r2, [pc, #40]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004710:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004714:	6093      	str	r3, [r2, #8]
 8004716:	4b08      	ldr	r3, [pc, #32]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004718:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004722:	4905      	ldr	r1, [pc, #20]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004724:	4313      	orrs	r3, r2
 8004726:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	42470068 	.word	0x42470068
 8004738:	40023800 	.word	0x40023800
 800473c:	40007000 	.word	0x40007000
 8004740:	42470e40 	.word	0x42470e40

08004744 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004744:	b480      	push	{r7}
 8004746:	b087      	sub	sp, #28
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004758:	2300      	movs	r3, #0
 800475a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d13f      	bne.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004762:	4b24      	ldr	r3, [pc, #144]	; (80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d006      	beq.n	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004778:	d12f      	bne.n	80047da <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800477a:	4b1f      	ldr	r3, [pc, #124]	; (80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800477c:	617b      	str	r3, [r7, #20]
          break;
 800477e:	e02f      	b.n	80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004780:	4b1c      	ldr	r3, [pc, #112]	; (80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004788:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800478c:	d108      	bne.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800478e:	4b19      	ldr	r3, [pc, #100]	; (80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004796:	4a19      	ldr	r2, [pc, #100]	; (80047fc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004798:	fbb2 f3f3 	udiv	r3, r2, r3
 800479c:	613b      	str	r3, [r7, #16]
 800479e:	e007      	b.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047a0:	4b14      	ldr	r3, [pc, #80]	; (80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047a8:	4a15      	ldr	r2, [pc, #84]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80047aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ae:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80047b0:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047b6:	099b      	lsrs	r3, r3, #6
 80047b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	fb02 f303 	mul.w	r3, r2, r3
 80047c2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80047c4:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ca:	0f1b      	lsrs	r3, r3, #28
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d6:	617b      	str	r3, [r7, #20]
          break;
 80047d8:	e002      	b.n	80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80047da:	2300      	movs	r3, #0
 80047dc:	617b      	str	r3, [r7, #20]
          break;
 80047de:	bf00      	nop
        }
      }
      break;
 80047e0:	e000      	b.n	80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 80047e2:	bf00      	nop
    }
  }
  return frequency;
 80047e4:	697b      	ldr	r3, [r7, #20]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	371c      	adds	r7, #28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	40023800 	.word	0x40023800
 80047f8:	00bb8000 	.word	0x00bb8000
 80047fc:	007a1200 	.word	0x007a1200
 8004800:	00f42400 	.word	0x00f42400

08004804 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e07b      	b.n	800490e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	2b00      	cmp	r3, #0
 800481c:	d108      	bne.n	8004830 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004826:	d009      	beq.n	800483c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	61da      	str	r2, [r3, #28]
 800482e:	e005      	b.n	800483c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d106      	bne.n	800485c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7fc f9fc 	bl	8000c54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004872:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004884:	431a      	orrs	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048ac:	431a      	orrs	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c0:	ea42 0103 	orr.w	r1, r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	0c1b      	lsrs	r3, r3, #16
 80048da:	f003 0104 	and.w	r1, r3, #4
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	f003 0210 	and.w	r2, r3, #16
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	69da      	ldr	r2, [r3, #28]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b082      	sub	sp, #8
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e041      	b.n	80049ac <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	d106      	bne.n	8004942 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7fc f9d1 	bl	8000ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2202      	movs	r2, #2
 8004946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3304      	adds	r3, #4
 8004952:	4619      	mov	r1, r3
 8004954:	4610      	mov	r0, r2
 8004956:	f000 f9b5 	bl	8004cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d001      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e04e      	b.n	8004a6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a23      	ldr	r2, [pc, #140]	; (8004a78 <HAL_TIM_Base_Start_IT+0xc4>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d022      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x80>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f6:	d01d      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x80>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a1f      	ldr	r2, [pc, #124]	; (8004a7c <HAL_TIM_Base_Start_IT+0xc8>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d018      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x80>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a1e      	ldr	r2, [pc, #120]	; (8004a80 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d013      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x80>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a1c      	ldr	r2, [pc, #112]	; (8004a84 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d00e      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x80>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a1b      	ldr	r2, [pc, #108]	; (8004a88 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d009      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x80>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a19      	ldr	r2, [pc, #100]	; (8004a8c <HAL_TIM_Base_Start_IT+0xd8>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d004      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x80>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a18      	ldr	r2, [pc, #96]	; (8004a90 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d111      	bne.n	8004a58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b06      	cmp	r3, #6
 8004a44:	d010      	beq.n	8004a68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f042 0201 	orr.w	r2, r2, #1
 8004a54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a56:	e007      	b.n	8004a68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0201 	orr.w	r2, r2, #1
 8004a66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40010000 	.word	0x40010000
 8004a7c:	40000400 	.word	0x40000400
 8004a80:	40000800 	.word	0x40000800
 8004a84:	40000c00 	.word	0x40000c00
 8004a88:	40010400 	.word	0x40010400
 8004a8c:	40014000 	.word	0x40014000
 8004a90:	40001800 	.word	0x40001800

08004a94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d020      	beq.n	8004af8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d01b      	beq.n	8004af8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f06f 0202 	mvn.w	r2, #2
 8004ac8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f8d2 	bl	8004c88 <HAL_TIM_IC_CaptureCallback>
 8004ae4:	e005      	b.n	8004af2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f8c4 	bl	8004c74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 f8d5 	bl	8004c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d020      	beq.n	8004b44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d01b      	beq.n	8004b44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f06f 0204 	mvn.w	r2, #4
 8004b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2202      	movs	r2, #2
 8004b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f8ac 	bl	8004c88 <HAL_TIM_IC_CaptureCallback>
 8004b30:	e005      	b.n	8004b3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f89e 	bl	8004c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f8af 	bl	8004c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f003 0308 	and.w	r3, r3, #8
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d020      	beq.n	8004b90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f003 0308 	and.w	r3, r3, #8
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d01b      	beq.n	8004b90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f06f 0208 	mvn.w	r2, #8
 8004b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2204      	movs	r2, #4
 8004b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f886 	bl	8004c88 <HAL_TIM_IC_CaptureCallback>
 8004b7c:	e005      	b.n	8004b8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f878 	bl	8004c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f889 	bl	8004c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f003 0310 	and.w	r3, r3, #16
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d020      	beq.n	8004bdc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f003 0310 	and.w	r3, r3, #16
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d01b      	beq.n	8004bdc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f06f 0210 	mvn.w	r2, #16
 8004bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2208      	movs	r2, #8
 8004bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f860 	bl	8004c88 <HAL_TIM_IC_CaptureCallback>
 8004bc8:	e005      	b.n	8004bd6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f852 	bl	8004c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 f863 	bl	8004c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00c      	beq.n	8004c00 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d007      	beq.n	8004c00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f06f 0201 	mvn.w	r2, #1
 8004bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fb ff1e 	bl	8000a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00c      	beq.n	8004c24 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d007      	beq.n	8004c24 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f906 	bl	8004e30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00c      	beq.n	8004c48 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d007      	beq.n	8004c48 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f834 	bl	8004cb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f003 0320 	and.w	r3, r3, #32
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00c      	beq.n	8004c6c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f003 0320 	and.w	r3, r3, #32
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d007      	beq.n	8004c6c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f06f 0220 	mvn.w	r2, #32
 8004c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f8d8 	bl	8004e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c6c:	bf00      	nop
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a46      	ldr	r2, [pc, #280]	; (8004df0 <TIM_Base_SetConfig+0x12c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d013      	beq.n	8004d04 <TIM_Base_SetConfig+0x40>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce2:	d00f      	beq.n	8004d04 <TIM_Base_SetConfig+0x40>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a43      	ldr	r2, [pc, #268]	; (8004df4 <TIM_Base_SetConfig+0x130>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d00b      	beq.n	8004d04 <TIM_Base_SetConfig+0x40>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a42      	ldr	r2, [pc, #264]	; (8004df8 <TIM_Base_SetConfig+0x134>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d007      	beq.n	8004d04 <TIM_Base_SetConfig+0x40>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a41      	ldr	r2, [pc, #260]	; (8004dfc <TIM_Base_SetConfig+0x138>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d003      	beq.n	8004d04 <TIM_Base_SetConfig+0x40>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a40      	ldr	r2, [pc, #256]	; (8004e00 <TIM_Base_SetConfig+0x13c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d108      	bne.n	8004d16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a35      	ldr	r2, [pc, #212]	; (8004df0 <TIM_Base_SetConfig+0x12c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d02b      	beq.n	8004d76 <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d24:	d027      	beq.n	8004d76 <TIM_Base_SetConfig+0xb2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a32      	ldr	r2, [pc, #200]	; (8004df4 <TIM_Base_SetConfig+0x130>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d023      	beq.n	8004d76 <TIM_Base_SetConfig+0xb2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a31      	ldr	r2, [pc, #196]	; (8004df8 <TIM_Base_SetConfig+0x134>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d01f      	beq.n	8004d76 <TIM_Base_SetConfig+0xb2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a30      	ldr	r2, [pc, #192]	; (8004dfc <TIM_Base_SetConfig+0x138>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d01b      	beq.n	8004d76 <TIM_Base_SetConfig+0xb2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a2f      	ldr	r2, [pc, #188]	; (8004e00 <TIM_Base_SetConfig+0x13c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d017      	beq.n	8004d76 <TIM_Base_SetConfig+0xb2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a2e      	ldr	r2, [pc, #184]	; (8004e04 <TIM_Base_SetConfig+0x140>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d013      	beq.n	8004d76 <TIM_Base_SetConfig+0xb2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a2d      	ldr	r2, [pc, #180]	; (8004e08 <TIM_Base_SetConfig+0x144>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00f      	beq.n	8004d76 <TIM_Base_SetConfig+0xb2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a2c      	ldr	r2, [pc, #176]	; (8004e0c <TIM_Base_SetConfig+0x148>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d00b      	beq.n	8004d76 <TIM_Base_SetConfig+0xb2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a2b      	ldr	r2, [pc, #172]	; (8004e10 <TIM_Base_SetConfig+0x14c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d007      	beq.n	8004d76 <TIM_Base_SetConfig+0xb2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a2a      	ldr	r2, [pc, #168]	; (8004e14 <TIM_Base_SetConfig+0x150>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d003      	beq.n	8004d76 <TIM_Base_SetConfig+0xb2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a29      	ldr	r2, [pc, #164]	; (8004e18 <TIM_Base_SetConfig+0x154>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d108      	bne.n	8004d88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a10      	ldr	r2, [pc, #64]	; (8004df0 <TIM_Base_SetConfig+0x12c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d003      	beq.n	8004dbc <TIM_Base_SetConfig+0xf8>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a12      	ldr	r2, [pc, #72]	; (8004e00 <TIM_Base_SetConfig+0x13c>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d103      	bne.n	8004dc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	691a      	ldr	r2, [r3, #16]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d105      	bne.n	8004de2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	f023 0201 	bic.w	r2, r3, #1
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	611a      	str	r2, [r3, #16]
  }
}
 8004de2:	bf00      	nop
 8004de4:	3714      	adds	r7, #20
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	40010000 	.word	0x40010000
 8004df4:	40000400 	.word	0x40000400
 8004df8:	40000800 	.word	0x40000800
 8004dfc:	40000c00 	.word	0x40000c00
 8004e00:	40010400 	.word	0x40010400
 8004e04:	40014000 	.word	0x40014000
 8004e08:	40014400 	.word	0x40014400
 8004e0c:	40014800 	.word	0x40014800
 8004e10:	40001800 	.word	0x40001800
 8004e14:	40001c00 	.word	0x40001c00
 8004e18:	40002000 	.word	0x40002000

08004e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f043 0201 	orr.w	r2, r3, #1
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f023 0201 	bic.w	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004ea2:	d901      	bls.n	8004ea8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e01b      	b.n	8004ee0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	daf2      	bge.n	8004e96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	019b      	lsls	r3, r3, #6
 8004eb8:	f043 0220 	orr.w	r2, r3, #32
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004ecc:	d901      	bls.n	8004ed2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e006      	b.n	8004ee0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f003 0320 	and.w	r3, r3, #32
 8004eda:	2b20      	cmp	r3, #32
 8004edc:	d0f0      	beq.n	8004ec0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3714      	adds	r7, #20
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	3301      	adds	r3, #1
 8004efc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004f04:	d901      	bls.n	8004f0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e018      	b.n	8004f3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	daf2      	bge.n	8004ef8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2210      	movs	r2, #16
 8004f1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004f28:	d901      	bls.n	8004f2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e006      	b.n	8004f3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f003 0310 	and.w	r3, r3, #16
 8004f36:	2b10      	cmp	r3, #16
 8004f38:	d0f0      	beq.n	8004f1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b08b      	sub	sp, #44	; 0x2c
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	4613      	mov	r3, r2
 8004f54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f5e:	88fb      	ldrh	r3, [r7, #6]
 8004f60:	089b      	lsrs	r3, r3, #2
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f66:	88fb      	ldrh	r3, [r7, #6]
 8004f68:	f003 0303 	and.w	r3, r3, #3
 8004f6c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f6e:	2300      	movs	r3, #0
 8004f70:	623b      	str	r3, [r7, #32]
 8004f72:	e014      	b.n	8004f9e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	3301      	adds	r3, #1
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	3301      	adds	r3, #1
 8004f8a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	3301      	adds	r3, #1
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	3301      	adds	r3, #1
 8004f96:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	623b      	str	r3, [r7, #32]
 8004f9e:	6a3a      	ldr	r2, [r7, #32]
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d3e6      	bcc.n	8004f74 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004fa6:	8bfb      	ldrh	r3, [r7, #30]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d01e      	beq.n	8004fea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f107 0310 	add.w	r3, r7, #16
 8004fbc:	6812      	ldr	r2, [r2, #0]
 8004fbe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	701a      	strb	r2, [r3, #0]
      i++;
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	623b      	str	r3, [r7, #32]
      pDest++;
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	3301      	adds	r3, #1
 8004fdc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004fde:	8bfb      	ldrh	r3, [r7, #30]
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004fe4:	8bfb      	ldrh	r3, [r7, #30]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1ea      	bne.n	8004fc0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	372c      	adds	r7, #44	; 0x2c
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	4013      	ands	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005010:	68fb      	ldr	r3, [r7, #12]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800501e:	b480      	push	{r7}
 8005020:	b085      	sub	sp, #20
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	460b      	mov	r3, r1
 8005028:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800502e:	78fb      	ldrb	r3, [r7, #3]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	4413      	add	r3, r2
 8005036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800503e:	78fb      	ldrb	r3, [r7, #3]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4413      	add	r3, r2
 8005046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	4013      	ands	r3, r2
 8005050:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005052:	68bb      	ldr	r3, [r7, #8]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	f003 0301 	and.w	r3, r3, #1
}
 8005070:	4618      	mov	r0, r3
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	460b      	mov	r3, r1
 8005086:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800509a:	f023 0303 	bic.w	r3, r3, #3
 800509e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	78fb      	ldrb	r3, [r7, #3]
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	68f9      	ldr	r1, [r7, #12]
 80050b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80050b4:	4313      	orrs	r3, r2
 80050b6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80050b8:	78fb      	ldrb	r3, [r7, #3]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d107      	bne.n	80050ce <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050c4:	461a      	mov	r2, r3
 80050c6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80050ca:	6053      	str	r3, [r2, #4]
 80050cc:	e00c      	b.n	80050e8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80050ce:	78fb      	ldrb	r3, [r7, #3]
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d107      	bne.n	80050e4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050da:	461a      	mov	r2, r3
 80050dc:	f241 7370 	movw	r3, #6000	; 0x1770
 80050e0:	6053      	str	r3, [r2, #4]
 80050e2:	e001      	b.n	80050e8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e000      	b.n	80050ea <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b085      	sub	sp, #20
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	b29b      	uxth	r3, r3
}
 800510c:	4618      	mov	r0, r3
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005118:	b480      	push	{r7}
 800511a:	b089      	sub	sp, #36	; 0x24
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	460b      	mov	r3, r1
 8005122:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005128:	78fb      	ldrb	r3, [r7, #3]
 800512a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	4413      	add	r3, r2
 8005138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	0c9b      	lsrs	r3, r3, #18
 8005140:	f003 0303 	and.w	r3, r3, #3
 8005144:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	4413      	add	r3, r2
 800514e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	0fdb      	lsrs	r3, r3, #31
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	4413      	add	r3, r2
 8005164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	0fdb      	lsrs	r3, r3, #31
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 0320 	and.w	r3, r3, #32
 800517a:	2b20      	cmp	r3, #32
 800517c:	d10d      	bne.n	800519a <USB_HC_Halt+0x82>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10a      	bne.n	800519a <USB_HC_Halt+0x82>
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d005      	beq.n	8005196 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d002      	beq.n	8005196 <USB_HC_Halt+0x7e>
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	2b03      	cmp	r3, #3
 8005194:	d101      	bne.n	800519a <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005196:	2300      	movs	r3, #0
 8005198:	e0d8      	b.n	800534c <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <USB_HC_Halt+0x8e>
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d173      	bne.n	800528e <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	0151      	lsls	r1, r2, #5
 80051b8:	69fa      	ldr	r2, [r7, #28]
 80051ba:	440a      	add	r2, r1
 80051bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051c4:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 0320 	and.w	r3, r3, #32
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d14a      	bne.n	8005268 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d133      	bne.n	8005246 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	0151      	lsls	r1, r2, #5
 80051f0:	69fa      	ldr	r2, [r7, #28]
 80051f2:	440a      	add	r2, r1
 80051f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051fc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	4413      	add	r3, r2
 8005206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	0151      	lsls	r1, r2, #5
 8005210:	69fa      	ldr	r2, [r7, #28]
 8005212:	440a      	add	r2, r1
 8005214:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005218:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800521c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	3301      	adds	r3, #1
 8005222:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800522a:	d82e      	bhi.n	800528a <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	4413      	add	r3, r2
 8005234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800523e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005242:	d0ec      	beq.n	800521e <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005244:	e081      	b.n	800534a <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	4413      	add	r3, r2
 800524e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	0151      	lsls	r1, r2, #5
 8005258:	69fa      	ldr	r2, [r7, #28]
 800525a:	440a      	add	r2, r1
 800525c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005260:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005264:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005266:	e070      	b.n	800534a <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	4413      	add	r3, r2
 8005270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	0151      	lsls	r1, r2, #5
 800527a:	69fa      	ldr	r2, [r7, #28]
 800527c:	440a      	add	r2, r1
 800527e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005282:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005286:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005288:	e05f      	b.n	800534a <USB_HC_Halt+0x232>
            break;
 800528a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800528c:	e05d      	b.n	800534a <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	4413      	add	r3, r2
 8005296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	0151      	lsls	r1, r2, #5
 80052a0:	69fa      	ldr	r2, [r7, #28]
 80052a2:	440a      	add	r2, r1
 80052a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052ac:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d133      	bne.n	8005326 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	0151      	lsls	r1, r2, #5
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	440a      	add	r2, r1
 80052d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052dc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	0151      	lsls	r1, r2, #5
 80052f0:	69fa      	ldr	r2, [r7, #28]
 80052f2:	440a      	add	r2, r1
 80052f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052fc:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	3301      	adds	r3, #1
 8005302:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800530a:	d81d      	bhi.n	8005348 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	4413      	add	r3, r2
 8005314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800531e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005322:	d0ec      	beq.n	80052fe <USB_HC_Halt+0x1e6>
 8005324:	e011      	b.n	800534a <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	4413      	add	r3, r2
 800532e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	0151      	lsls	r1, r2, #5
 8005338:	69fa      	ldr	r2, [r7, #28]
 800533a:	440a      	add	r2, r1
 800533c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005340:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005344:	6013      	str	r3, [r2, #0]
 8005346:	e000      	b.n	800534a <USB_HC_Halt+0x232>
          break;
 8005348:	bf00      	nop
    }
  }

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3724      	adds	r7, #36	; 0x24
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b088      	sub	sp, #32
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005360:	2300      	movs	r3, #0
 8005362:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7ff fd7a 	bl	8004e66 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005372:	2110      	movs	r1, #16
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7ff fd87 	bl	8004e88 <USB_FlushTxFifo>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d001      	beq.n	8005384 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7ff fdb1 	bl	8004eec <USB_FlushRxFifo>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005394:	2300      	movs	r3, #0
 8005396:	61bb      	str	r3, [r7, #24]
 8005398:	e01f      	b.n	80053da <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053c0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ce:	461a      	mov	r2, r3
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	3301      	adds	r3, #1
 80053d8:	61bb      	str	r3, [r7, #24]
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	2b0f      	cmp	r3, #15
 80053de:	d9dc      	bls.n	800539a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80053e0:	2300      	movs	r3, #0
 80053e2:	61bb      	str	r3, [r7, #24]
 80053e4:	e034      	b.n	8005450 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053fc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005404:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800540c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	4413      	add	r3, r2
 8005416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800541a:	461a      	mov	r2, r3
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3301      	adds	r3, #1
 8005424:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800542c:	d80c      	bhi.n	8005448 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	4413      	add	r3, r2
 8005436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005440:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005444:	d0ec      	beq.n	8005420 <USB_StopHost+0xc8>
 8005446:	e000      	b.n	800544a <USB_StopHost+0xf2>
        break;
 8005448:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	3301      	adds	r3, #1
 800544e:	61bb      	str	r3, [r7, #24]
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	2b0f      	cmp	r3, #15
 8005454:	d9c7      	bls.n	80053e6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800545c:	461a      	mov	r2, r3
 800545e:	f04f 33ff 	mov.w	r3, #4294967295
 8005462:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f04f 32ff 	mov.w	r2, #4294967295
 800546a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7ff fce9 	bl	8004e44 <USB_EnableGlobalInt>

  return ret;
 8005472:	7ffb      	ldrb	r3, [r7, #31]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3720      	adds	r7, #32
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f804 	bl	80054a0 <USBH_HandleSof>
}
 8005498:	bf00      	nop
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b0b      	cmp	r3, #11
 80054b0:	d10a      	bne.n	80054c8 <USBH_HandleSof+0x28>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d005      	beq.n	80054c8 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	4798      	blx	r3
  }
}
 80054c8:	bf00      	nop
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80054f4:	2200      	movs	r2, #0
 80054f6:	4619      	mov	r1, r3
 80054f8:	f000 f8ae 	bl	8005658 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80054fc:	bf00      	nop
}
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8005514:	bf00      	nop
}
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005554:	2200      	movs	r2, #0
 8005556:	4619      	mov	r1, r3
 8005558:	f000 f87e 	bl	8005658 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f002 fd40 	bl	800800c <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	791b      	ldrb	r3, [r3, #4]
 8005590:	4619      	mov	r1, r3
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f830 	bl	80055f8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	795b      	ldrb	r3, [r3, #5]
 800559c:	4619      	mov	r1, r3
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f82a 	bl	80055f8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80055b8:	2200      	movs	r2, #0
 80055ba:	4619      	mov	r1, r3
 80055bc:	f000 f84c 	bl	8005658 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b082      	sub	sp, #8
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80055e6:	2200      	movs	r2, #0
 80055e8:	4619      	mov	r1, r3
 80055ea:	f000 f835 	bl	8005658 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	460b      	mov	r3, r1
 8005602:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8005604:	78fb      	ldrb	r3, [r7, #3]
 8005606:	2b0f      	cmp	r3, #15
 8005608:	d80d      	bhi.n	8005626 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800560a:	78fb      	ldrb	r3, [r7, #3]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	33e0      	adds	r3, #224	; 0xe0
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	78fb      	ldrb	r3, [r7, #3]
 8005618:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	33e0      	adds	r3, #224	; 0xe0
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	440b      	add	r3, r1
 8005624:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800563a:	f3ef 8305 	mrs	r3, IPSR
 800563e:	607b      	str	r3, [r7, #4]
  return(result);
 8005640:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005642:	2b00      	cmp	r3, #0
 8005644:	bf14      	ite	ne
 8005646:	2301      	movne	r3, #1
 8005648:	2300      	moveq	r3, #0
 800564a:	b2db      	uxtb	r3, r3
}
 800564c:	4618      	mov	r0, r3
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005664:	2300      	movs	r3, #0
 8005666:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <osMessagePut+0x1e>
    ticks = 1;
 8005672:	2301      	movs	r3, #1
 8005674:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005676:	f7ff ffdd 	bl	8005634 <inHandlerMode>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d018      	beq.n	80056b2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005680:	f107 0210 	add.w	r2, r7, #16
 8005684:	f107 0108 	add.w	r1, r7, #8
 8005688:	2300      	movs	r3, #0
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 fa94 	bl	8005bb8 <xQueueGenericSendFromISR>
 8005690:	4603      	mov	r3, r0
 8005692:	2b01      	cmp	r3, #1
 8005694:	d001      	beq.n	800569a <osMessagePut+0x42>
      return osErrorOS;
 8005696:	23ff      	movs	r3, #255	; 0xff
 8005698:	e018      	b.n	80056cc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d014      	beq.n	80056ca <osMessagePut+0x72>
 80056a0:	4b0c      	ldr	r3, [pc, #48]	; (80056d4 <osMessagePut+0x7c>)
 80056a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	e00b      	b.n	80056ca <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80056b2:	f107 0108 	add.w	r1, r7, #8
 80056b6:	2300      	movs	r3, #0
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 f97e 	bl	80059bc <xQueueGenericSend>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d001      	beq.n	80056ca <osMessagePut+0x72>
      return osErrorOS;
 80056c6:	23ff      	movs	r3, #255	; 0xff
 80056c8:	e000      	b.n	80056cc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	e000ed04 	.word	0xe000ed04

080056d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f103 0208 	add.w	r2, r3, #8
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f04f 32ff 	mov.w	r2, #4294967295
 80056f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f103 0208 	add.w	r2, r3, #8
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f103 0208 	add.w	r2, r3, #8
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005726:	bf00      	nop
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005732:	b480      	push	{r7}
 8005734:	b085      	sub	sp, #20
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	601a      	str	r2, [r3, #0]
}
 800576e:	bf00      	nop
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800577a:	b480      	push	{r7}
 800577c:	b085      	sub	sp, #20
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
 8005782:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005790:	d103      	bne.n	800579a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	e00c      	b.n	80057b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	3308      	adds	r3, #8
 800579e:	60fb      	str	r3, [r7, #12]
 80057a0:	e002      	b.n	80057a8 <vListInsert+0x2e>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d2f6      	bcs.n	80057a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	601a      	str	r2, [r3, #0]
}
 80057e0:	bf00      	nop
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	6892      	ldr	r2, [r2, #8]
 8005802:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6852      	ldr	r2, [r2, #4]
 800580c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	429a      	cmp	r2, r3
 8005816:	d103      	bne.n	8005820 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	1e5a      	subs	r2, r3, #1
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
}
 8005834:	4618      	mov	r0, r3
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10a      	bne.n	800586a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005866:	bf00      	nop
 8005868:	e7fe      	b.n	8005868 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800586a:	f002 f86b 	bl	8007944 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005876:	68f9      	ldr	r1, [r7, #12]
 8005878:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800587a:	fb01 f303 	mul.w	r3, r1, r3
 800587e:	441a      	add	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589a:	3b01      	subs	r3, #1
 800589c:	68f9      	ldr	r1, [r7, #12]
 800589e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80058a0:	fb01 f303 	mul.w	r3, r1, r3
 80058a4:	441a      	add	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	22ff      	movs	r2, #255	; 0xff
 80058ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	22ff      	movs	r2, #255	; 0xff
 80058b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d114      	bne.n	80058ea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d01a      	beq.n	80058fe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	3310      	adds	r3, #16
 80058cc:	4618      	mov	r0, r3
 80058ce:	f001 f855 	bl	800697c <xTaskRemoveFromEventList>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d012      	beq.n	80058fe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80058d8:	4b0c      	ldr	r3, [pc, #48]	; (800590c <xQueueGenericReset+0xcc>)
 80058da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	f3bf 8f4f 	dsb	sy
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	e009      	b.n	80058fe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	3310      	adds	r3, #16
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7ff fef2 	bl	80056d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	3324      	adds	r3, #36	; 0x24
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7ff feed 	bl	80056d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80058fe:	f002 f851 	bl	80079a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005902:	2301      	movs	r3, #1
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	e000ed04 	.word	0xe000ed04

08005910 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08a      	sub	sp, #40	; 0x28
 8005914:	af02      	add	r7, sp, #8
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	4613      	mov	r3, r2
 800591c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10a      	bne.n	800593a <xQueueGenericCreate+0x2a>
	__asm volatile
 8005924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	613b      	str	r3, [r7, #16]
}
 8005936:	bf00      	nop
 8005938:	e7fe      	b.n	8005938 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	fb02 f303 	mul.w	r3, r2, r3
 8005942:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	3348      	adds	r3, #72	; 0x48
 8005948:	4618      	mov	r0, r3
 800594a:	f002 f91d 	bl	8007b88 <pvPortMalloc>
 800594e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00d      	beq.n	8005972 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	3348      	adds	r3, #72	; 0x48
 800595e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005960:	79fa      	ldrb	r2, [r7, #7]
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	4613      	mov	r3, r2
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	68b9      	ldr	r1, [r7, #8]
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 f805 	bl	800597c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005972:	69bb      	ldr	r3, [r7, #24]
	}
 8005974:	4618      	mov	r0, r3
 8005976:	3720      	adds	r7, #32
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
 8005988:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d103      	bne.n	8005998 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	601a      	str	r2, [r3, #0]
 8005996:	e002      	b.n	800599e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80059aa:	2101      	movs	r1, #1
 80059ac:	69b8      	ldr	r0, [r7, #24]
 80059ae:	f7ff ff47 	bl	8005840 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80059b2:	bf00      	nop
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
	...

080059bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b08e      	sub	sp, #56	; 0x38
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80059ca:	2300      	movs	r3, #0
 80059cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10a      	bne.n	80059ee <xQueueGenericSend+0x32>
	__asm volatile
 80059d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059ea:	bf00      	nop
 80059ec:	e7fe      	b.n	80059ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d103      	bne.n	80059fc <xQueueGenericSend+0x40>
 80059f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <xQueueGenericSend+0x44>
 80059fc:	2301      	movs	r3, #1
 80059fe:	e000      	b.n	8005a02 <xQueueGenericSend+0x46>
 8005a00:	2300      	movs	r3, #0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10a      	bne.n	8005a1c <xQueueGenericSend+0x60>
	__asm volatile
 8005a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0a:	f383 8811 	msr	BASEPRI, r3
 8005a0e:	f3bf 8f6f 	isb	sy
 8005a12:	f3bf 8f4f 	dsb	sy
 8005a16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a18:	bf00      	nop
 8005a1a:	e7fe      	b.n	8005a1a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d103      	bne.n	8005a2a <xQueueGenericSend+0x6e>
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d101      	bne.n	8005a2e <xQueueGenericSend+0x72>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <xQueueGenericSend+0x74>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10a      	bne.n	8005a4a <xQueueGenericSend+0x8e>
	__asm volatile
 8005a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	623b      	str	r3, [r7, #32]
}
 8005a46:	bf00      	nop
 8005a48:	e7fe      	b.n	8005a48 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a4a:	f001 f939 	bl	8006cc0 <xTaskGetSchedulerState>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d102      	bne.n	8005a5a <xQueueGenericSend+0x9e>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <xQueueGenericSend+0xa2>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e000      	b.n	8005a60 <xQueueGenericSend+0xa4>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10a      	bne.n	8005a7a <xQueueGenericSend+0xbe>
	__asm volatile
 8005a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a68:	f383 8811 	msr	BASEPRI, r3
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	61fb      	str	r3, [r7, #28]
}
 8005a76:	bf00      	nop
 8005a78:	e7fe      	b.n	8005a78 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a7a:	f001 ff63 	bl	8007944 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d302      	bcc.n	8005a90 <xQueueGenericSend+0xd4>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d129      	bne.n	8005ae4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	68b9      	ldr	r1, [r7, #8]
 8005a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a96:	f000 fa0b 	bl	8005eb0 <prvCopyDataToQueue>
 8005a9a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d010      	beq.n	8005ac6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa6:	3324      	adds	r3, #36	; 0x24
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 ff67 	bl	800697c <xTaskRemoveFromEventList>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d013      	beq.n	8005adc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ab4:	4b3f      	ldr	r3, [pc, #252]	; (8005bb4 <xQueueGenericSend+0x1f8>)
 8005ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	f3bf 8f6f 	isb	sy
 8005ac4:	e00a      	b.n	8005adc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d007      	beq.n	8005adc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005acc:	4b39      	ldr	r3, [pc, #228]	; (8005bb4 <xQueueGenericSend+0x1f8>)
 8005ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005adc:	f001 ff62 	bl	80079a4 <vPortExitCritical>
				return pdPASS;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e063      	b.n	8005bac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d103      	bne.n	8005af2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005aea:	f001 ff5b 	bl	80079a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	e05c      	b.n	8005bac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d106      	bne.n	8005b06 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005af8:	f107 0314 	add.w	r3, r7, #20
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 ff9f 	bl	8006a40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b02:	2301      	movs	r3, #1
 8005b04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b06:	f001 ff4d 	bl	80079a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b0a:	f000 fd13 	bl	8006534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b0e:	f001 ff19 	bl	8007944 <vPortEnterCritical>
 8005b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b18:	b25b      	sxtb	r3, r3
 8005b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b1e:	d103      	bne.n	8005b28 <xQueueGenericSend+0x16c>
 8005b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b2e:	b25b      	sxtb	r3, r3
 8005b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b34:	d103      	bne.n	8005b3e <xQueueGenericSend+0x182>
 8005b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b3e:	f001 ff31 	bl	80079a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b42:	1d3a      	adds	r2, r7, #4
 8005b44:	f107 0314 	add.w	r3, r7, #20
 8005b48:	4611      	mov	r1, r2
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 ff8e 	bl	8006a6c <xTaskCheckForTimeOut>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d124      	bne.n	8005ba0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b58:	f000 faa2 	bl	80060a0 <prvIsQueueFull>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d018      	beq.n	8005b94 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b64:	3310      	adds	r3, #16
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	4611      	mov	r1, r2
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 feb6 	bl	80068dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b72:	f000 fa2d 	bl	8005fd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b76:	f000 fceb 	bl	8006550 <xTaskResumeAll>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f47f af7c 	bne.w	8005a7a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005b82:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <xQueueGenericSend+0x1f8>)
 8005b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	e772      	b.n	8005a7a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b96:	f000 fa1b 	bl	8005fd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b9a:	f000 fcd9 	bl	8006550 <xTaskResumeAll>
 8005b9e:	e76c      	b.n	8005a7a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ba2:	f000 fa15 	bl	8005fd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ba6:	f000 fcd3 	bl	8006550 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005baa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3738      	adds	r7, #56	; 0x38
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	e000ed04 	.word	0xe000ed04

08005bb8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b090      	sub	sp, #64	; 0x40
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
 8005bc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10a      	bne.n	8005be6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005be2:	bf00      	nop
 8005be4:	e7fe      	b.n	8005be4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d103      	bne.n	8005bf4 <xQueueGenericSendFromISR+0x3c>
 8005bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <xQueueGenericSendFromISR+0x40>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e000      	b.n	8005bfa <xQueueGenericSendFromISR+0x42>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10a      	bne.n	8005c14 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c10:	bf00      	nop
 8005c12:	e7fe      	b.n	8005c12 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d103      	bne.n	8005c22 <xQueueGenericSendFromISR+0x6a>
 8005c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d101      	bne.n	8005c26 <xQueueGenericSendFromISR+0x6e>
 8005c22:	2301      	movs	r3, #1
 8005c24:	e000      	b.n	8005c28 <xQueueGenericSendFromISR+0x70>
 8005c26:	2300      	movs	r3, #0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10a      	bne.n	8005c42 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c30:	f383 8811 	msr	BASEPRI, r3
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	623b      	str	r3, [r7, #32]
}
 8005c3e:	bf00      	nop
 8005c40:	e7fe      	b.n	8005c40 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c42:	f001 ff61 	bl	8007b08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c46:	f3ef 8211 	mrs	r2, BASEPRI
 8005c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4e:	f383 8811 	msr	BASEPRI, r3
 8005c52:	f3bf 8f6f 	isb	sy
 8005c56:	f3bf 8f4f 	dsb	sy
 8005c5a:	61fa      	str	r2, [r7, #28]
 8005c5c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c5e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c60:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d302      	bcc.n	8005c74 <xQueueGenericSendFromISR+0xbc>
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d12f      	bne.n	8005cd4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c82:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	68b9      	ldr	r1, [r7, #8]
 8005c88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c8a:	f000 f911 	bl	8005eb0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c8e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c96:	d112      	bne.n	8005cbe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d016      	beq.n	8005cce <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca2:	3324      	adds	r3, #36	; 0x24
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f000 fe69 	bl	800697c <xTaskRemoveFromEventList>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00e      	beq.n	8005cce <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00b      	beq.n	8005cce <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	e007      	b.n	8005cce <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005cbe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	b25a      	sxtb	r2, r3
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005cd2:	e001      	b.n	8005cd8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cda:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005ce2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3740      	adds	r7, #64	; 0x40
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
	...

08005cf0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b08c      	sub	sp, #48	; 0x30
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10a      	bne.n	8005d20 <xQueueReceive+0x30>
	__asm volatile
 8005d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0e:	f383 8811 	msr	BASEPRI, r3
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	623b      	str	r3, [r7, #32]
}
 8005d1c:	bf00      	nop
 8005d1e:	e7fe      	b.n	8005d1e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d103      	bne.n	8005d2e <xQueueReceive+0x3e>
 8005d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <xQueueReceive+0x42>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e000      	b.n	8005d34 <xQueueReceive+0x44>
 8005d32:	2300      	movs	r3, #0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10a      	bne.n	8005d4e <xQueueReceive+0x5e>
	__asm volatile
 8005d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	61fb      	str	r3, [r7, #28]
}
 8005d4a:	bf00      	nop
 8005d4c:	e7fe      	b.n	8005d4c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d4e:	f000 ffb7 	bl	8006cc0 <xTaskGetSchedulerState>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d102      	bne.n	8005d5e <xQueueReceive+0x6e>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <xQueueReceive+0x72>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <xQueueReceive+0x74>
 8005d62:	2300      	movs	r3, #0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10a      	bne.n	8005d7e <xQueueReceive+0x8e>
	__asm volatile
 8005d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6c:	f383 8811 	msr	BASEPRI, r3
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	61bb      	str	r3, [r7, #24]
}
 8005d7a:	bf00      	nop
 8005d7c:	e7fe      	b.n	8005d7c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d7e:	f001 fde1 	bl	8007944 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d86:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d01f      	beq.n	8005dce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d8e:	68b9      	ldr	r1, [r7, #8]
 8005d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d92:	f000 f8f7 	bl	8005f84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	1e5a      	subs	r2, r3, #1
 8005d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00f      	beq.n	8005dc6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da8:	3310      	adds	r3, #16
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fde6 	bl	800697c <xTaskRemoveFromEventList>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d007      	beq.n	8005dc6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005db6:	4b3d      	ldr	r3, [pc, #244]	; (8005eac <xQueueReceive+0x1bc>)
 8005db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dbc:	601a      	str	r2, [r3, #0]
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005dc6:	f001 fded 	bl	80079a4 <vPortExitCritical>
				return pdPASS;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e069      	b.n	8005ea2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d103      	bne.n	8005ddc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005dd4:	f001 fde6 	bl	80079a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	e062      	b.n	8005ea2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d106      	bne.n	8005df0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005de2:	f107 0310 	add.w	r3, r7, #16
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 fe2a 	bl	8006a40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005dec:	2301      	movs	r3, #1
 8005dee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005df0:	f001 fdd8 	bl	80079a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005df4:	f000 fb9e 	bl	8006534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005df8:	f001 fda4 	bl	8007944 <vPortEnterCritical>
 8005dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e02:	b25b      	sxtb	r3, r3
 8005e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e08:	d103      	bne.n	8005e12 <xQueueReceive+0x122>
 8005e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e18:	b25b      	sxtb	r3, r3
 8005e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1e:	d103      	bne.n	8005e28 <xQueueReceive+0x138>
 8005e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e28:	f001 fdbc 	bl	80079a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e2c:	1d3a      	adds	r2, r7, #4
 8005e2e:	f107 0310 	add.w	r3, r7, #16
 8005e32:	4611      	mov	r1, r2
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 fe19 	bl	8006a6c <xTaskCheckForTimeOut>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d123      	bne.n	8005e88 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e42:	f000 f917 	bl	8006074 <prvIsQueueEmpty>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d017      	beq.n	8005e7c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4e:	3324      	adds	r3, #36	; 0x24
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	4611      	mov	r1, r2
 8005e54:	4618      	mov	r0, r3
 8005e56:	f000 fd41 	bl	80068dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e5c:	f000 f8b8 	bl	8005fd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e60:	f000 fb76 	bl	8006550 <xTaskResumeAll>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d189      	bne.n	8005d7e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005e6a:	4b10      	ldr	r3, [pc, #64]	; (8005eac <xQueueReceive+0x1bc>)
 8005e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	f3bf 8f4f 	dsb	sy
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	e780      	b.n	8005d7e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e7e:	f000 f8a7 	bl	8005fd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e82:	f000 fb65 	bl	8006550 <xTaskResumeAll>
 8005e86:	e77a      	b.n	8005d7e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e8a:	f000 f8a1 	bl	8005fd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e8e:	f000 fb5f 	bl	8006550 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e94:	f000 f8ee 	bl	8006074 <prvIsQueueEmpty>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f43f af6f 	beq.w	8005d7e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ea0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3730      	adds	r7, #48	; 0x30
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	e000ed04 	.word	0xe000ed04

08005eb0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10d      	bne.n	8005eea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d14d      	bne.n	8005f72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 ff0e 	bl	8006cfc <xTaskPriorityDisinherit>
 8005ee0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	609a      	str	r2, [r3, #8]
 8005ee8:	e043      	b.n	8005f72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d119      	bne.n	8005f24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6858      	ldr	r0, [r3, #4]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef8:	461a      	mov	r2, r3
 8005efa:	68b9      	ldr	r1, [r7, #8]
 8005efc:	f002 f95e 	bl	80081bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f08:	441a      	add	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d32b      	bcc.n	8005f72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	605a      	str	r2, [r3, #4]
 8005f22:	e026      	b.n	8005f72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	68d8      	ldr	r0, [r3, #12]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	68b9      	ldr	r1, [r7, #8]
 8005f30:	f002 f944 	bl	80081bc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3c:	425b      	negs	r3, r3
 8005f3e:	441a      	add	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	68da      	ldr	r2, [r3, #12]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d207      	bcs.n	8005f60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f58:	425b      	negs	r3, r3
 8005f5a:	441a      	add	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d105      	bne.n	8005f72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	1c5a      	adds	r2, r3, #1
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f7a:	697b      	ldr	r3, [r7, #20]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3718      	adds	r7, #24
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d018      	beq.n	8005fc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68da      	ldr	r2, [r3, #12]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9e:	441a      	add	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68da      	ldr	r2, [r3, #12]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d303      	bcc.n	8005fb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	68d9      	ldr	r1, [r3, #12]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	6838      	ldr	r0, [r7, #0]
 8005fc4:	f002 f8fa 	bl	80081bc <memcpy>
	}
}
 8005fc8:	bf00      	nop
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005fd8:	f001 fcb4 	bl	8007944 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fe2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fe4:	e011      	b.n	800600a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d012      	beq.n	8006014 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	3324      	adds	r3, #36	; 0x24
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 fcc2 	bl	800697c <xTaskRemoveFromEventList>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ffe:	f000 fd97 	bl	8006b30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006002:	7bfb      	ldrb	r3, [r7, #15]
 8006004:	3b01      	subs	r3, #1
 8006006:	b2db      	uxtb	r3, r3
 8006008:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800600a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800600e:	2b00      	cmp	r3, #0
 8006010:	dce9      	bgt.n	8005fe6 <prvUnlockQueue+0x16>
 8006012:	e000      	b.n	8006016 <prvUnlockQueue+0x46>
					break;
 8006014:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	22ff      	movs	r2, #255	; 0xff
 800601a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800601e:	f001 fcc1 	bl	80079a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006022:	f001 fc8f 	bl	8007944 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800602c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800602e:	e011      	b.n	8006054 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d012      	beq.n	800605e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	3310      	adds	r3, #16
 800603c:	4618      	mov	r0, r3
 800603e:	f000 fc9d 	bl	800697c <xTaskRemoveFromEventList>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006048:	f000 fd72 	bl	8006b30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800604c:	7bbb      	ldrb	r3, [r7, #14]
 800604e:	3b01      	subs	r3, #1
 8006050:	b2db      	uxtb	r3, r3
 8006052:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006054:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006058:	2b00      	cmp	r3, #0
 800605a:	dce9      	bgt.n	8006030 <prvUnlockQueue+0x60>
 800605c:	e000      	b.n	8006060 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800605e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	22ff      	movs	r2, #255	; 0xff
 8006064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006068:	f001 fc9c 	bl	80079a4 <vPortExitCritical>
}
 800606c:	bf00      	nop
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800607c:	f001 fc62 	bl	8007944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006084:	2b00      	cmp	r3, #0
 8006086:	d102      	bne.n	800608e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006088:	2301      	movs	r3, #1
 800608a:	60fb      	str	r3, [r7, #12]
 800608c:	e001      	b.n	8006092 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800608e:	2300      	movs	r3, #0
 8006090:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006092:	f001 fc87 	bl	80079a4 <vPortExitCritical>

	return xReturn;
 8006096:	68fb      	ldr	r3, [r7, #12]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060a8:	f001 fc4c 	bl	8007944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d102      	bne.n	80060be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80060b8:	2301      	movs	r3, #1
 80060ba:	60fb      	str	r3, [r7, #12]
 80060bc:	e001      	b.n	80060c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80060be:	2300      	movs	r3, #0
 80060c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060c2:	f001 fc6f 	bl	80079a4 <vPortExitCritical>

	return xReturn;
 80060c6:	68fb      	ldr	r3, [r7, #12]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060da:	2300      	movs	r3, #0
 80060dc:	60fb      	str	r3, [r7, #12]
 80060de:	e014      	b.n	800610a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80060e0:	4a0f      	ldr	r2, [pc, #60]	; (8006120 <vQueueAddToRegistry+0x50>)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10b      	bne.n	8006104 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80060ec:	490c      	ldr	r1, [pc, #48]	; (8006120 <vQueueAddToRegistry+0x50>)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80060f6:	4a0a      	ldr	r2, [pc, #40]	; (8006120 <vQueueAddToRegistry+0x50>)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	4413      	add	r3, r2
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006102:	e006      	b.n	8006112 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	3301      	adds	r3, #1
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2b07      	cmp	r3, #7
 800610e:	d9e7      	bls.n	80060e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006110:	bf00      	nop
 8006112:	bf00      	nop
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	20000208 	.word	0x20000208

08006124 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006134:	f001 fc06 	bl	8007944 <vPortEnterCritical>
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800613e:	b25b      	sxtb	r3, r3
 8006140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006144:	d103      	bne.n	800614e <vQueueWaitForMessageRestricted+0x2a>
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006154:	b25b      	sxtb	r3, r3
 8006156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615a:	d103      	bne.n	8006164 <vQueueWaitForMessageRestricted+0x40>
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006164:	f001 fc1e 	bl	80079a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616c:	2b00      	cmp	r3, #0
 800616e:	d106      	bne.n	800617e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	3324      	adds	r3, #36	; 0x24
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	68b9      	ldr	r1, [r7, #8]
 8006178:	4618      	mov	r0, r3
 800617a:	f000 fbd3 	bl	8006924 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800617e:	6978      	ldr	r0, [r7, #20]
 8006180:	f7ff ff26 	bl	8005fd0 <prvUnlockQueue>
	}
 8006184:	bf00      	nop
 8006186:	3718      	adds	r7, #24
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08c      	sub	sp, #48	; 0x30
 8006190:	af04      	add	r7, sp, #16
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	603b      	str	r3, [r7, #0]
 8006198:	4613      	mov	r3, r2
 800619a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800619c:	88fb      	ldrh	r3, [r7, #6]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4618      	mov	r0, r3
 80061a2:	f001 fcf1 	bl	8007b88 <pvPortMalloc>
 80061a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00e      	beq.n	80061cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80061ae:	20a0      	movs	r0, #160	; 0xa0
 80061b0:	f001 fcea 	bl	8007b88 <pvPortMalloc>
 80061b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d003      	beq.n	80061c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	631a      	str	r2, [r3, #48]	; 0x30
 80061c2:	e005      	b.n	80061d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80061c4:	6978      	ldr	r0, [r7, #20]
 80061c6:	f001 fdab 	bl	8007d20 <vPortFree>
 80061ca:	e001      	b.n	80061d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80061cc:	2300      	movs	r3, #0
 80061ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d013      	beq.n	80061fe <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80061d6:	88fa      	ldrh	r2, [r7, #6]
 80061d8:	2300      	movs	r3, #0
 80061da:	9303      	str	r3, [sp, #12]
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	9302      	str	r3, [sp, #8]
 80061e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e2:	9301      	str	r3, [sp, #4]
 80061e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	68b9      	ldr	r1, [r7, #8]
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 f80f 	bl	8006210 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061f2:	69f8      	ldr	r0, [r7, #28]
 80061f4:	f000 f8aa 	bl	800634c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061f8:	2301      	movs	r3, #1
 80061fa:	61bb      	str	r3, [r7, #24]
 80061fc:	e002      	b.n	8006204 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006202:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006204:	69bb      	ldr	r3, [r7, #24]
	}
 8006206:	4618      	mov	r0, r3
 8006208:	3720      	adds	r7, #32
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b088      	sub	sp, #32
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
 800621c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006228:	3b01      	subs	r3, #1
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	f023 0307 	bic.w	r3, r3, #7
 8006236:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	f003 0307 	and.w	r3, r3, #7
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	617b      	str	r3, [r7, #20]
}
 8006254:	bf00      	nop
 8006256:	e7fe      	b.n	8006256 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d01f      	beq.n	800629e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800625e:	2300      	movs	r3, #0
 8006260:	61fb      	str	r3, [r7, #28]
 8006262:	e012      	b.n	800628a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	4413      	add	r3, r2
 800626a:	7819      	ldrb	r1, [r3, #0]
 800626c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	4413      	add	r3, r2
 8006272:	3334      	adds	r3, #52	; 0x34
 8006274:	460a      	mov	r2, r1
 8006276:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	4413      	add	r3, r2
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d006      	beq.n	8006292 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	3301      	adds	r3, #1
 8006288:	61fb      	str	r3, [r7, #28]
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	2b0f      	cmp	r3, #15
 800628e:	d9e9      	bls.n	8006264 <prvInitialiseNewTask+0x54>
 8006290:	e000      	b.n	8006294 <prvInitialiseNewTask+0x84>
			{
				break;
 8006292:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006296:	2200      	movs	r2, #0
 8006298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800629c:	e003      	b.n	80062a6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80062a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a8:	2b06      	cmp	r3, #6
 80062aa:	d901      	bls.n	80062b0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80062ac:	2306      	movs	r3, #6
 80062ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80062b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80062b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062ba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062be:	2200      	movs	r2, #0
 80062c0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	3304      	adds	r3, #4
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7ff fa26 	bl	8005718 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80062cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ce:	3318      	adds	r3, #24
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7ff fa21 	bl	8005718 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80062d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062de:	f1c3 0207 	rsb	r2, r3, #7
 80062e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80062e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80062fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fe:	334c      	adds	r3, #76	; 0x4c
 8006300:	224c      	movs	r2, #76	; 0x4c
 8006302:	2100      	movs	r1, #0
 8006304:	4618      	mov	r0, r3
 8006306:	f001 fed5 	bl	80080b4 <memset>
 800630a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630c:	4a0c      	ldr	r2, [pc, #48]	; (8006340 <prvInitialiseNewTask+0x130>)
 800630e:	651a      	str	r2, [r3, #80]	; 0x50
 8006310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006312:	4a0c      	ldr	r2, [pc, #48]	; (8006344 <prvInitialiseNewTask+0x134>)
 8006314:	655a      	str	r2, [r3, #84]	; 0x54
 8006316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006318:	4a0b      	ldr	r2, [pc, #44]	; (8006348 <prvInitialiseNewTask+0x138>)
 800631a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	68f9      	ldr	r1, [r7, #12]
 8006320:	69b8      	ldr	r0, [r7, #24]
 8006322:	f001 f9e5 	bl	80076f0 <pxPortInitialiseStack>
 8006326:	4602      	mov	r2, r0
 8006328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800632c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006336:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006338:	bf00      	nop
 800633a:	3720      	adds	r7, #32
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	200043bc 	.word	0x200043bc
 8006344:	20004424 	.word	0x20004424
 8006348:	2000448c 	.word	0x2000448c

0800634c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006354:	f001 faf6 	bl	8007944 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006358:	4b2a      	ldr	r3, [pc, #168]	; (8006404 <prvAddNewTaskToReadyList+0xb8>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3301      	adds	r3, #1
 800635e:	4a29      	ldr	r2, [pc, #164]	; (8006404 <prvAddNewTaskToReadyList+0xb8>)
 8006360:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006362:	4b29      	ldr	r3, [pc, #164]	; (8006408 <prvAddNewTaskToReadyList+0xbc>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d109      	bne.n	800637e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800636a:	4a27      	ldr	r2, [pc, #156]	; (8006408 <prvAddNewTaskToReadyList+0xbc>)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006370:	4b24      	ldr	r3, [pc, #144]	; (8006404 <prvAddNewTaskToReadyList+0xb8>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d110      	bne.n	800639a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006378:	f000 fbfe 	bl	8006b78 <prvInitialiseTaskLists>
 800637c:	e00d      	b.n	800639a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800637e:	4b23      	ldr	r3, [pc, #140]	; (800640c <prvAddNewTaskToReadyList+0xc0>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d109      	bne.n	800639a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006386:	4b20      	ldr	r3, [pc, #128]	; (8006408 <prvAddNewTaskToReadyList+0xbc>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006390:	429a      	cmp	r2, r3
 8006392:	d802      	bhi.n	800639a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006394:	4a1c      	ldr	r2, [pc, #112]	; (8006408 <prvAddNewTaskToReadyList+0xbc>)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800639a:	4b1d      	ldr	r3, [pc, #116]	; (8006410 <prvAddNewTaskToReadyList+0xc4>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	3301      	adds	r3, #1
 80063a0:	4a1b      	ldr	r2, [pc, #108]	; (8006410 <prvAddNewTaskToReadyList+0xc4>)
 80063a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a8:	2201      	movs	r2, #1
 80063aa:	409a      	lsls	r2, r3
 80063ac:	4b19      	ldr	r3, [pc, #100]	; (8006414 <prvAddNewTaskToReadyList+0xc8>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	4a18      	ldr	r2, [pc, #96]	; (8006414 <prvAddNewTaskToReadyList+0xc8>)
 80063b4:	6013      	str	r3, [r2, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ba:	4613      	mov	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4a15      	ldr	r2, [pc, #84]	; (8006418 <prvAddNewTaskToReadyList+0xcc>)
 80063c4:	441a      	add	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	3304      	adds	r3, #4
 80063ca:	4619      	mov	r1, r3
 80063cc:	4610      	mov	r0, r2
 80063ce:	f7ff f9b0 	bl	8005732 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80063d2:	f001 fae7 	bl	80079a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80063d6:	4b0d      	ldr	r3, [pc, #52]	; (800640c <prvAddNewTaskToReadyList+0xc0>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00e      	beq.n	80063fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80063de:	4b0a      	ldr	r3, [pc, #40]	; (8006408 <prvAddNewTaskToReadyList+0xbc>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d207      	bcs.n	80063fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80063ec:	4b0b      	ldr	r3, [pc, #44]	; (800641c <prvAddNewTaskToReadyList+0xd0>)
 80063ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063fc:	bf00      	nop
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	20000348 	.word	0x20000348
 8006408:	20000248 	.word	0x20000248
 800640c:	20000354 	.word	0x20000354
 8006410:	20000364 	.word	0x20000364
 8006414:	20000350 	.word	0x20000350
 8006418:	2000024c 	.word	0x2000024c
 800641c:	e000ed04 	.word	0xe000ed04

08006420 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006428:	2300      	movs	r3, #0
 800642a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d017      	beq.n	8006462 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006432:	4b13      	ldr	r3, [pc, #76]	; (8006480 <vTaskDelay+0x60>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <vTaskDelay+0x30>
	__asm volatile
 800643a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	60bb      	str	r3, [r7, #8]
}
 800644c:	bf00      	nop
 800644e:	e7fe      	b.n	800644e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006450:	f000 f870 	bl	8006534 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006454:	2100      	movs	r1, #0
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fdb6 	bl	8006fc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800645c:	f000 f878 	bl	8006550 <xTaskResumeAll>
 8006460:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d107      	bne.n	8006478 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006468:	4b06      	ldr	r3, [pc, #24]	; (8006484 <vTaskDelay+0x64>)
 800646a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800646e:	601a      	str	r2, [r3, #0]
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006478:	bf00      	nop
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	20000370 	.word	0x20000370
 8006484:	e000ed04 	.word	0xe000ed04

08006488 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800648e:	4b21      	ldr	r3, [pc, #132]	; (8006514 <vTaskStartScheduler+0x8c>)
 8006490:	9301      	str	r3, [sp, #4]
 8006492:	2300      	movs	r3, #0
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	2300      	movs	r3, #0
 8006498:	2280      	movs	r2, #128	; 0x80
 800649a:	491f      	ldr	r1, [pc, #124]	; (8006518 <vTaskStartScheduler+0x90>)
 800649c:	481f      	ldr	r0, [pc, #124]	; (800651c <vTaskStartScheduler+0x94>)
 800649e:	f7ff fe75 	bl	800618c <xTaskCreate>
 80064a2:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d102      	bne.n	80064b0 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80064aa:	f000 fdf3 	bl	8007094 <xTimerCreateTimerTask>
 80064ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d11b      	bne.n	80064ee <vTaskStartScheduler+0x66>
	__asm volatile
 80064b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	60bb      	str	r3, [r7, #8]
}
 80064c8:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80064ca:	4b15      	ldr	r3, [pc, #84]	; (8006520 <vTaskStartScheduler+0x98>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	334c      	adds	r3, #76	; 0x4c
 80064d0:	4a14      	ldr	r2, [pc, #80]	; (8006524 <vTaskStartScheduler+0x9c>)
 80064d2:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80064d4:	4b14      	ldr	r3, [pc, #80]	; (8006528 <vTaskStartScheduler+0xa0>)
 80064d6:	f04f 32ff 	mov.w	r2, #4294967295
 80064da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80064dc:	4b13      	ldr	r3, [pc, #76]	; (800652c <vTaskStartScheduler+0xa4>)
 80064de:	2201      	movs	r2, #1
 80064e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80064e2:	4b13      	ldr	r3, [pc, #76]	; (8006530 <vTaskStartScheduler+0xa8>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80064e8:	f001 f98a 	bl	8007800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80064ec:	e00e      	b.n	800650c <vTaskStartScheduler+0x84>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f4:	d10a      	bne.n	800650c <vTaskStartScheduler+0x84>
	__asm volatile
 80064f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fa:	f383 8811 	msr	BASEPRI, r3
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	607b      	str	r3, [r7, #4]
}
 8006508:	bf00      	nop
 800650a:	e7fe      	b.n	800650a <vTaskStartScheduler+0x82>
}
 800650c:	bf00      	nop
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	2000036c 	.word	0x2000036c
 8006518:	0800829c 	.word	0x0800829c
 800651c:	08006b49 	.word	0x08006b49
 8006520:	20000248 	.word	0x20000248
 8006524:	2000005c 	.word	0x2000005c
 8006528:	20000368 	.word	0x20000368
 800652c:	20000354 	.word	0x20000354
 8006530:	2000034c 	.word	0x2000034c

08006534 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006534:	b480      	push	{r7}
 8006536:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006538:	4b04      	ldr	r3, [pc, #16]	; (800654c <vTaskSuspendAll+0x18>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	3301      	adds	r3, #1
 800653e:	4a03      	ldr	r2, [pc, #12]	; (800654c <vTaskSuspendAll+0x18>)
 8006540:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006542:	bf00      	nop
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	20000370 	.word	0x20000370

08006550 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006556:	2300      	movs	r3, #0
 8006558:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800655a:	2300      	movs	r3, #0
 800655c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800655e:	4b41      	ldr	r3, [pc, #260]	; (8006664 <xTaskResumeAll+0x114>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10a      	bne.n	800657c <xTaskResumeAll+0x2c>
	__asm volatile
 8006566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	603b      	str	r3, [r7, #0]
}
 8006578:	bf00      	nop
 800657a:	e7fe      	b.n	800657a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800657c:	f001 f9e2 	bl	8007944 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006580:	4b38      	ldr	r3, [pc, #224]	; (8006664 <xTaskResumeAll+0x114>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	3b01      	subs	r3, #1
 8006586:	4a37      	ldr	r2, [pc, #220]	; (8006664 <xTaskResumeAll+0x114>)
 8006588:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800658a:	4b36      	ldr	r3, [pc, #216]	; (8006664 <xTaskResumeAll+0x114>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d161      	bne.n	8006656 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006592:	4b35      	ldr	r3, [pc, #212]	; (8006668 <xTaskResumeAll+0x118>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d05d      	beq.n	8006656 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800659a:	e02e      	b.n	80065fa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800659c:	4b33      	ldr	r3, [pc, #204]	; (800666c <xTaskResumeAll+0x11c>)
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	3318      	adds	r3, #24
 80065a8:	4618      	mov	r0, r3
 80065aa:	f7ff f91f 	bl	80057ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	3304      	adds	r3, #4
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7ff f91a 	bl	80057ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065bc:	2201      	movs	r2, #1
 80065be:	409a      	lsls	r2, r3
 80065c0:	4b2b      	ldr	r3, [pc, #172]	; (8006670 <xTaskResumeAll+0x120>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	4a2a      	ldr	r2, [pc, #168]	; (8006670 <xTaskResumeAll+0x120>)
 80065c8:	6013      	str	r3, [r2, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ce:	4613      	mov	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4a27      	ldr	r2, [pc, #156]	; (8006674 <xTaskResumeAll+0x124>)
 80065d8:	441a      	add	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	3304      	adds	r3, #4
 80065de:	4619      	mov	r1, r3
 80065e0:	4610      	mov	r0, r2
 80065e2:	f7ff f8a6 	bl	8005732 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ea:	4b23      	ldr	r3, [pc, #140]	; (8006678 <xTaskResumeAll+0x128>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d302      	bcc.n	80065fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80065f4:	4b21      	ldr	r3, [pc, #132]	; (800667c <xTaskResumeAll+0x12c>)
 80065f6:	2201      	movs	r2, #1
 80065f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065fa:	4b1c      	ldr	r3, [pc, #112]	; (800666c <xTaskResumeAll+0x11c>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1cc      	bne.n	800659c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006608:	f000 fb3a 	bl	8006c80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800660c:	4b1c      	ldr	r3, [pc, #112]	; (8006680 <xTaskResumeAll+0x130>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d010      	beq.n	800663a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006618:	f000 f846 	bl	80066a8 <xTaskIncrementTick>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006622:	4b16      	ldr	r3, [pc, #88]	; (800667c <xTaskResumeAll+0x12c>)
 8006624:	2201      	movs	r2, #1
 8006626:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	3b01      	subs	r3, #1
 800662c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1f1      	bne.n	8006618 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006634:	4b12      	ldr	r3, [pc, #72]	; (8006680 <xTaskResumeAll+0x130>)
 8006636:	2200      	movs	r2, #0
 8006638:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800663a:	4b10      	ldr	r3, [pc, #64]	; (800667c <xTaskResumeAll+0x12c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d009      	beq.n	8006656 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006642:	2301      	movs	r3, #1
 8006644:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006646:	4b0f      	ldr	r3, [pc, #60]	; (8006684 <xTaskResumeAll+0x134>)
 8006648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800664c:	601a      	str	r2, [r3, #0]
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006656:	f001 f9a5 	bl	80079a4 <vPortExitCritical>

	return xAlreadyYielded;
 800665a:	68bb      	ldr	r3, [r7, #8]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	20000370 	.word	0x20000370
 8006668:	20000348 	.word	0x20000348
 800666c:	20000308 	.word	0x20000308
 8006670:	20000350 	.word	0x20000350
 8006674:	2000024c 	.word	0x2000024c
 8006678:	20000248 	.word	0x20000248
 800667c:	2000035c 	.word	0x2000035c
 8006680:	20000358 	.word	0x20000358
 8006684:	e000ed04 	.word	0xe000ed04

08006688 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800668e:	4b05      	ldr	r3, [pc, #20]	; (80066a4 <xTaskGetTickCount+0x1c>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006694:	687b      	ldr	r3, [r7, #4]
}
 8006696:	4618      	mov	r0, r3
 8006698:	370c      	adds	r7, #12
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	2000034c 	.word	0x2000034c

080066a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80066ae:	2300      	movs	r3, #0
 80066b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066b2:	4b4e      	ldr	r3, [pc, #312]	; (80067ec <xTaskIncrementTick+0x144>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f040 808e 	bne.w	80067d8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80066bc:	4b4c      	ldr	r3, [pc, #304]	; (80067f0 <xTaskIncrementTick+0x148>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3301      	adds	r3, #1
 80066c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80066c4:	4a4a      	ldr	r2, [pc, #296]	; (80067f0 <xTaskIncrementTick+0x148>)
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d120      	bne.n	8006712 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80066d0:	4b48      	ldr	r3, [pc, #288]	; (80067f4 <xTaskIncrementTick+0x14c>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00a      	beq.n	80066f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80066da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	603b      	str	r3, [r7, #0]
}
 80066ec:	bf00      	nop
 80066ee:	e7fe      	b.n	80066ee <xTaskIncrementTick+0x46>
 80066f0:	4b40      	ldr	r3, [pc, #256]	; (80067f4 <xTaskIncrementTick+0x14c>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	60fb      	str	r3, [r7, #12]
 80066f6:	4b40      	ldr	r3, [pc, #256]	; (80067f8 <xTaskIncrementTick+0x150>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a3e      	ldr	r2, [pc, #248]	; (80067f4 <xTaskIncrementTick+0x14c>)
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	4a3e      	ldr	r2, [pc, #248]	; (80067f8 <xTaskIncrementTick+0x150>)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6013      	str	r3, [r2, #0]
 8006704:	4b3d      	ldr	r3, [pc, #244]	; (80067fc <xTaskIncrementTick+0x154>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	3301      	adds	r3, #1
 800670a:	4a3c      	ldr	r2, [pc, #240]	; (80067fc <xTaskIncrementTick+0x154>)
 800670c:	6013      	str	r3, [r2, #0]
 800670e:	f000 fab7 	bl	8006c80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006712:	4b3b      	ldr	r3, [pc, #236]	; (8006800 <xTaskIncrementTick+0x158>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	429a      	cmp	r2, r3
 800671a:	d348      	bcc.n	80067ae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800671c:	4b35      	ldr	r3, [pc, #212]	; (80067f4 <xTaskIncrementTick+0x14c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d104      	bne.n	8006730 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006726:	4b36      	ldr	r3, [pc, #216]	; (8006800 <xTaskIncrementTick+0x158>)
 8006728:	f04f 32ff 	mov.w	r2, #4294967295
 800672c:	601a      	str	r2, [r3, #0]
					break;
 800672e:	e03e      	b.n	80067ae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006730:	4b30      	ldr	r3, [pc, #192]	; (80067f4 <xTaskIncrementTick+0x14c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	429a      	cmp	r2, r3
 8006746:	d203      	bcs.n	8006750 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006748:	4a2d      	ldr	r2, [pc, #180]	; (8006800 <xTaskIncrementTick+0x158>)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800674e:	e02e      	b.n	80067ae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	3304      	adds	r3, #4
 8006754:	4618      	mov	r0, r3
 8006756:	f7ff f849 	bl	80057ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675e:	2b00      	cmp	r3, #0
 8006760:	d004      	beq.n	800676c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	3318      	adds	r3, #24
 8006766:	4618      	mov	r0, r3
 8006768:	f7ff f840 	bl	80057ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006770:	2201      	movs	r2, #1
 8006772:	409a      	lsls	r2, r3
 8006774:	4b23      	ldr	r3, [pc, #140]	; (8006804 <xTaskIncrementTick+0x15c>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4313      	orrs	r3, r2
 800677a:	4a22      	ldr	r2, [pc, #136]	; (8006804 <xTaskIncrementTick+0x15c>)
 800677c:	6013      	str	r3, [r2, #0]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006782:	4613      	mov	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4a1f      	ldr	r2, [pc, #124]	; (8006808 <xTaskIncrementTick+0x160>)
 800678c:	441a      	add	r2, r3
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	3304      	adds	r3, #4
 8006792:	4619      	mov	r1, r3
 8006794:	4610      	mov	r0, r2
 8006796:	f7fe ffcc 	bl	8005732 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800679e:	4b1b      	ldr	r3, [pc, #108]	; (800680c <xTaskIncrementTick+0x164>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d3b9      	bcc.n	800671c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80067a8:	2301      	movs	r3, #1
 80067aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067ac:	e7b6      	b.n	800671c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80067ae:	4b17      	ldr	r3, [pc, #92]	; (800680c <xTaskIncrementTick+0x164>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b4:	4914      	ldr	r1, [pc, #80]	; (8006808 <xTaskIncrementTick+0x160>)
 80067b6:	4613      	mov	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	440b      	add	r3, r1
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d901      	bls.n	80067ca <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80067c6:	2301      	movs	r3, #1
 80067c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80067ca:	4b11      	ldr	r3, [pc, #68]	; (8006810 <xTaskIncrementTick+0x168>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d007      	beq.n	80067e2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80067d2:	2301      	movs	r3, #1
 80067d4:	617b      	str	r3, [r7, #20]
 80067d6:	e004      	b.n	80067e2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80067d8:	4b0e      	ldr	r3, [pc, #56]	; (8006814 <xTaskIncrementTick+0x16c>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3301      	adds	r3, #1
 80067de:	4a0d      	ldr	r2, [pc, #52]	; (8006814 <xTaskIncrementTick+0x16c>)
 80067e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80067e2:	697b      	ldr	r3, [r7, #20]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3718      	adds	r7, #24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	20000370 	.word	0x20000370
 80067f0:	2000034c 	.word	0x2000034c
 80067f4:	20000300 	.word	0x20000300
 80067f8:	20000304 	.word	0x20000304
 80067fc:	20000360 	.word	0x20000360
 8006800:	20000368 	.word	0x20000368
 8006804:	20000350 	.word	0x20000350
 8006808:	2000024c 	.word	0x2000024c
 800680c:	20000248 	.word	0x20000248
 8006810:	2000035c 	.word	0x2000035c
 8006814:	20000358 	.word	0x20000358

08006818 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800681e:	4b29      	ldr	r3, [pc, #164]	; (80068c4 <vTaskSwitchContext+0xac>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006826:	4b28      	ldr	r3, [pc, #160]	; (80068c8 <vTaskSwitchContext+0xb0>)
 8006828:	2201      	movs	r2, #1
 800682a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800682c:	e044      	b.n	80068b8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800682e:	4b26      	ldr	r3, [pc, #152]	; (80068c8 <vTaskSwitchContext+0xb0>)
 8006830:	2200      	movs	r2, #0
 8006832:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006834:	4b25      	ldr	r3, [pc, #148]	; (80068cc <vTaskSwitchContext+0xb4>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	fab3 f383 	clz	r3, r3
 8006840:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006842:	7afb      	ldrb	r3, [r7, #11]
 8006844:	f1c3 031f 	rsb	r3, r3, #31
 8006848:	617b      	str	r3, [r7, #20]
 800684a:	4921      	ldr	r1, [pc, #132]	; (80068d0 <vTaskSwitchContext+0xb8>)
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	4613      	mov	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	440b      	add	r3, r1
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10a      	bne.n	8006874 <vTaskSwitchContext+0x5c>
	__asm volatile
 800685e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	607b      	str	r3, [r7, #4]
}
 8006870:	bf00      	nop
 8006872:	e7fe      	b.n	8006872 <vTaskSwitchContext+0x5a>
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	4613      	mov	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4a14      	ldr	r2, [pc, #80]	; (80068d0 <vTaskSwitchContext+0xb8>)
 8006880:	4413      	add	r3, r2
 8006882:	613b      	str	r3, [r7, #16]
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	685a      	ldr	r2, [r3, #4]
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	605a      	str	r2, [r3, #4]
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	3308      	adds	r3, #8
 8006896:	429a      	cmp	r2, r3
 8006898:	d104      	bne.n	80068a4 <vTaskSwitchContext+0x8c>
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	605a      	str	r2, [r3, #4]
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	4a0a      	ldr	r2, [pc, #40]	; (80068d4 <vTaskSwitchContext+0xbc>)
 80068ac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80068ae:	4b09      	ldr	r3, [pc, #36]	; (80068d4 <vTaskSwitchContext+0xbc>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	334c      	adds	r3, #76	; 0x4c
 80068b4:	4a08      	ldr	r2, [pc, #32]	; (80068d8 <vTaskSwitchContext+0xc0>)
 80068b6:	6013      	str	r3, [r2, #0]
}
 80068b8:	bf00      	nop
 80068ba:	371c      	adds	r7, #28
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	20000370 	.word	0x20000370
 80068c8:	2000035c 	.word	0x2000035c
 80068cc:	20000350 	.word	0x20000350
 80068d0:	2000024c 	.word	0x2000024c
 80068d4:	20000248 	.word	0x20000248
 80068d8:	2000005c 	.word	0x2000005c

080068dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10a      	bne.n	8006902 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80068ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	60fb      	str	r3, [r7, #12]
}
 80068fe:	bf00      	nop
 8006900:	e7fe      	b.n	8006900 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006902:	4b07      	ldr	r3, [pc, #28]	; (8006920 <vTaskPlaceOnEventList+0x44>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	3318      	adds	r3, #24
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7fe ff35 	bl	800577a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006910:	2101      	movs	r1, #1
 8006912:	6838      	ldr	r0, [r7, #0]
 8006914:	f000 fb58 	bl	8006fc8 <prvAddCurrentTaskToDelayedList>
}
 8006918:	bf00      	nop
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	20000248 	.word	0x20000248

08006924 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10a      	bne.n	800694c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693a:	f383 8811 	msr	BASEPRI, r3
 800693e:	f3bf 8f6f 	isb	sy
 8006942:	f3bf 8f4f 	dsb	sy
 8006946:	617b      	str	r3, [r7, #20]
}
 8006948:	bf00      	nop
 800694a:	e7fe      	b.n	800694a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800694c:	4b0a      	ldr	r3, [pc, #40]	; (8006978 <vTaskPlaceOnEventListRestricted+0x54>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	3318      	adds	r3, #24
 8006952:	4619      	mov	r1, r3
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f7fe feec 	bl	8005732 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006960:	f04f 33ff 	mov.w	r3, #4294967295
 8006964:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	68b8      	ldr	r0, [r7, #8]
 800696a:	f000 fb2d 	bl	8006fc8 <prvAddCurrentTaskToDelayedList>
	}
 800696e:	bf00      	nop
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20000248 	.word	0x20000248

0800697c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10a      	bne.n	80069a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	60fb      	str	r3, [r7, #12]
}
 80069a4:	bf00      	nop
 80069a6:	e7fe      	b.n	80069a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	3318      	adds	r3, #24
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7fe ff1d 	bl	80057ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069b2:	4b1d      	ldr	r3, [pc, #116]	; (8006a28 <xTaskRemoveFromEventList+0xac>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d11c      	bne.n	80069f4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	3304      	adds	r3, #4
 80069be:	4618      	mov	r0, r3
 80069c0:	f7fe ff14 	bl	80057ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c8:	2201      	movs	r2, #1
 80069ca:	409a      	lsls	r2, r3
 80069cc:	4b17      	ldr	r3, [pc, #92]	; (8006a2c <xTaskRemoveFromEventList+0xb0>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	4a16      	ldr	r2, [pc, #88]	; (8006a2c <xTaskRemoveFromEventList+0xb0>)
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4a13      	ldr	r2, [pc, #76]	; (8006a30 <xTaskRemoveFromEventList+0xb4>)
 80069e4:	441a      	add	r2, r3
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	3304      	adds	r3, #4
 80069ea:	4619      	mov	r1, r3
 80069ec:	4610      	mov	r0, r2
 80069ee:	f7fe fea0 	bl	8005732 <vListInsertEnd>
 80069f2:	e005      	b.n	8006a00 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	3318      	adds	r3, #24
 80069f8:	4619      	mov	r1, r3
 80069fa:	480e      	ldr	r0, [pc, #56]	; (8006a34 <xTaskRemoveFromEventList+0xb8>)
 80069fc:	f7fe fe99 	bl	8005732 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a04:	4b0c      	ldr	r3, [pc, #48]	; (8006a38 <xTaskRemoveFromEventList+0xbc>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d905      	bls.n	8006a1a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a12:	4b0a      	ldr	r3, [pc, #40]	; (8006a3c <xTaskRemoveFromEventList+0xc0>)
 8006a14:	2201      	movs	r2, #1
 8006a16:	601a      	str	r2, [r3, #0]
 8006a18:	e001      	b.n	8006a1e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a1e:	697b      	ldr	r3, [r7, #20]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3718      	adds	r7, #24
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	20000370 	.word	0x20000370
 8006a2c:	20000350 	.word	0x20000350
 8006a30:	2000024c 	.word	0x2000024c
 8006a34:	20000308 	.word	0x20000308
 8006a38:	20000248 	.word	0x20000248
 8006a3c:	2000035c 	.word	0x2000035c

08006a40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a48:	4b06      	ldr	r3, [pc, #24]	; (8006a64 <vTaskInternalSetTimeOutState+0x24>)
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a50:	4b05      	ldr	r3, [pc, #20]	; (8006a68 <vTaskInternalSetTimeOutState+0x28>)
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	605a      	str	r2, [r3, #4]
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	20000360 	.word	0x20000360
 8006a68:	2000034c 	.word	0x2000034c

08006a6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b088      	sub	sp, #32
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10a      	bne.n	8006a92 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	613b      	str	r3, [r7, #16]
}
 8006a8e:	bf00      	nop
 8006a90:	e7fe      	b.n	8006a90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10a      	bne.n	8006aae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9c:	f383 8811 	msr	BASEPRI, r3
 8006aa0:	f3bf 8f6f 	isb	sy
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	60fb      	str	r3, [r7, #12]
}
 8006aaa:	bf00      	nop
 8006aac:	e7fe      	b.n	8006aac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006aae:	f000 ff49 	bl	8007944 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006ab2:	4b1d      	ldr	r3, [pc, #116]	; (8006b28 <xTaskCheckForTimeOut+0xbc>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	69ba      	ldr	r2, [r7, #24]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aca:	d102      	bne.n	8006ad2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006acc:	2300      	movs	r3, #0
 8006ace:	61fb      	str	r3, [r7, #28]
 8006ad0:	e023      	b.n	8006b1a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	4b15      	ldr	r3, [pc, #84]	; (8006b2c <xTaskCheckForTimeOut+0xc0>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d007      	beq.n	8006aee <xTaskCheckForTimeOut+0x82>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	69ba      	ldr	r2, [r7, #24]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d302      	bcc.n	8006aee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	61fb      	str	r3, [r7, #28]
 8006aec:	e015      	b.n	8006b1a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d20b      	bcs.n	8006b10 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	1ad2      	subs	r2, r2, r3
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f7ff ff9b 	bl	8006a40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	61fb      	str	r3, [r7, #28]
 8006b0e:	e004      	b.n	8006b1a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	2200      	movs	r2, #0
 8006b14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b16:	2301      	movs	r3, #1
 8006b18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b1a:	f000 ff43 	bl	80079a4 <vPortExitCritical>

	return xReturn;
 8006b1e:	69fb      	ldr	r3, [r7, #28]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3720      	adds	r7, #32
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	2000034c 	.word	0x2000034c
 8006b2c:	20000360 	.word	0x20000360

08006b30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b30:	b480      	push	{r7}
 8006b32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b34:	4b03      	ldr	r3, [pc, #12]	; (8006b44 <vTaskMissedYield+0x14>)
 8006b36:	2201      	movs	r2, #1
 8006b38:	601a      	str	r2, [r3, #0]
}
 8006b3a:	bf00      	nop
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	2000035c 	.word	0x2000035c

08006b48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b50:	f000 f852 	bl	8006bf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b54:	4b06      	ldr	r3, [pc, #24]	; (8006b70 <prvIdleTask+0x28>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d9f9      	bls.n	8006b50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b5c:	4b05      	ldr	r3, [pc, #20]	; (8006b74 <prvIdleTask+0x2c>)
 8006b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b6c:	e7f0      	b.n	8006b50 <prvIdleTask+0x8>
 8006b6e:	bf00      	nop
 8006b70:	2000024c 	.word	0x2000024c
 8006b74:	e000ed04 	.word	0xe000ed04

08006b78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b7e:	2300      	movs	r3, #0
 8006b80:	607b      	str	r3, [r7, #4]
 8006b82:	e00c      	b.n	8006b9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	4613      	mov	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4a12      	ldr	r2, [pc, #72]	; (8006bd8 <prvInitialiseTaskLists+0x60>)
 8006b90:	4413      	add	r3, r2
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fe fda0 	bl	80056d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	607b      	str	r3, [r7, #4]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b06      	cmp	r3, #6
 8006ba2:	d9ef      	bls.n	8006b84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ba4:	480d      	ldr	r0, [pc, #52]	; (8006bdc <prvInitialiseTaskLists+0x64>)
 8006ba6:	f7fe fd97 	bl	80056d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006baa:	480d      	ldr	r0, [pc, #52]	; (8006be0 <prvInitialiseTaskLists+0x68>)
 8006bac:	f7fe fd94 	bl	80056d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006bb0:	480c      	ldr	r0, [pc, #48]	; (8006be4 <prvInitialiseTaskLists+0x6c>)
 8006bb2:	f7fe fd91 	bl	80056d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006bb6:	480c      	ldr	r0, [pc, #48]	; (8006be8 <prvInitialiseTaskLists+0x70>)
 8006bb8:	f7fe fd8e 	bl	80056d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006bbc:	480b      	ldr	r0, [pc, #44]	; (8006bec <prvInitialiseTaskLists+0x74>)
 8006bbe:	f7fe fd8b 	bl	80056d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006bc2:	4b0b      	ldr	r3, [pc, #44]	; (8006bf0 <prvInitialiseTaskLists+0x78>)
 8006bc4:	4a05      	ldr	r2, [pc, #20]	; (8006bdc <prvInitialiseTaskLists+0x64>)
 8006bc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006bc8:	4b0a      	ldr	r3, [pc, #40]	; (8006bf4 <prvInitialiseTaskLists+0x7c>)
 8006bca:	4a05      	ldr	r2, [pc, #20]	; (8006be0 <prvInitialiseTaskLists+0x68>)
 8006bcc:	601a      	str	r2, [r3, #0]
}
 8006bce:	bf00      	nop
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	2000024c 	.word	0x2000024c
 8006bdc:	200002d8 	.word	0x200002d8
 8006be0:	200002ec 	.word	0x200002ec
 8006be4:	20000308 	.word	0x20000308
 8006be8:	2000031c 	.word	0x2000031c
 8006bec:	20000334 	.word	0x20000334
 8006bf0:	20000300 	.word	0x20000300
 8006bf4:	20000304 	.word	0x20000304

08006bf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bfe:	e019      	b.n	8006c34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c00:	f000 fea0 	bl	8007944 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c04:	4b10      	ldr	r3, [pc, #64]	; (8006c48 <prvCheckTasksWaitingTermination+0x50>)
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	3304      	adds	r3, #4
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7fe fdeb 	bl	80057ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c16:	4b0d      	ldr	r3, [pc, #52]	; (8006c4c <prvCheckTasksWaitingTermination+0x54>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	4a0b      	ldr	r2, [pc, #44]	; (8006c4c <prvCheckTasksWaitingTermination+0x54>)
 8006c1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c20:	4b0b      	ldr	r3, [pc, #44]	; (8006c50 <prvCheckTasksWaitingTermination+0x58>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	3b01      	subs	r3, #1
 8006c26:	4a0a      	ldr	r2, [pc, #40]	; (8006c50 <prvCheckTasksWaitingTermination+0x58>)
 8006c28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c2a:	f000 febb 	bl	80079a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f810 	bl	8006c54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c34:	4b06      	ldr	r3, [pc, #24]	; (8006c50 <prvCheckTasksWaitingTermination+0x58>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1e1      	bne.n	8006c00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c3c:	bf00      	nop
 8006c3e:	bf00      	nop
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	2000031c 	.word	0x2000031c
 8006c4c:	20000348 	.word	0x20000348
 8006c50:	20000330 	.word	0x20000330

08006c54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	334c      	adds	r3, #76	; 0x4c
 8006c60:	4618      	mov	r0, r3
 8006c62:	f001 fa2f 	bl	80080c4 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f001 f858 	bl	8007d20 <vPortFree>
			vPortFree( pxTCB );
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f001 f855 	bl	8007d20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c76:	bf00      	nop
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
	...

08006c80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c86:	4b0c      	ldr	r3, [pc, #48]	; (8006cb8 <prvResetNextTaskUnblockTime+0x38>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d104      	bne.n	8006c9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c90:	4b0a      	ldr	r3, [pc, #40]	; (8006cbc <prvResetNextTaskUnblockTime+0x3c>)
 8006c92:	f04f 32ff 	mov.w	r2, #4294967295
 8006c96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c98:	e008      	b.n	8006cac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c9a:	4b07      	ldr	r3, [pc, #28]	; (8006cb8 <prvResetNextTaskUnblockTime+0x38>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	4a04      	ldr	r2, [pc, #16]	; (8006cbc <prvResetNextTaskUnblockTime+0x3c>)
 8006caa:	6013      	str	r3, [r2, #0]
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	20000300 	.word	0x20000300
 8006cbc:	20000368 	.word	0x20000368

08006cc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006cc6:	4b0b      	ldr	r3, [pc, #44]	; (8006cf4 <xTaskGetSchedulerState+0x34>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d102      	bne.n	8006cd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	607b      	str	r3, [r7, #4]
 8006cd2:	e008      	b.n	8006ce6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cd4:	4b08      	ldr	r3, [pc, #32]	; (8006cf8 <xTaskGetSchedulerState+0x38>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d102      	bne.n	8006ce2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006cdc:	2302      	movs	r3, #2
 8006cde:	607b      	str	r3, [r7, #4]
 8006ce0:	e001      	b.n	8006ce6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006ce6:	687b      	ldr	r3, [r7, #4]
	}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr
 8006cf4:	20000354 	.word	0x20000354
 8006cf8:	20000370 	.word	0x20000370

08006cfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d06e      	beq.n	8006df0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d12:	4b3a      	ldr	r3, [pc, #232]	; (8006dfc <xTaskPriorityDisinherit+0x100>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d00a      	beq.n	8006d32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d20:	f383 8811 	msr	BASEPRI, r3
 8006d24:	f3bf 8f6f 	isb	sy
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	60fb      	str	r3, [r7, #12]
}
 8006d2e:	bf00      	nop
 8006d30:	e7fe      	b.n	8006d30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10a      	bne.n	8006d50 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3e:	f383 8811 	msr	BASEPRI, r3
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	60bb      	str	r3, [r7, #8]
}
 8006d4c:	bf00      	nop
 8006d4e:	e7fe      	b.n	8006d4e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d54:	1e5a      	subs	r2, r3, #1
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d044      	beq.n	8006df0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d140      	bne.n	8006df0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	3304      	adds	r3, #4
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fe fd3a 	bl	80057ec <uxListRemove>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d115      	bne.n	8006daa <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d82:	491f      	ldr	r1, [pc, #124]	; (8006e00 <xTaskPriorityDisinherit+0x104>)
 8006d84:	4613      	mov	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	440b      	add	r3, r1
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10a      	bne.n	8006daa <xTaskPriorityDisinherit+0xae>
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d98:	2201      	movs	r2, #1
 8006d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9e:	43da      	mvns	r2, r3
 8006da0:	4b18      	ldr	r3, [pc, #96]	; (8006e04 <xTaskPriorityDisinherit+0x108>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4013      	ands	r3, r2
 8006da6:	4a17      	ldr	r2, [pc, #92]	; (8006e04 <xTaskPriorityDisinherit+0x108>)
 8006da8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db6:	f1c3 0207 	rsb	r2, r3, #7
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	409a      	lsls	r2, r3
 8006dc6:	4b0f      	ldr	r3, [pc, #60]	; (8006e04 <xTaskPriorityDisinherit+0x108>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	4a0d      	ldr	r2, [pc, #52]	; (8006e04 <xTaskPriorityDisinherit+0x108>)
 8006dce:	6013      	str	r3, [r2, #0]
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4413      	add	r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4a08      	ldr	r2, [pc, #32]	; (8006e00 <xTaskPriorityDisinherit+0x104>)
 8006dde:	441a      	add	r2, r3
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	3304      	adds	r3, #4
 8006de4:	4619      	mov	r1, r3
 8006de6:	4610      	mov	r0, r2
 8006de8:	f7fe fca3 	bl	8005732 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006dec:	2301      	movs	r3, #1
 8006dee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006df0:	697b      	ldr	r3, [r7, #20]
	}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20000248 	.word	0x20000248
 8006e00:	2000024c 	.word	0x2000024c
 8006e04:	20000350 	.word	0x20000350

08006e08 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8006e12:	f000 fd97 	bl	8007944 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8006e16:	4b20      	ldr	r3, [pc, #128]	; (8006e98 <ulTaskNotifyTake+0x90>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d113      	bne.n	8006e4a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006e22:	4b1d      	ldr	r3, [pc, #116]	; (8006e98 <ulTaskNotifyTake+0x90>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00b      	beq.n	8006e4a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e32:	2101      	movs	r1, #1
 8006e34:	6838      	ldr	r0, [r7, #0]
 8006e36:	f000 f8c7 	bl	8006fc8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006e3a:	4b18      	ldr	r3, [pc, #96]	; (8006e9c <ulTaskNotifyTake+0x94>)
 8006e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e40:	601a      	str	r2, [r3, #0]
 8006e42:	f3bf 8f4f 	dsb	sy
 8006e46:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006e4a:	f000 fdab 	bl	80079a4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8006e4e:	f000 fd79 	bl	8007944 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8006e52:	4b11      	ldr	r3, [pc, #68]	; (8006e98 <ulTaskNotifyTake+0x90>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e5a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00e      	beq.n	8006e80 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d005      	beq.n	8006e74 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8006e68:	4b0b      	ldr	r3, [pc, #44]	; (8006e98 <ulTaskNotifyTake+0x90>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8006e72:	e005      	b.n	8006e80 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8006e74:	4b08      	ldr	r3, [pc, #32]	; (8006e98 <ulTaskNotifyTake+0x90>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	3a01      	subs	r2, #1
 8006e7c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e80:	4b05      	ldr	r3, [pc, #20]	; (8006e98 <ulTaskNotifyTake+0x90>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 8006e8a:	f000 fd8b 	bl	80079a4 <vPortExitCritical>

		return ulReturn;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
	}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	20000248 	.word	0x20000248
 8006e9c:	e000ed04 	.word	0xe000ed04

08006ea0 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b08a      	sub	sp, #40	; 0x28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10a      	bne.n	8006ec6 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 8006eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb4:	f383 8811 	msr	BASEPRI, r3
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	61bb      	str	r3, [r7, #24]
}
 8006ec2:	bf00      	nop
 8006ec4:	e7fe      	b.n	8006ec4 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ec6:	f000 fe1f 	bl	8007b08 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8006ece:	f3ef 8211 	mrs	r2, BASEPRI
 8006ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed6:	f383 8811 	msr	BASEPRI, r3
 8006eda:	f3bf 8f6f 	isb	sy
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	617a      	str	r2, [r7, #20]
 8006ee4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006ee6:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ee8:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eec:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006ef0:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006f08:	7ffb      	ldrb	r3, [r7, #31]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d145      	bne.n	8006f9a <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8006f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	60fb      	str	r3, [r7, #12]
}
 8006f28:	bf00      	nop
 8006f2a:	e7fe      	b.n	8006f2a <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f2c:	4b20      	ldr	r3, [pc, #128]	; (8006fb0 <vTaskNotifyGiveFromISR+0x110>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d11c      	bne.n	8006f6e <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f36:	3304      	adds	r3, #4
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7fe fc57 	bl	80057ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f42:	2201      	movs	r2, #1
 8006f44:	409a      	lsls	r2, r3
 8006f46:	4b1b      	ldr	r3, [pc, #108]	; (8006fb4 <vTaskNotifyGiveFromISR+0x114>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	4a19      	ldr	r2, [pc, #100]	; (8006fb4 <vTaskNotifyGiveFromISR+0x114>)
 8006f4e:	6013      	str	r3, [r2, #0]
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f54:	4613      	mov	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4a16      	ldr	r2, [pc, #88]	; (8006fb8 <vTaskNotifyGiveFromISR+0x118>)
 8006f5e:	441a      	add	r2, r3
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	3304      	adds	r3, #4
 8006f64:	4619      	mov	r1, r3
 8006f66:	4610      	mov	r0, r2
 8006f68:	f7fe fbe3 	bl	8005732 <vListInsertEnd>
 8006f6c:	e005      	b.n	8006f7a <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	3318      	adds	r3, #24
 8006f72:	4619      	mov	r1, r3
 8006f74:	4811      	ldr	r0, [pc, #68]	; (8006fbc <vTaskNotifyGiveFromISR+0x11c>)
 8006f76:	f7fe fbdc 	bl	8005732 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f7e:	4b10      	ldr	r3, [pc, #64]	; (8006fc0 <vTaskNotifyGiveFromISR+0x120>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d908      	bls.n	8006f9a <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d002      	beq.n	8006f94 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	2201      	movs	r2, #1
 8006f92:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006f94:	4b0b      	ldr	r3, [pc, #44]	; (8006fc4 <vTaskNotifyGiveFromISR+0x124>)
 8006f96:	2201      	movs	r2, #1
 8006f98:	601a      	str	r2, [r3, #0]
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	f383 8811 	msr	BASEPRI, r3
}
 8006fa4:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8006fa6:	bf00      	nop
 8006fa8:	3728      	adds	r7, #40	; 0x28
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20000370 	.word	0x20000370
 8006fb4:	20000350 	.word	0x20000350
 8006fb8:	2000024c 	.word	0x2000024c
 8006fbc:	20000308 	.word	0x20000308
 8006fc0:	20000248 	.word	0x20000248
 8006fc4:	2000035c 	.word	0x2000035c

08006fc8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006fd2:	4b29      	ldr	r3, [pc, #164]	; (8007078 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fd8:	4b28      	ldr	r3, [pc, #160]	; (800707c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3304      	adds	r3, #4
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7fe fc04 	bl	80057ec <uxListRemove>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10b      	bne.n	8007002 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006fea:	4b24      	ldr	r3, [pc, #144]	; (800707c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff6:	43da      	mvns	r2, r3
 8006ff8:	4b21      	ldr	r3, [pc, #132]	; (8007080 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	4a20      	ldr	r2, [pc, #128]	; (8007080 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007000:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007008:	d10a      	bne.n	8007020 <prvAddCurrentTaskToDelayedList+0x58>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d007      	beq.n	8007020 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007010:	4b1a      	ldr	r3, [pc, #104]	; (800707c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	3304      	adds	r3, #4
 8007016:	4619      	mov	r1, r3
 8007018:	481a      	ldr	r0, [pc, #104]	; (8007084 <prvAddCurrentTaskToDelayedList+0xbc>)
 800701a:	f7fe fb8a 	bl	8005732 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800701e:	e026      	b.n	800706e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4413      	add	r3, r2
 8007026:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007028:	4b14      	ldr	r3, [pc, #80]	; (800707c <prvAddCurrentTaskToDelayedList+0xb4>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	429a      	cmp	r2, r3
 8007036:	d209      	bcs.n	800704c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007038:	4b13      	ldr	r3, [pc, #76]	; (8007088 <prvAddCurrentTaskToDelayedList+0xc0>)
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	4b0f      	ldr	r3, [pc, #60]	; (800707c <prvAddCurrentTaskToDelayedList+0xb4>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	3304      	adds	r3, #4
 8007042:	4619      	mov	r1, r3
 8007044:	4610      	mov	r0, r2
 8007046:	f7fe fb98 	bl	800577a <vListInsert>
}
 800704a:	e010      	b.n	800706e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800704c:	4b0f      	ldr	r3, [pc, #60]	; (800708c <prvAddCurrentTaskToDelayedList+0xc4>)
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	4b0a      	ldr	r3, [pc, #40]	; (800707c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	3304      	adds	r3, #4
 8007056:	4619      	mov	r1, r3
 8007058:	4610      	mov	r0, r2
 800705a:	f7fe fb8e 	bl	800577a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800705e:	4b0c      	ldr	r3, [pc, #48]	; (8007090 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	429a      	cmp	r2, r3
 8007066:	d202      	bcs.n	800706e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007068:	4a09      	ldr	r2, [pc, #36]	; (8007090 <prvAddCurrentTaskToDelayedList+0xc8>)
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	6013      	str	r3, [r2, #0]
}
 800706e:	bf00      	nop
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	2000034c 	.word	0x2000034c
 800707c:	20000248 	.word	0x20000248
 8007080:	20000350 	.word	0x20000350
 8007084:	20000334 	.word	0x20000334
 8007088:	20000304 	.word	0x20000304
 800708c:	20000300 	.word	0x20000300
 8007090:	20000368 	.word	0x20000368

08007094 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800709a:	2300      	movs	r3, #0
 800709c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800709e:	f000 faf1 	bl	8007684 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80070a2:	4b11      	ldr	r3, [pc, #68]	; (80070e8 <xTimerCreateTimerTask+0x54>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00b      	beq.n	80070c2 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80070aa:	4b10      	ldr	r3, [pc, #64]	; (80070ec <xTimerCreateTimerTask+0x58>)
 80070ac:	9301      	str	r3, [sp, #4]
 80070ae:	2305      	movs	r3, #5
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	2300      	movs	r3, #0
 80070b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070b8:	490d      	ldr	r1, [pc, #52]	; (80070f0 <xTimerCreateTimerTask+0x5c>)
 80070ba:	480e      	ldr	r0, [pc, #56]	; (80070f4 <xTimerCreateTimerTask+0x60>)
 80070bc:	f7ff f866 	bl	800618c <xTaskCreate>
 80070c0:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10a      	bne.n	80070de <xTimerCreateTimerTask+0x4a>
	__asm volatile
 80070c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070cc:	f383 8811 	msr	BASEPRI, r3
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	603b      	str	r3, [r7, #0]
}
 80070da:	bf00      	nop
 80070dc:	e7fe      	b.n	80070dc <xTimerCreateTimerTask+0x48>
	return xReturn;
 80070de:	687b      	ldr	r3, [r7, #4]
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	200003a4 	.word	0x200003a4
 80070ec:	200003a8 	.word	0x200003a8
 80070f0:	080082a4 	.word	0x080082a4
 80070f4:	0800722d 	.word	0x0800722d

080070f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b08a      	sub	sp, #40	; 0x28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
 8007104:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007106:	2300      	movs	r3, #0
 8007108:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10a      	bne.n	8007126 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	623b      	str	r3, [r7, #32]
}
 8007122:	bf00      	nop
 8007124:	e7fe      	b.n	8007124 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007126:	4b1a      	ldr	r3, [pc, #104]	; (8007190 <xTimerGenericCommand+0x98>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d02a      	beq.n	8007184 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	2b05      	cmp	r3, #5
 800713e:	dc18      	bgt.n	8007172 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007140:	f7ff fdbe 	bl	8006cc0 <xTaskGetSchedulerState>
 8007144:	4603      	mov	r3, r0
 8007146:	2b02      	cmp	r3, #2
 8007148:	d109      	bne.n	800715e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800714a:	4b11      	ldr	r3, [pc, #68]	; (8007190 <xTimerGenericCommand+0x98>)
 800714c:	6818      	ldr	r0, [r3, #0]
 800714e:	f107 0110 	add.w	r1, r7, #16
 8007152:	2300      	movs	r3, #0
 8007154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007156:	f7fe fc31 	bl	80059bc <xQueueGenericSend>
 800715a:	6278      	str	r0, [r7, #36]	; 0x24
 800715c:	e012      	b.n	8007184 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800715e:	4b0c      	ldr	r3, [pc, #48]	; (8007190 <xTimerGenericCommand+0x98>)
 8007160:	6818      	ldr	r0, [r3, #0]
 8007162:	f107 0110 	add.w	r1, r7, #16
 8007166:	2300      	movs	r3, #0
 8007168:	2200      	movs	r2, #0
 800716a:	f7fe fc27 	bl	80059bc <xQueueGenericSend>
 800716e:	6278      	str	r0, [r7, #36]	; 0x24
 8007170:	e008      	b.n	8007184 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007172:	4b07      	ldr	r3, [pc, #28]	; (8007190 <xTimerGenericCommand+0x98>)
 8007174:	6818      	ldr	r0, [r3, #0]
 8007176:	f107 0110 	add.w	r1, r7, #16
 800717a:	2300      	movs	r3, #0
 800717c:	683a      	ldr	r2, [r7, #0]
 800717e:	f7fe fd1b 	bl	8005bb8 <xQueueGenericSendFromISR>
 8007182:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007186:	4618      	mov	r0, r3
 8007188:	3728      	adds	r7, #40	; 0x28
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	200003a4 	.word	0x200003a4

08007194 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b088      	sub	sp, #32
 8007198:	af02      	add	r7, sp, #8
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800719e:	4b22      	ldr	r3, [pc, #136]	; (8007228 <prvProcessExpiredTimer+0x94>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	3304      	adds	r3, #4
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7fe fb1d 	bl	80057ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80071b8:	f003 0304 	and.w	r3, r3, #4
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d022      	beq.n	8007206 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	699a      	ldr	r2, [r3, #24]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	18d1      	adds	r1, r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	6978      	ldr	r0, [r7, #20]
 80071ce:	f000 f8d1 	bl	8007374 <prvInsertTimerInActiveList>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d01f      	beq.n	8007218 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071d8:	2300      	movs	r3, #0
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	2300      	movs	r3, #0
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	2100      	movs	r1, #0
 80071e2:	6978      	ldr	r0, [r7, #20]
 80071e4:	f7ff ff88 	bl	80070f8 <xTimerGenericCommand>
 80071e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d113      	bne.n	8007218 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80071f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f4:	f383 8811 	msr	BASEPRI, r3
 80071f8:	f3bf 8f6f 	isb	sy
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	60fb      	str	r3, [r7, #12]
}
 8007202:	bf00      	nop
 8007204:	e7fe      	b.n	8007204 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800720c:	f023 0301 	bic.w	r3, r3, #1
 8007210:	b2da      	uxtb	r2, r3
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	6a1b      	ldr	r3, [r3, #32]
 800721c:	6978      	ldr	r0, [r7, #20]
 800721e:	4798      	blx	r3
}
 8007220:	bf00      	nop
 8007222:	3718      	adds	r7, #24
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	2000039c 	.word	0x2000039c

0800722c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007234:	f107 0308 	add.w	r3, r7, #8
 8007238:	4618      	mov	r0, r3
 800723a:	f000 f857 	bl	80072ec <prvGetNextExpireTime>
 800723e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	4619      	mov	r1, r3
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f000 f803 	bl	8007250 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800724a:	f000 f8d5 	bl	80073f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800724e:	e7f1      	b.n	8007234 <prvTimerTask+0x8>

08007250 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800725a:	f7ff f96b 	bl	8006534 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800725e:	f107 0308 	add.w	r3, r7, #8
 8007262:	4618      	mov	r0, r3
 8007264:	f000 f866 	bl	8007334 <prvSampleTimeNow>
 8007268:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d130      	bne.n	80072d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10a      	bne.n	800728c <prvProcessTimerOrBlockTask+0x3c>
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	429a      	cmp	r2, r3
 800727c:	d806      	bhi.n	800728c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800727e:	f7ff f967 	bl	8006550 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007282:	68f9      	ldr	r1, [r7, #12]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f7ff ff85 	bl	8007194 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800728a:	e024      	b.n	80072d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d008      	beq.n	80072a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007292:	4b13      	ldr	r3, [pc, #76]	; (80072e0 <prvProcessTimerOrBlockTask+0x90>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d101      	bne.n	80072a0 <prvProcessTimerOrBlockTask+0x50>
 800729c:	2301      	movs	r3, #1
 800729e:	e000      	b.n	80072a2 <prvProcessTimerOrBlockTask+0x52>
 80072a0:	2300      	movs	r3, #0
 80072a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80072a4:	4b0f      	ldr	r3, [pc, #60]	; (80072e4 <prvProcessTimerOrBlockTask+0x94>)
 80072a6:	6818      	ldr	r0, [r3, #0]
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	4619      	mov	r1, r3
 80072b2:	f7fe ff37 	bl	8006124 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80072b6:	f7ff f94b 	bl	8006550 <xTaskResumeAll>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10a      	bne.n	80072d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80072c0:	4b09      	ldr	r3, [pc, #36]	; (80072e8 <prvProcessTimerOrBlockTask+0x98>)
 80072c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072c6:	601a      	str	r2, [r3, #0]
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	f3bf 8f6f 	isb	sy
}
 80072d0:	e001      	b.n	80072d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80072d2:	f7ff f93d 	bl	8006550 <xTaskResumeAll>
}
 80072d6:	bf00      	nop
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	200003a0 	.word	0x200003a0
 80072e4:	200003a4 	.word	0x200003a4
 80072e8:	e000ed04 	.word	0xe000ed04

080072ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80072ec:	b480      	push	{r7}
 80072ee:	b085      	sub	sp, #20
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80072f4:	4b0e      	ldr	r3, [pc, #56]	; (8007330 <prvGetNextExpireTime+0x44>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <prvGetNextExpireTime+0x16>
 80072fe:	2201      	movs	r2, #1
 8007300:	e000      	b.n	8007304 <prvGetNextExpireTime+0x18>
 8007302:	2200      	movs	r2, #0
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d105      	bne.n	800731c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007310:	4b07      	ldr	r3, [pc, #28]	; (8007330 <prvGetNextExpireTime+0x44>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	60fb      	str	r3, [r7, #12]
 800731a:	e001      	b.n	8007320 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800731c:	2300      	movs	r3, #0
 800731e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007320:	68fb      	ldr	r3, [r7, #12]
}
 8007322:	4618      	mov	r0, r3
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	2000039c 	.word	0x2000039c

08007334 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800733c:	f7ff f9a4 	bl	8006688 <xTaskGetTickCount>
 8007340:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007342:	4b0b      	ldr	r3, [pc, #44]	; (8007370 <prvSampleTimeNow+0x3c>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	429a      	cmp	r2, r3
 800734a:	d205      	bcs.n	8007358 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800734c:	f000 f936 	bl	80075bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	601a      	str	r2, [r3, #0]
 8007356:	e002      	b.n	800735e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800735e:	4a04      	ldr	r2, [pc, #16]	; (8007370 <prvSampleTimeNow+0x3c>)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007364:	68fb      	ldr	r3, [r7, #12]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	200003ac 	.word	0x200003ac

08007374 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
 8007380:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007382:	2300      	movs	r3, #0
 8007384:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	429a      	cmp	r2, r3
 8007398:	d812      	bhi.n	80073c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	1ad2      	subs	r2, r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d302      	bcc.n	80073ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80073a8:	2301      	movs	r3, #1
 80073aa:	617b      	str	r3, [r7, #20]
 80073ac:	e01b      	b.n	80073e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80073ae:	4b10      	ldr	r3, [pc, #64]	; (80073f0 <prvInsertTimerInActiveList+0x7c>)
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3304      	adds	r3, #4
 80073b6:	4619      	mov	r1, r3
 80073b8:	4610      	mov	r0, r2
 80073ba:	f7fe f9de 	bl	800577a <vListInsert>
 80073be:	e012      	b.n	80073e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d206      	bcs.n	80073d6 <prvInsertTimerInActiveList+0x62>
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d302      	bcc.n	80073d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80073d0:	2301      	movs	r3, #1
 80073d2:	617b      	str	r3, [r7, #20]
 80073d4:	e007      	b.n	80073e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073d6:	4b07      	ldr	r3, [pc, #28]	; (80073f4 <prvInsertTimerInActiveList+0x80>)
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	3304      	adds	r3, #4
 80073de:	4619      	mov	r1, r3
 80073e0:	4610      	mov	r0, r2
 80073e2:	f7fe f9ca 	bl	800577a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80073e6:	697b      	ldr	r3, [r7, #20]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3718      	adds	r7, #24
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	200003a0 	.word	0x200003a0
 80073f4:	2000039c 	.word	0x2000039c

080073f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b08e      	sub	sp, #56	; 0x38
 80073fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073fe:	e0ca      	b.n	8007596 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	da18      	bge.n	8007438 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007406:	1d3b      	adds	r3, r7, #4
 8007408:	3304      	adds	r3, #4
 800740a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800740c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10a      	bne.n	8007428 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007416:	f383 8811 	msr	BASEPRI, r3
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	61fb      	str	r3, [r7, #28]
}
 8007424:	bf00      	nop
 8007426:	e7fe      	b.n	8007426 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800742e:	6850      	ldr	r0, [r2, #4]
 8007430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007432:	6892      	ldr	r2, [r2, #8]
 8007434:	4611      	mov	r1, r2
 8007436:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	f2c0 80ab 	blt.w	8007596 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007446:	695b      	ldr	r3, [r3, #20]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d004      	beq.n	8007456 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800744c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744e:	3304      	adds	r3, #4
 8007450:	4618      	mov	r0, r3
 8007452:	f7fe f9cb 	bl	80057ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007456:	463b      	mov	r3, r7
 8007458:	4618      	mov	r0, r3
 800745a:	f7ff ff6b 	bl	8007334 <prvSampleTimeNow>
 800745e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b09      	cmp	r3, #9
 8007464:	f200 8096 	bhi.w	8007594 <prvProcessReceivedCommands+0x19c>
 8007468:	a201      	add	r2, pc, #4	; (adr r2, 8007470 <prvProcessReceivedCommands+0x78>)
 800746a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746e:	bf00      	nop
 8007470:	08007499 	.word	0x08007499
 8007474:	08007499 	.word	0x08007499
 8007478:	08007499 	.word	0x08007499
 800747c:	0800750d 	.word	0x0800750d
 8007480:	08007521 	.word	0x08007521
 8007484:	0800756b 	.word	0x0800756b
 8007488:	08007499 	.word	0x08007499
 800748c:	08007499 	.word	0x08007499
 8007490:	0800750d 	.word	0x0800750d
 8007494:	08007521 	.word	0x08007521
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800749e:	f043 0301 	orr.w	r3, r3, #1
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	18d1      	adds	r1, r2, r3
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074b8:	f7ff ff5c 	bl	8007374 <prvInsertTimerInActiveList>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d069      	beq.n	8007596 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d05e      	beq.n	8007596 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	441a      	add	r2, r3
 80074e0:	2300      	movs	r3, #0
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	2300      	movs	r3, #0
 80074e6:	2100      	movs	r1, #0
 80074e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074ea:	f7ff fe05 	bl	80070f8 <xTimerGenericCommand>
 80074ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80074f0:	6a3b      	ldr	r3, [r7, #32]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d14f      	bne.n	8007596 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80074f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fa:	f383 8811 	msr	BASEPRI, r3
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	61bb      	str	r3, [r7, #24]
}
 8007508:	bf00      	nop
 800750a:	e7fe      	b.n	800750a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800750c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007512:	f023 0301 	bic.w	r3, r3, #1
 8007516:	b2da      	uxtb	r2, r3
 8007518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800751e:	e03a      	b.n	8007596 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007522:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007526:	f043 0301 	orr.w	r3, r3, #1
 800752a:	b2da      	uxtb	r2, r3
 800752c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007536:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10a      	bne.n	8007556 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007544:	f383 8811 	msr	BASEPRI, r3
 8007548:	f3bf 8f6f 	isb	sy
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	617b      	str	r3, [r7, #20]
}
 8007552:	bf00      	nop
 8007554:	e7fe      	b.n	8007554 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007558:	699a      	ldr	r2, [r3, #24]
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	18d1      	adds	r1, r2, r3
 800755e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007564:	f7ff ff06 	bl	8007374 <prvInsertTimerInActiveList>
					break;
 8007568:	e015      	b.n	8007596 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800756a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007570:	f003 0302 	and.w	r3, r3, #2
 8007574:	2b00      	cmp	r3, #0
 8007576:	d103      	bne.n	8007580 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007578:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800757a:	f000 fbd1 	bl	8007d20 <vPortFree>
 800757e:	e00a      	b.n	8007596 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007582:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007586:	f023 0301 	bic.w	r3, r3, #1
 800758a:	b2da      	uxtb	r2, r3
 800758c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007592:	e000      	b.n	8007596 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007594:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007596:	4b08      	ldr	r3, [pc, #32]	; (80075b8 <prvProcessReceivedCommands+0x1c0>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	1d39      	adds	r1, r7, #4
 800759c:	2200      	movs	r2, #0
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fe fba6 	bl	8005cf0 <xQueueReceive>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f47f af2a 	bne.w	8007400 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80075ac:	bf00      	nop
 80075ae:	bf00      	nop
 80075b0:	3730      	adds	r7, #48	; 0x30
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	200003a4 	.word	0x200003a4

080075bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b088      	sub	sp, #32
 80075c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075c2:	e048      	b.n	8007656 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075c4:	4b2d      	ldr	r3, [pc, #180]	; (800767c <prvSwitchTimerLists+0xc0>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075ce:	4b2b      	ldr	r3, [pc, #172]	; (800767c <prvSwitchTimerLists+0xc0>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	3304      	adds	r3, #4
 80075dc:	4618      	mov	r0, r3
 80075de:	f7fe f905 	bl	80057ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6a1b      	ldr	r3, [r3, #32]
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80075f0:	f003 0304 	and.w	r3, r3, #4
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d02e      	beq.n	8007656 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	4413      	add	r3, r2
 8007600:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007602:	68ba      	ldr	r2, [r7, #8]
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	429a      	cmp	r2, r3
 8007608:	d90e      	bls.n	8007628 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007616:	4b19      	ldr	r3, [pc, #100]	; (800767c <prvSwitchTimerLists+0xc0>)
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	3304      	adds	r3, #4
 800761e:	4619      	mov	r1, r3
 8007620:	4610      	mov	r0, r2
 8007622:	f7fe f8aa 	bl	800577a <vListInsert>
 8007626:	e016      	b.n	8007656 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007628:	2300      	movs	r3, #0
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	2300      	movs	r3, #0
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	2100      	movs	r1, #0
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f7ff fd60 	bl	80070f8 <xTimerGenericCommand>
 8007638:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10a      	bne.n	8007656 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	603b      	str	r3, [r7, #0]
}
 8007652:	bf00      	nop
 8007654:	e7fe      	b.n	8007654 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007656:	4b09      	ldr	r3, [pc, #36]	; (800767c <prvSwitchTimerLists+0xc0>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1b1      	bne.n	80075c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007660:	4b06      	ldr	r3, [pc, #24]	; (800767c <prvSwitchTimerLists+0xc0>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007666:	4b06      	ldr	r3, [pc, #24]	; (8007680 <prvSwitchTimerLists+0xc4>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a04      	ldr	r2, [pc, #16]	; (800767c <prvSwitchTimerLists+0xc0>)
 800766c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800766e:	4a04      	ldr	r2, [pc, #16]	; (8007680 <prvSwitchTimerLists+0xc4>)
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	6013      	str	r3, [r2, #0]
}
 8007674:	bf00      	nop
 8007676:	3718      	adds	r7, #24
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	2000039c 	.word	0x2000039c
 8007680:	200003a0 	.word	0x200003a0

08007684 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007684:	b580      	push	{r7, lr}
 8007686:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007688:	f000 f95c 	bl	8007944 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800768c:	4b12      	ldr	r3, [pc, #72]	; (80076d8 <prvCheckForValidListAndQueue+0x54>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d11d      	bne.n	80076d0 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8007694:	4811      	ldr	r0, [pc, #68]	; (80076dc <prvCheckForValidListAndQueue+0x58>)
 8007696:	f7fe f81f 	bl	80056d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800769a:	4811      	ldr	r0, [pc, #68]	; (80076e0 <prvCheckForValidListAndQueue+0x5c>)
 800769c:	f7fe f81c 	bl	80056d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80076a0:	4b10      	ldr	r3, [pc, #64]	; (80076e4 <prvCheckForValidListAndQueue+0x60>)
 80076a2:	4a0e      	ldr	r2, [pc, #56]	; (80076dc <prvCheckForValidListAndQueue+0x58>)
 80076a4:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80076a6:	4b10      	ldr	r3, [pc, #64]	; (80076e8 <prvCheckForValidListAndQueue+0x64>)
 80076a8:	4a0d      	ldr	r2, [pc, #52]	; (80076e0 <prvCheckForValidListAndQueue+0x5c>)
 80076aa:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80076ac:	2200      	movs	r2, #0
 80076ae:	2110      	movs	r1, #16
 80076b0:	2014      	movs	r0, #20
 80076b2:	f7fe f92d 	bl	8005910 <xQueueGenericCreate>
 80076b6:	4603      	mov	r3, r0
 80076b8:	4a07      	ldr	r2, [pc, #28]	; (80076d8 <prvCheckForValidListAndQueue+0x54>)
 80076ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80076bc:	4b06      	ldr	r3, [pc, #24]	; (80076d8 <prvCheckForValidListAndQueue+0x54>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d005      	beq.n	80076d0 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80076c4:	4b04      	ldr	r3, [pc, #16]	; (80076d8 <prvCheckForValidListAndQueue+0x54>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4908      	ldr	r1, [pc, #32]	; (80076ec <prvCheckForValidListAndQueue+0x68>)
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7fe fd00 	bl	80060d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076d0:	f000 f968 	bl	80079a4 <vPortExitCritical>
}
 80076d4:	bf00      	nop
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	200003a4 	.word	0x200003a4
 80076dc:	20000374 	.word	0x20000374
 80076e0:	20000388 	.word	0x20000388
 80076e4:	2000039c 	.word	0x2000039c
 80076e8:	200003a0 	.word	0x200003a0
 80076ec:	080082ac 	.word	0x080082ac

080076f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	3b04      	subs	r3, #4
 8007700:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	3b04      	subs	r3, #4
 800770e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	f023 0201 	bic.w	r2, r3, #1
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	3b04      	subs	r3, #4
 800771e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007720:	4a0c      	ldr	r2, [pc, #48]	; (8007754 <pxPortInitialiseStack+0x64>)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	3b14      	subs	r3, #20
 800772a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	3b04      	subs	r3, #4
 8007736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f06f 0202 	mvn.w	r2, #2
 800773e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	3b20      	subs	r3, #32
 8007744:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007746:	68fb      	ldr	r3, [r7, #12]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3714      	adds	r7, #20
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr
 8007754:	08007759 	.word	0x08007759

08007758 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800775e:	2300      	movs	r3, #0
 8007760:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007762:	4b12      	ldr	r3, [pc, #72]	; (80077ac <prvTaskExitError+0x54>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800776a:	d00a      	beq.n	8007782 <prvTaskExitError+0x2a>
	__asm volatile
 800776c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	60fb      	str	r3, [r7, #12]
}
 800777e:	bf00      	nop
 8007780:	e7fe      	b.n	8007780 <prvTaskExitError+0x28>
	__asm volatile
 8007782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007786:	f383 8811 	msr	BASEPRI, r3
 800778a:	f3bf 8f6f 	isb	sy
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	60bb      	str	r3, [r7, #8]
}
 8007794:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007796:	bf00      	nop
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d0fc      	beq.n	8007798 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800779e:	bf00      	nop
 80077a0:	bf00      	nop
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	2000000c 	.word	0x2000000c

080077b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80077b0:	4b07      	ldr	r3, [pc, #28]	; (80077d0 <pxCurrentTCBConst2>)
 80077b2:	6819      	ldr	r1, [r3, #0]
 80077b4:	6808      	ldr	r0, [r1, #0]
 80077b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ba:	f380 8809 	msr	PSP, r0
 80077be:	f3bf 8f6f 	isb	sy
 80077c2:	f04f 0000 	mov.w	r0, #0
 80077c6:	f380 8811 	msr	BASEPRI, r0
 80077ca:	4770      	bx	lr
 80077cc:	f3af 8000 	nop.w

080077d0 <pxCurrentTCBConst2>:
 80077d0:	20000248 	.word	0x20000248
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077d4:	bf00      	nop
 80077d6:	bf00      	nop

080077d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80077d8:	4808      	ldr	r0, [pc, #32]	; (80077fc <prvPortStartFirstTask+0x24>)
 80077da:	6800      	ldr	r0, [r0, #0]
 80077dc:	6800      	ldr	r0, [r0, #0]
 80077de:	f380 8808 	msr	MSP, r0
 80077e2:	f04f 0000 	mov.w	r0, #0
 80077e6:	f380 8814 	msr	CONTROL, r0
 80077ea:	b662      	cpsie	i
 80077ec:	b661      	cpsie	f
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	df00      	svc	0
 80077f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077fa:	bf00      	nop
 80077fc:	e000ed08 	.word	0xe000ed08

08007800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007806:	4b46      	ldr	r3, [pc, #280]	; (8007920 <xPortStartScheduler+0x120>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a46      	ldr	r2, [pc, #280]	; (8007924 <xPortStartScheduler+0x124>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d10a      	bne.n	8007826 <xPortStartScheduler+0x26>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	613b      	str	r3, [r7, #16]
}
 8007822:	bf00      	nop
 8007824:	e7fe      	b.n	8007824 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007826:	4b3e      	ldr	r3, [pc, #248]	; (8007920 <xPortStartScheduler+0x120>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a3f      	ldr	r2, [pc, #252]	; (8007928 <xPortStartScheduler+0x128>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d10a      	bne.n	8007846 <xPortStartScheduler+0x46>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	60fb      	str	r3, [r7, #12]
}
 8007842:	bf00      	nop
 8007844:	e7fe      	b.n	8007844 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007846:	4b39      	ldr	r3, [pc, #228]	; (800792c <xPortStartScheduler+0x12c>)
 8007848:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	b2db      	uxtb	r3, r3
 8007850:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	22ff      	movs	r2, #255	; 0xff
 8007856:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	b2db      	uxtb	r3, r3
 800785e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007860:	78fb      	ldrb	r3, [r7, #3]
 8007862:	b2db      	uxtb	r3, r3
 8007864:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007868:	b2da      	uxtb	r2, r3
 800786a:	4b31      	ldr	r3, [pc, #196]	; (8007930 <xPortStartScheduler+0x130>)
 800786c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800786e:	4b31      	ldr	r3, [pc, #196]	; (8007934 <xPortStartScheduler+0x134>)
 8007870:	2207      	movs	r2, #7
 8007872:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007874:	e009      	b.n	800788a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007876:	4b2f      	ldr	r3, [pc, #188]	; (8007934 <xPortStartScheduler+0x134>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3b01      	subs	r3, #1
 800787c:	4a2d      	ldr	r2, [pc, #180]	; (8007934 <xPortStartScheduler+0x134>)
 800787e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007880:	78fb      	ldrb	r3, [r7, #3]
 8007882:	b2db      	uxtb	r3, r3
 8007884:	005b      	lsls	r3, r3, #1
 8007886:	b2db      	uxtb	r3, r3
 8007888:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800788a:	78fb      	ldrb	r3, [r7, #3]
 800788c:	b2db      	uxtb	r3, r3
 800788e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007892:	2b80      	cmp	r3, #128	; 0x80
 8007894:	d0ef      	beq.n	8007876 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007896:	4b27      	ldr	r3, [pc, #156]	; (8007934 <xPortStartScheduler+0x134>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f1c3 0307 	rsb	r3, r3, #7
 800789e:	2b04      	cmp	r3, #4
 80078a0:	d00a      	beq.n	80078b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80078a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	60bb      	str	r3, [r7, #8]
}
 80078b4:	bf00      	nop
 80078b6:	e7fe      	b.n	80078b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80078b8:	4b1e      	ldr	r3, [pc, #120]	; (8007934 <xPortStartScheduler+0x134>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	021b      	lsls	r3, r3, #8
 80078be:	4a1d      	ldr	r2, [pc, #116]	; (8007934 <xPortStartScheduler+0x134>)
 80078c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078c2:	4b1c      	ldr	r3, [pc, #112]	; (8007934 <xPortStartScheduler+0x134>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078ca:	4a1a      	ldr	r2, [pc, #104]	; (8007934 <xPortStartScheduler+0x134>)
 80078cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078d6:	4b18      	ldr	r3, [pc, #96]	; (8007938 <xPortStartScheduler+0x138>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a17      	ldr	r2, [pc, #92]	; (8007938 <xPortStartScheduler+0x138>)
 80078dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078e2:	4b15      	ldr	r3, [pc, #84]	; (8007938 <xPortStartScheduler+0x138>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a14      	ldr	r2, [pc, #80]	; (8007938 <xPortStartScheduler+0x138>)
 80078e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80078ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078ee:	f000 f8dd 	bl	8007aac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078f2:	4b12      	ldr	r3, [pc, #72]	; (800793c <xPortStartScheduler+0x13c>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078f8:	f000 f8fc 	bl	8007af4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078fc:	4b10      	ldr	r3, [pc, #64]	; (8007940 <xPortStartScheduler+0x140>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a0f      	ldr	r2, [pc, #60]	; (8007940 <xPortStartScheduler+0x140>)
 8007902:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007906:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007908:	f7ff ff66 	bl	80077d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800790c:	f7fe ff84 	bl	8006818 <vTaskSwitchContext>
	prvTaskExitError();
 8007910:	f7ff ff22 	bl	8007758 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3718      	adds	r7, #24
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	e000ed00 	.word	0xe000ed00
 8007924:	410fc271 	.word	0x410fc271
 8007928:	410fc270 	.word	0x410fc270
 800792c:	e000e400 	.word	0xe000e400
 8007930:	200003b0 	.word	0x200003b0
 8007934:	200003b4 	.word	0x200003b4
 8007938:	e000ed20 	.word	0xe000ed20
 800793c:	2000000c 	.word	0x2000000c
 8007940:	e000ef34 	.word	0xe000ef34

08007944 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	607b      	str	r3, [r7, #4]
}
 800795c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800795e:	4b0f      	ldr	r3, [pc, #60]	; (800799c <vPortEnterCritical+0x58>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	3301      	adds	r3, #1
 8007964:	4a0d      	ldr	r2, [pc, #52]	; (800799c <vPortEnterCritical+0x58>)
 8007966:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007968:	4b0c      	ldr	r3, [pc, #48]	; (800799c <vPortEnterCritical+0x58>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d10f      	bne.n	8007990 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007970:	4b0b      	ldr	r3, [pc, #44]	; (80079a0 <vPortEnterCritical+0x5c>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00a      	beq.n	8007990 <vPortEnterCritical+0x4c>
	__asm volatile
 800797a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	603b      	str	r3, [r7, #0]
}
 800798c:	bf00      	nop
 800798e:	e7fe      	b.n	800798e <vPortEnterCritical+0x4a>
	}
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr
 800799c:	2000000c 	.word	0x2000000c
 80079a0:	e000ed04 	.word	0xe000ed04

080079a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80079aa:	4b12      	ldr	r3, [pc, #72]	; (80079f4 <vPortExitCritical+0x50>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10a      	bne.n	80079c8 <vPortExitCritical+0x24>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	607b      	str	r3, [r7, #4]
}
 80079c4:	bf00      	nop
 80079c6:	e7fe      	b.n	80079c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80079c8:	4b0a      	ldr	r3, [pc, #40]	; (80079f4 <vPortExitCritical+0x50>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	3b01      	subs	r3, #1
 80079ce:	4a09      	ldr	r2, [pc, #36]	; (80079f4 <vPortExitCritical+0x50>)
 80079d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079d2:	4b08      	ldr	r3, [pc, #32]	; (80079f4 <vPortExitCritical+0x50>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d105      	bne.n	80079e6 <vPortExitCritical+0x42>
 80079da:	2300      	movs	r3, #0
 80079dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	f383 8811 	msr	BASEPRI, r3
}
 80079e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80079e6:	bf00      	nop
 80079e8:	370c      	adds	r7, #12
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	2000000c 	.word	0x2000000c
	...

08007a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a00:	f3ef 8009 	mrs	r0, PSP
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	4b15      	ldr	r3, [pc, #84]	; (8007a60 <pxCurrentTCBConst>)
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	f01e 0f10 	tst.w	lr, #16
 8007a10:	bf08      	it	eq
 8007a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1a:	6010      	str	r0, [r2, #0]
 8007a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a24:	f380 8811 	msr	BASEPRI, r0
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	f3bf 8f6f 	isb	sy
 8007a30:	f7fe fef2 	bl	8006818 <vTaskSwitchContext>
 8007a34:	f04f 0000 	mov.w	r0, #0
 8007a38:	f380 8811 	msr	BASEPRI, r0
 8007a3c:	bc09      	pop	{r0, r3}
 8007a3e:	6819      	ldr	r1, [r3, #0]
 8007a40:	6808      	ldr	r0, [r1, #0]
 8007a42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a46:	f01e 0f10 	tst.w	lr, #16
 8007a4a:	bf08      	it	eq
 8007a4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a50:	f380 8809 	msr	PSP, r0
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	f3af 8000 	nop.w

08007a60 <pxCurrentTCBConst>:
 8007a60:	20000248 	.word	0x20000248
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a64:	bf00      	nop
 8007a66:	bf00      	nop

08007a68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	607b      	str	r3, [r7, #4]
}
 8007a80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a82:	f7fe fe11 	bl	80066a8 <xTaskIncrementTick>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d003      	beq.n	8007a94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a8c:	4b06      	ldr	r3, [pc, #24]	; (8007aa8 <SysTick_Handler+0x40>)
 8007a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	2300      	movs	r3, #0
 8007a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	f383 8811 	msr	BASEPRI, r3
}
 8007a9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007aa0:	bf00      	nop
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	e000ed04 	.word	0xe000ed04

08007aac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007aac:	b480      	push	{r7}
 8007aae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ab0:	4b0b      	ldr	r3, [pc, #44]	; (8007ae0 <vPortSetupTimerInterrupt+0x34>)
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ab6:	4b0b      	ldr	r3, [pc, #44]	; (8007ae4 <vPortSetupTimerInterrupt+0x38>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007abc:	4b0a      	ldr	r3, [pc, #40]	; (8007ae8 <vPortSetupTimerInterrupt+0x3c>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a0a      	ldr	r2, [pc, #40]	; (8007aec <vPortSetupTimerInterrupt+0x40>)
 8007ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac6:	099b      	lsrs	r3, r3, #6
 8007ac8:	4a09      	ldr	r2, [pc, #36]	; (8007af0 <vPortSetupTimerInterrupt+0x44>)
 8007aca:	3b01      	subs	r3, #1
 8007acc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ace:	4b04      	ldr	r3, [pc, #16]	; (8007ae0 <vPortSetupTimerInterrupt+0x34>)
 8007ad0:	2207      	movs	r2, #7
 8007ad2:	601a      	str	r2, [r3, #0]
}
 8007ad4:	bf00      	nop
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	e000e010 	.word	0xe000e010
 8007ae4:	e000e018 	.word	0xe000e018
 8007ae8:	20000000 	.word	0x20000000
 8007aec:	10624dd3 	.word	0x10624dd3
 8007af0:	e000e014 	.word	0xe000e014

08007af4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007af4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b04 <vPortEnableVFP+0x10>
 8007af8:	6801      	ldr	r1, [r0, #0]
 8007afa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007afe:	6001      	str	r1, [r0, #0]
 8007b00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b02:	bf00      	nop
 8007b04:	e000ed88 	.word	0xe000ed88

08007b08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b0e:	f3ef 8305 	mrs	r3, IPSR
 8007b12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2b0f      	cmp	r3, #15
 8007b18:	d914      	bls.n	8007b44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b1a:	4a17      	ldr	r2, [pc, #92]	; (8007b78 <vPortValidateInterruptPriority+0x70>)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	4413      	add	r3, r2
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b24:	4b15      	ldr	r3, [pc, #84]	; (8007b7c <vPortValidateInterruptPriority+0x74>)
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	7afa      	ldrb	r2, [r7, #11]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d20a      	bcs.n	8007b44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	607b      	str	r3, [r7, #4]
}
 8007b40:	bf00      	nop
 8007b42:	e7fe      	b.n	8007b42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b44:	4b0e      	ldr	r3, [pc, #56]	; (8007b80 <vPortValidateInterruptPriority+0x78>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b4c:	4b0d      	ldr	r3, [pc, #52]	; (8007b84 <vPortValidateInterruptPriority+0x7c>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d90a      	bls.n	8007b6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	603b      	str	r3, [r7, #0]
}
 8007b66:	bf00      	nop
 8007b68:	e7fe      	b.n	8007b68 <vPortValidateInterruptPriority+0x60>
	}
 8007b6a:	bf00      	nop
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	e000e3f0 	.word	0xe000e3f0
 8007b7c:	200003b0 	.word	0x200003b0
 8007b80:	e000ed0c 	.word	0xe000ed0c
 8007b84:	200003b4 	.word	0x200003b4

08007b88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b08a      	sub	sp, #40	; 0x28
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b90:	2300      	movs	r3, #0
 8007b92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b94:	f7fe fcce 	bl	8006534 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b98:	4b5b      	ldr	r3, [pc, #364]	; (8007d08 <pvPortMalloc+0x180>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d101      	bne.n	8007ba4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ba0:	f000 f920 	bl	8007de4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ba4:	4b59      	ldr	r3, [pc, #356]	; (8007d0c <pvPortMalloc+0x184>)
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4013      	ands	r3, r2
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f040 8093 	bne.w	8007cd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d01d      	beq.n	8007bf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007bb8:	2208      	movs	r2, #8
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f003 0307 	and.w	r3, r3, #7
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d014      	beq.n	8007bf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f023 0307 	bic.w	r3, r3, #7
 8007bd0:	3308      	adds	r3, #8
 8007bd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f003 0307 	and.w	r3, r3, #7
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00a      	beq.n	8007bf4 <pvPortMalloc+0x6c>
	__asm volatile
 8007bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	617b      	str	r3, [r7, #20]
}
 8007bf0:	bf00      	nop
 8007bf2:	e7fe      	b.n	8007bf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d06e      	beq.n	8007cd8 <pvPortMalloc+0x150>
 8007bfa:	4b45      	ldr	r3, [pc, #276]	; (8007d10 <pvPortMalloc+0x188>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d869      	bhi.n	8007cd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c04:	4b43      	ldr	r3, [pc, #268]	; (8007d14 <pvPortMalloc+0x18c>)
 8007c06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c08:	4b42      	ldr	r3, [pc, #264]	; (8007d14 <pvPortMalloc+0x18c>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c0e:	e004      	b.n	8007c1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d903      	bls.n	8007c2c <pvPortMalloc+0xa4>
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1f1      	bne.n	8007c10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c2c:	4b36      	ldr	r3, [pc, #216]	; (8007d08 <pvPortMalloc+0x180>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d050      	beq.n	8007cd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c36:	6a3b      	ldr	r3, [r7, #32]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2208      	movs	r2, #8
 8007c3c:	4413      	add	r3, r2
 8007c3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	1ad2      	subs	r2, r2, r3
 8007c50:	2308      	movs	r3, #8
 8007c52:	005b      	lsls	r3, r3, #1
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d91f      	bls.n	8007c98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	f003 0307 	and.w	r3, r3, #7
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00a      	beq.n	8007c80 <pvPortMalloc+0xf8>
	__asm volatile
 8007c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	613b      	str	r3, [r7, #16]
}
 8007c7c:	bf00      	nop
 8007c7e:	e7fe      	b.n	8007c7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	1ad2      	subs	r2, r2, r3
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c92:	69b8      	ldr	r0, [r7, #24]
 8007c94:	f000 f908 	bl	8007ea8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c98:	4b1d      	ldr	r3, [pc, #116]	; (8007d10 <pvPortMalloc+0x188>)
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	4a1b      	ldr	r2, [pc, #108]	; (8007d10 <pvPortMalloc+0x188>)
 8007ca4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ca6:	4b1a      	ldr	r3, [pc, #104]	; (8007d10 <pvPortMalloc+0x188>)
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	4b1b      	ldr	r3, [pc, #108]	; (8007d18 <pvPortMalloc+0x190>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d203      	bcs.n	8007cba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007cb2:	4b17      	ldr	r3, [pc, #92]	; (8007d10 <pvPortMalloc+0x188>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a18      	ldr	r2, [pc, #96]	; (8007d18 <pvPortMalloc+0x190>)
 8007cb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	685a      	ldr	r2, [r3, #4]
 8007cbe:	4b13      	ldr	r3, [pc, #76]	; (8007d0c <pvPortMalloc+0x184>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	431a      	orrs	r2, r3
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	2200      	movs	r2, #0
 8007ccc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007cce:	4b13      	ldr	r3, [pc, #76]	; (8007d1c <pvPortMalloc+0x194>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	4a11      	ldr	r2, [pc, #68]	; (8007d1c <pvPortMalloc+0x194>)
 8007cd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007cd8:	f7fe fc3a 	bl	8006550 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	f003 0307 	and.w	r3, r3, #7
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00a      	beq.n	8007cfc <pvPortMalloc+0x174>
	__asm volatile
 8007ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	60fb      	str	r3, [r7, #12]
}
 8007cf8:	bf00      	nop
 8007cfa:	e7fe      	b.n	8007cfa <pvPortMalloc+0x172>
	return pvReturn;
 8007cfc:	69fb      	ldr	r3, [r7, #28]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3728      	adds	r7, #40	; 0x28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20003fc0 	.word	0x20003fc0
 8007d0c:	20003fd4 	.word	0x20003fd4
 8007d10:	20003fc4 	.word	0x20003fc4
 8007d14:	20003fb8 	.word	0x20003fb8
 8007d18:	20003fc8 	.word	0x20003fc8
 8007d1c:	20003fcc 	.word	0x20003fcc

08007d20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d04d      	beq.n	8007dce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d32:	2308      	movs	r3, #8
 8007d34:	425b      	negs	r3, r3
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	4413      	add	r3, r2
 8007d3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	4b24      	ldr	r3, [pc, #144]	; (8007dd8 <vPortFree+0xb8>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4013      	ands	r3, r2
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10a      	bne.n	8007d64 <vPortFree+0x44>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	60fb      	str	r3, [r7, #12]
}
 8007d60:	bf00      	nop
 8007d62:	e7fe      	b.n	8007d62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00a      	beq.n	8007d82 <vPortFree+0x62>
	__asm volatile
 8007d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d70:	f383 8811 	msr	BASEPRI, r3
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	60bb      	str	r3, [r7, #8]
}
 8007d7e:	bf00      	nop
 8007d80:	e7fe      	b.n	8007d80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	685a      	ldr	r2, [r3, #4]
 8007d86:	4b14      	ldr	r3, [pc, #80]	; (8007dd8 <vPortFree+0xb8>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d01e      	beq.n	8007dce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d11a      	bne.n	8007dce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	685a      	ldr	r2, [r3, #4]
 8007d9c:	4b0e      	ldr	r3, [pc, #56]	; (8007dd8 <vPortFree+0xb8>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	43db      	mvns	r3, r3
 8007da2:	401a      	ands	r2, r3
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007da8:	f7fe fbc4 	bl	8006534 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	685a      	ldr	r2, [r3, #4]
 8007db0:	4b0a      	ldr	r3, [pc, #40]	; (8007ddc <vPortFree+0xbc>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4413      	add	r3, r2
 8007db6:	4a09      	ldr	r2, [pc, #36]	; (8007ddc <vPortFree+0xbc>)
 8007db8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007dba:	6938      	ldr	r0, [r7, #16]
 8007dbc:	f000 f874 	bl	8007ea8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007dc0:	4b07      	ldr	r3, [pc, #28]	; (8007de0 <vPortFree+0xc0>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	4a06      	ldr	r2, [pc, #24]	; (8007de0 <vPortFree+0xc0>)
 8007dc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007dca:	f7fe fbc1 	bl	8006550 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007dce:	bf00      	nop
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20003fd4 	.word	0x20003fd4
 8007ddc:	20003fc4 	.word	0x20003fc4
 8007de0:	20003fd0 	.word	0x20003fd0

08007de4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007dea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007dee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007df0:	4b27      	ldr	r3, [pc, #156]	; (8007e90 <prvHeapInit+0xac>)
 8007df2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f003 0307 	and.w	r3, r3, #7
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00c      	beq.n	8007e18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	3307      	adds	r3, #7
 8007e02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f023 0307 	bic.w	r3, r3, #7
 8007e0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e0c:	68ba      	ldr	r2, [r7, #8]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	4a1f      	ldr	r2, [pc, #124]	; (8007e90 <prvHeapInit+0xac>)
 8007e14:	4413      	add	r3, r2
 8007e16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e1c:	4a1d      	ldr	r2, [pc, #116]	; (8007e94 <prvHeapInit+0xb0>)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e22:	4b1c      	ldr	r3, [pc, #112]	; (8007e94 <prvHeapInit+0xb0>)
 8007e24:	2200      	movs	r2, #0
 8007e26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e30:	2208      	movs	r2, #8
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	1a9b      	subs	r3, r3, r2
 8007e36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f023 0307 	bic.w	r3, r3, #7
 8007e3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	4a15      	ldr	r2, [pc, #84]	; (8007e98 <prvHeapInit+0xb4>)
 8007e44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e46:	4b14      	ldr	r3, [pc, #80]	; (8007e98 <prvHeapInit+0xb4>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e4e:	4b12      	ldr	r3, [pc, #72]	; (8007e98 <prvHeapInit+0xb4>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2200      	movs	r2, #0
 8007e54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	1ad2      	subs	r2, r2, r3
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e64:	4b0c      	ldr	r3, [pc, #48]	; (8007e98 <prvHeapInit+0xb4>)
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	4a0a      	ldr	r2, [pc, #40]	; (8007e9c <prvHeapInit+0xb8>)
 8007e72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	4a09      	ldr	r2, [pc, #36]	; (8007ea0 <prvHeapInit+0xbc>)
 8007e7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e7c:	4b09      	ldr	r3, [pc, #36]	; (8007ea4 <prvHeapInit+0xc0>)
 8007e7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e82:	601a      	str	r2, [r3, #0]
}
 8007e84:	bf00      	nop
 8007e86:	3714      	adds	r7, #20
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr
 8007e90:	200003b8 	.word	0x200003b8
 8007e94:	20003fb8 	.word	0x20003fb8
 8007e98:	20003fc0 	.word	0x20003fc0
 8007e9c:	20003fc8 	.word	0x20003fc8
 8007ea0:	20003fc4 	.word	0x20003fc4
 8007ea4:	20003fd4 	.word	0x20003fd4

08007ea8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007eb0:	4b28      	ldr	r3, [pc, #160]	; (8007f54 <prvInsertBlockIntoFreeList+0xac>)
 8007eb2:	60fb      	str	r3, [r7, #12]
 8007eb4:	e002      	b.n	8007ebc <prvInsertBlockIntoFreeList+0x14>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	60fb      	str	r3, [r7, #12]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d8f7      	bhi.n	8007eb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d108      	bne.n	8007eea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	441a      	add	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	441a      	add	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d118      	bne.n	8007f30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	4b15      	ldr	r3, [pc, #84]	; (8007f58 <prvInsertBlockIntoFreeList+0xb0>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d00d      	beq.n	8007f26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	441a      	add	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	601a      	str	r2, [r3, #0]
 8007f24:	e008      	b.n	8007f38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f26:	4b0c      	ldr	r3, [pc, #48]	; (8007f58 <prvInsertBlockIntoFreeList+0xb0>)
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	601a      	str	r2, [r3, #0]
 8007f2e:	e003      	b.n	8007f38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d002      	beq.n	8007f46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f46:	bf00      	nop
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	20003fb8 	.word	0x20003fb8
 8007f58:	20003fc0 	.word	0x20003fc0

08007f5c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7fd fa86 	bl	800547c <USBH_LL_IncTimer>
}
 8007f70:	bf00      	nop
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7fd faca 	bl	8005520 <USBH_LL_Connect>
}
 8007f8c:	bf00      	nop
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fd fadf 	bl	8005566 <USBH_LL_Disconnect>
}
 8007fa8:	bf00      	nop
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	70fb      	strb	r3, [r7, #3]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7fd faff 	bl	80055ca <USBH_LL_NotifyURBChange>
#endif
}
 8007fcc:	bf00      	nop
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fd fa74 	bl	80054d0 <USBH_LL_PortEnabled>
}
 8007fe8:	bf00      	nop
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fd fa80 	bl	8005504 <USBH_LL_PortDisabled>
}
 8008004:	bf00      	nop
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008014:	2300      	movs	r3, #0
 8008016:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008022:	4618      	mov	r0, r3
 8008024:	f7f9 fb81 	bl	800172a <HAL_HCD_Stop>
 8008028:	4603      	mov	r3, r0
 800802a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800802c:	7bfb      	ldrb	r3, [r7, #15]
 800802e:	4618      	mov	r0, r3
 8008030:	f000 f808 	bl	8008044 <USBH_Get_USB_Status>
 8008034:	4603      	mov	r3, r0
 8008036:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008038:	7bbb      	ldrb	r3, [r7, #14]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
	...

08008044 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	4603      	mov	r3, r0
 800804c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008052:	79fb      	ldrb	r3, [r7, #7]
 8008054:	2b03      	cmp	r3, #3
 8008056:	d817      	bhi.n	8008088 <USBH_Get_USB_Status+0x44>
 8008058:	a201      	add	r2, pc, #4	; (adr r2, 8008060 <USBH_Get_USB_Status+0x1c>)
 800805a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805e:	bf00      	nop
 8008060:	08008071 	.word	0x08008071
 8008064:	08008077 	.word	0x08008077
 8008068:	0800807d 	.word	0x0800807d
 800806c:	08008083 	.word	0x08008083
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	73fb      	strb	r3, [r7, #15]
    break;
 8008074:	e00b      	b.n	800808e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008076:	2302      	movs	r3, #2
 8008078:	73fb      	strb	r3, [r7, #15]
    break;
 800807a:	e008      	b.n	800808e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800807c:	2301      	movs	r3, #1
 800807e:	73fb      	strb	r3, [r7, #15]
    break;
 8008080:	e005      	b.n	800808e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008082:	2302      	movs	r3, #2
 8008084:	73fb      	strb	r3, [r7, #15]
    break;
 8008086:	e002      	b.n	800808e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008088:	2302      	movs	r3, #2
 800808a:	73fb      	strb	r3, [r7, #15]
    break;
 800808c:	bf00      	nop
  }
  return usb_status;
 800808e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3714      	adds	r7, #20
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <__malloc_lock>:
 800809c:	4801      	ldr	r0, [pc, #4]	; (80080a4 <__malloc_lock+0x8>)
 800809e:	f000 b88b 	b.w	80081b8 <__retarget_lock_acquire_recursive>
 80080a2:	bf00      	nop
 80080a4:	200044f4 	.word	0x200044f4

080080a8 <__malloc_unlock>:
 80080a8:	4801      	ldr	r0, [pc, #4]	; (80080b0 <__malloc_unlock+0x8>)
 80080aa:	f000 b886 	b.w	80081ba <__retarget_lock_release_recursive>
 80080ae:	bf00      	nop
 80080b0:	200044f4 	.word	0x200044f4

080080b4 <memset>:
 80080b4:	4402      	add	r2, r0
 80080b6:	4603      	mov	r3, r0
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d100      	bne.n	80080be <memset+0xa>
 80080bc:	4770      	bx	lr
 80080be:	f803 1b01 	strb.w	r1, [r3], #1
 80080c2:	e7f9      	b.n	80080b8 <memset+0x4>

080080c4 <_reclaim_reent>:
 80080c4:	4b29      	ldr	r3, [pc, #164]	; (800816c <_reclaim_reent+0xa8>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4283      	cmp	r3, r0
 80080ca:	b570      	push	{r4, r5, r6, lr}
 80080cc:	4604      	mov	r4, r0
 80080ce:	d04b      	beq.n	8008168 <_reclaim_reent+0xa4>
 80080d0:	69c3      	ldr	r3, [r0, #28]
 80080d2:	b143      	cbz	r3, 80080e6 <_reclaim_reent+0x22>
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d144      	bne.n	8008164 <_reclaim_reent+0xa0>
 80080da:	69e3      	ldr	r3, [r4, #28]
 80080dc:	6819      	ldr	r1, [r3, #0]
 80080de:	b111      	cbz	r1, 80080e6 <_reclaim_reent+0x22>
 80080e0:	4620      	mov	r0, r4
 80080e2:	f000 f879 	bl	80081d8 <_free_r>
 80080e6:	6961      	ldr	r1, [r4, #20]
 80080e8:	b111      	cbz	r1, 80080f0 <_reclaim_reent+0x2c>
 80080ea:	4620      	mov	r0, r4
 80080ec:	f000 f874 	bl	80081d8 <_free_r>
 80080f0:	69e1      	ldr	r1, [r4, #28]
 80080f2:	b111      	cbz	r1, 80080fa <_reclaim_reent+0x36>
 80080f4:	4620      	mov	r0, r4
 80080f6:	f000 f86f 	bl	80081d8 <_free_r>
 80080fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80080fc:	b111      	cbz	r1, 8008104 <_reclaim_reent+0x40>
 80080fe:	4620      	mov	r0, r4
 8008100:	f000 f86a 	bl	80081d8 <_free_r>
 8008104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008106:	b111      	cbz	r1, 800810e <_reclaim_reent+0x4a>
 8008108:	4620      	mov	r0, r4
 800810a:	f000 f865 	bl	80081d8 <_free_r>
 800810e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008110:	b111      	cbz	r1, 8008118 <_reclaim_reent+0x54>
 8008112:	4620      	mov	r0, r4
 8008114:	f000 f860 	bl	80081d8 <_free_r>
 8008118:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800811a:	b111      	cbz	r1, 8008122 <_reclaim_reent+0x5e>
 800811c:	4620      	mov	r0, r4
 800811e:	f000 f85b 	bl	80081d8 <_free_r>
 8008122:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008124:	b111      	cbz	r1, 800812c <_reclaim_reent+0x68>
 8008126:	4620      	mov	r0, r4
 8008128:	f000 f856 	bl	80081d8 <_free_r>
 800812c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800812e:	b111      	cbz	r1, 8008136 <_reclaim_reent+0x72>
 8008130:	4620      	mov	r0, r4
 8008132:	f000 f851 	bl	80081d8 <_free_r>
 8008136:	6a23      	ldr	r3, [r4, #32]
 8008138:	b1b3      	cbz	r3, 8008168 <_reclaim_reent+0xa4>
 800813a:	4620      	mov	r0, r4
 800813c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008140:	4718      	bx	r3
 8008142:	5949      	ldr	r1, [r1, r5]
 8008144:	b941      	cbnz	r1, 8008158 <_reclaim_reent+0x94>
 8008146:	3504      	adds	r5, #4
 8008148:	69e3      	ldr	r3, [r4, #28]
 800814a:	2d80      	cmp	r5, #128	; 0x80
 800814c:	68d9      	ldr	r1, [r3, #12]
 800814e:	d1f8      	bne.n	8008142 <_reclaim_reent+0x7e>
 8008150:	4620      	mov	r0, r4
 8008152:	f000 f841 	bl	80081d8 <_free_r>
 8008156:	e7c0      	b.n	80080da <_reclaim_reent+0x16>
 8008158:	680e      	ldr	r6, [r1, #0]
 800815a:	4620      	mov	r0, r4
 800815c:	f000 f83c 	bl	80081d8 <_free_r>
 8008160:	4631      	mov	r1, r6
 8008162:	e7ef      	b.n	8008144 <_reclaim_reent+0x80>
 8008164:	2500      	movs	r5, #0
 8008166:	e7ef      	b.n	8008148 <_reclaim_reent+0x84>
 8008168:	bd70      	pop	{r4, r5, r6, pc}
 800816a:	bf00      	nop
 800816c:	2000005c 	.word	0x2000005c

08008170 <__libc_init_array>:
 8008170:	b570      	push	{r4, r5, r6, lr}
 8008172:	4d0d      	ldr	r5, [pc, #52]	; (80081a8 <__libc_init_array+0x38>)
 8008174:	4c0d      	ldr	r4, [pc, #52]	; (80081ac <__libc_init_array+0x3c>)
 8008176:	1b64      	subs	r4, r4, r5
 8008178:	10a4      	asrs	r4, r4, #2
 800817a:	2600      	movs	r6, #0
 800817c:	42a6      	cmp	r6, r4
 800817e:	d109      	bne.n	8008194 <__libc_init_array+0x24>
 8008180:	4d0b      	ldr	r5, [pc, #44]	; (80081b0 <__libc_init_array+0x40>)
 8008182:	4c0c      	ldr	r4, [pc, #48]	; (80081b4 <__libc_init_array+0x44>)
 8008184:	f000 f874 	bl	8008270 <_init>
 8008188:	1b64      	subs	r4, r4, r5
 800818a:	10a4      	asrs	r4, r4, #2
 800818c:	2600      	movs	r6, #0
 800818e:	42a6      	cmp	r6, r4
 8008190:	d105      	bne.n	800819e <__libc_init_array+0x2e>
 8008192:	bd70      	pop	{r4, r5, r6, pc}
 8008194:	f855 3b04 	ldr.w	r3, [r5], #4
 8008198:	4798      	blx	r3
 800819a:	3601      	adds	r6, #1
 800819c:	e7ee      	b.n	800817c <__libc_init_array+0xc>
 800819e:	f855 3b04 	ldr.w	r3, [r5], #4
 80081a2:	4798      	blx	r3
 80081a4:	3601      	adds	r6, #1
 80081a6:	e7f2      	b.n	800818e <__libc_init_array+0x1e>
 80081a8:	080082d4 	.word	0x080082d4
 80081ac:	080082d4 	.word	0x080082d4
 80081b0:	080082d4 	.word	0x080082d4
 80081b4:	080082d8 	.word	0x080082d8

080081b8 <__retarget_lock_acquire_recursive>:
 80081b8:	4770      	bx	lr

080081ba <__retarget_lock_release_recursive>:
 80081ba:	4770      	bx	lr

080081bc <memcpy>:
 80081bc:	440a      	add	r2, r1
 80081be:	4291      	cmp	r1, r2
 80081c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80081c4:	d100      	bne.n	80081c8 <memcpy+0xc>
 80081c6:	4770      	bx	lr
 80081c8:	b510      	push	{r4, lr}
 80081ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081d2:	4291      	cmp	r1, r2
 80081d4:	d1f9      	bne.n	80081ca <memcpy+0xe>
 80081d6:	bd10      	pop	{r4, pc}

080081d8 <_free_r>:
 80081d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081da:	2900      	cmp	r1, #0
 80081dc:	d044      	beq.n	8008268 <_free_r+0x90>
 80081de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081e2:	9001      	str	r0, [sp, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f1a1 0404 	sub.w	r4, r1, #4
 80081ea:	bfb8      	it	lt
 80081ec:	18e4      	addlt	r4, r4, r3
 80081ee:	f7ff ff55 	bl	800809c <__malloc_lock>
 80081f2:	4a1e      	ldr	r2, [pc, #120]	; (800826c <_free_r+0x94>)
 80081f4:	9801      	ldr	r0, [sp, #4]
 80081f6:	6813      	ldr	r3, [r2, #0]
 80081f8:	b933      	cbnz	r3, 8008208 <_free_r+0x30>
 80081fa:	6063      	str	r3, [r4, #4]
 80081fc:	6014      	str	r4, [r2, #0]
 80081fe:	b003      	add	sp, #12
 8008200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008204:	f7ff bf50 	b.w	80080a8 <__malloc_unlock>
 8008208:	42a3      	cmp	r3, r4
 800820a:	d908      	bls.n	800821e <_free_r+0x46>
 800820c:	6825      	ldr	r5, [r4, #0]
 800820e:	1961      	adds	r1, r4, r5
 8008210:	428b      	cmp	r3, r1
 8008212:	bf01      	itttt	eq
 8008214:	6819      	ldreq	r1, [r3, #0]
 8008216:	685b      	ldreq	r3, [r3, #4]
 8008218:	1949      	addeq	r1, r1, r5
 800821a:	6021      	streq	r1, [r4, #0]
 800821c:	e7ed      	b.n	80081fa <_free_r+0x22>
 800821e:	461a      	mov	r2, r3
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	b10b      	cbz	r3, 8008228 <_free_r+0x50>
 8008224:	42a3      	cmp	r3, r4
 8008226:	d9fa      	bls.n	800821e <_free_r+0x46>
 8008228:	6811      	ldr	r1, [r2, #0]
 800822a:	1855      	adds	r5, r2, r1
 800822c:	42a5      	cmp	r5, r4
 800822e:	d10b      	bne.n	8008248 <_free_r+0x70>
 8008230:	6824      	ldr	r4, [r4, #0]
 8008232:	4421      	add	r1, r4
 8008234:	1854      	adds	r4, r2, r1
 8008236:	42a3      	cmp	r3, r4
 8008238:	6011      	str	r1, [r2, #0]
 800823a:	d1e0      	bne.n	80081fe <_free_r+0x26>
 800823c:	681c      	ldr	r4, [r3, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	6053      	str	r3, [r2, #4]
 8008242:	440c      	add	r4, r1
 8008244:	6014      	str	r4, [r2, #0]
 8008246:	e7da      	b.n	80081fe <_free_r+0x26>
 8008248:	d902      	bls.n	8008250 <_free_r+0x78>
 800824a:	230c      	movs	r3, #12
 800824c:	6003      	str	r3, [r0, #0]
 800824e:	e7d6      	b.n	80081fe <_free_r+0x26>
 8008250:	6825      	ldr	r5, [r4, #0]
 8008252:	1961      	adds	r1, r4, r5
 8008254:	428b      	cmp	r3, r1
 8008256:	bf04      	itt	eq
 8008258:	6819      	ldreq	r1, [r3, #0]
 800825a:	685b      	ldreq	r3, [r3, #4]
 800825c:	6063      	str	r3, [r4, #4]
 800825e:	bf04      	itt	eq
 8008260:	1949      	addeq	r1, r1, r5
 8008262:	6021      	streq	r1, [r4, #0]
 8008264:	6054      	str	r4, [r2, #4]
 8008266:	e7ca      	b.n	80081fe <_free_r+0x26>
 8008268:	b003      	add	sp, #12
 800826a:	bd30      	pop	{r4, r5, pc}
 800826c:	200043b8 	.word	0x200043b8

08008270 <_init>:
 8008270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008272:	bf00      	nop
 8008274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008276:	bc08      	pop	{r3}
 8008278:	469e      	mov	lr, r3
 800827a:	4770      	bx	lr

0800827c <_fini>:
 800827c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827e:	bf00      	nop
 8008280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008282:	bc08      	pop	{r3}
 8008284:	469e      	mov	lr, r3
 8008286:	4770      	bx	lr
