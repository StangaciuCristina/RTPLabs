
RTPLaboratories.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c61c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800c7ac  0800c7ac  0001c7ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c860  0800c860  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800c860  0800c860  0001c860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c868  0800c868  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c868  0800c868  0001c868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c86c  0800c86c  0001c86c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800c870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          0000515c  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200051dc  200051dc  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000260b9  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005a01  00000000  00000000  000461ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001dd0  00000000  00000000  0004bbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000016f5  00000000  00000000  0004d980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027502  00000000  00000000  0004f075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002717b  00000000  00000000  00076577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ddad0  00000000  00000000  0009d6f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008080  00000000  00000000  0017b1c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00183244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c794 	.word	0x0800c794

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800c794 	.word	0x0800c794

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <vApplicationGetTimerTaskMemory>:
 * used by the RTOS daemon/time task.
 */
void vApplicationGetTimerTaskMemory( StaticTask_t ** ppxTimerTaskTCBBuffer,
                                     StackType_t ** ppxTimerTaskStackBuffer,
                                     uint32_t * pulTimerTaskStackSize )
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
    static StaticTask_t xTimerTaskTCB;
    static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle
     * task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80004dc:	601a      	str	r2, [r3, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	4a06      	ldr	r2, [pc, #24]	; (80004fc <vApplicationGetTimerTaskMemory+0x30>)
 80004e2:	601a      	str	r2, [r3, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
     * Note that, as the array is necessarily of type StackType_t,
     * configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004ea:	601a      	str	r2, [r3, #0]
}
 80004ec:	bf00      	nop
 80004ee:	3714      	adds	r7, #20
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	200000a4 	.word	0x200000a4
 80004fc:	20000144 	.word	0x20000144

08000500 <vIntegerGenerator>:
/*-----------------------------------------------------------*/

static void vIntegerGenerator( void *pvParameters )
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
TickType_t xLastExecutionTime;
const TickType_t xDelay200ms = pdMS_TO_TICKS( 200UL ), xDontBlock = 0;
 8000508:	23c8      	movs	r3, #200	; 0xc8
 800050a:	61bb      	str	r3, [r7, #24]
 800050c:	2300      	movs	r3, #0
 800050e:	617b      	str	r3, [r7, #20]
uint32_t ulValueToSend = 0;
 8000510:	2300      	movs	r3, #0
 8000512:	60fb      	str	r3, [r7, #12]
BaseType_t i;

	/* Initialize the variable used by the call to vTaskDelayUntil(). */
	xLastExecutionTime = xTaskGetTickCount();
 8000514:	f00a f8be 	bl	800a694 <xTaskGetTickCount>
 8000518:	4603      	mov	r3, r0
 800051a:	613b      	str	r3, [r7, #16]

	for( ;; )
	{
		/* This is a periodic task.  Block until it is time to run again.
		The task will execute every 200ms. */
		vTaskDelayUntil( &xLastExecutionTime, xDelay200ms );
 800051c:	f107 0310 	add.w	r3, r7, #16
 8000520:	69b9      	ldr	r1, [r7, #24]
 8000522:	4618      	mov	r0, r3
 8000524:	f009 feea 	bl	800a2fc <vTaskDelayUntil>
		/* Send five numbers to the queue, each value one higher than the
		previous value.  The numbers are read from the queue by the interrupt
		service routine.  The interrupt	service routine always empties the
		queue, so this task is guaranteed to be able to write all five values
		without needing to specify a block time. */
		for( i = 0; i < 5; i++ )
 8000528:	2300      	movs	r3, #0
 800052a:	61fb      	str	r3, [r7, #28]
 800052c:	e00d      	b.n	800054a <vIntegerGenerator+0x4a>
		{
			xQueueSendToBack( xIntegerQueue, &ulValueToSend, xDontBlock );
 800052e:	4b0b      	ldr	r3, [pc, #44]	; (800055c <vIntegerGenerator+0x5c>)
 8000530:	6818      	ldr	r0, [r3, #0]
 8000532:	f107 010c 	add.w	r1, r7, #12
 8000536:	2300      	movs	r3, #0
 8000538:	697a      	ldr	r2, [r7, #20]
 800053a:	f009 f8cd 	bl	80096d8 <xQueueGenericSend>
			ulValueToSend++;
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	3301      	adds	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
		for( i = 0; i < 5; i++ )
 8000544:	69fb      	ldr	r3, [r7, #28]
 8000546:	3301      	adds	r3, #1
 8000548:	61fb      	str	r3, [r7, #28]
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	2b04      	cmp	r3, #4
 800054e:	ddee      	ble.n	800052e <vIntegerGenerator+0x2e>
		}

		HAL_GPIO_TogglePin(GPIOD, GREEN_LED);
 8000550:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000554:	4802      	ldr	r0, [pc, #8]	; (8000560 <vIntegerGenerator+0x60>)
 8000556:	f001 f8a0 	bl	800169a <HAL_GPIO_TogglePin>
		vTaskDelayUntil( &xLastExecutionTime, xDelay200ms );
 800055a:	e7df      	b.n	800051c <vIntegerGenerator+0x1c>
 800055c:	2000009c 	.word	0x2000009c
 8000560:	40020c00 	.word	0x40020c00

08000564 <Blinky>:
	}
}
/*-----------------------------------------------------------*/

static void Blinky( void *pvParameters )
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
int *delay;
TickType_t xLastExecutionTime;
xLastExecutionTime = xTaskGetTickCount();
 800056c:	f00a f892 	bl	800a694 <xTaskGetTickCount>
 8000570:	4603      	mov	r3, r0
 8000572:	60bb      	str	r3, [r7, #8]
	for( ;; )
	{
		/* Block on the queue to wait for data to arrive. */
		xQueueReceive( xStringQueue, &delay, portMAX_DELAY );
 8000574:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <Blinky+0x50>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f107 010c 	add.w	r1, r7, #12
 800057c:	f04f 32ff 	mov.w	r2, #4294967295
 8000580:	4618      	mov	r0, r3
 8000582:	f009 fa43 	bl	8009a0c <xQueueReceive>

		HAL_GPIO_TogglePin(GPIOD, BLUE_LED);
 8000586:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800058a:	480b      	ldr	r0, [pc, #44]	; (80005b8 <Blinky+0x54>)
 800058c:	f001 f885 	bl	800169a <HAL_GPIO_TogglePin>
		vTaskDelayUntil( &xLastExecutionTime,pdMS_TO_TICKS(delay));
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	461a      	mov	r2, r3
 8000594:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000598:	fb02 f303 	mul.w	r3, r2, r3
 800059c:	4a07      	ldr	r2, [pc, #28]	; (80005bc <Blinky+0x58>)
 800059e:	fba2 2303 	umull	r2, r3, r2, r3
 80005a2:	099a      	lsrs	r2, r3, #6
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	4611      	mov	r1, r2
 80005aa:	4618      	mov	r0, r3
 80005ac:	f009 fea6 	bl	800a2fc <vTaskDelayUntil>
		xQueueReceive( xStringQueue, &delay, portMAX_DELAY );
 80005b0:	e7e0      	b.n	8000574 <Blinky+0x10>
 80005b2:	bf00      	nop
 80005b4:	200000a0 	.word	0x200000a0
 80005b8:	40020c00 	.word	0x40020c00
 80005bc:	10624dd3 	.word	0x10624dd3

080005c0 <EXTI0_IRQHandler>:
	}
}

void EXTI0_IRQHandler(void)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b087      	sub	sp, #28
 80005c4:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken;
	uint32_t ulReceivedNumber;
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  xHigherPriorityTaskWoken = pdFALSE;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
  uint32_t tab[]={10,100,1000,1500};
 80005ca:	4b16      	ldr	r3, [pc, #88]	; (8000624 <EXTI0_IRQHandler+0x64>)
 80005cc:	463c      	mov	r4, r7
 80005ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  /* Read from the queue until the queue is empty. */
  while( xQueueReceiveFromISR( xIntegerQueue, &ulReceivedNumber, &xHigherPriorityTaskWoken ) != errQUEUE_EMPTY )
 80005d4:	e00e      	b.n	80005f4 <EXTI0_IRQHandler+0x34>
  {
  	/* Truncate the received value to the last two bits (values 0 to 3
  	inc.), then use the truncated value as an index into the pcStrings[]
  	array to select a string (char *) to send on the other queue. */
  	ulReceivedNumber &= 0x03;
 80005d6:	693b      	ldr	r3, [r7, #16]
 80005d8:	f003 0303 	and.w	r3, r3, #3
 80005dc:	613b      	str	r3, [r7, #16]
  	xQueueSendToBackFromISR( xStringQueue, &tab[ ulReceivedNumber ], &xHigherPriorityTaskWoken );
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <EXTI0_IRQHandler+0x68>)
 80005e0:	6818      	ldr	r0, [r3, #0]
 80005e2:	693b      	ldr	r3, [r7, #16]
 80005e4:	463a      	mov	r2, r7
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	18d1      	adds	r1, r2, r3
 80005ea:	f107 0214 	add.w	r2, r7, #20
 80005ee:	2300      	movs	r3, #0
 80005f0:	f009 f970 	bl	80098d4 <xQueueGenericSendFromISR>
  while( xQueueReceiveFromISR( xIntegerQueue, &ulReceivedNumber, &xHigherPriorityTaskWoken ) != errQUEUE_EMPTY )
 80005f4:	4b0d      	ldr	r3, [pc, #52]	; (800062c <EXTI0_IRQHandler+0x6c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f107 0214 	add.w	r2, r7, #20
 80005fc:	f107 0110 	add.w	r1, r7, #16
 8000600:	4618      	mov	r0, r3
 8000602:	f009 fae3 	bl	8009bcc <xQueueReceiveFromISR>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d1e4      	bne.n	80005d6 <EXTI0_IRQHandler+0x16>
  }


  HAL_GPIO_TogglePin(GPIOD, RED_LED);
 800060c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000610:	4807      	ldr	r0, [pc, #28]	; (8000630 <EXTI0_IRQHandler+0x70>)
 8000612:	f001 f842 	bl	800169a <HAL_GPIO_TogglePin>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000616:	2001      	movs	r0, #1
 8000618:	f001 f85a 	bl	80016d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	371c      	adds	r7, #28
 8000620:	46bd      	mov	sp, r7
 8000622:	bd90      	pop	{r4, r7, pc}
 8000624:	0800c7ac 	.word	0x0800c7ac
 8000628:	200000a0 	.word	0x200000a0
 800062c:	2000009c 	.word	0x2000009c
 8000630:	40020c00 	.word	0x40020c00

08000634 <application19>:




void application19(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af02      	add	r7, sp, #8
	/* Before a queue can be used it must first be created.  Create both queues
	used by this example.  One queue can hold variables of type uint32_t,
	the other queue can hold variables of type char*.  Both queues can hold a
	maximum of 10 items.  A real application should check the return values to
	ensure the queues have been successfully created. */
	xIntegerQueue = xQueueCreate( 10, sizeof( uint32_t ) );
 800063a:	2200      	movs	r2, #0
 800063c:	2104      	movs	r1, #4
 800063e:	200a      	movs	r0, #10
 8000640:	f008 fff0 	bl	8009624 <xQueueGenericCreate>
 8000644:	4603      	mov	r3, r0
 8000646:	4a11      	ldr	r2, [pc, #68]	; (800068c <application19+0x58>)
 8000648:	6013      	str	r3, [r2, #0]
	xStringQueue = xQueueCreate( 10, sizeof( uint32_t ) );
 800064a:	2200      	movs	r2, #0
 800064c:	2104      	movs	r1, #4
 800064e:	200a      	movs	r0, #10
 8000650:	f008 ffe8 	bl	8009624 <xQueueGenericCreate>
 8000654:	4603      	mov	r3, r0
 8000656:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <application19+0x5c>)
 8000658:	6013      	str	r3, [r2, #0]

	/* Create the task that uses a queue to pass integers to the interrupt
	service	routine.  The task is created at priority 1. */
	xTaskCreate( vIntegerGenerator, "IntGen", 1000, NULL, 1, NULL );
 800065a:	2300      	movs	r3, #0
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	2301      	movs	r3, #1
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2300      	movs	r3, #0
 8000664:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000668:	490a      	ldr	r1, [pc, #40]	; (8000694 <application19+0x60>)
 800066a:	480b      	ldr	r0, [pc, #44]	; (8000698 <application19+0x64>)
 800066c:	f009 fcf9 	bl	800a062 <xTaskCreate>

	/* Create the task that prints out the strings sent to it from the interrupt
	service routine.  The task is created at the higher priority of 2. */
	xTaskCreate( Blinky, "String", 1000, NULL, 2, NULL );
 8000670:	2300      	movs	r3, #0
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	2302      	movs	r3, #2
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	2300      	movs	r3, #0
 800067a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800067e:	4907      	ldr	r1, [pc, #28]	; (800069c <application19+0x68>)
 8000680:	4807      	ldr	r0, [pc, #28]	; (80006a0 <application19+0x6c>)
 8000682:	f009 fcee 	bl	800a062 <xTaskCreate>

}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	2000009c 	.word	0x2000009c
 8000690:	200000a0 	.word	0x200000a0
 8000694:	0800c7bc 	.word	0x0800c7bc
 8000698:	08000501 	.word	0x08000501
 800069c:	0800c7c4 	.word	0x0800c7c4
 80006a0:	08000565 	.word	0x08000565

080006a4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4a07      	ldr	r2, [pc, #28]	; (80006d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80006b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	4a06      	ldr	r2, [pc, #24]	; (80006d4 <vApplicationGetIdleTaskMemory+0x30>)
 80006ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2280      	movs	r2, #128	; 0x80
 80006c0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006c2:	bf00      	nop
 80006c4:	3714      	adds	r7, #20
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	20000544 	.word	0x20000544
 80006d4:	200005e4 	.word	0x200005e4

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b5b0      	push	{r4, r5, r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006de:	f000 fcdf 	bl	80010a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e2:	f000 f825 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e6:	f000 f945 	bl	8000974 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006ea:	f000 f88b 	bl	8000804 <MX_I2C1_Init>
  MX_I2S3_Init();
 80006ee:	f000 f8b7 	bl	8000860 <MX_I2S3_Init>
  MX_SPI1_Init();
 80006f2:	f000 f8e5 	bl	80008c0 <MX_SPI1_Init>
  MX_TIM11_Init();
 80006f6:	f000 f919 	bl	800092c <MX_TIM11_Init>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <main+0x50>)
 80006fc:	1d3c      	adds	r4, r7, #4
 80006fe:	461d      	mov	r5, r3
 8000700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000704:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000708:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f008 fcb6 	bl	8009082 <osThreadCreate>
 8000716:	4603      	mov	r3, r0
 8000718:	4a04      	ldr	r2, [pc, #16]	; (800072c <main+0x54>)
 800071a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	application19();
 800071c:	f7ff ff8a 	bl	8000634 <application19>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000720:	f008 fca8 	bl	8009074 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000724:	e7fe      	b.n	8000724 <main+0x4c>
 8000726:	bf00      	nop
 8000728:	0800c7d8 	.word	0x0800c7d8
 800072c:	20000920 	.word	0x20000920

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	; 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	2230      	movs	r2, #48	; 0x30
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f00b ff34 	bl	800c5ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	4b28      	ldr	r3, [pc, #160]	; (80007fc <SystemClock_Config+0xcc>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	4a27      	ldr	r2, [pc, #156]	; (80007fc <SystemClock_Config+0xcc>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	; 0x40
 8000764:	4b25      	ldr	r3, [pc, #148]	; (80007fc <SystemClock_Config+0xcc>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	4b22      	ldr	r3, [pc, #136]	; (8000800 <SystemClock_Config+0xd0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a21      	ldr	r2, [pc, #132]	; (8000800 <SystemClock_Config+0xd0>)
 800077a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <SystemClock_Config+0xd0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800078c:	2301      	movs	r3, #1
 800078e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000790:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800079e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007a0:	2308      	movs	r3, #8
 80007a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007ae:	2307      	movs	r3, #7
 80007b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b2:	f107 0320 	add.w	r3, r7, #32
 80007b6:	4618      	mov	r0, r3
 80007b8:	f003 feac 	bl	8004514 <HAL_RCC_OscConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007c2:	f000 f9f9 	bl	8000bb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c6:	230f      	movs	r3, #15
 80007c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ca:	2302      	movs	r3, #2
 80007cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	2105      	movs	r1, #5
 80007e4:	4618      	mov	r0, r3
 80007e6:	f004 f90d 	bl	8004a04 <HAL_RCC_ClockConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007f0:	f000 f9e2 	bl	8000bb8 <Error_Handler>
  }
}
 80007f4:	bf00      	nop
 80007f6:	3750      	adds	r7, #80	; 0x50
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40023800 	.word	0x40023800
 8000800:	40007000 	.word	0x40007000

08000804 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_I2C1_Init+0x50>)
 800080a:	4a13      	ldr	r2, [pc, #76]	; (8000858 <MX_I2C1_Init+0x54>)
 800080c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_I2C1_Init+0x50>)
 8000810:	4a12      	ldr	r2, [pc, #72]	; (800085c <MX_I2C1_Init+0x58>)
 8000812:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_I2C1_Init+0x50>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_I2C1_Init+0x50>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_I2C1_Init+0x50>)
 8000822:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000826:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <MX_I2C1_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_I2C1_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <MX_I2C1_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_I2C1_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_I2C1_Init+0x50>)
 8000842:	f003 f883 	bl	800394c <HAL_I2C_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800084c:	f000 f9b4 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	200007e4 	.word	0x200007e4
 8000858:	40005400 	.word	0x40005400
 800085c:	000186a0 	.word	0x000186a0

08000860 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000864:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_I2S3_Init+0x54>)
 8000866:	4a14      	ldr	r2, [pc, #80]	; (80008b8 <MX_I2S3_Init+0x58>)
 8000868:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_I2S3_Init+0x54>)
 800086c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000870:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <MX_I2S3_Init+0x54>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000878:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_I2S3_Init+0x54>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <MX_I2S3_Init+0x54>)
 8000880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000884:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_I2S3_Init+0x54>)
 8000888:	4a0c      	ldr	r2, [pc, #48]	; (80008bc <MX_I2S3_Init+0x5c>)
 800088a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_I2S3_Init+0x54>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_I2S3_Init+0x54>)
 8000894:	2200      	movs	r2, #0
 8000896:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_I2S3_Init+0x54>)
 800089a:	2200      	movs	r2, #0
 800089c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_I2S3_Init+0x54>)
 80008a0:	f003 f998 	bl	8003bd4 <HAL_I2S_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008aa:	f000 f985 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000838 	.word	0x20000838
 80008b8:	40003c00 	.word	0x40003c00
 80008bc:	00017700 	.word	0x00017700

080008c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_SPI1_Init+0x64>)
 80008c6:	4a18      	ldr	r2, [pc, #96]	; (8000928 <MX_SPI1_Init+0x68>)
 80008c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <MX_SPI1_Init+0x64>)
 80008cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_SPI1_Init+0x64>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_SPI1_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_SPI1_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_SPI1_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_SPI1_Init+0x64>)
 80008ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_SPI1_Init+0x64>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <MX_SPI1_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_SPI1_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <MX_SPI1_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_SPI1_Init+0x64>)
 800090c:	220a      	movs	r2, #10
 800090e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_SPI1_Init+0x64>)
 8000912:	f004 fc0b 	bl	800512c <HAL_SPI_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800091c:	f000 f94c 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000880 	.word	0x20000880
 8000928:	40013000 	.word	0x40013000

0800092c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000930:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_TIM11_Init+0x40>)
 8000932:	4a0f      	ldr	r2, [pc, #60]	; (8000970 <MX_TIM11_Init+0x44>)
 8000934:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8000936:	4b0d      	ldr	r3, [pc, #52]	; (800096c <MX_TIM11_Init+0x40>)
 8000938:	2200      	movs	r2, #0
 800093a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093c:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_TIM11_Init+0x40>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <MX_TIM11_Init+0x40>)
 8000944:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000948:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_TIM11_Init+0x40>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_TIM11_Init+0x40>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_TIM11_Init+0x40>)
 8000958:	f004 fc71 	bl	800523e <HAL_TIM_Base_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000962:	f000 f929 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200008d8 	.word	0x200008d8
 8000970:	40014800 	.word	0x40014800

08000974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08c      	sub	sp, #48	; 0x30
 8000978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	61bb      	str	r3, [r7, #24]
 800098e:	4b76      	ldr	r3, [pc, #472]	; (8000b68 <MX_GPIO_Init+0x1f4>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a75      	ldr	r2, [pc, #468]	; (8000b68 <MX_GPIO_Init+0x1f4>)
 8000994:	f043 0310 	orr.w	r3, r3, #16
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b73      	ldr	r3, [pc, #460]	; (8000b68 <MX_GPIO_Init+0x1f4>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0310 	and.w	r3, r3, #16
 80009a2:	61bb      	str	r3, [r7, #24]
 80009a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	4b6f      	ldr	r3, [pc, #444]	; (8000b68 <MX_GPIO_Init+0x1f4>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a6e      	ldr	r2, [pc, #440]	; (8000b68 <MX_GPIO_Init+0x1f4>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b6c      	ldr	r3, [pc, #432]	; (8000b68 <MX_GPIO_Init+0x1f4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b68      	ldr	r3, [pc, #416]	; (8000b68 <MX_GPIO_Init+0x1f4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a67      	ldr	r2, [pc, #412]	; (8000b68 <MX_GPIO_Init+0x1f4>)
 80009cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b65      	ldr	r3, [pc, #404]	; (8000b68 <MX_GPIO_Init+0x1f4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b61      	ldr	r3, [pc, #388]	; (8000b68 <MX_GPIO_Init+0x1f4>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a60      	ldr	r2, [pc, #384]	; (8000b68 <MX_GPIO_Init+0x1f4>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b5e      	ldr	r3, [pc, #376]	; (8000b68 <MX_GPIO_Init+0x1f4>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	4b5a      	ldr	r3, [pc, #360]	; (8000b68 <MX_GPIO_Init+0x1f4>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a59      	ldr	r2, [pc, #356]	; (8000b68 <MX_GPIO_Init+0x1f4>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b57      	ldr	r3, [pc, #348]	; (8000b68 <MX_GPIO_Init+0x1f4>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b53      	ldr	r3, [pc, #332]	; (8000b68 <MX_GPIO_Init+0x1f4>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a52      	ldr	r2, [pc, #328]	; (8000b68 <MX_GPIO_Init+0x1f4>)
 8000a20:	f043 0308 	orr.w	r3, r3, #8
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b50      	ldr	r3, [pc, #320]	; (8000b68 <MX_GPIO_Init+0x1f4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0308 	and.w	r3, r3, #8
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2108      	movs	r1, #8
 8000a36:	484d      	ldr	r0, [pc, #308]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 8000a38:	f000 fe16 	bl	8001668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2101      	movs	r1, #1
 8000a40:	484b      	ldr	r0, [pc, #300]	; (8000b70 <MX_GPIO_Init+0x1fc>)
 8000a42:	f000 fe11 	bl	8001668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a46:	2200      	movs	r2, #0
 8000a48:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a4c:	4849      	ldr	r0, [pc, #292]	; (8000b74 <MX_GPIO_Init+0x200>)
 8000a4e:	f000 fe0b 	bl	8001668 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a52:	2308      	movs	r3, #8
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	4840      	ldr	r0, [pc, #256]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 8000a6a:	f000 fc61 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	483a      	ldr	r0, [pc, #232]	; (8000b70 <MX_GPIO_Init+0x1fc>)
 8000a86:	f000 fc53 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a8a:	2308      	movs	r3, #8
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a9a:	2305      	movs	r3, #5
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4832      	ldr	r0, [pc, #200]	; (8000b70 <MX_GPIO_Init+0x1fc>)
 8000aa6:	f000 fc43 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	482e      	ldr	r0, [pc, #184]	; (8000b78 <MX_GPIO_Init+0x204>)
 8000ac0:	f000 fc36 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4829      	ldr	r0, [pc, #164]	; (8000b7c <MX_GPIO_Init+0x208>)
 8000ad8:	f000 fc2a 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aee:	2305      	movs	r3, #5
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	4820      	ldr	r0, [pc, #128]	; (8000b7c <MX_GPIO_Init+0x208>)
 8000afa:	f000 fc19 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000afe:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b02:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b10:	f107 031c 	add.w	r3, r7, #28
 8000b14:	4619      	mov	r1, r3
 8000b16:	4817      	ldr	r0, [pc, #92]	; (8000b74 <MX_GPIO_Init+0x200>)
 8000b18:	f000 fc0a 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b1c:	2320      	movs	r3, #32
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4811      	ldr	r0, [pc, #68]	; (8000b74 <MX_GPIO_Init+0x200>)
 8000b30:	f000 fbfe 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b34:	2302      	movs	r3, #2
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b38:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	4619      	mov	r1, r3
 8000b48:	4808      	ldr	r0, [pc, #32]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 8000b4a:	f000 fbf1 	bl	8001330 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2105      	movs	r1, #5
 8000b52:	2006      	movs	r0, #6
 8000b54:	f000 fbc2 	bl	80012dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b58:	2006      	movs	r0, #6
 8000b5a:	f000 fbdb 	bl	8001314 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b5e:	bf00      	nop
 8000b60:	3730      	adds	r7, #48	; 0x30
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40020800 	.word	0x40020800
 8000b74:	40020c00 	.word	0x40020c00
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	40020400 	.word	0x40020400

08000b80 <StartDefaultTask>:
* @param  argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000b88:	f00b f950 	bl	800be2c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f008 fac4 	bl	800911a <osDelay>
 8000b92:	e7fb      	b.n	8000b8c <StartDefaultTask+0xc>

08000b94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d101      	bne.n	8000baa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ba6:	f000 fa9d 	bl	80010e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40010000 	.word	0x40010000

08000bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bbc:	b672      	cpsid	i
}
 8000bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <Error_Handler+0x8>
	...

08000bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_MspInit+0x54>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	4a11      	ldr	r2, [pc, #68]	; (8000c18 <HAL_MspInit+0x54>)
 8000bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <HAL_MspInit+0x54>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <HAL_MspInit+0x54>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <HAL_MspInit+0x54>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <HAL_MspInit+0x54>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	210f      	movs	r1, #15
 8000c06:	f06f 0001 	mvn.w	r0, #1
 8000c0a:	f000 fb67 	bl	80012dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800

08000c1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a19      	ldr	r2, [pc, #100]	; (8000ca0 <HAL_I2C_MspInit+0x84>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d12c      	bne.n	8000c98 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <HAL_I2C_MspInit+0x88>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a17      	ldr	r2, [pc, #92]	; (8000ca4 <HAL_I2C_MspInit+0x88>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <HAL_I2C_MspInit+0x88>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c5a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c60:	2312      	movs	r3, #18
 8000c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <HAL_I2C_MspInit+0x8c>)
 8000c78:	f000 fb5a 	bl	8001330 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <HAL_I2C_MspInit+0x88>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <HAL_I2C_MspInit+0x88>)
 8000c86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <HAL_I2C_MspInit+0x88>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c98:	bf00      	nop
 8000c9a:	3728      	adds	r7, #40	; 0x28
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40005400 	.word	0x40005400
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020400 	.word	0x40020400

08000cac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08e      	sub	sp, #56	; 0x38
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a31      	ldr	r2, [pc, #196]	; (8000d9c <HAL_I2S_MspInit+0xf0>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d15a      	bne.n	8000d92 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ce0:	23c0      	movs	r3, #192	; 0xc0
 8000ce2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4618      	mov	r0, r3
 8000cee:	f004 f8db 	bl	8004ea8 <HAL_RCCEx_PeriphCLKConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000cf8:	f7ff ff5e 	bl	8000bb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <HAL_I2S_MspInit+0xf4>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	4a26      	ldr	r2, [pc, #152]	; (8000da0 <HAL_I2S_MspInit+0xf4>)
 8000d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0c:	4b24      	ldr	r3, [pc, #144]	; (8000da0 <HAL_I2S_MspInit+0xf4>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <HAL_I2S_MspInit+0xf4>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	4a1f      	ldr	r2, [pc, #124]	; (8000da0 <HAL_I2S_MspInit+0xf4>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	6313      	str	r3, [r2, #48]	; 0x30
 8000d28:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <HAL_I2S_MspInit+0xf4>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d34:	2300      	movs	r3, #0
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <HAL_I2S_MspInit+0xf4>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3c:	4a18      	ldr	r2, [pc, #96]	; (8000da0 <HAL_I2S_MspInit+0xf4>)
 8000d3e:	f043 0304 	orr.w	r3, r3, #4
 8000d42:	6313      	str	r3, [r2, #48]	; 0x30
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <HAL_I2S_MspInit+0xf4>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	f003 0304 	and.w	r3, r3, #4
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d50:	2310      	movs	r3, #16
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d60:	2306      	movs	r3, #6
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	4619      	mov	r1, r3
 8000d6a:	480e      	ldr	r0, [pc, #56]	; (8000da4 <HAL_I2S_MspInit+0xf8>)
 8000d6c:	f000 fae0 	bl	8001330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d70:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d82:	2306      	movs	r3, #6
 8000d84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4806      	ldr	r0, [pc, #24]	; (8000da8 <HAL_I2S_MspInit+0xfc>)
 8000d8e:	f000 facf 	bl	8001330 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d92:	bf00      	nop
 8000d94:	3738      	adds	r7, #56	; 0x38
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40003c00 	.word	0x40003c00
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020000 	.word	0x40020000
 8000da8:	40020800 	.word	0x40020800

08000dac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	; 0x28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a19      	ldr	r2, [pc, #100]	; (8000e30 <HAL_SPI_MspInit+0x84>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d12b      	bne.n	8000e26 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <HAL_SPI_MspInit+0x88>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <HAL_SPI_MspInit+0x88>)
 8000dd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <HAL_SPI_MspInit+0x88>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <HAL_SPI_MspInit+0x88>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a10      	ldr	r2, [pc, #64]	; (8000e34 <HAL_SPI_MspInit+0x88>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <HAL_SPI_MspInit+0x88>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e06:	23e0      	movs	r3, #224	; 0xe0
 8000e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e16:	2305      	movs	r3, #5
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <HAL_SPI_MspInit+0x8c>)
 8000e22:	f000 fa85 	bl	8001330 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e26:	bf00      	nop
 8000e28:	3728      	adds	r7, #40	; 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40013000 	.word	0x40013000
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40020000 	.word	0x40020000

08000e3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <HAL_TIM_Base_MspInit+0x3c>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d10d      	bne.n	8000e6a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <HAL_TIM_Base_MspInit+0x40>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	4a09      	ldr	r2, [pc, #36]	; (8000e7c <HAL_TIM_Base_MspInit+0x40>)
 8000e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <HAL_TIM_Base_MspInit+0x40>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000e6a:	bf00      	nop
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40014800 	.word	0x40014800
 8000e7c:	40023800 	.word	0x40023800

08000e80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08c      	sub	sp, #48	; 0x30
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e90:	2300      	movs	r3, #0
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	4b2f      	ldr	r3, [pc, #188]	; (8000f54 <HAL_InitTick+0xd4>)
 8000e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e98:	4a2e      	ldr	r2, [pc, #184]	; (8000f54 <HAL_InitTick+0xd4>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea0:	4b2c      	ldr	r3, [pc, #176]	; (8000f54 <HAL_InitTick+0xd4>)
 8000ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eac:	f107 020c 	add.w	r2, r7, #12
 8000eb0:	f107 0310 	add.w	r3, r7, #16
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f003 ffc4 	bl	8004e44 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000ebc:	f003 ffae 	bl	8004e1c <HAL_RCC_GetPCLK2Freq>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec8:	4a23      	ldr	r2, [pc, #140]	; (8000f58 <HAL_InitTick+0xd8>)
 8000eca:	fba2 2303 	umull	r2, r3, r2, r3
 8000ece:	0c9b      	lsrs	r3, r3, #18
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ed4:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <HAL_InitTick+0xdc>)
 8000ed6:	4a22      	ldr	r2, [pc, #136]	; (8000f60 <HAL_InitTick+0xe0>)
 8000ed8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000eda:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <HAL_InitTick+0xdc>)
 8000edc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ee0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ee2:	4a1e      	ldr	r2, [pc, #120]	; (8000f5c <HAL_InitTick+0xdc>)
 8000ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <HAL_InitTick+0xdc>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eee:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <HAL_InitTick+0xdc>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <HAL_InitTick+0xdc>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000efa:	4818      	ldr	r0, [pc, #96]	; (8000f5c <HAL_InitTick+0xdc>)
 8000efc:	f004 f99f 	bl	800523e <HAL_TIM_Base_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000f06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d11b      	bne.n	8000f46 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000f0e:	4813      	ldr	r0, [pc, #76]	; (8000f5c <HAL_InitTick+0xdc>)
 8000f10:	f004 f9e4 	bl	80052dc <HAL_TIM_Base_Start_IT>
 8000f14:	4603      	mov	r3, r0
 8000f16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000f1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d111      	bne.n	8000f46 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f22:	2019      	movs	r0, #25
 8000f24:	f000 f9f6 	bl	8001314 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b0f      	cmp	r3, #15
 8000f2c:	d808      	bhi.n	8000f40 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	2019      	movs	r0, #25
 8000f34:	f000 f9d2 	bl	80012dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f38:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <HAL_InitTick+0xe4>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	e002      	b.n	8000f46 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3730      	adds	r7, #48	; 0x30
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800
 8000f58:	431bde83 	.word	0x431bde83
 8000f5c:	20000924 	.word	0x20000924
 8000f60:	40010000 	.word	0x40010000
 8000f64:	20000004 	.word	0x20000004

08000f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f6c:	e7fe      	b.n	8000f6c <NMI_Handler+0x4>

08000f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <BusFault_Handler+0x4>

08000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <UsageFault_Handler+0x4>

08000f86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f9a:	f004 fa0f 	bl	80053bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000924 	.word	0x20000924

08000fa8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <OTG_FS_IRQHandler+0x10>)
 8000fae:	f000 fe93 	bl	8001cd8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20004cb4 	.word	0x20004cb4

08000fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc4:	4a14      	ldr	r2, [pc, #80]	; (8001018 <_sbrk+0x5c>)
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <_sbrk+0x60>)
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd0:	4b13      	ldr	r3, [pc, #76]	; (8001020 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d102      	bne.n	8000fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <_sbrk+0x64>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	; (8001024 <_sbrk+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d207      	bcs.n	8000ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fec:	f00b fb4c 	bl	800c688 <__errno>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	e009      	b.n	8001010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <_sbrk+0x64>)
 800100c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100e:	68fb      	ldr	r3, [r7, #12]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20020000 	.word	0x20020000
 800101c:	00000400 	.word	0x00000400
 8001020:	2000096c 	.word	0x2000096c
 8001024:	200051e0 	.word	0x200051e0

08001028 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <SystemInit+0x20>)
 800102e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001032:	4a05      	ldr	r2, [pc, #20]	; (8001048 <SystemInit+0x20>)
 8001034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800104c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001084 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001050:	f7ff ffea 	bl	8001028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001054:	480c      	ldr	r0, [pc, #48]	; (8001088 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001056:	490d      	ldr	r1, [pc, #52]	; (800108c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800105c:	e002      	b.n	8001064 <LoopCopyDataInit>

0800105e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001062:	3304      	adds	r3, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001068:	d3f9      	bcc.n	800105e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800106c:	4c0a      	ldr	r4, [pc, #40]	; (8001098 <LoopFillZerobss+0x22>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001070:	e001      	b.n	8001076 <LoopFillZerobss>

08001072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001074:	3204      	adds	r2, #4

08001076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001078:	d3fb      	bcc.n	8001072 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800107a:	f00b fb0b 	bl	800c694 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107e:	f7ff fb2b 	bl	80006d8 <main>
  bx  lr    
 8001082:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001084:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800108c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001090:	0800c870 	.word	0x0800c870
  ldr r2, =_sbss
 8001094:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001098:	200051dc 	.word	0x200051dc

0800109c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800109c:	e7fe      	b.n	800109c <ADC_IRQHandler>
	...

080010a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <HAL_Init+0x40>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <HAL_Init+0x40>)
 80010aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <HAL_Init+0x40>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <HAL_Init+0x40>)
 80010b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <HAL_Init+0x40>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <HAL_Init+0x40>)
 80010c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c8:	2003      	movs	r0, #3
 80010ca:	f000 f8fc 	bl	80012c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ce:	200f      	movs	r0, #15
 80010d0:	f7ff fed6 	bl	8000e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d4:	f7ff fd76 	bl	8000bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023c00 	.word	0x40023c00

080010e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x20>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_IncTick+0x24>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <HAL_IncTick+0x24>)
 80010f6:	6013      	str	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000008 	.word	0x20000008
 8001108:	20000970 	.word	0x20000970

0800110c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return uwTick;
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <HAL_GetTick+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000970 	.word	0x20000970

08001124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800112c:	f7ff ffee 	bl	800110c <HAL_GetTick>
 8001130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113c:	d005      	beq.n	800114a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_Delay+0x44>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800114a:	bf00      	nop
 800114c:	f7ff ffde 	bl	800110c <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	429a      	cmp	r2, r3
 800115a:	d8f7      	bhi.n	800114c <HAL_Delay+0x28>
  {
  }
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000008 	.word	0x20000008

0800116c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001188:	4013      	ands	r3, r2
 800118a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119e:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	60d3      	str	r3, [r2, #12]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <__NVIC_GetPriorityGrouping+0x18>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	f003 0307 	and.w	r3, r3, #7
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	db0b      	blt.n	80011fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	f003 021f 	and.w	r2, r3, #31
 80011e8:	4907      	ldr	r1, [pc, #28]	; (8001208 <__NVIC_EnableIRQ+0x38>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	095b      	lsrs	r3, r3, #5
 80011f0:	2001      	movs	r0, #1
 80011f2:	fa00 f202 	lsl.w	r2, r0, r2
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000e100 	.word	0xe000e100

0800120c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	db0a      	blt.n	8001236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	b2da      	uxtb	r2, r3
 8001224:	490c      	ldr	r1, [pc, #48]	; (8001258 <__NVIC_SetPriority+0x4c>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	0112      	lsls	r2, r2, #4
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	440b      	add	r3, r1
 8001230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001234:	e00a      	b.n	800124c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4908      	ldr	r1, [pc, #32]	; (800125c <__NVIC_SetPriority+0x50>)
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	3b04      	subs	r3, #4
 8001244:	0112      	lsls	r2, r2, #4
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	440b      	add	r3, r1
 800124a:	761a      	strb	r2, [r3, #24]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000e100 	.word	0xe000e100
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001260:	b480      	push	{r7}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f1c3 0307 	rsb	r3, r3, #7
 800127a:	2b04      	cmp	r3, #4
 800127c:	bf28      	it	cs
 800127e:	2304      	movcs	r3, #4
 8001280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3304      	adds	r3, #4
 8001286:	2b06      	cmp	r3, #6
 8001288:	d902      	bls.n	8001290 <NVIC_EncodePriority+0x30>
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3b03      	subs	r3, #3
 800128e:	e000      	b.n	8001292 <NVIC_EncodePriority+0x32>
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	f04f 32ff 	mov.w	r2, #4294967295
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43da      	mvns	r2, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	401a      	ands	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	43d9      	mvns	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	4313      	orrs	r3, r2
         );
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3724      	adds	r7, #36	; 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ff4c 	bl	800116c <__NVIC_SetPriorityGrouping>
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ee:	f7ff ff61 	bl	80011b4 <__NVIC_GetPriorityGrouping>
 80012f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	68b9      	ldr	r1, [r7, #8]
 80012f8:	6978      	ldr	r0, [r7, #20]
 80012fa:	f7ff ffb1 	bl	8001260 <NVIC_EncodePriority>
 80012fe:	4602      	mov	r2, r0
 8001300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001304:	4611      	mov	r1, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ff80 	bl	800120c <__NVIC_SetPriority>
}
 800130c:	bf00      	nop
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff54 	bl	80011d0 <__NVIC_EnableIRQ>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	; 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
 800134a:	e16b      	b.n	8001624 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800134c:	2201      	movs	r2, #1
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	429a      	cmp	r2, r3
 8001366:	f040 815a 	bne.w	800161e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	2b01      	cmp	r3, #1
 8001374:	d005      	beq.n	8001382 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800137e:	2b02      	cmp	r3, #2
 8001380:	d130      	bne.n	80013e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	2203      	movs	r2, #3
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	68da      	ldr	r2, [r3, #12]
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013b8:	2201      	movs	r2, #1
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	f003 0201 	and.w	r2, r3, #1
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d017      	beq.n	8001420 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d123      	bne.n	8001474 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	08da      	lsrs	r2, r3, #3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3208      	adds	r2, #8
 8001434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	220f      	movs	r2, #15
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	08da      	lsrs	r2, r3, #3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3208      	adds	r2, #8
 800146e:	69b9      	ldr	r1, [r7, #24]
 8001470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	2203      	movs	r2, #3
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0203 	and.w	r2, r3, #3
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 80b4 	beq.w	800161e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b60      	ldr	r3, [pc, #384]	; (800163c <HAL_GPIO_Init+0x30c>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	4a5f      	ldr	r2, [pc, #380]	; (800163c <HAL_GPIO_Init+0x30c>)
 80014c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c4:	6453      	str	r3, [r2, #68]	; 0x44
 80014c6:	4b5d      	ldr	r3, [pc, #372]	; (800163c <HAL_GPIO_Init+0x30c>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014d2:	4a5b      	ldr	r2, [pc, #364]	; (8001640 <HAL_GPIO_Init+0x310>)
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	089b      	lsrs	r3, r3, #2
 80014d8:	3302      	adds	r3, #2
 80014da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	220f      	movs	r2, #15
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a52      	ldr	r2, [pc, #328]	; (8001644 <HAL_GPIO_Init+0x314>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d02b      	beq.n	8001556 <HAL_GPIO_Init+0x226>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a51      	ldr	r2, [pc, #324]	; (8001648 <HAL_GPIO_Init+0x318>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d025      	beq.n	8001552 <HAL_GPIO_Init+0x222>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a50      	ldr	r2, [pc, #320]	; (800164c <HAL_GPIO_Init+0x31c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d01f      	beq.n	800154e <HAL_GPIO_Init+0x21e>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a4f      	ldr	r2, [pc, #316]	; (8001650 <HAL_GPIO_Init+0x320>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d019      	beq.n	800154a <HAL_GPIO_Init+0x21a>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a4e      	ldr	r2, [pc, #312]	; (8001654 <HAL_GPIO_Init+0x324>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d013      	beq.n	8001546 <HAL_GPIO_Init+0x216>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a4d      	ldr	r2, [pc, #308]	; (8001658 <HAL_GPIO_Init+0x328>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d00d      	beq.n	8001542 <HAL_GPIO_Init+0x212>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a4c      	ldr	r2, [pc, #304]	; (800165c <HAL_GPIO_Init+0x32c>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d007      	beq.n	800153e <HAL_GPIO_Init+0x20e>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a4b      	ldr	r2, [pc, #300]	; (8001660 <HAL_GPIO_Init+0x330>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d101      	bne.n	800153a <HAL_GPIO_Init+0x20a>
 8001536:	2307      	movs	r3, #7
 8001538:	e00e      	b.n	8001558 <HAL_GPIO_Init+0x228>
 800153a:	2308      	movs	r3, #8
 800153c:	e00c      	b.n	8001558 <HAL_GPIO_Init+0x228>
 800153e:	2306      	movs	r3, #6
 8001540:	e00a      	b.n	8001558 <HAL_GPIO_Init+0x228>
 8001542:	2305      	movs	r3, #5
 8001544:	e008      	b.n	8001558 <HAL_GPIO_Init+0x228>
 8001546:	2304      	movs	r3, #4
 8001548:	e006      	b.n	8001558 <HAL_GPIO_Init+0x228>
 800154a:	2303      	movs	r3, #3
 800154c:	e004      	b.n	8001558 <HAL_GPIO_Init+0x228>
 800154e:	2302      	movs	r3, #2
 8001550:	e002      	b.n	8001558 <HAL_GPIO_Init+0x228>
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <HAL_GPIO_Init+0x228>
 8001556:	2300      	movs	r3, #0
 8001558:	69fa      	ldr	r2, [r7, #28]
 800155a:	f002 0203 	and.w	r2, r2, #3
 800155e:	0092      	lsls	r2, r2, #2
 8001560:	4093      	lsls	r3, r2
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001568:	4935      	ldr	r1, [pc, #212]	; (8001640 <HAL_GPIO_Init+0x310>)
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	089b      	lsrs	r3, r3, #2
 800156e:	3302      	adds	r3, #2
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001576:	4b3b      	ldr	r3, [pc, #236]	; (8001664 <HAL_GPIO_Init+0x334>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800159a:	4a32      	ldr	r2, [pc, #200]	; (8001664 <HAL_GPIO_Init+0x334>)
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015a0:	4b30      	ldr	r3, [pc, #192]	; (8001664 <HAL_GPIO_Init+0x334>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015c4:	4a27      	ldr	r2, [pc, #156]	; (8001664 <HAL_GPIO_Init+0x334>)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015ca:	4b26      	ldr	r3, [pc, #152]	; (8001664 <HAL_GPIO_Init+0x334>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015ee:	4a1d      	ldr	r2, [pc, #116]	; (8001664 <HAL_GPIO_Init+0x334>)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <HAL_GPIO_Init+0x334>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001618:	4a12      	ldr	r2, [pc, #72]	; (8001664 <HAL_GPIO_Init+0x334>)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3301      	adds	r3, #1
 8001622:	61fb      	str	r3, [r7, #28]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	2b0f      	cmp	r3, #15
 8001628:	f67f ae90 	bls.w	800134c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	3724      	adds	r7, #36	; 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800
 8001640:	40013800 	.word	0x40013800
 8001644:	40020000 	.word	0x40020000
 8001648:	40020400 	.word	0x40020400
 800164c:	40020800 	.word	0x40020800
 8001650:	40020c00 	.word	0x40020c00
 8001654:	40021000 	.word	0x40021000
 8001658:	40021400 	.word	0x40021400
 800165c:	40021800 	.word	0x40021800
 8001660:	40021c00 	.word	0x40021c00
 8001664:	40013c00 	.word	0x40013c00

08001668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	807b      	strh	r3, [r7, #2]
 8001674:	4613      	mov	r3, r2
 8001676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001678:	787b      	ldrb	r3, [r7, #1]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800167e:	887a      	ldrh	r2, [r7, #2]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001684:	e003      	b.n	800168e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001686:	887b      	ldrh	r3, [r7, #2]
 8001688:	041a      	lsls	r2, r3, #16
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	619a      	str	r2, [r3, #24]
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800169a:	b480      	push	{r7}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	460b      	mov	r3, r1
 80016a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016ac:	887a      	ldrh	r2, [r7, #2]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4013      	ands	r3, r2
 80016b2:	041a      	lsls	r2, r3, #16
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	43d9      	mvns	r1, r3
 80016b8:	887b      	ldrh	r3, [r7, #2]
 80016ba:	400b      	ands	r3, r1
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	619a      	str	r2, [r3, #24]
}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016dc:	695a      	ldr	r2, [r3, #20]
 80016de:	88fb      	ldrh	r3, [r7, #6]
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d006      	beq.n	80016f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 f806 	bl	8001700 <HAL_GPIO_EXTI_Callback>
  }
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40013c00 	.word	0x40013c00

08001700 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b086      	sub	sp, #24
 800171a:	af02      	add	r7, sp, #8
 800171c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e059      	b.n	80017dc <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d106      	bne.n	8001748 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f00a fbc6 	bl	800bed4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2203      	movs	r2, #3
 800174c:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001756:	d102      	bne.n	800175e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f004 f877 	bl	8005856 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6818      	ldr	r0, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	7c1a      	ldrb	r2, [r3, #16]
 8001770:	f88d 2000 	strb.w	r2, [sp]
 8001774:	3304      	adds	r3, #4
 8001776:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001778:	f003 fff8 	bl	800576c <USB_CoreInit>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d005      	beq.n	800178e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2202      	movs	r2, #2
 8001786:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e026      	b.n	80017dc <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2101      	movs	r1, #1
 8001794:	4618      	mov	r0, r3
 8001796:	f004 f86f 	bl	8005878 <USB_SetCurrentMode>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2202      	movs	r2, #2
 80017a4:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e017      	b.n	80017dc <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	7c1a      	ldrb	r2, [r3, #16]
 80017b4:	f88d 2000 	strb.w	r2, [sp]
 80017b8:	3304      	adds	r3, #4
 80017ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017bc:	f004 fa12 	bl	8005be4 <USB_HostInit>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d005      	beq.n	80017d2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2202      	movs	r2, #2
 80017ca:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e004      	b.n	80017dc <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b08b      	sub	sp, #44	; 0x2c
 80017e8:	af04      	add	r7, sp, #16
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	4608      	mov	r0, r1
 80017ee:	4611      	mov	r1, r2
 80017f0:	461a      	mov	r2, r3
 80017f2:	4603      	mov	r3, r0
 80017f4:	70fb      	strb	r3, [r7, #3]
 80017f6:	460b      	mov	r3, r1
 80017f8:	70bb      	strb	r3, [r7, #2]
 80017fa:	4613      	mov	r3, r2
 80017fc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80017fe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001800:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_HCD_HC_Init+0x2c>
 800180c:	2302      	movs	r3, #2
 800180e:	e09d      	b.n	800194c <HAL_HCD_HC_Init+0x168>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001818:	78fa      	ldrb	r2, [r7, #3]
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	4613      	mov	r3, r2
 800181e:	011b      	lsls	r3, r3, #4
 8001820:	1a9b      	subs	r3, r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	440b      	add	r3, r1
 8001826:	3319      	adds	r3, #25
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800182c:	78fa      	ldrb	r2, [r7, #3]
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	1a9b      	subs	r3, r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	3314      	adds	r3, #20
 800183c:	787a      	ldrb	r2, [r7, #1]
 800183e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001840:	78fa      	ldrb	r2, [r7, #3]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	011b      	lsls	r3, r3, #4
 8001848:	1a9b      	subs	r3, r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	3315      	adds	r3, #21
 8001850:	78fa      	ldrb	r2, [r7, #3]
 8001852:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001854:	78fa      	ldrb	r2, [r7, #3]
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	011b      	lsls	r3, r3, #4
 800185c:	1a9b      	subs	r3, r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	440b      	add	r3, r1
 8001862:	3326      	adds	r3, #38	; 0x26
 8001864:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001868:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800186a:	78fa      	ldrb	r2, [r7, #3]
 800186c:	78bb      	ldrb	r3, [r7, #2]
 800186e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001872:	b2d8      	uxtb	r0, r3
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	1a9b      	subs	r3, r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	440b      	add	r3, r1
 8001880:	3316      	adds	r3, #22
 8001882:	4602      	mov	r2, r0
 8001884:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001886:	78fb      	ldrb	r3, [r7, #3]
 8001888:	4619      	mov	r1, r3
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 fbc8 	bl	8002020 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001890:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001894:	2b00      	cmp	r3, #0
 8001896:	da0a      	bge.n	80018ae <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001898:	78fa      	ldrb	r2, [r7, #3]
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	1a9b      	subs	r3, r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	3317      	adds	r3, #23
 80018a8:	2201      	movs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]
 80018ac:	e009      	b.n	80018c2 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80018ae:	78fa      	ldrb	r2, [r7, #3]
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	1a9b      	subs	r3, r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	3317      	adds	r3, #23
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f004 faf0 	bl	8005eac <USB_GetHostSpeed>
 80018cc:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80018ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d10b      	bne.n	80018ee <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80018d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d107      	bne.n	80018ee <HAL_HCD_HC_Init+0x10a>
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d104      	bne.n	80018ee <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	2bbc      	cmp	r3, #188	; 0xbc
 80018e8:	d901      	bls.n	80018ee <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80018ea:	23bc      	movs	r3, #188	; 0xbc
 80018ec:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80018ee:	78fa      	ldrb	r2, [r7, #3]
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	011b      	lsls	r3, r3, #4
 80018f6:	1a9b      	subs	r3, r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	440b      	add	r3, r1
 80018fc:	3318      	adds	r3, #24
 80018fe:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001902:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001904:	78fa      	ldrb	r2, [r7, #3]
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	b298      	uxth	r0, r3
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	1a9b      	subs	r3, r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	3328      	adds	r3, #40	; 0x28
 8001918:	4602      	mov	r2, r0
 800191a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6818      	ldr	r0, [r3, #0]
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	b29b      	uxth	r3, r3
 8001924:	787c      	ldrb	r4, [r7, #1]
 8001926:	78ba      	ldrb	r2, [r7, #2]
 8001928:	78f9      	ldrb	r1, [r7, #3]
 800192a:	9302      	str	r3, [sp, #8]
 800192c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	4623      	mov	r3, r4
 800193a:	f004 fadf 	bl	8005efc <USB_HC_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 800194a:	7bfb      	ldrb	r3, [r7, #15]
}
 800194c:	4618      	mov	r0, r3
 800194e:	371c      	adds	r7, #28
 8001950:	46bd      	mov	sp, r7
 8001952:	bd90      	pop	{r4, r7, pc}

08001954 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001960:	2300      	movs	r3, #0
 8001962:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800196a:	2b01      	cmp	r3, #1
 800196c:	d101      	bne.n	8001972 <HAL_HCD_HC_Halt+0x1e>
 800196e:	2302      	movs	r3, #2
 8001970:	e00f      	b.n	8001992 <HAL_HCD_HC_Halt+0x3e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	78fa      	ldrb	r2, [r7, #3]
 8001980:	4611      	mov	r1, r2
 8001982:	4618      	mov	r0, r3
 8001984:	f004 fe71 	bl	800666a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8001990:	7bfb      	ldrb	r3, [r7, #15]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	4608      	mov	r0, r1
 80019a6:	4611      	mov	r1, r2
 80019a8:	461a      	mov	r2, r3
 80019aa:	4603      	mov	r3, r0
 80019ac:	70fb      	strb	r3, [r7, #3]
 80019ae:	460b      	mov	r3, r1
 80019b0:	70bb      	strb	r3, [r7, #2]
 80019b2:	4613      	mov	r3, r2
 80019b4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80019b6:	78fa      	ldrb	r2, [r7, #3]
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	1a9b      	subs	r3, r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	440b      	add	r3, r1
 80019c4:	3317      	adds	r3, #23
 80019c6:	78ba      	ldrb	r2, [r7, #2]
 80019c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80019ca:	78fa      	ldrb	r2, [r7, #3]
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	1a9b      	subs	r3, r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	440b      	add	r3, r1
 80019d8:	3326      	adds	r3, #38	; 0x26
 80019da:	787a      	ldrb	r2, [r7, #1]
 80019dc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80019de:	7c3b      	ldrb	r3, [r7, #16]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d114      	bne.n	8001a0e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80019e4:	78fa      	ldrb	r2, [r7, #3]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	1a9b      	subs	r3, r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	332a      	adds	r3, #42	; 0x2a
 80019f4:	2203      	movs	r2, #3
 80019f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80019f8:	78fa      	ldrb	r2, [r7, #3]
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	1a9b      	subs	r3, r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	3319      	adds	r3, #25
 8001a08:	7f3a      	ldrb	r2, [r7, #28]
 8001a0a:	701a      	strb	r2, [r3, #0]
 8001a0c:	e009      	b.n	8001a22 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a0e:	78fa      	ldrb	r2, [r7, #3]
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	1a9b      	subs	r3, r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	332a      	adds	r3, #42	; 0x2a
 8001a1e:	2202      	movs	r2, #2
 8001a20:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001a22:	787b      	ldrb	r3, [r7, #1]
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	f200 8102 	bhi.w	8001c2e <HAL_HCD_HC_SubmitRequest+0x292>
 8001a2a:	a201      	add	r2, pc, #4	; (adr r2, 8001a30 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a30:	08001a41 	.word	0x08001a41
 8001a34:	08001c19 	.word	0x08001c19
 8001a38:	08001b05 	.word	0x08001b05
 8001a3c:	08001b8f 	.word	0x08001b8f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001a40:	7c3b      	ldrb	r3, [r7, #16]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	f040 80f5 	bne.w	8001c32 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001a48:	78bb      	ldrb	r3, [r7, #2]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d12d      	bne.n	8001aaa <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001a4e:	8b3b      	ldrh	r3, [r7, #24]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d109      	bne.n	8001a68 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001a54:	78fa      	ldrb	r2, [r7, #3]
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	1a9b      	subs	r3, r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	333d      	adds	r3, #61	; 0x3d
 8001a64:	2201      	movs	r2, #1
 8001a66:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a68:	78fa      	ldrb	r2, [r7, #3]
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	1a9b      	subs	r3, r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	440b      	add	r3, r1
 8001a76:	333d      	adds	r3, #61	; 0x3d
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10a      	bne.n	8001a94 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a7e:	78fa      	ldrb	r2, [r7, #3]
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	4613      	mov	r3, r2
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	1a9b      	subs	r3, r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	332a      	adds	r3, #42	; 0x2a
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001a92:	e0ce      	b.n	8001c32 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a94:	78fa      	ldrb	r2, [r7, #3]
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	1a9b      	subs	r3, r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	332a      	adds	r3, #42	; 0x2a
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	701a      	strb	r2, [r3, #0]
      break;
 8001aa8:	e0c3      	b.n	8001c32 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001aaa:	78fa      	ldrb	r2, [r7, #3]
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	011b      	lsls	r3, r3, #4
 8001ab2:	1a9b      	subs	r3, r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	331a      	adds	r3, #26
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	f040 80b8 	bne.w	8001c32 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ac2:	78fa      	ldrb	r2, [r7, #3]
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	1a9b      	subs	r3, r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	440b      	add	r3, r1
 8001ad0:	333c      	adds	r3, #60	; 0x3c
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10a      	bne.n	8001aee <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ad8:	78fa      	ldrb	r2, [r7, #3]
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	1a9b      	subs	r3, r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	332a      	adds	r3, #42	; 0x2a
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
      break;
 8001aec:	e0a1      	b.n	8001c32 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aee:	78fa      	ldrb	r2, [r7, #3]
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	011b      	lsls	r3, r3, #4
 8001af6:	1a9b      	subs	r3, r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	440b      	add	r3, r1
 8001afc:	332a      	adds	r3, #42	; 0x2a
 8001afe:	2202      	movs	r2, #2
 8001b00:	701a      	strb	r2, [r3, #0]
      break;
 8001b02:	e096      	b.n	8001c32 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001b04:	78bb      	ldrb	r3, [r7, #2]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d120      	bne.n	8001b4c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b0a:	78fa      	ldrb	r2, [r7, #3]
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	011b      	lsls	r3, r3, #4
 8001b12:	1a9b      	subs	r3, r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	440b      	add	r3, r1
 8001b18:	333d      	adds	r3, #61	; 0x3d
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10a      	bne.n	8001b36 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b20:	78fa      	ldrb	r2, [r7, #3]
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	011b      	lsls	r3, r3, #4
 8001b28:	1a9b      	subs	r3, r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	332a      	adds	r3, #42	; 0x2a
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001b34:	e07e      	b.n	8001c34 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b36:	78fa      	ldrb	r2, [r7, #3]
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	1a9b      	subs	r3, r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	440b      	add	r3, r1
 8001b44:	332a      	adds	r3, #42	; 0x2a
 8001b46:	2202      	movs	r2, #2
 8001b48:	701a      	strb	r2, [r3, #0]
      break;
 8001b4a:	e073      	b.n	8001c34 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b4c:	78fa      	ldrb	r2, [r7, #3]
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	1a9b      	subs	r3, r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	333c      	adds	r3, #60	; 0x3c
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10a      	bne.n	8001b78 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b62:	78fa      	ldrb	r2, [r7, #3]
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	1a9b      	subs	r3, r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	440b      	add	r3, r1
 8001b70:	332a      	adds	r3, #42	; 0x2a
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
      break;
 8001b76:	e05d      	b.n	8001c34 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b78:	78fa      	ldrb	r2, [r7, #3]
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	1a9b      	subs	r3, r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	332a      	adds	r3, #42	; 0x2a
 8001b88:	2202      	movs	r2, #2
 8001b8a:	701a      	strb	r2, [r3, #0]
      break;
 8001b8c:	e052      	b.n	8001c34 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001b8e:	78bb      	ldrb	r3, [r7, #2]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d120      	bne.n	8001bd6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b94:	78fa      	ldrb	r2, [r7, #3]
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	011b      	lsls	r3, r3, #4
 8001b9c:	1a9b      	subs	r3, r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	333d      	adds	r3, #61	; 0x3d
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10a      	bne.n	8001bc0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001baa:	78fa      	ldrb	r2, [r7, #3]
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	011b      	lsls	r3, r3, #4
 8001bb2:	1a9b      	subs	r3, r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	332a      	adds	r3, #42	; 0x2a
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001bbe:	e039      	b.n	8001c34 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bc0:	78fa      	ldrb	r2, [r7, #3]
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	1a9b      	subs	r3, r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	332a      	adds	r3, #42	; 0x2a
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	701a      	strb	r2, [r3, #0]
      break;
 8001bd4:	e02e      	b.n	8001c34 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001bd6:	78fa      	ldrb	r2, [r7, #3]
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	011b      	lsls	r3, r3, #4
 8001bde:	1a9b      	subs	r3, r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	440b      	add	r3, r1
 8001be4:	333c      	adds	r3, #60	; 0x3c
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10a      	bne.n	8001c02 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bec:	78fa      	ldrb	r2, [r7, #3]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	1a9b      	subs	r3, r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	332a      	adds	r3, #42	; 0x2a
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
      break;
 8001c00:	e018      	b.n	8001c34 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c02:	78fa      	ldrb	r2, [r7, #3]
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	1a9b      	subs	r3, r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	332a      	adds	r3, #42	; 0x2a
 8001c12:	2202      	movs	r2, #2
 8001c14:	701a      	strb	r2, [r3, #0]
      break;
 8001c16:	e00d      	b.n	8001c34 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c18:	78fa      	ldrb	r2, [r7, #3]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	1a9b      	subs	r3, r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	332a      	adds	r3, #42	; 0x2a
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
      break;
 8001c2c:	e002      	b.n	8001c34 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001c2e:	bf00      	nop
 8001c30:	e000      	b.n	8001c34 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001c32:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001c34:	78fa      	ldrb	r2, [r7, #3]
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	1a9b      	subs	r3, r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	440b      	add	r3, r1
 8001c42:	332c      	adds	r3, #44	; 0x2c
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001c48:	78fa      	ldrb	r2, [r7, #3]
 8001c4a:	8b39      	ldrh	r1, [r7, #24]
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	011b      	lsls	r3, r3, #4
 8001c52:	1a9b      	subs	r3, r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4403      	add	r3, r0
 8001c58:	3334      	adds	r3, #52	; 0x34
 8001c5a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001c5c:	78fa      	ldrb	r2, [r7, #3]
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	011b      	lsls	r3, r3, #4
 8001c64:	1a9b      	subs	r3, r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	334c      	adds	r3, #76	; 0x4c
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001c70:	78fa      	ldrb	r2, [r7, #3]
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	011b      	lsls	r3, r3, #4
 8001c78:	1a9b      	subs	r3, r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	3338      	adds	r3, #56	; 0x38
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c84:	78fa      	ldrb	r2, [r7, #3]
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	1a9b      	subs	r3, r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	3315      	adds	r3, #21
 8001c94:	78fa      	ldrb	r2, [r7, #3]
 8001c96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001c98:	78fa      	ldrb	r2, [r7, #3]
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	011b      	lsls	r3, r3, #4
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	334d      	adds	r3, #77	; 0x4d
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6818      	ldr	r0, [r3, #0]
 8001cb0:	78fa      	ldrb	r2, [r7, #3]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	1a9b      	subs	r3, r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	3310      	adds	r3, #16
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	1d19      	adds	r1, r3, #4
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	799b      	ldrb	r3, [r3, #6]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	f004 fa44 	bl	8006154 <USB_HC_StartXfer>
 8001ccc:	4603      	mov	r3, r0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop

08001cd8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f003 ff38 	bl	8005b64 <USB_GetMode>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	f040 80fb 	bne.w	8001ef2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f003 fefb 	bl	8005afc <USB_ReadInterrupts>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 80f1 	beq.w	8001ef0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f003 fef2 	bl	8005afc <USB_ReadInterrupts>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d22:	d104      	bne.n	8001d2e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f003 fee2 	bl	8005afc <USB_ReadInterrupts>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d42:	d104      	bne.n	8001d4e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f003 fed2 	bl	8005afc <USB_ReadInterrupts>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d62:	d104      	bne.n	8001d6e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d6c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f003 fec2 	bl	8005afc <USB_ReadInterrupts>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d103      	bne.n	8001d8a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2202      	movs	r2, #2
 8001d88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f003 feb4 	bl	8005afc <USB_ReadInterrupts>
 8001d94:	4603      	mov	r3, r0
 8001d96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d9e:	d120      	bne.n	8001de2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001da8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d113      	bne.n	8001de2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001dba:	2110      	movs	r1, #16
 8001dbc:	6938      	ldr	r0, [r7, #16]
 8001dbe:	f003 fda7 	bl	8005910 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001dc2:	6938      	ldr	r0, [r7, #16]
 8001dc4:	f003 fdd6 	bl	8005974 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	7a5b      	ldrb	r3, [r3, #9]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d105      	bne.n	8001ddc <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f003 ffc8 	bl	8005d6c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f00a f8f7 	bl	800bfd0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f003 fe88 	bl	8005afc <USB_ReadInterrupts>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001df2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001df6:	d102      	bne.n	8001dfe <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f001 fd33 	bl	8003864 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f003 fe7a 	bl	8005afc <USB_ReadInterrupts>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d106      	bne.n	8001e20 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f00a f8c0 	bl	800bf98 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2208      	movs	r2, #8
 8001e1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f003 fe69 	bl	8005afc <USB_ReadInterrupts>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e34:	d139      	bne.n	8001eaa <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f004 fc04 	bl	8006648 <USB_HC_ReadInterrupt>
 8001e40:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	e025      	b.n	8001e94 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	fa22 f303 	lsr.w	r3, r2, r3
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d018      	beq.n	8001e8e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e72:	d106      	bne.n	8001e82 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	4619      	mov	r1, r3
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f905 	bl	800208a <HCD_HC_IN_IRQHandler>
 8001e80:	e005      	b.n	8001e8e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	4619      	mov	r1, r3
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 ff67 	bl	8002d5c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	3301      	adds	r3, #1
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	795b      	ldrb	r3, [r3, #5]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d3d3      	bcc.n	8001e48 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ea8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f003 fe24 	bl	8005afc <USB_ReadInterrupts>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f003 0310 	and.w	r3, r3, #16
 8001eba:	2b10      	cmp	r3, #16
 8001ebc:	d101      	bne.n	8001ec2 <HAL_HCD_IRQHandler+0x1ea>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <HAL_HCD_IRQHandler+0x1ec>
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d014      	beq.n	8001ef2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	699a      	ldr	r2, [r3, #24]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0210 	bic.w	r2, r2, #16
 8001ed6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f001 fbe4 	bl	80036a6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	699a      	ldr	r2, [r3, #24]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f042 0210 	orr.w	r2, r2, #16
 8001eec:	619a      	str	r2, [r3, #24]
 8001eee:	e000      	b.n	8001ef2 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001ef0:	bf00      	nop
    }
  }
}
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d101      	bne.n	8001f0e <HAL_HCD_Start+0x16>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e013      	b.n	8001f36 <HAL_HCD_Start+0x3e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f003 ff8c 	bl	8005e3a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f003 fc84 	bl	8005834 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d101      	bne.n	8001f54 <HAL_HCD_Stop+0x16>
 8001f50:	2302      	movs	r3, #2
 8001f52:	e00d      	b.n	8001f70 <HAL_HCD_Stop+0x32>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f004 fcdf 	bl	8006924 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f003 ff2e 	bl	8005de6 <USB_ResetPort>
 8001f8a:	4603      	mov	r3, r0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001fa0:	78fa      	ldrb	r2, [r7, #3]
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	1a9b      	subs	r3, r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	334c      	adds	r3, #76	; 0x4c
 8001fb0:	781b      	ldrb	r3, [r3, #0]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001fca:	78fa      	ldrb	r2, [r7, #3]
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	1a9b      	subs	r3, r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	3338      	adds	r3, #56	; 0x38
 8001fda:	681b      	ldr	r3, [r3, #0]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f003 ff70 	bl	8005eda <USB_GetCurrentFrame>
 8001ffa:	4603      	mov	r3, r0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f003 ff4b 	bl	8005eac <USB_GetHostSpeed>
 8002016:	4603      	mov	r3, r0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 800202c:	78fa      	ldrb	r2, [r7, #3]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	331a      	adds	r3, #26
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002040:	78fa      	ldrb	r2, [r7, #3]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	1a9b      	subs	r3, r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	331b      	adds	r3, #27
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002054:	78fa      	ldrb	r2, [r7, #3]
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	1a9b      	subs	r3, r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	3325      	adds	r3, #37	; 0x25
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002068:	78fa      	ldrb	r2, [r7, #3]
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	011b      	lsls	r3, r3, #4
 8002070:	1a9b      	subs	r3, r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	3324      	adds	r3, #36	; 0x24
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b086      	sub	sp, #24
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	460b      	mov	r3, r1
 8002094:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	78fa      	ldrb	r2, [r7, #3]
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f003 fd3a 	bl	8005b22 <USB_ReadChInterrupts>
 80020ae:	4603      	mov	r3, r0
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d11a      	bne.n	80020ee <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80020b8:	78fb      	ldrb	r3, [r7, #3]
 80020ba:	015a      	lsls	r2, r3, #5
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4413      	add	r3, r2
 80020c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c4:	461a      	mov	r2, r3
 80020c6:	2304      	movs	r3, #4
 80020c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80020ca:	78fa      	ldrb	r2, [r7, #3]
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	1a9b      	subs	r3, r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	334d      	adds	r3, #77	; 0x4d
 80020da:	2207      	movs	r2, #7
 80020dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	78fa      	ldrb	r2, [r7, #3]
 80020e4:	4611      	mov	r1, r2
 80020e6:	4618      	mov	r0, r3
 80020e8:	f004 fabf 	bl	800666a <USB_HC_Halt>
 80020ec:	e09e      	b.n	800222c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	78fa      	ldrb	r2, [r7, #3]
 80020f4:	4611      	mov	r1, r2
 80020f6:	4618      	mov	r0, r3
 80020f8:	f003 fd13 	bl	8005b22 <USB_ReadChInterrupts>
 80020fc:	4603      	mov	r3, r0
 80020fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002106:	d11b      	bne.n	8002140 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4413      	add	r3, r2
 8002110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002114:	461a      	mov	r2, r3
 8002116:	f44f 7380 	mov.w	r3, #256	; 0x100
 800211a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800211c:	78fa      	ldrb	r2, [r7, #3]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	1a9b      	subs	r3, r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	334d      	adds	r3, #77	; 0x4d
 800212c:	2208      	movs	r2, #8
 800212e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	78fa      	ldrb	r2, [r7, #3]
 8002136:	4611      	mov	r1, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f004 fa96 	bl	800666a <USB_HC_Halt>
 800213e:	e075      	b.n	800222c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	78fa      	ldrb	r2, [r7, #3]
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f003 fcea 	bl	8005b22 <USB_ReadChInterrupts>
 800214e:	4603      	mov	r3, r0
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b08      	cmp	r3, #8
 8002156:	d11a      	bne.n	800218e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4413      	add	r3, r2
 8002160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002164:	461a      	mov	r2, r3
 8002166:	2308      	movs	r3, #8
 8002168:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800216a:	78fa      	ldrb	r2, [r7, #3]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	334d      	adds	r3, #77	; 0x4d
 800217a:	2206      	movs	r2, #6
 800217c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	78fa      	ldrb	r2, [r7, #3]
 8002184:	4611      	mov	r1, r2
 8002186:	4618      	mov	r0, r3
 8002188:	f004 fa6f 	bl	800666a <USB_HC_Halt>
 800218c:	e04e      	b.n	800222c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	78fa      	ldrb	r2, [r7, #3]
 8002194:	4611      	mov	r1, r2
 8002196:	4618      	mov	r0, r3
 8002198:	f003 fcc3 	bl	8005b22 <USB_ReadChInterrupts>
 800219c:	4603      	mov	r3, r0
 800219e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021a6:	d11b      	bne.n	80021e0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b4:	461a      	mov	r2, r3
 80021b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80021bc:	78fa      	ldrb	r2, [r7, #3]
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	1a9b      	subs	r3, r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	334d      	adds	r3, #77	; 0x4d
 80021cc:	2209      	movs	r2, #9
 80021ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	78fa      	ldrb	r2, [r7, #3]
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f004 fa46 	bl	800666a <USB_HC_Halt>
 80021de:	e025      	b.n	800222c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	78fa      	ldrb	r2, [r7, #3]
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f003 fc9a 	bl	8005b22 <USB_ReadChInterrupts>
 80021ee:	4603      	mov	r3, r0
 80021f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f4:	2b80      	cmp	r3, #128	; 0x80
 80021f6:	d119      	bne.n	800222c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	015a      	lsls	r2, r3, #5
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4413      	add	r3, r2
 8002200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002204:	461a      	mov	r2, r3
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800220a:	78fa      	ldrb	r2, [r7, #3]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	011b      	lsls	r3, r3, #4
 8002212:	1a9b      	subs	r3, r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	440b      	add	r3, r1
 8002218:	334d      	adds	r3, #77	; 0x4d
 800221a:	2207      	movs	r2, #7
 800221c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	78fa      	ldrb	r2, [r7, #3]
 8002224:	4611      	mov	r1, r2
 8002226:	4618      	mov	r0, r3
 8002228:	f004 fa1f 	bl	800666a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	4611      	mov	r1, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f003 fc74 	bl	8005b22 <USB_ReadChInterrupts>
 800223a:	4603      	mov	r3, r0
 800223c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002244:	d112      	bne.n	800226c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	78fa      	ldrb	r2, [r7, #3]
 800224c:	4611      	mov	r1, r2
 800224e:	4618      	mov	r0, r3
 8002250:	f004 fa0b 	bl	800666a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4413      	add	r3, r2
 800225c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002260:	461a      	mov	r2, r3
 8002262:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002266:	6093      	str	r3, [r2, #8]
 8002268:	f000 bd75 	b.w	8002d56 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	78fa      	ldrb	r2, [r7, #3]
 8002272:	4611      	mov	r1, r2
 8002274:	4618      	mov	r0, r3
 8002276:	f003 fc54 	bl	8005b22 <USB_ReadChInterrupts>
 800227a:	4603      	mov	r3, r0
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b01      	cmp	r3, #1
 8002282:	f040 8128 	bne.w	80024d6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002286:	78fb      	ldrb	r3, [r7, #3]
 8002288:	015a      	lsls	r2, r3, #5
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4413      	add	r3, r2
 800228e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002292:	461a      	mov	r2, r3
 8002294:	2320      	movs	r3, #32
 8002296:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	1a9b      	subs	r3, r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	331b      	adds	r3, #27
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d119      	bne.n	80022e2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80022ae:	78fa      	ldrb	r2, [r7, #3]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	1a9b      	subs	r3, r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	440b      	add	r3, r1
 80022bc:	331b      	adds	r3, #27
 80022be:	2200      	movs	r2, #0
 80022c0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80022c2:	78fb      	ldrb	r3, [r7, #3]
 80022c4:	015a      	lsls	r2, r3, #5
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	0151      	lsls	r1, r2, #5
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	440a      	add	r2, r1
 80022d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	799b      	ldrb	r3, [r3, #6]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d01b      	beq.n	8002322 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80022ea:	78fa      	ldrb	r2, [r7, #3]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	1a9b      	subs	r3, r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	440b      	add	r3, r1
 80022f8:	3330      	adds	r3, #48	; 0x30
 80022fa:	6819      	ldr	r1, [r3, #0]
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	015a      	lsls	r2, r3, #5
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	4413      	add	r3, r2
 8002304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230e:	78fa      	ldrb	r2, [r7, #3]
 8002310:	1ac9      	subs	r1, r1, r3
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	1a9b      	subs	r3, r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4403      	add	r3, r0
 800231e:	3338      	adds	r3, #56	; 0x38
 8002320:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002322:	78fa      	ldrb	r2, [r7, #3]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	1a9b      	subs	r3, r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	334d      	adds	r3, #77	; 0x4d
 8002332:	2201      	movs	r2, #1
 8002334:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002336:	78fa      	ldrb	r2, [r7, #3]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	1a9b      	subs	r3, r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	3344      	adds	r3, #68	; 0x44
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800234a:	78fb      	ldrb	r3, [r7, #3]
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4413      	add	r3, r2
 8002352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002356:	461a      	mov	r2, r3
 8002358:	2301      	movs	r3, #1
 800235a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800235c:	78fa      	ldrb	r2, [r7, #3]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	3326      	adds	r3, #38	; 0x26
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00a      	beq.n	8002388 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002372:	78fa      	ldrb	r2, [r7, #3]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	3326      	adds	r3, #38	; 0x26
 8002382:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002384:	2b02      	cmp	r3, #2
 8002386:	d110      	bne.n	80023aa <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	78fa      	ldrb	r2, [r7, #3]
 800238e:	4611      	mov	r1, r2
 8002390:	4618      	mov	r0, r3
 8002392:	f004 f96a 	bl	800666a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002396:	78fb      	ldrb	r3, [r7, #3]
 8002398:	015a      	lsls	r2, r3, #5
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4413      	add	r3, r2
 800239e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a2:	461a      	mov	r2, r3
 80023a4:	2310      	movs	r3, #16
 80023a6:	6093      	str	r3, [r2, #8]
 80023a8:	e03d      	b.n	8002426 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80023aa:	78fa      	ldrb	r2, [r7, #3]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	1a9b      	subs	r3, r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	3326      	adds	r3, #38	; 0x26
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d00a      	beq.n	80023d6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80023c0:	78fa      	ldrb	r2, [r7, #3]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	011b      	lsls	r3, r3, #4
 80023c8:	1a9b      	subs	r3, r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	3326      	adds	r3, #38	; 0x26
 80023d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d127      	bne.n	8002426 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	015a      	lsls	r2, r3, #5
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	78fa      	ldrb	r2, [r7, #3]
 80023e6:	0151      	lsls	r1, r2, #5
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	440a      	add	r2, r1
 80023ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023f4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80023f6:	78fa      	ldrb	r2, [r7, #3]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	334c      	adds	r3, #76	; 0x4c
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800240a:	78fa      	ldrb	r2, [r7, #3]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	1a9b      	subs	r3, r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	334c      	adds	r3, #76	; 0x4c
 800241a:	781a      	ldrb	r2, [r3, #0]
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	4619      	mov	r1, r3
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f009 fde3 	bl	800bfec <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	799b      	ldrb	r3, [r3, #6]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d13b      	bne.n	80024a6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800242e:	78fa      	ldrb	r2, [r7, #3]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	011b      	lsls	r3, r3, #4
 8002436:	1a9b      	subs	r3, r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	440b      	add	r3, r1
 800243c:	3338      	adds	r3, #56	; 0x38
 800243e:	6819      	ldr	r1, [r3, #0]
 8002440:	78fa      	ldrb	r2, [r7, #3]
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4403      	add	r3, r0
 800244e:	3328      	adds	r3, #40	; 0x28
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	440b      	add	r3, r1
 8002454:	1e59      	subs	r1, r3, #1
 8002456:	78fa      	ldrb	r2, [r7, #3]
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4403      	add	r3, r0
 8002464:	3328      	adds	r3, #40	; 0x28
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	fbb1 f3f3 	udiv	r3, r1, r3
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 8470 	beq.w	8002d56 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002476:	78fa      	ldrb	r2, [r7, #3]
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	1a9b      	subs	r3, r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	333c      	adds	r3, #60	; 0x3c
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	78fa      	ldrb	r2, [r7, #3]
 800248a:	f083 0301 	eor.w	r3, r3, #1
 800248e:	b2d8      	uxtb	r0, r3
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	1a9b      	subs	r3, r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	333c      	adds	r3, #60	; 0x3c
 800249e:	4602      	mov	r2, r0
 80024a0:	701a      	strb	r2, [r3, #0]
 80024a2:	f000 bc58 	b.w	8002d56 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80024a6:	78fa      	ldrb	r2, [r7, #3]
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	1a9b      	subs	r3, r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	333c      	adds	r3, #60	; 0x3c
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	f083 0301 	eor.w	r3, r3, #1
 80024be:	b2d8      	uxtb	r0, r3
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	1a9b      	subs	r3, r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	333c      	adds	r3, #60	; 0x3c
 80024ce:	4602      	mov	r2, r0
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	f000 bc40 	b.w	8002d56 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	78fa      	ldrb	r2, [r7, #3]
 80024dc:	4611      	mov	r1, r2
 80024de:	4618      	mov	r0, r3
 80024e0:	f003 fb1f 	bl	8005b22 <USB_ReadChInterrupts>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f003 0320 	and.w	r3, r3, #32
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	d131      	bne.n	8002552 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80024ee:	78fb      	ldrb	r3, [r7, #3]
 80024f0:	015a      	lsls	r2, r3, #5
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fa:	461a      	mov	r2, r3
 80024fc:	2320      	movs	r3, #32
 80024fe:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002500:	78fa      	ldrb	r2, [r7, #3]
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	011b      	lsls	r3, r3, #4
 8002508:	1a9b      	subs	r3, r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	331a      	adds	r3, #26
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b01      	cmp	r3, #1
 8002514:	f040 841f 	bne.w	8002d56 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002518:	78fa      	ldrb	r2, [r7, #3]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	331b      	adds	r3, #27
 8002528:	2201      	movs	r2, #1
 800252a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800252c:	78fa      	ldrb	r2, [r7, #3]
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	1a9b      	subs	r3, r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	334d      	adds	r3, #77	; 0x4d
 800253c:	2203      	movs	r2, #3
 800253e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	78fa      	ldrb	r2, [r7, #3]
 8002546:	4611      	mov	r1, r2
 8002548:	4618      	mov	r0, r3
 800254a:	f004 f88e 	bl	800666a <USB_HC_Halt>
 800254e:	f000 bc02 	b.w	8002d56 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	78fa      	ldrb	r2, [r7, #3]
 8002558:	4611      	mov	r1, r2
 800255a:	4618      	mov	r0, r3
 800255c:	f003 fae1 	bl	8005b22 <USB_ReadChInterrupts>
 8002560:	4603      	mov	r3, r0
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b02      	cmp	r3, #2
 8002568:	f040 8305 	bne.w	8002b76 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	015a      	lsls	r2, r3, #5
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4413      	add	r3, r2
 8002574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002578:	461a      	mov	r2, r3
 800257a:	2302      	movs	r3, #2
 800257c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800257e:	78fa      	ldrb	r2, [r7, #3]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	1a9b      	subs	r3, r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	334d      	adds	r3, #77	; 0x4d
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d114      	bne.n	80025be <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	334d      	adds	r3, #77	; 0x4d
 80025a4:	2202      	movs	r2, #2
 80025a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80025a8:	78fa      	ldrb	r2, [r7, #3]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	334c      	adds	r3, #76	; 0x4c
 80025b8:	2201      	movs	r2, #1
 80025ba:	701a      	strb	r2, [r3, #0]
 80025bc:	e2cc      	b.n	8002b58 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80025be:	78fa      	ldrb	r2, [r7, #3]
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	4613      	mov	r3, r2
 80025c4:	011b      	lsls	r3, r3, #4
 80025c6:	1a9b      	subs	r3, r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	334d      	adds	r3, #77	; 0x4d
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b06      	cmp	r3, #6
 80025d2:	d114      	bne.n	80025fe <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025d4:	78fa      	ldrb	r2, [r7, #3]
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	1a9b      	subs	r3, r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	334d      	adds	r3, #77	; 0x4d
 80025e4:	2202      	movs	r2, #2
 80025e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80025e8:	78fa      	ldrb	r2, [r7, #3]
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	1a9b      	subs	r3, r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	334c      	adds	r3, #76	; 0x4c
 80025f8:	2205      	movs	r2, #5
 80025fa:	701a      	strb	r2, [r3, #0]
 80025fc:	e2ac      	b.n	8002b58 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80025fe:	78fa      	ldrb	r2, [r7, #3]
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	1a9b      	subs	r3, r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	334d      	adds	r3, #77	; 0x4d
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b07      	cmp	r3, #7
 8002612:	d00b      	beq.n	800262c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002614:	78fa      	ldrb	r2, [r7, #3]
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	1a9b      	subs	r3, r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	334d      	adds	r3, #77	; 0x4d
 8002624:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002626:	2b09      	cmp	r3, #9
 8002628:	f040 80a6 	bne.w	8002778 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	1a9b      	subs	r3, r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	334d      	adds	r3, #77	; 0x4d
 800263c:	2202      	movs	r2, #2
 800263e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002640:	78fa      	ldrb	r2, [r7, #3]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	1a9b      	subs	r3, r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	3344      	adds	r3, #68	; 0x44
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	1c59      	adds	r1, r3, #1
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	1a9b      	subs	r3, r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4403      	add	r3, r0
 8002660:	3344      	adds	r3, #68	; 0x44
 8002662:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002664:	78fa      	ldrb	r2, [r7, #3]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	1a9b      	subs	r3, r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	3344      	adds	r3, #68	; 0x44
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d943      	bls.n	8002702 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800267a:	78fa      	ldrb	r2, [r7, #3]
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	4613      	mov	r3, r2
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	1a9b      	subs	r3, r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	3344      	adds	r3, #68	; 0x44
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800268e:	78fa      	ldrb	r2, [r7, #3]
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	1a9b      	subs	r3, r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	440b      	add	r3, r1
 800269c:	331a      	adds	r3, #26
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d123      	bne.n	80026ec <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80026a4:	78fa      	ldrb	r2, [r7, #3]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	331b      	adds	r3, #27
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80026b8:	78fa      	ldrb	r2, [r7, #3]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	1a9b      	subs	r3, r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	331c      	adds	r3, #28
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	78fa      	ldrb	r2, [r7, #3]
 80026dc:	0151      	lsls	r1, r2, #5
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	440a      	add	r2, r1
 80026e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ea:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80026ec:	78fa      	ldrb	r2, [r7, #3]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	334c      	adds	r3, #76	; 0x4c
 80026fc:	2204      	movs	r2, #4
 80026fe:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002700:	e229      	b.n	8002b56 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002702:	78fa      	ldrb	r2, [r7, #3]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	334c      	adds	r3, #76	; 0x4c
 8002712:	2202      	movs	r2, #2
 8002714:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002716:	78fa      	ldrb	r2, [r7, #3]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	3326      	adds	r3, #38	; 0x26
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00b      	beq.n	8002744 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	3326      	adds	r3, #38	; 0x26
 800273c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800273e:	2b02      	cmp	r3, #2
 8002740:	f040 8209 	bne.w	8002b56 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4413      	add	r3, r2
 800274c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800275a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002762:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002764:	78fb      	ldrb	r3, [r7, #3]
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4413      	add	r3, r2
 800276c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002770:	461a      	mov	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002776:	e1ee      	b.n	8002b56 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002778:	78fa      	ldrb	r2, [r7, #3]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	334d      	adds	r3, #77	; 0x4d
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b05      	cmp	r3, #5
 800278c:	f040 80c8 	bne.w	8002920 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002790:	78fa      	ldrb	r2, [r7, #3]
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	1a9b      	subs	r3, r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	334d      	adds	r3, #77	; 0x4d
 80027a0:	2202      	movs	r2, #2
 80027a2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80027a4:	78fa      	ldrb	r2, [r7, #3]
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	1a9b      	subs	r3, r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	331b      	adds	r3, #27
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	f040 81ce 	bne.w	8002b58 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80027bc:	78fa      	ldrb	r2, [r7, #3]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	3326      	adds	r3, #38	; 0x26
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d16b      	bne.n	80028aa <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80027d2:	78fa      	ldrb	r2, [r7, #3]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	1a9b      	subs	r3, r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	3348      	adds	r3, #72	; 0x48
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	1c59      	adds	r1, r3, #1
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	1a9b      	subs	r3, r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4403      	add	r3, r0
 80027f2:	3348      	adds	r3, #72	; 0x48
 80027f4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80027f6:	78fa      	ldrb	r2, [r7, #3]
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	4613      	mov	r3, r2
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	1a9b      	subs	r3, r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	440b      	add	r3, r1
 8002804:	3348      	adds	r3, #72	; 0x48
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b02      	cmp	r3, #2
 800280a:	d943      	bls.n	8002894 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800280c:	78fa      	ldrb	r2, [r7, #3]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	1a9b      	subs	r3, r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	3348      	adds	r3, #72	; 0x48
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002820:	78fa      	ldrb	r2, [r7, #3]
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	1a9b      	subs	r3, r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	331b      	adds	r3, #27
 8002830:	2200      	movs	r2, #0
 8002832:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002834:	78fa      	ldrb	r2, [r7, #3]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	1a9b      	subs	r3, r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	3344      	adds	r3, #68	; 0x44
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d809      	bhi.n	800285e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800284a:	78fa      	ldrb	r2, [r7, #3]
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	1a9b      	subs	r3, r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	331c      	adds	r3, #28
 800285a:	2201      	movs	r2, #1
 800285c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800285e:	78fb      	ldrb	r3, [r7, #3]
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4413      	add	r3, r2
 8002866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	78fa      	ldrb	r2, [r7, #3]
 800286e:	0151      	lsls	r1, r2, #5
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	440a      	add	r2, r1
 8002874:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800287c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800287e:	78fa      	ldrb	r2, [r7, #3]
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	1a9b      	subs	r3, r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	440b      	add	r3, r1
 800288c:	334c      	adds	r3, #76	; 0x4c
 800288e:	2204      	movs	r2, #4
 8002890:	701a      	strb	r2, [r3, #0]
 8002892:	e014      	b.n	80028be <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002894:	78fa      	ldrb	r2, [r7, #3]
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	1a9b      	subs	r3, r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	334c      	adds	r3, #76	; 0x4c
 80028a4:	2202      	movs	r2, #2
 80028a6:	701a      	strb	r2, [r3, #0]
 80028a8:	e009      	b.n	80028be <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80028aa:	78fa      	ldrb	r2, [r7, #3]
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	1a9b      	subs	r3, r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	334c      	adds	r3, #76	; 0x4c
 80028ba:	2202      	movs	r2, #2
 80028bc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028be:	78fa      	ldrb	r2, [r7, #3]
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	1a9b      	subs	r3, r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	440b      	add	r3, r1
 80028cc:	3326      	adds	r3, #38	; 0x26
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00b      	beq.n	80028ec <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028d4:	78fa      	ldrb	r2, [r7, #3]
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	3326      	adds	r3, #38	; 0x26
 80028e4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	f040 8136 	bne.w	8002b58 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80028ec:	78fb      	ldrb	r3, [r7, #3]
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002902:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800290a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800290c:	78fb      	ldrb	r3, [r7, #3]
 800290e:	015a      	lsls	r2, r3, #5
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4413      	add	r3, r2
 8002914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002918:	461a      	mov	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	e11b      	b.n	8002b58 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002920:	78fa      	ldrb	r2, [r7, #3]
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	1a9b      	subs	r3, r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	334d      	adds	r3, #77	; 0x4d
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b03      	cmp	r3, #3
 8002934:	f040 8081 	bne.w	8002a3a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002938:	78fa      	ldrb	r2, [r7, #3]
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	1a9b      	subs	r3, r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	334d      	adds	r3, #77	; 0x4d
 8002948:	2202      	movs	r2, #2
 800294a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800294c:	78fa      	ldrb	r2, [r7, #3]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	1a9b      	subs	r3, r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	331b      	adds	r3, #27
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b01      	cmp	r3, #1
 8002960:	f040 80fa 	bne.w	8002b58 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	334c      	adds	r3, #76	; 0x4c
 8002974:	2202      	movs	r2, #2
 8002976:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002978:	78fb      	ldrb	r3, [r7, #3]
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4413      	add	r3, r2
 8002980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	78fa      	ldrb	r2, [r7, #3]
 8002988:	0151      	lsls	r1, r2, #5
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	440a      	add	r2, r1
 800298e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002996:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002998:	78fb      	ldrb	r3, [r7, #3]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	78fa      	ldrb	r2, [r7, #3]
 80029a8:	0151      	lsls	r1, r2, #5
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	440a      	add	r2, r1
 80029ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029b6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80029b8:	78fb      	ldrb	r3, [r7, #3]
 80029ba:	015a      	lsls	r2, r3, #5
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	78fa      	ldrb	r2, [r7, #3]
 80029c8:	0151      	lsls	r1, r2, #5
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	440a      	add	r2, r1
 80029ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029d2:	f023 0320 	bic.w	r3, r3, #32
 80029d6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029d8:	78fa      	ldrb	r2, [r7, #3]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	1a9b      	subs	r3, r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	3326      	adds	r3, #38	; 0x26
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00b      	beq.n	8002a06 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029ee:	78fa      	ldrb	r2, [r7, #3]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	1a9b      	subs	r3, r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	3326      	adds	r3, #38	; 0x26
 80029fe:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	f040 80a9 	bne.w	8002b58 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a06:	78fb      	ldrb	r3, [r7, #3]
 8002a08:	015a      	lsls	r2, r3, #5
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a1c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a24:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a26:	78fb      	ldrb	r3, [r7, #3]
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a32:	461a      	mov	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	e08e      	b.n	8002b58 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002a3a:	78fa      	ldrb	r2, [r7, #3]
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	1a9b      	subs	r3, r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	440b      	add	r3, r1
 8002a48:	334d      	adds	r3, #77	; 0x4d
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d143      	bne.n	8002ad8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a50:	78fa      	ldrb	r2, [r7, #3]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	334d      	adds	r3, #77	; 0x4d
 8002a60:	2202      	movs	r2, #2
 8002a62:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	334c      	adds	r3, #76	; 0x4c
 8002a74:	2202      	movs	r2, #2
 8002a76:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	3326      	adds	r3, #38	; 0x26
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00a      	beq.n	8002aa4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a8e:	78fa      	ldrb	r2, [r7, #3]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	1a9b      	subs	r3, r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	3326      	adds	r3, #38	; 0x26
 8002a9e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d159      	bne.n	8002b58 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002aa4:	78fb      	ldrb	r3, [r7, #3]
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002aba:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ac2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002ac4:	78fb      	ldrb	r3, [r7, #3]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	e03f      	b.n	8002b58 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002ad8:	78fa      	ldrb	r2, [r7, #3]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	1a9b      	subs	r3, r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	334d      	adds	r3, #77	; 0x4d
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d126      	bne.n	8002b3c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002aee:	78fa      	ldrb	r2, [r7, #3]
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	1a9b      	subs	r3, r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	334d      	adds	r3, #77	; 0x4d
 8002afe:	2202      	movs	r2, #2
 8002b00:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002b02:	78fa      	ldrb	r2, [r7, #3]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	1a9b      	subs	r3, r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	3344      	adds	r3, #68	; 0x44
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	1c59      	adds	r1, r3, #1
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4403      	add	r3, r0
 8002b22:	3344      	adds	r3, #68	; 0x44
 8002b24:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002b26:	78fa      	ldrb	r2, [r7, #3]
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	1a9b      	subs	r3, r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	334c      	adds	r3, #76	; 0x4c
 8002b36:	2204      	movs	r2, #4
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	e00d      	b.n	8002b58 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002b3c:	78fa      	ldrb	r2, [r7, #3]
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	1a9b      	subs	r3, r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	334d      	adds	r3, #77	; 0x4d
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	f000 8100 	beq.w	8002d54 <HCD_HC_IN_IRQHandler+0xcca>
 8002b54:	e000      	b.n	8002b58 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b56:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002b58:	78fa      	ldrb	r2, [r7, #3]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	1a9b      	subs	r3, r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	334c      	adds	r3, #76	; 0x4c
 8002b68:	781a      	ldrb	r2, [r3, #0]
 8002b6a:	78fb      	ldrb	r3, [r7, #3]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f009 fa3c 	bl	800bfec <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b74:	e0ef      	b.n	8002d56 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	78fa      	ldrb	r2, [r7, #3]
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f002 ffcf 	bl	8005b22 <USB_ReadChInterrupts>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8a:	2b40      	cmp	r3, #64	; 0x40
 8002b8c:	d12f      	bne.n	8002bee <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002b8e:	78fb      	ldrb	r3, [r7, #3]
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	2340      	movs	r3, #64	; 0x40
 8002b9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	334d      	adds	r3, #77	; 0x4d
 8002bb0:	2205      	movs	r2, #5
 8002bb2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002bb4:	78fa      	ldrb	r2, [r7, #3]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	1a9b      	subs	r3, r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	331a      	adds	r3, #26
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002bca:	78fa      	ldrb	r2, [r7, #3]
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	1a9b      	subs	r3, r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	3344      	adds	r3, #68	; 0x44
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	78fa      	ldrb	r2, [r7, #3]
 8002be4:	4611      	mov	r1, r2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f003 fd3f 	bl	800666a <USB_HC_Halt>
 8002bec:	e0b3      	b.n	8002d56 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	78fa      	ldrb	r2, [r7, #3]
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f002 ff93 	bl	8005b22 <USB_ReadChInterrupts>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	2b10      	cmp	r3, #16
 8002c04:	f040 80a7 	bne.w	8002d56 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002c08:	78fa      	ldrb	r2, [r7, #3]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	1a9b      	subs	r3, r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	3326      	adds	r3, #38	; 0x26
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d11b      	bne.n	8002c56 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	3344      	adds	r3, #68	; 0x44
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002c32:	78fa      	ldrb	r2, [r7, #3]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	1a9b      	subs	r3, r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	334d      	adds	r3, #77	; 0x4d
 8002c42:	2204      	movs	r2, #4
 8002c44:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	78fa      	ldrb	r2, [r7, #3]
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f003 fd0b 	bl	800666a <USB_HC_Halt>
 8002c54:	e03f      	b.n	8002cd6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	3326      	adds	r3, #38	; 0x26
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00a      	beq.n	8002c82 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c6c:	78fa      	ldrb	r2, [r7, #3]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	1a9b      	subs	r3, r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	3326      	adds	r3, #38	; 0x26
 8002c7c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d129      	bne.n	8002cd6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	1a9b      	subs	r3, r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	3344      	adds	r3, #68	; 0x44
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	799b      	ldrb	r3, [r3, #6]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <HCD_HC_IN_IRQHandler+0xc2a>
 8002c9e:	78fa      	ldrb	r2, [r7, #3]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	1a9b      	subs	r3, r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	331b      	adds	r3, #27
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d110      	bne.n	8002cd6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002cb4:	78fa      	ldrb	r2, [r7, #3]
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	011b      	lsls	r3, r3, #4
 8002cbc:	1a9b      	subs	r3, r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	334d      	adds	r3, #77	; 0x4d
 8002cc4:	2204      	movs	r2, #4
 8002cc6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	78fa      	ldrb	r2, [r7, #3]
 8002cce:	4611      	mov	r1, r2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f003 fcca 	bl	800666a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002cd6:	78fa      	ldrb	r2, [r7, #3]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	1a9b      	subs	r3, r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	331b      	adds	r3, #27
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d129      	bne.n	8002d40 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002cec:	78fa      	ldrb	r2, [r7, #3]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	331b      	adds	r3, #27
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d00:	78fb      	ldrb	r3, [r7, #3]
 8002d02:	015a      	lsls	r2, r3, #5
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4413      	add	r3, r2
 8002d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	78fa      	ldrb	r2, [r7, #3]
 8002d10:	0151      	lsls	r1, r2, #5
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	440a      	add	r2, r1
 8002d16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d1e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	015a      	lsls	r2, r3, #5
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	78fa      	ldrb	r2, [r7, #3]
 8002d30:	0151      	lsls	r1, r2, #5
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	440a      	add	r2, r1
 8002d36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d3a:	f043 0320 	orr.w	r3, r3, #32
 8002d3e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	015a      	lsls	r2, r3, #5
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	2310      	movs	r3, #16
 8002d50:	6093      	str	r3, [r2, #8]
 8002d52:	e000      	b.n	8002d56 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002d54:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	4611      	mov	r1, r2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f002 fed1 	bl	8005b22 <USB_ReadChInterrupts>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d11b      	bne.n	8002dc2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002d8a:	78fb      	ldrb	r3, [r7, #3]
 8002d8c:	015a      	lsls	r2, r3, #5
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d96:	461a      	mov	r2, r3
 8002d98:	2304      	movs	r3, #4
 8002d9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002d9c:	78fa      	ldrb	r2, [r7, #3]
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	1a9b      	subs	r3, r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	334d      	adds	r3, #77	; 0x4d
 8002dac:	2207      	movs	r2, #7
 8002dae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	78fa      	ldrb	r2, [r7, #3]
 8002db6:	4611      	mov	r1, r2
 8002db8:	4618      	mov	r0, r3
 8002dba:	f003 fc56 	bl	800666a <USB_HC_Halt>
 8002dbe:	f000 bc6f 	b.w	80036a0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	78fa      	ldrb	r2, [r7, #3]
 8002dc8:	4611      	mov	r1, r2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f002 fea9 	bl	8005b22 <USB_ReadChInterrupts>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	f003 0320 	and.w	r3, r3, #32
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	f040 8082 	bne.w	8002ee0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002ddc:	78fb      	ldrb	r3, [r7, #3]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de8:	461a      	mov	r2, r3
 8002dea:	2320      	movs	r3, #32
 8002dec:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002dee:	78fa      	ldrb	r2, [r7, #3]
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	1a9b      	subs	r3, r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	3319      	adds	r3, #25
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d124      	bne.n	8002e4e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	3319      	adds	r3, #25
 8002e14:	2200      	movs	r2, #0
 8002e16:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	334c      	adds	r3, #76	; 0x4c
 8002e28:	2202      	movs	r2, #2
 8002e2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002e2c:	78fa      	ldrb	r2, [r7, #3]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	1a9b      	subs	r3, r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	334d      	adds	r3, #77	; 0x4d
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	4611      	mov	r1, r2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f003 fc0e 	bl	800666a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002e4e:	78fa      	ldrb	r2, [r7, #3]
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	1a9b      	subs	r3, r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	331a      	adds	r3, #26
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	f040 841d 	bne.w	80036a0 <HCD_HC_OUT_IRQHandler+0x944>
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	331b      	adds	r3, #27
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f040 8411 	bne.w	80036a0 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002e7e:	78fa      	ldrb	r2, [r7, #3]
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	1a9b      	subs	r3, r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	3326      	adds	r3, #38	; 0x26
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d009      	beq.n	8002ea8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	331b      	adds	r3, #27
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002ea8:	78fa      	ldrb	r2, [r7, #3]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	334d      	adds	r3, #77	; 0x4d
 8002eb8:	2203      	movs	r2, #3
 8002eba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	78fa      	ldrb	r2, [r7, #3]
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f003 fbd0 	bl	800666a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002eca:	78fa      	ldrb	r2, [r7, #3]
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	1a9b      	subs	r3, r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	3344      	adds	r3, #68	; 0x44
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	e3df      	b.n	80036a0 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f002 fe1a 	bl	8005b22 <USB_ReadChInterrupts>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ef8:	d111      	bne.n	8002f1e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002efa:	78fb      	ldrb	r3, [r7, #3]
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f06:	461a      	mov	r2, r3
 8002f08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f0c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f003 fba7 	bl	800666a <USB_HC_Halt>
 8002f1c:	e3c0      	b.n	80036a0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	78fa      	ldrb	r2, [r7, #3]
 8002f24:	4611      	mov	r1, r2
 8002f26:	4618      	mov	r0, r3
 8002f28:	f002 fdfb 	bl	8005b22 <USB_ReadChInterrupts>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d168      	bne.n	8003008 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	1a9b      	subs	r3, r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	3344      	adds	r3, #68	; 0x44
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	4611      	mov	r1, r2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f002 fde5 	bl	8005b22 <USB_ReadChInterrupts>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5e:	2b40      	cmp	r3, #64	; 0x40
 8002f60:	d112      	bne.n	8002f88 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002f62:	78fa      	ldrb	r2, [r7, #3]
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	1a9b      	subs	r3, r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	440b      	add	r3, r1
 8002f70:	3319      	adds	r3, #25
 8002f72:	2201      	movs	r2, #1
 8002f74:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002f76:	78fb      	ldrb	r3, [r7, #3]
 8002f78:	015a      	lsls	r2, r3, #5
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f82:	461a      	mov	r2, r3
 8002f84:	2340      	movs	r3, #64	; 0x40
 8002f86:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	331b      	adds	r3, #27
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d019      	beq.n	8002fd2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002f9e:	78fa      	ldrb	r2, [r7, #3]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	331b      	adds	r3, #27
 8002fae:	2200      	movs	r2, #0
 8002fb0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	015a      	lsls	r2, r3, #5
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4413      	add	r3, r2
 8002fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	78fa      	ldrb	r2, [r7, #3]
 8002fc2:	0151      	lsls	r1, r2, #5
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	440a      	add	r2, r1
 8002fc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fde:	461a      	mov	r2, r3
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002fe4:	78fa      	ldrb	r2, [r7, #3]
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	334d      	adds	r3, #77	; 0x4d
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	78fa      	ldrb	r2, [r7, #3]
 8002ffe:	4611      	mov	r1, r2
 8003000:	4618      	mov	r0, r3
 8003002:	f003 fb32 	bl	800666a <USB_HC_Halt>
 8003006:	e34b      	b.n	80036a0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	4611      	mov	r1, r2
 8003010:	4618      	mov	r0, r3
 8003012:	f002 fd86 	bl	8005b22 <USB_ReadChInterrupts>
 8003016:	4603      	mov	r3, r0
 8003018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301c:	2b40      	cmp	r3, #64	; 0x40
 800301e:	d139      	bne.n	8003094 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	334d      	adds	r3, #77	; 0x4d
 8003030:	2205      	movs	r2, #5
 8003032:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003034:	78fa      	ldrb	r2, [r7, #3]
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	1a9b      	subs	r3, r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	331a      	adds	r3, #26
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d109      	bne.n	800305e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	3319      	adds	r3, #25
 800305a:	2201      	movs	r2, #1
 800305c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800305e:	78fa      	ldrb	r2, [r7, #3]
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	1a9b      	subs	r3, r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	3344      	adds	r3, #68	; 0x44
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	78fa      	ldrb	r2, [r7, #3]
 8003078:	4611      	mov	r1, r2
 800307a:	4618      	mov	r0, r3
 800307c:	f003 faf5 	bl	800666a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003080:	78fb      	ldrb	r3, [r7, #3]
 8003082:	015a      	lsls	r2, r3, #5
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4413      	add	r3, r2
 8003088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800308c:	461a      	mov	r2, r3
 800308e:	2340      	movs	r3, #64	; 0x40
 8003090:	6093      	str	r3, [r2, #8]
 8003092:	e305      	b.n	80036a0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	78fa      	ldrb	r2, [r7, #3]
 800309a:	4611      	mov	r1, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f002 fd40 	bl	8005b22 <USB_ReadChInterrupts>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d11a      	bne.n	80030e2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b8:	461a      	mov	r2, r3
 80030ba:	2308      	movs	r3, #8
 80030bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80030be:	78fa      	ldrb	r2, [r7, #3]
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	1a9b      	subs	r3, r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	334d      	adds	r3, #77	; 0x4d
 80030ce:	2206      	movs	r2, #6
 80030d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	78fa      	ldrb	r2, [r7, #3]
 80030d8:	4611      	mov	r1, r2
 80030da:	4618      	mov	r0, r3
 80030dc:	f003 fac5 	bl	800666a <USB_HC_Halt>
 80030e0:	e2de      	b.n	80036a0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	78fa      	ldrb	r2, [r7, #3]
 80030e8:	4611      	mov	r1, r2
 80030ea:	4618      	mov	r0, r3
 80030ec:	f002 fd19 	bl	8005b22 <USB_ReadChInterrupts>
 80030f0:	4603      	mov	r3, r0
 80030f2:	f003 0310 	and.w	r3, r3, #16
 80030f6:	2b10      	cmp	r3, #16
 80030f8:	d144      	bne.n	8003184 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80030fa:	78fa      	ldrb	r2, [r7, #3]
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	1a9b      	subs	r3, r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	3344      	adds	r3, #68	; 0x44
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800310e:	78fa      	ldrb	r2, [r7, #3]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	334d      	adds	r3, #77	; 0x4d
 800311e:	2204      	movs	r2, #4
 8003120:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	3319      	adds	r3, #25
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d114      	bne.n	8003162 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	3318      	adds	r3, #24
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800314e:	78fa      	ldrb	r2, [r7, #3]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	3319      	adds	r3, #25
 800315e:	2201      	movs	r2, #1
 8003160:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	78fa      	ldrb	r2, [r7, #3]
 8003168:	4611      	mov	r1, r2
 800316a:	4618      	mov	r0, r3
 800316c:	f003 fa7d 	bl	800666a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	4413      	add	r3, r2
 8003178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317c:	461a      	mov	r2, r3
 800317e:	2310      	movs	r3, #16
 8003180:	6093      	str	r3, [r2, #8]
 8003182:	e28d      	b.n	80036a0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	4611      	mov	r1, r2
 800318c:	4618      	mov	r0, r3
 800318e:	f002 fcc8 	bl	8005b22 <USB_ReadChInterrupts>
 8003192:	4603      	mov	r3, r0
 8003194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003198:	2b80      	cmp	r3, #128	; 0x80
 800319a:	d169      	bne.n	8003270 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	799b      	ldrb	r3, [r3, #6]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d111      	bne.n	80031c8 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	334d      	adds	r3, #77	; 0x4d
 80031b4:	2207      	movs	r2, #7
 80031b6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	78fa      	ldrb	r2, [r7, #3]
 80031be:	4611      	mov	r1, r2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f003 fa52 	bl	800666a <USB_HC_Halt>
 80031c6:	e049      	b.n	800325c <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	3344      	adds	r3, #68	; 0x44
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	1c59      	adds	r1, r3, #1
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	1a9b      	subs	r3, r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4403      	add	r3, r0
 80031e8:	3344      	adds	r3, #68	; 0x44
 80031ea:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80031ec:	78fa      	ldrb	r2, [r7, #3]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	3344      	adds	r3, #68	; 0x44
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d922      	bls.n	8003248 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	3344      	adds	r3, #68	; 0x44
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	334c      	adds	r3, #76	; 0x4c
 8003226:	2204      	movs	r2, #4
 8003228:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800322a:	78fa      	ldrb	r2, [r7, #3]
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	1a9b      	subs	r3, r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	334c      	adds	r3, #76	; 0x4c
 800323a:	781a      	ldrb	r2, [r3, #0]
 800323c:	78fb      	ldrb	r3, [r7, #3]
 800323e:	4619      	mov	r1, r3
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f008 fed3 	bl	800bfec <HAL_HCD_HC_NotifyURBChange_Callback>
 8003246:	e009      	b.n	800325c <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003248:	78fa      	ldrb	r2, [r7, #3]
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	334c      	adds	r3, #76	; 0x4c
 8003258:	2202      	movs	r2, #2
 800325a:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800325c:	78fb      	ldrb	r3, [r7, #3]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4413      	add	r3, r2
 8003264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003268:	461a      	mov	r2, r3
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	6093      	str	r3, [r2, #8]
 800326e:	e217      	b.n	80036a0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	78fa      	ldrb	r2, [r7, #3]
 8003276:	4611      	mov	r1, r2
 8003278:	4618      	mov	r0, r3
 800327a:	f002 fc52 	bl	8005b22 <USB_ReadChInterrupts>
 800327e:	4603      	mov	r3, r0
 8003280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003288:	d11b      	bne.n	80032c2 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	1a9b      	subs	r3, r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	334d      	adds	r3, #77	; 0x4d
 800329a:	2209      	movs	r2, #9
 800329c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	4611      	mov	r1, r2
 80032a6:	4618      	mov	r0, r3
 80032a8:	f003 f9df 	bl	800666a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b8:	461a      	mov	r2, r3
 80032ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032be:	6093      	str	r3, [r2, #8]
 80032c0:	e1ee      	b.n	80036a0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	78fa      	ldrb	r2, [r7, #3]
 80032c8:	4611      	mov	r1, r2
 80032ca:	4618      	mov	r0, r3
 80032cc:	f002 fc29 	bl	8005b22 <USB_ReadChInterrupts>
 80032d0:	4603      	mov	r3, r0
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	f040 81df 	bne.w	800369a <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80032dc:	78fb      	ldrb	r3, [r7, #3]
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e8:	461a      	mov	r2, r3
 80032ea:	2302      	movs	r3, #2
 80032ec:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	1a9b      	subs	r3, r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	334d      	adds	r3, #77	; 0x4d
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b01      	cmp	r3, #1
 8003302:	f040 8093 	bne.w	800342c <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003306:	78fa      	ldrb	r2, [r7, #3]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	1a9b      	subs	r3, r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	334d      	adds	r3, #77	; 0x4d
 8003316:	2202      	movs	r2, #2
 8003318:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800331a:	78fa      	ldrb	r2, [r7, #3]
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	1a9b      	subs	r3, r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	334c      	adds	r3, #76	; 0x4c
 800332a:	2201      	movs	r2, #1
 800332c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800332e:	78fa      	ldrb	r2, [r7, #3]
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	1a9b      	subs	r3, r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	440b      	add	r3, r1
 800333c:	3326      	adds	r3, #38	; 0x26
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b02      	cmp	r3, #2
 8003342:	d00b      	beq.n	800335c <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003344:	78fa      	ldrb	r2, [r7, #3]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	1a9b      	subs	r3, r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	3326      	adds	r3, #38	; 0x26
 8003354:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003356:	2b03      	cmp	r3, #3
 8003358:	f040 8190 	bne.w	800367c <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	799b      	ldrb	r3, [r3, #6]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d115      	bne.n	8003390 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003364:	78fa      	ldrb	r2, [r7, #3]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	333d      	adds	r3, #61	; 0x3d
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	78fa      	ldrb	r2, [r7, #3]
 8003378:	f083 0301 	eor.w	r3, r3, #1
 800337c:	b2d8      	uxtb	r0, r3
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	333d      	adds	r3, #61	; 0x3d
 800338c:	4602      	mov	r2, r0
 800338e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	799b      	ldrb	r3, [r3, #6]
 8003394:	2b01      	cmp	r3, #1
 8003396:	f040 8171 	bne.w	800367c <HCD_HC_OUT_IRQHandler+0x920>
 800339a:	78fa      	ldrb	r2, [r7, #3]
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	4613      	mov	r3, r2
 80033a0:	011b      	lsls	r3, r3, #4
 80033a2:	1a9b      	subs	r3, r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	440b      	add	r3, r1
 80033a8:	3334      	adds	r3, #52	; 0x34
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 8165 	beq.w	800367c <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	3334      	adds	r3, #52	; 0x34
 80033c2:	6819      	ldr	r1, [r3, #0]
 80033c4:	78fa      	ldrb	r2, [r7, #3]
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	1a9b      	subs	r3, r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4403      	add	r3, r0
 80033d2:	3328      	adds	r3, #40	; 0x28
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	440b      	add	r3, r1
 80033d8:	1e59      	subs	r1, r3, #1
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4403      	add	r3, r0
 80033e8:	3328      	adds	r3, #40	; 0x28
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80033f0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 813f 	beq.w	800367c <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80033fe:	78fa      	ldrb	r2, [r7, #3]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	1a9b      	subs	r3, r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	333d      	adds	r3, #61	; 0x3d
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	f083 0301 	eor.w	r3, r3, #1
 8003416:	b2d8      	uxtb	r0, r3
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	333d      	adds	r3, #61	; 0x3d
 8003426:	4602      	mov	r2, r0
 8003428:	701a      	strb	r2, [r3, #0]
 800342a:	e127      	b.n	800367c <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800342c:	78fa      	ldrb	r2, [r7, #3]
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	1a9b      	subs	r3, r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	334d      	adds	r3, #77	; 0x4d
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b03      	cmp	r3, #3
 8003440:	d120      	bne.n	8003484 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003442:	78fa      	ldrb	r2, [r7, #3]
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	1a9b      	subs	r3, r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	334d      	adds	r3, #77	; 0x4d
 8003452:	2202      	movs	r2, #2
 8003454:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003456:	78fa      	ldrb	r2, [r7, #3]
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	1a9b      	subs	r3, r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	440b      	add	r3, r1
 8003464:	331b      	adds	r3, #27
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b01      	cmp	r3, #1
 800346a:	f040 8107 	bne.w	800367c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800346e:	78fa      	ldrb	r2, [r7, #3]
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	440b      	add	r3, r1
 800347c:	334c      	adds	r3, #76	; 0x4c
 800347e:	2202      	movs	r2, #2
 8003480:	701a      	strb	r2, [r3, #0]
 8003482:	e0fb      	b.n	800367c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003484:	78fa      	ldrb	r2, [r7, #3]
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	1a9b      	subs	r3, r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	334d      	adds	r3, #77	; 0x4d
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b04      	cmp	r3, #4
 8003498:	d13a      	bne.n	8003510 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	334d      	adds	r3, #77	; 0x4d
 80034aa:	2202      	movs	r2, #2
 80034ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034ae:	78fa      	ldrb	r2, [r7, #3]
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	334c      	adds	r3, #76	; 0x4c
 80034be:	2202      	movs	r2, #2
 80034c0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	331b      	adds	r3, #27
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	f040 80d1 	bne.w	800367c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80034da:	78fa      	ldrb	r2, [r7, #3]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	1a9b      	subs	r3, r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	331b      	adds	r3, #27
 80034ea:	2200      	movs	r2, #0
 80034ec:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80034ee:	78fb      	ldrb	r3, [r7, #3]
 80034f0:	015a      	lsls	r2, r3, #5
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	4413      	add	r3, r2
 80034f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	78fa      	ldrb	r2, [r7, #3]
 80034fe:	0151      	lsls	r1, r2, #5
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	440a      	add	r2, r1
 8003504:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800350c:	6053      	str	r3, [r2, #4]
 800350e:	e0b5      	b.n	800367c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	334d      	adds	r3, #77	; 0x4d
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b05      	cmp	r3, #5
 8003524:	d114      	bne.n	8003550 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003526:	78fa      	ldrb	r2, [r7, #3]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	1a9b      	subs	r3, r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	334d      	adds	r3, #77	; 0x4d
 8003536:	2202      	movs	r2, #2
 8003538:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800353a:	78fa      	ldrb	r2, [r7, #3]
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	1a9b      	subs	r3, r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	334c      	adds	r3, #76	; 0x4c
 800354a:	2202      	movs	r2, #2
 800354c:	701a      	strb	r2, [r3, #0]
 800354e:	e095      	b.n	800367c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003550:	78fa      	ldrb	r2, [r7, #3]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	334d      	adds	r3, #77	; 0x4d
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b06      	cmp	r3, #6
 8003564:	d114      	bne.n	8003590 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	334d      	adds	r3, #77	; 0x4d
 8003576:	2202      	movs	r2, #2
 8003578:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800357a:	78fa      	ldrb	r2, [r7, #3]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	1a9b      	subs	r3, r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	334c      	adds	r3, #76	; 0x4c
 800358a:	2205      	movs	r2, #5
 800358c:	701a      	strb	r2, [r3, #0]
 800358e:	e075      	b.n	800367c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003590:	78fa      	ldrb	r2, [r7, #3]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	334d      	adds	r3, #77	; 0x4d
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b07      	cmp	r3, #7
 80035a4:	d00a      	beq.n	80035bc <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80035a6:	78fa      	ldrb	r2, [r7, #3]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	334d      	adds	r3, #77	; 0x4d
 80035b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80035b8:	2b09      	cmp	r3, #9
 80035ba:	d170      	bne.n	800369e <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035bc:	78fa      	ldrb	r2, [r7, #3]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	334d      	adds	r3, #77	; 0x4d
 80035cc:	2202      	movs	r2, #2
 80035ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	3344      	adds	r3, #68	; 0x44
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	1c59      	adds	r1, r3, #1
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	1a9b      	subs	r3, r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4403      	add	r3, r0
 80035f0:	3344      	adds	r3, #68	; 0x44
 80035f2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035f4:	78fa      	ldrb	r2, [r7, #3]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	3344      	adds	r3, #68	; 0x44
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d914      	bls.n	8003634 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800360a:	78fa      	ldrb	r2, [r7, #3]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	3344      	adds	r3, #68	; 0x44
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800361e:	78fa      	ldrb	r2, [r7, #3]
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	1a9b      	subs	r3, r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	334c      	adds	r3, #76	; 0x4c
 800362e:	2204      	movs	r2, #4
 8003630:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003632:	e022      	b.n	800367a <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003634:	78fa      	ldrb	r2, [r7, #3]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	334c      	adds	r3, #76	; 0x4c
 8003644:	2202      	movs	r2, #2
 8003646:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003648:	78fb      	ldrb	r3, [r7, #3]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	4413      	add	r3, r2
 8003650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800365e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003666:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003668:	78fb      	ldrb	r3, [r7, #3]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	4413      	add	r3, r2
 8003670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003674:	461a      	mov	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800367a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800367c:	78fa      	ldrb	r2, [r7, #3]
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	334c      	adds	r3, #76	; 0x4c
 800368c:	781a      	ldrb	r2, [r3, #0]
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	4619      	mov	r1, r3
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f008 fcaa 	bl	800bfec <HAL_HCD_HC_NotifyURBChange_Callback>
 8003698:	e002      	b.n	80036a0 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800369a:	bf00      	nop
 800369c:	e000      	b.n	80036a0 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800369e:	bf00      	nop
  }
}
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b08a      	sub	sp, #40	; 0x28
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	0c5b      	lsrs	r3, r3, #17
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	091b      	lsrs	r3, r3, #4
 80036d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036da:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d004      	beq.n	80036ec <HCD_RXQLVL_IRQHandler+0x46>
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2b05      	cmp	r3, #5
 80036e6:	f000 80b6 	beq.w	8003856 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80036ea:	e0b7      	b.n	800385c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 80b3 	beq.w	800385a <HCD_RXQLVL_IRQHandler+0x1b4>
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4613      	mov	r3, r2
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	1a9b      	subs	r3, r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	332c      	adds	r3, #44	; 0x2c
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 80a7 	beq.w	800385a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4613      	mov	r3, r2
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	1a9b      	subs	r3, r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	3338      	adds	r3, #56	; 0x38
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	18d1      	adds	r1, r2, r3
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4613      	mov	r3, r2
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	1a9b      	subs	r3, r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4403      	add	r3, r0
 8003730:	3334      	adds	r3, #52	; 0x34
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4299      	cmp	r1, r3
 8003736:	f200 8083 	bhi.w	8003840 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4613      	mov	r3, r2
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	1a9b      	subs	r3, r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	332c      	adds	r3, #44	; 0x2c
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	b292      	uxth	r2, r2
 8003754:	4619      	mov	r1, r3
 8003756:	f002 f979 	bl	8005a4c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	4613      	mov	r3, r2
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	1a9b      	subs	r3, r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	440b      	add	r3, r1
 8003768:	332c      	adds	r3, #44	; 0x2c
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	18d1      	adds	r1, r2, r3
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4613      	mov	r3, r2
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	1a9b      	subs	r3, r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4403      	add	r3, r0
 800377e:	332c      	adds	r3, #44	; 0x2c
 8003780:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4613      	mov	r3, r2
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	3338      	adds	r3, #56	; 0x38
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	18d1      	adds	r1, r2, r3
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	4613      	mov	r3, r2
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4403      	add	r3, r0
 80037a6:	3338      	adds	r3, #56	; 0x38
 80037a8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	0cdb      	lsrs	r3, r3, #19
 80037ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037be:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4613      	mov	r3, r2
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	1a9b      	subs	r3, r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	3328      	adds	r3, #40	; 0x28
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d13f      	bne.n	800385a <HCD_RXQLVL_IRQHandler+0x1b4>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d03c      	beq.n	800385a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037f6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037fe:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	4413      	add	r3, r2
 8003808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380c:	461a      	mov	r2, r3
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4613      	mov	r3, r2
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	1a9b      	subs	r3, r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	440b      	add	r3, r1
 8003820:	333c      	adds	r3, #60	; 0x3c
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	f083 0301 	eor.w	r3, r3, #1
 8003828:	b2d8      	uxtb	r0, r3
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4613      	mov	r3, r2
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	1a9b      	subs	r3, r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	333c      	adds	r3, #60	; 0x3c
 800383a:	4602      	mov	r2, r0
 800383c:	701a      	strb	r2, [r3, #0]
      break;
 800383e:	e00c      	b.n	800385a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4613      	mov	r3, r2
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	1a9b      	subs	r3, r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	334c      	adds	r3, #76	; 0x4c
 8003850:	2204      	movs	r2, #4
 8003852:	701a      	strb	r2, [r3, #0]
      break;
 8003854:	e001      	b.n	800385a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003856:	bf00      	nop
 8003858:	e000      	b.n	800385c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800385a:	bf00      	nop
  }
}
 800385c:	bf00      	nop
 800385e:	3728      	adds	r7, #40	; 0x28
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003890:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b02      	cmp	r3, #2
 800389a:	d10b      	bne.n	80038b4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d102      	bne.n	80038ac <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f008 fb84 	bl	800bfb4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f043 0302 	orr.w	r3, r3, #2
 80038b2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d132      	bne.n	8003924 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f043 0308 	orr.w	r3, r3, #8
 80038c4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d126      	bne.n	800391e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	7a5b      	ldrb	r3, [r3, #9]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d113      	bne.n	8003900 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80038de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038e2:	d106      	bne.n	80038f2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2102      	movs	r1, #2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f002 fa3e 	bl	8005d6c <USB_InitFSLSPClkSel>
 80038f0:	e011      	b.n	8003916 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2101      	movs	r1, #1
 80038f8:	4618      	mov	r0, r3
 80038fa:	f002 fa37 	bl	8005d6c <USB_InitFSLSPClkSel>
 80038fe:	e00a      	b.n	8003916 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	79db      	ldrb	r3, [r3, #7]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d106      	bne.n	8003916 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800390e:	461a      	mov	r2, r3
 8003910:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003914:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f008 fb7a 	bl	800c010 <HAL_HCD_PortEnabled_Callback>
 800391c:	e002      	b.n	8003924 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f008 fb84 	bl	800c02c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f003 0320 	and.w	r3, r3, #32
 800392a:	2b20      	cmp	r3, #32
 800392c:	d103      	bne.n	8003936 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f043 0320 	orr.w	r3, r3, #32
 8003934:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800393c:	461a      	mov	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	6013      	str	r3, [r2, #0]
}
 8003942:	bf00      	nop
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e12b      	b.n	8003bb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d106      	bne.n	8003978 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7fd f952 	bl	8000c1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2224      	movs	r2, #36	; 0x24
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0201 	bic.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800399e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039b0:	f001 fa20 	bl	8004df4 <HAL_RCC_GetPCLK1Freq>
 80039b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	4a81      	ldr	r2, [pc, #516]	; (8003bc0 <HAL_I2C_Init+0x274>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d807      	bhi.n	80039d0 <HAL_I2C_Init+0x84>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4a80      	ldr	r2, [pc, #512]	; (8003bc4 <HAL_I2C_Init+0x278>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	bf94      	ite	ls
 80039c8:	2301      	movls	r3, #1
 80039ca:	2300      	movhi	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	e006      	b.n	80039de <HAL_I2C_Init+0x92>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4a7d      	ldr	r2, [pc, #500]	; (8003bc8 <HAL_I2C_Init+0x27c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	bf94      	ite	ls
 80039d8:	2301      	movls	r3, #1
 80039da:	2300      	movhi	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e0e7      	b.n	8003bb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4a78      	ldr	r2, [pc, #480]	; (8003bcc <HAL_I2C_Init+0x280>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	0c9b      	lsrs	r3, r3, #18
 80039f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	4a6a      	ldr	r2, [pc, #424]	; (8003bc0 <HAL_I2C_Init+0x274>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d802      	bhi.n	8003a20 <HAL_I2C_Init+0xd4>
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	e009      	b.n	8003a34 <HAL_I2C_Init+0xe8>
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a26:	fb02 f303 	mul.w	r3, r2, r3
 8003a2a:	4a69      	ldr	r2, [pc, #420]	; (8003bd0 <HAL_I2C_Init+0x284>)
 8003a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a30:	099b      	lsrs	r3, r3, #6
 8003a32:	3301      	adds	r3, #1
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	495c      	ldr	r1, [pc, #368]	; (8003bc0 <HAL_I2C_Init+0x274>)
 8003a50:	428b      	cmp	r3, r1
 8003a52:	d819      	bhi.n	8003a88 <HAL_I2C_Init+0x13c>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	1e59      	subs	r1, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a62:	1c59      	adds	r1, r3, #1
 8003a64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a68:	400b      	ands	r3, r1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <HAL_I2C_Init+0x138>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1e59      	subs	r1, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a82:	e051      	b.n	8003b28 <HAL_I2C_Init+0x1dc>
 8003a84:	2304      	movs	r3, #4
 8003a86:	e04f      	b.n	8003b28 <HAL_I2C_Init+0x1dc>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d111      	bne.n	8003ab4 <HAL_I2C_Init+0x168>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	1e58      	subs	r0, r3, #1
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6859      	ldr	r1, [r3, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	440b      	add	r3, r1
 8003a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	bf0c      	ite	eq
 8003aac:	2301      	moveq	r3, #1
 8003aae:	2300      	movne	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	e012      	b.n	8003ada <HAL_I2C_Init+0x18e>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	1e58      	subs	r0, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6859      	ldr	r1, [r3, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	0099      	lsls	r1, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aca:	3301      	adds	r3, #1
 8003acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bf0c      	ite	eq
 8003ad4:	2301      	moveq	r3, #1
 8003ad6:	2300      	movne	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_I2C_Init+0x196>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e022      	b.n	8003b28 <HAL_I2C_Init+0x1dc>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10e      	bne.n	8003b08 <HAL_I2C_Init+0x1bc>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1e58      	subs	r0, r3, #1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6859      	ldr	r1, [r3, #4]
 8003af2:	460b      	mov	r3, r1
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	440b      	add	r3, r1
 8003af8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003afc:	3301      	adds	r3, #1
 8003afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b06:	e00f      	b.n	8003b28 <HAL_I2C_Init+0x1dc>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	1e58      	subs	r0, r3, #1
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6859      	ldr	r1, [r3, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	0099      	lsls	r1, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b1e:	3301      	adds	r3, #1
 8003b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	6809      	ldr	r1, [r1, #0]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69da      	ldr	r2, [r3, #28]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6911      	ldr	r1, [r2, #16]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	68d2      	ldr	r2, [r2, #12]
 8003b62:	4311      	orrs	r1, r2
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6812      	ldr	r2, [r2, #0]
 8003b68:	430b      	orrs	r3, r1
 8003b6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695a      	ldr	r2, [r3, #20]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0201 	orr.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	000186a0 	.word	0x000186a0
 8003bc4:	001e847f 	.word	0x001e847f
 8003bc8:	003d08ff 	.word	0x003d08ff
 8003bcc:	431bde83 	.word	0x431bde83
 8003bd0:	10624dd3 	.word	0x10624dd3

08003bd4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b088      	sub	sp, #32
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e128      	b.n	8003e38 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d109      	bne.n	8003c06 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a90      	ldr	r2, [pc, #576]	; (8003e40 <HAL_I2S_Init+0x26c>)
 8003bfe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7fd f853 	bl	8000cac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2202      	movs	r2, #2
 8003c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6812      	ldr	r2, [r2, #0]
 8003c18:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003c1c:	f023 030f 	bic.w	r3, r3, #15
 8003c20:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2202      	movs	r2, #2
 8003c28:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d060      	beq.n	8003cf4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d102      	bne.n	8003c40 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003c3a:	2310      	movs	r3, #16
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	e001      	b.n	8003c44 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003c40:	2320      	movs	r3, #32
 8003c42:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	d802      	bhi.n	8003c52 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003c52:	2001      	movs	r0, #1
 8003c54:	f001 fa0a 	bl	800506c <HAL_RCCEx_GetPeriphCLKFreq>
 8003c58:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c62:	d125      	bne.n	8003cb0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d010      	beq.n	8003c8e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c76:	4613      	mov	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	461a      	mov	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c88:	3305      	adds	r3, #5
 8003c8a:	613b      	str	r3, [r7, #16]
 8003c8c:	e01f      	b.n	8003cce <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c98:	4613      	mov	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003caa:	3305      	adds	r3, #5
 8003cac:	613b      	str	r3, [r7, #16]
 8003cae:	e00e      	b.n	8003cce <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cca:	3305      	adds	r3, #5
 8003ccc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	4a5c      	ldr	r2, [pc, #368]	; (8003e44 <HAL_I2S_Init+0x270>)
 8003cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd6:	08db      	lsrs	r3, r3, #3
 8003cd8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	085b      	lsrs	r3, r3, #1
 8003cea:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	61bb      	str	r3, [r7, #24]
 8003cf2:	e003      	b.n	8003cfc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d902      	bls.n	8003d08 <HAL_I2S_Init+0x134>
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	2bff      	cmp	r3, #255	; 0xff
 8003d06:	d907      	bls.n	8003d18 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0c:	f043 0210 	orr.w	r2, r3, #16
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e08f      	b.n	8003e38 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	ea42 0103 	orr.w	r1, r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69fa      	ldr	r2, [r7, #28]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003d36:	f023 030f 	bic.w	r3, r3, #15
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6851      	ldr	r1, [r2, #4]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6892      	ldr	r2, [r2, #8]
 8003d42:	4311      	orrs	r1, r2
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	68d2      	ldr	r2, [r2, #12]
 8003d48:	4311      	orrs	r1, r2
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6992      	ldr	r2, [r2, #24]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d5a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d161      	bne.n	8003e28 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a38      	ldr	r2, [pc, #224]	; (8003e48 <HAL_I2S_Init+0x274>)
 8003d68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a37      	ldr	r2, [pc, #220]	; (8003e4c <HAL_I2S_Init+0x278>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d101      	bne.n	8003d78 <HAL_I2S_Init+0x1a4>
 8003d74:	4b36      	ldr	r3, [pc, #216]	; (8003e50 <HAL_I2S_Init+0x27c>)
 8003d76:	e001      	b.n	8003d7c <HAL_I2S_Init+0x1a8>
 8003d78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6812      	ldr	r2, [r2, #0]
 8003d82:	4932      	ldr	r1, [pc, #200]	; (8003e4c <HAL_I2S_Init+0x278>)
 8003d84:	428a      	cmp	r2, r1
 8003d86:	d101      	bne.n	8003d8c <HAL_I2S_Init+0x1b8>
 8003d88:	4a31      	ldr	r2, [pc, #196]	; (8003e50 <HAL_I2S_Init+0x27c>)
 8003d8a:	e001      	b.n	8003d90 <HAL_I2S_Init+0x1bc>
 8003d8c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003d90:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003d94:	f023 030f 	bic.w	r3, r3, #15
 8003d98:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a2b      	ldr	r2, [pc, #172]	; (8003e4c <HAL_I2S_Init+0x278>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d101      	bne.n	8003da8 <HAL_I2S_Init+0x1d4>
 8003da4:	4b2a      	ldr	r3, [pc, #168]	; (8003e50 <HAL_I2S_Init+0x27c>)
 8003da6:	e001      	b.n	8003dac <HAL_I2S_Init+0x1d8>
 8003da8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dac:	2202      	movs	r2, #2
 8003dae:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a25      	ldr	r2, [pc, #148]	; (8003e4c <HAL_I2S_Init+0x278>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d101      	bne.n	8003dbe <HAL_I2S_Init+0x1ea>
 8003dba:	4b25      	ldr	r3, [pc, #148]	; (8003e50 <HAL_I2S_Init+0x27c>)
 8003dbc:	e001      	b.n	8003dc2 <HAL_I2S_Init+0x1ee>
 8003dbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dce:	d003      	beq.n	8003dd8 <HAL_I2S_Init+0x204>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d103      	bne.n	8003de0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003dd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ddc:	613b      	str	r3, [r7, #16]
 8003dde:	e001      	b.n	8003de4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003de0:	2300      	movs	r3, #0
 8003de2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003dee:	4313      	orrs	r3, r2
 8003df0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e02:	4313      	orrs	r3, r2
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	897b      	ldrh	r3, [r7, #10]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e10:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a0d      	ldr	r2, [pc, #52]	; (8003e4c <HAL_I2S_Init+0x278>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d101      	bne.n	8003e20 <HAL_I2S_Init+0x24c>
 8003e1c:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <HAL_I2S_Init+0x27c>)
 8003e1e:	e001      	b.n	8003e24 <HAL_I2S_Init+0x250>
 8003e20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e24:	897a      	ldrh	r2, [r7, #10]
 8003e26:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3720      	adds	r7, #32
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	08003f4b 	.word	0x08003f4b
 8003e44:	cccccccd 	.word	0xcccccccd
 8003e48:	08004061 	.word	0x08004061
 8003e4c:	40003800 	.word	0x40003800
 8003e50:	40003400 	.word	0x40003400

08003e54 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	881a      	ldrh	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	1c9a      	adds	r2, r3, #2
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10e      	bne.n	8003ee4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ed4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff ffb8 	bl	8003e54 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003ee4:	bf00      	nop
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efe:	b292      	uxth	r2, r2
 8003f00:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	1c9a      	adds	r2, r3, #2
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10e      	bne.n	8003f42 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f32:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff ff93 	bl	8003e68 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003f42:	bf00      	nop
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b086      	sub	sp, #24
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d13a      	bne.n	8003fdc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d109      	bne.n	8003f84 <I2S_IRQHandler+0x3a>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7a:	2b40      	cmp	r3, #64	; 0x40
 8003f7c:	d102      	bne.n	8003f84 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff ffb4 	bl	8003eec <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8a:	2b40      	cmp	r3, #64	; 0x40
 8003f8c:	d126      	bne.n	8003fdc <I2S_IRQHandler+0x92>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 0320 	and.w	r3, r3, #32
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	d11f      	bne.n	8003fdc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003faa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003fac:	2300      	movs	r3, #0
 8003fae:	613b      	str	r3, [r7, #16]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	613b      	str	r3, [r7, #16]
 8003fc0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fce:	f043 0202 	orr.w	r2, r3, #2
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff ff50 	bl	8003e7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b03      	cmp	r3, #3
 8003fe6:	d136      	bne.n	8004056 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d109      	bne.n	8004006 <I2S_IRQHandler+0xbc>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffc:	2b80      	cmp	r3, #128	; 0x80
 8003ffe:	d102      	bne.n	8004006 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7ff ff45 	bl	8003e90 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b08      	cmp	r3, #8
 800400e:	d122      	bne.n	8004056 <I2S_IRQHandler+0x10c>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b20      	cmp	r3, #32
 800401c:	d11b      	bne.n	8004056 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800402c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800402e:	2300      	movs	r3, #0
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004048:	f043 0204 	orr.w	r2, r3, #4
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7ff ff13 	bl	8003e7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004056:	bf00      	nop
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b088      	sub	sp, #32
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a92      	ldr	r2, [pc, #584]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d101      	bne.n	800407e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800407a:	4b92      	ldr	r3, [pc, #584]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800407c:	e001      	b.n	8004082 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800407e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a8b      	ldr	r2, [pc, #556]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d101      	bne.n	800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004098:	4b8a      	ldr	r3, [pc, #552]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800409a:	e001      	b.n	80040a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800409c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040ac:	d004      	beq.n	80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f040 8099 	bne.w	80041ea <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d107      	bne.n	80040d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f925 	bl	800431c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d107      	bne.n	80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f9c8 	bl	800447c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f2:	2b40      	cmp	r3, #64	; 0x40
 80040f4:	d13a      	bne.n	800416c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d035      	beq.n	800416c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a6e      	ldr	r2, [pc, #440]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d101      	bne.n	800410e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800410a:	4b6e      	ldr	r3, [pc, #440]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800410c:	e001      	b.n	8004112 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800410e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4969      	ldr	r1, [pc, #420]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800411a:	428b      	cmp	r3, r1
 800411c:	d101      	bne.n	8004122 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800411e:	4b69      	ldr	r3, [pc, #420]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004120:	e001      	b.n	8004126 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004122:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004126:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800412a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800413a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800413c:	2300      	movs	r3, #0
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	f043 0202 	orr.w	r2, r3, #2
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7ff fe88 	bl	8003e7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b08      	cmp	r3, #8
 8004174:	f040 80c3 	bne.w	80042fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 80bd 	beq.w	80042fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004192:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a49      	ldr	r2, [pc, #292]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d101      	bne.n	80041a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800419e:	4b49      	ldr	r3, [pc, #292]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041a0:	e001      	b.n	80041a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80041a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4944      	ldr	r1, [pc, #272]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041ae:	428b      	cmp	r3, r1
 80041b0:	d101      	bne.n	80041b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80041b2:	4b44      	ldr	r3, [pc, #272]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041b4:	e001      	b.n	80041ba <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80041b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041be:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80041c0:	2300      	movs	r3, #0
 80041c2:	60bb      	str	r3, [r7, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	60bb      	str	r3, [r7, #8]
 80041cc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041da:	f043 0204 	orr.w	r2, r3, #4
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7ff fe4a 	bl	8003e7c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041e8:	e089      	b.n	80042fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d107      	bne.n	8004204 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f8be 	bl	8004380 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b01      	cmp	r3, #1
 800420c:	d107      	bne.n	800421e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f8fd 	bl	8004418 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004224:	2b40      	cmp	r3, #64	; 0x40
 8004226:	d12f      	bne.n	8004288 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f003 0320 	and.w	r3, r3, #32
 800422e:	2b00      	cmp	r3, #0
 8004230:	d02a      	beq.n	8004288 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004240:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a1e      	ldr	r2, [pc, #120]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d101      	bne.n	8004250 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800424c:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800424e:	e001      	b.n	8004254 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004250:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4919      	ldr	r1, [pc, #100]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800425c:	428b      	cmp	r3, r1
 800425e:	d101      	bne.n	8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004260:	4b18      	ldr	r3, [pc, #96]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004262:	e001      	b.n	8004268 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004264:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004268:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800426c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427a:	f043 0202 	orr.w	r2, r3, #2
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff fdfa 	bl	8003e7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b08      	cmp	r3, #8
 8004290:	d136      	bne.n	8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b00      	cmp	r3, #0
 800429a:	d031      	beq.n	8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a07      	ldr	r2, [pc, #28]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d101      	bne.n	80042aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80042a6:	4b07      	ldr	r3, [pc, #28]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042a8:	e001      	b.n	80042ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80042aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4902      	ldr	r1, [pc, #8]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042b6:	428b      	cmp	r3, r1
 80042b8:	d106      	bne.n	80042c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80042ba:	4b02      	ldr	r3, [pc, #8]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042bc:	e006      	b.n	80042cc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80042be:	bf00      	nop
 80042c0:	40003800 	.word	0x40003800
 80042c4:	40003400 	.word	0x40003400
 80042c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042d0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042e0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ee:	f043 0204 	orr.w	r2, r3, #4
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff fdc0 	bl	8003e7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042fc:	e000      	b.n	8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042fe:	bf00      	nop
}
 8004300:	bf00      	nop
 8004302:	3720      	adds	r7, #32
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	1c99      	adds	r1, r3, #2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6251      	str	r1, [r2, #36]	; 0x24
 800432e:	881a      	ldrh	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d113      	bne.n	8004376 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800435c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d106      	bne.n	8004376 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7ff ffc9 	bl	8004308 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
	...

08004380 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	1c99      	adds	r1, r3, #2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6251      	str	r1, [r2, #36]	; 0x24
 8004392:	8819      	ldrh	r1, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a1d      	ldr	r2, [pc, #116]	; (8004410 <I2SEx_TxISR_I2SExt+0x90>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d101      	bne.n	80043a2 <I2SEx_TxISR_I2SExt+0x22>
 800439e:	4b1d      	ldr	r3, [pc, #116]	; (8004414 <I2SEx_TxISR_I2SExt+0x94>)
 80043a0:	e001      	b.n	80043a6 <I2SEx_TxISR_I2SExt+0x26>
 80043a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043a6:	460a      	mov	r2, r1
 80043a8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043bc:	b29b      	uxth	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d121      	bne.n	8004406 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a12      	ldr	r2, [pc, #72]	; (8004410 <I2SEx_TxISR_I2SExt+0x90>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d101      	bne.n	80043d0 <I2SEx_TxISR_I2SExt+0x50>
 80043cc:	4b11      	ldr	r3, [pc, #68]	; (8004414 <I2SEx_TxISR_I2SExt+0x94>)
 80043ce:	e001      	b.n	80043d4 <I2SEx_TxISR_I2SExt+0x54>
 80043d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	490d      	ldr	r1, [pc, #52]	; (8004410 <I2SEx_TxISR_I2SExt+0x90>)
 80043dc:	428b      	cmp	r3, r1
 80043de:	d101      	bne.n	80043e4 <I2SEx_TxISR_I2SExt+0x64>
 80043e0:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <I2SEx_TxISR_I2SExt+0x94>)
 80043e2:	e001      	b.n	80043e8 <I2SEx_TxISR_I2SExt+0x68>
 80043e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043ec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d106      	bne.n	8004406 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff ff81 	bl	8004308 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40003800 	.word	0x40003800
 8004414:	40003400 	.word	0x40003400

08004418 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68d8      	ldr	r0, [r3, #12]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	1c99      	adds	r1, r3, #2
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004430:	b282      	uxth	r2, r0
 8004432:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004438:	b29b      	uxth	r3, r3
 800443a:	3b01      	subs	r3, #1
 800443c:	b29a      	uxth	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d113      	bne.n	8004474 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800445a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff ff4a 	bl	8004308 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004474:	bf00      	nop
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a20      	ldr	r2, [pc, #128]	; (800450c <I2SEx_RxISR_I2SExt+0x90>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d101      	bne.n	8004492 <I2SEx_RxISR_I2SExt+0x16>
 800448e:	4b20      	ldr	r3, [pc, #128]	; (8004510 <I2SEx_RxISR_I2SExt+0x94>)
 8004490:	e001      	b.n	8004496 <I2SEx_RxISR_I2SExt+0x1a>
 8004492:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004496:	68d8      	ldr	r0, [r3, #12]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	1c99      	adds	r1, r3, #2
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80044a2:	b282      	uxth	r2, r0
 80044a4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d121      	bne.n	8004502 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a12      	ldr	r2, [pc, #72]	; (800450c <I2SEx_RxISR_I2SExt+0x90>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d101      	bne.n	80044cc <I2SEx_RxISR_I2SExt+0x50>
 80044c8:	4b11      	ldr	r3, [pc, #68]	; (8004510 <I2SEx_RxISR_I2SExt+0x94>)
 80044ca:	e001      	b.n	80044d0 <I2SEx_RxISR_I2SExt+0x54>
 80044cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	490d      	ldr	r1, [pc, #52]	; (800450c <I2SEx_RxISR_I2SExt+0x90>)
 80044d8:	428b      	cmp	r3, r1
 80044da:	d101      	bne.n	80044e0 <I2SEx_RxISR_I2SExt+0x64>
 80044dc:	4b0c      	ldr	r3, [pc, #48]	; (8004510 <I2SEx_RxISR_I2SExt+0x94>)
 80044de:	e001      	b.n	80044e4 <I2SEx_RxISR_I2SExt+0x68>
 80044e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044e8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d106      	bne.n	8004502 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff ff03 	bl	8004308 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004502:	bf00      	nop
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	40003800 	.word	0x40003800
 8004510:	40003400 	.word	0x40003400

08004514 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e267      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d075      	beq.n	800461e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004532:	4b88      	ldr	r3, [pc, #544]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	2b04      	cmp	r3, #4
 800453c:	d00c      	beq.n	8004558 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800453e:	4b85      	ldr	r3, [pc, #532]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004546:	2b08      	cmp	r3, #8
 8004548:	d112      	bne.n	8004570 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800454a:	4b82      	ldr	r3, [pc, #520]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004552:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004556:	d10b      	bne.n	8004570 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004558:	4b7e      	ldr	r3, [pc, #504]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d05b      	beq.n	800461c <HAL_RCC_OscConfig+0x108>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d157      	bne.n	800461c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e242      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004578:	d106      	bne.n	8004588 <HAL_RCC_OscConfig+0x74>
 800457a:	4b76      	ldr	r3, [pc, #472]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a75      	ldr	r2, [pc, #468]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	e01d      	b.n	80045c4 <HAL_RCC_OscConfig+0xb0>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004590:	d10c      	bne.n	80045ac <HAL_RCC_OscConfig+0x98>
 8004592:	4b70      	ldr	r3, [pc, #448]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a6f      	ldr	r2, [pc, #444]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	4b6d      	ldr	r3, [pc, #436]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a6c      	ldr	r2, [pc, #432]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	e00b      	b.n	80045c4 <HAL_RCC_OscConfig+0xb0>
 80045ac:	4b69      	ldr	r3, [pc, #420]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a68      	ldr	r2, [pc, #416]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	4b66      	ldr	r3, [pc, #408]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a65      	ldr	r2, [pc, #404]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d013      	beq.n	80045f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045cc:	f7fc fd9e 	bl	800110c <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045d4:	f7fc fd9a 	bl	800110c <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b64      	cmp	r3, #100	; 0x64
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e207      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e6:	4b5b      	ldr	r3, [pc, #364]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0xc0>
 80045f2:	e014      	b.n	800461e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f4:	f7fc fd8a 	bl	800110c <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045fc:	f7fc fd86 	bl	800110c <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b64      	cmp	r3, #100	; 0x64
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e1f3      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800460e:	4b51      	ldr	r3, [pc, #324]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f0      	bne.n	80045fc <HAL_RCC_OscConfig+0xe8>
 800461a:	e000      	b.n	800461e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800461c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d063      	beq.n	80046f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800462a:	4b4a      	ldr	r3, [pc, #296]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 030c 	and.w	r3, r3, #12
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00b      	beq.n	800464e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004636:	4b47      	ldr	r3, [pc, #284]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800463e:	2b08      	cmp	r3, #8
 8004640:	d11c      	bne.n	800467c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004642:	4b44      	ldr	r3, [pc, #272]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d116      	bne.n	800467c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800464e:	4b41      	ldr	r3, [pc, #260]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d005      	beq.n	8004666 <HAL_RCC_OscConfig+0x152>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d001      	beq.n	8004666 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e1c7      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004666:	4b3b      	ldr	r3, [pc, #236]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	4937      	ldr	r1, [pc, #220]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004676:	4313      	orrs	r3, r2
 8004678:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800467a:	e03a      	b.n	80046f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d020      	beq.n	80046c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004684:	4b34      	ldr	r3, [pc, #208]	; (8004758 <HAL_RCC_OscConfig+0x244>)
 8004686:	2201      	movs	r2, #1
 8004688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468a:	f7fc fd3f 	bl	800110c <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004692:	f7fc fd3b 	bl	800110c <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e1a8      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a4:	4b2b      	ldr	r3, [pc, #172]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f0      	beq.n	8004692 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b0:	4b28      	ldr	r3, [pc, #160]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	4925      	ldr	r1, [pc, #148]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	600b      	str	r3, [r1, #0]
 80046c4:	e015      	b.n	80046f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046c6:	4b24      	ldr	r3, [pc, #144]	; (8004758 <HAL_RCC_OscConfig+0x244>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046cc:	f7fc fd1e 	bl	800110c <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046d4:	f7fc fd1a 	bl	800110c <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e187      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046e6:	4b1b      	ldr	r3, [pc, #108]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0308 	and.w	r3, r3, #8
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d036      	beq.n	800476c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d016      	beq.n	8004734 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004706:	4b15      	ldr	r3, [pc, #84]	; (800475c <HAL_RCC_OscConfig+0x248>)
 8004708:	2201      	movs	r2, #1
 800470a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470c:	f7fc fcfe 	bl	800110c <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004714:	f7fc fcfa 	bl	800110c <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e167      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004726:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0f0      	beq.n	8004714 <HAL_RCC_OscConfig+0x200>
 8004732:	e01b      	b.n	800476c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004734:	4b09      	ldr	r3, [pc, #36]	; (800475c <HAL_RCC_OscConfig+0x248>)
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800473a:	f7fc fce7 	bl	800110c <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004740:	e00e      	b.n	8004760 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004742:	f7fc fce3 	bl	800110c <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d907      	bls.n	8004760 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e150      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
 8004754:	40023800 	.word	0x40023800
 8004758:	42470000 	.word	0x42470000
 800475c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004760:	4b88      	ldr	r3, [pc, #544]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1ea      	bne.n	8004742 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 8097 	beq.w	80048a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800477a:	2300      	movs	r3, #0
 800477c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800477e:	4b81      	ldr	r3, [pc, #516]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10f      	bne.n	80047aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800478a:	2300      	movs	r3, #0
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	4b7d      	ldr	r3, [pc, #500]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	4a7c      	ldr	r2, [pc, #496]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004798:	6413      	str	r3, [r2, #64]	; 0x40
 800479a:	4b7a      	ldr	r3, [pc, #488]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a2:	60bb      	str	r3, [r7, #8]
 80047a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047a6:	2301      	movs	r3, #1
 80047a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047aa:	4b77      	ldr	r3, [pc, #476]	; (8004988 <HAL_RCC_OscConfig+0x474>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d118      	bne.n	80047e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047b6:	4b74      	ldr	r3, [pc, #464]	; (8004988 <HAL_RCC_OscConfig+0x474>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a73      	ldr	r2, [pc, #460]	; (8004988 <HAL_RCC_OscConfig+0x474>)
 80047bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047c2:	f7fc fca3 	bl	800110c <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ca:	f7fc fc9f 	bl	800110c <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e10c      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047dc:	4b6a      	ldr	r3, [pc, #424]	; (8004988 <HAL_RCC_OscConfig+0x474>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0f0      	beq.n	80047ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d106      	bne.n	80047fe <HAL_RCC_OscConfig+0x2ea>
 80047f0:	4b64      	ldr	r3, [pc, #400]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80047f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f4:	4a63      	ldr	r2, [pc, #396]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80047f6:	f043 0301 	orr.w	r3, r3, #1
 80047fa:	6713      	str	r3, [r2, #112]	; 0x70
 80047fc:	e01c      	b.n	8004838 <HAL_RCC_OscConfig+0x324>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b05      	cmp	r3, #5
 8004804:	d10c      	bne.n	8004820 <HAL_RCC_OscConfig+0x30c>
 8004806:	4b5f      	ldr	r3, [pc, #380]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480a:	4a5e      	ldr	r2, [pc, #376]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800480c:	f043 0304 	orr.w	r3, r3, #4
 8004810:	6713      	str	r3, [r2, #112]	; 0x70
 8004812:	4b5c      	ldr	r3, [pc, #368]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	4a5b      	ldr	r2, [pc, #364]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004818:	f043 0301 	orr.w	r3, r3, #1
 800481c:	6713      	str	r3, [r2, #112]	; 0x70
 800481e:	e00b      	b.n	8004838 <HAL_RCC_OscConfig+0x324>
 8004820:	4b58      	ldr	r3, [pc, #352]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004824:	4a57      	ldr	r2, [pc, #348]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	6713      	str	r3, [r2, #112]	; 0x70
 800482c:	4b55      	ldr	r3, [pc, #340]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800482e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004830:	4a54      	ldr	r2, [pc, #336]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004832:	f023 0304 	bic.w	r3, r3, #4
 8004836:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d015      	beq.n	800486c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004840:	f7fc fc64 	bl	800110c <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004846:	e00a      	b.n	800485e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004848:	f7fc fc60 	bl	800110c <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f241 3288 	movw	r2, #5000	; 0x1388
 8004856:	4293      	cmp	r3, r2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e0cb      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800485e:	4b49      	ldr	r3, [pc, #292]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0ee      	beq.n	8004848 <HAL_RCC_OscConfig+0x334>
 800486a:	e014      	b.n	8004896 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800486c:	f7fc fc4e 	bl	800110c <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004872:	e00a      	b.n	800488a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004874:	f7fc fc4a 	bl	800110c <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004882:	4293      	cmp	r3, r2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e0b5      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800488a:	4b3e      	ldr	r3, [pc, #248]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800488c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1ee      	bne.n	8004874 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004896:	7dfb      	ldrb	r3, [r7, #23]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d105      	bne.n	80048a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800489c:	4b39      	ldr	r3, [pc, #228]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	4a38      	ldr	r2, [pc, #224]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80048a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 80a1 	beq.w	80049f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048b2:	4b34      	ldr	r3, [pc, #208]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d05c      	beq.n	8004978 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d141      	bne.n	800494a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c6:	4b31      	ldr	r3, [pc, #196]	; (800498c <HAL_RCC_OscConfig+0x478>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048cc:	f7fc fc1e 	bl	800110c <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048d4:	f7fc fc1a 	bl	800110c <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e087      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e6:	4b27      	ldr	r3, [pc, #156]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f0      	bne.n	80048d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69da      	ldr	r2, [r3, #28]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	019b      	lsls	r3, r3, #6
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004908:	085b      	lsrs	r3, r3, #1
 800490a:	3b01      	subs	r3, #1
 800490c:	041b      	lsls	r3, r3, #16
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	061b      	lsls	r3, r3, #24
 8004916:	491b      	ldr	r1, [pc, #108]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004918:	4313      	orrs	r3, r2
 800491a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800491c:	4b1b      	ldr	r3, [pc, #108]	; (800498c <HAL_RCC_OscConfig+0x478>)
 800491e:	2201      	movs	r2, #1
 8004920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004922:	f7fc fbf3 	bl	800110c <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004928:	e008      	b.n	800493c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800492a:	f7fc fbef 	bl	800110c <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e05c      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800493c:	4b11      	ldr	r3, [pc, #68]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0f0      	beq.n	800492a <HAL_RCC_OscConfig+0x416>
 8004948:	e054      	b.n	80049f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800494a:	4b10      	ldr	r3, [pc, #64]	; (800498c <HAL_RCC_OscConfig+0x478>)
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004950:	f7fc fbdc 	bl	800110c <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004958:	f7fc fbd8 	bl	800110c <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e045      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496a:	4b06      	ldr	r3, [pc, #24]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f0      	bne.n	8004958 <HAL_RCC_OscConfig+0x444>
 8004976:	e03d      	b.n	80049f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d107      	bne.n	8004990 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e038      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
 8004984:	40023800 	.word	0x40023800
 8004988:	40007000 	.word	0x40007000
 800498c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004990:	4b1b      	ldr	r3, [pc, #108]	; (8004a00 <HAL_RCC_OscConfig+0x4ec>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d028      	beq.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d121      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d11a      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049c0:	4013      	ands	r3, r2
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d111      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d6:	085b      	lsrs	r3, r3, #1
 80049d8:	3b01      	subs	r3, #1
 80049da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049dc:	429a      	cmp	r2, r3
 80049de:	d107      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d001      	beq.n	80049f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40023800 	.word	0x40023800

08004a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e0cc      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a18:	4b68      	ldr	r3, [pc, #416]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d90c      	bls.n	8004a40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a26:	4b65      	ldr	r3, [pc, #404]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2e:	4b63      	ldr	r3, [pc, #396]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d001      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0b8      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d020      	beq.n	8004a8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d005      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a58:	4b59      	ldr	r3, [pc, #356]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	4a58      	ldr	r2, [pc, #352]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0308 	and.w	r3, r3, #8
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a70:	4b53      	ldr	r3, [pc, #332]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	4a52      	ldr	r2, [pc, #328]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a7c:	4b50      	ldr	r3, [pc, #320]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	494d      	ldr	r1, [pc, #308]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d044      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d107      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa2:	4b47      	ldr	r3, [pc, #284]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d119      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e07f      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d003      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d107      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac2:	4b3f      	ldr	r3, [pc, #252]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d109      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e06f      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad2:	4b3b      	ldr	r3, [pc, #236]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e067      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ae2:	4b37      	ldr	r3, [pc, #220]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f023 0203 	bic.w	r2, r3, #3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	4934      	ldr	r1, [pc, #208]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004af4:	f7fc fb0a 	bl	800110c <HAL_GetTick>
 8004af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afa:	e00a      	b.n	8004b12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004afc:	f7fc fb06 	bl	800110c <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e04f      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b12:	4b2b      	ldr	r3, [pc, #172]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 020c 	and.w	r2, r3, #12
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d1eb      	bne.n	8004afc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b24:	4b25      	ldr	r3, [pc, #148]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d20c      	bcs.n	8004b4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b32:	4b22      	ldr	r3, [pc, #136]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3a:	4b20      	ldr	r3, [pc, #128]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d001      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e032      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d008      	beq.n	8004b6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b58:	4b19      	ldr	r3, [pc, #100]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	4916      	ldr	r1, [pc, #88]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d009      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b76:	4b12      	ldr	r3, [pc, #72]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	490e      	ldr	r1, [pc, #56]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b8a:	f000 f821 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	091b      	lsrs	r3, r3, #4
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	490a      	ldr	r1, [pc, #40]	; (8004bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b9c:	5ccb      	ldrb	r3, [r1, r3]
 8004b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba2:	4a09      	ldr	r2, [pc, #36]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ba6:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <HAL_RCC_ClockConfig+0x1c8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fc f968 	bl	8000e80 <HAL_InitTick>

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40023c00 	.word	0x40023c00
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	0800c848 	.word	0x0800c848
 8004bc8:	20000000 	.word	0x20000000
 8004bcc:	20000004 	.word	0x20000004

08004bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bd4:	b094      	sub	sp, #80	; 0x50
 8004bd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	647b      	str	r3, [r7, #68]	; 0x44
 8004bdc:	2300      	movs	r3, #0
 8004bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004be0:	2300      	movs	r3, #0
 8004be2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004be8:	4b79      	ldr	r3, [pc, #484]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 030c 	and.w	r3, r3, #12
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d00d      	beq.n	8004c10 <HAL_RCC_GetSysClockFreq+0x40>
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	f200 80e1 	bhi.w	8004dbc <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <HAL_RCC_GetSysClockFreq+0x34>
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	d003      	beq.n	8004c0a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c02:	e0db      	b.n	8004dbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c04:	4b73      	ldr	r3, [pc, #460]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c06:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c08:	e0db      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c0a:	4b73      	ldr	r3, [pc, #460]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c0e:	e0d8      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c10:	4b6f      	ldr	r3, [pc, #444]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c18:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c1a:	4b6d      	ldr	r3, [pc, #436]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d063      	beq.n	8004cee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c26:	4b6a      	ldr	r3, [pc, #424]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	099b      	lsrs	r3, r3, #6
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c38:	633b      	str	r3, [r7, #48]	; 0x30
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c42:	4622      	mov	r2, r4
 8004c44:	462b      	mov	r3, r5
 8004c46:	f04f 0000 	mov.w	r0, #0
 8004c4a:	f04f 0100 	mov.w	r1, #0
 8004c4e:	0159      	lsls	r1, r3, #5
 8004c50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c54:	0150      	lsls	r0, r2, #5
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	1a51      	subs	r1, r2, r1
 8004c5e:	6139      	str	r1, [r7, #16]
 8004c60:	4629      	mov	r1, r5
 8004c62:	eb63 0301 	sbc.w	r3, r3, r1
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	f04f 0300 	mov.w	r3, #0
 8004c70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c74:	4659      	mov	r1, fp
 8004c76:	018b      	lsls	r3, r1, #6
 8004c78:	4651      	mov	r1, sl
 8004c7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c7e:	4651      	mov	r1, sl
 8004c80:	018a      	lsls	r2, r1, #6
 8004c82:	4651      	mov	r1, sl
 8004c84:	ebb2 0801 	subs.w	r8, r2, r1
 8004c88:	4659      	mov	r1, fp
 8004c8a:	eb63 0901 	sbc.w	r9, r3, r1
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ca2:	4690      	mov	r8, r2
 8004ca4:	4699      	mov	r9, r3
 8004ca6:	4623      	mov	r3, r4
 8004ca8:	eb18 0303 	adds.w	r3, r8, r3
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	462b      	mov	r3, r5
 8004cb0:	eb49 0303 	adc.w	r3, r9, r3
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	024b      	lsls	r3, r1, #9
 8004cc6:	4621      	mov	r1, r4
 8004cc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ccc:	4621      	mov	r1, r4
 8004cce:	024a      	lsls	r2, r1, #9
 8004cd0:	4610      	mov	r0, r2
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ce0:	f7fb fa76 	bl	80001d0 <__aeabi_uldivmod>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4613      	mov	r3, r2
 8004cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cec:	e058      	b.n	8004da0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cee:	4b38      	ldr	r3, [pc, #224]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	099b      	lsrs	r3, r3, #6
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cfe:	623b      	str	r3, [r7, #32]
 8004d00:	2300      	movs	r3, #0
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
 8004d04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d08:	4642      	mov	r2, r8
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	f04f 0000 	mov.w	r0, #0
 8004d10:	f04f 0100 	mov.w	r1, #0
 8004d14:	0159      	lsls	r1, r3, #5
 8004d16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d1a:	0150      	lsls	r0, r2, #5
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4641      	mov	r1, r8
 8004d22:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d26:	4649      	mov	r1, r9
 8004d28:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d40:	ebb2 040a 	subs.w	r4, r2, sl
 8004d44:	eb63 050b 	sbc.w	r5, r3, fp
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	00eb      	lsls	r3, r5, #3
 8004d52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d56:	00e2      	lsls	r2, r4, #3
 8004d58:	4614      	mov	r4, r2
 8004d5a:	461d      	mov	r5, r3
 8004d5c:	4643      	mov	r3, r8
 8004d5e:	18e3      	adds	r3, r4, r3
 8004d60:	603b      	str	r3, [r7, #0]
 8004d62:	464b      	mov	r3, r9
 8004d64:	eb45 0303 	adc.w	r3, r5, r3
 8004d68:	607b      	str	r3, [r7, #4]
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	f04f 0300 	mov.w	r3, #0
 8004d72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d76:	4629      	mov	r1, r5
 8004d78:	028b      	lsls	r3, r1, #10
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d80:	4621      	mov	r1, r4
 8004d82:	028a      	lsls	r2, r1, #10
 8004d84:	4610      	mov	r0, r2
 8004d86:	4619      	mov	r1, r3
 8004d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	61bb      	str	r3, [r7, #24]
 8004d8e:	61fa      	str	r2, [r7, #28]
 8004d90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d94:	f7fb fa1c 	bl	80001d0 <__aeabi_uldivmod>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004da0:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	0c1b      	lsrs	r3, r3, #16
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	3301      	adds	r3, #1
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004db0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dba:	e002      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dbc:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dbe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3750      	adds	r7, #80	; 0x50
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dce:	bf00      	nop
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	00f42400 	.word	0x00f42400
 8004dd8:	007a1200 	.word	0x007a1200

08004ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004de0:	4b03      	ldr	r3, [pc, #12]	; (8004df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004de2:	681b      	ldr	r3, [r3, #0]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	20000000 	.word	0x20000000

08004df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004df8:	f7ff fff0 	bl	8004ddc <HAL_RCC_GetHCLKFreq>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	0a9b      	lsrs	r3, r3, #10
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	4903      	ldr	r1, [pc, #12]	; (8004e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e0a:	5ccb      	ldrb	r3, [r1, r3]
 8004e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	40023800 	.word	0x40023800
 8004e18:	0800c858 	.word	0x0800c858

08004e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e20:	f7ff ffdc 	bl	8004ddc <HAL_RCC_GetHCLKFreq>
 8004e24:	4602      	mov	r2, r0
 8004e26:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	0b5b      	lsrs	r3, r3, #13
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	4903      	ldr	r1, [pc, #12]	; (8004e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e32:	5ccb      	ldrb	r3, [r1, r3]
 8004e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	0800c858 	.word	0x0800c858

08004e44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	220f      	movs	r2, #15
 8004e52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e54:	4b12      	ldr	r3, [pc, #72]	; (8004ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f003 0203 	and.w	r2, r3, #3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e60:	4b0f      	ldr	r3, [pc, #60]	; (8004ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004e78:	4b09      	ldr	r3, [pc, #36]	; (8004ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	08db      	lsrs	r3, r3, #3
 8004e7e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e86:	4b07      	ldr	r3, [pc, #28]	; (8004ea4 <HAL_RCC_GetClockConfig+0x60>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0207 	and.w	r2, r3, #7
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	601a      	str	r2, [r3, #0]
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	40023c00 	.word	0x40023c00

08004ea8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d105      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d035      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ed0:	4b62      	ldr	r3, [pc, #392]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ed6:	f7fc f919 	bl	800110c <HAL_GetTick>
 8004eda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004edc:	e008      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ede:	f7fc f915 	bl	800110c <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e0b0      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ef0:	4b5b      	ldr	r3, [pc, #364]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1f0      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	019a      	lsls	r2, r3, #6
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	071b      	lsls	r3, r3, #28
 8004f08:	4955      	ldr	r1, [pc, #340]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f10:	4b52      	ldr	r3, [pc, #328]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f12:	2201      	movs	r2, #1
 8004f14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f16:	f7fc f8f9 	bl	800110c <HAL_GetTick>
 8004f1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f1c:	e008      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f1e:	f7fc f8f5 	bl	800110c <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d901      	bls.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e090      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f30:	4b4b      	ldr	r3, [pc, #300]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0f0      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 8083 	beq.w	8005050 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	4b44      	ldr	r3, [pc, #272]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	4a43      	ldr	r2, [pc, #268]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f58:	6413      	str	r3, [r2, #64]	; 0x40
 8004f5a:	4b41      	ldr	r3, [pc, #260]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f66:	4b3f      	ldr	r3, [pc, #252]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a3e      	ldr	r2, [pc, #248]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f70:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f72:	f7fc f8cb 	bl	800110c <HAL_GetTick>
 8004f76:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f78:	e008      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f7a:	f7fc f8c7 	bl	800110c <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e062      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f8c:	4b35      	ldr	r3, [pc, #212]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0f0      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f98:	4b31      	ldr	r3, [pc, #196]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d02f      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d028      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fb6:	4b2a      	ldr	r3, [pc, #168]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fbe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fc0:	4b29      	ldr	r3, [pc, #164]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fc6:	4b28      	ldr	r3, [pc, #160]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004fcc:	4a24      	ldr	r2, [pc, #144]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fd2:	4b23      	ldr	r3, [pc, #140]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d114      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004fde:	f7fc f895 	bl	800110c <HAL_GetTick>
 8004fe2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe4:	e00a      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fe6:	f7fc f891 	bl	800110c <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e02a      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ffc:	4b18      	ldr	r3, [pc, #96]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0ee      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005010:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005014:	d10d      	bne.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005016:	4b12      	ldr	r3, [pc, #72]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800502a:	490d      	ldr	r1, [pc, #52]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800502c:	4313      	orrs	r3, r2
 800502e:	608b      	str	r3, [r1, #8]
 8005030:	e005      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005032:	4b0b      	ldr	r3, [pc, #44]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	4a0a      	ldr	r2, [pc, #40]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005038:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800503c:	6093      	str	r3, [r2, #8]
 800503e:	4b08      	ldr	r3, [pc, #32]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005040:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800504a:	4905      	ldr	r1, [pc, #20]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800504c:	4313      	orrs	r3, r2
 800504e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	42470068 	.word	0x42470068
 8005060:	40023800 	.word	0x40023800
 8005064:	40007000 	.word	0x40007000
 8005068:	42470e40 	.word	0x42470e40

0800506c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d13f      	bne.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800508a:	4b24      	ldr	r3, [pc, #144]	; (800511c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d006      	beq.n	80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050a0:	d12f      	bne.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80050a2:	4b1f      	ldr	r3, [pc, #124]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80050a4:	617b      	str	r3, [r7, #20]
          break;
 80050a6:	e02f      	b.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80050a8:	4b1c      	ldr	r3, [pc, #112]	; (800511c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050b4:	d108      	bne.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80050b6:	4b19      	ldr	r3, [pc, #100]	; (800511c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050be:	4a19      	ldr	r2, [pc, #100]	; (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80050c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c4:	613b      	str	r3, [r7, #16]
 80050c6:	e007      	b.n	80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80050c8:	4b14      	ldr	r3, [pc, #80]	; (800511c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050d0:	4a15      	ldr	r2, [pc, #84]	; (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80050d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80050d8:	4b10      	ldr	r3, [pc, #64]	; (800511c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050de:	099b      	lsrs	r3, r3, #6
 80050e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	fb02 f303 	mul.w	r3, r2, r3
 80050ea:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80050ec:	4b0b      	ldr	r3, [pc, #44]	; (800511c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050f2:	0f1b      	lsrs	r3, r3, #28
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fe:	617b      	str	r3, [r7, #20]
          break;
 8005100:	e002      	b.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	617b      	str	r3, [r7, #20]
          break;
 8005106:	bf00      	nop
        }
      }
      break;
 8005108:	e000      	b.n	800510c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 800510a:	bf00      	nop
    }
  }
  return frequency;
 800510c:	697b      	ldr	r3, [r7, #20]
}
 800510e:	4618      	mov	r0, r3
 8005110:	371c      	adds	r7, #28
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	40023800 	.word	0x40023800
 8005120:	00bb8000 	.word	0x00bb8000
 8005124:	007a1200 	.word	0x007a1200
 8005128:	00f42400 	.word	0x00f42400

0800512c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e07b      	b.n	8005236 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005142:	2b00      	cmp	r3, #0
 8005144:	d108      	bne.n	8005158 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800514e:	d009      	beq.n	8005164 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	61da      	str	r2, [r3, #28]
 8005156:	e005      	b.n	8005164 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d106      	bne.n	8005184 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7fb fe14 	bl	8000dac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800519a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051ac:	431a      	orrs	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	431a      	orrs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	431a      	orrs	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051d4:	431a      	orrs	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e8:	ea42 0103 	orr.w	r1, r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	0c1b      	lsrs	r3, r3, #16
 8005202:	f003 0104 	and.w	r1, r3, #4
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	f003 0210 	and.w	r2, r3, #16
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69da      	ldr	r2, [r3, #28]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005224:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3708      	adds	r7, #8
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b082      	sub	sp, #8
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e041      	b.n	80052d4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d106      	bne.n	800526a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7fb fde9 	bl	8000e3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2202      	movs	r2, #2
 800526e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3304      	adds	r3, #4
 800527a:	4619      	mov	r1, r3
 800527c:	4610      	mov	r0, r2
 800527e:	f000 f9b5 	bl	80055ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3708      	adds	r7, #8
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d001      	beq.n	80052f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e04e      	b.n	8005392 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68da      	ldr	r2, [r3, #12]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a23      	ldr	r2, [pc, #140]	; (80053a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d022      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800531e:	d01d      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a1f      	ldr	r2, [pc, #124]	; (80053a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d018      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a1e      	ldr	r2, [pc, #120]	; (80053a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d013      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a1c      	ldr	r2, [pc, #112]	; (80053ac <HAL_TIM_Base_Start_IT+0xd0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00e      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a1b      	ldr	r2, [pc, #108]	; (80053b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d009      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a19      	ldr	r2, [pc, #100]	; (80053b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d004      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a18      	ldr	r2, [pc, #96]	; (80053b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d111      	bne.n	8005380 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 0307 	and.w	r3, r3, #7
 8005366:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2b06      	cmp	r3, #6
 800536c:	d010      	beq.n	8005390 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f042 0201 	orr.w	r2, r2, #1
 800537c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800537e:	e007      	b.n	8005390 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0201 	orr.w	r2, r2, #1
 800538e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	40010000 	.word	0x40010000
 80053a4:	40000400 	.word	0x40000400
 80053a8:	40000800 	.word	0x40000800
 80053ac:	40000c00 	.word	0x40000c00
 80053b0:	40010400 	.word	0x40010400
 80053b4:	40014000 	.word	0x40014000
 80053b8:	40001800 	.word	0x40001800

080053bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d020      	beq.n	8005420 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d01b      	beq.n	8005420 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f06f 0202 	mvn.w	r2, #2
 80053f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f8d2 	bl	80055b0 <HAL_TIM_IC_CaptureCallback>
 800540c:	e005      	b.n	800541a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f8c4 	bl	800559c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f8d5 	bl	80055c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	d020      	beq.n	800546c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b00      	cmp	r3, #0
 8005432:	d01b      	beq.n	800546c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f06f 0204 	mvn.w	r2, #4
 800543c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2202      	movs	r2, #2
 8005442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f8ac 	bl	80055b0 <HAL_TIM_IC_CaptureCallback>
 8005458:	e005      	b.n	8005466 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f89e 	bl	800559c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f8af 	bl	80055c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f003 0308 	and.w	r3, r3, #8
 8005472:	2b00      	cmp	r3, #0
 8005474:	d020      	beq.n	80054b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b00      	cmp	r3, #0
 800547e:	d01b      	beq.n	80054b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f06f 0208 	mvn.w	r2, #8
 8005488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2204      	movs	r2, #4
 800548e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	f003 0303 	and.w	r3, r3, #3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f886 	bl	80055b0 <HAL_TIM_IC_CaptureCallback>
 80054a4:	e005      	b.n	80054b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f878 	bl	800559c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f889 	bl	80055c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	f003 0310 	and.w	r3, r3, #16
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d020      	beq.n	8005504 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f003 0310 	and.w	r3, r3, #16
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d01b      	beq.n	8005504 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f06f 0210 	mvn.w	r2, #16
 80054d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2208      	movs	r2, #8
 80054da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d003      	beq.n	80054f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f860 	bl	80055b0 <HAL_TIM_IC_CaptureCallback>
 80054f0:	e005      	b.n	80054fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f852 	bl	800559c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f863 	bl	80055c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00c      	beq.n	8005528 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b00      	cmp	r3, #0
 8005516:	d007      	beq.n	8005528 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f06f 0201 	mvn.w	r2, #1
 8005520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7fb fb36 	bl	8000b94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00c      	beq.n	800554c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005538:	2b00      	cmp	r3, #0
 800553a:	d007      	beq.n	800554c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f906 	bl	8005758 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00c      	beq.n	8005570 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555c:	2b00      	cmp	r3, #0
 800555e:	d007      	beq.n	8005570 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f834 	bl	80055d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f003 0320 	and.w	r3, r3, #32
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00c      	beq.n	8005594 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f003 0320 	and.w	r3, r3, #32
 8005580:	2b00      	cmp	r3, #0
 8005582:	d007      	beq.n	8005594 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f06f 0220 	mvn.w	r2, #32
 800558c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f8d8 	bl	8005744 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005594:	bf00      	nop
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a46      	ldr	r2, [pc, #280]	; (8005718 <TIM_Base_SetConfig+0x12c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d013      	beq.n	800562c <TIM_Base_SetConfig+0x40>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800560a:	d00f      	beq.n	800562c <TIM_Base_SetConfig+0x40>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a43      	ldr	r2, [pc, #268]	; (800571c <TIM_Base_SetConfig+0x130>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d00b      	beq.n	800562c <TIM_Base_SetConfig+0x40>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a42      	ldr	r2, [pc, #264]	; (8005720 <TIM_Base_SetConfig+0x134>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d007      	beq.n	800562c <TIM_Base_SetConfig+0x40>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a41      	ldr	r2, [pc, #260]	; (8005724 <TIM_Base_SetConfig+0x138>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d003      	beq.n	800562c <TIM_Base_SetConfig+0x40>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a40      	ldr	r2, [pc, #256]	; (8005728 <TIM_Base_SetConfig+0x13c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d108      	bne.n	800563e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	4313      	orrs	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a35      	ldr	r2, [pc, #212]	; (8005718 <TIM_Base_SetConfig+0x12c>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d02b      	beq.n	800569e <TIM_Base_SetConfig+0xb2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800564c:	d027      	beq.n	800569e <TIM_Base_SetConfig+0xb2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a32      	ldr	r2, [pc, #200]	; (800571c <TIM_Base_SetConfig+0x130>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d023      	beq.n	800569e <TIM_Base_SetConfig+0xb2>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a31      	ldr	r2, [pc, #196]	; (8005720 <TIM_Base_SetConfig+0x134>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d01f      	beq.n	800569e <TIM_Base_SetConfig+0xb2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a30      	ldr	r2, [pc, #192]	; (8005724 <TIM_Base_SetConfig+0x138>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d01b      	beq.n	800569e <TIM_Base_SetConfig+0xb2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a2f      	ldr	r2, [pc, #188]	; (8005728 <TIM_Base_SetConfig+0x13c>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d017      	beq.n	800569e <TIM_Base_SetConfig+0xb2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a2e      	ldr	r2, [pc, #184]	; (800572c <TIM_Base_SetConfig+0x140>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d013      	beq.n	800569e <TIM_Base_SetConfig+0xb2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a2d      	ldr	r2, [pc, #180]	; (8005730 <TIM_Base_SetConfig+0x144>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d00f      	beq.n	800569e <TIM_Base_SetConfig+0xb2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a2c      	ldr	r2, [pc, #176]	; (8005734 <TIM_Base_SetConfig+0x148>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d00b      	beq.n	800569e <TIM_Base_SetConfig+0xb2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a2b      	ldr	r2, [pc, #172]	; (8005738 <TIM_Base_SetConfig+0x14c>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d007      	beq.n	800569e <TIM_Base_SetConfig+0xb2>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a2a      	ldr	r2, [pc, #168]	; (800573c <TIM_Base_SetConfig+0x150>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d003      	beq.n	800569e <TIM_Base_SetConfig+0xb2>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a29      	ldr	r2, [pc, #164]	; (8005740 <TIM_Base_SetConfig+0x154>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d108      	bne.n	80056b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a10      	ldr	r2, [pc, #64]	; (8005718 <TIM_Base_SetConfig+0x12c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d003      	beq.n	80056e4 <TIM_Base_SetConfig+0xf8>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a12      	ldr	r2, [pc, #72]	; (8005728 <TIM_Base_SetConfig+0x13c>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d103      	bne.n	80056ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	691a      	ldr	r2, [r3, #16]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d105      	bne.n	800570a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f023 0201 	bic.w	r2, r3, #1
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	611a      	str	r2, [r3, #16]
  }
}
 800570a:	bf00      	nop
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	40010000 	.word	0x40010000
 800571c:	40000400 	.word	0x40000400
 8005720:	40000800 	.word	0x40000800
 8005724:	40000c00 	.word	0x40000c00
 8005728:	40010400 	.word	0x40010400
 800572c:	40014000 	.word	0x40014000
 8005730:	40014400 	.word	0x40014400
 8005734:	40014800 	.word	0x40014800
 8005738:	40001800 	.word	0x40001800
 800573c:	40001c00 	.word	0x40001c00
 8005740:	40002000 	.word	0x40002000

08005744 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800576c:	b084      	sub	sp, #16
 800576e:	b580      	push	{r7, lr}
 8005770:	b084      	sub	sp, #16
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	f107 001c 	add.w	r0, r7, #28
 800577a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800577e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005782:	2b01      	cmp	r3, #1
 8005784:	d123      	bne.n	80057ce <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800579a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d105      	bne.n	80057c2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f9dc 	bl	8005b80 <USB_CoreReset>
 80057c8:	4603      	mov	r3, r0
 80057ca:	73fb      	strb	r3, [r7, #15]
 80057cc:	e01b      	b.n	8005806 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f9d0 	bl	8005b80 <USB_CoreReset>
 80057e0:	4603      	mov	r3, r0
 80057e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80057e4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d106      	bne.n	80057fa <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	639a      	str	r2, [r3, #56]	; 0x38
 80057f8:	e005      	b.n	8005806 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005806:	7fbb      	ldrb	r3, [r7, #30]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d10b      	bne.n	8005824 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f043 0206 	orr.w	r2, r3, #6
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f043 0220 	orr.w	r2, r3, #32
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005824:	7bfb      	ldrb	r3, [r7, #15]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005830:	b004      	add	sp, #16
 8005832:	4770      	bx	lr

08005834 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f043 0201 	orr.w	r2, r3, #1
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f023 0201 	bic.w	r2, r3, #1
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	460b      	mov	r3, r1
 8005882:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005884:	2300      	movs	r3, #0
 8005886:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005894:	78fb      	ldrb	r3, [r7, #3]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d115      	bne.n	80058c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80058a6:	200a      	movs	r0, #10
 80058a8:	f7fb fc3c 	bl	8001124 <HAL_Delay>
      ms += 10U;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	330a      	adds	r3, #10
 80058b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f956 	bl	8005b64 <USB_GetMode>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d01e      	beq.n	80058fc <USB_SetCurrentMode+0x84>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2bc7      	cmp	r3, #199	; 0xc7
 80058c2:	d9f0      	bls.n	80058a6 <USB_SetCurrentMode+0x2e>
 80058c4:	e01a      	b.n	80058fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80058c6:	78fb      	ldrb	r3, [r7, #3]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d115      	bne.n	80058f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80058d8:	200a      	movs	r0, #10
 80058da:	f7fb fc23 	bl	8001124 <HAL_Delay>
      ms += 10U;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	330a      	adds	r3, #10
 80058e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f93d 	bl	8005b64 <USB_GetMode>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d005      	beq.n	80058fc <USB_SetCurrentMode+0x84>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2bc7      	cmp	r3, #199	; 0xc7
 80058f4:	d9f0      	bls.n	80058d8 <USB_SetCurrentMode+0x60>
 80058f6:	e001      	b.n	80058fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e005      	b.n	8005908 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2bc8      	cmp	r3, #200	; 0xc8
 8005900:	d101      	bne.n	8005906 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e000      	b.n	8005908 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800591a:	2300      	movs	r3, #0
 800591c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	3301      	adds	r3, #1
 8005922:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800592a:	d901      	bls.n	8005930 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e01b      	b.n	8005968 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	daf2      	bge.n	800591e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	019b      	lsls	r3, r3, #6
 8005940:	f043 0220 	orr.w	r2, r3, #32
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	3301      	adds	r3, #1
 800594c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005954:	d901      	bls.n	800595a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e006      	b.n	8005968 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b20      	cmp	r3, #32
 8005964:	d0f0      	beq.n	8005948 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3714      	adds	r7, #20
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	3301      	adds	r3, #1
 8005984:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800598c:	d901      	bls.n	8005992 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e018      	b.n	80059c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	2b00      	cmp	r3, #0
 8005998:	daf2      	bge.n	8005980 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2210      	movs	r2, #16
 80059a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	3301      	adds	r3, #1
 80059a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80059b0:	d901      	bls.n	80059b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e006      	b.n	80059c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f003 0310 	and.w	r3, r3, #16
 80059be:	2b10      	cmp	r3, #16
 80059c0:	d0f0      	beq.n	80059a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b089      	sub	sp, #36	; 0x24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	4611      	mov	r1, r2
 80059dc:	461a      	mov	r2, r3
 80059de:	460b      	mov	r3, r1
 80059e0:	71fb      	strb	r3, [r7, #7]
 80059e2:	4613      	mov	r3, r2
 80059e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80059ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d123      	bne.n	8005a3e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80059f6:	88bb      	ldrh	r3, [r7, #4]
 80059f8:	3303      	adds	r3, #3
 80059fa:	089b      	lsrs	r3, r3, #2
 80059fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80059fe:	2300      	movs	r3, #0
 8005a00:	61bb      	str	r3, [r7, #24]
 8005a02:	e018      	b.n	8005a36 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a04:	79fb      	ldrb	r3, [r7, #7]
 8005a06:	031a      	lsls	r2, r3, #12
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a10:	461a      	mov	r2, r3
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	3301      	adds	r3, #1
 8005a22:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	3301      	adds	r3, #1
 8005a28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	3301      	adds	r3, #1
 8005a34:	61bb      	str	r3, [r7, #24]
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d3e2      	bcc.n	8005a04 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3724      	adds	r7, #36	; 0x24
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b08b      	sub	sp, #44	; 0x2c
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	4613      	mov	r3, r2
 8005a58:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a62:	88fb      	ldrh	r3, [r7, #6]
 8005a64:	089b      	lsrs	r3, r3, #2
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a6a:	88fb      	ldrh	r3, [r7, #6]
 8005a6c:	f003 0303 	and.w	r3, r3, #3
 8005a70:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a72:	2300      	movs	r3, #0
 8005a74:	623b      	str	r3, [r7, #32]
 8005a76:	e014      	b.n	8005aa2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a86:	3301      	adds	r3, #1
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	3301      	adds	r3, #1
 8005a94:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	3301      	adds	r3, #1
 8005a9a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	623b      	str	r3, [r7, #32]
 8005aa2:	6a3a      	ldr	r2, [r7, #32]
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d3e6      	bcc.n	8005a78 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005aaa:	8bfb      	ldrh	r3, [r7, #30]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d01e      	beq.n	8005aee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aba:	461a      	mov	r2, r3
 8005abc:	f107 0310 	add.w	r3, r7, #16
 8005ac0:	6812      	ldr	r2, [r2, #0]
 8005ac2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	701a      	strb	r2, [r3, #0]
      i++;
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	623b      	str	r3, [r7, #32]
      pDest++;
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	3301      	adds	r3, #1
 8005ae0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005ae2:	8bfb      	ldrh	r3, [r7, #30]
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ae8:	8bfb      	ldrh	r3, [r7, #30]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1ea      	bne.n	8005ac4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	372c      	adds	r7, #44	; 0x2c
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	4013      	ands	r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b14:	68fb      	ldr	r3, [r7, #12]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b085      	sub	sp, #20
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005b32:	78fb      	ldrb	r3, [r7, #3]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005b42:	78fb      	ldrb	r3, [r7, #3]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	4013      	ands	r3, r2
 8005b54:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b56:	68bb      	ldr	r3, [r7, #8]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	f003 0301 	and.w	r3, r3, #1
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005b98:	d901      	bls.n	8005b9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e01b      	b.n	8005bd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	daf2      	bge.n	8005b8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	f043 0201 	orr.w	r2, r3, #1
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005bc2:	d901      	bls.n	8005bc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e006      	b.n	8005bd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d0f0      	beq.n	8005bb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
	...

08005be4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005be4:	b084      	sub	sp, #16
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b086      	sub	sp, #24
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c04:	461a      	mov	r2, r3
 8005c06:	2300      	movs	r3, #0
 8005c08:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c26:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d119      	bne.n	8005c6e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005c3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d10a      	bne.n	8005c58 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c50:	f043 0304 	orr.w	r3, r3, #4
 8005c54:	6013      	str	r3, [r2, #0]
 8005c56:	e014      	b.n	8005c82 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c66:	f023 0304 	bic.w	r3, r3, #4
 8005c6a:	6013      	str	r3, [r2, #0]
 8005c6c:	e009      	b.n	8005c82 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c7c:	f023 0304 	bic.w	r3, r3, #4
 8005c80:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c82:	2110      	movs	r1, #16
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f7ff fe43 	bl	8005910 <USB_FlushTxFifo>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f7ff fe6d 	bl	8005974 <USB_FlushRxFifo>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	613b      	str	r3, [r7, #16]
 8005ca8:	e015      	b.n	8005cd6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8005cbc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cca:	461a      	mov	r2, r3
 8005ccc:	2300      	movs	r3, #0
 8005cce:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	613b      	str	r3, [r7, #16]
 8005cd6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005cda:	461a      	mov	r2, r3
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d3e3      	bcc.n	8005caa <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f04f 32ff 	mov.w	r2, #4294967295
 8005cee:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a18      	ldr	r2, [pc, #96]	; (8005d54 <USB_HostInit+0x170>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d10b      	bne.n	8005d10 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cfe:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a15      	ldr	r2, [pc, #84]	; (8005d58 <USB_HostInit+0x174>)
 8005d04:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a14      	ldr	r2, [pc, #80]	; (8005d5c <USB_HostInit+0x178>)
 8005d0a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005d0e:	e009      	b.n	8005d24 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2280      	movs	r2, #128	; 0x80
 8005d14:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a11      	ldr	r2, [pc, #68]	; (8005d60 <USB_HostInit+0x17c>)
 8005d1a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a11      	ldr	r2, [pc, #68]	; (8005d64 <USB_HostInit+0x180>)
 8005d20:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d105      	bne.n	8005d38 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	f043 0210 	orr.w	r2, r3, #16
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	699a      	ldr	r2, [r3, #24]
 8005d3c:	4b0a      	ldr	r3, [pc, #40]	; (8005d68 <USB_HostInit+0x184>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d50:	b004      	add	sp, #16
 8005d52:	4770      	bx	lr
 8005d54:	40040000 	.word	0x40040000
 8005d58:	01000200 	.word	0x01000200
 8005d5c:	00e00300 	.word	0x00e00300
 8005d60:	00600080 	.word	0x00600080
 8005d64:	004000e0 	.word	0x004000e0
 8005d68:	a3200008 	.word	0xa3200008

08005d6c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	460b      	mov	r3, r1
 8005d76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d8a:	f023 0303 	bic.w	r3, r3, #3
 8005d8e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	78fb      	ldrb	r3, [r7, #3]
 8005d9a:	f003 0303 	and.w	r3, r3, #3
 8005d9e:	68f9      	ldr	r1, [r7, #12]
 8005da0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005da4:	4313      	orrs	r3, r2
 8005da6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005da8:	78fb      	ldrb	r3, [r7, #3]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d107      	bne.n	8005dbe <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005db4:	461a      	mov	r2, r3
 8005db6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005dba:	6053      	str	r3, [r2, #4]
 8005dbc:	e00c      	b.n	8005dd8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005dbe:	78fb      	ldrb	r3, [r7, #3]
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d107      	bne.n	8005dd4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dca:	461a      	mov	r2, r3
 8005dcc:	f241 7370 	movw	r3, #6000	; 0x1770
 8005dd0:	6053      	str	r3, [r2, #4]
 8005dd2:	e001      	b.n	8005dd8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e000      	b.n	8005dda <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e06:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e14:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005e16:	2064      	movs	r0, #100	; 0x64
 8005e18:	f7fb f984 	bl	8001124 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e28:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005e2a:	200a      	movs	r0, #10
 8005e2c:	f7fb f97a 	bl	8001124 <HAL_Delay>

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b085      	sub	sp, #20
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	460b      	mov	r3, r1
 8005e44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e5e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d109      	bne.n	8005e7e <USB_DriveVbus+0x44>
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d106      	bne.n	8005e7e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e7c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e88:	d109      	bne.n	8005e9e <USB_DriveVbus+0x64>
 8005e8a:	78fb      	ldrb	r3, [r7, #3]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d106      	bne.n	8005e9e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e9c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	0c5b      	lsrs	r3, r3, #17
 8005eca:	f003 0303 	and.w	r3, r3, #3
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b085      	sub	sp, #20
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	b29b      	uxth	r3, r3
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3714      	adds	r7, #20
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b088      	sub	sp, #32
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	4608      	mov	r0, r1
 8005f06:	4611      	mov	r1, r2
 8005f08:	461a      	mov	r2, r3
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	70fb      	strb	r3, [r7, #3]
 8005f0e:	460b      	mov	r3, r1
 8005f10:	70bb      	strb	r3, [r7, #2]
 8005f12:	4613      	mov	r3, r2
 8005f14:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f16:	2300      	movs	r3, #0
 8005f18:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005f1e:	78fb      	ldrb	r3, [r7, #3]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f30:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005f32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d87c      	bhi.n	8006034 <USB_HC_Init+0x138>
 8005f3a:	a201      	add	r2, pc, #4	; (adr r2, 8005f40 <USB_HC_Init+0x44>)
 8005f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f40:	08005f51 	.word	0x08005f51
 8005f44:	08005ff7 	.word	0x08005ff7
 8005f48:	08005f51 	.word	0x08005f51
 8005f4c:	08005fb9 	.word	0x08005fb9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f50:	78fb      	ldrb	r3, [r7, #3]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005f62:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005f64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	da10      	bge.n	8005f8e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f6c:	78fb      	ldrb	r3, [r7, #3]
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	78fa      	ldrb	r2, [r7, #3]
 8005f7c:	0151      	lsls	r1, r2, #5
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	440a      	add	r2, r1
 8005f82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f8a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005f8c:	e055      	b.n	800603a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a6f      	ldr	r2, [pc, #444]	; (8006150 <USB_HC_Init+0x254>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d151      	bne.n	800603a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005f96:	78fb      	ldrb	r3, [r7, #3]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	78fa      	ldrb	r2, [r7, #3]
 8005fa6:	0151      	lsls	r1, r2, #5
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	440a      	add	r2, r1
 8005fac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fb0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005fb4:	60d3      	str	r3, [r2, #12]
      break;
 8005fb6:	e040      	b.n	800603a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fb8:	78fb      	ldrb	r3, [r7, #3]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	f240 639d 	movw	r3, #1693	; 0x69d
 8005fca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005fcc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	da34      	bge.n	800603e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005fd4:	78fb      	ldrb	r3, [r7, #3]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	78fa      	ldrb	r2, [r7, #3]
 8005fe4:	0151      	lsls	r1, r2, #5
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	440a      	add	r2, r1
 8005fea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ff2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005ff4:	e023      	b.n	800603e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ff6:	78fb      	ldrb	r3, [r7, #3]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006002:	461a      	mov	r2, r3
 8006004:	f240 2325 	movw	r3, #549	; 0x225
 8006008:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800600a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800600e:	2b00      	cmp	r3, #0
 8006010:	da17      	bge.n	8006042 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006012:	78fb      	ldrb	r3, [r7, #3]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	4413      	add	r3, r2
 800601a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	78fa      	ldrb	r2, [r7, #3]
 8006022:	0151      	lsls	r1, r2, #5
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	440a      	add	r2, r1
 8006028:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800602c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006030:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006032:	e006      	b.n	8006042 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	77fb      	strb	r3, [r7, #31]
      break;
 8006038:	e004      	b.n	8006044 <USB_HC_Init+0x148>
      break;
 800603a:	bf00      	nop
 800603c:	e002      	b.n	8006044 <USB_HC_Init+0x148>
      break;
 800603e:	bf00      	nop
 8006040:	e000      	b.n	8006044 <USB_HC_Init+0x148>
      break;
 8006042:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006044:	78fb      	ldrb	r3, [r7, #3]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	4413      	add	r3, r2
 800604c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006050:	461a      	mov	r2, r3
 8006052:	2300      	movs	r3, #0
 8006054:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006056:	78fb      	ldrb	r3, [r7, #3]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	4413      	add	r3, r2
 800605e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	78fa      	ldrb	r2, [r7, #3]
 8006066:	0151      	lsls	r1, r2, #5
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	440a      	add	r2, r1
 800606c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006070:	f043 0302 	orr.w	r3, r3, #2
 8006074:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800607c:	699a      	ldr	r2, [r3, #24]
 800607e:	78fb      	ldrb	r3, [r7, #3]
 8006080:	f003 030f 	and.w	r3, r3, #15
 8006084:	2101      	movs	r1, #1
 8006086:	fa01 f303 	lsl.w	r3, r1, r3
 800608a:	6939      	ldr	r1, [r7, #16]
 800608c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006090:	4313      	orrs	r3, r2
 8006092:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80060a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	da03      	bge.n	80060b0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80060a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ac:	61bb      	str	r3, [r7, #24]
 80060ae:	e001      	b.n	80060b4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f7ff fef9 	bl	8005eac <USB_GetHostSpeed>
 80060ba:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80060bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d106      	bne.n	80060d2 <USB_HC_Init+0x1d6>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d003      	beq.n	80060d2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80060ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060ce:	617b      	str	r3, [r7, #20]
 80060d0:	e001      	b.n	80060d6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80060d2:	2300      	movs	r3, #0
 80060d4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060d6:	787b      	ldrb	r3, [r7, #1]
 80060d8:	059b      	lsls	r3, r3, #22
 80060da:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80060de:	78bb      	ldrb	r3, [r7, #2]
 80060e0:	02db      	lsls	r3, r3, #11
 80060e2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060e6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80060e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060ec:	049b      	lsls	r3, r3, #18
 80060ee:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80060f2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80060f4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80060f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80060fa:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	431a      	orrs	r2, r3
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006104:	78fa      	ldrb	r2, [r7, #3]
 8006106:	0151      	lsls	r1, r2, #5
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	440a      	add	r2, r1
 800610c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006110:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006114:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006116:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800611a:	2b03      	cmp	r3, #3
 800611c:	d003      	beq.n	8006126 <USB_HC_Init+0x22a>
 800611e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006122:	2b01      	cmp	r3, #1
 8006124:	d10f      	bne.n	8006146 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006126:	78fb      	ldrb	r3, [r7, #3]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	4413      	add	r3, r2
 800612e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	78fa      	ldrb	r2, [r7, #3]
 8006136:	0151      	lsls	r1, r2, #5
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	440a      	add	r2, r1
 800613c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006140:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006144:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006146:	7ffb      	ldrb	r3, [r7, #31]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3720      	adds	r7, #32
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	40040000 	.word	0x40040000

08006154 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b08c      	sub	sp, #48	; 0x30
 8006158:	af02      	add	r7, sp, #8
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	4613      	mov	r3, r2
 8006160:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	785b      	ldrb	r3, [r3, #1]
 800616a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800616c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006170:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	4a5d      	ldr	r2, [pc, #372]	; (80062ec <USB_HC_StartXfer+0x198>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d12f      	bne.n	80061da <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800617a:	79fb      	ldrb	r3, [r7, #7]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d11c      	bne.n	80061ba <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	7c9b      	ldrb	r3, [r3, #18]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d003      	beq.n	8006190 <USB_HC_StartXfer+0x3c>
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	7c9b      	ldrb	r3, [r3, #18]
 800618c:	2b02      	cmp	r3, #2
 800618e:	d124      	bne.n	80061da <USB_HC_StartXfer+0x86>
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	799b      	ldrb	r3, [r3, #6]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d120      	bne.n	80061da <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	69fa      	ldr	r2, [r7, #28]
 80061a8:	0151      	lsls	r1, r2, #5
 80061aa:	6a3a      	ldr	r2, [r7, #32]
 80061ac:	440a      	add	r2, r1
 80061ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b6:	60d3      	str	r3, [r2, #12]
 80061b8:	e00f      	b.n	80061da <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	791b      	ldrb	r3, [r3, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10b      	bne.n	80061da <USB_HC_StartXfer+0x86>
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	795b      	ldrb	r3, [r3, #5]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d107      	bne.n	80061da <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	785b      	ldrb	r3, [r3, #1]
 80061ce:	4619      	mov	r1, r3
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 fb6b 	bl	80068ac <USB_DoPing>
        return HAL_OK;
 80061d6:	2300      	movs	r3, #0
 80061d8:	e232      	b.n	8006640 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	799b      	ldrb	r3, [r3, #6]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d158      	bne.n	8006294 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80061e2:	2301      	movs	r3, #1
 80061e4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	78db      	ldrb	r3, [r3, #3]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d007      	beq.n	80061fe <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	8a92      	ldrh	r2, [r2, #20]
 80061f4:	fb03 f202 	mul.w	r2, r3, r2
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	61da      	str	r2, [r3, #28]
 80061fc:	e07c      	b.n	80062f8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	7c9b      	ldrb	r3, [r3, #18]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d130      	bne.n	8006268 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	2bbc      	cmp	r3, #188	; 0xbc
 800620c:	d918      	bls.n	8006240 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	8a9b      	ldrh	r3, [r3, #20]
 8006212:	461a      	mov	r2, r3
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	69da      	ldr	r2, [r3, #28]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d003      	beq.n	8006230 <USB_HC_StartXfer+0xdc>
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	2b02      	cmp	r3, #2
 800622e:	d103      	bne.n	8006238 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2202      	movs	r2, #2
 8006234:	60da      	str	r2, [r3, #12]
 8006236:	e05f      	b.n	80062f8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2201      	movs	r2, #1
 800623c:	60da      	str	r2, [r3, #12]
 800623e:	e05b      	b.n	80062f8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	6a1a      	ldr	r2, [r3, #32]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d007      	beq.n	8006260 <USB_HC_StartXfer+0x10c>
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	2b02      	cmp	r3, #2
 8006256:	d003      	beq.n	8006260 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2204      	movs	r2, #4
 800625c:	60da      	str	r2, [r3, #12]
 800625e:	e04b      	b.n	80062f8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2203      	movs	r2, #3
 8006264:	60da      	str	r2, [r3, #12]
 8006266:	e047      	b.n	80062f8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006268:	79fb      	ldrb	r3, [r7, #7]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d10d      	bne.n	800628a <USB_HC_StartXfer+0x136>
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	8a92      	ldrh	r2, [r2, #20]
 8006276:	4293      	cmp	r3, r2
 8006278:	d907      	bls.n	800628a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800627a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	8a92      	ldrh	r2, [r2, #20]
 8006280:	fb03 f202 	mul.w	r2, r3, r2
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	61da      	str	r2, [r3, #28]
 8006288:	e036      	b.n	80062f8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	6a1a      	ldr	r2, [r3, #32]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	61da      	str	r2, [r3, #28]
 8006292:	e031      	b.n	80062f8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d018      	beq.n	80062ce <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	8a92      	ldrh	r2, [r2, #20]
 80062a4:	4413      	add	r3, r2
 80062a6:	3b01      	subs	r3, #1
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	8a92      	ldrh	r2, [r2, #20]
 80062ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80062b0:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 80062b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80062b4:	8b7b      	ldrh	r3, [r7, #26]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d90b      	bls.n	80062d2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80062ba:	8b7b      	ldrh	r3, [r7, #26]
 80062bc:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80062be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	8a92      	ldrh	r2, [r2, #20]
 80062c4:	fb03 f202 	mul.w	r2, r3, r2
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	61da      	str	r2, [r3, #28]
 80062cc:	e001      	b.n	80062d2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80062ce:	2301      	movs	r3, #1
 80062d0:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	78db      	ldrb	r3, [r3, #3]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00a      	beq.n	80062f0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80062da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	8a92      	ldrh	r2, [r2, #20]
 80062e0:	fb03 f202 	mul.w	r2, r3, r2
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	61da      	str	r2, [r3, #28]
 80062e8:	e006      	b.n	80062f8 <USB_HC_StartXfer+0x1a4>
 80062ea:	bf00      	nop
 80062ec:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	6a1a      	ldr	r2, [r3, #32]
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006300:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006302:	04d9      	lsls	r1, r3, #19
 8006304:	4ba3      	ldr	r3, [pc, #652]	; (8006594 <USB_HC_StartXfer+0x440>)
 8006306:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006308:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	7d9b      	ldrb	r3, [r3, #22]
 800630e:	075b      	lsls	r3, r3, #29
 8006310:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006314:	69f9      	ldr	r1, [r7, #28]
 8006316:	0148      	lsls	r0, r1, #5
 8006318:	6a39      	ldr	r1, [r7, #32]
 800631a:	4401      	add	r1, r0
 800631c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006320:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006322:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006324:	79fb      	ldrb	r3, [r7, #7]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d009      	beq.n	800633e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	6999      	ldr	r1, [r3, #24]
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	4413      	add	r3, r2
 8006336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800633a:	460a      	mov	r2, r1
 800633c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800633e:	6a3b      	ldr	r3, [r7, #32]
 8006340:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b00      	cmp	r3, #0
 800634c:	bf0c      	ite	eq
 800634e:	2301      	moveq	r3, #1
 8006350:	2300      	movne	r3, #0
 8006352:	b2db      	uxtb	r3, r3
 8006354:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	4413      	add	r3, r2
 800635e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	69fa      	ldr	r2, [r7, #28]
 8006366:	0151      	lsls	r1, r2, #5
 8006368:	6a3a      	ldr	r2, [r7, #32]
 800636a:	440a      	add	r2, r1
 800636c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006370:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006374:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	015a      	lsls	r2, r3, #5
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	4413      	add	r3, r2
 800637e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	7e7b      	ldrb	r3, [r7, #25]
 8006386:	075b      	lsls	r3, r3, #29
 8006388:	69f9      	ldr	r1, [r7, #28]
 800638a:	0148      	lsls	r0, r1, #5
 800638c:	6a39      	ldr	r1, [r7, #32]
 800638e:	4401      	add	r1, r0
 8006390:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006394:	4313      	orrs	r3, r2
 8006396:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	799b      	ldrb	r3, [r3, #6]
 800639c:	2b01      	cmp	r3, #1
 800639e:	f040 80c3 	bne.w	8006528 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	7c5b      	ldrb	r3, [r3, #17]
 80063a6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80063ac:	4313      	orrs	r3, r2
 80063ae:	69fa      	ldr	r2, [r7, #28]
 80063b0:	0151      	lsls	r1, r2, #5
 80063b2:	6a3a      	ldr	r2, [r7, #32]
 80063b4:	440a      	add	r2, r1
 80063b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80063ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80063be:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	015a      	lsls	r2, r3, #5
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	4413      	add	r3, r2
 80063c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	69fa      	ldr	r2, [r7, #28]
 80063d0:	0151      	lsls	r1, r2, #5
 80063d2:	6a3a      	ldr	r2, [r7, #32]
 80063d4:	440a      	add	r2, r1
 80063d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80063de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	79db      	ldrb	r3, [r3, #7]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d123      	bne.n	8006430 <USB_HC_StartXfer+0x2dc>
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	78db      	ldrb	r3, [r3, #3]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d11f      	bne.n	8006430 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	69fa      	ldr	r2, [r7, #28]
 8006400:	0151      	lsls	r1, r2, #5
 8006402:	6a3a      	ldr	r2, [r7, #32]
 8006404:	440a      	add	r2, r1
 8006406:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800640a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800640e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	4413      	add	r3, r2
 8006418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	0151      	lsls	r1, r2, #5
 8006422:	6a3a      	ldr	r2, [r7, #32]
 8006424:	440a      	add	r2, r1
 8006426:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800642a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800642e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	7c9b      	ldrb	r3, [r3, #18]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d003      	beq.n	8006440 <USB_HC_StartXfer+0x2ec>
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	7c9b      	ldrb	r3, [r3, #18]
 800643c:	2b03      	cmp	r3, #3
 800643e:	d117      	bne.n	8006470 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006444:	2b01      	cmp	r3, #1
 8006446:	d113      	bne.n	8006470 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	78db      	ldrb	r3, [r3, #3]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d10f      	bne.n	8006470 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	6a3b      	ldr	r3, [r7, #32]
 8006456:	4413      	add	r3, r2
 8006458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	69fa      	ldr	r2, [r7, #28]
 8006460:	0151      	lsls	r1, r2, #5
 8006462:	6a3a      	ldr	r2, [r7, #32]
 8006464:	440a      	add	r2, r1
 8006466:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800646a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800646e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	7c9b      	ldrb	r3, [r3, #18]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d162      	bne.n	800653e <USB_HC_StartXfer+0x3ea>
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	78db      	ldrb	r3, [r3, #3]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d15e      	bne.n	800653e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	3b01      	subs	r3, #1
 8006486:	2b03      	cmp	r3, #3
 8006488:	d858      	bhi.n	800653c <USB_HC_StartXfer+0x3e8>
 800648a:	a201      	add	r2, pc, #4	; (adr r2, 8006490 <USB_HC_StartXfer+0x33c>)
 800648c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006490:	080064a1 	.word	0x080064a1
 8006494:	080064c3 	.word	0x080064c3
 8006498:	080064e5 	.word	0x080064e5
 800649c:	08006507 	.word	0x08006507
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	69fa      	ldr	r2, [r7, #28]
 80064b0:	0151      	lsls	r1, r2, #5
 80064b2:	6a3a      	ldr	r2, [r7, #32]
 80064b4:	440a      	add	r2, r1
 80064b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064be:	6053      	str	r3, [r2, #4]
          break;
 80064c0:	e03d      	b.n	800653e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	015a      	lsls	r2, r3, #5
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	4413      	add	r3, r2
 80064ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	69fa      	ldr	r2, [r7, #28]
 80064d2:	0151      	lsls	r1, r2, #5
 80064d4:	6a3a      	ldr	r2, [r7, #32]
 80064d6:	440a      	add	r2, r1
 80064d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064dc:	f043 030e 	orr.w	r3, r3, #14
 80064e0:	6053      	str	r3, [r2, #4]
          break;
 80064e2:	e02c      	b.n	800653e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	69fa      	ldr	r2, [r7, #28]
 80064f4:	0151      	lsls	r1, r2, #5
 80064f6:	6a3a      	ldr	r2, [r7, #32]
 80064f8:	440a      	add	r2, r1
 80064fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006502:	6053      	str	r3, [r2, #4]
          break;
 8006504:	e01b      	b.n	800653e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	4413      	add	r3, r2
 800650e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	69fa      	ldr	r2, [r7, #28]
 8006516:	0151      	lsls	r1, r2, #5
 8006518:	6a3a      	ldr	r2, [r7, #32]
 800651a:	440a      	add	r2, r1
 800651c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006520:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006524:	6053      	str	r3, [r2, #4]
          break;
 8006526:	e00a      	b.n	800653e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	4413      	add	r3, r2
 8006530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006534:	461a      	mov	r2, r3
 8006536:	2300      	movs	r3, #0
 8006538:	6053      	str	r3, [r2, #4]
 800653a:	e000      	b.n	800653e <USB_HC_StartXfer+0x3ea>
          break;
 800653c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	4413      	add	r3, r2
 8006546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006554:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	78db      	ldrb	r3, [r3, #3]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d004      	beq.n	8006568 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006564:	613b      	str	r3, [r7, #16]
 8006566:	e003      	b.n	8006570 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800656e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006576:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	6a3b      	ldr	r3, [r7, #32]
 800657e:	4413      	add	r3, r2
 8006580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006584:	461a      	mov	r2, r3
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800658a:	79fb      	ldrb	r3, [r7, #7]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d003      	beq.n	8006598 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006590:	2300      	movs	r3, #0
 8006592:	e055      	b.n	8006640 <USB_HC_StartXfer+0x4ec>
 8006594:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	78db      	ldrb	r3, [r3, #3]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d14e      	bne.n	800663e <USB_HC_StartXfer+0x4ea>
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d04a      	beq.n	800663e <USB_HC_StartXfer+0x4ea>
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	79db      	ldrb	r3, [r3, #7]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d146      	bne.n	800663e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	7c9b      	ldrb	r3, [r3, #18]
 80065b4:	2b03      	cmp	r3, #3
 80065b6:	d831      	bhi.n	800661c <USB_HC_StartXfer+0x4c8>
 80065b8:	a201      	add	r2, pc, #4	; (adr r2, 80065c0 <USB_HC_StartXfer+0x46c>)
 80065ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065be:	bf00      	nop
 80065c0:	080065d1 	.word	0x080065d1
 80065c4:	080065f5 	.word	0x080065f5
 80065c8:	080065d1 	.word	0x080065d1
 80065cc:	080065f5 	.word	0x080065f5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	3303      	adds	r3, #3
 80065d6:	089b      	lsrs	r3, r3, #2
 80065d8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80065da:	8afa      	ldrh	r2, [r7, #22]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d91c      	bls.n	8006620 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	f043 0220 	orr.w	r2, r3, #32
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	619a      	str	r2, [r3, #24]
        }
        break;
 80065f2:	e015      	b.n	8006620 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	3303      	adds	r3, #3
 80065fa:	089b      	lsrs	r3, r3, #2
 80065fc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80065fe:	8afa      	ldrh	r2, [r7, #22]
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	b29b      	uxth	r3, r3
 800660a:	429a      	cmp	r2, r3
 800660c:	d90a      	bls.n	8006624 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	619a      	str	r2, [r3, #24]
        }
        break;
 800661a:	e003      	b.n	8006624 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800661c:	bf00      	nop
 800661e:	e002      	b.n	8006626 <USB_HC_StartXfer+0x4d2>
        break;
 8006620:	bf00      	nop
 8006622:	e000      	b.n	8006626 <USB_HC_StartXfer+0x4d2>
        break;
 8006624:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	6999      	ldr	r1, [r3, #24]
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	785a      	ldrb	r2, [r3, #1]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	b29b      	uxth	r3, r3
 8006634:	2000      	movs	r0, #0
 8006636:	9000      	str	r0, [sp, #0]
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f7ff f9c9 	bl	80059d0 <USB_WritePacket>
  }

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3728      	adds	r7, #40	; 0x28
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	b29b      	uxth	r3, r3
}
 800665e:	4618      	mov	r0, r3
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800666a:	b480      	push	{r7}
 800666c:	b089      	sub	sp, #36	; 0x24
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	460b      	mov	r3, r1
 8006674:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800667a:	78fb      	ldrb	r3, [r7, #3]
 800667c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800667e:	2300      	movs	r3, #0
 8006680:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	4413      	add	r3, r2
 800668a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	0c9b      	lsrs	r3, r3, #18
 8006692:	f003 0303 	and.w	r3, r3, #3
 8006696:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	015a      	lsls	r2, r3, #5
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	4413      	add	r3, r2
 80066a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	0fdb      	lsrs	r3, r3, #31
 80066a8:	f003 0301 	and.w	r3, r3, #1
 80066ac:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	015a      	lsls	r2, r3, #5
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	4413      	add	r3, r2
 80066b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	0fdb      	lsrs	r3, r3, #31
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f003 0320 	and.w	r3, r3, #32
 80066cc:	2b20      	cmp	r3, #32
 80066ce:	d10d      	bne.n	80066ec <USB_HC_Halt+0x82>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10a      	bne.n	80066ec <USB_HC_Halt+0x82>
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d005      	beq.n	80066e8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d002      	beq.n	80066e8 <USB_HC_Halt+0x7e>
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2b03      	cmp	r3, #3
 80066e6:	d101      	bne.n	80066ec <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80066e8:	2300      	movs	r3, #0
 80066ea:	e0d8      	b.n	800689e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d002      	beq.n	80066f8 <USB_HC_Halt+0x8e>
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d173      	bne.n	80067e0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	015a      	lsls	r2, r3, #5
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	4413      	add	r3, r2
 8006700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	0151      	lsls	r1, r2, #5
 800670a:	69fa      	ldr	r2, [r7, #28]
 800670c:	440a      	add	r2, r1
 800670e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006712:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006716:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f003 0320 	and.w	r3, r3, #32
 8006720:	2b00      	cmp	r3, #0
 8006722:	d14a      	bne.n	80067ba <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d133      	bne.n	8006798 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	015a      	lsls	r2, r3, #5
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	4413      	add	r3, r2
 8006738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	0151      	lsls	r1, r2, #5
 8006742:	69fa      	ldr	r2, [r7, #28]
 8006744:	440a      	add	r2, r1
 8006746:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800674a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800674e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	4413      	add	r3, r2
 8006758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	69ba      	ldr	r2, [r7, #24]
 8006760:	0151      	lsls	r1, r2, #5
 8006762:	69fa      	ldr	r2, [r7, #28]
 8006764:	440a      	add	r2, r1
 8006766:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800676a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800676e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	3301      	adds	r3, #1
 8006774:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800677c:	d82e      	bhi.n	80067dc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	015a      	lsls	r2, r3, #5
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	4413      	add	r3, r2
 8006786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006794:	d0ec      	beq.n	8006770 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006796:	e081      	b.n	800689c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	69ba      	ldr	r2, [r7, #24]
 80067a8:	0151      	lsls	r1, r2, #5
 80067aa:	69fa      	ldr	r2, [r7, #28]
 80067ac:	440a      	add	r2, r1
 80067ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067b6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067b8:	e070      	b.n	800689c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	015a      	lsls	r2, r3, #5
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	4413      	add	r3, r2
 80067c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	0151      	lsls	r1, r2, #5
 80067cc:	69fa      	ldr	r2, [r7, #28]
 80067ce:	440a      	add	r2, r1
 80067d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067d8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067da:	e05f      	b.n	800689c <USB_HC_Halt+0x232>
            break;
 80067dc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067de:	e05d      	b.n	800689c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	69ba      	ldr	r2, [r7, #24]
 80067f0:	0151      	lsls	r1, r2, #5
 80067f2:	69fa      	ldr	r2, [r7, #28]
 80067f4:	440a      	add	r2, r1
 80067f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067fe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d133      	bne.n	8006878 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	4413      	add	r3, r2
 8006818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	69ba      	ldr	r2, [r7, #24]
 8006820:	0151      	lsls	r1, r2, #5
 8006822:	69fa      	ldr	r2, [r7, #28]
 8006824:	440a      	add	r2, r1
 8006826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800682a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800682e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	4413      	add	r3, r2
 8006838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	0151      	lsls	r1, r2, #5
 8006842:	69fa      	ldr	r2, [r7, #28]
 8006844:	440a      	add	r2, r1
 8006846:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800684a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800684e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	3301      	adds	r3, #1
 8006854:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800685c:	d81d      	bhi.n	800689a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	4413      	add	r3, r2
 8006866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006870:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006874:	d0ec      	beq.n	8006850 <USB_HC_Halt+0x1e6>
 8006876:	e011      	b.n	800689c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	4413      	add	r3, r2
 8006880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	69ba      	ldr	r2, [r7, #24]
 8006888:	0151      	lsls	r1, r2, #5
 800688a:	69fa      	ldr	r2, [r7, #28]
 800688c:	440a      	add	r2, r1
 800688e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006892:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006896:	6013      	str	r3, [r2, #0]
 8006898:	e000      	b.n	800689c <USB_HC_Halt+0x232>
          break;
 800689a:	bf00      	nop
    }
  }

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3724      	adds	r7, #36	; 0x24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
	...

080068ac <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b087      	sub	sp, #28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	460b      	mov	r3, r1
 80068b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80068bc:	78fb      	ldrb	r3, [r7, #3]
 80068be:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80068c0:	2301      	movs	r3, #1
 80068c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	04da      	lsls	r2, r3, #19
 80068c8:	4b15      	ldr	r3, [pc, #84]	; (8006920 <USB_DoPing+0x74>)
 80068ca:	4013      	ands	r3, r2
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	0151      	lsls	r1, r2, #5
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	440a      	add	r2, r1
 80068d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068dc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	015a      	lsls	r2, r3, #5
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	4413      	add	r3, r2
 80068e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068f4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068fc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	4413      	add	r3, r2
 8006906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800690a:	461a      	mov	r2, r3
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	371c      	adds	r7, #28
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	1ff80000 	.word	0x1ff80000

08006924 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b088      	sub	sp, #32
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800692c:	2300      	movs	r3, #0
 800692e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006934:	2300      	movs	r3, #0
 8006936:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f7fe ff8c 	bl	8005856 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800693e:	2110      	movs	r1, #16
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7fe ffe5 	bl	8005910 <USB_FlushTxFifo>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d001      	beq.n	8006950 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7ff f80f 	bl	8005974 <USB_FlushRxFifo>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d001      	beq.n	8006960 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006960:	2300      	movs	r3, #0
 8006962:	61bb      	str	r3, [r7, #24]
 8006964:	e01f      	b.n	80069a6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	4413      	add	r3, r2
 800696e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800697c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006984:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800698c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	015a      	lsls	r2, r3, #5
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	4413      	add	r3, r2
 8006996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800699a:	461a      	mov	r2, r3
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	3301      	adds	r3, #1
 80069a4:	61bb      	str	r3, [r7, #24]
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	2b0f      	cmp	r3, #15
 80069aa:	d9dc      	bls.n	8006966 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80069ac:	2300      	movs	r3, #0
 80069ae:	61bb      	str	r3, [r7, #24]
 80069b0:	e034      	b.n	8006a1c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069c8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069d0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069d8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069e6:	461a      	mov	r2, r3
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	3301      	adds	r3, #1
 80069f0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069f8:	d80c      	bhi.n	8006a14 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a10:	d0ec      	beq.n	80069ec <USB_StopHost+0xc8>
 8006a12:	e000      	b.n	8006a16 <USB_StopHost+0xf2>
        break;
 8006a14:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	61bb      	str	r3, [r7, #24]
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	2b0f      	cmp	r3, #15
 8006a20:	d9c7      	bls.n	80069b2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a28:	461a      	mov	r2, r3
 8006a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a2e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f04f 32ff 	mov.w	r2, #4294967295
 8006a36:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f7fe fefb 	bl	8005834 <USB_EnableGlobalInt>

  return ret;
 8006a3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3720      	adds	r7, #32
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006a48:	b590      	push	{r4, r7, lr}
 8006a4a:	b089      	sub	sp, #36	; 0x24
 8006a4c:	af04      	add	r7, sp, #16
 8006a4e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006a50:	2301      	movs	r3, #1
 8006a52:	2202      	movs	r2, #2
 8006a54:	2102      	movs	r1, #2
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fcd7 	bl	800740a <USBH_FindInterface>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
 8006a62:	2bff      	cmp	r3, #255	; 0xff
 8006a64:	d002      	beq.n	8006a6c <USBH_CDC_InterfaceInit+0x24>
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d901      	bls.n	8006a70 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	e13d      	b.n	8006cec <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	4619      	mov	r1, r3
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fcac 	bl	80073d2 <USBH_SelectInterface>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006a7e:	7bbb      	ldrb	r3, [r7, #14]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d001      	beq.n	8006a88 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006a84:	2302      	movs	r3, #2
 8006a86:	e131      	b.n	8006cec <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006a8e:	2050      	movs	r0, #80	; 0x50
 8006a90:	f005 fcd0 	bl	800c434 <malloc>
 8006a94:	4603      	mov	r3, r0
 8006a96:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a9e:	69db      	ldr	r3, [r3, #28]
 8006aa0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d101      	bne.n	8006aac <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	e11f      	b.n	8006cec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006aac:	2250      	movs	r2, #80	; 0x50
 8006aae:	2100      	movs	r1, #0
 8006ab0:	68b8      	ldr	r0, [r7, #8]
 8006ab2:	f005 fd7b 	bl	800c5ac <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	211a      	movs	r1, #26
 8006abc:	fb01 f303 	mul.w	r3, r1, r3
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	b25b      	sxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	da15      	bge.n	8006afa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ace:	7bfb      	ldrb	r3, [r7, #15]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	211a      	movs	r1, #26
 8006ad4:	fb01 f303 	mul.w	r3, r1, r3
 8006ad8:	4413      	add	r3, r2
 8006ada:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ade:	781a      	ldrb	r2, [r3, #0]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ae4:	7bfb      	ldrb	r3, [r7, #15]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	211a      	movs	r1, #26
 8006aea:	fb01 f303 	mul.w	r3, r1, r3
 8006aee:	4413      	add	r3, r2
 8006af0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006af4:	881a      	ldrh	r2, [r3, #0]
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	785b      	ldrb	r3, [r3, #1]
 8006afe:	4619      	mov	r1, r3
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f002 fa2a 	bl	8008f5a <USBH_AllocPipe>
 8006b06:	4603      	mov	r3, r0
 8006b08:	461a      	mov	r2, r3
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	7819      	ldrb	r1, [r3, #0]
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	7858      	ldrb	r0, [r3, #1]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	8952      	ldrh	r2, [r2, #10]
 8006b26:	9202      	str	r2, [sp, #8]
 8006b28:	2203      	movs	r2, #3
 8006b2a:	9201      	str	r2, [sp, #4]
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	4623      	mov	r3, r4
 8006b30:	4602      	mov	r2, r0
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f002 f9e2 	bl	8008efc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f005 fbf1 	bl	800c328 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006b46:	2300      	movs	r3, #0
 8006b48:	2200      	movs	r2, #0
 8006b4a:	210a      	movs	r1, #10
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fc5c 	bl	800740a <USBH_FindInterface>
 8006b52:	4603      	mov	r3, r0
 8006b54:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
 8006b58:	2bff      	cmp	r3, #255	; 0xff
 8006b5a:	d002      	beq.n	8006b62 <USBH_CDC_InterfaceInit+0x11a>
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d901      	bls.n	8006b66 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006b62:	2302      	movs	r3, #2
 8006b64:	e0c2      	b.n	8006cec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	211a      	movs	r1, #26
 8006b6c:	fb01 f303 	mul.w	r3, r1, r3
 8006b70:	4413      	add	r3, r2
 8006b72:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	b25b      	sxtb	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	da16      	bge.n	8006bac <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	211a      	movs	r1, #26
 8006b84:	fb01 f303 	mul.w	r3, r1, r3
 8006b88:	4413      	add	r3, r2
 8006b8a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b8e:	781a      	ldrb	r2, [r3, #0]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	211a      	movs	r1, #26
 8006b9a:	fb01 f303 	mul.w	r3, r1, r3
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ba4:	881a      	ldrh	r2, [r3, #0]
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	835a      	strh	r2, [r3, #26]
 8006baa:	e015      	b.n	8006bd8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	211a      	movs	r1, #26
 8006bb2:	fb01 f303 	mul.w	r3, r1, r3
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006bbc:	781a      	ldrb	r2, [r3, #0]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006bc2:	7bfb      	ldrb	r3, [r7, #15]
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	211a      	movs	r1, #26
 8006bc8:	fb01 f303 	mul.w	r3, r1, r3
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006bd2:	881a      	ldrh	r2, [r3, #0]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	211a      	movs	r1, #26
 8006bde:	fb01 f303 	mul.w	r3, r1, r3
 8006be2:	4413      	add	r3, r2
 8006be4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	b25b      	sxtb	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	da16      	bge.n	8006c1e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	211a      	movs	r1, #26
 8006bf6:	fb01 f303 	mul.w	r3, r1, r3
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006c00:	781a      	ldrb	r2, [r3, #0]
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	211a      	movs	r1, #26
 8006c0c:	fb01 f303 	mul.w	r3, r1, r3
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006c16:	881a      	ldrh	r2, [r3, #0]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	835a      	strh	r2, [r3, #26]
 8006c1c:	e015      	b.n	8006c4a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	211a      	movs	r1, #26
 8006c24:	fb01 f303 	mul.w	r3, r1, r3
 8006c28:	4413      	add	r3, r2
 8006c2a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006c2e:	781a      	ldrb	r2, [r3, #0]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c34:	7bfb      	ldrb	r3, [r7, #15]
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	211a      	movs	r1, #26
 8006c3a:	fb01 f303 	mul.w	r3, r1, r3
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006c44:	881a      	ldrh	r2, [r3, #0]
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	7b9b      	ldrb	r3, [r3, #14]
 8006c4e:	4619      	mov	r1, r3
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f002 f982 	bl	8008f5a <USBH_AllocPipe>
 8006c56:	4603      	mov	r3, r0
 8006c58:	461a      	mov	r2, r3
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	7bdb      	ldrb	r3, [r3, #15]
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f002 f978 	bl	8008f5a <USBH_AllocPipe>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	7b59      	ldrb	r1, [r3, #13]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	7b98      	ldrb	r0, [r3, #14]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	8b12      	ldrh	r2, [r2, #24]
 8006c8a:	9202      	str	r2, [sp, #8]
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	9201      	str	r2, [sp, #4]
 8006c90:	9300      	str	r3, [sp, #0]
 8006c92:	4623      	mov	r3, r4
 8006c94:	4602      	mov	r2, r0
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f002 f930 	bl	8008efc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	7b19      	ldrb	r1, [r3, #12]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	7bd8      	ldrb	r0, [r3, #15]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	8b52      	ldrh	r2, [r2, #26]
 8006cb4:	9202      	str	r2, [sp, #8]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	9201      	str	r2, [sp, #4]
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	4623      	mov	r3, r4
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f002 f91b 	bl	8008efc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	7b5b      	ldrb	r3, [r3, #13]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f005 fb26 	bl	800c328 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	7b1b      	ldrb	r3, [r3, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f005 fb1f 	bl	800c328 <USBH_LL_SetToggle>

  return USBH_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd90      	pop	{r4, r7, pc}

08006cf4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d02:	69db      	ldr	r3, [r3, #28]
 8006d04:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00e      	beq.n	8006d2c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	4619      	mov	r1, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f002 f910 	bl	8008f3a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f002 f93b 	bl	8008f9c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	7b1b      	ldrb	r3, [r3, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00e      	beq.n	8006d52 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	7b1b      	ldrb	r3, [r3, #12]
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f002 f8fd 	bl	8008f3a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	7b1b      	ldrb	r3, [r3, #12]
 8006d44:	4619      	mov	r1, r3
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f002 f928 	bl	8008f9c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	7b5b      	ldrb	r3, [r3, #13]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00e      	beq.n	8006d78 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	7b5b      	ldrb	r3, [r3, #13]
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f002 f8ea 	bl	8008f3a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	7b5b      	ldrb	r3, [r3, #13]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f002 f915 	bl	8008f9c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d7e:	69db      	ldr	r3, [r3, #28]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00b      	beq.n	8006d9c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d8a:	69db      	ldr	r3, [r3, #28]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f005 fb59 	bl	800c444 <free>
    phost->pActiveClass->pData = 0U;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d98:	2200      	movs	r2, #0
 8006d9a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b084      	sub	sp, #16
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006db4:	69db      	ldr	r3, [r3, #28]
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	3340      	adds	r3, #64	; 0x40
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f8b1 	bl	8006f26 <GetLineCoding>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006dc8:	7afb      	ldrb	r3, [r7, #11]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d105      	bne.n	8006dda <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dd4:	2102      	movs	r1, #2
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006dda:	7afb      	ldrb	r3, [r7, #11]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006dec:	2301      	movs	r3, #1
 8006dee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006df0:	2300      	movs	r3, #0
 8006df2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dfa:	69db      	ldr	r3, [r3, #28]
 8006dfc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006e04:	2b04      	cmp	r3, #4
 8006e06:	d877      	bhi.n	8006ef8 <USBH_CDC_Process+0x114>
 8006e08:	a201      	add	r2, pc, #4	; (adr r2, 8006e10 <USBH_CDC_Process+0x2c>)
 8006e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0e:	bf00      	nop
 8006e10:	08006e25 	.word	0x08006e25
 8006e14:	08006e2b 	.word	0x08006e2b
 8006e18:	08006e5b 	.word	0x08006e5b
 8006e1c:	08006ecf 	.word	0x08006ecf
 8006e20:	08006edd 	.word	0x08006edd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006e24:	2300      	movs	r3, #0
 8006e26:	73fb      	strb	r3, [r7, #15]
      break;
 8006e28:	e06d      	b.n	8006f06 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e2e:	4619      	mov	r1, r3
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f897 	bl	8006f64 <SetLineCoding>
 8006e36:	4603      	mov	r3, r0
 8006e38:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e3a:	7bbb      	ldrb	r3, [r7, #14]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d104      	bne.n	8006e4a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2202      	movs	r2, #2
 8006e44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006e48:	e058      	b.n	8006efc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006e4a:	7bbb      	ldrb	r3, [r7, #14]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d055      	beq.n	8006efc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	2204      	movs	r2, #4
 8006e54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006e58:	e050      	b.n	8006efc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	3340      	adds	r3, #64	; 0x40
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f860 	bl	8006f26 <GetLineCoding>
 8006e66:	4603      	mov	r3, r0
 8006e68:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e6a:	7bbb      	ldrb	r3, [r7, #14]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d126      	bne.n	8006ebe <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e82:	791b      	ldrb	r3, [r3, #4]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d13b      	bne.n	8006f00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e92:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d133      	bne.n	8006f00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d12b      	bne.n	8006f00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eb0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d124      	bne.n	8006f00 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f982 	bl	80071c0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006ebc:	e020      	b.n	8006f00 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006ebe:	7bbb      	ldrb	r3, [r7, #14]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d01d      	beq.n	8006f00 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	2204      	movs	r2, #4
 8006ec8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006ecc:	e018      	b.n	8006f00 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f867 	bl	8006fa2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f8f6 	bl	80070c6 <CDC_ProcessReception>
      break;
 8006eda:	e014      	b.n	8006f06 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006edc:	2100      	movs	r1, #0
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f001 f98e 	bl	8008200 <USBH_ClrFeature>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ee8:	7bbb      	ldrb	r3, [r7, #14]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10a      	bne.n	8006f04 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006ef6:	e005      	b.n	8006f04 <USBH_CDC_Process+0x120>

    default:
      break;
 8006ef8:	bf00      	nop
 8006efa:	e004      	b.n	8006f06 <USBH_CDC_Process+0x122>
      break;
 8006efc:	bf00      	nop
 8006efe:	e002      	b.n	8006f06 <USBH_CDC_Process+0x122>
      break;
 8006f00:	bf00      	nop
 8006f02:	e000      	b.n	8006f06 <USBH_CDC_Process+0x122>
      break;
 8006f04:	bf00      	nop

  }

  return status;
 8006f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b082      	sub	sp, #8
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	22a1      	movs	r2, #161	; 0xa1
 8006f34:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2221      	movs	r2, #33	; 0x21
 8006f3a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2207      	movs	r2, #7
 8006f4c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	2207      	movs	r2, #7
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 fc8f 	bl	8008878 <USBH_CtlReq>
 8006f5a:	4603      	mov	r3, r0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2221      	movs	r2, #33	; 0x21
 8006f72:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2220      	movs	r2, #32
 8006f78:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2207      	movs	r2, #7
 8006f8a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	2207      	movs	r2, #7
 8006f90:	4619      	mov	r1, r3
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f001 fc70 	bl	8008878 <USBH_CtlReq>
 8006f98:	4603      	mov	r3, r0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b086      	sub	sp, #24
 8006fa6:	af02      	add	r7, sp, #8
 8006fa8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fb0:	69db      	ldr	r3, [r3, #28]
 8006fb2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d002      	beq.n	8006fc8 <CDC_ProcessTransmission+0x26>
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d023      	beq.n	800700e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006fc6:	e07a      	b.n	80070be <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	8b12      	ldrh	r2, [r2, #24]
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d90b      	bls.n	8006fec <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	69d9      	ldr	r1, [r3, #28]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8b1a      	ldrh	r2, [r3, #24]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	7b5b      	ldrb	r3, [r3, #13]
 8006fe0:	2001      	movs	r0, #1
 8006fe2:	9000      	str	r0, [sp, #0]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f001 ff46 	bl	8008e76 <USBH_BulkSendData>
 8006fea:	e00b      	b.n	8007004 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	7b5b      	ldrb	r3, [r3, #13]
 8006ffa:	2001      	movs	r0, #1
 8006ffc:	9000      	str	r0, [sp, #0]
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f001 ff39 	bl	8008e76 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2202      	movs	r2, #2
 8007008:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800700c:	e057      	b.n	80070be <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	7b5b      	ldrb	r3, [r3, #13]
 8007012:	4619      	mov	r1, r3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f005 f95d 	bl	800c2d4 <USBH_LL_GetURBState>
 800701a:	4603      	mov	r3, r0
 800701c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800701e:	7afb      	ldrb	r3, [r7, #11]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d136      	bne.n	8007092 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	8b12      	ldrh	r2, [r2, #24]
 800702c:	4293      	cmp	r3, r2
 800702e:	d90e      	bls.n	800704e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	8b12      	ldrh	r2, [r2, #24]
 8007038:	1a9a      	subs	r2, r3, r2
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	8b12      	ldrh	r2, [r2, #24]
 8007046:	441a      	add	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	61da      	str	r2, [r3, #28]
 800704c:	e002      	b.n	8007054 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007058:	2b00      	cmp	r3, #0
 800705a:	d004      	beq.n	8007066 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8007064:	e006      	b.n	8007074 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f892 	bl	8007198 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2204      	movs	r2, #4
 8007078:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007088:	2200      	movs	r2, #0
 800708a:	4619      	mov	r1, r3
 800708c:	f002 f882 	bl	8009194 <osMessagePut>
      break;
 8007090:	e014      	b.n	80070bc <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8007092:	7afb      	ldrb	r3, [r7, #11]
 8007094:	2b02      	cmp	r3, #2
 8007096:	d111      	bne.n	80070bc <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2204      	movs	r2, #4
 80070a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80070b4:	2200      	movs	r2, #0
 80070b6:	4619      	mov	r1, r3
 80070b8:	f002 f86c 	bl	8009194 <osMessagePut>
      break;
 80070bc:	bf00      	nop
  }
}
 80070be:	bf00      	nop
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b086      	sub	sp, #24
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80070d8:	2300      	movs	r3, #0
 80070da:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d002      	beq.n	80070ec <CDC_ProcessReception+0x26>
 80070e6:	2b04      	cmp	r3, #4
 80070e8:	d00e      	beq.n	8007108 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80070ea:	e051      	b.n	8007190 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	6a19      	ldr	r1, [r3, #32]
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	8b5a      	ldrh	r2, [r3, #26]
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	7b1b      	ldrb	r3, [r3, #12]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f001 fee1 	bl	8008ec0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	2204      	movs	r2, #4
 8007102:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007106:	e043      	b.n	8007190 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	7b1b      	ldrb	r3, [r3, #12]
 800710c:	4619      	mov	r1, r3
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f005 f8e0 	bl	800c2d4 <USBH_LL_GetURBState>
 8007114:	4603      	mov	r3, r0
 8007116:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007118:	7cfb      	ldrb	r3, [r7, #19]
 800711a:	2b01      	cmp	r3, #1
 800711c:	d137      	bne.n	800718e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	7b1b      	ldrb	r3, [r3, #12]
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f005 f843 	bl	800c1b0 <USBH_LL_GetLastXferSize>
 800712a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	429a      	cmp	r2, r3
 8007134:	d016      	beq.n	8007164 <CDC_ProcessReception+0x9e>
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	8b5b      	ldrh	r3, [r3, #26]
 800713a:	461a      	mov	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4293      	cmp	r3, r2
 8007140:	d910      	bls.n	8007164 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	1ad2      	subs	r2, r2, r3
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	6a1a      	ldr	r2, [r3, #32]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	441a      	add	r2, r3
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2203      	movs	r2, #3
 800715e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8007162:	e006      	b.n	8007172 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f81d 	bl	80071ac <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2204      	movs	r2, #4
 8007176:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007186:	2200      	movs	r2, #0
 8007188:	4619      	mov	r1, r3
 800718a:	f002 f803 	bl	8009194 <osMessagePut>
      break;
 800718e:	bf00      	nop
  }
}
 8007190:	bf00      	nop
 8007192:	3718      	adds	r7, #24
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80071c8:	bf00      	nop
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80071d4:	b5b0      	push	{r4, r5, r7, lr}
 80071d6:	b090      	sub	sp, #64	; 0x40
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	4613      	mov	r3, r2
 80071e0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80071e8:	2302      	movs	r3, #2
 80071ea:	e04d      	b.n	8007288 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	79fa      	ldrb	r2, [r7, #7]
 80071f0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 f847 	bl	8007298 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d003      	beq.n	8007238 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8007238:	4b15      	ldr	r3, [pc, #84]	; (8007290 <USBH_Init+0xbc>)
 800723a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800723e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007240:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8007244:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007248:	2100      	movs	r1, #0
 800724a:	4618      	mov	r0, r3
 800724c:	f001 ff79 	bl	8009142 <osMessageCreate>
 8007250:	4602      	mov	r2, r0
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8007258:	4b0e      	ldr	r3, [pc, #56]	; (8007294 <USBH_Init+0xc0>)
 800725a:	f107 0414 	add.w	r4, r7, #20
 800725e:	461d      	mov	r5, r3
 8007260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007264:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007268:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800726c:	f107 0314 	add.w	r3, r7, #20
 8007270:	68f9      	ldr	r1, [r7, #12]
 8007272:	4618      	mov	r0, r3
 8007274:	f001 ff05 	bl	8009082 <osThreadCreate>
 8007278:	4602      	mov	r2, r0
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f004 fee1 	bl	800c048 <USBH_LL_Init>

  return USBH_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3740      	adds	r7, #64	; 0x40
 800728c:	46bd      	mov	sp, r7
 800728e:	bdb0      	pop	{r4, r5, r7, pc}
 8007290:	0800c7f8 	.word	0x0800c7f8
 8007294:	0800c814 	.word	0x0800c814

08007298 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80072a4:	2300      	movs	r3, #0
 80072a6:	60fb      	str	r3, [r7, #12]
 80072a8:	e009      	b.n	80072be <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	33e0      	adds	r3, #224	; 0xe0
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	4413      	add	r3, r2
 80072b4:	2200      	movs	r2, #0
 80072b6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	3301      	adds	r3, #1
 80072bc:	60fb      	str	r3, [r7, #12]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2b0f      	cmp	r3, #15
 80072c2:	d9f2      	bls.n	80072aa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80072c4:	2300      	movs	r3, #0
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	e009      	b.n	80072de <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80072d4:	2200      	movs	r2, #0
 80072d6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	3301      	adds	r3, #1
 80072dc:	60fb      	str	r3, [r7, #12]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072e4:	d3f1      	bcc.n	80072ca <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2240      	movs	r2, #64	; 0x40
 800730a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2201      	movs	r2, #1
 800731e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	331c      	adds	r3, #28
 8007336:	f44f 7280 	mov.w	r2, #256	; 0x100
 800733a:	2100      	movs	r1, #0
 800733c:	4618      	mov	r0, r3
 800733e:	f005 f935 	bl	800c5ac <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800734c:	2100      	movs	r1, #0
 800734e:	4618      	mov	r0, r3
 8007350:	f005 f92c 	bl	800c5ac <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f203 3326 	addw	r3, r3, #806	; 0x326
 800735a:	2212      	movs	r2, #18
 800735c:	2100      	movs	r1, #0
 800735e:	4618      	mov	r0, r3
 8007360:	f005 f924 	bl	800c5ac <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800736a:	223e      	movs	r2, #62	; 0x3e
 800736c:	2100      	movs	r1, #0
 800736e:	4618      	mov	r0, r3
 8007370:	f005 f91c 	bl	800c5ac <memset>

  return USBH_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800737e:	b480      	push	{r7}
 8007380:	b085      	sub	sp, #20
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007388:	2300      	movs	r3, #0
 800738a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d016      	beq.n	80073c0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007398:	2b00      	cmp	r3, #0
 800739a:	d10e      	bne.n	80073ba <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80073a2:	1c59      	adds	r1, r3, #1
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	33de      	adds	r3, #222	; 0xde
 80073ae:	6839      	ldr	r1, [r7, #0]
 80073b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80073b4:	2300      	movs	r3, #0
 80073b6:	73fb      	strb	r3, [r7, #15]
 80073b8:	e004      	b.n	80073c4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80073ba:	2302      	movs	r3, #2
 80073bc:	73fb      	strb	r3, [r7, #15]
 80073be:	e001      	b.n	80073c4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80073c0:	2302      	movs	r3, #2
 80073c2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80073d2:	b480      	push	{r7}
 80073d4:	b085      	sub	sp, #20
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
 80073da:	460b      	mov	r3, r1
 80073dc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80073de:	2300      	movs	r3, #0
 80073e0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80073e8:	78fa      	ldrb	r2, [r7, #3]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d204      	bcs.n	80073f8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	78fa      	ldrb	r2, [r7, #3]
 80073f2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80073f6:	e001      	b.n	80073fc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80073f8:	2302      	movs	r3, #2
 80073fa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3714      	adds	r7, #20
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800740a:	b480      	push	{r7}
 800740c:	b087      	sub	sp, #28
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	4608      	mov	r0, r1
 8007414:	4611      	mov	r1, r2
 8007416:	461a      	mov	r2, r3
 8007418:	4603      	mov	r3, r0
 800741a:	70fb      	strb	r3, [r7, #3]
 800741c:	460b      	mov	r3, r1
 800741e:	70bb      	strb	r3, [r7, #2]
 8007420:	4613      	mov	r3, r2
 8007422:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007424:	2300      	movs	r3, #0
 8007426:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007428:	2300      	movs	r3, #0
 800742a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007432:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007434:	e025      	b.n	8007482 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007436:	7dfb      	ldrb	r3, [r7, #23]
 8007438:	221a      	movs	r2, #26
 800743a:	fb02 f303 	mul.w	r3, r2, r3
 800743e:	3308      	adds	r3, #8
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	4413      	add	r3, r2
 8007444:	3302      	adds	r3, #2
 8007446:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	795b      	ldrb	r3, [r3, #5]
 800744c:	78fa      	ldrb	r2, [r7, #3]
 800744e:	429a      	cmp	r2, r3
 8007450:	d002      	beq.n	8007458 <USBH_FindInterface+0x4e>
 8007452:	78fb      	ldrb	r3, [r7, #3]
 8007454:	2bff      	cmp	r3, #255	; 0xff
 8007456:	d111      	bne.n	800747c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800745c:	78ba      	ldrb	r2, [r7, #2]
 800745e:	429a      	cmp	r2, r3
 8007460:	d002      	beq.n	8007468 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007462:	78bb      	ldrb	r3, [r7, #2]
 8007464:	2bff      	cmp	r3, #255	; 0xff
 8007466:	d109      	bne.n	800747c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800746c:	787a      	ldrb	r2, [r7, #1]
 800746e:	429a      	cmp	r2, r3
 8007470:	d002      	beq.n	8007478 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007472:	787b      	ldrb	r3, [r7, #1]
 8007474:	2bff      	cmp	r3, #255	; 0xff
 8007476:	d101      	bne.n	800747c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007478:	7dfb      	ldrb	r3, [r7, #23]
 800747a:	e006      	b.n	800748a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800747c:	7dfb      	ldrb	r3, [r7, #23]
 800747e:	3301      	adds	r3, #1
 8007480:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007482:	7dfb      	ldrb	r3, [r7, #23]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d9d6      	bls.n	8007436 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007488:	23ff      	movs	r3, #255	; 0xff
}
 800748a:	4618      	mov	r0, r3
 800748c:	371c      	adds	r7, #28
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b082      	sub	sp, #8
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f004 fe0e 	bl	800c0c0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80074a4:	2101      	movs	r1, #1
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f004 ff27 	bl	800c2fa <USBH_LL_DriverVBUS>

  return USBH_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
	...

080074b8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b088      	sub	sp, #32
 80074bc:	af04      	add	r7, sp, #16
 80074be:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80074c0:	2302      	movs	r3, #2
 80074c2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80074c4:	2300      	movs	r3, #0
 80074c6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d102      	bne.n	80074da <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2203      	movs	r2, #3
 80074d8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b0b      	cmp	r3, #11
 80074e2:	f200 8247 	bhi.w	8007974 <USBH_Process+0x4bc>
 80074e6:	a201      	add	r2, pc, #4	; (adr r2, 80074ec <USBH_Process+0x34>)
 80074e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ec:	0800751d 	.word	0x0800751d
 80074f0:	0800756b 	.word	0x0800756b
 80074f4:	080075ef 	.word	0x080075ef
 80074f8:	080078f3 	.word	0x080078f3
 80074fc:	08007975 	.word	0x08007975
 8007500:	080076af 	.word	0x080076af
 8007504:	0800787d 	.word	0x0800787d
 8007508:	08007701 	.word	0x08007701
 800750c:	0800773d 	.word	0x0800773d
 8007510:	08007777 	.word	0x08007777
 8007514:	080077d5 	.word	0x080077d5
 8007518:	080078db 	.word	0x080078db
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b00      	cmp	r3, #0
 8007526:	f000 8227 	beq.w	8007978 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007530:	20c8      	movs	r0, #200	; 0xc8
 8007532:	f004 ff2c 	bl	800c38e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f004 fe1f 	bl	800c17a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007560:	2200      	movs	r2, #0
 8007562:	4619      	mov	r1, r3
 8007564:	f001 fe16 	bl	8009194 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007568:	e206      	b.n	8007978 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007570:	2b01      	cmp	r3, #1
 8007572:	d107      	bne.n	8007584 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2202      	movs	r2, #2
 8007580:	701a      	strb	r2, [r3, #0]
 8007582:	e025      	b.n	80075d0 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800758a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800758e:	d914      	bls.n	80075ba <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007596:	3301      	adds	r3, #1
 8007598:	b2da      	uxtb	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80075a6:	2b03      	cmp	r3, #3
 80075a8:	d903      	bls.n	80075b2 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	220d      	movs	r2, #13
 80075ae:	701a      	strb	r2, [r3, #0]
 80075b0:	e00e      	b.n	80075d0 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	701a      	strb	r2, [r3, #0]
 80075b8:	e00a      	b.n	80075d0 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80075c0:	f103 020a 	add.w	r2, r3, #10
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80075ca:	200a      	movs	r0, #10
 80075cc:	f004 fedf 	bl	800c38e <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80075e4:	2200      	movs	r2, #0
 80075e6:	4619      	mov	r1, r3
 80075e8:	f001 fdd4 	bl	8009194 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075ec:	e1cb      	b.n	8007986 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d005      	beq.n	8007604 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075fe:	2104      	movs	r1, #4
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007604:	2064      	movs	r0, #100	; 0x64
 8007606:	f004 fec2 	bl	800c38e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f004 fd8e 	bl	800c12c <USBH_LL_GetSpeed>
 8007610:	4603      	mov	r3, r0
 8007612:	461a      	mov	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2205      	movs	r2, #5
 800761e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007620:	2100      	movs	r1, #0
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f001 fc99 	bl	8008f5a <USBH_AllocPipe>
 8007628:	4603      	mov	r3, r0
 800762a:	461a      	mov	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007630:	2180      	movs	r1, #128	; 0x80
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f001 fc91 	bl	8008f5a <USBH_AllocPipe>
 8007638:	4603      	mov	r3, r0
 800763a:	461a      	mov	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	7919      	ldrb	r1, [r3, #4]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007654:	b292      	uxth	r2, r2
 8007656:	9202      	str	r2, [sp, #8]
 8007658:	2200      	movs	r2, #0
 800765a:	9201      	str	r2, [sp, #4]
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	4603      	mov	r3, r0
 8007660:	2280      	movs	r2, #128	; 0x80
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f001 fc4a 	bl	8008efc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	7959      	ldrb	r1, [r3, #5]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800767c:	b292      	uxth	r2, r2
 800767e:	9202      	str	r2, [sp, #8]
 8007680:	2200      	movs	r2, #0
 8007682:	9201      	str	r2, [sp, #4]
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	4603      	mov	r3, r0
 8007688:	2200      	movs	r2, #0
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f001 fc36 	bl	8008efc <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80076a4:	2200      	movs	r2, #0
 80076a6:	4619      	mov	r1, r3
 80076a8:	f001 fd74 	bl	8009194 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076ac:	e16b      	b.n	8007986 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f96e 	bl	8007990 <USBH_HandleEnum>
 80076b4:	4603      	mov	r3, r0
 80076b6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80076b8:	7bbb      	ldrb	r3, [r7, #14]
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f040 815d 	bne.w	800797c <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d103      	bne.n	80076dc <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2208      	movs	r2, #8
 80076d8:	701a      	strb	r2, [r3, #0]
 80076da:	e002      	b.n	80076e2 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2207      	movs	r2, #7
 80076e0:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2205      	movs	r2, #5
 80076e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80076f6:	2200      	movs	r2, #0
 80076f8:	4619      	mov	r1, r3
 80076fa:	f001 fd4b 	bl	8009194 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80076fe:	e13d      	b.n	800797c <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007706:	2b00      	cmp	r3, #0
 8007708:	f000 813a 	beq.w	8007980 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007712:	2101      	movs	r1, #1
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2208      	movs	r2, #8
 800771c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2205      	movs	r2, #5
 8007722:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007732:	2200      	movs	r2, #0
 8007734:	4619      	mov	r1, r3
 8007736:	f001 fd2d 	bl	8009194 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800773a:	e121      	b.n	8007980 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007742:	b29b      	uxth	r3, r3
 8007744:	4619      	mov	r1, r3
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fd13 	bl	8008172 <USBH_SetCfg>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d102      	bne.n	8007758 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2209      	movs	r2, #9
 8007756:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800776c:	2200      	movs	r2, #0
 800776e:	4619      	mov	r1, r3
 8007770:	f001 fd10 	bl	8009194 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007774:	e107      	b.n	8007986 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800777c:	f003 0320 	and.w	r3, r3, #32
 8007780:	2b00      	cmp	r3, #0
 8007782:	d015      	beq.n	80077b0 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007784:	2101      	movs	r1, #1
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fd16 	bl	80081b8 <USBH_SetFeature>
 800778c:	4603      	mov	r3, r0
 800778e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007790:	7bbb      	ldrb	r3, [r7, #14]
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b00      	cmp	r3, #0
 8007796:	d103      	bne.n	80077a0 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	220a      	movs	r2, #10
 800779c:	701a      	strb	r2, [r3, #0]
 800779e:	e00a      	b.n	80077b6 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 80077a0:	7bbb      	ldrb	r3, [r7, #14]
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b03      	cmp	r3, #3
 80077a6:	d106      	bne.n	80077b6 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	220a      	movs	r2, #10
 80077ac:	701a      	strb	r2, [r3, #0]
 80077ae:	e002      	b.n	80077b6 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	220a      	movs	r2, #10
 80077b4:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80077ca:	2200      	movs	r2, #0
 80077cc:	4619      	mov	r1, r3
 80077ce:	f001 fce1 	bl	8009194 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077d2:	e0d8      	b.n	8007986 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d03f      	beq.n	800785e <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80077e6:	2300      	movs	r3, #0
 80077e8:	73fb      	strb	r3, [r7, #15]
 80077ea:	e016      	b.n	800781a <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80077ec:	7bfa      	ldrb	r2, [r7, #15]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	32de      	adds	r2, #222	; 0xde
 80077f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077f6:	791a      	ldrb	r2, [r3, #4]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80077fe:	429a      	cmp	r2, r3
 8007800:	d108      	bne.n	8007814 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007802:	7bfa      	ldrb	r2, [r7, #15]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	32de      	adds	r2, #222	; 0xde
 8007808:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007812:	e005      	b.n	8007820 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007814:	7bfb      	ldrb	r3, [r7, #15]
 8007816:	3301      	adds	r3, #1
 8007818:	73fb      	strb	r3, [r7, #15]
 800781a:	7bfb      	ldrb	r3, [r7, #15]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d0e5      	beq.n	80077ec <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007826:	2b00      	cmp	r3, #0
 8007828:	d016      	beq.n	8007858 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	4798      	blx	r3
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d109      	bne.n	8007850 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2206      	movs	r2, #6
 8007840:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007848:	2103      	movs	r1, #3
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	4798      	blx	r3
 800784e:	e006      	b.n	800785e <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	220d      	movs	r2, #13
 8007854:	701a      	strb	r2, [r3, #0]
 8007856:	e002      	b.n	800785e <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	220d      	movs	r2, #13
 800785c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2205      	movs	r2, #5
 8007862:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007872:	2200      	movs	r2, #0
 8007874:	4619      	mov	r1, r3
 8007876:	f001 fc8d 	bl	8009194 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800787a:	e084      	b.n	8007986 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007882:	2b00      	cmp	r3, #0
 8007884:	d017      	beq.n	80078b6 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	4798      	blx	r3
 8007892:	4603      	mov	r3, r0
 8007894:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007896:	7bbb      	ldrb	r3, [r7, #14]
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d103      	bne.n	80078a6 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	220b      	movs	r2, #11
 80078a2:	701a      	strb	r2, [r3, #0]
 80078a4:	e00a      	b.n	80078bc <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 80078a6:	7bbb      	ldrb	r3, [r7, #14]
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d106      	bne.n	80078bc <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	220d      	movs	r2, #13
 80078b2:	701a      	strb	r2, [r3, #0]
 80078b4:	e002      	b.n	80078bc <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	220d      	movs	r2, #13
 80078ba:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2205      	movs	r2, #5
 80078c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80078d0:	2200      	movs	r2, #0
 80078d2:	4619      	mov	r1, r3
 80078d4:	f001 fc5e 	bl	8009194 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80078d8:	e055      	b.n	8007986 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d04f      	beq.n	8007984 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	4798      	blx	r3
      }
      break;
 80078f0:	e048      	b.n	8007984 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7ff fccc 	bl	8007298 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007906:	2b00      	cmp	r3, #0
 8007908:	d009      	beq.n	800791e <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007924:	2b00      	cmp	r3, #0
 8007926:	d005      	beq.n	8007934 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800792e:	2105      	movs	r1, #5
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800793a:	b2db      	uxtb	r3, r3
 800793c:	2b01      	cmp	r3, #1
 800793e:	d107      	bne.n	8007950 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f7ff fda4 	bl	8007496 <USBH_Start>
 800794e:	e002      	b.n	8007956 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f004 fbb5 	bl	800c0c0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800796a:	2200      	movs	r2, #0
 800796c:	4619      	mov	r1, r3
 800796e:	f001 fc11 	bl	8009194 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007972:	e008      	b.n	8007986 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8007974:	bf00      	nop
 8007976:	e006      	b.n	8007986 <USBH_Process+0x4ce>
      break;
 8007978:	bf00      	nop
 800797a:	e004      	b.n	8007986 <USBH_Process+0x4ce>
      break;
 800797c:	bf00      	nop
 800797e:	e002      	b.n	8007986 <USBH_Process+0x4ce>
    break;
 8007980:	bf00      	nop
 8007982:	e000      	b.n	8007986 <USBH_Process+0x4ce>
      break;
 8007984:	bf00      	nop
  }
  return USBH_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b088      	sub	sp, #32
 8007994:	af04      	add	r7, sp, #16
 8007996:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007998:	2301      	movs	r3, #1
 800799a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800799c:	2301      	movs	r3, #1
 800799e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	785b      	ldrb	r3, [r3, #1]
 80079a4:	2b07      	cmp	r3, #7
 80079a6:	f200 8208 	bhi.w	8007dba <USBH_HandleEnum+0x42a>
 80079aa:	a201      	add	r2, pc, #4	; (adr r2, 80079b0 <USBH_HandleEnum+0x20>)
 80079ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b0:	080079d1 	.word	0x080079d1
 80079b4:	08007a8f 	.word	0x08007a8f
 80079b8:	08007af9 	.word	0x08007af9
 80079bc:	08007b87 	.word	0x08007b87
 80079c0:	08007bf1 	.word	0x08007bf1
 80079c4:	08007c61 	.word	0x08007c61
 80079c8:	08007cfd 	.word	0x08007cfd
 80079cc:	08007d7b 	.word	0x08007d7b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80079d0:	2108      	movs	r1, #8
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 faea 	bl	8007fac <USBH_Get_DevDesc>
 80079d8:	4603      	mov	r3, r0
 80079da:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079dc:	7bbb      	ldrb	r3, [r7, #14]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d130      	bne.n	8007a44 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	7919      	ldrb	r1, [r3, #4]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007a06:	b292      	uxth	r2, r2
 8007a08:	9202      	str	r2, [sp, #8]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	9201      	str	r2, [sp, #4]
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	4603      	mov	r3, r0
 8007a12:	2280      	movs	r2, #128	; 0x80
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f001 fa71 	bl	8008efc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	7959      	ldrb	r1, [r3, #5]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a2e:	b292      	uxth	r2, r2
 8007a30:	9202      	str	r2, [sp, #8]
 8007a32:	2200      	movs	r2, #0
 8007a34:	9201      	str	r2, [sp, #4]
 8007a36:	9300      	str	r3, [sp, #0]
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f001 fa5d 	bl	8008efc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a42:	e1bc      	b.n	8007dbe <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	f040 81b9 	bne.w	8007dbe <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a52:	3301      	adds	r3, #1
 8007a54:	b2da      	uxtb	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a62:	2b03      	cmp	r3, #3
 8007a64:	d903      	bls.n	8007a6e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	220d      	movs	r2, #13
 8007a6a:	701a      	strb	r2, [r3, #0]
      break;
 8007a6c:	e1a7      	b.n	8007dbe <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	795b      	ldrb	r3, [r3, #5]
 8007a72:	4619      	mov	r1, r3
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f001 fa91 	bl	8008f9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	791b      	ldrb	r3, [r3, #4]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f001 fa8b 	bl	8008f9c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	701a      	strb	r2, [r3, #0]
      break;
 8007a8c:	e197      	b.n	8007dbe <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007a8e:	2112      	movs	r1, #18
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fa8b 	bl	8007fac <USBH_Get_DevDesc>
 8007a96:	4603      	mov	r3, r0
 8007a98:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a9a:	7bbb      	ldrb	r3, [r7, #14]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d103      	bne.n	8007aa8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007aa6:	e18c      	b.n	8007dc2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007aa8:	7bbb      	ldrb	r3, [r7, #14]
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	f040 8189 	bne.w	8007dc2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	b2da      	uxtb	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	d903      	bls.n	8007ad2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	220d      	movs	r2, #13
 8007ace:	701a      	strb	r2, [r3, #0]
      break;
 8007ad0:	e177      	b.n	8007dc2 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	795b      	ldrb	r3, [r3, #5]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f001 fa5f 	bl	8008f9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	791b      	ldrb	r3, [r3, #4]
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f001 fa59 	bl	8008f9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	701a      	strb	r2, [r3, #0]
      break;
 8007af6:	e164      	b.n	8007dc2 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007af8:	2101      	movs	r1, #1
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fb15 	bl	800812a <USBH_SetAddress>
 8007b00:	4603      	mov	r3, r0
 8007b02:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b04:	7bbb      	ldrb	r3, [r7, #14]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d132      	bne.n	8007b70 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007b0a:	2002      	movs	r0, #2
 8007b0c:	f004 fc3f 	bl	800c38e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2203      	movs	r2, #3
 8007b1c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	7919      	ldrb	r1, [r3, #4]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b32:	b292      	uxth	r2, r2
 8007b34:	9202      	str	r2, [sp, #8]
 8007b36:	2200      	movs	r2, #0
 8007b38:	9201      	str	r2, [sp, #4]
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2280      	movs	r2, #128	; 0x80
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f001 f9db 	bl	8008efc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	7959      	ldrb	r1, [r3, #5]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b5a:	b292      	uxth	r2, r2
 8007b5c:	9202      	str	r2, [sp, #8]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	9201      	str	r2, [sp, #4]
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	4603      	mov	r3, r0
 8007b66:	2200      	movs	r2, #0
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f001 f9c7 	bl	8008efc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007b6e:	e12a      	b.n	8007dc6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b70:	7bbb      	ldrb	r3, [r7, #14]
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	f040 8127 	bne.w	8007dc6 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	220d      	movs	r2, #13
 8007b7c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	705a      	strb	r2, [r3, #1]
      break;
 8007b84:	e11f      	b.n	8007dc6 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007b86:	2109      	movs	r1, #9
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fa3b 	bl	8008004 <USBH_Get_CfgDesc>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b92:	7bbb      	ldrb	r3, [r7, #14]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d103      	bne.n	8007ba0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2204      	movs	r2, #4
 8007b9c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b9e:	e114      	b.n	8007dca <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ba0:	7bbb      	ldrb	r3, [r7, #14]
 8007ba2:	2b03      	cmp	r3, #3
 8007ba4:	f040 8111 	bne.w	8007dca <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bae:	3301      	adds	r3, #1
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	d903      	bls.n	8007bca <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	220d      	movs	r2, #13
 8007bc6:	701a      	strb	r2, [r3, #0]
      break;
 8007bc8:	e0ff      	b.n	8007dca <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	795b      	ldrb	r3, [r3, #5]
 8007bce:	4619      	mov	r1, r3
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f001 f9e3 	bl	8008f9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	791b      	ldrb	r3, [r3, #4]
 8007bda:	4619      	mov	r1, r3
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f001 f9dd 	bl	8008f9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	701a      	strb	r2, [r3, #0]
      break;
 8007bee:	e0ec      	b.n	8007dca <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fa03 	bl	8008004 <USBH_Get_CfgDesc>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c02:	7bbb      	ldrb	r3, [r7, #14]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d103      	bne.n	8007c10 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2205      	movs	r2, #5
 8007c0c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c0e:	e0de      	b.n	8007dce <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c10:	7bbb      	ldrb	r3, [r7, #14]
 8007c12:	2b03      	cmp	r3, #3
 8007c14:	f040 80db 	bne.w	8007dce <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c1e:	3301      	adds	r3, #1
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c2e:	2b03      	cmp	r3, #3
 8007c30:	d903      	bls.n	8007c3a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	220d      	movs	r2, #13
 8007c36:	701a      	strb	r2, [r3, #0]
      break;
 8007c38:	e0c9      	b.n	8007dce <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	795b      	ldrb	r3, [r3, #5]
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f001 f9ab 	bl	8008f9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	791b      	ldrb	r3, [r3, #4]
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f001 f9a5 	bl	8008f9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	701a      	strb	r2, [r3, #0]
      break;
 8007c5e:	e0b6      	b.n	8007dce <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d036      	beq.n	8007cd8 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c76:	23ff      	movs	r3, #255	; 0xff
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f9ed 	bl	8008058 <USBH_Get_StringDesc>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c82:	7bbb      	ldrb	r3, [r7, #14]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d111      	bne.n	8007cac <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2206      	movs	r2, #6
 8007c8c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2205      	movs	r2, #5
 8007c92:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	f001 fa75 	bl	8009194 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007caa:	e092      	b.n	8007dd2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cac:	7bbb      	ldrb	r3, [r7, #14]
 8007cae:	2b03      	cmp	r3, #3
 8007cb0:	f040 808f 	bne.w	8007dd2 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2206      	movs	r2, #6
 8007cb8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2205      	movs	r2, #5
 8007cbe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007cce:	2200      	movs	r2, #0
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	f001 fa5f 	bl	8009194 <osMessagePut>
      break;
 8007cd6:	e07c      	b.n	8007dd2 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2206      	movs	r2, #6
 8007cdc:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2205      	movs	r2, #5
 8007ce2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	f001 fa4d 	bl	8009194 <osMessagePut>
      break;
 8007cfa:	e06a      	b.n	8007dd2 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d027      	beq.n	8007d56 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007d12:	23ff      	movs	r3, #255	; 0xff
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 f99f 	bl	8008058 <USBH_Get_StringDesc>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d1e:	7bbb      	ldrb	r3, [r7, #14]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d103      	bne.n	8007d2c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2207      	movs	r2, #7
 8007d28:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007d2a:	e054      	b.n	8007dd6 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d2c:	7bbb      	ldrb	r3, [r7, #14]
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	d151      	bne.n	8007dd6 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2207      	movs	r2, #7
 8007d36:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2205      	movs	r2, #5
 8007d3c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	4619      	mov	r1, r3
 8007d50:	f001 fa20 	bl	8009194 <osMessagePut>
      break;
 8007d54:	e03f      	b.n	8007dd6 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2207      	movs	r2, #7
 8007d5a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2205      	movs	r2, #5
 8007d60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007d70:	2200      	movs	r2, #0
 8007d72:	4619      	mov	r1, r3
 8007d74:	f001 fa0e 	bl	8009194 <osMessagePut>
      break;
 8007d78:	e02d      	b.n	8007dd6 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d017      	beq.n	8007db4 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007d90:	23ff      	movs	r3, #255	; 0xff
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f960 	bl	8008058 <USBH_Get_StringDesc>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d9c:	7bbb      	ldrb	r3, [r7, #14]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d102      	bne.n	8007da8 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007da2:	2300      	movs	r3, #0
 8007da4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007da6:	e018      	b.n	8007dda <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007da8:	7bbb      	ldrb	r3, [r7, #14]
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d115      	bne.n	8007dda <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8007dae:	2300      	movs	r3, #0
 8007db0:	73fb      	strb	r3, [r7, #15]
      break;
 8007db2:	e012      	b.n	8007dda <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8007db4:	2300      	movs	r3, #0
 8007db6:	73fb      	strb	r3, [r7, #15]
      break;
 8007db8:	e00f      	b.n	8007dda <USBH_HandleEnum+0x44a>

    default:
      break;
 8007dba:	bf00      	nop
 8007dbc:	e00e      	b.n	8007ddc <USBH_HandleEnum+0x44c>
      break;
 8007dbe:	bf00      	nop
 8007dc0:	e00c      	b.n	8007ddc <USBH_HandleEnum+0x44c>
      break;
 8007dc2:	bf00      	nop
 8007dc4:	e00a      	b.n	8007ddc <USBH_HandleEnum+0x44c>
      break;
 8007dc6:	bf00      	nop
 8007dc8:	e008      	b.n	8007ddc <USBH_HandleEnum+0x44c>
      break;
 8007dca:	bf00      	nop
 8007dcc:	e006      	b.n	8007ddc <USBH_HandleEnum+0x44c>
      break;
 8007dce:	bf00      	nop
 8007dd0:	e004      	b.n	8007ddc <USBH_HandleEnum+0x44c>
      break;
 8007dd2:	bf00      	nop
 8007dd4:	e002      	b.n	8007ddc <USBH_HandleEnum+0x44c>
      break;
 8007dd6:	bf00      	nop
 8007dd8:	e000      	b.n	8007ddc <USBH_HandleEnum+0x44c>
      break;
 8007dda:	bf00      	nop
  }
  return Status;
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop

08007de8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	683a      	ldr	r2, [r7, #0]
 8007df6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007dfa:	bf00      	nop
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b082      	sub	sp, #8
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e14:	1c5a      	adds	r2, r3, #1
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f804 	bl	8007e2a <USBH_HandleSof>
}
 8007e22:	bf00      	nop
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b082      	sub	sp, #8
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b0b      	cmp	r3, #11
 8007e3a:	d10a      	bne.n	8007e52 <USBH_HandleSof+0x28>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d005      	beq.n	8007e52 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	4798      	blx	r3
  }
}
 8007e52:	bf00      	nop
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b082      	sub	sp, #8
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007e7e:	2200      	movs	r2, #0
 8007e80:	4619      	mov	r1, r3
 8007e82:	f001 f987 	bl	8009194 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007e86:	bf00      	nop
}
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007e8e:	b480      	push	{r7}
 8007e90:	b083      	sub	sp, #12
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007e9e:	bf00      	nop
}
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b082      	sub	sp, #8
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007ede:	2200      	movs	r2, #0
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	f001 f957 	bl	8009194 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3708      	adds	r7, #8
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f004 f8f0 	bl	800c0f6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	791b      	ldrb	r3, [r3, #4]
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f001 f83d 	bl	8008f9c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	795b      	ldrb	r3, [r3, #5]
 8007f26:	4619      	mov	r1, r3
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f001 f837 	bl	8008f9c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007f42:	2200      	movs	r2, #0
 8007f44:	4619      	mov	r1, r3
 8007f46:	f001 f925 	bl	8009194 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8007f62:	f107 030c 	add.w	r3, r7, #12
 8007f66:	f04f 32ff 	mov.w	r2, #4294967295
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f001 f952 	bl	8009214 <osMessageGet>
    if (event.status == osEventMessage)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2b10      	cmp	r3, #16
 8007f74:	d1f2      	bne.n	8007f5c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7ff fa9e 	bl	80074b8 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007f7c:	e7ee      	b.n	8007f5c <USBH_Process_OS+0x8>

08007f7e <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b082      	sub	sp, #8
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	f001 f8f9 	bl	8009194 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b086      	sub	sp, #24
 8007fb0:	af02      	add	r7, sp, #8
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007fb8:	887b      	ldrh	r3, [r7, #2]
 8007fba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fbe:	d901      	bls.n	8007fc4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e01b      	b.n	8007ffc <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007fca:	887b      	ldrh	r3, [r7, #2]
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f872 	bl	80080c0 <USBH_GetDescriptor>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d109      	bne.n	8007ffa <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007fec:	887a      	ldrh	r2, [r7, #2]
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f929 	bl	8008248 <USBH_ParseDevDesc>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af02      	add	r7, sp, #8
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	460b      	mov	r3, r1
 800800e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	331c      	adds	r3, #28
 8008014:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008016:	887b      	ldrh	r3, [r7, #2]
 8008018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800801c:	d901      	bls.n	8008022 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800801e:	2303      	movs	r3, #3
 8008020:	e016      	b.n	8008050 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008022:	887b      	ldrh	r3, [r7, #2]
 8008024:	9300      	str	r3, [sp, #0]
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800802c:	2100      	movs	r1, #0
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f846 	bl	80080c0 <USBH_GetDescriptor>
 8008034:	4603      	mov	r3, r0
 8008036:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008038:	7bfb      	ldrb	r3, [r7, #15]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d107      	bne.n	800804e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800803e:	887b      	ldrh	r3, [r7, #2]
 8008040:	461a      	mov	r2, r3
 8008042:	68b9      	ldr	r1, [r7, #8]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f9b3 	bl	80083b0 <USBH_ParseCfgDesc>
 800804a:	4603      	mov	r3, r0
 800804c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800804e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008050:	4618      	mov	r0, r3
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b088      	sub	sp, #32
 800805c:	af02      	add	r7, sp, #8
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	607a      	str	r2, [r7, #4]
 8008062:	461a      	mov	r2, r3
 8008064:	460b      	mov	r3, r1
 8008066:	72fb      	strb	r3, [r7, #11]
 8008068:	4613      	mov	r3, r2
 800806a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800806c:	893b      	ldrh	r3, [r7, #8]
 800806e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008072:	d802      	bhi.n	800807a <USBH_Get_StringDesc+0x22>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d101      	bne.n	800807e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800807a:	2303      	movs	r3, #3
 800807c:	e01c      	b.n	80080b8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800807e:	7afb      	ldrb	r3, [r7, #11]
 8008080:	b29b      	uxth	r3, r3
 8008082:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008086:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800808e:	893b      	ldrh	r3, [r7, #8]
 8008090:	9300      	str	r3, [sp, #0]
 8008092:	460b      	mov	r3, r1
 8008094:	2100      	movs	r1, #0
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f000 f812 	bl	80080c0 <USBH_GetDescriptor>
 800809c:	4603      	mov	r3, r0
 800809e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80080a0:	7dfb      	ldrb	r3, [r7, #23]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d107      	bne.n	80080b6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80080ac:	893a      	ldrh	r2, [r7, #8]
 80080ae:	6879      	ldr	r1, [r7, #4]
 80080b0:	4618      	mov	r0, r3
 80080b2:	f000 fb93 	bl	80087dc <USBH_ParseStringDesc>
  }

  return status;
 80080b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3718      	adds	r7, #24
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	607b      	str	r3, [r7, #4]
 80080ca:	460b      	mov	r3, r1
 80080cc:	72fb      	strb	r3, [r7, #11]
 80080ce:	4613      	mov	r3, r2
 80080d0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	789b      	ldrb	r3, [r3, #2]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d11c      	bne.n	8008114 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80080da:	7afb      	ldrb	r3, [r7, #11]
 80080dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2206      	movs	r2, #6
 80080ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	893a      	ldrh	r2, [r7, #8]
 80080f0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80080f2:	893b      	ldrh	r3, [r7, #8]
 80080f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80080f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080fc:	d104      	bne.n	8008108 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f240 4209 	movw	r2, #1033	; 0x409
 8008104:	829a      	strh	r2, [r3, #20]
 8008106:	e002      	b.n	800810e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2200      	movs	r2, #0
 800810c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	8b3a      	ldrh	r2, [r7, #24]
 8008112:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008114:	8b3b      	ldrh	r3, [r7, #24]
 8008116:	461a      	mov	r2, r3
 8008118:	6879      	ldr	r1, [r7, #4]
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f000 fbac 	bl	8008878 <USBH_CtlReq>
 8008120:	4603      	mov	r3, r0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b082      	sub	sp, #8
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
 8008132:	460b      	mov	r3, r1
 8008134:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	789b      	ldrb	r3, [r3, #2]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d10f      	bne.n	800815e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2205      	movs	r2, #5
 8008148:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800814a:	78fb      	ldrb	r3, [r7, #3]
 800814c:	b29a      	uxth	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800815e:	2200      	movs	r2, #0
 8008160:	2100      	movs	r1, #0
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fb88 	bl	8008878 <USBH_CtlReq>
 8008168:	4603      	mov	r3, r0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3708      	adds	r7, #8
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b082      	sub	sp, #8
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
 800817a:	460b      	mov	r3, r1
 800817c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	789b      	ldrb	r3, [r3, #2]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d10e      	bne.n	80081a4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2209      	movs	r2, #9
 8008190:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	887a      	ldrh	r2, [r7, #2]
 8008196:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80081a4:	2200      	movs	r2, #0
 80081a6:	2100      	movs	r1, #0
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 fb65 	bl	8008878 <USBH_CtlReq>
 80081ae:	4603      	mov	r3, r0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	460b      	mov	r3, r1
 80081c2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	789b      	ldrb	r3, [r3, #2]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d10f      	bne.n	80081ec <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2203      	movs	r2, #3
 80081d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80081d8:	78fb      	ldrb	r3, [r7, #3]
 80081da:	b29a      	uxth	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80081ec:	2200      	movs	r2, #0
 80081ee:	2100      	movs	r1, #0
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fb41 	bl	8008878 <USBH_CtlReq>
 80081f6:	4603      	mov	r3, r0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3708      	adds	r7, #8
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	460b      	mov	r3, r1
 800820a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	789b      	ldrb	r3, [r3, #2]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d10f      	bne.n	8008234 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2202      	movs	r2, #2
 8008218:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008226:	78fb      	ldrb	r3, [r7, #3]
 8008228:	b29a      	uxth	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008234:	2200      	movs	r2, #0
 8008236:	2100      	movs	r1, #0
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fb1d 	bl	8008878 <USBH_CtlReq>
 800823e:	4603      	mov	r3, r0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3708      	adds	r7, #8
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008248:	b480      	push	{r7}
 800824a:	b087      	sub	sp, #28
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	4613      	mov	r3, r2
 8008254:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f203 3326 	addw	r3, r3, #806	; 0x326
 800825c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d101      	bne.n	800826c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008268:	2302      	movs	r3, #2
 800826a:	e098      	b.n	800839e <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	781a      	ldrb	r2, [r3, #0]
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	785a      	ldrb	r2, [r3, #1]
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	3302      	adds	r3, #2
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	b29a      	uxth	r2, r3
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	3303      	adds	r3, #3
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	b29b      	uxth	r3, r3
 800828c:	021b      	lsls	r3, r3, #8
 800828e:	b29b      	uxth	r3, r3
 8008290:	4313      	orrs	r3, r2
 8008292:	b29a      	uxth	r2, r3
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	791a      	ldrb	r2, [r3, #4]
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	795a      	ldrb	r2, [r3, #5]
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	799a      	ldrb	r2, [r3, #6]
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	79da      	ldrb	r2, [r3, #7]
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d004      	beq.n	80082cc <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d11b      	bne.n	8008304 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	79db      	ldrb	r3, [r3, #7]
 80082d0:	2b20      	cmp	r3, #32
 80082d2:	dc0f      	bgt.n	80082f4 <USBH_ParseDevDesc+0xac>
 80082d4:	2b08      	cmp	r3, #8
 80082d6:	db0f      	blt.n	80082f8 <USBH_ParseDevDesc+0xb0>
 80082d8:	3b08      	subs	r3, #8
 80082da:	4a34      	ldr	r2, [pc, #208]	; (80083ac <USBH_ParseDevDesc+0x164>)
 80082dc:	fa22 f303 	lsr.w	r3, r2, r3
 80082e0:	f003 0301 	and.w	r3, r3, #1
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	bf14      	ite	ne
 80082e8:	2301      	movne	r3, #1
 80082ea:	2300      	moveq	r3, #0
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d106      	bne.n	8008300 <USBH_ParseDevDesc+0xb8>
 80082f2:	e001      	b.n	80082f8 <USBH_ParseDevDesc+0xb0>
 80082f4:	2b40      	cmp	r3, #64	; 0x40
 80082f6:	d003      	beq.n	8008300 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	2208      	movs	r2, #8
 80082fc:	71da      	strb	r2, [r3, #7]
        break;
 80082fe:	e000      	b.n	8008302 <USBH_ParseDevDesc+0xba>
        break;
 8008300:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008302:	e00e      	b.n	8008322 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800830a:	2b02      	cmp	r3, #2
 800830c:	d107      	bne.n	800831e <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	79db      	ldrb	r3, [r3, #7]
 8008312:	2b08      	cmp	r3, #8
 8008314:	d005      	beq.n	8008322 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	2208      	movs	r2, #8
 800831a:	71da      	strb	r2, [r3, #7]
 800831c:	e001      	b.n	8008322 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800831e:	2303      	movs	r3, #3
 8008320:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008322:	88fb      	ldrh	r3, [r7, #6]
 8008324:	2b08      	cmp	r3, #8
 8008326:	d939      	bls.n	800839c <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	3308      	adds	r3, #8
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	b29a      	uxth	r2, r3
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	3309      	adds	r3, #9
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	b29b      	uxth	r3, r3
 8008338:	021b      	lsls	r3, r3, #8
 800833a:	b29b      	uxth	r3, r3
 800833c:	4313      	orrs	r3, r2
 800833e:	b29a      	uxth	r2, r3
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	330a      	adds	r3, #10
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	b29a      	uxth	r2, r3
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	330b      	adds	r3, #11
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	b29b      	uxth	r3, r3
 8008354:	021b      	lsls	r3, r3, #8
 8008356:	b29b      	uxth	r3, r3
 8008358:	4313      	orrs	r3, r2
 800835a:	b29a      	uxth	r2, r3
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	330c      	adds	r3, #12
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	b29a      	uxth	r2, r3
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	330d      	adds	r3, #13
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	b29b      	uxth	r3, r3
 8008370:	021b      	lsls	r3, r3, #8
 8008372:	b29b      	uxth	r3, r3
 8008374:	4313      	orrs	r3, r2
 8008376:	b29a      	uxth	r2, r3
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	7b9a      	ldrb	r2, [r3, #14]
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	7bda      	ldrb	r2, [r3, #15]
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	7c1a      	ldrb	r2, [r3, #16]
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	7c5a      	ldrb	r2, [r3, #17]
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800839c:	7dfb      	ldrb	r3, [r7, #23]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	371c      	adds	r7, #28
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	01000101 	.word	0x01000101

080083b0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b08c      	sub	sp, #48	; 0x30
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	4613      	mov	r3, r2
 80083bc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80083c4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80083cc:	2300      	movs	r3, #0
 80083ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80083d2:	2300      	movs	r3, #0
 80083d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d101      	bne.n	80083e2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80083de:	2302      	movs	r3, #2
 80083e0:	e0db      	b.n	800859a <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	781a      	ldrb	r2, [r3, #0]
 80083ea:	6a3b      	ldr	r3, [r7, #32]
 80083ec:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	785a      	ldrb	r2, [r3, #1]
 80083f2:	6a3b      	ldr	r3, [r7, #32]
 80083f4:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	3302      	adds	r3, #2
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	3303      	adds	r3, #3
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	b29b      	uxth	r3, r3
 8008406:	021b      	lsls	r3, r3, #8
 8008408:	b29b      	uxth	r3, r3
 800840a:	4313      	orrs	r3, r2
 800840c:	b29b      	uxth	r3, r3
 800840e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008412:	bf28      	it	cs
 8008414:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008418:	b29a      	uxth	r2, r3
 800841a:	6a3b      	ldr	r3, [r7, #32]
 800841c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	791a      	ldrb	r2, [r3, #4]
 8008422:	6a3b      	ldr	r3, [r7, #32]
 8008424:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	795a      	ldrb	r2, [r3, #5]
 800842a:	6a3b      	ldr	r3, [r7, #32]
 800842c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	799a      	ldrb	r2, [r3, #6]
 8008432:	6a3b      	ldr	r3, [r7, #32]
 8008434:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	79da      	ldrb	r2, [r3, #7]
 800843a:	6a3b      	ldr	r3, [r7, #32]
 800843c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	7a1a      	ldrb	r2, [r3, #8]
 8008442:	6a3b      	ldr	r3, [r7, #32]
 8008444:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008446:	6a3b      	ldr	r3, [r7, #32]
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	2b09      	cmp	r3, #9
 800844c:	d002      	beq.n	8008454 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800844e:	6a3b      	ldr	r3, [r7, #32]
 8008450:	2209      	movs	r2, #9
 8008452:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008454:	88fb      	ldrh	r3, [r7, #6]
 8008456:	2b09      	cmp	r3, #9
 8008458:	f240 809d 	bls.w	8008596 <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800845c:	2309      	movs	r3, #9
 800845e:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008460:	2300      	movs	r3, #0
 8008462:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008464:	e081      	b.n	800856a <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008466:	f107 0316 	add.w	r3, r7, #22
 800846a:	4619      	mov	r1, r3
 800846c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800846e:	f000 f9e8 	bl	8008842 <USBH_GetNextDesc>
 8008472:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008476:	785b      	ldrb	r3, [r3, #1]
 8008478:	2b04      	cmp	r3, #4
 800847a:	d176      	bne.n	800856a <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800847c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	2b09      	cmp	r3, #9
 8008482:	d002      	beq.n	800848a <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008486:	2209      	movs	r2, #9
 8008488:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800848a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800848e:	221a      	movs	r2, #26
 8008490:	fb02 f303 	mul.w	r3, r2, r3
 8008494:	3308      	adds	r3, #8
 8008496:	6a3a      	ldr	r2, [r7, #32]
 8008498:	4413      	add	r3, r2
 800849a:	3302      	adds	r3, #2
 800849c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800849e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084a0:	69f8      	ldr	r0, [r7, #28]
 80084a2:	f000 f87e 	bl	80085a2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80084a6:	2300      	movs	r3, #0
 80084a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80084ac:	2300      	movs	r3, #0
 80084ae:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80084b0:	e043      	b.n	800853a <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80084b2:	f107 0316 	add.w	r3, r7, #22
 80084b6:	4619      	mov	r1, r3
 80084b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084ba:	f000 f9c2 	bl	8008842 <USBH_GetNextDesc>
 80084be:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80084c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c2:	785b      	ldrb	r3, [r3, #1]
 80084c4:	2b05      	cmp	r3, #5
 80084c6:	d138      	bne.n	800853a <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	795b      	ldrb	r3, [r3, #5]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d113      	bne.n	80084f8 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d003      	beq.n	80084e0 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	799b      	ldrb	r3, [r3, #6]
 80084dc:	2b03      	cmp	r3, #3
 80084de:	d10b      	bne.n	80084f8 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	79db      	ldrb	r3, [r3, #7]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d10b      	bne.n	8008500 <USBH_ParseCfgDesc+0x150>
 80084e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	2b09      	cmp	r3, #9
 80084ee:	d007      	beq.n	8008500 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 80084f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f2:	2209      	movs	r2, #9
 80084f4:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80084f6:	e003      	b.n	8008500 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80084f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fa:	2207      	movs	r2, #7
 80084fc:	701a      	strb	r2, [r3, #0]
 80084fe:	e000      	b.n	8008502 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008500:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008502:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008506:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800850a:	3201      	adds	r2, #1
 800850c:	00d2      	lsls	r2, r2, #3
 800850e:	211a      	movs	r1, #26
 8008510:	fb01 f303 	mul.w	r3, r1, r3
 8008514:	4413      	add	r3, r2
 8008516:	3308      	adds	r3, #8
 8008518:	6a3a      	ldr	r2, [r7, #32]
 800851a:	4413      	add	r3, r2
 800851c:	3304      	adds	r3, #4
 800851e:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008522:	69b9      	ldr	r1, [r7, #24]
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f000 f870 	bl	800860a <USBH_ParseEPDesc>
 800852a:	4603      	mov	r3, r0
 800852c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008530:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008534:	3301      	adds	r3, #1
 8008536:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	791b      	ldrb	r3, [r3, #4]
 800853e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008542:	429a      	cmp	r2, r3
 8008544:	d204      	bcs.n	8008550 <USBH_ParseCfgDesc+0x1a0>
 8008546:	6a3b      	ldr	r3, [r7, #32]
 8008548:	885a      	ldrh	r2, [r3, #2]
 800854a:	8afb      	ldrh	r3, [r7, #22]
 800854c:	429a      	cmp	r2, r3
 800854e:	d8b0      	bhi.n	80084b2 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	791b      	ldrb	r3, [r3, #4]
 8008554:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008558:	429a      	cmp	r2, r3
 800855a:	d201      	bcs.n	8008560 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800855c:	2303      	movs	r3, #3
 800855e:	e01c      	b.n	800859a <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 8008560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008564:	3301      	adds	r3, #1
 8008566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800856a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800856e:	2b01      	cmp	r3, #1
 8008570:	d805      	bhi.n	800857e <USBH_ParseCfgDesc+0x1ce>
 8008572:	6a3b      	ldr	r3, [r7, #32]
 8008574:	885a      	ldrh	r2, [r3, #2]
 8008576:	8afb      	ldrh	r3, [r7, #22]
 8008578:	429a      	cmp	r2, r3
 800857a:	f63f af74 	bhi.w	8008466 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800857e:	6a3b      	ldr	r3, [r7, #32]
 8008580:	791b      	ldrb	r3, [r3, #4]
 8008582:	2b02      	cmp	r3, #2
 8008584:	bf28      	it	cs
 8008586:	2302      	movcs	r3, #2
 8008588:	b2db      	uxtb	r3, r3
 800858a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800858e:	429a      	cmp	r2, r3
 8008590:	d201      	bcs.n	8008596 <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 8008592:	2303      	movs	r3, #3
 8008594:	e001      	b.n	800859a <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 8008596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800859a:	4618      	mov	r0, r3
 800859c:	3730      	adds	r7, #48	; 0x30
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b083      	sub	sp, #12
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	781a      	ldrb	r2, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	785a      	ldrb	r2, [r3, #1]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	789a      	ldrb	r2, [r3, #2]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	78da      	ldrb	r2, [r3, #3]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	3304      	adds	r3, #4
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	bf28      	it	cs
 80085d6:	2302      	movcs	r3, #2
 80085d8:	b2da      	uxtb	r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	795a      	ldrb	r2, [r3, #5]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	799a      	ldrb	r2, [r3, #6]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	79da      	ldrb	r2, [r3, #7]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	7a1a      	ldrb	r2, [r3, #8]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	721a      	strb	r2, [r3, #8]
}
 80085fe:	bf00      	nop
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr

0800860a <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800860a:	b480      	push	{r7}
 800860c:	b087      	sub	sp, #28
 800860e:	af00      	add	r7, sp, #0
 8008610:	60f8      	str	r0, [r7, #12]
 8008612:	60b9      	str	r1, [r7, #8]
 8008614:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	781a      	ldrb	r2, [r3, #0]
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	785a      	ldrb	r2, [r3, #1]
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	789a      	ldrb	r2, [r3, #2]
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	78da      	ldrb	r2, [r3, #3]
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	3304      	adds	r3, #4
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	b29a      	uxth	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	3305      	adds	r3, #5
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	b29b      	uxth	r3, r3
 800864a:	021b      	lsls	r3, r3, #8
 800864c:	b29b      	uxth	r3, r3
 800864e:	4313      	orrs	r3, r2
 8008650:	b29a      	uxth	r2, r3
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	799a      	ldrb	r2, [r3, #6]
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	889b      	ldrh	r3, [r3, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d009      	beq.n	800867a <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800866a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800866e:	d804      	bhi.n	800867a <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008678:	d901      	bls.n	800867e <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800867a:	2303      	movs	r3, #3
 800867c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008684:	2b00      	cmp	r3, #0
 8008686:	d136      	bne.n	80086f6 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	78db      	ldrb	r3, [r3, #3]
 800868c:	f003 0303 	and.w	r3, r3, #3
 8008690:	2b02      	cmp	r3, #2
 8008692:	d108      	bne.n	80086a6 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	889b      	ldrh	r3, [r3, #4]
 8008698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800869c:	f240 8097 	bls.w	80087ce <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80086a0:	2303      	movs	r3, #3
 80086a2:	75fb      	strb	r3, [r7, #23]
 80086a4:	e093      	b.n	80087ce <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	78db      	ldrb	r3, [r3, #3]
 80086aa:	f003 0303 	and.w	r3, r3, #3
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d107      	bne.n	80086c2 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	889b      	ldrh	r3, [r3, #4]
 80086b6:	2b40      	cmp	r3, #64	; 0x40
 80086b8:	f240 8089 	bls.w	80087ce <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80086bc:	2303      	movs	r3, #3
 80086be:	75fb      	strb	r3, [r7, #23]
 80086c0:	e085      	b.n	80087ce <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	78db      	ldrb	r3, [r3, #3]
 80086c6:	f003 0303 	and.w	r3, r3, #3
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d005      	beq.n	80086da <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	78db      	ldrb	r3, [r3, #3]
 80086d2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80086d6:	2b03      	cmp	r3, #3
 80086d8:	d10a      	bne.n	80086f0 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	799b      	ldrb	r3, [r3, #6]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d003      	beq.n	80086ea <USBH_ParseEPDesc+0xe0>
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	799b      	ldrb	r3, [r3, #6]
 80086e6:	2b10      	cmp	r3, #16
 80086e8:	d970      	bls.n	80087cc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80086ea:	2303      	movs	r3, #3
 80086ec:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80086ee:	e06d      	b.n	80087cc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80086f0:	2303      	movs	r3, #3
 80086f2:	75fb      	strb	r3, [r7, #23]
 80086f4:	e06b      	b.n	80087ce <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d13c      	bne.n	800877a <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	78db      	ldrb	r3, [r3, #3]
 8008704:	f003 0303 	and.w	r3, r3, #3
 8008708:	2b02      	cmp	r3, #2
 800870a:	d005      	beq.n	8008718 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	78db      	ldrb	r3, [r3, #3]
 8008710:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008714:	2b00      	cmp	r3, #0
 8008716:	d106      	bne.n	8008726 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	889b      	ldrh	r3, [r3, #4]
 800871c:	2b40      	cmp	r3, #64	; 0x40
 800871e:	d956      	bls.n	80087ce <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008720:	2303      	movs	r3, #3
 8008722:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008724:	e053      	b.n	80087ce <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	78db      	ldrb	r3, [r3, #3]
 800872a:	f003 0303 	and.w	r3, r3, #3
 800872e:	2b01      	cmp	r3, #1
 8008730:	d10e      	bne.n	8008750 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	799b      	ldrb	r3, [r3, #6]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d007      	beq.n	800874a <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800873e:	2b10      	cmp	r3, #16
 8008740:	d803      	bhi.n	800874a <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008746:	2b40      	cmp	r3, #64	; 0x40
 8008748:	d941      	bls.n	80087ce <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800874a:	2303      	movs	r3, #3
 800874c:	75fb      	strb	r3, [r7, #23]
 800874e:	e03e      	b.n	80087ce <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	78db      	ldrb	r3, [r3, #3]
 8008754:	f003 0303 	and.w	r3, r3, #3
 8008758:	2b03      	cmp	r3, #3
 800875a:	d10b      	bne.n	8008774 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	799b      	ldrb	r3, [r3, #6]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d004      	beq.n	800876e <USBH_ParseEPDesc+0x164>
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	889b      	ldrh	r3, [r3, #4]
 8008768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800876c:	d32f      	bcc.n	80087ce <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800876e:	2303      	movs	r3, #3
 8008770:	75fb      	strb	r3, [r7, #23]
 8008772:	e02c      	b.n	80087ce <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008774:	2303      	movs	r3, #3
 8008776:	75fb      	strb	r3, [r7, #23]
 8008778:	e029      	b.n	80087ce <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008780:	2b02      	cmp	r3, #2
 8008782:	d120      	bne.n	80087c6 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	78db      	ldrb	r3, [r3, #3]
 8008788:	f003 0303 	and.w	r3, r3, #3
 800878c:	2b00      	cmp	r3, #0
 800878e:	d106      	bne.n	800879e <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	889b      	ldrh	r3, [r3, #4]
 8008794:	2b08      	cmp	r3, #8
 8008796:	d01a      	beq.n	80087ce <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008798:	2303      	movs	r3, #3
 800879a:	75fb      	strb	r3, [r7, #23]
 800879c:	e017      	b.n	80087ce <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	78db      	ldrb	r3, [r3, #3]
 80087a2:	f003 0303 	and.w	r3, r3, #3
 80087a6:	2b03      	cmp	r3, #3
 80087a8:	d10a      	bne.n	80087c0 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	799b      	ldrb	r3, [r3, #6]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d003      	beq.n	80087ba <USBH_ParseEPDesc+0x1b0>
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	889b      	ldrh	r3, [r3, #4]
 80087b6:	2b08      	cmp	r3, #8
 80087b8:	d909      	bls.n	80087ce <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80087ba:	2303      	movs	r3, #3
 80087bc:	75fb      	strb	r3, [r7, #23]
 80087be:	e006      	b.n	80087ce <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80087c0:	2303      	movs	r3, #3
 80087c2:	75fb      	strb	r3, [r7, #23]
 80087c4:	e003      	b.n	80087ce <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80087c6:	2303      	movs	r3, #3
 80087c8:	75fb      	strb	r3, [r7, #23]
 80087ca:	e000      	b.n	80087ce <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80087cc:	bf00      	nop
  }

  return status;
 80087ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	371c      	adds	r7, #28
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80087dc:	b480      	push	{r7}
 80087de:	b087      	sub	sp, #28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	4613      	mov	r3, r2
 80087e8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	3301      	adds	r3, #1
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	2b03      	cmp	r3, #3
 80087f2:	d120      	bne.n	8008836 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	1e9a      	subs	r2, r3, #2
 80087fa:	88fb      	ldrh	r3, [r7, #6]
 80087fc:	4293      	cmp	r3, r2
 80087fe:	bf28      	it	cs
 8008800:	4613      	movcs	r3, r2
 8008802:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	3302      	adds	r3, #2
 8008808:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800880a:	2300      	movs	r3, #0
 800880c:	82fb      	strh	r3, [r7, #22]
 800880e:	e00b      	b.n	8008828 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008810:	8afb      	ldrh	r3, [r7, #22]
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	4413      	add	r3, r2
 8008816:	781a      	ldrb	r2, [r3, #0]
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	3301      	adds	r3, #1
 8008820:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008822:	8afb      	ldrh	r3, [r7, #22]
 8008824:	3302      	adds	r3, #2
 8008826:	82fb      	strh	r3, [r7, #22]
 8008828:	8afa      	ldrh	r2, [r7, #22]
 800882a:	8abb      	ldrh	r3, [r7, #20]
 800882c:	429a      	cmp	r2, r3
 800882e:	d3ef      	bcc.n	8008810 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	2200      	movs	r2, #0
 8008834:	701a      	strb	r2, [r3, #0]
  }
}
 8008836:	bf00      	nop
 8008838:	371c      	adds	r7, #28
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008842:	b480      	push	{r7}
 8008844:	b085      	sub	sp, #20
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	881a      	ldrh	r2, [r3, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	b29b      	uxth	r3, r3
 8008856:	4413      	add	r3, r2
 8008858:	b29a      	uxth	r2, r3
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4413      	add	r3, r2
 8008868:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800886a:	68fb      	ldr	r3, [r7, #12]
}
 800886c:	4618      	mov	r0, r3
 800886e:	3714      	adds	r7, #20
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b086      	sub	sp, #24
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	4613      	mov	r3, r2
 8008884:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008886:	2301      	movs	r3, #1
 8008888:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	789b      	ldrb	r3, [r3, #2]
 800888e:	2b01      	cmp	r3, #1
 8008890:	d002      	beq.n	8008898 <USBH_CtlReq+0x20>
 8008892:	2b02      	cmp	r3, #2
 8008894:	d01d      	beq.n	80088d2 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8008896:	e043      	b.n	8008920 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	68ba      	ldr	r2, [r7, #8]
 800889c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	88fa      	ldrh	r2, [r7, #6]
 80088a2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2201      	movs	r2, #1
 80088a8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2202      	movs	r2, #2
 80088ae:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80088b0:	2301      	movs	r3, #1
 80088b2:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2203      	movs	r2, #3
 80088b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80088c8:	2200      	movs	r2, #0
 80088ca:	4619      	mov	r1, r3
 80088cc:	f000 fc62 	bl	8009194 <osMessagePut>
      break;
 80088d0:	e026      	b.n	8008920 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f000 f82a 	bl	800892c <USBH_HandleControl>
 80088d8:	4603      	mov	r3, r0
 80088da:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80088dc:	7dfb      	ldrb	r3, [r7, #23]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d002      	beq.n	80088e8 <USBH_CtlReq+0x70>
 80088e2:	7dfb      	ldrb	r3, [r7, #23]
 80088e4:	2b03      	cmp	r3, #3
 80088e6:	d106      	bne.n	80088f6 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2201      	movs	r2, #1
 80088ec:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2200      	movs	r2, #0
 80088f2:	761a      	strb	r2, [r3, #24]
 80088f4:	e005      	b.n	8008902 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80088f6:	7dfb      	ldrb	r3, [r7, #23]
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d102      	bne.n	8008902 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2201      	movs	r2, #1
 8008900:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2203      	movs	r2, #3
 8008906:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008916:	2200      	movs	r2, #0
 8008918:	4619      	mov	r1, r3
 800891a:	f000 fc3b 	bl	8009194 <osMessagePut>
      break;
 800891e:	bf00      	nop
  }
  return status;
 8008920:	7dfb      	ldrb	r3, [r7, #23]
}
 8008922:	4618      	mov	r0, r3
 8008924:	3718      	adds	r7, #24
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
	...

0800892c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af02      	add	r7, sp, #8
 8008932:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008934:	2301      	movs	r3, #1
 8008936:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008938:	2300      	movs	r3, #0
 800893a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	7e1b      	ldrb	r3, [r3, #24]
 8008940:	3b01      	subs	r3, #1
 8008942:	2b0a      	cmp	r3, #10
 8008944:	f200 8229 	bhi.w	8008d9a <USBH_HandleControl+0x46e>
 8008948:	a201      	add	r2, pc, #4	; (adr r2, 8008950 <USBH_HandleControl+0x24>)
 800894a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894e:	bf00      	nop
 8008950:	0800897d 	.word	0x0800897d
 8008954:	08008997 	.word	0x08008997
 8008958:	08008a39 	.word	0x08008a39
 800895c:	08008a5f 	.word	0x08008a5f
 8008960:	08008aeb 	.word	0x08008aeb
 8008964:	08008b15 	.word	0x08008b15
 8008968:	08008bd7 	.word	0x08008bd7
 800896c:	08008bf9 	.word	0x08008bf9
 8008970:	08008c8b 	.word	0x08008c8b
 8008974:	08008cb1 	.word	0x08008cb1
 8008978:	08008d43 	.word	0x08008d43
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f103 0110 	add.w	r1, r3, #16
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	795b      	ldrb	r3, [r3, #5]
 8008986:	461a      	mov	r2, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 fa17 	bl	8008dbc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2202      	movs	r2, #2
 8008992:	761a      	strb	r2, [r3, #24]
      break;
 8008994:	e20c      	b.n	8008db0 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	795b      	ldrb	r3, [r3, #5]
 800899a:	4619      	mov	r1, r3
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f003 fc99 	bl	800c2d4 <USBH_LL_GetURBState>
 80089a2:	4603      	mov	r3, r0
 80089a4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80089a6:	7bbb      	ldrb	r3, [r7, #14]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d12c      	bne.n	8008a06 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	7c1b      	ldrb	r3, [r3, #16]
 80089b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80089b4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	8adb      	ldrh	r3, [r3, #22]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00a      	beq.n	80089d4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80089be:	7b7b      	ldrb	r3, [r7, #13]
 80089c0:	2b80      	cmp	r3, #128	; 0x80
 80089c2:	d103      	bne.n	80089cc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2203      	movs	r2, #3
 80089c8:	761a      	strb	r2, [r3, #24]
 80089ca:	e00d      	b.n	80089e8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2205      	movs	r2, #5
 80089d0:	761a      	strb	r2, [r3, #24]
 80089d2:	e009      	b.n	80089e8 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80089d4:	7b7b      	ldrb	r3, [r7, #13]
 80089d6:	2b80      	cmp	r3, #128	; 0x80
 80089d8:	d103      	bne.n	80089e2 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2209      	movs	r2, #9
 80089de:	761a      	strb	r2, [r3, #24]
 80089e0:	e002      	b.n	80089e8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2207      	movs	r2, #7
 80089e6:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2203      	movs	r2, #3
 80089ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80089fc:	2200      	movs	r2, #0
 80089fe:	4619      	mov	r1, r3
 8008a00:	f000 fbc8 	bl	8009194 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a04:	e1cb      	b.n	8008d9e <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008a06:	7bbb      	ldrb	r3, [r7, #14]
 8008a08:	2b04      	cmp	r3, #4
 8008a0a:	d003      	beq.n	8008a14 <USBH_HandleControl+0xe8>
 8008a0c:	7bbb      	ldrb	r3, [r7, #14]
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	f040 81c5 	bne.w	8008d9e <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	220b      	movs	r2, #11
 8008a18:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2203      	movs	r2, #3
 8008a1e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008a2e:	2200      	movs	r2, #0
 8008a30:	4619      	mov	r1, r3
 8008a32:	f000 fbaf 	bl	8009194 <osMessagePut>
      break;
 8008a36:	e1b2      	b.n	8008d9e <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6899      	ldr	r1, [r3, #8]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	899a      	ldrh	r2, [r3, #12]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	791b      	ldrb	r3, [r3, #4]
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 f9f2 	bl	8008e3a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2204      	movs	r2, #4
 8008a5a:	761a      	strb	r2, [r3, #24]
      break;
 8008a5c:	e1a8      	b.n	8008db0 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	791b      	ldrb	r3, [r3, #4]
 8008a62:	4619      	mov	r1, r3
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f003 fc35 	bl	800c2d4 <USBH_LL_GetURBState>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008a6e:	7bbb      	ldrb	r3, [r7, #14]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d110      	bne.n	8008a96 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2209      	movs	r2, #9
 8008a78:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2203      	movs	r2, #3
 8008a7e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008a8e:	2200      	movs	r2, #0
 8008a90:	4619      	mov	r1, r3
 8008a92:	f000 fb7f 	bl	8009194 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008a96:	7bbb      	ldrb	r3, [r7, #14]
 8008a98:	2b05      	cmp	r3, #5
 8008a9a:	d110      	bne.n	8008abe <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2203      	movs	r2, #3
 8008aa4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	f000 fb6c 	bl	8009194 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008abc:	e171      	b.n	8008da2 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8008abe:	7bbb      	ldrb	r3, [r7, #14]
 8008ac0:	2b04      	cmp	r3, #4
 8008ac2:	f040 816e 	bne.w	8008da2 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	220b      	movs	r2, #11
 8008aca:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2203      	movs	r2, #3
 8008ad0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	f000 fb56 	bl	8009194 <osMessagePut>
      break;
 8008ae8:	e15b      	b.n	8008da2 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6899      	ldr	r1, [r3, #8]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	899a      	ldrh	r2, [r3, #12]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	795b      	ldrb	r3, [r3, #5]
 8008af6:	2001      	movs	r0, #1
 8008af8:	9000      	str	r0, [sp, #0]
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f978 	bl	8008df0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2206      	movs	r2, #6
 8008b10:	761a      	strb	r2, [r3, #24]
      break;
 8008b12:	e14d      	b.n	8008db0 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	795b      	ldrb	r3, [r3, #5]
 8008b18:	4619      	mov	r1, r3
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f003 fbda 	bl	800c2d4 <USBH_LL_GetURBState>
 8008b20:	4603      	mov	r3, r0
 8008b22:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008b24:	7bbb      	ldrb	r3, [r7, #14]
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d111      	bne.n	8008b4e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2207      	movs	r2, #7
 8008b2e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2203      	movs	r2, #3
 8008b34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008b44:	2200      	movs	r2, #0
 8008b46:	4619      	mov	r1, r3
 8008b48:	f000 fb24 	bl	8009194 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008b4c:	e12b      	b.n	8008da6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8008b4e:	7bbb      	ldrb	r3, [r7, #14]
 8008b50:	2b05      	cmp	r3, #5
 8008b52:	d113      	bne.n	8008b7c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	220c      	movs	r2, #12
 8008b58:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2203      	movs	r2, #3
 8008b62:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008b72:	2200      	movs	r2, #0
 8008b74:	4619      	mov	r1, r3
 8008b76:	f000 fb0d 	bl	8009194 <osMessagePut>
      break;
 8008b7a:	e114      	b.n	8008da6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008b7c:	7bbb      	ldrb	r3, [r7, #14]
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d111      	bne.n	8008ba6 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2205      	movs	r2, #5
 8008b86:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2203      	movs	r2, #3
 8008b8c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	f000 faf8 	bl	8009194 <osMessagePut>
      break;
 8008ba4:	e0ff      	b.n	8008da6 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8008ba6:	7bbb      	ldrb	r3, [r7, #14]
 8008ba8:	2b04      	cmp	r3, #4
 8008baa:	f040 80fc 	bne.w	8008da6 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	220b      	movs	r2, #11
 8008bb2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2203      	movs	r2, #3
 8008bbc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008bcc:	2200      	movs	r2, #0
 8008bce:	4619      	mov	r1, r3
 8008bd0:	f000 fae0 	bl	8009194 <osMessagePut>
      break;
 8008bd4:	e0e7      	b.n	8008da6 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	791b      	ldrb	r3, [r3, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	2100      	movs	r1, #0
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f92b 	bl	8008e3a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2208      	movs	r2, #8
 8008bf4:	761a      	strb	r2, [r3, #24]

      break;
 8008bf6:	e0db      	b.n	8008db0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	791b      	ldrb	r3, [r3, #4]
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f003 fb68 	bl	800c2d4 <USBH_LL_GetURBState>
 8008c04:	4603      	mov	r3, r0
 8008c06:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008c08:	7bbb      	ldrb	r3, [r7, #14]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d113      	bne.n	8008c36 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	220d      	movs	r2, #13
 8008c12:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008c14:	2300      	movs	r3, #0
 8008c16:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2203      	movs	r2, #3
 8008c1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	4619      	mov	r1, r3
 8008c30:	f000 fab0 	bl	8009194 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008c34:	e0b9      	b.n	8008daa <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8008c36:	7bbb      	ldrb	r3, [r7, #14]
 8008c38:	2b04      	cmp	r3, #4
 8008c3a:	d111      	bne.n	8008c60 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	220b      	movs	r2, #11
 8008c40:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2203      	movs	r2, #3
 8008c46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008c56:	2200      	movs	r2, #0
 8008c58:	4619      	mov	r1, r3
 8008c5a:	f000 fa9b 	bl	8009194 <osMessagePut>
      break;
 8008c5e:	e0a4      	b.n	8008daa <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8008c60:	7bbb      	ldrb	r3, [r7, #14]
 8008c62:	2b05      	cmp	r3, #5
 8008c64:	f040 80a1 	bne.w	8008daa <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8008c68:	2303      	movs	r3, #3
 8008c6a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2203      	movs	r2, #3
 8008c70:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008c80:	2200      	movs	r2, #0
 8008c82:	4619      	mov	r1, r3
 8008c84:	f000 fa86 	bl	8009194 <osMessagePut>
      break;
 8008c88:	e08f      	b.n	8008daa <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	795b      	ldrb	r3, [r3, #5]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	9200      	str	r2, [sp, #0]
 8008c92:	2200      	movs	r2, #0
 8008c94:	2100      	movs	r1, #0
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f8aa 	bl	8008df0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	220a      	movs	r2, #10
 8008cac:	761a      	strb	r2, [r3, #24]
      break;
 8008cae:	e07f      	b.n	8008db0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	795b      	ldrb	r3, [r3, #5]
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f003 fb0c 	bl	800c2d4 <USBH_LL_GetURBState>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008cc0:	7bbb      	ldrb	r3, [r7, #14]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d113      	bne.n	8008cee <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	220d      	movs	r2, #13
 8008cce:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2203      	movs	r2, #3
 8008cd4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	f000 fa54 	bl	8009194 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008cec:	e05f      	b.n	8008dae <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008cee:	7bbb      	ldrb	r3, [r7, #14]
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d111      	bne.n	8008d18 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2209      	movs	r2, #9
 8008cf8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2203      	movs	r2, #3
 8008cfe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008d0e:	2200      	movs	r2, #0
 8008d10:	4619      	mov	r1, r3
 8008d12:	f000 fa3f 	bl	8009194 <osMessagePut>
      break;
 8008d16:	e04a      	b.n	8008dae <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8008d18:	7bbb      	ldrb	r3, [r7, #14]
 8008d1a:	2b04      	cmp	r3, #4
 8008d1c:	d147      	bne.n	8008dae <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	220b      	movs	r2, #11
 8008d22:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2203      	movs	r2, #3
 8008d28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008d38:	2200      	movs	r2, #0
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	f000 fa2a 	bl	8009194 <osMessagePut>
      break;
 8008d40:	e035      	b.n	8008dae <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	7e5b      	ldrb	r3, [r3, #25]
 8008d46:	3301      	adds	r3, #1
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	765a      	strb	r2, [r3, #25]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	7e5b      	ldrb	r3, [r3, #25]
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d806      	bhi.n	8008d64 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008d62:	e025      	b.n	8008db0 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d6a:	2106      	movs	r1, #6
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	795b      	ldrb	r3, [r3, #5]
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 f90d 	bl	8008f9c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	791b      	ldrb	r3, [r3, #4]
 8008d86:	4619      	mov	r1, r3
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f907 	bl	8008f9c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008d94:	2302      	movs	r3, #2
 8008d96:	73fb      	strb	r3, [r7, #15]
      break;
 8008d98:	e00a      	b.n	8008db0 <USBH_HandleControl+0x484>

    default:
      break;
 8008d9a:	bf00      	nop
 8008d9c:	e008      	b.n	8008db0 <USBH_HandleControl+0x484>
      break;
 8008d9e:	bf00      	nop
 8008da0:	e006      	b.n	8008db0 <USBH_HandleControl+0x484>
      break;
 8008da2:	bf00      	nop
 8008da4:	e004      	b.n	8008db0 <USBH_HandleControl+0x484>
      break;
 8008da6:	bf00      	nop
 8008da8:	e002      	b.n	8008db0 <USBH_HandleControl+0x484>
      break;
 8008daa:	bf00      	nop
 8008dac:	e000      	b.n	8008db0 <USBH_HandleControl+0x484>
      break;
 8008dae:	bf00      	nop
  }

  return status;
 8008db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop

08008dbc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b088      	sub	sp, #32
 8008dc0:	af04      	add	r7, sp, #16
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008dca:	79f9      	ldrb	r1, [r7, #7]
 8008dcc:	2300      	movs	r3, #0
 8008dce:	9303      	str	r3, [sp, #12]
 8008dd0:	2308      	movs	r3, #8
 8008dd2:	9302      	str	r3, [sp, #8]
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	9301      	str	r3, [sp, #4]
 8008dd8:	2300      	movs	r3, #0
 8008dda:	9300      	str	r3, [sp, #0]
 8008ddc:	2300      	movs	r3, #0
 8008dde:	2200      	movs	r2, #0
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f003 fa46 	bl	800c272 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b088      	sub	sp, #32
 8008df4:	af04      	add	r7, sp, #16
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	4611      	mov	r1, r2
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	460b      	mov	r3, r1
 8008e00:	80fb      	strh	r3, [r7, #6]
 8008e02:	4613      	mov	r3, r2
 8008e04:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d001      	beq.n	8008e14 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008e10:	2300      	movs	r3, #0
 8008e12:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e14:	7979      	ldrb	r1, [r7, #5]
 8008e16:	7e3b      	ldrb	r3, [r7, #24]
 8008e18:	9303      	str	r3, [sp, #12]
 8008e1a:	88fb      	ldrh	r3, [r7, #6]
 8008e1c:	9302      	str	r3, [sp, #8]
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	9301      	str	r3, [sp, #4]
 8008e22:	2301      	movs	r3, #1
 8008e24:	9300      	str	r3, [sp, #0]
 8008e26:	2300      	movs	r3, #0
 8008e28:	2200      	movs	r2, #0
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f003 fa21 	bl	800c272 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b088      	sub	sp, #32
 8008e3e:	af04      	add	r7, sp, #16
 8008e40:	60f8      	str	r0, [r7, #12]
 8008e42:	60b9      	str	r1, [r7, #8]
 8008e44:	4611      	mov	r1, r2
 8008e46:	461a      	mov	r2, r3
 8008e48:	460b      	mov	r3, r1
 8008e4a:	80fb      	strh	r3, [r7, #6]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e50:	7979      	ldrb	r1, [r7, #5]
 8008e52:	2300      	movs	r3, #0
 8008e54:	9303      	str	r3, [sp, #12]
 8008e56:	88fb      	ldrh	r3, [r7, #6]
 8008e58:	9302      	str	r3, [sp, #8]
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	9301      	str	r3, [sp, #4]
 8008e5e:	2301      	movs	r3, #1
 8008e60:	9300      	str	r3, [sp, #0]
 8008e62:	2300      	movs	r3, #0
 8008e64:	2201      	movs	r2, #1
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f003 fa03 	bl	800c272 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008e6c:	2300      	movs	r3, #0

}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b088      	sub	sp, #32
 8008e7a:	af04      	add	r7, sp, #16
 8008e7c:	60f8      	str	r0, [r7, #12]
 8008e7e:	60b9      	str	r1, [r7, #8]
 8008e80:	4611      	mov	r1, r2
 8008e82:	461a      	mov	r2, r3
 8008e84:	460b      	mov	r3, r1
 8008e86:	80fb      	strh	r3, [r7, #6]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d001      	beq.n	8008e9a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008e96:	2300      	movs	r3, #0
 8008e98:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e9a:	7979      	ldrb	r1, [r7, #5]
 8008e9c:	7e3b      	ldrb	r3, [r7, #24]
 8008e9e:	9303      	str	r3, [sp, #12]
 8008ea0:	88fb      	ldrh	r3, [r7, #6]
 8008ea2:	9302      	str	r3, [sp, #8]
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	9301      	str	r3, [sp, #4]
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	9300      	str	r3, [sp, #0]
 8008eac:	2302      	movs	r3, #2
 8008eae:	2200      	movs	r2, #0
 8008eb0:	68f8      	ldr	r0, [r7, #12]
 8008eb2:	f003 f9de 	bl	800c272 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008eb6:	2300      	movs	r3, #0
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3710      	adds	r7, #16
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b088      	sub	sp, #32
 8008ec4:	af04      	add	r7, sp, #16
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	4611      	mov	r1, r2
 8008ecc:	461a      	mov	r2, r3
 8008ece:	460b      	mov	r3, r1
 8008ed0:	80fb      	strh	r3, [r7, #6]
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ed6:	7979      	ldrb	r1, [r7, #5]
 8008ed8:	2300      	movs	r3, #0
 8008eda:	9303      	str	r3, [sp, #12]
 8008edc:	88fb      	ldrh	r3, [r7, #6]
 8008ede:	9302      	str	r3, [sp, #8]
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	9301      	str	r3, [sp, #4]
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	9300      	str	r3, [sp, #0]
 8008ee8:	2302      	movs	r3, #2
 8008eea:	2201      	movs	r2, #1
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f003 f9c0 	bl	800c272 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b086      	sub	sp, #24
 8008f00:	af04      	add	r7, sp, #16
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	4608      	mov	r0, r1
 8008f06:	4611      	mov	r1, r2
 8008f08:	461a      	mov	r2, r3
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	70fb      	strb	r3, [r7, #3]
 8008f0e:	460b      	mov	r3, r1
 8008f10:	70bb      	strb	r3, [r7, #2]
 8008f12:	4613      	mov	r3, r2
 8008f14:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008f16:	7878      	ldrb	r0, [r7, #1]
 8008f18:	78ba      	ldrb	r2, [r7, #2]
 8008f1a:	78f9      	ldrb	r1, [r7, #3]
 8008f1c:	8b3b      	ldrh	r3, [r7, #24]
 8008f1e:	9302      	str	r3, [sp, #8]
 8008f20:	7d3b      	ldrb	r3, [r7, #20]
 8008f22:	9301      	str	r3, [sp, #4]
 8008f24:	7c3b      	ldrb	r3, [r7, #16]
 8008f26:	9300      	str	r3, [sp, #0]
 8008f28:	4603      	mov	r3, r0
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f003 f953 	bl	800c1d6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3708      	adds	r7, #8
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b082      	sub	sp, #8
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	460b      	mov	r3, r1
 8008f44:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008f46:	78fb      	ldrb	r3, [r7, #3]
 8008f48:	4619      	mov	r1, r3
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f003 f972 	bl	800c234 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3708      	adds	r7, #8
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b084      	sub	sp, #16
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
 8008f62:	460b      	mov	r3, r1
 8008f64:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 f836 	bl	8008fd8 <USBH_GetFreePipe>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008f70:	89fb      	ldrh	r3, [r7, #14]
 8008f72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d00a      	beq.n	8008f90 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008f7a:	78fa      	ldrb	r2, [r7, #3]
 8008f7c:	89fb      	ldrh	r3, [r7, #14]
 8008f7e:	f003 030f 	and.w	r3, r3, #15
 8008f82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f86:	6879      	ldr	r1, [r7, #4]
 8008f88:	33e0      	adds	r3, #224	; 0xe0
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	440b      	add	r3, r1
 8008f8e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008f90:	89fb      	ldrh	r3, [r7, #14]
 8008f92:	b2db      	uxtb	r3, r3
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008fa8:	78fb      	ldrb	r3, [r7, #3]
 8008faa:	2b0f      	cmp	r3, #15
 8008fac:	d80d      	bhi.n	8008fca <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008fae:	78fb      	ldrb	r3, [r7, #3]
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	33e0      	adds	r3, #224	; 0xe0
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4413      	add	r3, r2
 8008fb8:	685a      	ldr	r2, [r3, #4]
 8008fba:	78fb      	ldrb	r3, [r7, #3]
 8008fbc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008fc0:	6879      	ldr	r1, [r7, #4]
 8008fc2:	33e0      	adds	r3, #224	; 0xe0
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	440b      	add	r3, r1
 8008fc8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	73fb      	strb	r3, [r7, #15]
 8008fe8:	e00f      	b.n	800900a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008fea:	7bfb      	ldrb	r3, [r7, #15]
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	33e0      	adds	r3, #224	; 0xe0
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	4413      	add	r3, r2
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d102      	bne.n	8009004 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008ffe:	7bfb      	ldrb	r3, [r7, #15]
 8009000:	b29b      	uxth	r3, r3
 8009002:	e007      	b.n	8009014 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009004:	7bfb      	ldrb	r3, [r7, #15]
 8009006:	3301      	adds	r3, #1
 8009008:	73fb      	strb	r3, [r7, #15]
 800900a:	7bfb      	ldrb	r3, [r7, #15]
 800900c:	2b0f      	cmp	r3, #15
 800900e:	d9ec      	bls.n	8008fea <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009010:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009014:	4618      	mov	r0, r3
 8009016:	3714      	adds	r7, #20
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009020:	b480      	push	{r7}
 8009022:	b085      	sub	sp, #20
 8009024:	af00      	add	r7, sp, #0
 8009026:	4603      	mov	r3, r0
 8009028:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800902a:	2300      	movs	r3, #0
 800902c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800902e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009032:	2b84      	cmp	r3, #132	; 0x84
 8009034:	d005      	beq.n	8009042 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009036:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	4413      	add	r3, r2
 800903e:	3303      	adds	r3, #3
 8009040:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009042:	68fb      	ldr	r3, [r7, #12]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3714      	adds	r7, #20
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009056:	f3ef 8305 	mrs	r3, IPSR
 800905a:	607b      	str	r3, [r7, #4]
  return(result);
 800905c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800905e:	2b00      	cmp	r3, #0
 8009060:	bf14      	ite	ne
 8009062:	2301      	movne	r3, #1
 8009064:	2300      	moveq	r3, #0
 8009066:	b2db      	uxtb	r3, r3
}
 8009068:	4618      	mov	r0, r3
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009078:	f001 f9f2 	bl	800a460 <vTaskStartScheduler>
  
  return osOK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	bd80      	pop	{r7, pc}

08009082 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009082:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009084:	b089      	sub	sp, #36	; 0x24
 8009086:	af04      	add	r7, sp, #16
 8009088:	6078      	str	r0, [r7, #4]
 800908a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	695b      	ldr	r3, [r3, #20]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d020      	beq.n	80090d6 <osThreadCreate+0x54>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	699b      	ldr	r3, [r3, #24]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d01c      	beq.n	80090d6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	685c      	ldr	r4, [r3, #4]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	691e      	ldr	r6, [r3, #16]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7ff ffb6 	bl	8009020 <makeFreeRtosPriority>
 80090b4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	695b      	ldr	r3, [r3, #20]
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80090be:	9202      	str	r2, [sp, #8]
 80090c0:	9301      	str	r3, [sp, #4]
 80090c2:	9100      	str	r1, [sp, #0]
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	4632      	mov	r2, r6
 80090c8:	4629      	mov	r1, r5
 80090ca:	4620      	mov	r0, r4
 80090cc:	f000 ff6c 	bl	8009fa8 <xTaskCreateStatic>
 80090d0:	4603      	mov	r3, r0
 80090d2:	60fb      	str	r3, [r7, #12]
 80090d4:	e01c      	b.n	8009110 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	685c      	ldr	r4, [r3, #4]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80090e2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7ff ff98 	bl	8009020 <makeFreeRtosPriority>
 80090f0:	4602      	mov	r2, r0
 80090f2:	f107 030c 	add.w	r3, r7, #12
 80090f6:	9301      	str	r3, [sp, #4]
 80090f8:	9200      	str	r2, [sp, #0]
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	4632      	mov	r2, r6
 80090fe:	4629      	mov	r1, r5
 8009100:	4620      	mov	r0, r4
 8009102:	f000 ffae 	bl	800a062 <xTaskCreate>
 8009106:	4603      	mov	r3, r0
 8009108:	2b01      	cmp	r3, #1
 800910a:	d001      	beq.n	8009110 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800910c:	2300      	movs	r3, #0
 800910e:	e000      	b.n	8009112 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009110:	68fb      	ldr	r3, [r7, #12]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3714      	adds	r7, #20
 8009116:	46bd      	mov	sp, r7
 8009118:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800911a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b084      	sub	sp, #16
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d001      	beq.n	8009130 <osDelay+0x16>
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	e000      	b.n	8009132 <osDelay+0x18>
 8009130:	2301      	movs	r3, #1
 8009132:	4618      	mov	r0, r3
 8009134:	f001 f960 	bl	800a3f8 <vTaskDelay>
  
  return osOK;
 8009138:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800913a:	4618      	mov	r0, r3
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009142:	b590      	push	{r4, r7, lr}
 8009144:	b085      	sub	sp, #20
 8009146:	af02      	add	r7, sp, #8
 8009148:	6078      	str	r0, [r7, #4]
 800914a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d011      	beq.n	8009178 <osMessageCreate+0x36>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00d      	beq.n	8009178 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6818      	ldr	r0, [r3, #0]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6859      	ldr	r1, [r3, #4]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	689a      	ldr	r2, [r3, #8]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	2400      	movs	r4, #0
 800916e:	9400      	str	r4, [sp, #0]
 8009170:	f000 f9e0 	bl	8009534 <xQueueGenericCreateStatic>
 8009174:	4603      	mov	r3, r0
 8009176:	e008      	b.n	800918a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6818      	ldr	r0, [r3, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	4619      	mov	r1, r3
 8009184:	f000 fa4e 	bl	8009624 <xQueueGenericCreate>
 8009188:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800918a:	4618      	mov	r0, r3
 800918c:	370c      	adds	r7, #12
 800918e:	46bd      	mov	sp, r7
 8009190:	bd90      	pop	{r4, r7, pc}
	...

08009194 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b086      	sub	sp, #24
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80091a0:	2300      	movs	r3, #0
 80091a2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d101      	bne.n	80091b2 <osMessagePut+0x1e>
    ticks = 1;
 80091ae:	2301      	movs	r3, #1
 80091b0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80091b2:	f7ff ff4d 	bl	8009050 <inHandlerMode>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d018      	beq.n	80091ee <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80091bc:	f107 0210 	add.w	r2, r7, #16
 80091c0:	f107 0108 	add.w	r1, r7, #8
 80091c4:	2300      	movs	r3, #0
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f000 fb84 	bl	80098d4 <xQueueGenericSendFromISR>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d001      	beq.n	80091d6 <osMessagePut+0x42>
      return osErrorOS;
 80091d2:	23ff      	movs	r3, #255	; 0xff
 80091d4:	e018      	b.n	8009208 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d014      	beq.n	8009206 <osMessagePut+0x72>
 80091dc:	4b0c      	ldr	r3, [pc, #48]	; (8009210 <osMessagePut+0x7c>)
 80091de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091e2:	601a      	str	r2, [r3, #0]
 80091e4:	f3bf 8f4f 	dsb	sy
 80091e8:	f3bf 8f6f 	isb	sy
 80091ec:	e00b      	b.n	8009206 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80091ee:	f107 0108 	add.w	r1, r7, #8
 80091f2:	2300      	movs	r3, #0
 80091f4:	697a      	ldr	r2, [r7, #20]
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f000 fa6e 	bl	80096d8 <xQueueGenericSend>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d001      	beq.n	8009206 <osMessagePut+0x72>
      return osErrorOS;
 8009202:	23ff      	movs	r3, #255	; 0xff
 8009204:	e000      	b.n	8009208 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009206:	2300      	movs	r3, #0
}
 8009208:	4618      	mov	r0, r3
 800920a:	3718      	adds	r7, #24
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	e000ed04 	.word	0xe000ed04

08009214 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009214:	b590      	push	{r4, r7, lr}
 8009216:	b08b      	sub	sp, #44	; 0x2c
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009224:	2300      	movs	r3, #0
 8009226:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10a      	bne.n	8009244 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800922e:	2380      	movs	r3, #128	; 0x80
 8009230:	617b      	str	r3, [r7, #20]
    return event;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	461c      	mov	r4, r3
 8009236:	f107 0314 	add.w	r3, r7, #20
 800923a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800923e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009242:	e054      	b.n	80092ee <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009244:	2300      	movs	r3, #0
 8009246:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009248:	2300      	movs	r3, #0
 800924a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009252:	d103      	bne.n	800925c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009254:	f04f 33ff 	mov.w	r3, #4294967295
 8009258:	627b      	str	r3, [r7, #36]	; 0x24
 800925a:	e009      	b.n	8009270 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d006      	beq.n	8009270 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8009266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009268:	2b00      	cmp	r3, #0
 800926a:	d101      	bne.n	8009270 <osMessageGet+0x5c>
      ticks = 1;
 800926c:	2301      	movs	r3, #1
 800926e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009270:	f7ff feee 	bl	8009050 <inHandlerMode>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d01c      	beq.n	80092b4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800927a:	f107 0220 	add.w	r2, r7, #32
 800927e:	f107 0314 	add.w	r3, r7, #20
 8009282:	3304      	adds	r3, #4
 8009284:	4619      	mov	r1, r3
 8009286:	68b8      	ldr	r0, [r7, #8]
 8009288:	f000 fca0 	bl	8009bcc <xQueueReceiveFromISR>
 800928c:	4603      	mov	r3, r0
 800928e:	2b01      	cmp	r3, #1
 8009290:	d102      	bne.n	8009298 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009292:	2310      	movs	r3, #16
 8009294:	617b      	str	r3, [r7, #20]
 8009296:	e001      	b.n	800929c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009298:	2300      	movs	r3, #0
 800929a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800929c:	6a3b      	ldr	r3, [r7, #32]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d01d      	beq.n	80092de <osMessageGet+0xca>
 80092a2:	4b15      	ldr	r3, [pc, #84]	; (80092f8 <osMessageGet+0xe4>)
 80092a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092a8:	601a      	str	r2, [r3, #0]
 80092aa:	f3bf 8f4f 	dsb	sy
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	e014      	b.n	80092de <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80092b4:	f107 0314 	add.w	r3, r7, #20
 80092b8:	3304      	adds	r3, #4
 80092ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092bc:	4619      	mov	r1, r3
 80092be:	68b8      	ldr	r0, [r7, #8]
 80092c0:	f000 fba4 	bl	8009a0c <xQueueReceive>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d102      	bne.n	80092d0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80092ca:	2310      	movs	r3, #16
 80092cc:	617b      	str	r3, [r7, #20]
 80092ce:	e006      	b.n	80092de <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80092d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d101      	bne.n	80092da <osMessageGet+0xc6>
 80092d6:	2300      	movs	r3, #0
 80092d8:	e000      	b.n	80092dc <osMessageGet+0xc8>
 80092da:	2340      	movs	r3, #64	; 0x40
 80092dc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	461c      	mov	r4, r3
 80092e2:	f107 0314 	add.w	r3, r7, #20
 80092e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80092ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	372c      	adds	r7, #44	; 0x2c
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd90      	pop	{r4, r7, pc}
 80092f6:	bf00      	nop
 80092f8:	e000ed04 	.word	0xe000ed04

080092fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f103 0208 	add.w	r2, r3, #8
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f04f 32ff 	mov.w	r2, #4294967295
 8009314:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f103 0208 	add.w	r2, r3, #8
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f103 0208 	add.w	r2, r3, #8
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009330:	bf00      	nop
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800934a:	bf00      	nop
 800934c:	370c      	adds	r7, #12
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr

08009356 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009356:	b480      	push	{r7}
 8009358:	b085      	sub	sp, #20
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
 800935e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	689a      	ldr	r2, [r3, #8]
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	683a      	ldr	r2, [r7, #0]
 800937a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	683a      	ldr	r2, [r7, #0]
 8009380:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	1c5a      	adds	r2, r3, #1
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	601a      	str	r2, [r3, #0]
}
 8009392:	bf00      	nop
 8009394:	3714      	adds	r7, #20
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr

0800939e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800939e:	b480      	push	{r7}
 80093a0:	b085      	sub	sp, #20
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
 80093a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093b4:	d103      	bne.n	80093be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	60fb      	str	r3, [r7, #12]
 80093bc:	e00c      	b.n	80093d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	3308      	adds	r3, #8
 80093c2:	60fb      	str	r3, [r7, #12]
 80093c4:	e002      	b.n	80093cc <vListInsert+0x2e>
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	60fb      	str	r3, [r7, #12]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	68ba      	ldr	r2, [r7, #8]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d2f6      	bcs.n	80093c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	685a      	ldr	r2, [r3, #4]
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	683a      	ldr	r2, [r7, #0]
 80093e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	683a      	ldr	r2, [r7, #0]
 80093f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	1c5a      	adds	r2, r3, #1
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	601a      	str	r2, [r3, #0]
}
 8009404:	bf00      	nop
 8009406:	3714      	adds	r7, #20
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009410:	b480      	push	{r7}
 8009412:	b085      	sub	sp, #20
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	691b      	ldr	r3, [r3, #16]
 800941c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	6892      	ldr	r2, [r2, #8]
 8009426:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	6852      	ldr	r2, [r2, #4]
 8009430:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	429a      	cmp	r2, r3
 800943a:	d103      	bne.n	8009444 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	689a      	ldr	r2, [r3, #8]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	1e5a      	subs	r2, r3, #1
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
}
 8009458:	4618      	mov	r0, r3
 800945a:	3714      	adds	r7, #20
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d10a      	bne.n	800948e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947c:	f383 8811 	msr	BASEPRI, r3
 8009480:	f3bf 8f6f 	isb	sy
 8009484:	f3bf 8f4f 	dsb	sy
 8009488:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800948a:	bf00      	nop
 800948c:	e7fe      	b.n	800948c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800948e:	f002 f9c1 	bl	800b814 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800949a:	68f9      	ldr	r1, [r7, #12]
 800949c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800949e:	fb01 f303 	mul.w	r3, r1, r3
 80094a2:	441a      	add	r2, r3
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094be:	3b01      	subs	r3, #1
 80094c0:	68f9      	ldr	r1, [r7, #12]
 80094c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80094c4:	fb01 f303 	mul.w	r3, r1, r3
 80094c8:	441a      	add	r2, r3
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	22ff      	movs	r2, #255	; 0xff
 80094d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	22ff      	movs	r2, #255	; 0xff
 80094da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d114      	bne.n	800950e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	691b      	ldr	r3, [r3, #16]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d01a      	beq.n	8009522 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	3310      	adds	r3, #16
 80094f0:	4618      	mov	r0, r3
 80094f2:	f001 fa49 	bl	800a988 <xTaskRemoveFromEventList>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d012      	beq.n	8009522 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80094fc:	4b0c      	ldr	r3, [pc, #48]	; (8009530 <xQueueGenericReset+0xcc>)
 80094fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009502:	601a      	str	r2, [r3, #0]
 8009504:	f3bf 8f4f 	dsb	sy
 8009508:	f3bf 8f6f 	isb	sy
 800950c:	e009      	b.n	8009522 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	3310      	adds	r3, #16
 8009512:	4618      	mov	r0, r3
 8009514:	f7ff fef2 	bl	80092fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	3324      	adds	r3, #36	; 0x24
 800951c:	4618      	mov	r0, r3
 800951e:	f7ff feed 	bl	80092fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009522:	f002 f9a7 	bl	800b874 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009526:	2301      	movs	r3, #1
}
 8009528:	4618      	mov	r0, r3
 800952a:	3710      	adds	r7, #16
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	e000ed04 	.word	0xe000ed04

08009534 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009534:	b580      	push	{r7, lr}
 8009536:	b08e      	sub	sp, #56	; 0x38
 8009538:	af02      	add	r7, sp, #8
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
 8009540:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d10a      	bne.n	800955e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954c:	f383 8811 	msr	BASEPRI, r3
 8009550:	f3bf 8f6f 	isb	sy
 8009554:	f3bf 8f4f 	dsb	sy
 8009558:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800955a:	bf00      	nop
 800955c:	e7fe      	b.n	800955c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d10a      	bne.n	800957a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009568:	f383 8811 	msr	BASEPRI, r3
 800956c:	f3bf 8f6f 	isb	sy
 8009570:	f3bf 8f4f 	dsb	sy
 8009574:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009576:	bf00      	nop
 8009578:	e7fe      	b.n	8009578 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d002      	beq.n	8009586 <xQueueGenericCreateStatic+0x52>
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d001      	beq.n	800958a <xQueueGenericCreateStatic+0x56>
 8009586:	2301      	movs	r3, #1
 8009588:	e000      	b.n	800958c <xQueueGenericCreateStatic+0x58>
 800958a:	2300      	movs	r3, #0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d10a      	bne.n	80095a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009594:	f383 8811 	msr	BASEPRI, r3
 8009598:	f3bf 8f6f 	isb	sy
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	623b      	str	r3, [r7, #32]
}
 80095a2:	bf00      	nop
 80095a4:	e7fe      	b.n	80095a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d102      	bne.n	80095b2 <xQueueGenericCreateStatic+0x7e>
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d101      	bne.n	80095b6 <xQueueGenericCreateStatic+0x82>
 80095b2:	2301      	movs	r3, #1
 80095b4:	e000      	b.n	80095b8 <xQueueGenericCreateStatic+0x84>
 80095b6:	2300      	movs	r3, #0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d10a      	bne.n	80095d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80095bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c0:	f383 8811 	msr	BASEPRI, r3
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	61fb      	str	r3, [r7, #28]
}
 80095ce:	bf00      	nop
 80095d0:	e7fe      	b.n	80095d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80095d2:	2348      	movs	r3, #72	; 0x48
 80095d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	2b48      	cmp	r3, #72	; 0x48
 80095da:	d00a      	beq.n	80095f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80095dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e0:	f383 8811 	msr	BASEPRI, r3
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	61bb      	str	r3, [r7, #24]
}
 80095ee:	bf00      	nop
 80095f0:	e7fe      	b.n	80095f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80095f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80095f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00d      	beq.n	800961a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80095fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009600:	2201      	movs	r2, #1
 8009602:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009606:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800960a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960c:	9300      	str	r3, [sp, #0]
 800960e:	4613      	mov	r3, r2
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	68b9      	ldr	r1, [r7, #8]
 8009614:	68f8      	ldr	r0, [r7, #12]
 8009616:	f000 f83f 	bl	8009698 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800961a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800961c:	4618      	mov	r0, r3
 800961e:	3730      	adds	r7, #48	; 0x30
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009624:	b580      	push	{r7, lr}
 8009626:	b08a      	sub	sp, #40	; 0x28
 8009628:	af02      	add	r7, sp, #8
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	4613      	mov	r3, r2
 8009630:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d10a      	bne.n	800964e <xQueueGenericCreate+0x2a>
	__asm volatile
 8009638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963c:	f383 8811 	msr	BASEPRI, r3
 8009640:	f3bf 8f6f 	isb	sy
 8009644:	f3bf 8f4f 	dsb	sy
 8009648:	613b      	str	r3, [r7, #16]
}
 800964a:	bf00      	nop
 800964c:	e7fe      	b.n	800964c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	68ba      	ldr	r2, [r7, #8]
 8009652:	fb02 f303 	mul.w	r3, r2, r3
 8009656:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	3348      	adds	r3, #72	; 0x48
 800965c:	4618      	mov	r0, r3
 800965e:	f002 f9fb 	bl	800ba58 <pvPortMalloc>
 8009662:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d011      	beq.n	800968e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	3348      	adds	r3, #72	; 0x48
 8009672:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	2200      	movs	r2, #0
 8009678:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800967c:	79fa      	ldrb	r2, [r7, #7]
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	4613      	mov	r3, r2
 8009684:	697a      	ldr	r2, [r7, #20]
 8009686:	68b9      	ldr	r1, [r7, #8]
 8009688:	68f8      	ldr	r0, [r7, #12]
 800968a:	f000 f805 	bl	8009698 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800968e:	69bb      	ldr	r3, [r7, #24]
	}
 8009690:	4618      	mov	r0, r3
 8009692:	3720      	adds	r7, #32
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	607a      	str	r2, [r7, #4]
 80096a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d103      	bne.n	80096b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	69ba      	ldr	r2, [r7, #24]
 80096b0:	601a      	str	r2, [r3, #0]
 80096b2:	e002      	b.n	80096ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80096c6:	2101      	movs	r1, #1
 80096c8:	69b8      	ldr	r0, [r7, #24]
 80096ca:	f7ff fecb 	bl	8009464 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80096ce:	bf00      	nop
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
	...

080096d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b08e      	sub	sp, #56	; 0x38
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	607a      	str	r2, [r7, #4]
 80096e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80096e6:	2300      	movs	r3, #0
 80096e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80096ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d10a      	bne.n	800970a <xQueueGenericSend+0x32>
	__asm volatile
 80096f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f8:	f383 8811 	msr	BASEPRI, r3
 80096fc:	f3bf 8f6f 	isb	sy
 8009700:	f3bf 8f4f 	dsb	sy
 8009704:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009706:	bf00      	nop
 8009708:	e7fe      	b.n	8009708 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d103      	bne.n	8009718 <xQueueGenericSend+0x40>
 8009710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009714:	2b00      	cmp	r3, #0
 8009716:	d101      	bne.n	800971c <xQueueGenericSend+0x44>
 8009718:	2301      	movs	r3, #1
 800971a:	e000      	b.n	800971e <xQueueGenericSend+0x46>
 800971c:	2300      	movs	r3, #0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10a      	bne.n	8009738 <xQueueGenericSend+0x60>
	__asm volatile
 8009722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009726:	f383 8811 	msr	BASEPRI, r3
 800972a:	f3bf 8f6f 	isb	sy
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009734:	bf00      	nop
 8009736:	e7fe      	b.n	8009736 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	2b02      	cmp	r3, #2
 800973c:	d103      	bne.n	8009746 <xQueueGenericSend+0x6e>
 800973e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009742:	2b01      	cmp	r3, #1
 8009744:	d101      	bne.n	800974a <xQueueGenericSend+0x72>
 8009746:	2301      	movs	r3, #1
 8009748:	e000      	b.n	800974c <xQueueGenericSend+0x74>
 800974a:	2300      	movs	r3, #0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d10a      	bne.n	8009766 <xQueueGenericSend+0x8e>
	__asm volatile
 8009750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	623b      	str	r3, [r7, #32]
}
 8009762:	bf00      	nop
 8009764:	e7fe      	b.n	8009764 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009766:	f001 facf 	bl	800ad08 <xTaskGetSchedulerState>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d102      	bne.n	8009776 <xQueueGenericSend+0x9e>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d101      	bne.n	800977a <xQueueGenericSend+0xa2>
 8009776:	2301      	movs	r3, #1
 8009778:	e000      	b.n	800977c <xQueueGenericSend+0xa4>
 800977a:	2300      	movs	r3, #0
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10a      	bne.n	8009796 <xQueueGenericSend+0xbe>
	__asm volatile
 8009780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	61fb      	str	r3, [r7, #28]
}
 8009792:	bf00      	nop
 8009794:	e7fe      	b.n	8009794 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009796:	f002 f83d 	bl	800b814 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800979a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800979e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d302      	bcc.n	80097ac <xQueueGenericSend+0xd4>
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	d129      	bne.n	8009800 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80097ac:	683a      	ldr	r2, [r7, #0]
 80097ae:	68b9      	ldr	r1, [r7, #8]
 80097b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097b2:	f000 fa8b 	bl	8009ccc <prvCopyDataToQueue>
 80097b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d010      	beq.n	80097e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c2:	3324      	adds	r3, #36	; 0x24
 80097c4:	4618      	mov	r0, r3
 80097c6:	f001 f8df 	bl	800a988 <xTaskRemoveFromEventList>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d013      	beq.n	80097f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80097d0:	4b3f      	ldr	r3, [pc, #252]	; (80098d0 <xQueueGenericSend+0x1f8>)
 80097d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097d6:	601a      	str	r2, [r3, #0]
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	e00a      	b.n	80097f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80097e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d007      	beq.n	80097f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80097e8:	4b39      	ldr	r3, [pc, #228]	; (80098d0 <xQueueGenericSend+0x1f8>)
 80097ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097ee:	601a      	str	r2, [r3, #0]
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80097f8:	f002 f83c 	bl	800b874 <vPortExitCritical>
				return pdPASS;
 80097fc:	2301      	movs	r3, #1
 80097fe:	e063      	b.n	80098c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d103      	bne.n	800980e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009806:	f002 f835 	bl	800b874 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800980a:	2300      	movs	r3, #0
 800980c:	e05c      	b.n	80098c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800980e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009810:	2b00      	cmp	r3, #0
 8009812:	d106      	bne.n	8009822 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009814:	f107 0314 	add.w	r3, r7, #20
 8009818:	4618      	mov	r0, r3
 800981a:	f001 f917 	bl	800aa4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800981e:	2301      	movs	r3, #1
 8009820:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009822:	f002 f827 	bl	800b874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009826:	f000 fe8b 	bl	800a540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800982a:	f001 fff3 	bl	800b814 <vPortEnterCritical>
 800982e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009830:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009834:	b25b      	sxtb	r3, r3
 8009836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800983a:	d103      	bne.n	8009844 <xQueueGenericSend+0x16c>
 800983c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983e:	2200      	movs	r2, #0
 8009840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009846:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800984a:	b25b      	sxtb	r3, r3
 800984c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009850:	d103      	bne.n	800985a <xQueueGenericSend+0x182>
 8009852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009854:	2200      	movs	r2, #0
 8009856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800985a:	f002 f80b 	bl	800b874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800985e:	1d3a      	adds	r2, r7, #4
 8009860:	f107 0314 	add.w	r3, r7, #20
 8009864:	4611      	mov	r1, r2
 8009866:	4618      	mov	r0, r3
 8009868:	f001 f906 	bl	800aa78 <xTaskCheckForTimeOut>
 800986c:	4603      	mov	r3, r0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d124      	bne.n	80098bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009872:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009874:	f000 fb22 	bl	8009ebc <prvIsQueueFull>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d018      	beq.n	80098b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800987e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009880:	3310      	adds	r3, #16
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	4611      	mov	r1, r2
 8009886:	4618      	mov	r0, r3
 8009888:	f001 f82e 	bl	800a8e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800988c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800988e:	f000 faad 	bl	8009dec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009892:	f000 fe63 	bl	800a55c <xTaskResumeAll>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	f47f af7c 	bne.w	8009796 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800989e:	4b0c      	ldr	r3, [pc, #48]	; (80098d0 <xQueueGenericSend+0x1f8>)
 80098a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098a4:	601a      	str	r2, [r3, #0]
 80098a6:	f3bf 8f4f 	dsb	sy
 80098aa:	f3bf 8f6f 	isb	sy
 80098ae:	e772      	b.n	8009796 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80098b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098b2:	f000 fa9b 	bl	8009dec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80098b6:	f000 fe51 	bl	800a55c <xTaskResumeAll>
 80098ba:	e76c      	b.n	8009796 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80098bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098be:	f000 fa95 	bl	8009dec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098c2:	f000 fe4b 	bl	800a55c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80098c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3738      	adds	r7, #56	; 0x38
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	e000ed04 	.word	0xe000ed04

080098d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b090      	sub	sp, #64	; 0x40
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
 80098e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80098e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d10a      	bne.n	8009902 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80098ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f0:	f383 8811 	msr	BASEPRI, r3
 80098f4:	f3bf 8f6f 	isb	sy
 80098f8:	f3bf 8f4f 	dsb	sy
 80098fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80098fe:	bf00      	nop
 8009900:	e7fe      	b.n	8009900 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d103      	bne.n	8009910 <xQueueGenericSendFromISR+0x3c>
 8009908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800990c:	2b00      	cmp	r3, #0
 800990e:	d101      	bne.n	8009914 <xQueueGenericSendFromISR+0x40>
 8009910:	2301      	movs	r3, #1
 8009912:	e000      	b.n	8009916 <xQueueGenericSendFromISR+0x42>
 8009914:	2300      	movs	r3, #0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d10a      	bne.n	8009930 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800991a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991e:	f383 8811 	msr	BASEPRI, r3
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	f3bf 8f4f 	dsb	sy
 800992a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800992c:	bf00      	nop
 800992e:	e7fe      	b.n	800992e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	2b02      	cmp	r3, #2
 8009934:	d103      	bne.n	800993e <xQueueGenericSendFromISR+0x6a>
 8009936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800993a:	2b01      	cmp	r3, #1
 800993c:	d101      	bne.n	8009942 <xQueueGenericSendFromISR+0x6e>
 800993e:	2301      	movs	r3, #1
 8009940:	e000      	b.n	8009944 <xQueueGenericSendFromISR+0x70>
 8009942:	2300      	movs	r3, #0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d10a      	bne.n	800995e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994c:	f383 8811 	msr	BASEPRI, r3
 8009950:	f3bf 8f6f 	isb	sy
 8009954:	f3bf 8f4f 	dsb	sy
 8009958:	623b      	str	r3, [r7, #32]
}
 800995a:	bf00      	nop
 800995c:	e7fe      	b.n	800995c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800995e:	f002 f83b 	bl	800b9d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009962:	f3ef 8211 	mrs	r2, BASEPRI
 8009966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996a:	f383 8811 	msr	BASEPRI, r3
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f3bf 8f4f 	dsb	sy
 8009976:	61fa      	str	r2, [r7, #28]
 8009978:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800997a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800997c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800997e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009986:	429a      	cmp	r2, r3
 8009988:	d302      	bcc.n	8009990 <xQueueGenericSendFromISR+0xbc>
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	2b02      	cmp	r3, #2
 800998e:	d12f      	bne.n	80099f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009992:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800999a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800999c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800999e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80099a0:	683a      	ldr	r2, [r7, #0]
 80099a2:	68b9      	ldr	r1, [r7, #8]
 80099a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80099a6:	f000 f991 	bl	8009ccc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80099aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80099ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b2:	d112      	bne.n	80099da <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d016      	beq.n	80099ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099be:	3324      	adds	r3, #36	; 0x24
 80099c0:	4618      	mov	r0, r3
 80099c2:	f000 ffe1 	bl	800a988 <xTaskRemoveFromEventList>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d00e      	beq.n	80099ea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d00b      	beq.n	80099ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2201      	movs	r2, #1
 80099d6:	601a      	str	r2, [r3, #0]
 80099d8:	e007      	b.n	80099ea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80099da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80099de:	3301      	adds	r3, #1
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	b25a      	sxtb	r2, r3
 80099e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80099ea:	2301      	movs	r3, #1
 80099ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80099ee:	e001      	b.n	80099f4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80099f0:	2300      	movs	r3, #0
 80099f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099f6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80099fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3740      	adds	r7, #64	; 0x40
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
	...

08009a0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b08c      	sub	sp, #48	; 0x30
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d10a      	bne.n	8009a3c <xQueueReceive+0x30>
	__asm volatile
 8009a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2a:	f383 8811 	msr	BASEPRI, r3
 8009a2e:	f3bf 8f6f 	isb	sy
 8009a32:	f3bf 8f4f 	dsb	sy
 8009a36:	623b      	str	r3, [r7, #32]
}
 8009a38:	bf00      	nop
 8009a3a:	e7fe      	b.n	8009a3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d103      	bne.n	8009a4a <xQueueReceive+0x3e>
 8009a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d101      	bne.n	8009a4e <xQueueReceive+0x42>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e000      	b.n	8009a50 <xQueueReceive+0x44>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d10a      	bne.n	8009a6a <xQueueReceive+0x5e>
	__asm volatile
 8009a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a58:	f383 8811 	msr	BASEPRI, r3
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	61fb      	str	r3, [r7, #28]
}
 8009a66:	bf00      	nop
 8009a68:	e7fe      	b.n	8009a68 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a6a:	f001 f94d 	bl	800ad08 <xTaskGetSchedulerState>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d102      	bne.n	8009a7a <xQueueReceive+0x6e>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d101      	bne.n	8009a7e <xQueueReceive+0x72>
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e000      	b.n	8009a80 <xQueueReceive+0x74>
 8009a7e:	2300      	movs	r3, #0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d10a      	bne.n	8009a9a <xQueueReceive+0x8e>
	__asm volatile
 8009a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a88:	f383 8811 	msr	BASEPRI, r3
 8009a8c:	f3bf 8f6f 	isb	sy
 8009a90:	f3bf 8f4f 	dsb	sy
 8009a94:	61bb      	str	r3, [r7, #24]
}
 8009a96:	bf00      	nop
 8009a98:	e7fe      	b.n	8009a98 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a9a:	f001 febb 	bl	800b814 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d01f      	beq.n	8009aea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009aaa:	68b9      	ldr	r1, [r7, #8]
 8009aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aae:	f000 f977 	bl	8009da0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab4:	1e5a      	subs	r2, r3, #1
 8009ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d00f      	beq.n	8009ae2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac4:	3310      	adds	r3, #16
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f000 ff5e 	bl	800a988 <xTaskRemoveFromEventList>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d007      	beq.n	8009ae2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009ad2:	4b3d      	ldr	r3, [pc, #244]	; (8009bc8 <xQueueReceive+0x1bc>)
 8009ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ad8:	601a      	str	r2, [r3, #0]
 8009ada:	f3bf 8f4f 	dsb	sy
 8009ade:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009ae2:	f001 fec7 	bl	800b874 <vPortExitCritical>
				return pdPASS;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e069      	b.n	8009bbe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d103      	bne.n	8009af8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009af0:	f001 fec0 	bl	800b874 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009af4:	2300      	movs	r3, #0
 8009af6:	e062      	b.n	8009bbe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d106      	bne.n	8009b0c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009afe:	f107 0310 	add.w	r3, r7, #16
 8009b02:	4618      	mov	r0, r3
 8009b04:	f000 ffa2 	bl	800aa4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b0c:	f001 feb2 	bl	800b874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b10:	f000 fd16 	bl	800a540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b14:	f001 fe7e 	bl	800b814 <vPortEnterCritical>
 8009b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b1e:	b25b      	sxtb	r3, r3
 8009b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b24:	d103      	bne.n	8009b2e <xQueueReceive+0x122>
 8009b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b34:	b25b      	sxtb	r3, r3
 8009b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b3a:	d103      	bne.n	8009b44 <xQueueReceive+0x138>
 8009b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b44:	f001 fe96 	bl	800b874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b48:	1d3a      	adds	r2, r7, #4
 8009b4a:	f107 0310 	add.w	r3, r7, #16
 8009b4e:	4611      	mov	r1, r2
 8009b50:	4618      	mov	r0, r3
 8009b52:	f000 ff91 	bl	800aa78 <xTaskCheckForTimeOut>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d123      	bne.n	8009ba4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b5e:	f000 f997 	bl	8009e90 <prvIsQueueEmpty>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d017      	beq.n	8009b98 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6a:	3324      	adds	r3, #36	; 0x24
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	4611      	mov	r1, r2
 8009b70:	4618      	mov	r0, r3
 8009b72:	f000 feb9 	bl	800a8e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b78:	f000 f938 	bl	8009dec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b7c:	f000 fcee 	bl	800a55c <xTaskResumeAll>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d189      	bne.n	8009a9a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009b86:	4b10      	ldr	r3, [pc, #64]	; (8009bc8 <xQueueReceive+0x1bc>)
 8009b88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b8c:	601a      	str	r2, [r3, #0]
 8009b8e:	f3bf 8f4f 	dsb	sy
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	e780      	b.n	8009a9a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b9a:	f000 f927 	bl	8009dec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b9e:	f000 fcdd 	bl	800a55c <xTaskResumeAll>
 8009ba2:	e77a      	b.n	8009a9a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009ba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ba6:	f000 f921 	bl	8009dec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009baa:	f000 fcd7 	bl	800a55c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bb0:	f000 f96e 	bl	8009e90 <prvIsQueueEmpty>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f43f af6f 	beq.w	8009a9a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009bbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3730      	adds	r7, #48	; 0x30
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	e000ed04 	.word	0xe000ed04

08009bcc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b08e      	sub	sp, #56	; 0x38
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d10a      	bne.n	8009bf8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be6:	f383 8811 	msr	BASEPRI, r3
 8009bea:	f3bf 8f6f 	isb	sy
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	623b      	str	r3, [r7, #32]
}
 8009bf4:	bf00      	nop
 8009bf6:	e7fe      	b.n	8009bf6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d103      	bne.n	8009c06 <xQueueReceiveFromISR+0x3a>
 8009bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d101      	bne.n	8009c0a <xQueueReceiveFromISR+0x3e>
 8009c06:	2301      	movs	r3, #1
 8009c08:	e000      	b.n	8009c0c <xQueueReceiveFromISR+0x40>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d10a      	bne.n	8009c26 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c14:	f383 8811 	msr	BASEPRI, r3
 8009c18:	f3bf 8f6f 	isb	sy
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	61fb      	str	r3, [r7, #28]
}
 8009c22:	bf00      	nop
 8009c24:	e7fe      	b.n	8009c24 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c26:	f001 fed7 	bl	800b9d8 <vPortValidateInterruptPriority>
	__asm volatile
 8009c2a:	f3ef 8211 	mrs	r2, BASEPRI
 8009c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c32:	f383 8811 	msr	BASEPRI, r3
 8009c36:	f3bf 8f6f 	isb	sy
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	61ba      	str	r2, [r7, #24]
 8009c40:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009c42:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c4a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d02f      	beq.n	8009cb2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009c5c:	68b9      	ldr	r1, [r7, #8]
 8009c5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c60:	f000 f89e 	bl	8009da0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c66:	1e5a      	subs	r2, r3, #1
 8009c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009c6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c74:	d112      	bne.n	8009c9c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d016      	beq.n	8009cac <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c80:	3310      	adds	r3, #16
 8009c82:	4618      	mov	r0, r3
 8009c84:	f000 fe80 	bl	800a988 <xTaskRemoveFromEventList>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00e      	beq.n	8009cac <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d00b      	beq.n	8009cac <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2201      	movs	r2, #1
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	e007      	b.n	8009cac <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	b25a      	sxtb	r2, r3
 8009ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009cac:	2301      	movs	r3, #1
 8009cae:	637b      	str	r3, [r7, #52]	; 0x34
 8009cb0:	e001      	b.n	8009cb6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8009cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	f383 8811 	msr	BASEPRI, r3
}
 8009cc0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3738      	adds	r7, #56	; 0x38
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b086      	sub	sp, #24
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d10d      	bne.n	8009d06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d14d      	bne.n	8009d8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f001 f824 	bl	800ad44 <xTaskPriorityDisinherit>
 8009cfc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2200      	movs	r2, #0
 8009d02:	609a      	str	r2, [r3, #8]
 8009d04:	e043      	b.n	8009d8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d119      	bne.n	8009d40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	6858      	ldr	r0, [r3, #4]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d14:	461a      	mov	r2, r3
 8009d16:	68b9      	ldr	r1, [r7, #8]
 8009d18:	f002 fce2 	bl	800c6e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	685a      	ldr	r2, [r3, #4]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d24:	441a      	add	r2, r3
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	685a      	ldr	r2, [r3, #4]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d32b      	bcc.n	8009d8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	605a      	str	r2, [r3, #4]
 8009d3e:	e026      	b.n	8009d8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	68d8      	ldr	r0, [r3, #12]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d48:	461a      	mov	r2, r3
 8009d4a:	68b9      	ldr	r1, [r7, #8]
 8009d4c:	f002 fcc8 	bl	800c6e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	68da      	ldr	r2, [r3, #12]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d58:	425b      	negs	r3, r3
 8009d5a:	441a      	add	r2, r3
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	68da      	ldr	r2, [r3, #12]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d207      	bcs.n	8009d7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	689a      	ldr	r2, [r3, #8]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d74:	425b      	negs	r3, r3
 8009d76:	441a      	add	r2, r3
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	d105      	bne.n	8009d8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d002      	beq.n	8009d8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	3b01      	subs	r3, #1
 8009d8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	1c5a      	adds	r2, r3, #1
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009d96:	697b      	ldr	r3, [r7, #20]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3718      	adds	r7, #24
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d018      	beq.n	8009de4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	68da      	ldr	r2, [r3, #12]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dba:	441a      	add	r2, r3
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	68da      	ldr	r2, [r3, #12]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d303      	bcc.n	8009dd4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	68d9      	ldr	r1, [r3, #12]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ddc:	461a      	mov	r2, r3
 8009dde:	6838      	ldr	r0, [r7, #0]
 8009de0:	f002 fc7e 	bl	800c6e0 <memcpy>
	}
}
 8009de4:	bf00      	nop
 8009de6:	3708      	adds	r7, #8
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009df4:	f001 fd0e 	bl	800b814 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dfe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e00:	e011      	b.n	8009e26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d012      	beq.n	8009e30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	3324      	adds	r3, #36	; 0x24
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f000 fdba 	bl	800a988 <xTaskRemoveFromEventList>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d001      	beq.n	8009e1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009e1a:	f000 fe8f 	bl	800ab3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009e1e:	7bfb      	ldrb	r3, [r7, #15]
 8009e20:	3b01      	subs	r3, #1
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	dce9      	bgt.n	8009e02 <prvUnlockQueue+0x16>
 8009e2e:	e000      	b.n	8009e32 <prvUnlockQueue+0x46>
					break;
 8009e30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	22ff      	movs	r2, #255	; 0xff
 8009e36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009e3a:	f001 fd1b 	bl	800b874 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009e3e:	f001 fce9 	bl	800b814 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e4a:	e011      	b.n	8009e70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	691b      	ldr	r3, [r3, #16]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d012      	beq.n	8009e7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	3310      	adds	r3, #16
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f000 fd95 	bl	800a988 <xTaskRemoveFromEventList>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d001      	beq.n	8009e68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e64:	f000 fe6a 	bl	800ab3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e68:	7bbb      	ldrb	r3, [r7, #14]
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	dce9      	bgt.n	8009e4c <prvUnlockQueue+0x60>
 8009e78:	e000      	b.n	8009e7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	22ff      	movs	r2, #255	; 0xff
 8009e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009e84:	f001 fcf6 	bl	800b874 <vPortExitCritical>
}
 8009e88:	bf00      	nop
 8009e8a:	3710      	adds	r7, #16
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e98:	f001 fcbc 	bl	800b814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d102      	bne.n	8009eaa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	60fb      	str	r3, [r7, #12]
 8009ea8:	e001      	b.n	8009eae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009eae:	f001 fce1 	bl	800b874 <vPortExitCritical>

	return xReturn;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ec4:	f001 fca6 	bl	800b814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d102      	bne.n	8009eda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	60fb      	str	r3, [r7, #12]
 8009ed8:	e001      	b.n	8009ede <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009eda:	2300      	movs	r3, #0
 8009edc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ede:	f001 fcc9 	bl	800b874 <vPortExitCritical>

	return xReturn;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3710      	adds	r7, #16
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	60fb      	str	r3, [r7, #12]
 8009efa:	e014      	b.n	8009f26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009efc:	4a0f      	ldr	r2, [pc, #60]	; (8009f3c <vQueueAddToRegistry+0x50>)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d10b      	bne.n	8009f20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009f08:	490c      	ldr	r1, [pc, #48]	; (8009f3c <vQueueAddToRegistry+0x50>)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	683a      	ldr	r2, [r7, #0]
 8009f0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009f12:	4a0a      	ldr	r2, [pc, #40]	; (8009f3c <vQueueAddToRegistry+0x50>)
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	00db      	lsls	r3, r3, #3
 8009f18:	4413      	add	r3, r2
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009f1e:	e006      	b.n	8009f2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	3301      	adds	r3, #1
 8009f24:	60fb      	str	r3, [r7, #12]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2b07      	cmp	r3, #7
 8009f2a:	d9e7      	bls.n	8009efc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009f2c:	bf00      	nop
 8009f2e:	bf00      	nop
 8009f30:	3714      	adds	r7, #20
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr
 8009f3a:	bf00      	nop
 8009f3c:	20000974 	.word	0x20000974

08009f40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009f50:	f001 fc60 	bl	800b814 <vPortEnterCritical>
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f5a:	b25b      	sxtb	r3, r3
 8009f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f60:	d103      	bne.n	8009f6a <vQueueWaitForMessageRestricted+0x2a>
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f70:	b25b      	sxtb	r3, r3
 8009f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f76:	d103      	bne.n	8009f80 <vQueueWaitForMessageRestricted+0x40>
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f80:	f001 fc78 	bl	800b874 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d106      	bne.n	8009f9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	3324      	adds	r3, #36	; 0x24
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	68b9      	ldr	r1, [r7, #8]
 8009f94:	4618      	mov	r0, r3
 8009f96:	f000 fccb 	bl	800a930 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009f9a:	6978      	ldr	r0, [r7, #20]
 8009f9c:	f7ff ff26 	bl	8009dec <prvUnlockQueue>
	}
 8009fa0:	bf00      	nop
 8009fa2:	3718      	adds	r7, #24
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b08e      	sub	sp, #56	; 0x38
 8009fac:	af04      	add	r7, sp, #16
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	607a      	str	r2, [r7, #4]
 8009fb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d10a      	bne.n	8009fd2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc0:	f383 8811 	msr	BASEPRI, r3
 8009fc4:	f3bf 8f6f 	isb	sy
 8009fc8:	f3bf 8f4f 	dsb	sy
 8009fcc:	623b      	str	r3, [r7, #32]
}
 8009fce:	bf00      	nop
 8009fd0:	e7fe      	b.n	8009fd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d10a      	bne.n	8009fee <xTaskCreateStatic+0x46>
	__asm volatile
 8009fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fdc:	f383 8811 	msr	BASEPRI, r3
 8009fe0:	f3bf 8f6f 	isb	sy
 8009fe4:	f3bf 8f4f 	dsb	sy
 8009fe8:	61fb      	str	r3, [r7, #28]
}
 8009fea:	bf00      	nop
 8009fec:	e7fe      	b.n	8009fec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009fee:	23a0      	movs	r3, #160	; 0xa0
 8009ff0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	2ba0      	cmp	r3, #160	; 0xa0
 8009ff6:	d00a      	beq.n	800a00e <xTaskCreateStatic+0x66>
	__asm volatile
 8009ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	61bb      	str	r3, [r7, #24]
}
 800a00a:	bf00      	nop
 800a00c:	e7fe      	b.n	800a00c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a00e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a012:	2b00      	cmp	r3, #0
 800a014:	d01e      	beq.n	800a054 <xTaskCreateStatic+0xac>
 800a016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d01b      	beq.n	800a054 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a024:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a028:	2202      	movs	r2, #2
 800a02a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a02e:	2300      	movs	r3, #0
 800a030:	9303      	str	r3, [sp, #12]
 800a032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a034:	9302      	str	r3, [sp, #8]
 800a036:	f107 0314 	add.w	r3, r7, #20
 800a03a:	9301      	str	r3, [sp, #4]
 800a03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03e:	9300      	str	r3, [sp, #0]
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	68b9      	ldr	r1, [r7, #8]
 800a046:	68f8      	ldr	r0, [r7, #12]
 800a048:	f000 f850 	bl	800a0ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a04c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a04e:	f000 f8eb 	bl	800a228 <prvAddNewTaskToReadyList>
 800a052:	e001      	b.n	800a058 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a054:	2300      	movs	r3, #0
 800a056:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a058:	697b      	ldr	r3, [r7, #20]
	}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3728      	adds	r7, #40	; 0x28
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a062:	b580      	push	{r7, lr}
 800a064:	b08c      	sub	sp, #48	; 0x30
 800a066:	af04      	add	r7, sp, #16
 800a068:	60f8      	str	r0, [r7, #12]
 800a06a:	60b9      	str	r1, [r7, #8]
 800a06c:	603b      	str	r3, [r7, #0]
 800a06e:	4613      	mov	r3, r2
 800a070:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a072:	88fb      	ldrh	r3, [r7, #6]
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	4618      	mov	r0, r3
 800a078:	f001 fcee 	bl	800ba58 <pvPortMalloc>
 800a07c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d00e      	beq.n	800a0a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a084:	20a0      	movs	r0, #160	; 0xa0
 800a086:	f001 fce7 	bl	800ba58 <pvPortMalloc>
 800a08a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d003      	beq.n	800a09a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	697a      	ldr	r2, [r7, #20]
 800a096:	631a      	str	r2, [r3, #48]	; 0x30
 800a098:	e005      	b.n	800a0a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a09a:	6978      	ldr	r0, [r7, #20]
 800a09c:	f001 fda8 	bl	800bbf0 <vPortFree>
 800a0a0:	e001      	b.n	800a0a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d017      	beq.n	800a0dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a0b4:	88fa      	ldrh	r2, [r7, #6]
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	9303      	str	r3, [sp, #12]
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	9302      	str	r3, [sp, #8]
 800a0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c0:	9301      	str	r3, [sp, #4]
 800a0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c4:	9300      	str	r3, [sp, #0]
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	68b9      	ldr	r1, [r7, #8]
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f000 f80e 	bl	800a0ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a0d0:	69f8      	ldr	r0, [r7, #28]
 800a0d2:	f000 f8a9 	bl	800a228 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	61bb      	str	r3, [r7, #24]
 800a0da:	e002      	b.n	800a0e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a0dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a0e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a0e2:	69bb      	ldr	r3, [r7, #24]
	}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3720      	adds	r7, #32
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b088      	sub	sp, #32
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	607a      	str	r2, [r7, #4]
 800a0f8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a104:	3b01      	subs	r3, #1
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	4413      	add	r3, r2
 800a10a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	f023 0307 	bic.w	r3, r3, #7
 800a112:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	f003 0307 	and.w	r3, r3, #7
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00a      	beq.n	800a134 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a122:	f383 8811 	msr	BASEPRI, r3
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	617b      	str	r3, [r7, #20]
}
 800a130:	bf00      	nop
 800a132:	e7fe      	b.n	800a132 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d01f      	beq.n	800a17a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a13a:	2300      	movs	r3, #0
 800a13c:	61fb      	str	r3, [r7, #28]
 800a13e:	e012      	b.n	800a166 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a140:	68ba      	ldr	r2, [r7, #8]
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	4413      	add	r3, r2
 800a146:	7819      	ldrb	r1, [r3, #0]
 800a148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	4413      	add	r3, r2
 800a14e:	3334      	adds	r3, #52	; 0x34
 800a150:	460a      	mov	r2, r1
 800a152:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a154:	68ba      	ldr	r2, [r7, #8]
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	4413      	add	r3, r2
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d006      	beq.n	800a16e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	3301      	adds	r3, #1
 800a164:	61fb      	str	r3, [r7, #28]
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	2b0f      	cmp	r3, #15
 800a16a:	d9e9      	bls.n	800a140 <prvInitialiseNewTask+0x54>
 800a16c:	e000      	b.n	800a170 <prvInitialiseNewTask+0x84>
			{
				break;
 800a16e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a172:	2200      	movs	r2, #0
 800a174:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a178:	e003      	b.n	800a182 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17c:	2200      	movs	r2, #0
 800a17e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a184:	2b06      	cmp	r3, #6
 800a186:	d901      	bls.n	800a18c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a188:	2306      	movs	r3, #6
 800a18a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a190:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a194:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a196:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19a:	2200      	movs	r2, #0
 800a19c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a0:	3304      	adds	r3, #4
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7ff f8ca 	bl	800933c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1aa:	3318      	adds	r3, #24
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7ff f8c5 	bl	800933c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ba:	f1c3 0207 	rsb	r2, r3, #7
 800a1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1da:	334c      	adds	r3, #76	; 0x4c
 800a1dc:	224c      	movs	r2, #76	; 0x4c
 800a1de:	2100      	movs	r1, #0
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f002 f9e3 	bl	800c5ac <memset>
 800a1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e8:	4a0c      	ldr	r2, [pc, #48]	; (800a21c <prvInitialiseNewTask+0x130>)
 800a1ea:	651a      	str	r2, [r3, #80]	; 0x50
 800a1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ee:	4a0c      	ldr	r2, [pc, #48]	; (800a220 <prvInitialiseNewTask+0x134>)
 800a1f0:	655a      	str	r2, [r3, #84]	; 0x54
 800a1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f4:	4a0b      	ldr	r2, [pc, #44]	; (800a224 <prvInitialiseNewTask+0x138>)
 800a1f6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a1f8:	683a      	ldr	r2, [r7, #0]
 800a1fa:	68f9      	ldr	r1, [r7, #12]
 800a1fc:	69b8      	ldr	r0, [r7, #24]
 800a1fe:	f001 f9db 	bl	800b5b8 <pxPortInitialiseStack>
 800a202:	4602      	mov	r2, r0
 800a204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a206:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d002      	beq.n	800a214 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a212:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a214:	bf00      	nop
 800a216:	3720      	adds	r7, #32
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	2000509c 	.word	0x2000509c
 800a220:	20005104 	.word	0x20005104
 800a224:	2000516c 	.word	0x2000516c

0800a228 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a230:	f001 faf0 	bl	800b814 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a234:	4b2a      	ldr	r3, [pc, #168]	; (800a2e0 <prvAddNewTaskToReadyList+0xb8>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	3301      	adds	r3, #1
 800a23a:	4a29      	ldr	r2, [pc, #164]	; (800a2e0 <prvAddNewTaskToReadyList+0xb8>)
 800a23c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a23e:	4b29      	ldr	r3, [pc, #164]	; (800a2e4 <prvAddNewTaskToReadyList+0xbc>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d109      	bne.n	800a25a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a246:	4a27      	ldr	r2, [pc, #156]	; (800a2e4 <prvAddNewTaskToReadyList+0xbc>)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a24c:	4b24      	ldr	r3, [pc, #144]	; (800a2e0 <prvAddNewTaskToReadyList+0xb8>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d110      	bne.n	800a276 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a254:	f000 fc96 	bl	800ab84 <prvInitialiseTaskLists>
 800a258:	e00d      	b.n	800a276 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a25a:	4b23      	ldr	r3, [pc, #140]	; (800a2e8 <prvAddNewTaskToReadyList+0xc0>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d109      	bne.n	800a276 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a262:	4b20      	ldr	r3, [pc, #128]	; (800a2e4 <prvAddNewTaskToReadyList+0xbc>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d802      	bhi.n	800a276 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a270:	4a1c      	ldr	r2, [pc, #112]	; (800a2e4 <prvAddNewTaskToReadyList+0xbc>)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a276:	4b1d      	ldr	r3, [pc, #116]	; (800a2ec <prvAddNewTaskToReadyList+0xc4>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	3301      	adds	r3, #1
 800a27c:	4a1b      	ldr	r2, [pc, #108]	; (800a2ec <prvAddNewTaskToReadyList+0xc4>)
 800a27e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a284:	2201      	movs	r2, #1
 800a286:	409a      	lsls	r2, r3
 800a288:	4b19      	ldr	r3, [pc, #100]	; (800a2f0 <prvAddNewTaskToReadyList+0xc8>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	4a18      	ldr	r2, [pc, #96]	; (800a2f0 <prvAddNewTaskToReadyList+0xc8>)
 800a290:	6013      	str	r3, [r2, #0]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a296:	4613      	mov	r3, r2
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	4413      	add	r3, r2
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	4a15      	ldr	r2, [pc, #84]	; (800a2f4 <prvAddNewTaskToReadyList+0xcc>)
 800a2a0:	441a      	add	r2, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	3304      	adds	r3, #4
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	4610      	mov	r0, r2
 800a2aa:	f7ff f854 	bl	8009356 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a2ae:	f001 fae1 	bl	800b874 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a2b2:	4b0d      	ldr	r3, [pc, #52]	; (800a2e8 <prvAddNewTaskToReadyList+0xc0>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00e      	beq.n	800a2d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a2ba:	4b0a      	ldr	r3, [pc, #40]	; (800a2e4 <prvAddNewTaskToReadyList+0xbc>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d207      	bcs.n	800a2d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a2c8:	4b0b      	ldr	r3, [pc, #44]	; (800a2f8 <prvAddNewTaskToReadyList+0xd0>)
 800a2ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2ce:	601a      	str	r2, [r3, #0]
 800a2d0:	f3bf 8f4f 	dsb	sy
 800a2d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2d8:	bf00      	nop
 800a2da:	3708      	adds	r7, #8
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	20000ab4 	.word	0x20000ab4
 800a2e4:	200009b4 	.word	0x200009b4
 800a2e8:	20000ac0 	.word	0x20000ac0
 800a2ec:	20000ad0 	.word	0x20000ad0
 800a2f0:	20000abc 	.word	0x20000abc
 800a2f4:	200009b8 	.word	0x200009b8
 800a2f8:	e000ed04 	.word	0xe000ed04

0800a2fc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b08a      	sub	sp, #40	; 0x28
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a306:	2300      	movs	r3, #0
 800a308:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d10a      	bne.n	800a326 <vTaskDelayUntil+0x2a>
	__asm volatile
 800a310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a314:	f383 8811 	msr	BASEPRI, r3
 800a318:	f3bf 8f6f 	isb	sy
 800a31c:	f3bf 8f4f 	dsb	sy
 800a320:	617b      	str	r3, [r7, #20]
}
 800a322:	bf00      	nop
 800a324:	e7fe      	b.n	800a324 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d10a      	bne.n	800a342 <vTaskDelayUntil+0x46>
	__asm volatile
 800a32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a330:	f383 8811 	msr	BASEPRI, r3
 800a334:	f3bf 8f6f 	isb	sy
 800a338:	f3bf 8f4f 	dsb	sy
 800a33c:	613b      	str	r3, [r7, #16]
}
 800a33e:	bf00      	nop
 800a340:	e7fe      	b.n	800a340 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800a342:	4b2a      	ldr	r3, [pc, #168]	; (800a3ec <vTaskDelayUntil+0xf0>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00a      	beq.n	800a360 <vTaskDelayUntil+0x64>
	__asm volatile
 800a34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34e:	f383 8811 	msr	BASEPRI, r3
 800a352:	f3bf 8f6f 	isb	sy
 800a356:	f3bf 8f4f 	dsb	sy
 800a35a:	60fb      	str	r3, [r7, #12]
}
 800a35c:	bf00      	nop
 800a35e:	e7fe      	b.n	800a35e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800a360:	f000 f8ee 	bl	800a540 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a364:	4b22      	ldr	r3, [pc, #136]	; (800a3f0 <vTaskDelayUntil+0xf4>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	683a      	ldr	r2, [r7, #0]
 800a370:	4413      	add	r3, r2
 800a372:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	6a3a      	ldr	r2, [r7, #32]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d20b      	bcs.n	800a396 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	69fa      	ldr	r2, [r7, #28]
 800a384:	429a      	cmp	r2, r3
 800a386:	d211      	bcs.n	800a3ac <vTaskDelayUntil+0xb0>
 800a388:	69fa      	ldr	r2, [r7, #28]
 800a38a:	6a3b      	ldr	r3, [r7, #32]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d90d      	bls.n	800a3ac <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a390:	2301      	movs	r3, #1
 800a392:	627b      	str	r3, [r7, #36]	; 0x24
 800a394:	e00a      	b.n	800a3ac <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	69fa      	ldr	r2, [r7, #28]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d303      	bcc.n	800a3a8 <vTaskDelayUntil+0xac>
 800a3a0:	69fa      	ldr	r2, [r7, #28]
 800a3a2:	6a3b      	ldr	r3, [r7, #32]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d901      	bls.n	800a3ac <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	69fa      	ldr	r2, [r7, #28]
 800a3b0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d006      	beq.n	800a3c6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a3b8:	69fa      	ldr	r2, [r7, #28]
 800a3ba:	6a3b      	ldr	r3, [r7, #32]
 800a3bc:	1ad3      	subs	r3, r2, r3
 800a3be:	2100      	movs	r1, #0
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f000 fd45 	bl	800ae50 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a3c6:	f000 f8c9 	bl	800a55c <xTaskResumeAll>
 800a3ca:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d107      	bne.n	800a3e2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800a3d2:	4b08      	ldr	r3, [pc, #32]	; (800a3f4 <vTaskDelayUntil+0xf8>)
 800a3d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3d8:	601a      	str	r2, [r3, #0]
 800a3da:	f3bf 8f4f 	dsb	sy
 800a3de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a3e2:	bf00      	nop
 800a3e4:	3728      	adds	r7, #40	; 0x28
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	20000adc 	.word	0x20000adc
 800a3f0:	20000ab8 	.word	0x20000ab8
 800a3f4:	e000ed04 	.word	0xe000ed04

0800a3f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a400:	2300      	movs	r3, #0
 800a402:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d017      	beq.n	800a43a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a40a:	4b13      	ldr	r3, [pc, #76]	; (800a458 <vTaskDelay+0x60>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d00a      	beq.n	800a428 <vTaskDelay+0x30>
	__asm volatile
 800a412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a416:	f383 8811 	msr	BASEPRI, r3
 800a41a:	f3bf 8f6f 	isb	sy
 800a41e:	f3bf 8f4f 	dsb	sy
 800a422:	60bb      	str	r3, [r7, #8]
}
 800a424:	bf00      	nop
 800a426:	e7fe      	b.n	800a426 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a428:	f000 f88a 	bl	800a540 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a42c:	2100      	movs	r1, #0
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 fd0e 	bl	800ae50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a434:	f000 f892 	bl	800a55c <xTaskResumeAll>
 800a438:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d107      	bne.n	800a450 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a440:	4b06      	ldr	r3, [pc, #24]	; (800a45c <vTaskDelay+0x64>)
 800a442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a446:	601a      	str	r2, [r3, #0]
 800a448:	f3bf 8f4f 	dsb	sy
 800a44c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a450:	bf00      	nop
 800a452:	3710      	adds	r7, #16
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	20000adc 	.word	0x20000adc
 800a45c:	e000ed04 	.word	0xe000ed04

0800a460 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b08a      	sub	sp, #40	; 0x28
 800a464:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a466:	2300      	movs	r3, #0
 800a468:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a46a:	2300      	movs	r3, #0
 800a46c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a46e:	463a      	mov	r2, r7
 800a470:	1d39      	adds	r1, r7, #4
 800a472:	f107 0308 	add.w	r3, r7, #8
 800a476:	4618      	mov	r0, r3
 800a478:	f7f6 f914 	bl	80006a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a47c:	6839      	ldr	r1, [r7, #0]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	68ba      	ldr	r2, [r7, #8]
 800a482:	9202      	str	r2, [sp, #8]
 800a484:	9301      	str	r3, [sp, #4]
 800a486:	2300      	movs	r3, #0
 800a488:	9300      	str	r3, [sp, #0]
 800a48a:	2300      	movs	r3, #0
 800a48c:	460a      	mov	r2, r1
 800a48e:	4924      	ldr	r1, [pc, #144]	; (800a520 <vTaskStartScheduler+0xc0>)
 800a490:	4824      	ldr	r0, [pc, #144]	; (800a524 <vTaskStartScheduler+0xc4>)
 800a492:	f7ff fd89 	bl	8009fa8 <xTaskCreateStatic>
 800a496:	4603      	mov	r3, r0
 800a498:	4a23      	ldr	r2, [pc, #140]	; (800a528 <vTaskStartScheduler+0xc8>)
 800a49a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a49c:	4b22      	ldr	r3, [pc, #136]	; (800a528 <vTaskStartScheduler+0xc8>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d002      	beq.n	800a4aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	617b      	str	r3, [r7, #20]
 800a4a8:	e001      	b.n	800a4ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d102      	bne.n	800a4ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a4b4:	f000 fd32 	bl	800af1c <xTimerCreateTimerTask>
 800a4b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d11b      	bne.n	800a4f8 <vTaskStartScheduler+0x98>
	__asm volatile
 800a4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c4:	f383 8811 	msr	BASEPRI, r3
 800a4c8:	f3bf 8f6f 	isb	sy
 800a4cc:	f3bf 8f4f 	dsb	sy
 800a4d0:	613b      	str	r3, [r7, #16]
}
 800a4d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a4d4:	4b15      	ldr	r3, [pc, #84]	; (800a52c <vTaskStartScheduler+0xcc>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	334c      	adds	r3, #76	; 0x4c
 800a4da:	4a15      	ldr	r2, [pc, #84]	; (800a530 <vTaskStartScheduler+0xd0>)
 800a4dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a4de:	4b15      	ldr	r3, [pc, #84]	; (800a534 <vTaskStartScheduler+0xd4>)
 800a4e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a4e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a4e6:	4b14      	ldr	r3, [pc, #80]	; (800a538 <vTaskStartScheduler+0xd8>)
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a4ec:	4b13      	ldr	r3, [pc, #76]	; (800a53c <vTaskStartScheduler+0xdc>)
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a4f2:	f001 f8ed 	bl	800b6d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a4f6:	e00e      	b.n	800a516 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4fe:	d10a      	bne.n	800a516 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a504:	f383 8811 	msr	BASEPRI, r3
 800a508:	f3bf 8f6f 	isb	sy
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	60fb      	str	r3, [r7, #12]
}
 800a512:	bf00      	nop
 800a514:	e7fe      	b.n	800a514 <vTaskStartScheduler+0xb4>
}
 800a516:	bf00      	nop
 800a518:	3718      	adds	r7, #24
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	0800c830 	.word	0x0800c830
 800a524:	0800ab55 	.word	0x0800ab55
 800a528:	20000ad8 	.word	0x20000ad8
 800a52c:	200009b4 	.word	0x200009b4
 800a530:	2000007c 	.word	0x2000007c
 800a534:	20000ad4 	.word	0x20000ad4
 800a538:	20000ac0 	.word	0x20000ac0
 800a53c:	20000ab8 	.word	0x20000ab8

0800a540 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a540:	b480      	push	{r7}
 800a542:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a544:	4b04      	ldr	r3, [pc, #16]	; (800a558 <vTaskSuspendAll+0x18>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	3301      	adds	r3, #1
 800a54a:	4a03      	ldr	r2, [pc, #12]	; (800a558 <vTaskSuspendAll+0x18>)
 800a54c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a54e:	bf00      	nop
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr
 800a558:	20000adc 	.word	0x20000adc

0800a55c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a562:	2300      	movs	r3, #0
 800a564:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a566:	2300      	movs	r3, #0
 800a568:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a56a:	4b41      	ldr	r3, [pc, #260]	; (800a670 <xTaskResumeAll+0x114>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d10a      	bne.n	800a588 <xTaskResumeAll+0x2c>
	__asm volatile
 800a572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a576:	f383 8811 	msr	BASEPRI, r3
 800a57a:	f3bf 8f6f 	isb	sy
 800a57e:	f3bf 8f4f 	dsb	sy
 800a582:	603b      	str	r3, [r7, #0]
}
 800a584:	bf00      	nop
 800a586:	e7fe      	b.n	800a586 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a588:	f001 f944 	bl	800b814 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a58c:	4b38      	ldr	r3, [pc, #224]	; (800a670 <xTaskResumeAll+0x114>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	3b01      	subs	r3, #1
 800a592:	4a37      	ldr	r2, [pc, #220]	; (800a670 <xTaskResumeAll+0x114>)
 800a594:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a596:	4b36      	ldr	r3, [pc, #216]	; (800a670 <xTaskResumeAll+0x114>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d161      	bne.n	800a662 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a59e:	4b35      	ldr	r3, [pc, #212]	; (800a674 <xTaskResumeAll+0x118>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d05d      	beq.n	800a662 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a5a6:	e02e      	b.n	800a606 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5a8:	4b33      	ldr	r3, [pc, #204]	; (800a678 <xTaskResumeAll+0x11c>)
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	3318      	adds	r3, #24
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7fe ff2b 	bl	8009410 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	3304      	adds	r3, #4
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7fe ff26 	bl	8009410 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	409a      	lsls	r2, r3
 800a5cc:	4b2b      	ldr	r3, [pc, #172]	; (800a67c <xTaskResumeAll+0x120>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	4a2a      	ldr	r2, [pc, #168]	; (800a67c <xTaskResumeAll+0x120>)
 800a5d4:	6013      	str	r3, [r2, #0]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5da:	4613      	mov	r3, r2
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	4413      	add	r3, r2
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	4a27      	ldr	r2, [pc, #156]	; (800a680 <xTaskResumeAll+0x124>)
 800a5e4:	441a      	add	r2, r3
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	3304      	adds	r3, #4
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	4610      	mov	r0, r2
 800a5ee:	f7fe feb2 	bl	8009356 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5f6:	4b23      	ldr	r3, [pc, #140]	; (800a684 <xTaskResumeAll+0x128>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d302      	bcc.n	800a606 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a600:	4b21      	ldr	r3, [pc, #132]	; (800a688 <xTaskResumeAll+0x12c>)
 800a602:	2201      	movs	r2, #1
 800a604:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a606:	4b1c      	ldr	r3, [pc, #112]	; (800a678 <xTaskResumeAll+0x11c>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d1cc      	bne.n	800a5a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d001      	beq.n	800a618 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a614:	f000 fb58 	bl	800acc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a618:	4b1c      	ldr	r3, [pc, #112]	; (800a68c <xTaskResumeAll+0x130>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d010      	beq.n	800a646 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a624:	f000 f846 	bl	800a6b4 <xTaskIncrementTick>
 800a628:	4603      	mov	r3, r0
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d002      	beq.n	800a634 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a62e:	4b16      	ldr	r3, [pc, #88]	; (800a688 <xTaskResumeAll+0x12c>)
 800a630:	2201      	movs	r2, #1
 800a632:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	3b01      	subs	r3, #1
 800a638:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d1f1      	bne.n	800a624 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a640:	4b12      	ldr	r3, [pc, #72]	; (800a68c <xTaskResumeAll+0x130>)
 800a642:	2200      	movs	r2, #0
 800a644:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a646:	4b10      	ldr	r3, [pc, #64]	; (800a688 <xTaskResumeAll+0x12c>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d009      	beq.n	800a662 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a64e:	2301      	movs	r3, #1
 800a650:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a652:	4b0f      	ldr	r3, [pc, #60]	; (800a690 <xTaskResumeAll+0x134>)
 800a654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a658:	601a      	str	r2, [r3, #0]
 800a65a:	f3bf 8f4f 	dsb	sy
 800a65e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a662:	f001 f907 	bl	800b874 <vPortExitCritical>

	return xAlreadyYielded;
 800a666:	68bb      	ldr	r3, [r7, #8]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3710      	adds	r7, #16
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	20000adc 	.word	0x20000adc
 800a674:	20000ab4 	.word	0x20000ab4
 800a678:	20000a74 	.word	0x20000a74
 800a67c:	20000abc 	.word	0x20000abc
 800a680:	200009b8 	.word	0x200009b8
 800a684:	200009b4 	.word	0x200009b4
 800a688:	20000ac8 	.word	0x20000ac8
 800a68c:	20000ac4 	.word	0x20000ac4
 800a690:	e000ed04 	.word	0xe000ed04

0800a694 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a69a:	4b05      	ldr	r3, [pc, #20]	; (800a6b0 <xTaskGetTickCount+0x1c>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a6a0:	687b      	ldr	r3, [r7, #4]
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	370c      	adds	r7, #12
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop
 800a6b0:	20000ab8 	.word	0x20000ab8

0800a6b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b086      	sub	sp, #24
 800a6b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6be:	4b4e      	ldr	r3, [pc, #312]	; (800a7f8 <xTaskIncrementTick+0x144>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	f040 808e 	bne.w	800a7e4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a6c8:	4b4c      	ldr	r3, [pc, #304]	; (800a7fc <xTaskIncrementTick+0x148>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a6d0:	4a4a      	ldr	r2, [pc, #296]	; (800a7fc <xTaskIncrementTick+0x148>)
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d120      	bne.n	800a71e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a6dc:	4b48      	ldr	r3, [pc, #288]	; (800a800 <xTaskIncrementTick+0x14c>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d00a      	beq.n	800a6fc <xTaskIncrementTick+0x48>
	__asm volatile
 800a6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ea:	f383 8811 	msr	BASEPRI, r3
 800a6ee:	f3bf 8f6f 	isb	sy
 800a6f2:	f3bf 8f4f 	dsb	sy
 800a6f6:	603b      	str	r3, [r7, #0]
}
 800a6f8:	bf00      	nop
 800a6fa:	e7fe      	b.n	800a6fa <xTaskIncrementTick+0x46>
 800a6fc:	4b40      	ldr	r3, [pc, #256]	; (800a800 <xTaskIncrementTick+0x14c>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	60fb      	str	r3, [r7, #12]
 800a702:	4b40      	ldr	r3, [pc, #256]	; (800a804 <xTaskIncrementTick+0x150>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a3e      	ldr	r2, [pc, #248]	; (800a800 <xTaskIncrementTick+0x14c>)
 800a708:	6013      	str	r3, [r2, #0]
 800a70a:	4a3e      	ldr	r2, [pc, #248]	; (800a804 <xTaskIncrementTick+0x150>)
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6013      	str	r3, [r2, #0]
 800a710:	4b3d      	ldr	r3, [pc, #244]	; (800a808 <xTaskIncrementTick+0x154>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	3301      	adds	r3, #1
 800a716:	4a3c      	ldr	r2, [pc, #240]	; (800a808 <xTaskIncrementTick+0x154>)
 800a718:	6013      	str	r3, [r2, #0]
 800a71a:	f000 fad5 	bl	800acc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a71e:	4b3b      	ldr	r3, [pc, #236]	; (800a80c <xTaskIncrementTick+0x158>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	693a      	ldr	r2, [r7, #16]
 800a724:	429a      	cmp	r2, r3
 800a726:	d348      	bcc.n	800a7ba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a728:	4b35      	ldr	r3, [pc, #212]	; (800a800 <xTaskIncrementTick+0x14c>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d104      	bne.n	800a73c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a732:	4b36      	ldr	r3, [pc, #216]	; (800a80c <xTaskIncrementTick+0x158>)
 800a734:	f04f 32ff 	mov.w	r2, #4294967295
 800a738:	601a      	str	r2, [r3, #0]
					break;
 800a73a:	e03e      	b.n	800a7ba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a73c:	4b30      	ldr	r3, [pc, #192]	; (800a800 <xTaskIncrementTick+0x14c>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a74c:	693a      	ldr	r2, [r7, #16]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	429a      	cmp	r2, r3
 800a752:	d203      	bcs.n	800a75c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a754:	4a2d      	ldr	r2, [pc, #180]	; (800a80c <xTaskIncrementTick+0x158>)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a75a:	e02e      	b.n	800a7ba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	3304      	adds	r3, #4
 800a760:	4618      	mov	r0, r3
 800a762:	f7fe fe55 	bl	8009410 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d004      	beq.n	800a778 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	3318      	adds	r3, #24
 800a772:	4618      	mov	r0, r3
 800a774:	f7fe fe4c 	bl	8009410 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a77c:	2201      	movs	r2, #1
 800a77e:	409a      	lsls	r2, r3
 800a780:	4b23      	ldr	r3, [pc, #140]	; (800a810 <xTaskIncrementTick+0x15c>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4313      	orrs	r3, r2
 800a786:	4a22      	ldr	r2, [pc, #136]	; (800a810 <xTaskIncrementTick+0x15c>)
 800a788:	6013      	str	r3, [r2, #0]
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a78e:	4613      	mov	r3, r2
 800a790:	009b      	lsls	r3, r3, #2
 800a792:	4413      	add	r3, r2
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	4a1f      	ldr	r2, [pc, #124]	; (800a814 <xTaskIncrementTick+0x160>)
 800a798:	441a      	add	r2, r3
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	3304      	adds	r3, #4
 800a79e:	4619      	mov	r1, r3
 800a7a0:	4610      	mov	r0, r2
 800a7a2:	f7fe fdd8 	bl	8009356 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7aa:	4b1b      	ldr	r3, [pc, #108]	; (800a818 <xTaskIncrementTick+0x164>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d3b9      	bcc.n	800a728 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7b8:	e7b6      	b.n	800a728 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a7ba:	4b17      	ldr	r3, [pc, #92]	; (800a818 <xTaskIncrementTick+0x164>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7c0:	4914      	ldr	r1, [pc, #80]	; (800a814 <xTaskIncrementTick+0x160>)
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	4413      	add	r3, r2
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	440b      	add	r3, r1
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d901      	bls.n	800a7d6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a7d6:	4b11      	ldr	r3, [pc, #68]	; (800a81c <xTaskIncrementTick+0x168>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d007      	beq.n	800a7ee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	617b      	str	r3, [r7, #20]
 800a7e2:	e004      	b.n	800a7ee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a7e4:	4b0e      	ldr	r3, [pc, #56]	; (800a820 <xTaskIncrementTick+0x16c>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	4a0d      	ldr	r2, [pc, #52]	; (800a820 <xTaskIncrementTick+0x16c>)
 800a7ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a7ee:	697b      	ldr	r3, [r7, #20]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3718      	adds	r7, #24
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	20000adc 	.word	0x20000adc
 800a7fc:	20000ab8 	.word	0x20000ab8
 800a800:	20000a6c 	.word	0x20000a6c
 800a804:	20000a70 	.word	0x20000a70
 800a808:	20000acc 	.word	0x20000acc
 800a80c:	20000ad4 	.word	0x20000ad4
 800a810:	20000abc 	.word	0x20000abc
 800a814:	200009b8 	.word	0x200009b8
 800a818:	200009b4 	.word	0x200009b4
 800a81c:	20000ac8 	.word	0x20000ac8
 800a820:	20000ac4 	.word	0x20000ac4

0800a824 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a824:	b480      	push	{r7}
 800a826:	b087      	sub	sp, #28
 800a828:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a82a:	4b29      	ldr	r3, [pc, #164]	; (800a8d0 <vTaskSwitchContext+0xac>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d003      	beq.n	800a83a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a832:	4b28      	ldr	r3, [pc, #160]	; (800a8d4 <vTaskSwitchContext+0xb0>)
 800a834:	2201      	movs	r2, #1
 800a836:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a838:	e044      	b.n	800a8c4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800a83a:	4b26      	ldr	r3, [pc, #152]	; (800a8d4 <vTaskSwitchContext+0xb0>)
 800a83c:	2200      	movs	r2, #0
 800a83e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a840:	4b25      	ldr	r3, [pc, #148]	; (800a8d8 <vTaskSwitchContext+0xb4>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	fab3 f383 	clz	r3, r3
 800a84c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a84e:	7afb      	ldrb	r3, [r7, #11]
 800a850:	f1c3 031f 	rsb	r3, r3, #31
 800a854:	617b      	str	r3, [r7, #20]
 800a856:	4921      	ldr	r1, [pc, #132]	; (800a8dc <vTaskSwitchContext+0xb8>)
 800a858:	697a      	ldr	r2, [r7, #20]
 800a85a:	4613      	mov	r3, r2
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	4413      	add	r3, r2
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	440b      	add	r3, r1
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d10a      	bne.n	800a880 <vTaskSwitchContext+0x5c>
	__asm volatile
 800a86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86e:	f383 8811 	msr	BASEPRI, r3
 800a872:	f3bf 8f6f 	isb	sy
 800a876:	f3bf 8f4f 	dsb	sy
 800a87a:	607b      	str	r3, [r7, #4]
}
 800a87c:	bf00      	nop
 800a87e:	e7fe      	b.n	800a87e <vTaskSwitchContext+0x5a>
 800a880:	697a      	ldr	r2, [r7, #20]
 800a882:	4613      	mov	r3, r2
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	4413      	add	r3, r2
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	4a14      	ldr	r2, [pc, #80]	; (800a8dc <vTaskSwitchContext+0xb8>)
 800a88c:	4413      	add	r3, r2
 800a88e:	613b      	str	r3, [r7, #16]
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	685a      	ldr	r2, [r3, #4]
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	605a      	str	r2, [r3, #4]
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	685a      	ldr	r2, [r3, #4]
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	3308      	adds	r3, #8
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d104      	bne.n	800a8b0 <vTaskSwitchContext+0x8c>
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	685a      	ldr	r2, [r3, #4]
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	605a      	str	r2, [r3, #4]
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	4a0a      	ldr	r2, [pc, #40]	; (800a8e0 <vTaskSwitchContext+0xbc>)
 800a8b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a8ba:	4b09      	ldr	r3, [pc, #36]	; (800a8e0 <vTaskSwitchContext+0xbc>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	334c      	adds	r3, #76	; 0x4c
 800a8c0:	4a08      	ldr	r2, [pc, #32]	; (800a8e4 <vTaskSwitchContext+0xc0>)
 800a8c2:	6013      	str	r3, [r2, #0]
}
 800a8c4:	bf00      	nop
 800a8c6:	371c      	adds	r7, #28
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr
 800a8d0:	20000adc 	.word	0x20000adc
 800a8d4:	20000ac8 	.word	0x20000ac8
 800a8d8:	20000abc 	.word	0x20000abc
 800a8dc:	200009b8 	.word	0x200009b8
 800a8e0:	200009b4 	.word	0x200009b4
 800a8e4:	2000007c 	.word	0x2000007c

0800a8e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d10a      	bne.n	800a90e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8fc:	f383 8811 	msr	BASEPRI, r3
 800a900:	f3bf 8f6f 	isb	sy
 800a904:	f3bf 8f4f 	dsb	sy
 800a908:	60fb      	str	r3, [r7, #12]
}
 800a90a:	bf00      	nop
 800a90c:	e7fe      	b.n	800a90c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a90e:	4b07      	ldr	r3, [pc, #28]	; (800a92c <vTaskPlaceOnEventList+0x44>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	3318      	adds	r3, #24
 800a914:	4619      	mov	r1, r3
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f7fe fd41 	bl	800939e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a91c:	2101      	movs	r1, #1
 800a91e:	6838      	ldr	r0, [r7, #0]
 800a920:	f000 fa96 	bl	800ae50 <prvAddCurrentTaskToDelayedList>
}
 800a924:	bf00      	nop
 800a926:	3710      	adds	r7, #16
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	200009b4 	.word	0x200009b4

0800a930 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a930:	b580      	push	{r7, lr}
 800a932:	b086      	sub	sp, #24
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d10a      	bne.n	800a958 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a946:	f383 8811 	msr	BASEPRI, r3
 800a94a:	f3bf 8f6f 	isb	sy
 800a94e:	f3bf 8f4f 	dsb	sy
 800a952:	617b      	str	r3, [r7, #20]
}
 800a954:	bf00      	nop
 800a956:	e7fe      	b.n	800a956 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a958:	4b0a      	ldr	r3, [pc, #40]	; (800a984 <vTaskPlaceOnEventListRestricted+0x54>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	3318      	adds	r3, #24
 800a95e:	4619      	mov	r1, r3
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f7fe fcf8 	bl	8009356 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d002      	beq.n	800a972 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a96c:	f04f 33ff 	mov.w	r3, #4294967295
 800a970:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a972:	6879      	ldr	r1, [r7, #4]
 800a974:	68b8      	ldr	r0, [r7, #8]
 800a976:	f000 fa6b 	bl	800ae50 <prvAddCurrentTaskToDelayedList>
	}
 800a97a:	bf00      	nop
 800a97c:	3718      	adds	r7, #24
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	200009b4 	.word	0x200009b4

0800a988 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b086      	sub	sp, #24
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d10a      	bne.n	800a9b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a2:	f383 8811 	msr	BASEPRI, r3
 800a9a6:	f3bf 8f6f 	isb	sy
 800a9aa:	f3bf 8f4f 	dsb	sy
 800a9ae:	60fb      	str	r3, [r7, #12]
}
 800a9b0:	bf00      	nop
 800a9b2:	e7fe      	b.n	800a9b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	3318      	adds	r3, #24
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7fe fd29 	bl	8009410 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9be:	4b1d      	ldr	r3, [pc, #116]	; (800aa34 <xTaskRemoveFromEventList+0xac>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d11c      	bne.n	800aa00 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	3304      	adds	r3, #4
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fe fd20 	bl	8009410 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	409a      	lsls	r2, r3
 800a9d8:	4b17      	ldr	r3, [pc, #92]	; (800aa38 <xTaskRemoveFromEventList+0xb0>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	4a16      	ldr	r2, [pc, #88]	; (800aa38 <xTaskRemoveFromEventList+0xb0>)
 800a9e0:	6013      	str	r3, [r2, #0]
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e6:	4613      	mov	r3, r2
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	4413      	add	r3, r2
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	4a13      	ldr	r2, [pc, #76]	; (800aa3c <xTaskRemoveFromEventList+0xb4>)
 800a9f0:	441a      	add	r2, r3
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	3304      	adds	r3, #4
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	4610      	mov	r0, r2
 800a9fa:	f7fe fcac 	bl	8009356 <vListInsertEnd>
 800a9fe:	e005      	b.n	800aa0c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	3318      	adds	r3, #24
 800aa04:	4619      	mov	r1, r3
 800aa06:	480e      	ldr	r0, [pc, #56]	; (800aa40 <xTaskRemoveFromEventList+0xb8>)
 800aa08:	f7fe fca5 	bl	8009356 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa10:	4b0c      	ldr	r3, [pc, #48]	; (800aa44 <xTaskRemoveFromEventList+0xbc>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d905      	bls.n	800aa26 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aa1e:	4b0a      	ldr	r3, [pc, #40]	; (800aa48 <xTaskRemoveFromEventList+0xc0>)
 800aa20:	2201      	movs	r2, #1
 800aa22:	601a      	str	r2, [r3, #0]
 800aa24:	e001      	b.n	800aa2a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800aa26:	2300      	movs	r3, #0
 800aa28:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aa2a:	697b      	ldr	r3, [r7, #20]
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3718      	adds	r7, #24
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	20000adc 	.word	0x20000adc
 800aa38:	20000abc 	.word	0x20000abc
 800aa3c:	200009b8 	.word	0x200009b8
 800aa40:	20000a74 	.word	0x20000a74
 800aa44:	200009b4 	.word	0x200009b4
 800aa48:	20000ac8 	.word	0x20000ac8

0800aa4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aa54:	4b06      	ldr	r3, [pc, #24]	; (800aa70 <vTaskInternalSetTimeOutState+0x24>)
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aa5c:	4b05      	ldr	r3, [pc, #20]	; (800aa74 <vTaskInternalSetTimeOutState+0x28>)
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	605a      	str	r2, [r3, #4]
}
 800aa64:	bf00      	nop
 800aa66:	370c      	adds	r7, #12
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr
 800aa70:	20000acc 	.word	0x20000acc
 800aa74:	20000ab8 	.word	0x20000ab8

0800aa78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b088      	sub	sp, #32
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d10a      	bne.n	800aa9e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800aa88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8c:	f383 8811 	msr	BASEPRI, r3
 800aa90:	f3bf 8f6f 	isb	sy
 800aa94:	f3bf 8f4f 	dsb	sy
 800aa98:	613b      	str	r3, [r7, #16]
}
 800aa9a:	bf00      	nop
 800aa9c:	e7fe      	b.n	800aa9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d10a      	bne.n	800aaba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800aaa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa8:	f383 8811 	msr	BASEPRI, r3
 800aaac:	f3bf 8f6f 	isb	sy
 800aab0:	f3bf 8f4f 	dsb	sy
 800aab4:	60fb      	str	r3, [r7, #12]
}
 800aab6:	bf00      	nop
 800aab8:	e7fe      	b.n	800aab8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800aaba:	f000 feab 	bl	800b814 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aabe:	4b1d      	ldr	r3, [pc, #116]	; (800ab34 <xTaskCheckForTimeOut+0xbc>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	69ba      	ldr	r2, [r7, #24]
 800aaca:	1ad3      	subs	r3, r2, r3
 800aacc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad6:	d102      	bne.n	800aade <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aad8:	2300      	movs	r3, #0
 800aada:	61fb      	str	r3, [r7, #28]
 800aadc:	e023      	b.n	800ab26 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	4b15      	ldr	r3, [pc, #84]	; (800ab38 <xTaskCheckForTimeOut+0xc0>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d007      	beq.n	800aafa <xTaskCheckForTimeOut+0x82>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	69ba      	ldr	r2, [r7, #24]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d302      	bcc.n	800aafa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	61fb      	str	r3, [r7, #28]
 800aaf8:	e015      	b.n	800ab26 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	697a      	ldr	r2, [r7, #20]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d20b      	bcs.n	800ab1c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	1ad2      	subs	r2, r2, r3
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f7ff ff9b 	bl	800aa4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ab16:	2300      	movs	r3, #0
 800ab18:	61fb      	str	r3, [r7, #28]
 800ab1a:	e004      	b.n	800ab26 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ab22:	2301      	movs	r3, #1
 800ab24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ab26:	f000 fea5 	bl	800b874 <vPortExitCritical>

	return xReturn;
 800ab2a:	69fb      	ldr	r3, [r7, #28]
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3720      	adds	r7, #32
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	20000ab8 	.word	0x20000ab8
 800ab38:	20000acc 	.word	0x20000acc

0800ab3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ab40:	4b03      	ldr	r3, [pc, #12]	; (800ab50 <vTaskMissedYield+0x14>)
 800ab42:	2201      	movs	r2, #1
 800ab44:	601a      	str	r2, [r3, #0]
}
 800ab46:	bf00      	nop
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr
 800ab50:	20000ac8 	.word	0x20000ac8

0800ab54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ab5c:	f000 f852 	bl	800ac04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ab60:	4b06      	ldr	r3, [pc, #24]	; (800ab7c <prvIdleTask+0x28>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d9f9      	bls.n	800ab5c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ab68:	4b05      	ldr	r3, [pc, #20]	; (800ab80 <prvIdleTask+0x2c>)
 800ab6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab6e:	601a      	str	r2, [r3, #0]
 800ab70:	f3bf 8f4f 	dsb	sy
 800ab74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ab78:	e7f0      	b.n	800ab5c <prvIdleTask+0x8>
 800ab7a:	bf00      	nop
 800ab7c:	200009b8 	.word	0x200009b8
 800ab80:	e000ed04 	.word	0xe000ed04

0800ab84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	607b      	str	r3, [r7, #4]
 800ab8e:	e00c      	b.n	800abaa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	4613      	mov	r3, r2
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	4413      	add	r3, r2
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	4a12      	ldr	r2, [pc, #72]	; (800abe4 <prvInitialiseTaskLists+0x60>)
 800ab9c:	4413      	add	r3, r2
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7fe fbac 	bl	80092fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	3301      	adds	r3, #1
 800aba8:	607b      	str	r3, [r7, #4]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2b06      	cmp	r3, #6
 800abae:	d9ef      	bls.n	800ab90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800abb0:	480d      	ldr	r0, [pc, #52]	; (800abe8 <prvInitialiseTaskLists+0x64>)
 800abb2:	f7fe fba3 	bl	80092fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800abb6:	480d      	ldr	r0, [pc, #52]	; (800abec <prvInitialiseTaskLists+0x68>)
 800abb8:	f7fe fba0 	bl	80092fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800abbc:	480c      	ldr	r0, [pc, #48]	; (800abf0 <prvInitialiseTaskLists+0x6c>)
 800abbe:	f7fe fb9d 	bl	80092fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800abc2:	480c      	ldr	r0, [pc, #48]	; (800abf4 <prvInitialiseTaskLists+0x70>)
 800abc4:	f7fe fb9a 	bl	80092fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800abc8:	480b      	ldr	r0, [pc, #44]	; (800abf8 <prvInitialiseTaskLists+0x74>)
 800abca:	f7fe fb97 	bl	80092fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800abce:	4b0b      	ldr	r3, [pc, #44]	; (800abfc <prvInitialiseTaskLists+0x78>)
 800abd0:	4a05      	ldr	r2, [pc, #20]	; (800abe8 <prvInitialiseTaskLists+0x64>)
 800abd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800abd4:	4b0a      	ldr	r3, [pc, #40]	; (800ac00 <prvInitialiseTaskLists+0x7c>)
 800abd6:	4a05      	ldr	r2, [pc, #20]	; (800abec <prvInitialiseTaskLists+0x68>)
 800abd8:	601a      	str	r2, [r3, #0]
}
 800abda:	bf00      	nop
 800abdc:	3708      	adds	r7, #8
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	200009b8 	.word	0x200009b8
 800abe8:	20000a44 	.word	0x20000a44
 800abec:	20000a58 	.word	0x20000a58
 800abf0:	20000a74 	.word	0x20000a74
 800abf4:	20000a88 	.word	0x20000a88
 800abf8:	20000aa0 	.word	0x20000aa0
 800abfc:	20000a6c 	.word	0x20000a6c
 800ac00:	20000a70 	.word	0x20000a70

0800ac04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac0a:	e019      	b.n	800ac40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ac0c:	f000 fe02 	bl	800b814 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac10:	4b10      	ldr	r3, [pc, #64]	; (800ac54 <prvCheckTasksWaitingTermination+0x50>)
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	68db      	ldr	r3, [r3, #12]
 800ac16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	3304      	adds	r3, #4
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f7fe fbf7 	bl	8009410 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ac22:	4b0d      	ldr	r3, [pc, #52]	; (800ac58 <prvCheckTasksWaitingTermination+0x54>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	3b01      	subs	r3, #1
 800ac28:	4a0b      	ldr	r2, [pc, #44]	; (800ac58 <prvCheckTasksWaitingTermination+0x54>)
 800ac2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ac2c:	4b0b      	ldr	r3, [pc, #44]	; (800ac5c <prvCheckTasksWaitingTermination+0x58>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	3b01      	subs	r3, #1
 800ac32:	4a0a      	ldr	r2, [pc, #40]	; (800ac5c <prvCheckTasksWaitingTermination+0x58>)
 800ac34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ac36:	f000 fe1d 	bl	800b874 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 f810 	bl	800ac60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac40:	4b06      	ldr	r3, [pc, #24]	; (800ac5c <prvCheckTasksWaitingTermination+0x58>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d1e1      	bne.n	800ac0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ac48:	bf00      	nop
 800ac4a:	bf00      	nop
 800ac4c:	3708      	adds	r7, #8
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	20000a88 	.word	0x20000a88
 800ac58:	20000ab4 	.word	0x20000ab4
 800ac5c:	20000a9c 	.word	0x20000a9c

0800ac60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	334c      	adds	r3, #76	; 0x4c
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f001 fca5 	bl	800c5bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d108      	bne.n	800ac8e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac80:	4618      	mov	r0, r3
 800ac82:	f000 ffb5 	bl	800bbf0 <vPortFree>
				vPortFree( pxTCB );
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 ffb2 	bl	800bbf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ac8c:	e018      	b.n	800acc0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d103      	bne.n	800aca0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 ffa9 	bl	800bbf0 <vPortFree>
	}
 800ac9e:	e00f      	b.n	800acc0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800aca6:	2b02      	cmp	r3, #2
 800aca8:	d00a      	beq.n	800acc0 <prvDeleteTCB+0x60>
	__asm volatile
 800acaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acae:	f383 8811 	msr	BASEPRI, r3
 800acb2:	f3bf 8f6f 	isb	sy
 800acb6:	f3bf 8f4f 	dsb	sy
 800acba:	60fb      	str	r3, [r7, #12]
}
 800acbc:	bf00      	nop
 800acbe:	e7fe      	b.n	800acbe <prvDeleteTCB+0x5e>
	}
 800acc0:	bf00      	nop
 800acc2:	3710      	adds	r7, #16
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acce:	4b0c      	ldr	r3, [pc, #48]	; (800ad00 <prvResetNextTaskUnblockTime+0x38>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d104      	bne.n	800ace2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800acd8:	4b0a      	ldr	r3, [pc, #40]	; (800ad04 <prvResetNextTaskUnblockTime+0x3c>)
 800acda:	f04f 32ff 	mov.w	r2, #4294967295
 800acde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ace0:	e008      	b.n	800acf4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ace2:	4b07      	ldr	r3, [pc, #28]	; (800ad00 <prvResetNextTaskUnblockTime+0x38>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	68db      	ldr	r3, [r3, #12]
 800ace8:	68db      	ldr	r3, [r3, #12]
 800acea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	4a04      	ldr	r2, [pc, #16]	; (800ad04 <prvResetNextTaskUnblockTime+0x3c>)
 800acf2:	6013      	str	r3, [r2, #0]
}
 800acf4:	bf00      	nop
 800acf6:	370c      	adds	r7, #12
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr
 800ad00:	20000a6c 	.word	0x20000a6c
 800ad04:	20000ad4 	.word	0x20000ad4

0800ad08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ad0e:	4b0b      	ldr	r3, [pc, #44]	; (800ad3c <xTaskGetSchedulerState+0x34>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d102      	bne.n	800ad1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ad16:	2301      	movs	r3, #1
 800ad18:	607b      	str	r3, [r7, #4]
 800ad1a:	e008      	b.n	800ad2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad1c:	4b08      	ldr	r3, [pc, #32]	; (800ad40 <xTaskGetSchedulerState+0x38>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d102      	bne.n	800ad2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ad24:	2302      	movs	r3, #2
 800ad26:	607b      	str	r3, [r7, #4]
 800ad28:	e001      	b.n	800ad2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ad2e:	687b      	ldr	r3, [r7, #4]
	}
 800ad30:	4618      	mov	r0, r3
 800ad32:	370c      	adds	r7, #12
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr
 800ad3c:	20000ac0 	.word	0x20000ac0
 800ad40:	20000adc 	.word	0x20000adc

0800ad44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b086      	sub	sp, #24
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ad50:	2300      	movs	r3, #0
 800ad52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d06e      	beq.n	800ae38 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ad5a:	4b3a      	ldr	r3, [pc, #232]	; (800ae44 <xTaskPriorityDisinherit+0x100>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	693a      	ldr	r2, [r7, #16]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d00a      	beq.n	800ad7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ad64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad68:	f383 8811 	msr	BASEPRI, r3
 800ad6c:	f3bf 8f6f 	isb	sy
 800ad70:	f3bf 8f4f 	dsb	sy
 800ad74:	60fb      	str	r3, [r7, #12]
}
 800ad76:	bf00      	nop
 800ad78:	e7fe      	b.n	800ad78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d10a      	bne.n	800ad98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ad82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad86:	f383 8811 	msr	BASEPRI, r3
 800ad8a:	f3bf 8f6f 	isb	sy
 800ad8e:	f3bf 8f4f 	dsb	sy
 800ad92:	60bb      	str	r3, [r7, #8]
}
 800ad94:	bf00      	nop
 800ad96:	e7fe      	b.n	800ad96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad9c:	1e5a      	subs	r2, r3, #1
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adaa:	429a      	cmp	r2, r3
 800adac:	d044      	beq.n	800ae38 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d140      	bne.n	800ae38 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	3304      	adds	r3, #4
 800adba:	4618      	mov	r0, r3
 800adbc:	f7fe fb28 	bl	8009410 <uxListRemove>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d115      	bne.n	800adf2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adca:	491f      	ldr	r1, [pc, #124]	; (800ae48 <xTaskPriorityDisinherit+0x104>)
 800adcc:	4613      	mov	r3, r2
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	4413      	add	r3, r2
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	440b      	add	r3, r1
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d10a      	bne.n	800adf2 <xTaskPriorityDisinherit+0xae>
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade0:	2201      	movs	r2, #1
 800ade2:	fa02 f303 	lsl.w	r3, r2, r3
 800ade6:	43da      	mvns	r2, r3
 800ade8:	4b18      	ldr	r3, [pc, #96]	; (800ae4c <xTaskPriorityDisinherit+0x108>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4013      	ands	r3, r2
 800adee:	4a17      	ldr	r2, [pc, #92]	; (800ae4c <xTaskPriorityDisinherit+0x108>)
 800adf0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adfe:	f1c3 0207 	rsb	r2, r3, #7
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	409a      	lsls	r2, r3
 800ae0e:	4b0f      	ldr	r3, [pc, #60]	; (800ae4c <xTaskPriorityDisinherit+0x108>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4313      	orrs	r3, r2
 800ae14:	4a0d      	ldr	r2, [pc, #52]	; (800ae4c <xTaskPriorityDisinherit+0x108>)
 800ae16:	6013      	str	r3, [r2, #0]
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae1c:	4613      	mov	r3, r2
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	4413      	add	r3, r2
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	4a08      	ldr	r2, [pc, #32]	; (800ae48 <xTaskPriorityDisinherit+0x104>)
 800ae26:	441a      	add	r2, r3
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	3304      	adds	r3, #4
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	4610      	mov	r0, r2
 800ae30:	f7fe fa91 	bl	8009356 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ae34:	2301      	movs	r3, #1
 800ae36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ae38:	697b      	ldr	r3, [r7, #20]
	}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3718      	adds	r7, #24
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	200009b4 	.word	0x200009b4
 800ae48:	200009b8 	.word	0x200009b8
 800ae4c:	20000abc 	.word	0x20000abc

0800ae50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ae5a:	4b29      	ldr	r3, [pc, #164]	; (800af00 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae60:	4b28      	ldr	r3, [pc, #160]	; (800af04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	3304      	adds	r3, #4
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7fe fad2 	bl	8009410 <uxListRemove>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d10b      	bne.n	800ae8a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ae72:	4b24      	ldr	r3, [pc, #144]	; (800af04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae78:	2201      	movs	r2, #1
 800ae7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae7e:	43da      	mvns	r2, r3
 800ae80:	4b21      	ldr	r3, [pc, #132]	; (800af08 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4013      	ands	r3, r2
 800ae86:	4a20      	ldr	r2, [pc, #128]	; (800af08 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ae88:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae90:	d10a      	bne.n	800aea8 <prvAddCurrentTaskToDelayedList+0x58>
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d007      	beq.n	800aea8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae98:	4b1a      	ldr	r3, [pc, #104]	; (800af04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	3304      	adds	r3, #4
 800ae9e:	4619      	mov	r1, r3
 800aea0:	481a      	ldr	r0, [pc, #104]	; (800af0c <prvAddCurrentTaskToDelayedList+0xbc>)
 800aea2:	f7fe fa58 	bl	8009356 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aea6:	e026      	b.n	800aef6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aea8:	68fa      	ldr	r2, [r7, #12]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	4413      	add	r3, r2
 800aeae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aeb0:	4b14      	ldr	r3, [pc, #80]	; (800af04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	68ba      	ldr	r2, [r7, #8]
 800aeb6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aeb8:	68ba      	ldr	r2, [r7, #8]
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d209      	bcs.n	800aed4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aec0:	4b13      	ldr	r3, [pc, #76]	; (800af10 <prvAddCurrentTaskToDelayedList+0xc0>)
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	4b0f      	ldr	r3, [pc, #60]	; (800af04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	3304      	adds	r3, #4
 800aeca:	4619      	mov	r1, r3
 800aecc:	4610      	mov	r0, r2
 800aece:	f7fe fa66 	bl	800939e <vListInsert>
}
 800aed2:	e010      	b.n	800aef6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aed4:	4b0f      	ldr	r3, [pc, #60]	; (800af14 <prvAddCurrentTaskToDelayedList+0xc4>)
 800aed6:	681a      	ldr	r2, [r3, #0]
 800aed8:	4b0a      	ldr	r3, [pc, #40]	; (800af04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	3304      	adds	r3, #4
 800aede:	4619      	mov	r1, r3
 800aee0:	4610      	mov	r0, r2
 800aee2:	f7fe fa5c 	bl	800939e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aee6:	4b0c      	ldr	r3, [pc, #48]	; (800af18 <prvAddCurrentTaskToDelayedList+0xc8>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	68ba      	ldr	r2, [r7, #8]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d202      	bcs.n	800aef6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800aef0:	4a09      	ldr	r2, [pc, #36]	; (800af18 <prvAddCurrentTaskToDelayedList+0xc8>)
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	6013      	str	r3, [r2, #0]
}
 800aef6:	bf00      	nop
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	20000ab8 	.word	0x20000ab8
 800af04:	200009b4 	.word	0x200009b4
 800af08:	20000abc 	.word	0x20000abc
 800af0c:	20000aa0 	.word	0x20000aa0
 800af10:	20000a70 	.word	0x20000a70
 800af14:	20000a6c 	.word	0x20000a6c
 800af18:	20000ad4 	.word	0x20000ad4

0800af1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b08a      	sub	sp, #40	; 0x28
 800af20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800af22:	2300      	movs	r3, #0
 800af24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800af26:	f000 fb07 	bl	800b538 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800af2a:	4b1c      	ldr	r3, [pc, #112]	; (800af9c <xTimerCreateTimerTask+0x80>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d021      	beq.n	800af76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800af32:	2300      	movs	r3, #0
 800af34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800af36:	2300      	movs	r3, #0
 800af38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800af3a:	1d3a      	adds	r2, r7, #4
 800af3c:	f107 0108 	add.w	r1, r7, #8
 800af40:	f107 030c 	add.w	r3, r7, #12
 800af44:	4618      	mov	r0, r3
 800af46:	f7f5 fac1 	bl	80004cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800af4a:	6879      	ldr	r1, [r7, #4]
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	68fa      	ldr	r2, [r7, #12]
 800af50:	9202      	str	r2, [sp, #8]
 800af52:	9301      	str	r3, [sp, #4]
 800af54:	2305      	movs	r3, #5
 800af56:	9300      	str	r3, [sp, #0]
 800af58:	2300      	movs	r3, #0
 800af5a:	460a      	mov	r2, r1
 800af5c:	4910      	ldr	r1, [pc, #64]	; (800afa0 <xTimerCreateTimerTask+0x84>)
 800af5e:	4811      	ldr	r0, [pc, #68]	; (800afa4 <xTimerCreateTimerTask+0x88>)
 800af60:	f7ff f822 	bl	8009fa8 <xTaskCreateStatic>
 800af64:	4603      	mov	r3, r0
 800af66:	4a10      	ldr	r2, [pc, #64]	; (800afa8 <xTimerCreateTimerTask+0x8c>)
 800af68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800af6a:	4b0f      	ldr	r3, [pc, #60]	; (800afa8 <xTimerCreateTimerTask+0x8c>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d001      	beq.n	800af76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800af72:	2301      	movs	r3, #1
 800af74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d10a      	bne.n	800af92 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800af7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af80:	f383 8811 	msr	BASEPRI, r3
 800af84:	f3bf 8f6f 	isb	sy
 800af88:	f3bf 8f4f 	dsb	sy
 800af8c:	613b      	str	r3, [r7, #16]
}
 800af8e:	bf00      	nop
 800af90:	e7fe      	b.n	800af90 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800af92:	697b      	ldr	r3, [r7, #20]
}
 800af94:	4618      	mov	r0, r3
 800af96:	3718      	adds	r7, #24
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	20000b10 	.word	0x20000b10
 800afa0:	0800c838 	.word	0x0800c838
 800afa4:	0800b0e1 	.word	0x0800b0e1
 800afa8:	20000b14 	.word	0x20000b14

0800afac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b08a      	sub	sp, #40	; 0x28
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	607a      	str	r2, [r7, #4]
 800afb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800afba:	2300      	movs	r3, #0
 800afbc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d10a      	bne.n	800afda <xTimerGenericCommand+0x2e>
	__asm volatile
 800afc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc8:	f383 8811 	msr	BASEPRI, r3
 800afcc:	f3bf 8f6f 	isb	sy
 800afd0:	f3bf 8f4f 	dsb	sy
 800afd4:	623b      	str	r3, [r7, #32]
}
 800afd6:	bf00      	nop
 800afd8:	e7fe      	b.n	800afd8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800afda:	4b1a      	ldr	r3, [pc, #104]	; (800b044 <xTimerGenericCommand+0x98>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d02a      	beq.n	800b038 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	2b05      	cmp	r3, #5
 800aff2:	dc18      	bgt.n	800b026 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aff4:	f7ff fe88 	bl	800ad08 <xTaskGetSchedulerState>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b02      	cmp	r3, #2
 800affc:	d109      	bne.n	800b012 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800affe:	4b11      	ldr	r3, [pc, #68]	; (800b044 <xTimerGenericCommand+0x98>)
 800b000:	6818      	ldr	r0, [r3, #0]
 800b002:	f107 0110 	add.w	r1, r7, #16
 800b006:	2300      	movs	r3, #0
 800b008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b00a:	f7fe fb65 	bl	80096d8 <xQueueGenericSend>
 800b00e:	6278      	str	r0, [r7, #36]	; 0x24
 800b010:	e012      	b.n	800b038 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b012:	4b0c      	ldr	r3, [pc, #48]	; (800b044 <xTimerGenericCommand+0x98>)
 800b014:	6818      	ldr	r0, [r3, #0]
 800b016:	f107 0110 	add.w	r1, r7, #16
 800b01a:	2300      	movs	r3, #0
 800b01c:	2200      	movs	r2, #0
 800b01e:	f7fe fb5b 	bl	80096d8 <xQueueGenericSend>
 800b022:	6278      	str	r0, [r7, #36]	; 0x24
 800b024:	e008      	b.n	800b038 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b026:	4b07      	ldr	r3, [pc, #28]	; (800b044 <xTimerGenericCommand+0x98>)
 800b028:	6818      	ldr	r0, [r3, #0]
 800b02a:	f107 0110 	add.w	r1, r7, #16
 800b02e:	2300      	movs	r3, #0
 800b030:	683a      	ldr	r2, [r7, #0]
 800b032:	f7fe fc4f 	bl	80098d4 <xQueueGenericSendFromISR>
 800b036:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3728      	adds	r7, #40	; 0x28
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	20000b10 	.word	0x20000b10

0800b048 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b088      	sub	sp, #32
 800b04c:	af02      	add	r7, sp, #8
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b052:	4b22      	ldr	r3, [pc, #136]	; (800b0dc <prvProcessExpiredTimer+0x94>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	68db      	ldr	r3, [r3, #12]
 800b058:	68db      	ldr	r3, [r3, #12]
 800b05a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	3304      	adds	r3, #4
 800b060:	4618      	mov	r0, r3
 800b062:	f7fe f9d5 	bl	8009410 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b06c:	f003 0304 	and.w	r3, r3, #4
 800b070:	2b00      	cmp	r3, #0
 800b072:	d022      	beq.n	800b0ba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	699a      	ldr	r2, [r3, #24]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	18d1      	adds	r1, r2, r3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	683a      	ldr	r2, [r7, #0]
 800b080:	6978      	ldr	r0, [r7, #20]
 800b082:	f000 f8d1 	bl	800b228 <prvInsertTimerInActiveList>
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d01f      	beq.n	800b0cc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b08c:	2300      	movs	r3, #0
 800b08e:	9300      	str	r3, [sp, #0]
 800b090:	2300      	movs	r3, #0
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	2100      	movs	r1, #0
 800b096:	6978      	ldr	r0, [r7, #20]
 800b098:	f7ff ff88 	bl	800afac <xTimerGenericCommand>
 800b09c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d113      	bne.n	800b0cc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a8:	f383 8811 	msr	BASEPRI, r3
 800b0ac:	f3bf 8f6f 	isb	sy
 800b0b0:	f3bf 8f4f 	dsb	sy
 800b0b4:	60fb      	str	r3, [r7, #12]
}
 800b0b6:	bf00      	nop
 800b0b8:	e7fe      	b.n	800b0b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b0c0:	f023 0301 	bic.w	r3, r3, #1
 800b0c4:	b2da      	uxtb	r2, r3
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	6a1b      	ldr	r3, [r3, #32]
 800b0d0:	6978      	ldr	r0, [r7, #20]
 800b0d2:	4798      	blx	r3
}
 800b0d4:	bf00      	nop
 800b0d6:	3718      	adds	r7, #24
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}
 800b0dc:	20000b08 	.word	0x20000b08

0800b0e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b0e8:	f107 0308 	add.w	r3, r7, #8
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f000 f857 	bl	800b1a0 <prvGetNextExpireTime>
 800b0f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	68f8      	ldr	r0, [r7, #12]
 800b0fa:	f000 f803 	bl	800b104 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b0fe:	f000 f8d5 	bl	800b2ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b102:	e7f1      	b.n	800b0e8 <prvTimerTask+0x8>

0800b104 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b10e:	f7ff fa17 	bl	800a540 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b112:	f107 0308 	add.w	r3, r7, #8
 800b116:	4618      	mov	r0, r3
 800b118:	f000 f866 	bl	800b1e8 <prvSampleTimeNow>
 800b11c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d130      	bne.n	800b186 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d10a      	bne.n	800b140 <prvProcessTimerOrBlockTask+0x3c>
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d806      	bhi.n	800b140 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b132:	f7ff fa13 	bl	800a55c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b136:	68f9      	ldr	r1, [r7, #12]
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f7ff ff85 	bl	800b048 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b13e:	e024      	b.n	800b18a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d008      	beq.n	800b158 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b146:	4b13      	ldr	r3, [pc, #76]	; (800b194 <prvProcessTimerOrBlockTask+0x90>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d101      	bne.n	800b154 <prvProcessTimerOrBlockTask+0x50>
 800b150:	2301      	movs	r3, #1
 800b152:	e000      	b.n	800b156 <prvProcessTimerOrBlockTask+0x52>
 800b154:	2300      	movs	r3, #0
 800b156:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b158:	4b0f      	ldr	r3, [pc, #60]	; (800b198 <prvProcessTimerOrBlockTask+0x94>)
 800b15a:	6818      	ldr	r0, [r3, #0]
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	1ad3      	subs	r3, r2, r3
 800b162:	683a      	ldr	r2, [r7, #0]
 800b164:	4619      	mov	r1, r3
 800b166:	f7fe feeb 	bl	8009f40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b16a:	f7ff f9f7 	bl	800a55c <xTaskResumeAll>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b00      	cmp	r3, #0
 800b172:	d10a      	bne.n	800b18a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b174:	4b09      	ldr	r3, [pc, #36]	; (800b19c <prvProcessTimerOrBlockTask+0x98>)
 800b176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b17a:	601a      	str	r2, [r3, #0]
 800b17c:	f3bf 8f4f 	dsb	sy
 800b180:	f3bf 8f6f 	isb	sy
}
 800b184:	e001      	b.n	800b18a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b186:	f7ff f9e9 	bl	800a55c <xTaskResumeAll>
}
 800b18a:	bf00      	nop
 800b18c:	3710      	adds	r7, #16
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	20000b0c 	.word	0x20000b0c
 800b198:	20000b10 	.word	0x20000b10
 800b19c:	e000ed04 	.word	0xe000ed04

0800b1a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b085      	sub	sp, #20
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b1a8:	4b0e      	ldr	r3, [pc, #56]	; (800b1e4 <prvGetNextExpireTime+0x44>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d101      	bne.n	800b1b6 <prvGetNextExpireTime+0x16>
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	e000      	b.n	800b1b8 <prvGetNextExpireTime+0x18>
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d105      	bne.n	800b1d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b1c4:	4b07      	ldr	r3, [pc, #28]	; (800b1e4 <prvGetNextExpireTime+0x44>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	60fb      	str	r3, [r7, #12]
 800b1ce:	e001      	b.n	800b1d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3714      	adds	r7, #20
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop
 800b1e4:	20000b08 	.word	0x20000b08

0800b1e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b1f0:	f7ff fa50 	bl	800a694 <xTaskGetTickCount>
 800b1f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b1f6:	4b0b      	ldr	r3, [pc, #44]	; (800b224 <prvSampleTimeNow+0x3c>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	68fa      	ldr	r2, [r7, #12]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d205      	bcs.n	800b20c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b200:	f000 f936 	bl	800b470 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2201      	movs	r2, #1
 800b208:	601a      	str	r2, [r3, #0]
 800b20a:	e002      	b.n	800b212 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b212:	4a04      	ldr	r2, [pc, #16]	; (800b224 <prvSampleTimeNow+0x3c>)
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b218:	68fb      	ldr	r3, [r7, #12]
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3710      	adds	r7, #16
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	20000b18 	.word	0x20000b18

0800b228 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b086      	sub	sp, #24
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	60f8      	str	r0, [r7, #12]
 800b230:	60b9      	str	r1, [r7, #8]
 800b232:	607a      	str	r2, [r7, #4]
 800b234:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b236:	2300      	movs	r3, #0
 800b238:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	68ba      	ldr	r2, [r7, #8]
 800b23e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	68fa      	ldr	r2, [r7, #12]
 800b244:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b246:	68ba      	ldr	r2, [r7, #8]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d812      	bhi.n	800b274 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	1ad2      	subs	r2, r2, r3
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	699b      	ldr	r3, [r3, #24]
 800b258:	429a      	cmp	r2, r3
 800b25a:	d302      	bcc.n	800b262 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b25c:	2301      	movs	r3, #1
 800b25e:	617b      	str	r3, [r7, #20]
 800b260:	e01b      	b.n	800b29a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b262:	4b10      	ldr	r3, [pc, #64]	; (800b2a4 <prvInsertTimerInActiveList+0x7c>)
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	3304      	adds	r3, #4
 800b26a:	4619      	mov	r1, r3
 800b26c:	4610      	mov	r0, r2
 800b26e:	f7fe f896 	bl	800939e <vListInsert>
 800b272:	e012      	b.n	800b29a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	429a      	cmp	r2, r3
 800b27a:	d206      	bcs.n	800b28a <prvInsertTimerInActiveList+0x62>
 800b27c:	68ba      	ldr	r2, [r7, #8]
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	429a      	cmp	r2, r3
 800b282:	d302      	bcc.n	800b28a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b284:	2301      	movs	r3, #1
 800b286:	617b      	str	r3, [r7, #20]
 800b288:	e007      	b.n	800b29a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b28a:	4b07      	ldr	r3, [pc, #28]	; (800b2a8 <prvInsertTimerInActiveList+0x80>)
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	3304      	adds	r3, #4
 800b292:	4619      	mov	r1, r3
 800b294:	4610      	mov	r0, r2
 800b296:	f7fe f882 	bl	800939e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b29a:	697b      	ldr	r3, [r7, #20]
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3718      	adds	r7, #24
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}
 800b2a4:	20000b0c 	.word	0x20000b0c
 800b2a8:	20000b08 	.word	0x20000b08

0800b2ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b08e      	sub	sp, #56	; 0x38
 800b2b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b2b2:	e0ca      	b.n	800b44a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	da18      	bge.n	800b2ec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b2ba:	1d3b      	adds	r3, r7, #4
 800b2bc:	3304      	adds	r3, #4
 800b2be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d10a      	bne.n	800b2dc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ca:	f383 8811 	msr	BASEPRI, r3
 800b2ce:	f3bf 8f6f 	isb	sy
 800b2d2:	f3bf 8f4f 	dsb	sy
 800b2d6:	61fb      	str	r3, [r7, #28]
}
 800b2d8:	bf00      	nop
 800b2da:	e7fe      	b.n	800b2da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2e2:	6850      	ldr	r0, [r2, #4]
 800b2e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2e6:	6892      	ldr	r2, [r2, #8]
 800b2e8:	4611      	mov	r1, r2
 800b2ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	f2c0 80ab 	blt.w	800b44a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2fa:	695b      	ldr	r3, [r3, #20]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d004      	beq.n	800b30a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b302:	3304      	adds	r3, #4
 800b304:	4618      	mov	r0, r3
 800b306:	f7fe f883 	bl	8009410 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b30a:	463b      	mov	r3, r7
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7ff ff6b 	bl	800b1e8 <prvSampleTimeNow>
 800b312:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2b09      	cmp	r3, #9
 800b318:	f200 8096 	bhi.w	800b448 <prvProcessReceivedCommands+0x19c>
 800b31c:	a201      	add	r2, pc, #4	; (adr r2, 800b324 <prvProcessReceivedCommands+0x78>)
 800b31e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b322:	bf00      	nop
 800b324:	0800b34d 	.word	0x0800b34d
 800b328:	0800b34d 	.word	0x0800b34d
 800b32c:	0800b34d 	.word	0x0800b34d
 800b330:	0800b3c1 	.word	0x0800b3c1
 800b334:	0800b3d5 	.word	0x0800b3d5
 800b338:	0800b41f 	.word	0x0800b41f
 800b33c:	0800b34d 	.word	0x0800b34d
 800b340:	0800b34d 	.word	0x0800b34d
 800b344:	0800b3c1 	.word	0x0800b3c1
 800b348:	0800b3d5 	.word	0x0800b3d5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b352:	f043 0301 	orr.w	r3, r3, #1
 800b356:	b2da      	uxtb	r2, r3
 800b358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b35a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b35e:	68ba      	ldr	r2, [r7, #8]
 800b360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b362:	699b      	ldr	r3, [r3, #24]
 800b364:	18d1      	adds	r1, r2, r3
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b36a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b36c:	f7ff ff5c 	bl	800b228 <prvInsertTimerInActiveList>
 800b370:	4603      	mov	r3, r0
 800b372:	2b00      	cmp	r3, #0
 800b374:	d069      	beq.n	800b44a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b378:	6a1b      	ldr	r3, [r3, #32]
 800b37a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b37c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b380:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b384:	f003 0304 	and.w	r3, r3, #4
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d05e      	beq.n	800b44a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b38c:	68ba      	ldr	r2, [r7, #8]
 800b38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b390:	699b      	ldr	r3, [r3, #24]
 800b392:	441a      	add	r2, r3
 800b394:	2300      	movs	r3, #0
 800b396:	9300      	str	r3, [sp, #0]
 800b398:	2300      	movs	r3, #0
 800b39a:	2100      	movs	r1, #0
 800b39c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b39e:	f7ff fe05 	bl	800afac <xTimerGenericCommand>
 800b3a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b3a4:	6a3b      	ldr	r3, [r7, #32]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d14f      	bne.n	800b44a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ae:	f383 8811 	msr	BASEPRI, r3
 800b3b2:	f3bf 8f6f 	isb	sy
 800b3b6:	f3bf 8f4f 	dsb	sy
 800b3ba:	61bb      	str	r3, [r7, #24]
}
 800b3bc:	bf00      	nop
 800b3be:	e7fe      	b.n	800b3be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b3c6:	f023 0301 	bic.w	r3, r3, #1
 800b3ca:	b2da      	uxtb	r2, r3
 800b3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800b3d2:	e03a      	b.n	800b44a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b3da:	f043 0301 	orr.w	r3, r3, #1
 800b3de:	b2da      	uxtb	r2, r3
 800b3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b3e6:	68ba      	ldr	r2, [r7, #8]
 800b3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ee:	699b      	ldr	r3, [r3, #24]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d10a      	bne.n	800b40a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f8:	f383 8811 	msr	BASEPRI, r3
 800b3fc:	f3bf 8f6f 	isb	sy
 800b400:	f3bf 8f4f 	dsb	sy
 800b404:	617b      	str	r3, [r7, #20]
}
 800b406:	bf00      	nop
 800b408:	e7fe      	b.n	800b408 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b40c:	699a      	ldr	r2, [r3, #24]
 800b40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b410:	18d1      	adds	r1, r2, r3
 800b412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b418:	f7ff ff06 	bl	800b228 <prvInsertTimerInActiveList>
					break;
 800b41c:	e015      	b.n	800b44a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b420:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b424:	f003 0302 	and.w	r3, r3, #2
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d103      	bne.n	800b434 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b42c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b42e:	f000 fbdf 	bl	800bbf0 <vPortFree>
 800b432:	e00a      	b.n	800b44a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b436:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b43a:	f023 0301 	bic.w	r3, r3, #1
 800b43e:	b2da      	uxtb	r2, r3
 800b440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b442:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b446:	e000      	b.n	800b44a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800b448:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b44a:	4b08      	ldr	r3, [pc, #32]	; (800b46c <prvProcessReceivedCommands+0x1c0>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	1d39      	adds	r1, r7, #4
 800b450:	2200      	movs	r2, #0
 800b452:	4618      	mov	r0, r3
 800b454:	f7fe fada 	bl	8009a0c <xQueueReceive>
 800b458:	4603      	mov	r3, r0
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	f47f af2a 	bne.w	800b2b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b460:	bf00      	nop
 800b462:	bf00      	nop
 800b464:	3730      	adds	r7, #48	; 0x30
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
 800b46a:	bf00      	nop
 800b46c:	20000b10 	.word	0x20000b10

0800b470 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b088      	sub	sp, #32
 800b474:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b476:	e048      	b.n	800b50a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b478:	4b2d      	ldr	r3, [pc, #180]	; (800b530 <prvSwitchTimerLists+0xc0>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	68db      	ldr	r3, [r3, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b482:	4b2b      	ldr	r3, [pc, #172]	; (800b530 <prvSwitchTimerLists+0xc0>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	68db      	ldr	r3, [r3, #12]
 800b488:	68db      	ldr	r3, [r3, #12]
 800b48a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	3304      	adds	r3, #4
 800b490:	4618      	mov	r0, r3
 800b492:	f7fd ffbd 	bl	8009410 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	6a1b      	ldr	r3, [r3, #32]
 800b49a:	68f8      	ldr	r0, [r7, #12]
 800b49c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b4a4:	f003 0304 	and.w	r3, r3, #4
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d02e      	beq.n	800b50a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	699b      	ldr	r3, [r3, #24]
 800b4b0:	693a      	ldr	r2, [r7, #16]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b4b6:	68ba      	ldr	r2, [r7, #8]
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d90e      	bls.n	800b4dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	68ba      	ldr	r2, [r7, #8]
 800b4c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	68fa      	ldr	r2, [r7, #12]
 800b4c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b4ca:	4b19      	ldr	r3, [pc, #100]	; (800b530 <prvSwitchTimerLists+0xc0>)
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	3304      	adds	r3, #4
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	4610      	mov	r0, r2
 800b4d6:	f7fd ff62 	bl	800939e <vListInsert>
 800b4da:	e016      	b.n	800b50a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b4dc:	2300      	movs	r3, #0
 800b4de:	9300      	str	r3, [sp, #0]
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	693a      	ldr	r2, [r7, #16]
 800b4e4:	2100      	movs	r1, #0
 800b4e6:	68f8      	ldr	r0, [r7, #12]
 800b4e8:	f7ff fd60 	bl	800afac <xTimerGenericCommand>
 800b4ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d10a      	bne.n	800b50a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f8:	f383 8811 	msr	BASEPRI, r3
 800b4fc:	f3bf 8f6f 	isb	sy
 800b500:	f3bf 8f4f 	dsb	sy
 800b504:	603b      	str	r3, [r7, #0]
}
 800b506:	bf00      	nop
 800b508:	e7fe      	b.n	800b508 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b50a:	4b09      	ldr	r3, [pc, #36]	; (800b530 <prvSwitchTimerLists+0xc0>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d1b1      	bne.n	800b478 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b514:	4b06      	ldr	r3, [pc, #24]	; (800b530 <prvSwitchTimerLists+0xc0>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b51a:	4b06      	ldr	r3, [pc, #24]	; (800b534 <prvSwitchTimerLists+0xc4>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a04      	ldr	r2, [pc, #16]	; (800b530 <prvSwitchTimerLists+0xc0>)
 800b520:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b522:	4a04      	ldr	r2, [pc, #16]	; (800b534 <prvSwitchTimerLists+0xc4>)
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	6013      	str	r3, [r2, #0]
}
 800b528:	bf00      	nop
 800b52a:	3718      	adds	r7, #24
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	20000b08 	.word	0x20000b08
 800b534:	20000b0c 	.word	0x20000b0c

0800b538 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b53e:	f000 f969 	bl	800b814 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b542:	4b15      	ldr	r3, [pc, #84]	; (800b598 <prvCheckForValidListAndQueue+0x60>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d120      	bne.n	800b58c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b54a:	4814      	ldr	r0, [pc, #80]	; (800b59c <prvCheckForValidListAndQueue+0x64>)
 800b54c:	f7fd fed6 	bl	80092fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b550:	4813      	ldr	r0, [pc, #76]	; (800b5a0 <prvCheckForValidListAndQueue+0x68>)
 800b552:	f7fd fed3 	bl	80092fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b556:	4b13      	ldr	r3, [pc, #76]	; (800b5a4 <prvCheckForValidListAndQueue+0x6c>)
 800b558:	4a10      	ldr	r2, [pc, #64]	; (800b59c <prvCheckForValidListAndQueue+0x64>)
 800b55a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b55c:	4b12      	ldr	r3, [pc, #72]	; (800b5a8 <prvCheckForValidListAndQueue+0x70>)
 800b55e:	4a10      	ldr	r2, [pc, #64]	; (800b5a0 <prvCheckForValidListAndQueue+0x68>)
 800b560:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b562:	2300      	movs	r3, #0
 800b564:	9300      	str	r3, [sp, #0]
 800b566:	4b11      	ldr	r3, [pc, #68]	; (800b5ac <prvCheckForValidListAndQueue+0x74>)
 800b568:	4a11      	ldr	r2, [pc, #68]	; (800b5b0 <prvCheckForValidListAndQueue+0x78>)
 800b56a:	2110      	movs	r1, #16
 800b56c:	2014      	movs	r0, #20
 800b56e:	f7fd ffe1 	bl	8009534 <xQueueGenericCreateStatic>
 800b572:	4603      	mov	r3, r0
 800b574:	4a08      	ldr	r2, [pc, #32]	; (800b598 <prvCheckForValidListAndQueue+0x60>)
 800b576:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b578:	4b07      	ldr	r3, [pc, #28]	; (800b598 <prvCheckForValidListAndQueue+0x60>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d005      	beq.n	800b58c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b580:	4b05      	ldr	r3, [pc, #20]	; (800b598 <prvCheckForValidListAndQueue+0x60>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	490b      	ldr	r1, [pc, #44]	; (800b5b4 <prvCheckForValidListAndQueue+0x7c>)
 800b586:	4618      	mov	r0, r3
 800b588:	f7fe fcb0 	bl	8009eec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b58c:	f000 f972 	bl	800b874 <vPortExitCritical>
}
 800b590:	bf00      	nop
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	20000b10 	.word	0x20000b10
 800b59c:	20000ae0 	.word	0x20000ae0
 800b5a0:	20000af4 	.word	0x20000af4
 800b5a4:	20000b08 	.word	0x20000b08
 800b5a8:	20000b0c 	.word	0x20000b0c
 800b5ac:	20000c5c 	.word	0x20000c5c
 800b5b0:	20000b1c 	.word	0x20000b1c
 800b5b4:	0800c840 	.word	0x0800c840

0800b5b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b085      	sub	sp, #20
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	3b04      	subs	r3, #4
 800b5c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b5d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	3b04      	subs	r3, #4
 800b5d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	f023 0201 	bic.w	r2, r3, #1
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	3b04      	subs	r3, #4
 800b5e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b5e8:	4a0c      	ldr	r2, [pc, #48]	; (800b61c <pxPortInitialiseStack+0x64>)
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	3b14      	subs	r3, #20
 800b5f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	3b04      	subs	r3, #4
 800b5fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	f06f 0202 	mvn.w	r2, #2
 800b606:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	3b20      	subs	r3, #32
 800b60c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b60e:	68fb      	ldr	r3, [r7, #12]
}
 800b610:	4618      	mov	r0, r3
 800b612:	3714      	adds	r7, #20
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr
 800b61c:	0800b621 	.word	0x0800b621

0800b620 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b620:	b480      	push	{r7}
 800b622:	b085      	sub	sp, #20
 800b624:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b626:	2300      	movs	r3, #0
 800b628:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b62a:	4b12      	ldr	r3, [pc, #72]	; (800b674 <prvTaskExitError+0x54>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b632:	d00a      	beq.n	800b64a <prvTaskExitError+0x2a>
	__asm volatile
 800b634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b638:	f383 8811 	msr	BASEPRI, r3
 800b63c:	f3bf 8f6f 	isb	sy
 800b640:	f3bf 8f4f 	dsb	sy
 800b644:	60fb      	str	r3, [r7, #12]
}
 800b646:	bf00      	nop
 800b648:	e7fe      	b.n	800b648 <prvTaskExitError+0x28>
	__asm volatile
 800b64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64e:	f383 8811 	msr	BASEPRI, r3
 800b652:	f3bf 8f6f 	isb	sy
 800b656:	f3bf 8f4f 	dsb	sy
 800b65a:	60bb      	str	r3, [r7, #8]
}
 800b65c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b65e:	bf00      	nop
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d0fc      	beq.n	800b660 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b666:	bf00      	nop
 800b668:	bf00      	nop
 800b66a:	3714      	adds	r7, #20
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr
 800b674:	2000002c 	.word	0x2000002c
	...

0800b680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b680:	4b07      	ldr	r3, [pc, #28]	; (800b6a0 <pxCurrentTCBConst2>)
 800b682:	6819      	ldr	r1, [r3, #0]
 800b684:	6808      	ldr	r0, [r1, #0]
 800b686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b68a:	f380 8809 	msr	PSP, r0
 800b68e:	f3bf 8f6f 	isb	sy
 800b692:	f04f 0000 	mov.w	r0, #0
 800b696:	f380 8811 	msr	BASEPRI, r0
 800b69a:	4770      	bx	lr
 800b69c:	f3af 8000 	nop.w

0800b6a0 <pxCurrentTCBConst2>:
 800b6a0:	200009b4 	.word	0x200009b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b6a4:	bf00      	nop
 800b6a6:	bf00      	nop

0800b6a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b6a8:	4808      	ldr	r0, [pc, #32]	; (800b6cc <prvPortStartFirstTask+0x24>)
 800b6aa:	6800      	ldr	r0, [r0, #0]
 800b6ac:	6800      	ldr	r0, [r0, #0]
 800b6ae:	f380 8808 	msr	MSP, r0
 800b6b2:	f04f 0000 	mov.w	r0, #0
 800b6b6:	f380 8814 	msr	CONTROL, r0
 800b6ba:	b662      	cpsie	i
 800b6bc:	b661      	cpsie	f
 800b6be:	f3bf 8f4f 	dsb	sy
 800b6c2:	f3bf 8f6f 	isb	sy
 800b6c6:	df00      	svc	0
 800b6c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b6ca:	bf00      	nop
 800b6cc:	e000ed08 	.word	0xe000ed08

0800b6d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b086      	sub	sp, #24
 800b6d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b6d6:	4b46      	ldr	r3, [pc, #280]	; (800b7f0 <xPortStartScheduler+0x120>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a46      	ldr	r2, [pc, #280]	; (800b7f4 <xPortStartScheduler+0x124>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d10a      	bne.n	800b6f6 <xPortStartScheduler+0x26>
	__asm volatile
 800b6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e4:	f383 8811 	msr	BASEPRI, r3
 800b6e8:	f3bf 8f6f 	isb	sy
 800b6ec:	f3bf 8f4f 	dsb	sy
 800b6f0:	613b      	str	r3, [r7, #16]
}
 800b6f2:	bf00      	nop
 800b6f4:	e7fe      	b.n	800b6f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b6f6:	4b3e      	ldr	r3, [pc, #248]	; (800b7f0 <xPortStartScheduler+0x120>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a3f      	ldr	r2, [pc, #252]	; (800b7f8 <xPortStartScheduler+0x128>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d10a      	bne.n	800b716 <xPortStartScheduler+0x46>
	__asm volatile
 800b700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b704:	f383 8811 	msr	BASEPRI, r3
 800b708:	f3bf 8f6f 	isb	sy
 800b70c:	f3bf 8f4f 	dsb	sy
 800b710:	60fb      	str	r3, [r7, #12]
}
 800b712:	bf00      	nop
 800b714:	e7fe      	b.n	800b714 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b716:	4b39      	ldr	r3, [pc, #228]	; (800b7fc <xPortStartScheduler+0x12c>)
 800b718:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	b2db      	uxtb	r3, r3
 800b720:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	22ff      	movs	r2, #255	; 0xff
 800b726:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b730:	78fb      	ldrb	r3, [r7, #3]
 800b732:	b2db      	uxtb	r3, r3
 800b734:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b738:	b2da      	uxtb	r2, r3
 800b73a:	4b31      	ldr	r3, [pc, #196]	; (800b800 <xPortStartScheduler+0x130>)
 800b73c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b73e:	4b31      	ldr	r3, [pc, #196]	; (800b804 <xPortStartScheduler+0x134>)
 800b740:	2207      	movs	r2, #7
 800b742:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b744:	e009      	b.n	800b75a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b746:	4b2f      	ldr	r3, [pc, #188]	; (800b804 <xPortStartScheduler+0x134>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	3b01      	subs	r3, #1
 800b74c:	4a2d      	ldr	r2, [pc, #180]	; (800b804 <xPortStartScheduler+0x134>)
 800b74e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b750:	78fb      	ldrb	r3, [r7, #3]
 800b752:	b2db      	uxtb	r3, r3
 800b754:	005b      	lsls	r3, r3, #1
 800b756:	b2db      	uxtb	r3, r3
 800b758:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b75a:	78fb      	ldrb	r3, [r7, #3]
 800b75c:	b2db      	uxtb	r3, r3
 800b75e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b762:	2b80      	cmp	r3, #128	; 0x80
 800b764:	d0ef      	beq.n	800b746 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b766:	4b27      	ldr	r3, [pc, #156]	; (800b804 <xPortStartScheduler+0x134>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f1c3 0307 	rsb	r3, r3, #7
 800b76e:	2b04      	cmp	r3, #4
 800b770:	d00a      	beq.n	800b788 <xPortStartScheduler+0xb8>
	__asm volatile
 800b772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b776:	f383 8811 	msr	BASEPRI, r3
 800b77a:	f3bf 8f6f 	isb	sy
 800b77e:	f3bf 8f4f 	dsb	sy
 800b782:	60bb      	str	r3, [r7, #8]
}
 800b784:	bf00      	nop
 800b786:	e7fe      	b.n	800b786 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b788:	4b1e      	ldr	r3, [pc, #120]	; (800b804 <xPortStartScheduler+0x134>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	021b      	lsls	r3, r3, #8
 800b78e:	4a1d      	ldr	r2, [pc, #116]	; (800b804 <xPortStartScheduler+0x134>)
 800b790:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b792:	4b1c      	ldr	r3, [pc, #112]	; (800b804 <xPortStartScheduler+0x134>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b79a:	4a1a      	ldr	r2, [pc, #104]	; (800b804 <xPortStartScheduler+0x134>)
 800b79c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	b2da      	uxtb	r2, r3
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b7a6:	4b18      	ldr	r3, [pc, #96]	; (800b808 <xPortStartScheduler+0x138>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a17      	ldr	r2, [pc, #92]	; (800b808 <xPortStartScheduler+0x138>)
 800b7ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b7b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b7b2:	4b15      	ldr	r3, [pc, #84]	; (800b808 <xPortStartScheduler+0x138>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4a14      	ldr	r2, [pc, #80]	; (800b808 <xPortStartScheduler+0x138>)
 800b7b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b7bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b7be:	f000 f8dd 	bl	800b97c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b7c2:	4b12      	ldr	r3, [pc, #72]	; (800b80c <xPortStartScheduler+0x13c>)
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b7c8:	f000 f8fc 	bl	800b9c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b7cc:	4b10      	ldr	r3, [pc, #64]	; (800b810 <xPortStartScheduler+0x140>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a0f      	ldr	r2, [pc, #60]	; (800b810 <xPortStartScheduler+0x140>)
 800b7d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b7d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b7d8:	f7ff ff66 	bl	800b6a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b7dc:	f7ff f822 	bl	800a824 <vTaskSwitchContext>
	prvTaskExitError();
 800b7e0:	f7ff ff1e 	bl	800b620 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3718      	adds	r7, #24
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	e000ed00 	.word	0xe000ed00
 800b7f4:	410fc271 	.word	0x410fc271
 800b7f8:	410fc270 	.word	0x410fc270
 800b7fc:	e000e400 	.word	0xe000e400
 800b800:	20000ca4 	.word	0x20000ca4
 800b804:	20000ca8 	.word	0x20000ca8
 800b808:	e000ed20 	.word	0xe000ed20
 800b80c:	2000002c 	.word	0x2000002c
 800b810:	e000ef34 	.word	0xe000ef34

0800b814 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b814:	b480      	push	{r7}
 800b816:	b083      	sub	sp, #12
 800b818:	af00      	add	r7, sp, #0
	__asm volatile
 800b81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b81e:	f383 8811 	msr	BASEPRI, r3
 800b822:	f3bf 8f6f 	isb	sy
 800b826:	f3bf 8f4f 	dsb	sy
 800b82a:	607b      	str	r3, [r7, #4]
}
 800b82c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b82e:	4b0f      	ldr	r3, [pc, #60]	; (800b86c <vPortEnterCritical+0x58>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	3301      	adds	r3, #1
 800b834:	4a0d      	ldr	r2, [pc, #52]	; (800b86c <vPortEnterCritical+0x58>)
 800b836:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b838:	4b0c      	ldr	r3, [pc, #48]	; (800b86c <vPortEnterCritical+0x58>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d10f      	bne.n	800b860 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b840:	4b0b      	ldr	r3, [pc, #44]	; (800b870 <vPortEnterCritical+0x5c>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	b2db      	uxtb	r3, r3
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00a      	beq.n	800b860 <vPortEnterCritical+0x4c>
	__asm volatile
 800b84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b84e:	f383 8811 	msr	BASEPRI, r3
 800b852:	f3bf 8f6f 	isb	sy
 800b856:	f3bf 8f4f 	dsb	sy
 800b85a:	603b      	str	r3, [r7, #0]
}
 800b85c:	bf00      	nop
 800b85e:	e7fe      	b.n	800b85e <vPortEnterCritical+0x4a>
	}
}
 800b860:	bf00      	nop
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr
 800b86c:	2000002c 	.word	0x2000002c
 800b870:	e000ed04 	.word	0xe000ed04

0800b874 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b874:	b480      	push	{r7}
 800b876:	b083      	sub	sp, #12
 800b878:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b87a:	4b12      	ldr	r3, [pc, #72]	; (800b8c4 <vPortExitCritical+0x50>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d10a      	bne.n	800b898 <vPortExitCritical+0x24>
	__asm volatile
 800b882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b886:	f383 8811 	msr	BASEPRI, r3
 800b88a:	f3bf 8f6f 	isb	sy
 800b88e:	f3bf 8f4f 	dsb	sy
 800b892:	607b      	str	r3, [r7, #4]
}
 800b894:	bf00      	nop
 800b896:	e7fe      	b.n	800b896 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b898:	4b0a      	ldr	r3, [pc, #40]	; (800b8c4 <vPortExitCritical+0x50>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	3b01      	subs	r3, #1
 800b89e:	4a09      	ldr	r2, [pc, #36]	; (800b8c4 <vPortExitCritical+0x50>)
 800b8a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b8a2:	4b08      	ldr	r3, [pc, #32]	; (800b8c4 <vPortExitCritical+0x50>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d105      	bne.n	800b8b6 <vPortExitCritical+0x42>
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	f383 8811 	msr	BASEPRI, r3
}
 800b8b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b8b6:	bf00      	nop
 800b8b8:	370c      	adds	r7, #12
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr
 800b8c2:	bf00      	nop
 800b8c4:	2000002c 	.word	0x2000002c
	...

0800b8d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b8d0:	f3ef 8009 	mrs	r0, PSP
 800b8d4:	f3bf 8f6f 	isb	sy
 800b8d8:	4b15      	ldr	r3, [pc, #84]	; (800b930 <pxCurrentTCBConst>)
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	f01e 0f10 	tst.w	lr, #16
 800b8e0:	bf08      	it	eq
 800b8e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b8e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ea:	6010      	str	r0, [r2, #0]
 800b8ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b8f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b8f4:	f380 8811 	msr	BASEPRI, r0
 800b8f8:	f3bf 8f4f 	dsb	sy
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f7fe ff90 	bl	800a824 <vTaskSwitchContext>
 800b904:	f04f 0000 	mov.w	r0, #0
 800b908:	f380 8811 	msr	BASEPRI, r0
 800b90c:	bc09      	pop	{r0, r3}
 800b90e:	6819      	ldr	r1, [r3, #0]
 800b910:	6808      	ldr	r0, [r1, #0]
 800b912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b916:	f01e 0f10 	tst.w	lr, #16
 800b91a:	bf08      	it	eq
 800b91c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b920:	f380 8809 	msr	PSP, r0
 800b924:	f3bf 8f6f 	isb	sy
 800b928:	4770      	bx	lr
 800b92a:	bf00      	nop
 800b92c:	f3af 8000 	nop.w

0800b930 <pxCurrentTCBConst>:
 800b930:	200009b4 	.word	0x200009b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b934:	bf00      	nop
 800b936:	bf00      	nop

0800b938 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
	__asm volatile
 800b93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b942:	f383 8811 	msr	BASEPRI, r3
 800b946:	f3bf 8f6f 	isb	sy
 800b94a:	f3bf 8f4f 	dsb	sy
 800b94e:	607b      	str	r3, [r7, #4]
}
 800b950:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b952:	f7fe feaf 	bl	800a6b4 <xTaskIncrementTick>
 800b956:	4603      	mov	r3, r0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d003      	beq.n	800b964 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b95c:	4b06      	ldr	r3, [pc, #24]	; (800b978 <SysTick_Handler+0x40>)
 800b95e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b962:	601a      	str	r2, [r3, #0]
 800b964:	2300      	movs	r3, #0
 800b966:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	f383 8811 	msr	BASEPRI, r3
}
 800b96e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b970:	bf00      	nop
 800b972:	3708      	adds	r7, #8
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}
 800b978:	e000ed04 	.word	0xe000ed04

0800b97c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b97c:	b480      	push	{r7}
 800b97e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b980:	4b0b      	ldr	r3, [pc, #44]	; (800b9b0 <vPortSetupTimerInterrupt+0x34>)
 800b982:	2200      	movs	r2, #0
 800b984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b986:	4b0b      	ldr	r3, [pc, #44]	; (800b9b4 <vPortSetupTimerInterrupt+0x38>)
 800b988:	2200      	movs	r2, #0
 800b98a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b98c:	4b0a      	ldr	r3, [pc, #40]	; (800b9b8 <vPortSetupTimerInterrupt+0x3c>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4a0a      	ldr	r2, [pc, #40]	; (800b9bc <vPortSetupTimerInterrupt+0x40>)
 800b992:	fba2 2303 	umull	r2, r3, r2, r3
 800b996:	099b      	lsrs	r3, r3, #6
 800b998:	4a09      	ldr	r2, [pc, #36]	; (800b9c0 <vPortSetupTimerInterrupt+0x44>)
 800b99a:	3b01      	subs	r3, #1
 800b99c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b99e:	4b04      	ldr	r3, [pc, #16]	; (800b9b0 <vPortSetupTimerInterrupt+0x34>)
 800b9a0:	2207      	movs	r2, #7
 800b9a2:	601a      	str	r2, [r3, #0]
}
 800b9a4:	bf00      	nop
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop
 800b9b0:	e000e010 	.word	0xe000e010
 800b9b4:	e000e018 	.word	0xe000e018
 800b9b8:	20000000 	.word	0x20000000
 800b9bc:	10624dd3 	.word	0x10624dd3
 800b9c0:	e000e014 	.word	0xe000e014

0800b9c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b9c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b9d4 <vPortEnableVFP+0x10>
 800b9c8:	6801      	ldr	r1, [r0, #0]
 800b9ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b9ce:	6001      	str	r1, [r0, #0]
 800b9d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b9d2:	bf00      	nop
 800b9d4:	e000ed88 	.word	0xe000ed88

0800b9d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b9d8:	b480      	push	{r7}
 800b9da:	b085      	sub	sp, #20
 800b9dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b9de:	f3ef 8305 	mrs	r3, IPSR
 800b9e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2b0f      	cmp	r3, #15
 800b9e8:	d914      	bls.n	800ba14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b9ea:	4a17      	ldr	r2, [pc, #92]	; (800ba48 <vPortValidateInterruptPriority+0x70>)
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	4413      	add	r3, r2
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b9f4:	4b15      	ldr	r3, [pc, #84]	; (800ba4c <vPortValidateInterruptPriority+0x74>)
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	7afa      	ldrb	r2, [r7, #11]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d20a      	bcs.n	800ba14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba02:	f383 8811 	msr	BASEPRI, r3
 800ba06:	f3bf 8f6f 	isb	sy
 800ba0a:	f3bf 8f4f 	dsb	sy
 800ba0e:	607b      	str	r3, [r7, #4]
}
 800ba10:	bf00      	nop
 800ba12:	e7fe      	b.n	800ba12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ba14:	4b0e      	ldr	r3, [pc, #56]	; (800ba50 <vPortValidateInterruptPriority+0x78>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ba1c:	4b0d      	ldr	r3, [pc, #52]	; (800ba54 <vPortValidateInterruptPriority+0x7c>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d90a      	bls.n	800ba3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ba24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba28:	f383 8811 	msr	BASEPRI, r3
 800ba2c:	f3bf 8f6f 	isb	sy
 800ba30:	f3bf 8f4f 	dsb	sy
 800ba34:	603b      	str	r3, [r7, #0]
}
 800ba36:	bf00      	nop
 800ba38:	e7fe      	b.n	800ba38 <vPortValidateInterruptPriority+0x60>
	}
 800ba3a:	bf00      	nop
 800ba3c:	3714      	adds	r7, #20
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba44:	4770      	bx	lr
 800ba46:	bf00      	nop
 800ba48:	e000e3f0 	.word	0xe000e3f0
 800ba4c:	20000ca4 	.word	0x20000ca4
 800ba50:	e000ed0c 	.word	0xe000ed0c
 800ba54:	20000ca8 	.word	0x20000ca8

0800ba58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b08a      	sub	sp, #40	; 0x28
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ba60:	2300      	movs	r3, #0
 800ba62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ba64:	f7fe fd6c 	bl	800a540 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ba68:	4b5b      	ldr	r3, [pc, #364]	; (800bbd8 <pvPortMalloc+0x180>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d101      	bne.n	800ba74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ba70:	f000 f920 	bl	800bcb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ba74:	4b59      	ldr	r3, [pc, #356]	; (800bbdc <pvPortMalloc+0x184>)
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	4013      	ands	r3, r2
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	f040 8093 	bne.w	800bba8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d01d      	beq.n	800bac4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ba88:	2208      	movs	r2, #8
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	4413      	add	r3, r2
 800ba8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f003 0307 	and.w	r3, r3, #7
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d014      	beq.n	800bac4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f023 0307 	bic.w	r3, r3, #7
 800baa0:	3308      	adds	r3, #8
 800baa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f003 0307 	and.w	r3, r3, #7
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d00a      	beq.n	800bac4 <pvPortMalloc+0x6c>
	__asm volatile
 800baae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab2:	f383 8811 	msr	BASEPRI, r3
 800bab6:	f3bf 8f6f 	isb	sy
 800baba:	f3bf 8f4f 	dsb	sy
 800babe:	617b      	str	r3, [r7, #20]
}
 800bac0:	bf00      	nop
 800bac2:	e7fe      	b.n	800bac2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d06e      	beq.n	800bba8 <pvPortMalloc+0x150>
 800baca:	4b45      	ldr	r3, [pc, #276]	; (800bbe0 <pvPortMalloc+0x188>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	687a      	ldr	r2, [r7, #4]
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d869      	bhi.n	800bba8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bad4:	4b43      	ldr	r3, [pc, #268]	; (800bbe4 <pvPortMalloc+0x18c>)
 800bad6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bad8:	4b42      	ldr	r3, [pc, #264]	; (800bbe4 <pvPortMalloc+0x18c>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bade:	e004      	b.n	800baea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800baea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baec:	685b      	ldr	r3, [r3, #4]
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d903      	bls.n	800bafc <pvPortMalloc+0xa4>
 800baf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d1f1      	bne.n	800bae0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bafc:	4b36      	ldr	r3, [pc, #216]	; (800bbd8 <pvPortMalloc+0x180>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d050      	beq.n	800bba8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bb06:	6a3b      	ldr	r3, [r7, #32]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	2208      	movs	r2, #8
 800bb0c:	4413      	add	r3, r2
 800bb0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb12:	681a      	ldr	r2, [r3, #0]
 800bb14:	6a3b      	ldr	r3, [r7, #32]
 800bb16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1a:	685a      	ldr	r2, [r3, #4]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	1ad2      	subs	r2, r2, r3
 800bb20:	2308      	movs	r3, #8
 800bb22:	005b      	lsls	r3, r3, #1
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d91f      	bls.n	800bb68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bb28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb30:	69bb      	ldr	r3, [r7, #24]
 800bb32:	f003 0307 	and.w	r3, r3, #7
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d00a      	beq.n	800bb50 <pvPortMalloc+0xf8>
	__asm volatile
 800bb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb3e:	f383 8811 	msr	BASEPRI, r3
 800bb42:	f3bf 8f6f 	isb	sy
 800bb46:	f3bf 8f4f 	dsb	sy
 800bb4a:	613b      	str	r3, [r7, #16]
}
 800bb4c:	bf00      	nop
 800bb4e:	e7fe      	b.n	800bb4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb52:	685a      	ldr	r2, [r3, #4]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	1ad2      	subs	r2, r2, r3
 800bb58:	69bb      	ldr	r3, [r7, #24]
 800bb5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bb62:	69b8      	ldr	r0, [r7, #24]
 800bb64:	f000 f908 	bl	800bd78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bb68:	4b1d      	ldr	r3, [pc, #116]	; (800bbe0 <pvPortMalloc+0x188>)
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	1ad3      	subs	r3, r2, r3
 800bb72:	4a1b      	ldr	r2, [pc, #108]	; (800bbe0 <pvPortMalloc+0x188>)
 800bb74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bb76:	4b1a      	ldr	r3, [pc, #104]	; (800bbe0 <pvPortMalloc+0x188>)
 800bb78:	681a      	ldr	r2, [r3, #0]
 800bb7a:	4b1b      	ldr	r3, [pc, #108]	; (800bbe8 <pvPortMalloc+0x190>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d203      	bcs.n	800bb8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bb82:	4b17      	ldr	r3, [pc, #92]	; (800bbe0 <pvPortMalloc+0x188>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4a18      	ldr	r2, [pc, #96]	; (800bbe8 <pvPortMalloc+0x190>)
 800bb88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8c:	685a      	ldr	r2, [r3, #4]
 800bb8e:	4b13      	ldr	r3, [pc, #76]	; (800bbdc <pvPortMalloc+0x184>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	431a      	orrs	r2, r3
 800bb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bb9e:	4b13      	ldr	r3, [pc, #76]	; (800bbec <pvPortMalloc+0x194>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	3301      	adds	r3, #1
 800bba4:	4a11      	ldr	r2, [pc, #68]	; (800bbec <pvPortMalloc+0x194>)
 800bba6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bba8:	f7fe fcd8 	bl	800a55c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	f003 0307 	and.w	r3, r3, #7
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d00a      	beq.n	800bbcc <pvPortMalloc+0x174>
	__asm volatile
 800bbb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbba:	f383 8811 	msr	BASEPRI, r3
 800bbbe:	f3bf 8f6f 	isb	sy
 800bbc2:	f3bf 8f4f 	dsb	sy
 800bbc6:	60fb      	str	r3, [r7, #12]
}
 800bbc8:	bf00      	nop
 800bbca:	e7fe      	b.n	800bbca <pvPortMalloc+0x172>
	return pvReturn;
 800bbcc:	69fb      	ldr	r3, [r7, #28]
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3728      	adds	r7, #40	; 0x28
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	200048b4 	.word	0x200048b4
 800bbdc:	200048c8 	.word	0x200048c8
 800bbe0:	200048b8 	.word	0x200048b8
 800bbe4:	200048ac 	.word	0x200048ac
 800bbe8:	200048bc 	.word	0x200048bc
 800bbec:	200048c0 	.word	0x200048c0

0800bbf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b086      	sub	sp, #24
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d04d      	beq.n	800bc9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bc02:	2308      	movs	r3, #8
 800bc04:	425b      	negs	r3, r3
 800bc06:	697a      	ldr	r2, [r7, #20]
 800bc08:	4413      	add	r3, r2
 800bc0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	685a      	ldr	r2, [r3, #4]
 800bc14:	4b24      	ldr	r3, [pc, #144]	; (800bca8 <vPortFree+0xb8>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4013      	ands	r3, r2
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d10a      	bne.n	800bc34 <vPortFree+0x44>
	__asm volatile
 800bc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc22:	f383 8811 	msr	BASEPRI, r3
 800bc26:	f3bf 8f6f 	isb	sy
 800bc2a:	f3bf 8f4f 	dsb	sy
 800bc2e:	60fb      	str	r3, [r7, #12]
}
 800bc30:	bf00      	nop
 800bc32:	e7fe      	b.n	800bc32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d00a      	beq.n	800bc52 <vPortFree+0x62>
	__asm volatile
 800bc3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc40:	f383 8811 	msr	BASEPRI, r3
 800bc44:	f3bf 8f6f 	isb	sy
 800bc48:	f3bf 8f4f 	dsb	sy
 800bc4c:	60bb      	str	r3, [r7, #8]
}
 800bc4e:	bf00      	nop
 800bc50:	e7fe      	b.n	800bc50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	685a      	ldr	r2, [r3, #4]
 800bc56:	4b14      	ldr	r3, [pc, #80]	; (800bca8 <vPortFree+0xb8>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	4013      	ands	r3, r2
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d01e      	beq.n	800bc9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d11a      	bne.n	800bc9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	685a      	ldr	r2, [r3, #4]
 800bc6c:	4b0e      	ldr	r3, [pc, #56]	; (800bca8 <vPortFree+0xb8>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	43db      	mvns	r3, r3
 800bc72:	401a      	ands	r2, r3
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bc78:	f7fe fc62 	bl	800a540 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	685a      	ldr	r2, [r3, #4]
 800bc80:	4b0a      	ldr	r3, [pc, #40]	; (800bcac <vPortFree+0xbc>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4413      	add	r3, r2
 800bc86:	4a09      	ldr	r2, [pc, #36]	; (800bcac <vPortFree+0xbc>)
 800bc88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bc8a:	6938      	ldr	r0, [r7, #16]
 800bc8c:	f000 f874 	bl	800bd78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bc90:	4b07      	ldr	r3, [pc, #28]	; (800bcb0 <vPortFree+0xc0>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	3301      	adds	r3, #1
 800bc96:	4a06      	ldr	r2, [pc, #24]	; (800bcb0 <vPortFree+0xc0>)
 800bc98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bc9a:	f7fe fc5f 	bl	800a55c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bc9e:	bf00      	nop
 800bca0:	3718      	adds	r7, #24
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	200048c8 	.word	0x200048c8
 800bcac:	200048b8 	.word	0x200048b8
 800bcb0:	200048c4 	.word	0x200048c4

0800bcb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bcba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bcbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bcc0:	4b27      	ldr	r3, [pc, #156]	; (800bd60 <prvHeapInit+0xac>)
 800bcc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f003 0307 	and.w	r3, r3, #7
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d00c      	beq.n	800bce8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	3307      	adds	r3, #7
 800bcd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f023 0307 	bic.w	r3, r3, #7
 800bcda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bcdc:	68ba      	ldr	r2, [r7, #8]
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	1ad3      	subs	r3, r2, r3
 800bce2:	4a1f      	ldr	r2, [pc, #124]	; (800bd60 <prvHeapInit+0xac>)
 800bce4:	4413      	add	r3, r2
 800bce6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bcec:	4a1d      	ldr	r2, [pc, #116]	; (800bd64 <prvHeapInit+0xb0>)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bcf2:	4b1c      	ldr	r3, [pc, #112]	; (800bd64 <prvHeapInit+0xb0>)
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	68ba      	ldr	r2, [r7, #8]
 800bcfc:	4413      	add	r3, r2
 800bcfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bd00:	2208      	movs	r2, #8
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	1a9b      	subs	r3, r3, r2
 800bd06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f023 0307 	bic.w	r3, r3, #7
 800bd0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	4a15      	ldr	r2, [pc, #84]	; (800bd68 <prvHeapInit+0xb4>)
 800bd14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bd16:	4b14      	ldr	r3, [pc, #80]	; (800bd68 <prvHeapInit+0xb4>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bd1e:	4b12      	ldr	r3, [pc, #72]	; (800bd68 <prvHeapInit+0xb4>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	2200      	movs	r2, #0
 800bd24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	68fa      	ldr	r2, [r7, #12]
 800bd2e:	1ad2      	subs	r2, r2, r3
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bd34:	4b0c      	ldr	r3, [pc, #48]	; (800bd68 <prvHeapInit+0xb4>)
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	4a0a      	ldr	r2, [pc, #40]	; (800bd6c <prvHeapInit+0xb8>)
 800bd42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	4a09      	ldr	r2, [pc, #36]	; (800bd70 <prvHeapInit+0xbc>)
 800bd4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bd4c:	4b09      	ldr	r3, [pc, #36]	; (800bd74 <prvHeapInit+0xc0>)
 800bd4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bd52:	601a      	str	r2, [r3, #0]
}
 800bd54:	bf00      	nop
 800bd56:	3714      	adds	r7, #20
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr
 800bd60:	20000cac 	.word	0x20000cac
 800bd64:	200048ac 	.word	0x200048ac
 800bd68:	200048b4 	.word	0x200048b4
 800bd6c:	200048bc 	.word	0x200048bc
 800bd70:	200048b8 	.word	0x200048b8
 800bd74:	200048c8 	.word	0x200048c8

0800bd78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b085      	sub	sp, #20
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bd80:	4b28      	ldr	r3, [pc, #160]	; (800be24 <prvInsertBlockIntoFreeList+0xac>)
 800bd82:	60fb      	str	r3, [r7, #12]
 800bd84:	e002      	b.n	800bd8c <prvInsertBlockIntoFreeList+0x14>
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	60fb      	str	r3, [r7, #12]
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d8f7      	bhi.n	800bd86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	68ba      	ldr	r2, [r7, #8]
 800bda0:	4413      	add	r3, r2
 800bda2:	687a      	ldr	r2, [r7, #4]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d108      	bne.n	800bdba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	685a      	ldr	r2, [r3, #4]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	441a      	add	r2, r3
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	68ba      	ldr	r2, [r7, #8]
 800bdc4:	441a      	add	r2, r3
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d118      	bne.n	800be00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681a      	ldr	r2, [r3, #0]
 800bdd2:	4b15      	ldr	r3, [pc, #84]	; (800be28 <prvInsertBlockIntoFreeList+0xb0>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d00d      	beq.n	800bdf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	685a      	ldr	r2, [r3, #4]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	441a      	add	r2, r3
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	681a      	ldr	r2, [r3, #0]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	601a      	str	r2, [r3, #0]
 800bdf4:	e008      	b.n	800be08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bdf6:	4b0c      	ldr	r3, [pc, #48]	; (800be28 <prvInsertBlockIntoFreeList+0xb0>)
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	601a      	str	r2, [r3, #0]
 800bdfe:	e003      	b.n	800be08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681a      	ldr	r2, [r3, #0]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800be08:	68fa      	ldr	r2, [r7, #12]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d002      	beq.n	800be16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	687a      	ldr	r2, [r7, #4]
 800be14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be16:	bf00      	nop
 800be18:	3714      	adds	r7, #20
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop
 800be24:	200048ac 	.word	0x200048ac
 800be28:	200048b4 	.word	0x200048b4

0800be2c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800be30:	2201      	movs	r2, #1
 800be32:	490e      	ldr	r1, [pc, #56]	; (800be6c <MX_USB_HOST_Init+0x40>)
 800be34:	480e      	ldr	r0, [pc, #56]	; (800be70 <MX_USB_HOST_Init+0x44>)
 800be36:	f7fb f9cd 	bl	80071d4 <USBH_Init>
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d001      	beq.n	800be44 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800be40:	f7f4 feba 	bl	8000bb8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800be44:	490b      	ldr	r1, [pc, #44]	; (800be74 <MX_USB_HOST_Init+0x48>)
 800be46:	480a      	ldr	r0, [pc, #40]	; (800be70 <MX_USB_HOST_Init+0x44>)
 800be48:	f7fb fa99 	bl	800737e <USBH_RegisterClass>
 800be4c:	4603      	mov	r3, r0
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d001      	beq.n	800be56 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800be52:	f7f4 feb1 	bl	8000bb8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800be56:	4806      	ldr	r0, [pc, #24]	; (800be70 <MX_USB_HOST_Init+0x44>)
 800be58:	f7fb fb1d 	bl	8007496 <USBH_Start>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d001      	beq.n	800be66 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800be62:	f7f4 fea9 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800be66:	bf00      	nop
 800be68:	bd80      	pop	{r7, pc}
 800be6a:	bf00      	nop
 800be6c:	0800be79 	.word	0x0800be79
 800be70:	200048cc 	.word	0x200048cc
 800be74:	2000000c 	.word	0x2000000c

0800be78 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	460b      	mov	r3, r1
 800be82:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800be84:	78fb      	ldrb	r3, [r7, #3]
 800be86:	3b01      	subs	r3, #1
 800be88:	2b04      	cmp	r3, #4
 800be8a:	d819      	bhi.n	800bec0 <USBH_UserProcess+0x48>
 800be8c:	a201      	add	r2, pc, #4	; (adr r2, 800be94 <USBH_UserProcess+0x1c>)
 800be8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be92:	bf00      	nop
 800be94:	0800bec1 	.word	0x0800bec1
 800be98:	0800beb1 	.word	0x0800beb1
 800be9c:	0800bec1 	.word	0x0800bec1
 800bea0:	0800beb9 	.word	0x0800beb9
 800bea4:	0800bea9 	.word	0x0800bea9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bea8:	4b09      	ldr	r3, [pc, #36]	; (800bed0 <USBH_UserProcess+0x58>)
 800beaa:	2203      	movs	r2, #3
 800beac:	701a      	strb	r2, [r3, #0]
  break;
 800beae:	e008      	b.n	800bec2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800beb0:	4b07      	ldr	r3, [pc, #28]	; (800bed0 <USBH_UserProcess+0x58>)
 800beb2:	2202      	movs	r2, #2
 800beb4:	701a      	strb	r2, [r3, #0]
  break;
 800beb6:	e004      	b.n	800bec2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800beb8:	4b05      	ldr	r3, [pc, #20]	; (800bed0 <USBH_UserProcess+0x58>)
 800beba:	2201      	movs	r2, #1
 800bebc:	701a      	strb	r2, [r3, #0]
  break;
 800bebe:	e000      	b.n	800bec2 <USBH_UserProcess+0x4a>

  default:
  break;
 800bec0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800bec2:	bf00      	nop
 800bec4:	370c      	adds	r7, #12
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr
 800bece:	bf00      	nop
 800bed0:	20004cb0 	.word	0x20004cb0

0800bed4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b08a      	sub	sp, #40	; 0x28
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bedc:	f107 0314 	add.w	r3, r7, #20
 800bee0:	2200      	movs	r2, #0
 800bee2:	601a      	str	r2, [r3, #0]
 800bee4:	605a      	str	r2, [r3, #4]
 800bee6:	609a      	str	r2, [r3, #8]
 800bee8:	60da      	str	r2, [r3, #12]
 800beea:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bef4:	d147      	bne.n	800bf86 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bef6:	2300      	movs	r3, #0
 800bef8:	613b      	str	r3, [r7, #16]
 800befa:	4b25      	ldr	r3, [pc, #148]	; (800bf90 <HAL_HCD_MspInit+0xbc>)
 800befc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800befe:	4a24      	ldr	r2, [pc, #144]	; (800bf90 <HAL_HCD_MspInit+0xbc>)
 800bf00:	f043 0301 	orr.w	r3, r3, #1
 800bf04:	6313      	str	r3, [r2, #48]	; 0x30
 800bf06:	4b22      	ldr	r3, [pc, #136]	; (800bf90 <HAL_HCD_MspInit+0xbc>)
 800bf08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf0a:	f003 0301 	and.w	r3, r3, #1
 800bf0e:	613b      	str	r3, [r7, #16]
 800bf10:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800bf12:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800bf20:	f107 0314 	add.w	r3, r7, #20
 800bf24:	4619      	mov	r1, r3
 800bf26:	481b      	ldr	r0, [pc, #108]	; (800bf94 <HAL_HCD_MspInit+0xc0>)
 800bf28:	f7f5 fa02 	bl	8001330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800bf2c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800bf30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf32:	2302      	movs	r3, #2
 800bf34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf36:	2300      	movs	r3, #0
 800bf38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bf3e:	230a      	movs	r3, #10
 800bf40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf42:	f107 0314 	add.w	r3, r7, #20
 800bf46:	4619      	mov	r1, r3
 800bf48:	4812      	ldr	r0, [pc, #72]	; (800bf94 <HAL_HCD_MspInit+0xc0>)
 800bf4a:	f7f5 f9f1 	bl	8001330 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bf4e:	4b10      	ldr	r3, [pc, #64]	; (800bf90 <HAL_HCD_MspInit+0xbc>)
 800bf50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf52:	4a0f      	ldr	r2, [pc, #60]	; (800bf90 <HAL_HCD_MspInit+0xbc>)
 800bf54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf58:	6353      	str	r3, [r2, #52]	; 0x34
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	60fb      	str	r3, [r7, #12]
 800bf5e:	4b0c      	ldr	r3, [pc, #48]	; (800bf90 <HAL_HCD_MspInit+0xbc>)
 800bf60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf62:	4a0b      	ldr	r2, [pc, #44]	; (800bf90 <HAL_HCD_MspInit+0xbc>)
 800bf64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bf68:	6453      	str	r3, [r2, #68]	; 0x44
 800bf6a:	4b09      	ldr	r3, [pc, #36]	; (800bf90 <HAL_HCD_MspInit+0xbc>)
 800bf6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf72:	60fb      	str	r3, [r7, #12]
 800bf74:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800bf76:	2200      	movs	r2, #0
 800bf78:	2105      	movs	r1, #5
 800bf7a:	2043      	movs	r0, #67	; 0x43
 800bf7c:	f7f5 f9ae 	bl	80012dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bf80:	2043      	movs	r0, #67	; 0x43
 800bf82:	f7f5 f9c7 	bl	8001314 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bf86:	bf00      	nop
 800bf88:	3728      	adds	r7, #40	; 0x28
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	40023800 	.word	0x40023800
 800bf94:	40020000 	.word	0x40020000

0800bf98 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b082      	sub	sp, #8
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7fb ff2d 	bl	8007e06 <USBH_LL_IncTimer>
}
 800bfac:	bf00      	nop
 800bfae:	3708      	adds	r7, #8
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f7fb ff71 	bl	8007eaa <USBH_LL_Connect>
}
 800bfc8:	bf00      	nop
 800bfca:	3708      	adds	r7, #8
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b082      	sub	sp, #8
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7fb ff86 	bl	8007ef0 <USBH_LL_Disconnect>
}
 800bfe4:	bf00      	nop
 800bfe6:	3708      	adds	r7, #8
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	460b      	mov	r3, r1
 800bff6:	70fb      	strb	r3, [r7, #3]
 800bff8:	4613      	mov	r3, r2
 800bffa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c002:	4618      	mov	r0, r3
 800c004:	f7fb ffbb 	bl	8007f7e <USBH_LL_NotifyURBChange>
#endif
}
 800c008:	bf00      	nop
 800c00a:	3708      	adds	r7, #8
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c01e:	4618      	mov	r0, r3
 800c020:	f7fb ff1b 	bl	8007e5a <USBH_LL_PortEnabled>
}
 800c024:	bf00      	nop
 800c026:	3708      	adds	r7, #8
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b082      	sub	sp, #8
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7fb ff27 	bl	8007e8e <USBH_LL_PortDisabled>
}
 800c040:	bf00      	nop
 800c042:	3708      	adds	r7, #8
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c056:	2b01      	cmp	r3, #1
 800c058:	d12a      	bne.n	800c0b0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c05a:	4a18      	ldr	r2, [pc, #96]	; (800c0bc <USBH_LL_Init+0x74>)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	4a15      	ldr	r2, [pc, #84]	; (800c0bc <USBH_LL_Init+0x74>)
 800c066:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c06a:	4b14      	ldr	r3, [pc, #80]	; (800c0bc <USBH_LL_Init+0x74>)
 800c06c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c070:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c072:	4b12      	ldr	r3, [pc, #72]	; (800c0bc <USBH_LL_Init+0x74>)
 800c074:	2208      	movs	r2, #8
 800c076:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c078:	4b10      	ldr	r3, [pc, #64]	; (800c0bc <USBH_LL_Init+0x74>)
 800c07a:	2201      	movs	r2, #1
 800c07c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c07e:	4b0f      	ldr	r3, [pc, #60]	; (800c0bc <USBH_LL_Init+0x74>)
 800c080:	2200      	movs	r2, #0
 800c082:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c084:	4b0d      	ldr	r3, [pc, #52]	; (800c0bc <USBH_LL_Init+0x74>)
 800c086:	2202      	movs	r2, #2
 800c088:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c08a:	4b0c      	ldr	r3, [pc, #48]	; (800c0bc <USBH_LL_Init+0x74>)
 800c08c:	2200      	movs	r2, #0
 800c08e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c090:	480a      	ldr	r0, [pc, #40]	; (800c0bc <USBH_LL_Init+0x74>)
 800c092:	f7f5 fb40 	bl	8001716 <HAL_HCD_Init>
 800c096:	4603      	mov	r3, r0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d001      	beq.n	800c0a0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c09c:	f7f4 fd8c 	bl	8000bb8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c0a0:	4806      	ldr	r0, [pc, #24]	; (800c0bc <USBH_LL_Init+0x74>)
 800c0a2:	f7f5 ffa1 	bl	8001fe8 <HAL_HCD_GetCurrentFrame>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f7fb fe9c 	bl	8007de8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c0b0:	2300      	movs	r3, #0
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3708      	adds	r7, #8
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	20004cb4 	.word	0x20004cb4

0800c0c0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7f5 ff0e 	bl	8001ef8 <HAL_HCD_Start>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c0e0:	7bfb      	ldrb	r3, [r7, #15]
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f000 f95e 	bl	800c3a4 <USBH_Get_USB_Status>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3710      	adds	r7, #16
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}

0800c0f6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b084      	sub	sp, #16
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0fe:	2300      	movs	r3, #0
 800c100:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c102:	2300      	movs	r3, #0
 800c104:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c10c:	4618      	mov	r0, r3
 800c10e:	f7f5 ff16 	bl	8001f3e <HAL_HCD_Stop>
 800c112:	4603      	mov	r3, r0
 800c114:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c116:	7bfb      	ldrb	r3, [r7, #15]
 800c118:	4618      	mov	r0, r3
 800c11a:	f000 f943 	bl	800c3a4 <USBH_Get_USB_Status>
 800c11e:	4603      	mov	r3, r0
 800c120:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c122:	7bbb      	ldrb	r3, [r7, #14]
}
 800c124:	4618      	mov	r0, r3
 800c126:	3710      	adds	r7, #16
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b084      	sub	sp, #16
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c134:	2301      	movs	r3, #1
 800c136:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c13e:	4618      	mov	r0, r3
 800c140:	f7f5 ff60 	bl	8002004 <HAL_HCD_GetCurrentSpeed>
 800c144:	4603      	mov	r3, r0
 800c146:	2b02      	cmp	r3, #2
 800c148:	d00c      	beq.n	800c164 <USBH_LL_GetSpeed+0x38>
 800c14a:	2b02      	cmp	r3, #2
 800c14c:	d80d      	bhi.n	800c16a <USBH_LL_GetSpeed+0x3e>
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d002      	beq.n	800c158 <USBH_LL_GetSpeed+0x2c>
 800c152:	2b01      	cmp	r3, #1
 800c154:	d003      	beq.n	800c15e <USBH_LL_GetSpeed+0x32>
 800c156:	e008      	b.n	800c16a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c158:	2300      	movs	r3, #0
 800c15a:	73fb      	strb	r3, [r7, #15]
    break;
 800c15c:	e008      	b.n	800c170 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c15e:	2301      	movs	r3, #1
 800c160:	73fb      	strb	r3, [r7, #15]
    break;
 800c162:	e005      	b.n	800c170 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c164:	2302      	movs	r3, #2
 800c166:	73fb      	strb	r3, [r7, #15]
    break;
 800c168:	e002      	b.n	800c170 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c16a:	2301      	movs	r3, #1
 800c16c:	73fb      	strb	r3, [r7, #15]
    break;
 800c16e:	bf00      	nop
  }
  return  speed;
 800c170:	7bfb      	ldrb	r3, [r7, #15]
}
 800c172:	4618      	mov	r0, r3
 800c174:	3710      	adds	r7, #16
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}

0800c17a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c17a:	b580      	push	{r7, lr}
 800c17c:	b084      	sub	sp, #16
 800c17e:	af00      	add	r7, sp, #0
 800c180:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c182:	2300      	movs	r3, #0
 800c184:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c186:	2300      	movs	r3, #0
 800c188:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c190:	4618      	mov	r0, r3
 800c192:	f7f5 fef1 	bl	8001f78 <HAL_HCD_ResetPort>
 800c196:	4603      	mov	r3, r0
 800c198:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c19a:	7bfb      	ldrb	r3, [r7, #15]
 800c19c:	4618      	mov	r0, r3
 800c19e:	f000 f901 	bl	800c3a4 <USBH_Get_USB_Status>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3710      	adds	r7, #16
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	460b      	mov	r3, r1
 800c1ba:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c1c2:	78fa      	ldrb	r2, [r7, #3]
 800c1c4:	4611      	mov	r1, r2
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7f5 fef9 	bl	8001fbe <HAL_HCD_HC_GetXferCount>
 800c1cc:	4603      	mov	r3, r0
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3708      	adds	r7, #8
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}

0800c1d6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c1d6:	b590      	push	{r4, r7, lr}
 800c1d8:	b089      	sub	sp, #36	; 0x24
 800c1da:	af04      	add	r7, sp, #16
 800c1dc:	6078      	str	r0, [r7, #4]
 800c1de:	4608      	mov	r0, r1
 800c1e0:	4611      	mov	r1, r2
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	70fb      	strb	r3, [r7, #3]
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	70bb      	strb	r3, [r7, #2]
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c1fe:	787c      	ldrb	r4, [r7, #1]
 800c200:	78ba      	ldrb	r2, [r7, #2]
 800c202:	78f9      	ldrb	r1, [r7, #3]
 800c204:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c206:	9302      	str	r3, [sp, #8]
 800c208:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c20c:	9301      	str	r3, [sp, #4]
 800c20e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c212:	9300      	str	r3, [sp, #0]
 800c214:	4623      	mov	r3, r4
 800c216:	f7f5 fae5 	bl	80017e4 <HAL_HCD_HC_Init>
 800c21a:	4603      	mov	r3, r0
 800c21c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c21e:	7bfb      	ldrb	r3, [r7, #15]
 800c220:	4618      	mov	r0, r3
 800c222:	f000 f8bf 	bl	800c3a4 <USBH_Get_USB_Status>
 800c226:	4603      	mov	r3, r0
 800c228:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c22a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3714      	adds	r7, #20
 800c230:	46bd      	mov	sp, r7
 800c232:	bd90      	pop	{r4, r7, pc}

0800c234 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b084      	sub	sp, #16
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	460b      	mov	r3, r1
 800c23e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c240:	2300      	movs	r3, #0
 800c242:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c244:	2300      	movs	r3, #0
 800c246:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c24e:	78fa      	ldrb	r2, [r7, #3]
 800c250:	4611      	mov	r1, r2
 800c252:	4618      	mov	r0, r3
 800c254:	f7f5 fb7e 	bl	8001954 <HAL_HCD_HC_Halt>
 800c258:	4603      	mov	r3, r0
 800c25a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c25c:	7bfb      	ldrb	r3, [r7, #15]
 800c25e:	4618      	mov	r0, r3
 800c260:	f000 f8a0 	bl	800c3a4 <USBH_Get_USB_Status>
 800c264:	4603      	mov	r3, r0
 800c266:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c268:	7bbb      	ldrb	r3, [r7, #14]
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3710      	adds	r7, #16
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}

0800c272 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c272:	b590      	push	{r4, r7, lr}
 800c274:	b089      	sub	sp, #36	; 0x24
 800c276:	af04      	add	r7, sp, #16
 800c278:	6078      	str	r0, [r7, #4]
 800c27a:	4608      	mov	r0, r1
 800c27c:	4611      	mov	r1, r2
 800c27e:	461a      	mov	r2, r3
 800c280:	4603      	mov	r3, r0
 800c282:	70fb      	strb	r3, [r7, #3]
 800c284:	460b      	mov	r3, r1
 800c286:	70bb      	strb	r3, [r7, #2]
 800c288:	4613      	mov	r3, r2
 800c28a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c28c:	2300      	movs	r3, #0
 800c28e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c290:	2300      	movs	r3, #0
 800c292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c29a:	787c      	ldrb	r4, [r7, #1]
 800c29c:	78ba      	ldrb	r2, [r7, #2]
 800c29e:	78f9      	ldrb	r1, [r7, #3]
 800c2a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c2a4:	9303      	str	r3, [sp, #12]
 800c2a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c2a8:	9302      	str	r3, [sp, #8]
 800c2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ac:	9301      	str	r3, [sp, #4]
 800c2ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c2b2:	9300      	str	r3, [sp, #0]
 800c2b4:	4623      	mov	r3, r4
 800c2b6:	f7f5 fb71 	bl	800199c <HAL_HCD_HC_SubmitRequest>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c2be:	7bfb      	ldrb	r3, [r7, #15]
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f000 f86f 	bl	800c3a4 <USBH_Get_USB_Status>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3714      	adds	r7, #20
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd90      	pop	{r4, r7, pc}

0800c2d4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	460b      	mov	r3, r1
 800c2de:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c2e6:	78fa      	ldrb	r2, [r7, #3]
 800c2e8:	4611      	mov	r1, r2
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f7f5 fe52 	bl	8001f94 <HAL_HCD_HC_GetURBState>
 800c2f0:	4603      	mov	r3, r0
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3708      	adds	r7, #8
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}

0800c2fa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b082      	sub	sp, #8
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	6078      	str	r0, [r7, #4]
 800c302:	460b      	mov	r3, r1
 800c304:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d103      	bne.n	800c318 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c310:	78fb      	ldrb	r3, [r7, #3]
 800c312:	4618      	mov	r0, r3
 800c314:	f000 f872 	bl	800c3fc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c318:	20c8      	movs	r0, #200	; 0xc8
 800c31a:	f7f4 ff03 	bl	8001124 <HAL_Delay>
  return USBH_OK;
 800c31e:	2300      	movs	r3, #0
}
 800c320:	4618      	mov	r0, r3
 800c322:	3708      	adds	r7, #8
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c328:	b480      	push	{r7}
 800c32a:	b085      	sub	sp, #20
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	460b      	mov	r3, r1
 800c332:	70fb      	strb	r3, [r7, #3]
 800c334:	4613      	mov	r3, r2
 800c336:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c33e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c340:	78fa      	ldrb	r2, [r7, #3]
 800c342:	68f9      	ldr	r1, [r7, #12]
 800c344:	4613      	mov	r3, r2
 800c346:	011b      	lsls	r3, r3, #4
 800c348:	1a9b      	subs	r3, r3, r2
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	440b      	add	r3, r1
 800c34e:	3317      	adds	r3, #23
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d00a      	beq.n	800c36c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c356:	78fa      	ldrb	r2, [r7, #3]
 800c358:	68f9      	ldr	r1, [r7, #12]
 800c35a:	4613      	mov	r3, r2
 800c35c:	011b      	lsls	r3, r3, #4
 800c35e:	1a9b      	subs	r3, r3, r2
 800c360:	009b      	lsls	r3, r3, #2
 800c362:	440b      	add	r3, r1
 800c364:	333c      	adds	r3, #60	; 0x3c
 800c366:	78ba      	ldrb	r2, [r7, #2]
 800c368:	701a      	strb	r2, [r3, #0]
 800c36a:	e009      	b.n	800c380 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c36c:	78fa      	ldrb	r2, [r7, #3]
 800c36e:	68f9      	ldr	r1, [r7, #12]
 800c370:	4613      	mov	r3, r2
 800c372:	011b      	lsls	r3, r3, #4
 800c374:	1a9b      	subs	r3, r3, r2
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	440b      	add	r3, r1
 800c37a:	333d      	adds	r3, #61	; 0x3d
 800c37c:	78ba      	ldrb	r2, [r7, #2]
 800c37e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c380:	2300      	movs	r3, #0
}
 800c382:	4618      	mov	r0, r3
 800c384:	3714      	adds	r7, #20
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr

0800c38e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c38e:	b580      	push	{r7, lr}
 800c390:	b082      	sub	sp, #8
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f7f4 fec4 	bl	8001124 <HAL_Delay>
}
 800c39c:	bf00      	nop
 800c39e:	3708      	adds	r7, #8
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b085      	sub	sp, #20
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c3b2:	79fb      	ldrb	r3, [r7, #7]
 800c3b4:	2b03      	cmp	r3, #3
 800c3b6:	d817      	bhi.n	800c3e8 <USBH_Get_USB_Status+0x44>
 800c3b8:	a201      	add	r2, pc, #4	; (adr r2, 800c3c0 <USBH_Get_USB_Status+0x1c>)
 800c3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3be:	bf00      	nop
 800c3c0:	0800c3d1 	.word	0x0800c3d1
 800c3c4:	0800c3d7 	.word	0x0800c3d7
 800c3c8:	0800c3dd 	.word	0x0800c3dd
 800c3cc:	0800c3e3 	.word	0x0800c3e3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	73fb      	strb	r3, [r7, #15]
    break;
 800c3d4:	e00b      	b.n	800c3ee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c3d6:	2302      	movs	r3, #2
 800c3d8:	73fb      	strb	r3, [r7, #15]
    break;
 800c3da:	e008      	b.n	800c3ee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	73fb      	strb	r3, [r7, #15]
    break;
 800c3e0:	e005      	b.n	800c3ee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c3e2:	2302      	movs	r3, #2
 800c3e4:	73fb      	strb	r3, [r7, #15]
    break;
 800c3e6:	e002      	b.n	800c3ee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c3e8:	2302      	movs	r3, #2
 800c3ea:	73fb      	strb	r3, [r7, #15]
    break;
 800c3ec:	bf00      	nop
  }
  return usb_status;
 800c3ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3714      	adds	r7, #20
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr

0800c3fc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	4603      	mov	r3, r0
 800c404:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c406:	79fb      	ldrb	r3, [r7, #7]
 800c408:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c40a:	79fb      	ldrb	r3, [r7, #7]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d102      	bne.n	800c416 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c410:	2300      	movs	r3, #0
 800c412:	73fb      	strb	r3, [r7, #15]
 800c414:	e001      	b.n	800c41a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c416:	2301      	movs	r3, #1
 800c418:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c41a:	7bfb      	ldrb	r3, [r7, #15]
 800c41c:	461a      	mov	r2, r3
 800c41e:	2101      	movs	r1, #1
 800c420:	4803      	ldr	r0, [pc, #12]	; (800c430 <MX_DriverVbusFS+0x34>)
 800c422:	f7f5 f921 	bl	8001668 <HAL_GPIO_WritePin>
}
 800c426:	bf00      	nop
 800c428:	3710      	adds	r7, #16
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
 800c42e:	bf00      	nop
 800c430:	40020800 	.word	0x40020800

0800c434 <malloc>:
 800c434:	4b02      	ldr	r3, [pc, #8]	; (800c440 <malloc+0xc>)
 800c436:	4601      	mov	r1, r0
 800c438:	6818      	ldr	r0, [r3, #0]
 800c43a:	f000 b82b 	b.w	800c494 <_malloc_r>
 800c43e:	bf00      	nop
 800c440:	2000007c 	.word	0x2000007c

0800c444 <free>:
 800c444:	4b02      	ldr	r3, [pc, #8]	; (800c450 <free+0xc>)
 800c446:	4601      	mov	r1, r0
 800c448:	6818      	ldr	r0, [r3, #0]
 800c44a:	f000 b957 	b.w	800c6fc <_free_r>
 800c44e:	bf00      	nop
 800c450:	2000007c 	.word	0x2000007c

0800c454 <sbrk_aligned>:
 800c454:	b570      	push	{r4, r5, r6, lr}
 800c456:	4e0e      	ldr	r6, [pc, #56]	; (800c490 <sbrk_aligned+0x3c>)
 800c458:	460c      	mov	r4, r1
 800c45a:	6831      	ldr	r1, [r6, #0]
 800c45c:	4605      	mov	r5, r0
 800c45e:	b911      	cbnz	r1, 800c466 <sbrk_aligned+0x12>
 800c460:	f000 f902 	bl	800c668 <_sbrk_r>
 800c464:	6030      	str	r0, [r6, #0]
 800c466:	4621      	mov	r1, r4
 800c468:	4628      	mov	r0, r5
 800c46a:	f000 f8fd 	bl	800c668 <_sbrk_r>
 800c46e:	1c43      	adds	r3, r0, #1
 800c470:	d00a      	beq.n	800c488 <sbrk_aligned+0x34>
 800c472:	1cc4      	adds	r4, r0, #3
 800c474:	f024 0403 	bic.w	r4, r4, #3
 800c478:	42a0      	cmp	r0, r4
 800c47a:	d007      	beq.n	800c48c <sbrk_aligned+0x38>
 800c47c:	1a21      	subs	r1, r4, r0
 800c47e:	4628      	mov	r0, r5
 800c480:	f000 f8f2 	bl	800c668 <_sbrk_r>
 800c484:	3001      	adds	r0, #1
 800c486:	d101      	bne.n	800c48c <sbrk_aligned+0x38>
 800c488:	f04f 34ff 	mov.w	r4, #4294967295
 800c48c:	4620      	mov	r0, r4
 800c48e:	bd70      	pop	{r4, r5, r6, pc}
 800c490:	20005098 	.word	0x20005098

0800c494 <_malloc_r>:
 800c494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c498:	1ccd      	adds	r5, r1, #3
 800c49a:	f025 0503 	bic.w	r5, r5, #3
 800c49e:	3508      	adds	r5, #8
 800c4a0:	2d0c      	cmp	r5, #12
 800c4a2:	bf38      	it	cc
 800c4a4:	250c      	movcc	r5, #12
 800c4a6:	2d00      	cmp	r5, #0
 800c4a8:	4607      	mov	r7, r0
 800c4aa:	db01      	blt.n	800c4b0 <_malloc_r+0x1c>
 800c4ac:	42a9      	cmp	r1, r5
 800c4ae:	d905      	bls.n	800c4bc <_malloc_r+0x28>
 800c4b0:	230c      	movs	r3, #12
 800c4b2:	603b      	str	r3, [r7, #0]
 800c4b4:	2600      	movs	r6, #0
 800c4b6:	4630      	mov	r0, r6
 800c4b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c590 <_malloc_r+0xfc>
 800c4c0:	f000 f868 	bl	800c594 <__malloc_lock>
 800c4c4:	f8d8 3000 	ldr.w	r3, [r8]
 800c4c8:	461c      	mov	r4, r3
 800c4ca:	bb5c      	cbnz	r4, 800c524 <_malloc_r+0x90>
 800c4cc:	4629      	mov	r1, r5
 800c4ce:	4638      	mov	r0, r7
 800c4d0:	f7ff ffc0 	bl	800c454 <sbrk_aligned>
 800c4d4:	1c43      	adds	r3, r0, #1
 800c4d6:	4604      	mov	r4, r0
 800c4d8:	d155      	bne.n	800c586 <_malloc_r+0xf2>
 800c4da:	f8d8 4000 	ldr.w	r4, [r8]
 800c4de:	4626      	mov	r6, r4
 800c4e0:	2e00      	cmp	r6, #0
 800c4e2:	d145      	bne.n	800c570 <_malloc_r+0xdc>
 800c4e4:	2c00      	cmp	r4, #0
 800c4e6:	d048      	beq.n	800c57a <_malloc_r+0xe6>
 800c4e8:	6823      	ldr	r3, [r4, #0]
 800c4ea:	4631      	mov	r1, r6
 800c4ec:	4638      	mov	r0, r7
 800c4ee:	eb04 0903 	add.w	r9, r4, r3
 800c4f2:	f000 f8b9 	bl	800c668 <_sbrk_r>
 800c4f6:	4581      	cmp	r9, r0
 800c4f8:	d13f      	bne.n	800c57a <_malloc_r+0xe6>
 800c4fa:	6821      	ldr	r1, [r4, #0]
 800c4fc:	1a6d      	subs	r5, r5, r1
 800c4fe:	4629      	mov	r1, r5
 800c500:	4638      	mov	r0, r7
 800c502:	f7ff ffa7 	bl	800c454 <sbrk_aligned>
 800c506:	3001      	adds	r0, #1
 800c508:	d037      	beq.n	800c57a <_malloc_r+0xe6>
 800c50a:	6823      	ldr	r3, [r4, #0]
 800c50c:	442b      	add	r3, r5
 800c50e:	6023      	str	r3, [r4, #0]
 800c510:	f8d8 3000 	ldr.w	r3, [r8]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d038      	beq.n	800c58a <_malloc_r+0xf6>
 800c518:	685a      	ldr	r2, [r3, #4]
 800c51a:	42a2      	cmp	r2, r4
 800c51c:	d12b      	bne.n	800c576 <_malloc_r+0xe2>
 800c51e:	2200      	movs	r2, #0
 800c520:	605a      	str	r2, [r3, #4]
 800c522:	e00f      	b.n	800c544 <_malloc_r+0xb0>
 800c524:	6822      	ldr	r2, [r4, #0]
 800c526:	1b52      	subs	r2, r2, r5
 800c528:	d41f      	bmi.n	800c56a <_malloc_r+0xd6>
 800c52a:	2a0b      	cmp	r2, #11
 800c52c:	d917      	bls.n	800c55e <_malloc_r+0xca>
 800c52e:	1961      	adds	r1, r4, r5
 800c530:	42a3      	cmp	r3, r4
 800c532:	6025      	str	r5, [r4, #0]
 800c534:	bf18      	it	ne
 800c536:	6059      	strne	r1, [r3, #4]
 800c538:	6863      	ldr	r3, [r4, #4]
 800c53a:	bf08      	it	eq
 800c53c:	f8c8 1000 	streq.w	r1, [r8]
 800c540:	5162      	str	r2, [r4, r5]
 800c542:	604b      	str	r3, [r1, #4]
 800c544:	4638      	mov	r0, r7
 800c546:	f104 060b 	add.w	r6, r4, #11
 800c54a:	f000 f829 	bl	800c5a0 <__malloc_unlock>
 800c54e:	f026 0607 	bic.w	r6, r6, #7
 800c552:	1d23      	adds	r3, r4, #4
 800c554:	1af2      	subs	r2, r6, r3
 800c556:	d0ae      	beq.n	800c4b6 <_malloc_r+0x22>
 800c558:	1b9b      	subs	r3, r3, r6
 800c55a:	50a3      	str	r3, [r4, r2]
 800c55c:	e7ab      	b.n	800c4b6 <_malloc_r+0x22>
 800c55e:	42a3      	cmp	r3, r4
 800c560:	6862      	ldr	r2, [r4, #4]
 800c562:	d1dd      	bne.n	800c520 <_malloc_r+0x8c>
 800c564:	f8c8 2000 	str.w	r2, [r8]
 800c568:	e7ec      	b.n	800c544 <_malloc_r+0xb0>
 800c56a:	4623      	mov	r3, r4
 800c56c:	6864      	ldr	r4, [r4, #4]
 800c56e:	e7ac      	b.n	800c4ca <_malloc_r+0x36>
 800c570:	4634      	mov	r4, r6
 800c572:	6876      	ldr	r6, [r6, #4]
 800c574:	e7b4      	b.n	800c4e0 <_malloc_r+0x4c>
 800c576:	4613      	mov	r3, r2
 800c578:	e7cc      	b.n	800c514 <_malloc_r+0x80>
 800c57a:	230c      	movs	r3, #12
 800c57c:	603b      	str	r3, [r7, #0]
 800c57e:	4638      	mov	r0, r7
 800c580:	f000 f80e 	bl	800c5a0 <__malloc_unlock>
 800c584:	e797      	b.n	800c4b6 <_malloc_r+0x22>
 800c586:	6025      	str	r5, [r4, #0]
 800c588:	e7dc      	b.n	800c544 <_malloc_r+0xb0>
 800c58a:	605b      	str	r3, [r3, #4]
 800c58c:	deff      	udf	#255	; 0xff
 800c58e:	bf00      	nop
 800c590:	20005094 	.word	0x20005094

0800c594 <__malloc_lock>:
 800c594:	4801      	ldr	r0, [pc, #4]	; (800c59c <__malloc_lock+0x8>)
 800c596:	f000 b8a1 	b.w	800c6dc <__retarget_lock_acquire_recursive>
 800c59a:	bf00      	nop
 800c59c:	200051d8 	.word	0x200051d8

0800c5a0 <__malloc_unlock>:
 800c5a0:	4801      	ldr	r0, [pc, #4]	; (800c5a8 <__malloc_unlock+0x8>)
 800c5a2:	f000 b89c 	b.w	800c6de <__retarget_lock_release_recursive>
 800c5a6:	bf00      	nop
 800c5a8:	200051d8 	.word	0x200051d8

0800c5ac <memset>:
 800c5ac:	4402      	add	r2, r0
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d100      	bne.n	800c5b6 <memset+0xa>
 800c5b4:	4770      	bx	lr
 800c5b6:	f803 1b01 	strb.w	r1, [r3], #1
 800c5ba:	e7f9      	b.n	800c5b0 <memset+0x4>

0800c5bc <_reclaim_reent>:
 800c5bc:	4b29      	ldr	r3, [pc, #164]	; (800c664 <_reclaim_reent+0xa8>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4283      	cmp	r3, r0
 800c5c2:	b570      	push	{r4, r5, r6, lr}
 800c5c4:	4604      	mov	r4, r0
 800c5c6:	d04b      	beq.n	800c660 <_reclaim_reent+0xa4>
 800c5c8:	69c3      	ldr	r3, [r0, #28]
 800c5ca:	b143      	cbz	r3, 800c5de <_reclaim_reent+0x22>
 800c5cc:	68db      	ldr	r3, [r3, #12]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d144      	bne.n	800c65c <_reclaim_reent+0xa0>
 800c5d2:	69e3      	ldr	r3, [r4, #28]
 800c5d4:	6819      	ldr	r1, [r3, #0]
 800c5d6:	b111      	cbz	r1, 800c5de <_reclaim_reent+0x22>
 800c5d8:	4620      	mov	r0, r4
 800c5da:	f000 f88f 	bl	800c6fc <_free_r>
 800c5de:	6961      	ldr	r1, [r4, #20]
 800c5e0:	b111      	cbz	r1, 800c5e8 <_reclaim_reent+0x2c>
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	f000 f88a 	bl	800c6fc <_free_r>
 800c5e8:	69e1      	ldr	r1, [r4, #28]
 800c5ea:	b111      	cbz	r1, 800c5f2 <_reclaim_reent+0x36>
 800c5ec:	4620      	mov	r0, r4
 800c5ee:	f000 f885 	bl	800c6fc <_free_r>
 800c5f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c5f4:	b111      	cbz	r1, 800c5fc <_reclaim_reent+0x40>
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	f000 f880 	bl	800c6fc <_free_r>
 800c5fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5fe:	b111      	cbz	r1, 800c606 <_reclaim_reent+0x4a>
 800c600:	4620      	mov	r0, r4
 800c602:	f000 f87b 	bl	800c6fc <_free_r>
 800c606:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c608:	b111      	cbz	r1, 800c610 <_reclaim_reent+0x54>
 800c60a:	4620      	mov	r0, r4
 800c60c:	f000 f876 	bl	800c6fc <_free_r>
 800c610:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c612:	b111      	cbz	r1, 800c61a <_reclaim_reent+0x5e>
 800c614:	4620      	mov	r0, r4
 800c616:	f000 f871 	bl	800c6fc <_free_r>
 800c61a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c61c:	b111      	cbz	r1, 800c624 <_reclaim_reent+0x68>
 800c61e:	4620      	mov	r0, r4
 800c620:	f000 f86c 	bl	800c6fc <_free_r>
 800c624:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c626:	b111      	cbz	r1, 800c62e <_reclaim_reent+0x72>
 800c628:	4620      	mov	r0, r4
 800c62a:	f000 f867 	bl	800c6fc <_free_r>
 800c62e:	6a23      	ldr	r3, [r4, #32]
 800c630:	b1b3      	cbz	r3, 800c660 <_reclaim_reent+0xa4>
 800c632:	4620      	mov	r0, r4
 800c634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c638:	4718      	bx	r3
 800c63a:	5949      	ldr	r1, [r1, r5]
 800c63c:	b941      	cbnz	r1, 800c650 <_reclaim_reent+0x94>
 800c63e:	3504      	adds	r5, #4
 800c640:	69e3      	ldr	r3, [r4, #28]
 800c642:	2d80      	cmp	r5, #128	; 0x80
 800c644:	68d9      	ldr	r1, [r3, #12]
 800c646:	d1f8      	bne.n	800c63a <_reclaim_reent+0x7e>
 800c648:	4620      	mov	r0, r4
 800c64a:	f000 f857 	bl	800c6fc <_free_r>
 800c64e:	e7c0      	b.n	800c5d2 <_reclaim_reent+0x16>
 800c650:	680e      	ldr	r6, [r1, #0]
 800c652:	4620      	mov	r0, r4
 800c654:	f000 f852 	bl	800c6fc <_free_r>
 800c658:	4631      	mov	r1, r6
 800c65a:	e7ef      	b.n	800c63c <_reclaim_reent+0x80>
 800c65c:	2500      	movs	r5, #0
 800c65e:	e7ef      	b.n	800c640 <_reclaim_reent+0x84>
 800c660:	bd70      	pop	{r4, r5, r6, pc}
 800c662:	bf00      	nop
 800c664:	2000007c 	.word	0x2000007c

0800c668 <_sbrk_r>:
 800c668:	b538      	push	{r3, r4, r5, lr}
 800c66a:	4d06      	ldr	r5, [pc, #24]	; (800c684 <_sbrk_r+0x1c>)
 800c66c:	2300      	movs	r3, #0
 800c66e:	4604      	mov	r4, r0
 800c670:	4608      	mov	r0, r1
 800c672:	602b      	str	r3, [r5, #0]
 800c674:	f7f4 fca2 	bl	8000fbc <_sbrk>
 800c678:	1c43      	adds	r3, r0, #1
 800c67a:	d102      	bne.n	800c682 <_sbrk_r+0x1a>
 800c67c:	682b      	ldr	r3, [r5, #0]
 800c67e:	b103      	cbz	r3, 800c682 <_sbrk_r+0x1a>
 800c680:	6023      	str	r3, [r4, #0]
 800c682:	bd38      	pop	{r3, r4, r5, pc}
 800c684:	200051d4 	.word	0x200051d4

0800c688 <__errno>:
 800c688:	4b01      	ldr	r3, [pc, #4]	; (800c690 <__errno+0x8>)
 800c68a:	6818      	ldr	r0, [r3, #0]
 800c68c:	4770      	bx	lr
 800c68e:	bf00      	nop
 800c690:	2000007c 	.word	0x2000007c

0800c694 <__libc_init_array>:
 800c694:	b570      	push	{r4, r5, r6, lr}
 800c696:	4d0d      	ldr	r5, [pc, #52]	; (800c6cc <__libc_init_array+0x38>)
 800c698:	4c0d      	ldr	r4, [pc, #52]	; (800c6d0 <__libc_init_array+0x3c>)
 800c69a:	1b64      	subs	r4, r4, r5
 800c69c:	10a4      	asrs	r4, r4, #2
 800c69e:	2600      	movs	r6, #0
 800c6a0:	42a6      	cmp	r6, r4
 800c6a2:	d109      	bne.n	800c6b8 <__libc_init_array+0x24>
 800c6a4:	4d0b      	ldr	r5, [pc, #44]	; (800c6d4 <__libc_init_array+0x40>)
 800c6a6:	4c0c      	ldr	r4, [pc, #48]	; (800c6d8 <__libc_init_array+0x44>)
 800c6a8:	f000 f874 	bl	800c794 <_init>
 800c6ac:	1b64      	subs	r4, r4, r5
 800c6ae:	10a4      	asrs	r4, r4, #2
 800c6b0:	2600      	movs	r6, #0
 800c6b2:	42a6      	cmp	r6, r4
 800c6b4:	d105      	bne.n	800c6c2 <__libc_init_array+0x2e>
 800c6b6:	bd70      	pop	{r4, r5, r6, pc}
 800c6b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6bc:	4798      	blx	r3
 800c6be:	3601      	adds	r6, #1
 800c6c0:	e7ee      	b.n	800c6a0 <__libc_init_array+0xc>
 800c6c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6c6:	4798      	blx	r3
 800c6c8:	3601      	adds	r6, #1
 800c6ca:	e7f2      	b.n	800c6b2 <__libc_init_array+0x1e>
 800c6cc:	0800c868 	.word	0x0800c868
 800c6d0:	0800c868 	.word	0x0800c868
 800c6d4:	0800c868 	.word	0x0800c868
 800c6d8:	0800c86c 	.word	0x0800c86c

0800c6dc <__retarget_lock_acquire_recursive>:
 800c6dc:	4770      	bx	lr

0800c6de <__retarget_lock_release_recursive>:
 800c6de:	4770      	bx	lr

0800c6e0 <memcpy>:
 800c6e0:	440a      	add	r2, r1
 800c6e2:	4291      	cmp	r1, r2
 800c6e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c6e8:	d100      	bne.n	800c6ec <memcpy+0xc>
 800c6ea:	4770      	bx	lr
 800c6ec:	b510      	push	{r4, lr}
 800c6ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6f6:	4291      	cmp	r1, r2
 800c6f8:	d1f9      	bne.n	800c6ee <memcpy+0xe>
 800c6fa:	bd10      	pop	{r4, pc}

0800c6fc <_free_r>:
 800c6fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6fe:	2900      	cmp	r1, #0
 800c700:	d044      	beq.n	800c78c <_free_r+0x90>
 800c702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c706:	9001      	str	r0, [sp, #4]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	f1a1 0404 	sub.w	r4, r1, #4
 800c70e:	bfb8      	it	lt
 800c710:	18e4      	addlt	r4, r4, r3
 800c712:	f7ff ff3f 	bl	800c594 <__malloc_lock>
 800c716:	4a1e      	ldr	r2, [pc, #120]	; (800c790 <_free_r+0x94>)
 800c718:	9801      	ldr	r0, [sp, #4]
 800c71a:	6813      	ldr	r3, [r2, #0]
 800c71c:	b933      	cbnz	r3, 800c72c <_free_r+0x30>
 800c71e:	6063      	str	r3, [r4, #4]
 800c720:	6014      	str	r4, [r2, #0]
 800c722:	b003      	add	sp, #12
 800c724:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c728:	f7ff bf3a 	b.w	800c5a0 <__malloc_unlock>
 800c72c:	42a3      	cmp	r3, r4
 800c72e:	d908      	bls.n	800c742 <_free_r+0x46>
 800c730:	6825      	ldr	r5, [r4, #0]
 800c732:	1961      	adds	r1, r4, r5
 800c734:	428b      	cmp	r3, r1
 800c736:	bf01      	itttt	eq
 800c738:	6819      	ldreq	r1, [r3, #0]
 800c73a:	685b      	ldreq	r3, [r3, #4]
 800c73c:	1949      	addeq	r1, r1, r5
 800c73e:	6021      	streq	r1, [r4, #0]
 800c740:	e7ed      	b.n	800c71e <_free_r+0x22>
 800c742:	461a      	mov	r2, r3
 800c744:	685b      	ldr	r3, [r3, #4]
 800c746:	b10b      	cbz	r3, 800c74c <_free_r+0x50>
 800c748:	42a3      	cmp	r3, r4
 800c74a:	d9fa      	bls.n	800c742 <_free_r+0x46>
 800c74c:	6811      	ldr	r1, [r2, #0]
 800c74e:	1855      	adds	r5, r2, r1
 800c750:	42a5      	cmp	r5, r4
 800c752:	d10b      	bne.n	800c76c <_free_r+0x70>
 800c754:	6824      	ldr	r4, [r4, #0]
 800c756:	4421      	add	r1, r4
 800c758:	1854      	adds	r4, r2, r1
 800c75a:	42a3      	cmp	r3, r4
 800c75c:	6011      	str	r1, [r2, #0]
 800c75e:	d1e0      	bne.n	800c722 <_free_r+0x26>
 800c760:	681c      	ldr	r4, [r3, #0]
 800c762:	685b      	ldr	r3, [r3, #4]
 800c764:	6053      	str	r3, [r2, #4]
 800c766:	440c      	add	r4, r1
 800c768:	6014      	str	r4, [r2, #0]
 800c76a:	e7da      	b.n	800c722 <_free_r+0x26>
 800c76c:	d902      	bls.n	800c774 <_free_r+0x78>
 800c76e:	230c      	movs	r3, #12
 800c770:	6003      	str	r3, [r0, #0]
 800c772:	e7d6      	b.n	800c722 <_free_r+0x26>
 800c774:	6825      	ldr	r5, [r4, #0]
 800c776:	1961      	adds	r1, r4, r5
 800c778:	428b      	cmp	r3, r1
 800c77a:	bf04      	itt	eq
 800c77c:	6819      	ldreq	r1, [r3, #0]
 800c77e:	685b      	ldreq	r3, [r3, #4]
 800c780:	6063      	str	r3, [r4, #4]
 800c782:	bf04      	itt	eq
 800c784:	1949      	addeq	r1, r1, r5
 800c786:	6021      	streq	r1, [r4, #0]
 800c788:	6054      	str	r4, [r2, #4]
 800c78a:	e7ca      	b.n	800c722 <_free_r+0x26>
 800c78c:	b003      	add	sp, #12
 800c78e:	bd30      	pop	{r4, r5, pc}
 800c790:	20005094 	.word	0x20005094

0800c794 <_init>:
 800c794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c796:	bf00      	nop
 800c798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c79a:	bc08      	pop	{r3}
 800c79c:	469e      	mov	lr, r3
 800c79e:	4770      	bx	lr

0800c7a0 <_fini>:
 800c7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7a2:	bf00      	nop
 800c7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7a6:	bc08      	pop	{r3}
 800c7a8:	469e      	mov	lr, r3
 800c7aa:	4770      	bx	lr
