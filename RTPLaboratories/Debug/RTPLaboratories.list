
RTPLaboratories.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08008288  08008288  00018288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082cc  080082cc  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080082cc  080082cc  000182cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082d4  080082d4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082d4  080082d4  000182d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082d8  080082d8  000182d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080082dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00004498  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200044f8  200044f8  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001dd8d  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000048e4  00000000  00000000  0003de60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b70  00000000  00000000  00042748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001541  00000000  00000000  000442b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000255cc  00000000  00000000  000457f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000219d8  00000000  00000000  0006adc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dc8c4  00000000  00000000  0008c79d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000777c  00000000  00000000  00169064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  001707e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008270 	.word	0x08008270

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08008270 	.word	0x08008270

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <vHandlerTask>:
/* Stores the handle of the task to which interrupt processing is deferred. */
static TaskHandle_t xHandlerTask = NULL;


static void vHandlerTask( void *pvParameters )
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
/* xMaxExpectedBlockTime is set to be a little longer than the maximum expected
time between events. */
const TickType_t xMaxExpectedBlockTime = xInterruptFrequency + pdMS_TO_TICKS( 10 );
 80004d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004d8:	330a      	adds	r3, #10
 80004da:	60bb      	str	r3, [r7, #8]
	/* As per most tasks, this task is implemented within an infinite loop. */
	for( ;; )
	{
		/* Wait to receive a notification sent directly to this task from the
		interrupt handler. */
		ulEventsToProcess = ulTaskNotifyTake( pdTRUE, xMaxExpectedBlockTime );
 80004dc:	68b9      	ldr	r1, [r7, #8]
 80004de:	2001      	movs	r0, #1
 80004e0:	f006 fc8c 	bl	8006dfc <ulTaskNotifyTake>
 80004e4:	60f8      	str	r0, [r7, #12]
		if( ulEventsToProcess != 0 )
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d0f7      	beq.n	80004dc <vHandlerTask+0x10>
		{
			/* To get here at least one event must have occurred.  Loop here
			until all the pending events have been processed (in this case, just
			print out a message for each event). */
			while( ulEventsToProcess > 0 )
 80004ec:	e007      	b.n	80004fe <vHandlerTask+0x32>
			{
				HAL_GPIO_TogglePin(GPIOD, BLUE_LED);
 80004ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004f2:	4805      	ldr	r0, [pc, #20]	; (8000508 <vHandlerTask+0x3c>)
 80004f4:	f000 ffc5 	bl	8001482 <HAL_GPIO_TogglePin>
				ulEventsToProcess--;
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	3b01      	subs	r3, #1
 80004fc:	60fb      	str	r3, [r7, #12]
			while( ulEventsToProcess > 0 )
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d1f4      	bne.n	80004ee <vHandlerTask+0x22>
		ulEventsToProcess = ulTaskNotifyTake( pdTRUE, xMaxExpectedBlockTime );
 8000504:	e7ea      	b.n	80004dc <vHandlerTask+0x10>
 8000506:	bf00      	nop
 8000508:	40020c00 	.word	0x40020c00

0800050c <vPeriodicTask>:
	}
}
/*-----------------------------------------------------------*/

static void vPeriodicTask( void *pvParameters )
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	for( ;; )
	{
		/* This task is just used to 'simulate' an interrupt.  This is done by
		periodically generating a simulated software interrupt.  Block until it
		is time to generate the software interrupt again. */
		vTaskDelay( xInterruptFrequency );
 8000514:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000518:	4618      	mov	r0, r3
 800051a:	f005 ff7b 	bl	8006414 <vTaskDelay>

		The syntax used to generate a software interrupt is dependent on the
		FreeRTOS port being used.  The syntax used below can only be used with
		the FreeRTOS Windows port, in which such interrupts are only
		simulated. */
		HAL_GPIO_TogglePin(GPIOD, GREEN_LED);
 800051e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000522:	4802      	ldr	r0, [pc, #8]	; (800052c <vPeriodicTask+0x20>)
 8000524:	f000 ffad 	bl	8001482 <HAL_GPIO_TogglePin>
		vTaskDelay( xInterruptFrequency );
 8000528:	e7f4      	b.n	8000514 <vPeriodicTask+0x8>
 800052a:	bf00      	nop
 800052c:	40020c00 	.word	0x40020c00

08000530 <EXTI0_IRQHandler>:
	}
}

void EXTI0_IRQHandler(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken;

	/* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE as
	it will get set to pdTRUE inside the interrupt safe API function if a
	context switch is required. */
	xHigherPriorityTaskWoken = pdFALSE;
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]

	/* Send a notification directly to the handler task. */
	vTaskNotifyGiveFromISR( /* The handle of the task to which the notification
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <EXTI0_IRQHandler+0x30>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	1d3a      	adds	r2, r7, #4
 8000540:	4611      	mov	r1, r2
 8000542:	4618      	mov	r0, r3
 8000544:	f006 fca6 	bl	8006e94 <vTaskNotifyGiveFromISR>

							/* xHigherPriorityTaskWoken is used in the usual
							way. */
							&xHigherPriorityTaskWoken );

  HAL_GPIO_TogglePin(GPIOD, RED_LED);
 8000548:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800054c:	4805      	ldr	r0, [pc, #20]	; (8000564 <EXTI0_IRQHandler+0x34>)
 800054e:	f000 ff98 	bl	8001482 <HAL_GPIO_TogglePin>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000552:	2001      	movs	r0, #1
 8000554:	f000 ffb0 	bl	80014b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	2000007c 	.word	0x2000007c
 8000564:	40020c00 	.word	0x40020c00

08000568 <application24>:


void application24(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af02      	add	r7, sp, #8
	processing is deferred, and so is the task that will be synchronized
	with the interrupt.  The handler task is created with a high priority to
	ensure it runs immediately after the interrupt exits.  In this case a
	priority of 3 is chosen.  The handle of the task is saved for use by the
	ISR. */
	xTaskCreate( vHandlerTask, "Handler", 1000, NULL, 3, &xHandlerTask );
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <application24+0x38>)
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	2303      	movs	r3, #3
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2300      	movs	r3, #0
 8000578:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800057c:	4909      	ldr	r1, [pc, #36]	; (80005a4 <application24+0x3c>)
 800057e:	480a      	ldr	r0, [pc, #40]	; (80005a8 <application24+0x40>)
 8000580:	f005 fdfe 	bl	8006180 <xTaskCreate>

	/* Create the task that will periodically generate a software interrupt.
	This is created with a priority below the handler task to ensure it will
	get preempted each time the handler task exits the Blocked state. */
	xTaskCreate( vPeriodicTask, "Periodic", 1000, NULL, 1, NULL );
 8000584:	2300      	movs	r3, #0
 8000586:	9301      	str	r3, [sp, #4]
 8000588:	2301      	movs	r3, #1
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2300      	movs	r3, #0
 800058e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000592:	4906      	ldr	r1, [pc, #24]	; (80005ac <application24+0x44>)
 8000594:	4806      	ldr	r0, [pc, #24]	; (80005b0 <application24+0x48>)
 8000596:	f005 fdf3 	bl	8006180 <xTaskCreate>

}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	2000007c 	.word	0x2000007c
 80005a4:	08008288 	.word	0x08008288
 80005a8:	080004cd 	.word	0x080004cd
 80005ac:	08008290 	.word	0x08008290
 80005b0:	0800050d 	.word	0x0800050d

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 fc8a 	bl	8000ed0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f810 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 f930 	bl	8000824 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005c4:	f000 f876 	bl	80006b4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005c8:	f000 f8a2 	bl	8000710 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005cc:	f000 f8d0 	bl	8000770 <MX_SPI1_Init>
  MX_TIM11_Init();
 80005d0:	f000 f904 	bl	80007dc <MX_TIM11_Init>
  /* definition and creation of defaultTask */


  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	application24();
 80005d4:	f7ff ffc8 	bl	8000568 <application24>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 80005d8:	f005 ff50 	bl	800647c <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80005dc:	e7fe      	b.n	80005dc <main+0x28>
	...

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2230      	movs	r2, #48	; 0x30
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f007 fd60 	bl	80080b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	4b28      	ldr	r3, [pc, #160]	; (80006ac <SystemClock_Config+0xcc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4a27      	ldr	r2, [pc, #156]	; (80006ac <SystemClock_Config+0xcc>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	; 0x40
 8000614:	4b25      	ldr	r3, [pc, #148]	; (80006ac <SystemClock_Config+0xcc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <SystemClock_Config+0xd0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a21      	ldr	r2, [pc, #132]	; (80006b0 <SystemClock_Config+0xd0>)
 800062a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <SystemClock_Config+0xd0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800063c:	2301      	movs	r3, #1
 800063e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000640:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000650:	2308      	movs	r3, #8
 8000652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000654:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000658:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065a:	2302      	movs	r3, #2
 800065c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800065e:	2307      	movs	r3, #7
 8000660:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	4618      	mov	r0, r3
 8000668:	f003 faba 	bl	8003be0 <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000672:	f000 f9ef 	bl	8000a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2302      	movs	r3, #2
 800067c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000682:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000686:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	2105      	movs	r1, #5
 8000694:	4618      	mov	r0, r3
 8000696:	f003 fd1b 	bl	80040d0 <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006a0:	f000 f9d8 	bl	8000a54 <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	3750      	adds	r7, #80	; 0x50
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_I2C1_Init+0x50>)
 80006ba:	4a13      	ldr	r2, [pc, #76]	; (8000708 <MX_I2C1_Init+0x54>)
 80006bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_I2C1_Init+0x50>)
 80006c0:	4a12      	ldr	r2, [pc, #72]	; (800070c <MX_I2C1_Init+0x58>)
 80006c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_I2C1_Init+0x50>)
 80006d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <MX_I2C1_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_I2C1_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <MX_I2C1_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_I2C1_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f0:	4804      	ldr	r0, [pc, #16]	; (8000704 <MX_I2C1_Init+0x50>)
 80006f2:	f002 fc91 	bl	8003018 <HAL_I2C_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006fc:	f000 f9aa 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000080 	.word	0x20000080
 8000708:	40005400 	.word	0x40005400
 800070c:	000186a0 	.word	0x000186a0

08000710 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MX_I2S3_Init+0x54>)
 8000716:	4a14      	ldr	r2, [pc, #80]	; (8000768 <MX_I2S3_Init+0x58>)
 8000718:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_I2S3_Init+0x54>)
 800071c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000720:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <MX_I2S3_Init+0x54>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000728:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_I2S3_Init+0x54>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <MX_I2S3_Init+0x54>)
 8000730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000734:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MX_I2S3_Init+0x54>)
 8000738:	4a0c      	ldr	r2, [pc, #48]	; (800076c <MX_I2S3_Init+0x5c>)
 800073a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_I2S3_Init+0x54>)
 800073e:	2200      	movs	r2, #0
 8000740:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <MX_I2S3_Init+0x54>)
 8000744:	2200      	movs	r2, #0
 8000746:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_I2S3_Init+0x54>)
 800074a:	2200      	movs	r2, #0
 800074c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_I2S3_Init+0x54>)
 8000750:	f002 fda6 	bl	80032a0 <HAL_I2S_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800075a:	f000 f97b 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000d4 	.word	0x200000d4
 8000768:	40003c00 	.word	0x40003c00
 800076c:	00017700 	.word	0x00017700

08000770 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000774:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_SPI1_Init+0x64>)
 8000776:	4a18      	ldr	r2, [pc, #96]	; (80007d8 <MX_SPI1_Init+0x68>)
 8000778:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800077a:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <MX_SPI1_Init+0x64>)
 800077c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000780:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_SPI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_SPI1_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_SPI1_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_SPI1_Init+0x64>)
 800079c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_SPI1_Init+0x64>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <MX_SPI1_Init+0x64>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_SPI1_Init+0x64>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <MX_SPI1_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_SPI1_Init+0x64>)
 80007bc:	220a      	movs	r2, #10
 80007be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_SPI1_Init+0x64>)
 80007c2:	f004 f819 	bl	80047f8 <HAL_SPI_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007cc:	f000 f942 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	2000011c 	.word	0x2000011c
 80007d8:	40013000 	.word	0x40013000

080007dc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80007e0:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_TIM11_Init+0x40>)
 80007e2:	4a0f      	ldr	r2, [pc, #60]	; (8000820 <MX_TIM11_Init+0x44>)
 80007e4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <MX_TIM11_Init+0x40>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ec:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_TIM11_Init+0x40>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <MX_TIM11_Init+0x40>)
 80007f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007f8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_TIM11_Init+0x40>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_TIM11_Init+0x40>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_TIM11_Init+0x40>)
 8000808:	f004 f87f 	bl	800490a <HAL_TIM_Base_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000812:	f000 f91f 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000174 	.word	0x20000174
 8000820:	40014800 	.word	0x40014800

08000824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08c      	sub	sp, #48	; 0x30
 8000828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	61bb      	str	r3, [r7, #24]
 800083e:	4b76      	ldr	r3, [pc, #472]	; (8000a18 <MX_GPIO_Init+0x1f4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a75      	ldr	r2, [pc, #468]	; (8000a18 <MX_GPIO_Init+0x1f4>)
 8000844:	f043 0310 	orr.w	r3, r3, #16
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b73      	ldr	r3, [pc, #460]	; (8000a18 <MX_GPIO_Init+0x1f4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0310 	and.w	r3, r3, #16
 8000852:	61bb      	str	r3, [r7, #24]
 8000854:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
 800085a:	4b6f      	ldr	r3, [pc, #444]	; (8000a18 <MX_GPIO_Init+0x1f4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a6e      	ldr	r2, [pc, #440]	; (8000a18 <MX_GPIO_Init+0x1f4>)
 8000860:	f043 0304 	orr.w	r3, r3, #4
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b6c      	ldr	r3, [pc, #432]	; (8000a18 <MX_GPIO_Init+0x1f4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0304 	and.w	r3, r3, #4
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	4b68      	ldr	r3, [pc, #416]	; (8000a18 <MX_GPIO_Init+0x1f4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a67      	ldr	r2, [pc, #412]	; (8000a18 <MX_GPIO_Init+0x1f4>)
 800087c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b65      	ldr	r3, [pc, #404]	; (8000a18 <MX_GPIO_Init+0x1f4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b61      	ldr	r3, [pc, #388]	; (8000a18 <MX_GPIO_Init+0x1f4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a60      	ldr	r2, [pc, #384]	; (8000a18 <MX_GPIO_Init+0x1f4>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b5e      	ldr	r3, [pc, #376]	; (8000a18 <MX_GPIO_Init+0x1f4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	4b5a      	ldr	r3, [pc, #360]	; (8000a18 <MX_GPIO_Init+0x1f4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a59      	ldr	r2, [pc, #356]	; (8000a18 <MX_GPIO_Init+0x1f4>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b57      	ldr	r3, [pc, #348]	; (8000a18 <MX_GPIO_Init+0x1f4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b53      	ldr	r3, [pc, #332]	; (8000a18 <MX_GPIO_Init+0x1f4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a52      	ldr	r2, [pc, #328]	; (8000a18 <MX_GPIO_Init+0x1f4>)
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b50      	ldr	r3, [pc, #320]	; (8000a18 <MX_GPIO_Init+0x1f4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0308 	and.w	r3, r3, #8
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2108      	movs	r1, #8
 80008e6:	484d      	ldr	r0, [pc, #308]	; (8000a1c <MX_GPIO_Init+0x1f8>)
 80008e8:	f000 fdb2 	bl	8001450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	2101      	movs	r1, #1
 80008f0:	484b      	ldr	r0, [pc, #300]	; (8000a20 <MX_GPIO_Init+0x1fc>)
 80008f2:	f000 fdad 	bl	8001450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008f6:	2200      	movs	r2, #0
 80008f8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008fc:	4849      	ldr	r0, [pc, #292]	; (8000a24 <MX_GPIO_Init+0x200>)
 80008fe:	f000 fda7 	bl	8001450 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000902:	2308      	movs	r3, #8
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4840      	ldr	r0, [pc, #256]	; (8000a1c <MX_GPIO_Init+0x1f8>)
 800091a:	f000 fbfd 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800091e:	2301      	movs	r3, #1
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	483a      	ldr	r0, [pc, #232]	; (8000a20 <MX_GPIO_Init+0x1fc>)
 8000936:	f000 fbef 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800093a:	2308      	movs	r3, #8
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800094a:	2305      	movs	r3, #5
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4832      	ldr	r0, [pc, #200]	; (8000a20 <MX_GPIO_Init+0x1fc>)
 8000956:	f000 fbdf 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800095a:	2301      	movs	r3, #1
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800095e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	482e      	ldr	r0, [pc, #184]	; (8000a28 <MX_GPIO_Init+0x204>)
 8000970:	f000 fbd2 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000974:	2304      	movs	r3, #4
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	4829      	ldr	r0, [pc, #164]	; (8000a2c <MX_GPIO_Init+0x208>)
 8000988:	f000 fbc6 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800098c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800099e:	2305      	movs	r3, #5
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4820      	ldr	r0, [pc, #128]	; (8000a2c <MX_GPIO_Init+0x208>)
 80009aa:	f000 fbb5 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ae:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009b2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	4817      	ldr	r0, [pc, #92]	; (8000a24 <MX_GPIO_Init+0x200>)
 80009c8:	f000 fba6 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009cc:	2320      	movs	r3, #32
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	4811      	ldr	r0, [pc, #68]	; (8000a24 <MX_GPIO_Init+0x200>)
 80009e0:	f000 fb9a 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009e4:	2302      	movs	r3, #2
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009e8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4808      	ldr	r0, [pc, #32]	; (8000a1c <MX_GPIO_Init+0x1f8>)
 80009fa:	f000 fb8d 	bl	8001118 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2105      	movs	r1, #5
 8000a02:	2006      	movs	r0, #6
 8000a04:	f000 fb5e 	bl	80010c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a08:	2006      	movs	r0, #6
 8000a0a:	f000 fb77 	bl	80010fc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a0e:	bf00      	nop
 8000a10:	3730      	adds	r7, #48	; 0x30
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40020800 	.word	0x40020800
 8000a24:	40020c00 	.word	0x40020c00
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	40020400 	.word	0x40020400

08000a30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d101      	bne.n	8000a46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a42:	f000 fa67 	bl	8000f14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40010000 	.word	0x40010000

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
}
 8000a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a5c:	e7fe      	b.n	8000a5c <Error_Handler+0x8>
	...

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_MspInit+0x54>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	4a11      	ldr	r2, [pc, #68]	; (8000ab4 <HAL_MspInit+0x54>)
 8000a70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a74:	6453      	str	r3, [r2, #68]	; 0x44
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <HAL_MspInit+0x54>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <HAL_MspInit+0x54>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <HAL_MspInit+0x54>)
 8000a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a90:	6413      	str	r3, [r2, #64]	; 0x40
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <HAL_MspInit+0x54>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	210f      	movs	r1, #15
 8000aa2:	f06f 0001 	mvn.w	r0, #1
 8000aa6:	f000 fb0d 	bl	80010c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a19      	ldr	r2, [pc, #100]	; (8000b3c <HAL_I2C_MspInit+0x84>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d12c      	bne.n	8000b34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <HAL_I2C_MspInit+0x88>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a17      	ldr	r2, [pc, #92]	; (8000b40 <HAL_I2C_MspInit+0x88>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <HAL_I2C_MspInit+0x88>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000af6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000afc:	2312      	movs	r3, #18
 8000afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	480c      	ldr	r0, [pc, #48]	; (8000b44 <HAL_I2C_MspInit+0x8c>)
 8000b14:	f000 fb00 	bl	8001118 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_I2C_MspInit+0x88>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <HAL_I2C_MspInit+0x88>)
 8000b22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b26:	6413      	str	r3, [r2, #64]	; 0x40
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_I2C_MspInit+0x88>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	; 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40005400 	.word	0x40005400
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020400 	.word	0x40020400

08000b48 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08e      	sub	sp, #56	; 0x38
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a31      	ldr	r2, [pc, #196]	; (8000c38 <HAL_I2S_MspInit+0xf0>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d15a      	bne.n	8000c2e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b7c:	23c0      	movs	r3, #192	; 0xc0
 8000b7e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f003 fcf3 	bl	8004574 <HAL_RCCEx_PeriphCLKConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b94:	f7ff ff5e 	bl	8000a54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <HAL_I2S_MspInit+0xf4>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba0:	4a26      	ldr	r2, [pc, #152]	; (8000c3c <HAL_I2S_MspInit+0xf4>)
 8000ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba8:	4b24      	ldr	r3, [pc, #144]	; (8000c3c <HAL_I2S_MspInit+0xf4>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <HAL_I2S_MspInit+0xf4>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	4a1f      	ldr	r2, [pc, #124]	; (8000c3c <HAL_I2S_MspInit+0xf4>)
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <HAL_I2S_MspInit+0xf4>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <HAL_I2S_MspInit+0xf4>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	4a18      	ldr	r2, [pc, #96]	; (8000c3c <HAL_I2S_MspInit+0xf4>)
 8000bda:	f043 0304 	orr.w	r3, r3, #4
 8000bde:	6313      	str	r3, [r2, #48]	; 0x30
 8000be0:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <HAL_I2S_MspInit+0xf4>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bec:	2310      	movs	r3, #16
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bfc:	2306      	movs	r3, #6
 8000bfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c04:	4619      	mov	r1, r3
 8000c06:	480e      	ldr	r0, [pc, #56]	; (8000c40 <HAL_I2S_MspInit+0xf8>)
 8000c08:	f000 fa86 	bl	8001118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c0c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c1e:	2306      	movs	r3, #6
 8000c20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	4806      	ldr	r0, [pc, #24]	; (8000c44 <HAL_I2S_MspInit+0xfc>)
 8000c2a:	f000 fa75 	bl	8001118 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c2e:	bf00      	nop
 8000c30:	3738      	adds	r7, #56	; 0x38
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40003c00 	.word	0x40003c00
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020000 	.word	0x40020000
 8000c44:	40020800 	.word	0x40020800

08000c48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a19      	ldr	r2, [pc, #100]	; (8000ccc <HAL_SPI_MspInit+0x84>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d12b      	bne.n	8000cc2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <HAL_SPI_MspInit+0x88>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	4a17      	ldr	r2, [pc, #92]	; (8000cd0 <HAL_SPI_MspInit+0x88>)
 8000c74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c78:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <HAL_SPI_MspInit+0x88>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HAL_SPI_MspInit+0x88>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a10      	ldr	r2, [pc, #64]	; (8000cd0 <HAL_SPI_MspInit+0x88>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_SPI_MspInit+0x88>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ca2:	23e0      	movs	r3, #224	; 0xe0
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cb2:	2305      	movs	r3, #5
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <HAL_SPI_MspInit+0x8c>)
 8000cbe:	f000 fa2b 	bl	8001118 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cc2:	bf00      	nop
 8000cc4:	3728      	adds	r7, #40	; 0x28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40013000 	.word	0x40013000
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020000 	.word	0x40020000

08000cd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <HAL_TIM_Base_MspInit+0x3c>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d10d      	bne.n	8000d06 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_TIM_Base_MspInit+0x40>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	4a09      	ldr	r2, [pc, #36]	; (8000d18 <HAL_TIM_Base_MspInit+0x40>)
 8000cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <HAL_TIM_Base_MspInit+0x40>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	40014800 	.word	0x40014800
 8000d18:	40023800 	.word	0x40023800

08000d1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08c      	sub	sp, #48	; 0x30
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	4b2f      	ldr	r3, [pc, #188]	; (8000df0 <HAL_InitTick+0xd4>)
 8000d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d34:	4a2e      	ldr	r2, [pc, #184]	; (8000df0 <HAL_InitTick+0xd4>)
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3c:	4b2c      	ldr	r3, [pc, #176]	; (8000df0 <HAL_InitTick+0xd4>)
 8000d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d48:	f107 020c 	add.w	r2, r7, #12
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	4611      	mov	r1, r2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f003 fbdc 	bl	8004510 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d58:	f003 fbc6 	bl	80044e8 <HAL_RCC_GetPCLK2Freq>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d64:	4a23      	ldr	r2, [pc, #140]	; (8000df4 <HAL_InitTick+0xd8>)
 8000d66:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6a:	0c9b      	lsrs	r3, r3, #18
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d70:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <HAL_InitTick+0xdc>)
 8000d72:	4a22      	ldr	r2, [pc, #136]	; (8000dfc <HAL_InitTick+0xe0>)
 8000d74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d76:	4b20      	ldr	r3, [pc, #128]	; (8000df8 <HAL_InitTick+0xdc>)
 8000d78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d7c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d7e:	4a1e      	ldr	r2, [pc, #120]	; (8000df8 <HAL_InitTick+0xdc>)
 8000d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d82:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d84:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <HAL_InitTick+0xdc>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8a:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <HAL_InitTick+0xdc>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d90:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <HAL_InitTick+0xdc>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000d96:	4818      	ldr	r0, [pc, #96]	; (8000df8 <HAL_InitTick+0xdc>)
 8000d98:	f003 fdb7 	bl	800490a <HAL_TIM_Base_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000da2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d11b      	bne.n	8000de2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000daa:	4813      	ldr	r0, [pc, #76]	; (8000df8 <HAL_InitTick+0xdc>)
 8000dac:	f003 fdfc 	bl	80049a8 <HAL_TIM_Base_Start_IT>
 8000db0:	4603      	mov	r3, r0
 8000db2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000db6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d111      	bne.n	8000de2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000dbe:	2019      	movs	r0, #25
 8000dc0:	f000 f99c 	bl	80010fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b0f      	cmp	r3, #15
 8000dc8:	d808      	bhi.n	8000ddc <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	2019      	movs	r0, #25
 8000dd0:	f000 f978 	bl	80010c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <HAL_InitTick+0xe4>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	e002      	b.n	8000de2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000de2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3730      	adds	r7, #48	; 0x30
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800
 8000df4:	431bde83 	.word	0x431bde83
 8000df8:	200001bc 	.word	0x200001bc
 8000dfc:	40010000 	.word	0x40010000
 8000e00:	20000004 	.word	0x20000004

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e08:	e7fe      	b.n	8000e08 <NMI_Handler+0x4>

08000e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <MemManage_Handler+0x4>

08000e16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e36:	f003 fe27 	bl	8004a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200001bc 	.word	0x200001bc

08000e44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <OTG_FS_IRQHandler+0x10>)
 8000e4a:	f000 fb58 	bl	80014fe <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20003fd8 	.word	0x20003fd8

08000e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <SystemInit+0x20>)
 8000e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e62:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <SystemInit+0x20>)
 8000e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e80:	f7ff ffea 	bl	8000e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e84:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e86:	490d      	ldr	r1, [pc, #52]	; (8000ebc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e88:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e8c:	e002      	b.n	8000e94 <LoopCopyDataInit>

08000e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e92:	3304      	adds	r3, #4

08000e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e98:	d3f9      	bcc.n	8000e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e9c:	4c0a      	ldr	r4, [pc, #40]	; (8000ec8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea0:	e001      	b.n	8000ea6 <LoopFillZerobss>

08000ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea4:	3204      	adds	r2, #4

08000ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea8:	d3fb      	bcc.n	8000ea2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eaa:	f007 f961 	bl	8008170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eae:	f7ff fb81 	bl	80005b4 <main>
  bx  lr    
 8000eb2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000eb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ebc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ec0:	080082dc 	.word	0x080082dc
  ldr r2, =_sbss
 8000ec4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ec8:	200044f8 	.word	0x200044f8

08000ecc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ecc:	e7fe      	b.n	8000ecc <ADC_IRQHandler>
	...

08000ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <HAL_Init+0x40>)
 8000eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <HAL_Init+0x40>)
 8000ee6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <HAL_Init+0x40>)
 8000ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef8:	2003      	movs	r0, #3
 8000efa:	f000 f8d8 	bl	80010ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efe:	200f      	movs	r0, #15
 8000f00:	f7ff ff0c 	bl	8000d1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f04:	f7ff fdac 	bl	8000a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023c00 	.word	0x40023c00

08000f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_IncTick+0x20>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x24>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <HAL_IncTick+0x24>)
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000204 	.word	0x20000204

08000f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <HAL_GetTick+0x14>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000204 	.word	0x20000204

08000f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f70:	4013      	ands	r3, r2
 8000f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f86:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	60d3      	str	r3, [r2, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	f003 0307 	and.w	r3, r3, #7
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	db0b      	blt.n	8000fe2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	f003 021f 	and.w	r2, r3, #31
 8000fd0:	4907      	ldr	r1, [pc, #28]	; (8000ff0 <__NVIC_EnableIRQ+0x38>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	095b      	lsrs	r3, r3, #5
 8000fd8:	2001      	movs	r0, #1
 8000fda:	fa00 f202 	lsl.w	r2, r0, r2
 8000fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000e100 	.word	0xe000e100

08000ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	db0a      	blt.n	800101e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	490c      	ldr	r1, [pc, #48]	; (8001040 <__NVIC_SetPriority+0x4c>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	0112      	lsls	r2, r2, #4
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	440b      	add	r3, r1
 8001018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800101c:	e00a      	b.n	8001034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4908      	ldr	r1, [pc, #32]	; (8001044 <__NVIC_SetPriority+0x50>)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	3b04      	subs	r3, #4
 800102c:	0112      	lsls	r2, r2, #4
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	440b      	add	r3, r1
 8001032:	761a      	strb	r2, [r3, #24]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000e100 	.word	0xe000e100
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f1c3 0307 	rsb	r3, r3, #7
 8001062:	2b04      	cmp	r3, #4
 8001064:	bf28      	it	cs
 8001066:	2304      	movcs	r3, #4
 8001068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3304      	adds	r3, #4
 800106e:	2b06      	cmp	r3, #6
 8001070:	d902      	bls.n	8001078 <NVIC_EncodePriority+0x30>
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3b03      	subs	r3, #3
 8001076:	e000      	b.n	800107a <NVIC_EncodePriority+0x32>
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	f04f 32ff 	mov.w	r2, #4294967295
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43da      	mvns	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	401a      	ands	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	43d9      	mvns	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	4313      	orrs	r3, r2
         );
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3724      	adds	r7, #36	; 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ff4c 	bl	8000f54 <__NVIC_SetPriorityGrouping>
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d6:	f7ff ff61 	bl	8000f9c <__NVIC_GetPriorityGrouping>
 80010da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	68b9      	ldr	r1, [r7, #8]
 80010e0:	6978      	ldr	r0, [r7, #20]
 80010e2:	f7ff ffb1 	bl	8001048 <NVIC_EncodePriority>
 80010e6:	4602      	mov	r2, r0
 80010e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ec:	4611      	mov	r1, r2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff80 	bl	8000ff4 <__NVIC_SetPriority>
}
 80010f4:	bf00      	nop
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff54 	bl	8000fb8 <__NVIC_EnableIRQ>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
 8001132:	e16b      	b.n	800140c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001134:	2201      	movs	r2, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	429a      	cmp	r2, r3
 800114e:	f040 815a 	bne.w	8001406 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	2b01      	cmp	r3, #1
 800115c:	d005      	beq.n	800116a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001166:	2b02      	cmp	r3, #2
 8001168:	d130      	bne.n	80011cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	2203      	movs	r2, #3
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	68da      	ldr	r2, [r3, #12]
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a0:	2201      	movs	r2, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	091b      	lsrs	r3, r3, #4
 80011b6:	f003 0201 	and.w	r2, r3, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d017      	beq.n	8001208 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d123      	bne.n	800125c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	08da      	lsrs	r2, r3, #3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3208      	adds	r2, #8
 800121c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	691a      	ldr	r2, [r3, #16]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	69b9      	ldr	r1, [r7, #24]
 8001258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0203 	and.w	r2, r3, #3
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 80b4 	beq.w	8001406 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b60      	ldr	r3, [pc, #384]	; (8001424 <HAL_GPIO_Init+0x30c>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	4a5f      	ldr	r2, [pc, #380]	; (8001424 <HAL_GPIO_Init+0x30c>)
 80012a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ac:	6453      	str	r3, [r2, #68]	; 0x44
 80012ae:	4b5d      	ldr	r3, [pc, #372]	; (8001424 <HAL_GPIO_Init+0x30c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ba:	4a5b      	ldr	r2, [pc, #364]	; (8001428 <HAL_GPIO_Init+0x310>)
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	3302      	adds	r3, #2
 80012c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	220f      	movs	r2, #15
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a52      	ldr	r2, [pc, #328]	; (800142c <HAL_GPIO_Init+0x314>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d02b      	beq.n	800133e <HAL_GPIO_Init+0x226>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a51      	ldr	r2, [pc, #324]	; (8001430 <HAL_GPIO_Init+0x318>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d025      	beq.n	800133a <HAL_GPIO_Init+0x222>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a50      	ldr	r2, [pc, #320]	; (8001434 <HAL_GPIO_Init+0x31c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d01f      	beq.n	8001336 <HAL_GPIO_Init+0x21e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4f      	ldr	r2, [pc, #316]	; (8001438 <HAL_GPIO_Init+0x320>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d019      	beq.n	8001332 <HAL_GPIO_Init+0x21a>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4e      	ldr	r2, [pc, #312]	; (800143c <HAL_GPIO_Init+0x324>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d013      	beq.n	800132e <HAL_GPIO_Init+0x216>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4d      	ldr	r2, [pc, #308]	; (8001440 <HAL_GPIO_Init+0x328>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d00d      	beq.n	800132a <HAL_GPIO_Init+0x212>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4c      	ldr	r2, [pc, #304]	; (8001444 <HAL_GPIO_Init+0x32c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d007      	beq.n	8001326 <HAL_GPIO_Init+0x20e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4b      	ldr	r2, [pc, #300]	; (8001448 <HAL_GPIO_Init+0x330>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d101      	bne.n	8001322 <HAL_GPIO_Init+0x20a>
 800131e:	2307      	movs	r3, #7
 8001320:	e00e      	b.n	8001340 <HAL_GPIO_Init+0x228>
 8001322:	2308      	movs	r3, #8
 8001324:	e00c      	b.n	8001340 <HAL_GPIO_Init+0x228>
 8001326:	2306      	movs	r3, #6
 8001328:	e00a      	b.n	8001340 <HAL_GPIO_Init+0x228>
 800132a:	2305      	movs	r3, #5
 800132c:	e008      	b.n	8001340 <HAL_GPIO_Init+0x228>
 800132e:	2304      	movs	r3, #4
 8001330:	e006      	b.n	8001340 <HAL_GPIO_Init+0x228>
 8001332:	2303      	movs	r3, #3
 8001334:	e004      	b.n	8001340 <HAL_GPIO_Init+0x228>
 8001336:	2302      	movs	r3, #2
 8001338:	e002      	b.n	8001340 <HAL_GPIO_Init+0x228>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <HAL_GPIO_Init+0x228>
 800133e:	2300      	movs	r3, #0
 8001340:	69fa      	ldr	r2, [r7, #28]
 8001342:	f002 0203 	and.w	r2, r2, #3
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	4093      	lsls	r3, r2
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001350:	4935      	ldr	r1, [pc, #212]	; (8001428 <HAL_GPIO_Init+0x310>)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	3302      	adds	r3, #2
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135e:	4b3b      	ldr	r3, [pc, #236]	; (800144c <HAL_GPIO_Init+0x334>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001382:	4a32      	ldr	r2, [pc, #200]	; (800144c <HAL_GPIO_Init+0x334>)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001388:	4b30      	ldr	r3, [pc, #192]	; (800144c <HAL_GPIO_Init+0x334>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013ac:	4a27      	ldr	r2, [pc, #156]	; (800144c <HAL_GPIO_Init+0x334>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013b2:	4b26      	ldr	r3, [pc, #152]	; (800144c <HAL_GPIO_Init+0x334>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013d6:	4a1d      	ldr	r2, [pc, #116]	; (800144c <HAL_GPIO_Init+0x334>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <HAL_GPIO_Init+0x334>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001400:	4a12      	ldr	r2, [pc, #72]	; (800144c <HAL_GPIO_Init+0x334>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3301      	adds	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	2b0f      	cmp	r3, #15
 8001410:	f67f ae90 	bls.w	8001134 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3724      	adds	r7, #36	; 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800
 8001428:	40013800 	.word	0x40013800
 800142c:	40020000 	.word	0x40020000
 8001430:	40020400 	.word	0x40020400
 8001434:	40020800 	.word	0x40020800
 8001438:	40020c00 	.word	0x40020c00
 800143c:	40021000 	.word	0x40021000
 8001440:	40021400 	.word	0x40021400
 8001444:	40021800 	.word	0x40021800
 8001448:	40021c00 	.word	0x40021c00
 800144c:	40013c00 	.word	0x40013c00

08001450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	807b      	strh	r3, [r7, #2]
 800145c:	4613      	mov	r3, r2
 800145e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001460:	787b      	ldrb	r3, [r7, #1]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001466:	887a      	ldrh	r2, [r7, #2]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800146c:	e003      	b.n	8001476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800146e:	887b      	ldrh	r3, [r7, #2]
 8001470:	041a      	lsls	r2, r3, #16
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	619a      	str	r2, [r3, #24]
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001482:	b480      	push	{r7}
 8001484:	b085      	sub	sp, #20
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	460b      	mov	r3, r1
 800148c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001494:	887a      	ldrh	r2, [r7, #2]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4013      	ands	r3, r2
 800149a:	041a      	lsls	r2, r3, #16
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	43d9      	mvns	r1, r3
 80014a0:	887b      	ldrh	r3, [r7, #2]
 80014a2:	400b      	ands	r3, r1
 80014a4:	431a      	orrs	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	619a      	str	r2, [r3, #24]
}
 80014aa:	bf00      	nop
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014c2:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014c4:	695a      	ldr	r2, [r3, #20]
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	4013      	ands	r3, r2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d006      	beq.n	80014dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014ce:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f806 	bl	80014e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40013c00 	.word	0x40013c00

080014e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f003 fd9d 	bl	8005054 <USB_GetMode>
 800151a:	4603      	mov	r3, r0
 800151c:	2b01      	cmp	r3, #1
 800151e:	f040 80fb 	bne.w	8001718 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f003 fd60 	bl	8004fec <USB_ReadInterrupts>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 80f1 	beq.w	8001716 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f003 fd57 	bl	8004fec <USB_ReadInterrupts>
 800153e:	4603      	mov	r3, r0
 8001540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001544:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001548:	d104      	bne.n	8001554 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001552:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f003 fd47 	bl	8004fec <USB_ReadInterrupts>
 800155e:	4603      	mov	r3, r0
 8001560:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001564:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001568:	d104      	bne.n	8001574 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001572:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f003 fd37 	bl	8004fec <USB_ReadInterrupts>
 800157e:	4603      	mov	r3, r0
 8001580:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001584:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001588:	d104      	bne.n	8001594 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001592:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f003 fd27 	bl	8004fec <USB_ReadInterrupts>
 800159e:	4603      	mov	r3, r0
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d103      	bne.n	80015b0 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2202      	movs	r2, #2
 80015ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f003 fd19 	bl	8004fec <USB_ReadInterrupts>
 80015ba:	4603      	mov	r3, r0
 80015bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015c4:	d120      	bne.n	8001608 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80015ce:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d113      	bne.n	8001608 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80015e0:	2110      	movs	r1, #16
 80015e2:	6938      	ldr	r0, [r7, #16]
 80015e4:	f003 fc4a 	bl	8004e7c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80015e8:	6938      	ldr	r0, [r7, #16]
 80015ea:	f003 fc79 	bl	8004ee0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	7a5b      	ldrb	r3, [r3, #9]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d105      	bne.n	8001602 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2101      	movs	r1, #1
 80015fc:	4618      	mov	r0, r3
 80015fe:	f003 fd37 	bl	8005070 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f006 fcc6 	bl	8007f94 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f003 fced 	bl	8004fec <USB_ReadInterrupts>
 8001612:	4603      	mov	r3, r0
 8001614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800161c:	d102      	bne.n	8001624 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f001 fc87 	bl	8002f32 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f003 fcdf 	bl	8004fec <USB_ReadInterrupts>
 800162e:	4603      	mov	r3, r0
 8001630:	f003 0308 	and.w	r3, r3, #8
 8001634:	2b08      	cmp	r3, #8
 8001636:	d106      	bne.n	8001646 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f006 fc8f 	bl	8007f5c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2208      	movs	r2, #8
 8001644:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f003 fcce 	bl	8004fec <USB_ReadInterrupts>
 8001650:	4603      	mov	r3, r0
 8001652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001656:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800165a:	d139      	bne.n	80016d0 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f003 fd42 	bl	80050ea <USB_HC_ReadInterrupt>
 8001666:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	e025      	b.n	80016ba <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	68ba      	ldr	r2, [r7, #8]
 8001676:	fa22 f303 	lsr.w	r3, r2, r3
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d018      	beq.n	80016b4 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	015a      	lsls	r2, r3, #5
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4413      	add	r3, r2
 800168a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001698:	d106      	bne.n	80016a8 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	4619      	mov	r1, r3
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 f859 	bl	8001758 <HCD_HC_IN_IRQHandler>
 80016a6:	e005      	b.n	80016b4 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	4619      	mov	r1, r3
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 febb 	bl	800242a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	3301      	adds	r3, #1
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	795b      	ldrb	r3, [r3, #5]
 80016be:	461a      	mov	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d3d3      	bcc.n	800166e <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f003 fc89 	bl	8004fec <USB_ReadInterrupts>
 80016da:	4603      	mov	r3, r0
 80016dc:	f003 0310 	and.w	r3, r3, #16
 80016e0:	2b10      	cmp	r3, #16
 80016e2:	d101      	bne.n	80016e8 <HAL_HCD_IRQHandler+0x1ea>
 80016e4:	2301      	movs	r3, #1
 80016e6:	e000      	b.n	80016ea <HAL_HCD_IRQHandler+0x1ec>
 80016e8:	2300      	movs	r3, #0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d014      	beq.n	8001718 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	699a      	ldr	r2, [r3, #24]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0210 	bic.w	r2, r2, #16
 80016fc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f001 fb38 	bl	8002d74 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	699a      	ldr	r2, [r3, #24]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0210 	orr.w	r2, r2, #16
 8001712:	619a      	str	r2, [r3, #24]
 8001714:	e000      	b.n	8001718 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001716:	bf00      	nop
    }
  }
}
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800172c:	2b01      	cmp	r3, #1
 800172e:	d101      	bne.n	8001734 <HAL_HCD_Stop+0x16>
 8001730:	2302      	movs	r3, #2
 8001732:	e00d      	b.n	8001750 <HAL_HCD_Stop+0x32>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f003 fe03 	bl	800534c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	78fa      	ldrb	r2, [r7, #3]
 8001774:	4611      	mov	r1, r2
 8001776:	4618      	mov	r0, r3
 8001778:	f003 fc4b 	bl	8005012 <USB_ReadChInterrupts>
 800177c:	4603      	mov	r3, r0
 800177e:	f003 0304 	and.w	r3, r3, #4
 8001782:	2b04      	cmp	r3, #4
 8001784:	d11a      	bne.n	80017bc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	015a      	lsls	r2, r3, #5
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	4413      	add	r3, r2
 800178e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001792:	461a      	mov	r2, r3
 8001794:	2304      	movs	r3, #4
 8001796:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001798:	78fa      	ldrb	r2, [r7, #3]
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	1a9b      	subs	r3, r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	334d      	adds	r3, #77	; 0x4d
 80017a8:	2207      	movs	r2, #7
 80017aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	78fa      	ldrb	r2, [r7, #3]
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f003 fca9 	bl	800510c <USB_HC_Halt>
 80017ba:	e09e      	b.n	80018fa <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	78fa      	ldrb	r2, [r7, #3]
 80017c2:	4611      	mov	r1, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f003 fc24 	bl	8005012 <USB_ReadChInterrupts>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017d4:	d11b      	bne.n	800180e <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80017d6:	78fb      	ldrb	r3, [r7, #3]
 80017d8:	015a      	lsls	r2, r3, #5
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	4413      	add	r3, r2
 80017de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017e2:	461a      	mov	r2, r3
 80017e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80017ea:	78fa      	ldrb	r2, [r7, #3]
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	1a9b      	subs	r3, r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	440b      	add	r3, r1
 80017f8:	334d      	adds	r3, #77	; 0x4d
 80017fa:	2208      	movs	r2, #8
 80017fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	78fa      	ldrb	r2, [r7, #3]
 8001804:	4611      	mov	r1, r2
 8001806:	4618      	mov	r0, r3
 8001808:	f003 fc80 	bl	800510c <USB_HC_Halt>
 800180c:	e075      	b.n	80018fa <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	78fa      	ldrb	r2, [r7, #3]
 8001814:	4611      	mov	r1, r2
 8001816:	4618      	mov	r0, r3
 8001818:	f003 fbfb 	bl	8005012 <USB_ReadChInterrupts>
 800181c:	4603      	mov	r3, r0
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	2b08      	cmp	r3, #8
 8001824:	d11a      	bne.n	800185c <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001826:	78fb      	ldrb	r3, [r7, #3]
 8001828:	015a      	lsls	r2, r3, #5
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	4413      	add	r3, r2
 800182e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001832:	461a      	mov	r2, r3
 8001834:	2308      	movs	r3, #8
 8001836:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001838:	78fa      	ldrb	r2, [r7, #3]
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	1a9b      	subs	r3, r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	440b      	add	r3, r1
 8001846:	334d      	adds	r3, #77	; 0x4d
 8001848:	2206      	movs	r2, #6
 800184a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	78fa      	ldrb	r2, [r7, #3]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f003 fc59 	bl	800510c <USB_HC_Halt>
 800185a:	e04e      	b.n	80018fa <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	78fa      	ldrb	r2, [r7, #3]
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f003 fbd4 	bl	8005012 <USB_ReadChInterrupts>
 800186a:	4603      	mov	r3, r0
 800186c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001874:	d11b      	bne.n	80018ae <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	015a      	lsls	r2, r3, #5
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4413      	add	r3, r2
 800187e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001882:	461a      	mov	r2, r3
 8001884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001888:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800188a:	78fa      	ldrb	r2, [r7, #3]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	1a9b      	subs	r3, r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	334d      	adds	r3, #77	; 0x4d
 800189a:	2209      	movs	r2, #9
 800189c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	78fa      	ldrb	r2, [r7, #3]
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f003 fc30 	bl	800510c <USB_HC_Halt>
 80018ac:	e025      	b.n	80018fa <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	78fa      	ldrb	r2, [r7, #3]
 80018b4:	4611      	mov	r1, r2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f003 fbab 	bl	8005012 <USB_ReadChInterrupts>
 80018bc:	4603      	mov	r3, r0
 80018be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c2:	2b80      	cmp	r3, #128	; 0x80
 80018c4:	d119      	bne.n	80018fa <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80018c6:	78fb      	ldrb	r3, [r7, #3]
 80018c8:	015a      	lsls	r2, r3, #5
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4413      	add	r3, r2
 80018ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018d2:	461a      	mov	r2, r3
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80018d8:	78fa      	ldrb	r2, [r7, #3]
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	1a9b      	subs	r3, r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	334d      	adds	r3, #77	; 0x4d
 80018e8:	2207      	movs	r2, #7
 80018ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	78fa      	ldrb	r2, [r7, #3]
 80018f2:	4611      	mov	r1, r2
 80018f4:	4618      	mov	r0, r3
 80018f6:	f003 fc09 	bl	800510c <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	78fa      	ldrb	r2, [r7, #3]
 8001900:	4611      	mov	r1, r2
 8001902:	4618      	mov	r0, r3
 8001904:	f003 fb85 	bl	8005012 <USB_ReadChInterrupts>
 8001908:	4603      	mov	r3, r0
 800190a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800190e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001912:	d112      	bne.n	800193a <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	78fa      	ldrb	r2, [r7, #3]
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f003 fbf5 	bl	800510c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001922:	78fb      	ldrb	r3, [r7, #3]
 8001924:	015a      	lsls	r2, r3, #5
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	4413      	add	r3, r2
 800192a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800192e:	461a      	mov	r2, r3
 8001930:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001934:	6093      	str	r3, [r2, #8]
 8001936:	f000 bd75 	b.w	8002424 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	78fa      	ldrb	r2, [r7, #3]
 8001940:	4611      	mov	r1, r2
 8001942:	4618      	mov	r0, r3
 8001944:	f003 fb65 	bl	8005012 <USB_ReadChInterrupts>
 8001948:	4603      	mov	r3, r0
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b01      	cmp	r3, #1
 8001950:	f040 8128 	bne.w	8001ba4 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	015a      	lsls	r2, r3, #5
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4413      	add	r3, r2
 800195c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001960:	461a      	mov	r2, r3
 8001962:	2320      	movs	r3, #32
 8001964:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001966:	78fa      	ldrb	r2, [r7, #3]
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	1a9b      	subs	r3, r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	331b      	adds	r3, #27
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d119      	bne.n	80019b0 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800197c:	78fa      	ldrb	r2, [r7, #3]
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	1a9b      	subs	r3, r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	331b      	adds	r3, #27
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001990:	78fb      	ldrb	r3, [r7, #3]
 8001992:	015a      	lsls	r2, r3, #5
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4413      	add	r3, r2
 8001998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	78fa      	ldrb	r2, [r7, #3]
 80019a0:	0151      	lsls	r1, r2, #5
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	440a      	add	r2, r1
 80019a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ae:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	799b      	ldrb	r3, [r3, #6]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d01b      	beq.n	80019f0 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80019b8:	78fa      	ldrb	r2, [r7, #3]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	3330      	adds	r3, #48	; 0x30
 80019c8:	6819      	ldr	r1, [r3, #0]
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	015a      	lsls	r2, r3, #5
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	4413      	add	r3, r2
 80019d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019dc:	78fa      	ldrb	r2, [r7, #3]
 80019de:	1ac9      	subs	r1, r1, r3
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	011b      	lsls	r3, r3, #4
 80019e6:	1a9b      	subs	r3, r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4403      	add	r3, r0
 80019ec:	3338      	adds	r3, #56	; 0x38
 80019ee:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80019f0:	78fa      	ldrb	r2, [r7, #3]
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	1a9b      	subs	r3, r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	334d      	adds	r3, #77	; 0x4d
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001a04:	78fa      	ldrb	r2, [r7, #3]
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	011b      	lsls	r3, r3, #4
 8001a0c:	1a9b      	subs	r3, r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	3344      	adds	r3, #68	; 0x44
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	015a      	lsls	r2, r3, #5
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	4413      	add	r3, r2
 8001a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a24:	461a      	mov	r2, r3
 8001a26:	2301      	movs	r3, #1
 8001a28:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001a2a:	78fa      	ldrb	r2, [r7, #3]
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	1a9b      	subs	r3, r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	3326      	adds	r3, #38	; 0x26
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00a      	beq.n	8001a56 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001a40:	78fa      	ldrb	r2, [r7, #3]
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	4613      	mov	r3, r2
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	1a9b      	subs	r3, r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	3326      	adds	r3, #38	; 0x26
 8001a50:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d110      	bne.n	8001a78 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	78fa      	ldrb	r2, [r7, #3]
 8001a5c:	4611      	mov	r1, r2
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f003 fb54 	bl	800510c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	015a      	lsls	r2, r3, #5
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a70:	461a      	mov	r2, r3
 8001a72:	2310      	movs	r3, #16
 8001a74:	6093      	str	r3, [r2, #8]
 8001a76:	e03d      	b.n	8001af4 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001a78:	78fa      	ldrb	r2, [r7, #3]
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	1a9b      	subs	r3, r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	3326      	adds	r3, #38	; 0x26
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	d00a      	beq.n	8001aa4 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001a8e:	78fa      	ldrb	r2, [r7, #3]
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	1a9b      	subs	r3, r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	3326      	adds	r3, #38	; 0x26
 8001a9e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d127      	bne.n	8001af4 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001aa4:	78fb      	ldrb	r3, [r7, #3]
 8001aa6:	015a      	lsls	r2, r3, #5
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4413      	add	r3, r2
 8001aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	78fa      	ldrb	r2, [r7, #3]
 8001ab4:	0151      	lsls	r1, r2, #5
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	440a      	add	r2, r1
 8001aba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001abe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ac2:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001ac4:	78fa      	ldrb	r2, [r7, #3]
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	1a9b      	subs	r3, r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	334c      	adds	r3, #76	; 0x4c
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001ad8:	78fa      	ldrb	r2, [r7, #3]
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	1a9b      	subs	r3, r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	334c      	adds	r3, #76	; 0x4c
 8001ae8:	781a      	ldrb	r2, [r3, #0]
 8001aea:	78fb      	ldrb	r3, [r7, #3]
 8001aec:	4619      	mov	r1, r3
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f006 fa5e 	bl	8007fb0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	799b      	ldrb	r3, [r3, #6]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d13b      	bne.n	8001b74 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001afc:	78fa      	ldrb	r2, [r7, #3]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	1a9b      	subs	r3, r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	3338      	adds	r3, #56	; 0x38
 8001b0c:	6819      	ldr	r1, [r3, #0]
 8001b0e:	78fa      	ldrb	r2, [r7, #3]
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	1a9b      	subs	r3, r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4403      	add	r3, r0
 8001b1c:	3328      	adds	r3, #40	; 0x28
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	440b      	add	r3, r1
 8001b22:	1e59      	subs	r1, r3, #1
 8001b24:	78fa      	ldrb	r2, [r7, #3]
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	011b      	lsls	r3, r3, #4
 8001b2c:	1a9b      	subs	r3, r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4403      	add	r3, r0
 8001b32:	3328      	adds	r3, #40	; 0x28
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 8470 	beq.w	8002424 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001b44:	78fa      	ldrb	r2, [r7, #3]
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	1a9b      	subs	r3, r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	333c      	adds	r3, #60	; 0x3c
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	78fa      	ldrb	r2, [r7, #3]
 8001b58:	f083 0301 	eor.w	r3, r3, #1
 8001b5c:	b2d8      	uxtb	r0, r3
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	333c      	adds	r3, #60	; 0x3c
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	701a      	strb	r2, [r3, #0]
 8001b70:	f000 bc58 	b.w	8002424 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001b74:	78fa      	ldrb	r2, [r7, #3]
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	1a9b      	subs	r3, r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	333c      	adds	r3, #60	; 0x3c
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	78fa      	ldrb	r2, [r7, #3]
 8001b88:	f083 0301 	eor.w	r3, r3, #1
 8001b8c:	b2d8      	uxtb	r0, r3
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	1a9b      	subs	r3, r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	440b      	add	r3, r1
 8001b9a:	333c      	adds	r3, #60	; 0x3c
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	701a      	strb	r2, [r3, #0]
 8001ba0:	f000 bc40 	b.w	8002424 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	78fa      	ldrb	r2, [r7, #3]
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f003 fa30 	bl	8005012 <USB_ReadChInterrupts>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	f003 0320 	and.w	r3, r3, #32
 8001bb8:	2b20      	cmp	r3, #32
 8001bba:	d131      	bne.n	8001c20 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	015a      	lsls	r2, r3, #5
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc8:	461a      	mov	r2, r3
 8001bca:	2320      	movs	r3, #32
 8001bcc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8001bce:	78fa      	ldrb	r2, [r7, #3]
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	1a9b      	subs	r3, r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	440b      	add	r3, r1
 8001bdc:	331a      	adds	r3, #26
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	f040 841f 	bne.w	8002424 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8001be6:	78fa      	ldrb	r2, [r7, #3]
 8001be8:	6879      	ldr	r1, [r7, #4]
 8001bea:	4613      	mov	r3, r2
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	1a9b      	subs	r3, r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	331b      	adds	r3, #27
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001bfa:	78fa      	ldrb	r2, [r7, #3]
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	011b      	lsls	r3, r3, #4
 8001c02:	1a9b      	subs	r3, r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	440b      	add	r3, r1
 8001c08:	334d      	adds	r3, #77	; 0x4d
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	78fa      	ldrb	r2, [r7, #3]
 8001c14:	4611      	mov	r1, r2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f003 fa78 	bl	800510c <USB_HC_Halt>
 8001c1c:	f000 bc02 	b.w	8002424 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	78fa      	ldrb	r2, [r7, #3]
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f003 f9f2 	bl	8005012 <USB_ReadChInterrupts>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	f040 8305 	bne.w	8002244 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001c3a:	78fb      	ldrb	r3, [r7, #3]
 8001c3c:	015a      	lsls	r2, r3, #5
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	4413      	add	r3, r2
 8001c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c46:	461a      	mov	r2, r3
 8001c48:	2302      	movs	r3, #2
 8001c4a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001c4c:	78fa      	ldrb	r2, [r7, #3]
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	011b      	lsls	r3, r3, #4
 8001c54:	1a9b      	subs	r3, r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	440b      	add	r3, r1
 8001c5a:	334d      	adds	r3, #77	; 0x4d
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d114      	bne.n	8001c8c <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001c62:	78fa      	ldrb	r2, [r7, #3]
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	4613      	mov	r3, r2
 8001c68:	011b      	lsls	r3, r3, #4
 8001c6a:	1a9b      	subs	r3, r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	440b      	add	r3, r1
 8001c70:	334d      	adds	r3, #77	; 0x4d
 8001c72:	2202      	movs	r2, #2
 8001c74:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001c76:	78fa      	ldrb	r2, [r7, #3]
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	011b      	lsls	r3, r3, #4
 8001c7e:	1a9b      	subs	r3, r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	440b      	add	r3, r1
 8001c84:	334c      	adds	r3, #76	; 0x4c
 8001c86:	2201      	movs	r2, #1
 8001c88:	701a      	strb	r2, [r3, #0]
 8001c8a:	e2cc      	b.n	8002226 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001c8c:	78fa      	ldrb	r2, [r7, #3]
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	1a9b      	subs	r3, r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	334d      	adds	r3, #77	; 0x4d
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d114      	bne.n	8001ccc <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001ca2:	78fa      	ldrb	r2, [r7, #3]
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	011b      	lsls	r3, r3, #4
 8001caa:	1a9b      	subs	r3, r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	334d      	adds	r3, #77	; 0x4d
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8001cb6:	78fa      	ldrb	r2, [r7, #3]
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	011b      	lsls	r3, r3, #4
 8001cbe:	1a9b      	subs	r3, r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	334c      	adds	r3, #76	; 0x4c
 8001cc6:	2205      	movs	r2, #5
 8001cc8:	701a      	strb	r2, [r3, #0]
 8001cca:	e2ac      	b.n	8002226 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001ccc:	78fa      	ldrb	r2, [r7, #3]
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	011b      	lsls	r3, r3, #4
 8001cd4:	1a9b      	subs	r3, r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	440b      	add	r3, r1
 8001cda:	334d      	adds	r3, #77	; 0x4d
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b07      	cmp	r3, #7
 8001ce0:	d00b      	beq.n	8001cfa <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001ce2:	78fa      	ldrb	r2, [r7, #3]
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	011b      	lsls	r3, r3, #4
 8001cea:	1a9b      	subs	r3, r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	440b      	add	r3, r1
 8001cf0:	334d      	adds	r3, #77	; 0x4d
 8001cf2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001cf4:	2b09      	cmp	r3, #9
 8001cf6:	f040 80a6 	bne.w	8001e46 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001cfa:	78fa      	ldrb	r2, [r7, #3]
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	011b      	lsls	r3, r3, #4
 8001d02:	1a9b      	subs	r3, r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	440b      	add	r3, r1
 8001d08:	334d      	adds	r3, #77	; 0x4d
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001d0e:	78fa      	ldrb	r2, [r7, #3]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	011b      	lsls	r3, r3, #4
 8001d16:	1a9b      	subs	r3, r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	3344      	adds	r3, #68	; 0x44
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	1c59      	adds	r1, r3, #1
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	011b      	lsls	r3, r3, #4
 8001d28:	1a9b      	subs	r3, r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4403      	add	r3, r0
 8001d2e:	3344      	adds	r3, #68	; 0x44
 8001d30:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001d32:	78fa      	ldrb	r2, [r7, #3]
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	4613      	mov	r3, r2
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	1a9b      	subs	r3, r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	440b      	add	r3, r1
 8001d40:	3344      	adds	r3, #68	; 0x44
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d943      	bls.n	8001dd0 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001d48:	78fa      	ldrb	r2, [r7, #3]
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	1a9b      	subs	r3, r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	3344      	adds	r3, #68	; 0x44
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8001d5c:	78fa      	ldrb	r2, [r7, #3]
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	1a9b      	subs	r3, r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	331a      	adds	r3, #26
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d123      	bne.n	8001dba <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8001d72:	78fa      	ldrb	r2, [r7, #3]
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	1a9b      	subs	r3, r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	440b      	add	r3, r1
 8001d80:	331b      	adds	r3, #27
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8001d86:	78fa      	ldrb	r2, [r7, #3]
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	1a9b      	subs	r3, r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	331c      	adds	r3, #28
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001d9a:	78fb      	ldrb	r3, [r7, #3]
 8001d9c:	015a      	lsls	r2, r3, #5
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	78fa      	ldrb	r2, [r7, #3]
 8001daa:	0151      	lsls	r1, r2, #5
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	440a      	add	r2, r1
 8001db0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db8:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001dba:	78fa      	ldrb	r2, [r7, #3]
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	1a9b      	subs	r3, r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	334c      	adds	r3, #76	; 0x4c
 8001dca:	2204      	movs	r2, #4
 8001dcc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001dce:	e229      	b.n	8002224 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001dd0:	78fa      	ldrb	r2, [r7, #3]
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	011b      	lsls	r3, r3, #4
 8001dd8:	1a9b      	subs	r3, r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	334c      	adds	r3, #76	; 0x4c
 8001de0:	2202      	movs	r2, #2
 8001de2:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001de4:	78fa      	ldrb	r2, [r7, #3]
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	4613      	mov	r3, r2
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	1a9b      	subs	r3, r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	3326      	adds	r3, #38	; 0x26
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00b      	beq.n	8001e12 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001dfa:	78fa      	ldrb	r2, [r7, #3]
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	011b      	lsls	r3, r3, #4
 8001e02:	1a9b      	subs	r3, r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	440b      	add	r3, r1
 8001e08:	3326      	adds	r3, #38	; 0x26
 8001e0a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	f040 8209 	bne.w	8002224 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001e12:	78fb      	ldrb	r3, [r7, #3]
 8001e14:	015a      	lsls	r2, r3, #5
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4413      	add	r3, r2
 8001e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e28:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e30:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	015a      	lsls	r2, r3, #5
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4413      	add	r3, r2
 8001e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3e:	461a      	mov	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001e44:	e1ee      	b.n	8002224 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8001e46:	78fa      	ldrb	r2, [r7, #3]
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	011b      	lsls	r3, r3, #4
 8001e4e:	1a9b      	subs	r3, r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	440b      	add	r3, r1
 8001e54:	334d      	adds	r3, #77	; 0x4d
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b05      	cmp	r3, #5
 8001e5a:	f040 80c8 	bne.w	8001fee <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001e5e:	78fa      	ldrb	r2, [r7, #3]
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	1a9b      	subs	r3, r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	334d      	adds	r3, #77	; 0x4d
 8001e6e:	2202      	movs	r2, #2
 8001e70:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001e72:	78fa      	ldrb	r2, [r7, #3]
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	1a9b      	subs	r3, r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	331b      	adds	r3, #27
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	f040 81ce 	bne.w	8002226 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001e8a:	78fa      	ldrb	r2, [r7, #3]
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	1a9b      	subs	r3, r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	3326      	adds	r3, #38	; 0x26
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d16b      	bne.n	8001f78 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8001ea0:	78fa      	ldrb	r2, [r7, #3]
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	011b      	lsls	r3, r3, #4
 8001ea8:	1a9b      	subs	r3, r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	3348      	adds	r3, #72	; 0x48
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	1c59      	adds	r1, r3, #1
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	011b      	lsls	r3, r3, #4
 8001eba:	1a9b      	subs	r3, r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4403      	add	r3, r0
 8001ec0:	3348      	adds	r3, #72	; 0x48
 8001ec2:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8001ec4:	78fa      	ldrb	r2, [r7, #3]
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	011b      	lsls	r3, r3, #4
 8001ecc:	1a9b      	subs	r3, r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	3348      	adds	r3, #72	; 0x48
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d943      	bls.n	8001f62 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8001eda:	78fa      	ldrb	r2, [r7, #3]
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	011b      	lsls	r3, r3, #4
 8001ee2:	1a9b      	subs	r3, r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	3348      	adds	r3, #72	; 0x48
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8001eee:	78fa      	ldrb	r2, [r7, #3]
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	011b      	lsls	r3, r3, #4
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	331b      	adds	r3, #27
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8001f02:	78fa      	ldrb	r2, [r7, #3]
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	011b      	lsls	r3, r3, #4
 8001f0a:	1a9b      	subs	r3, r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	3344      	adds	r3, #68	; 0x44
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d809      	bhi.n	8001f2c <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8001f18:	78fa      	ldrb	r2, [r7, #3]
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	1a9b      	subs	r3, r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	331c      	adds	r3, #28
 8001f28:	2201      	movs	r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	78fa      	ldrb	r2, [r7, #3]
 8001f3c:	0151      	lsls	r1, r2, #5
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	440a      	add	r2, r1
 8001f42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f4a:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8001f4c:	78fa      	ldrb	r2, [r7, #3]
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	011b      	lsls	r3, r3, #4
 8001f54:	1a9b      	subs	r3, r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	334c      	adds	r3, #76	; 0x4c
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	701a      	strb	r2, [r3, #0]
 8001f60:	e014      	b.n	8001f8c <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001f62:	78fa      	ldrb	r2, [r7, #3]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	011b      	lsls	r3, r3, #4
 8001f6a:	1a9b      	subs	r3, r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	440b      	add	r3, r1
 8001f70:	334c      	adds	r3, #76	; 0x4c
 8001f72:	2202      	movs	r2, #2
 8001f74:	701a      	strb	r2, [r3, #0]
 8001f76:	e009      	b.n	8001f8c <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001f78:	78fa      	ldrb	r2, [r7, #3]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	011b      	lsls	r3, r3, #4
 8001f80:	1a9b      	subs	r3, r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	334c      	adds	r3, #76	; 0x4c
 8001f88:	2202      	movs	r2, #2
 8001f8a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001f8c:	78fa      	ldrb	r2, [r7, #3]
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	1a9b      	subs	r3, r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	3326      	adds	r3, #38	; 0x26
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00b      	beq.n	8001fba <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001fa2:	78fa      	ldrb	r2, [r7, #3]
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	1a9b      	subs	r3, r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	440b      	add	r3, r1
 8001fb0:	3326      	adds	r3, #38	; 0x26
 8001fb2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	f040 8136 	bne.w	8002226 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	015a      	lsls	r2, r3, #5
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001fd0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fd8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	015a      	lsls	r2, r3, #5
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6013      	str	r3, [r2, #0]
 8001fec:	e11b      	b.n	8002226 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8001fee:	78fa      	ldrb	r2, [r7, #3]
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	1a9b      	subs	r3, r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	334d      	adds	r3, #77	; 0x4d
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b03      	cmp	r3, #3
 8002002:	f040 8081 	bne.w	8002108 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002006:	78fa      	ldrb	r2, [r7, #3]
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	1a9b      	subs	r3, r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	334d      	adds	r3, #77	; 0x4d
 8002016:	2202      	movs	r2, #2
 8002018:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800201a:	78fa      	ldrb	r2, [r7, #3]
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	1a9b      	subs	r3, r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	331b      	adds	r3, #27
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b01      	cmp	r3, #1
 800202e:	f040 80fa 	bne.w	8002226 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002032:	78fa      	ldrb	r2, [r7, #3]
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	1a9b      	subs	r3, r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	334c      	adds	r3, #76	; 0x4c
 8002042:	2202      	movs	r2, #2
 8002044:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002046:	78fb      	ldrb	r3, [r7, #3]
 8002048:	015a      	lsls	r2, r3, #5
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4413      	add	r3, r2
 800204e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	78fa      	ldrb	r2, [r7, #3]
 8002056:	0151      	lsls	r1, r2, #5
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	440a      	add	r2, r1
 800205c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002064:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	015a      	lsls	r2, r3, #5
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4413      	add	r3, r2
 800206e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	78fa      	ldrb	r2, [r7, #3]
 8002076:	0151      	lsls	r1, r2, #5
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	440a      	add	r2, r1
 800207c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002084:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4413      	add	r3, r2
 800208e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	78fa      	ldrb	r2, [r7, #3]
 8002096:	0151      	lsls	r1, r2, #5
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	440a      	add	r2, r1
 800209c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020a0:	f023 0320 	bic.w	r3, r3, #32
 80020a4:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020a6:	78fa      	ldrb	r2, [r7, #3]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	3326      	adds	r3, #38	; 0x26
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00b      	beq.n	80020d4 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80020bc:	78fa      	ldrb	r2, [r7, #3]
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	1a9b      	subs	r3, r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	3326      	adds	r3, #38	; 0x26
 80020cc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	f040 80a9 	bne.w	8002226 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	015a      	lsls	r2, r3, #5
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020ea:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020f2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	015a      	lsls	r2, r3, #5
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002100:	461a      	mov	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	e08e      	b.n	8002226 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002108:	78fa      	ldrb	r2, [r7, #3]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	1a9b      	subs	r3, r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	334d      	adds	r3, #77	; 0x4d
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b04      	cmp	r3, #4
 800211c:	d143      	bne.n	80021a6 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800211e:	78fa      	ldrb	r2, [r7, #3]
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	1a9b      	subs	r3, r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	334d      	adds	r3, #77	; 0x4d
 800212e:	2202      	movs	r2, #2
 8002130:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002132:	78fa      	ldrb	r2, [r7, #3]
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	334c      	adds	r3, #76	; 0x4c
 8002142:	2202      	movs	r2, #2
 8002144:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002146:	78fa      	ldrb	r2, [r7, #3]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	1a9b      	subs	r3, r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	3326      	adds	r3, #38	; 0x26
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00a      	beq.n	8002172 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800215c:	78fa      	ldrb	r2, [r7, #3]
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	1a9b      	subs	r3, r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	3326      	adds	r3, #38	; 0x26
 800216c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800216e:	2b02      	cmp	r3, #2
 8002170:	d159      	bne.n	8002226 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002172:	78fb      	ldrb	r3, [r7, #3]
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4413      	add	r3, r2
 800217a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002188:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002190:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002192:	78fb      	ldrb	r3, [r7, #3]
 8002194:	015a      	lsls	r2, r3, #5
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4413      	add	r3, r2
 800219a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219e:	461a      	mov	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	e03f      	b.n	8002226 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80021a6:	78fa      	ldrb	r2, [r7, #3]
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	1a9b      	subs	r3, r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	334d      	adds	r3, #77	; 0x4d
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d126      	bne.n	800220a <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80021bc:	78fa      	ldrb	r2, [r7, #3]
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	1a9b      	subs	r3, r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	334d      	adds	r3, #77	; 0x4d
 80021cc:	2202      	movs	r2, #2
 80021ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80021d0:	78fa      	ldrb	r2, [r7, #3]
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	1a9b      	subs	r3, r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	3344      	adds	r3, #68	; 0x44
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	1c59      	adds	r1, r3, #1
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4403      	add	r3, r0
 80021f0:	3344      	adds	r3, #68	; 0x44
 80021f2:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80021f4:	78fa      	ldrb	r2, [r7, #3]
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	1a9b      	subs	r3, r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	334c      	adds	r3, #76	; 0x4c
 8002204:	2204      	movs	r2, #4
 8002206:	701a      	strb	r2, [r3, #0]
 8002208:	e00d      	b.n	8002226 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800220a:	78fa      	ldrb	r2, [r7, #3]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	011b      	lsls	r3, r3, #4
 8002212:	1a9b      	subs	r3, r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	440b      	add	r3, r1
 8002218:	334d      	adds	r3, #77	; 0x4d
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b02      	cmp	r3, #2
 800221e:	f000 8100 	beq.w	8002422 <HCD_HC_IN_IRQHandler+0xcca>
 8002222:	e000      	b.n	8002226 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002224:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002226:	78fa      	ldrb	r2, [r7, #3]
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	334c      	adds	r3, #76	; 0x4c
 8002236:	781a      	ldrb	r2, [r3, #0]
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	4619      	mov	r1, r3
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f005 feb7 	bl	8007fb0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002242:	e0ef      	b.n	8002424 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	78fa      	ldrb	r2, [r7, #3]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f002 fee0 	bl	8005012 <USB_ReadChInterrupts>
 8002252:	4603      	mov	r3, r0
 8002254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002258:	2b40      	cmp	r3, #64	; 0x40
 800225a:	d12f      	bne.n	80022bc <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	015a      	lsls	r2, r3, #5
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4413      	add	r3, r2
 8002264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002268:	461a      	mov	r2, r3
 800226a:	2340      	movs	r3, #64	; 0x40
 800226c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800226e:	78fa      	ldrb	r2, [r7, #3]
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	1a9b      	subs	r3, r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	334d      	adds	r3, #77	; 0x4d
 800227e:	2205      	movs	r2, #5
 8002280:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002282:	78fa      	ldrb	r2, [r7, #3]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	1a9b      	subs	r3, r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	331a      	adds	r3, #26
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d109      	bne.n	80022ac <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	1a9b      	subs	r3, r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	3344      	adds	r3, #68	; 0x44
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	78fa      	ldrb	r2, [r7, #3]
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f002 ff29 	bl	800510c <USB_HC_Halt>
 80022ba:	e0b3      	b.n	8002424 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	78fa      	ldrb	r2, [r7, #3]
 80022c2:	4611      	mov	r1, r2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f002 fea4 	bl	8005012 <USB_ReadChInterrupts>
 80022ca:	4603      	mov	r3, r0
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	2b10      	cmp	r3, #16
 80022d2:	f040 80a7 	bne.w	8002424 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80022d6:	78fa      	ldrb	r2, [r7, #3]
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	1a9b      	subs	r3, r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	440b      	add	r3, r1
 80022e4:	3326      	adds	r3, #38	; 0x26
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b03      	cmp	r3, #3
 80022ea:	d11b      	bne.n	8002324 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80022ec:	78fa      	ldrb	r2, [r7, #3]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	1a9b      	subs	r3, r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	3344      	adds	r3, #68	; 0x44
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002300:	78fa      	ldrb	r2, [r7, #3]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	1a9b      	subs	r3, r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	334d      	adds	r3, #77	; 0x4d
 8002310:	2204      	movs	r2, #4
 8002312:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	78fa      	ldrb	r2, [r7, #3]
 800231a:	4611      	mov	r1, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f002 fef5 	bl	800510c <USB_HC_Halt>
 8002322:	e03f      	b.n	80023a4 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002324:	78fa      	ldrb	r2, [r7, #3]
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	3326      	adds	r3, #38	; 0x26
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00a      	beq.n	8002350 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800233a:	78fa      	ldrb	r2, [r7, #3]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	1a9b      	subs	r3, r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	3326      	adds	r3, #38	; 0x26
 800234a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800234c:	2b02      	cmp	r3, #2
 800234e:	d129      	bne.n	80023a4 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	1a9b      	subs	r3, r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	3344      	adds	r3, #68	; 0x44
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	799b      	ldrb	r3, [r3, #6]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00a      	beq.n	8002382 <HCD_HC_IN_IRQHandler+0xc2a>
 800236c:	78fa      	ldrb	r2, [r7, #3]
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	1a9b      	subs	r3, r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	331b      	adds	r3, #27
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d110      	bne.n	80023a4 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002382:	78fa      	ldrb	r2, [r7, #3]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	334d      	adds	r3, #77	; 0x4d
 8002392:	2204      	movs	r2, #4
 8002394:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	78fa      	ldrb	r2, [r7, #3]
 800239c:	4611      	mov	r1, r2
 800239e:	4618      	mov	r0, r3
 80023a0:	f002 feb4 	bl	800510c <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80023a4:	78fa      	ldrb	r2, [r7, #3]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	011b      	lsls	r3, r3, #4
 80023ac:	1a9b      	subs	r3, r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	331b      	adds	r3, #27
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d129      	bne.n	800240e <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80023ba:	78fa      	ldrb	r2, [r7, #3]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	1a9b      	subs	r3, r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	331b      	adds	r3, #27
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80023ce:	78fb      	ldrb	r3, [r7, #3]
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	0151      	lsls	r1, r2, #5
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	440a      	add	r2, r1
 80023e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ec:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80023ee:	78fb      	ldrb	r3, [r7, #3]
 80023f0:	015a      	lsls	r2, r3, #5
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4413      	add	r3, r2
 80023f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	0151      	lsls	r1, r2, #5
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	440a      	add	r2, r1
 8002404:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002408:	f043 0320 	orr.w	r3, r3, #32
 800240c:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800240e:	78fb      	ldrb	r3, [r7, #3]
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4413      	add	r3, r2
 8002416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241a:	461a      	mov	r2, r3
 800241c:	2310      	movs	r3, #16
 800241e:	6093      	str	r3, [r2, #8]
 8002420:	e000      	b.n	8002424 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002422:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	460b      	mov	r3, r1
 8002434:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	78fa      	ldrb	r2, [r7, #3]
 8002446:	4611      	mov	r1, r2
 8002448:	4618      	mov	r0, r3
 800244a:	f002 fde2 	bl	8005012 <USB_ReadChInterrupts>
 800244e:	4603      	mov	r3, r0
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b04      	cmp	r3, #4
 8002456:	d11b      	bne.n	8002490 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4413      	add	r3, r2
 8002460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002464:	461a      	mov	r2, r3
 8002466:	2304      	movs	r3, #4
 8002468:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800246a:	78fa      	ldrb	r2, [r7, #3]
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	011b      	lsls	r3, r3, #4
 8002472:	1a9b      	subs	r3, r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	334d      	adds	r3, #77	; 0x4d
 800247a:	2207      	movs	r2, #7
 800247c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	78fa      	ldrb	r2, [r7, #3]
 8002484:	4611      	mov	r1, r2
 8002486:	4618      	mov	r0, r3
 8002488:	f002 fe40 	bl	800510c <USB_HC_Halt>
 800248c:	f000 bc6f 	b.w	8002d6e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	4611      	mov	r1, r2
 8002498:	4618      	mov	r0, r3
 800249a:	f002 fdba 	bl	8005012 <USB_ReadChInterrupts>
 800249e:	4603      	mov	r3, r0
 80024a0:	f003 0320 	and.w	r3, r3, #32
 80024a4:	2b20      	cmp	r3, #32
 80024a6:	f040 8082 	bne.w	80025ae <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80024aa:	78fb      	ldrb	r3, [r7, #3]
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b6:	461a      	mov	r2, r3
 80024b8:	2320      	movs	r3, #32
 80024ba:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80024bc:	78fa      	ldrb	r2, [r7, #3]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	1a9b      	subs	r3, r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	3319      	adds	r3, #25
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d124      	bne.n	800251c <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80024d2:	78fa      	ldrb	r2, [r7, #3]
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	1a9b      	subs	r3, r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	3319      	adds	r3, #25
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024e6:	78fa      	ldrb	r2, [r7, #3]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	011b      	lsls	r3, r3, #4
 80024ee:	1a9b      	subs	r3, r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	334c      	adds	r3, #76	; 0x4c
 80024f6:	2202      	movs	r2, #2
 80024f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80024fa:	78fa      	ldrb	r2, [r7, #3]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	334d      	adds	r3, #77	; 0x4d
 800250a:	2203      	movs	r2, #3
 800250c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	78fa      	ldrb	r2, [r7, #3]
 8002514:	4611      	mov	r1, r2
 8002516:	4618      	mov	r0, r3
 8002518:	f002 fdf8 	bl	800510c <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800251c:	78fa      	ldrb	r2, [r7, #3]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	331a      	adds	r3, #26
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b01      	cmp	r3, #1
 8002530:	f040 841d 	bne.w	8002d6e <HCD_HC_OUT_IRQHandler+0x944>
 8002534:	78fa      	ldrb	r2, [r7, #3]
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	1a9b      	subs	r3, r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	331b      	adds	r3, #27
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	f040 8411 	bne.w	8002d6e <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800254c:	78fa      	ldrb	r2, [r7, #3]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	3326      	adds	r3, #38	; 0x26
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d009      	beq.n	8002576 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002562:	78fa      	ldrb	r2, [r7, #3]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	1a9b      	subs	r3, r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	331b      	adds	r3, #27
 8002572:	2201      	movs	r2, #1
 8002574:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002576:	78fa      	ldrb	r2, [r7, #3]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	1a9b      	subs	r3, r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	334d      	adds	r3, #77	; 0x4d
 8002586:	2203      	movs	r2, #3
 8002588:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	78fa      	ldrb	r2, [r7, #3]
 8002590:	4611      	mov	r1, r2
 8002592:	4618      	mov	r0, r3
 8002594:	f002 fdba 	bl	800510c <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	3344      	adds	r3, #68	; 0x44
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	e3df      	b.n	8002d6e <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	78fa      	ldrb	r2, [r7, #3]
 80025b4:	4611      	mov	r1, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f002 fd2b 	bl	8005012 <USB_ReadChInterrupts>
 80025bc:	4603      	mov	r3, r0
 80025be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025c6:	d111      	bne.n	80025ec <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d4:	461a      	mov	r2, r3
 80025d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025da:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	4611      	mov	r1, r2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f002 fd91 	bl	800510c <USB_HC_Halt>
 80025ea:	e3c0      	b.n	8002d6e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	78fa      	ldrb	r2, [r7, #3]
 80025f2:	4611      	mov	r1, r2
 80025f4:	4618      	mov	r0, r3
 80025f6:	f002 fd0c 	bl	8005012 <USB_ReadChInterrupts>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b01      	cmp	r3, #1
 8002602:	d168      	bne.n	80026d6 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002604:	78fa      	ldrb	r2, [r7, #3]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	1a9b      	subs	r3, r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	3344      	adds	r3, #68	; 0x44
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	78fa      	ldrb	r2, [r7, #3]
 800261e:	4611      	mov	r1, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f002 fcf6 	bl	8005012 <USB_ReadChInterrupts>
 8002626:	4603      	mov	r3, r0
 8002628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262c:	2b40      	cmp	r3, #64	; 0x40
 800262e:	d112      	bne.n	8002656 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002630:	78fa      	ldrb	r2, [r7, #3]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	3319      	adds	r3, #25
 8002640:	2201      	movs	r2, #1
 8002642:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4413      	add	r3, r2
 800264c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002650:	461a      	mov	r2, r3
 8002652:	2340      	movs	r3, #64	; 0x40
 8002654:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002656:	78fa      	ldrb	r2, [r7, #3]
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	1a9b      	subs	r3, r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	331b      	adds	r3, #27
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d019      	beq.n	80026a0 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800266c:	78fa      	ldrb	r2, [r7, #3]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	1a9b      	subs	r3, r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	331b      	adds	r3, #27
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	4413      	add	r3, r2
 8002688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	78fa      	ldrb	r2, [r7, #3]
 8002690:	0151      	lsls	r1, r2, #5
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	440a      	add	r2, r1
 8002696:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800269a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800269e:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ac:	461a      	mov	r2, r3
 80026ae:	2301      	movs	r3, #1
 80026b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80026b2:	78fa      	ldrb	r2, [r7, #3]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	334d      	adds	r3, #77	; 0x4d
 80026c2:	2201      	movs	r2, #1
 80026c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	78fa      	ldrb	r2, [r7, #3]
 80026cc:	4611      	mov	r1, r2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f002 fd1c 	bl	800510c <USB_HC_Halt>
 80026d4:	e34b      	b.n	8002d6e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	78fa      	ldrb	r2, [r7, #3]
 80026dc:	4611      	mov	r1, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	f002 fc97 	bl	8005012 <USB_ReadChInterrupts>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ea:	2b40      	cmp	r3, #64	; 0x40
 80026ec:	d139      	bne.n	8002762 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80026ee:	78fa      	ldrb	r2, [r7, #3]
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	334d      	adds	r3, #77	; 0x4d
 80026fe:	2205      	movs	r2, #5
 8002700:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002702:	78fa      	ldrb	r2, [r7, #3]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	331a      	adds	r3, #26
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d109      	bne.n	800272c <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002718:	78fa      	ldrb	r2, [r7, #3]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	3319      	adds	r3, #25
 8002728:	2201      	movs	r2, #1
 800272a:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	3344      	adds	r3, #68	; 0x44
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f002 fcdf 	bl	800510c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800274e:	78fb      	ldrb	r3, [r7, #3]
 8002750:	015a      	lsls	r2, r3, #5
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4413      	add	r3, r2
 8002756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275a:	461a      	mov	r2, r3
 800275c:	2340      	movs	r3, #64	; 0x40
 800275e:	6093      	str	r3, [r2, #8]
 8002760:	e305      	b.n	8002d6e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	78fa      	ldrb	r2, [r7, #3]
 8002768:	4611      	mov	r1, r2
 800276a:	4618      	mov	r0, r3
 800276c:	f002 fc51 	bl	8005012 <USB_ReadChInterrupts>
 8002770:	4603      	mov	r3, r0
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b08      	cmp	r3, #8
 8002778:	d11a      	bne.n	80027b0 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800277a:	78fb      	ldrb	r3, [r7, #3]
 800277c:	015a      	lsls	r2, r3, #5
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4413      	add	r3, r2
 8002782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002786:	461a      	mov	r2, r3
 8002788:	2308      	movs	r3, #8
 800278a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800278c:	78fa      	ldrb	r2, [r7, #3]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	334d      	adds	r3, #77	; 0x4d
 800279c:	2206      	movs	r2, #6
 800279e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	78fa      	ldrb	r2, [r7, #3]
 80027a6:	4611      	mov	r1, r2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f002 fcaf 	bl	800510c <USB_HC_Halt>
 80027ae:	e2de      	b.n	8002d6e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	78fa      	ldrb	r2, [r7, #3]
 80027b6:	4611      	mov	r1, r2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f002 fc2a 	bl	8005012 <USB_ReadChInterrupts>
 80027be:	4603      	mov	r3, r0
 80027c0:	f003 0310 	and.w	r3, r3, #16
 80027c4:	2b10      	cmp	r3, #16
 80027c6:	d144      	bne.n	8002852 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80027c8:	78fa      	ldrb	r2, [r7, #3]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	3344      	adds	r3, #68	; 0x44
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80027dc:	78fa      	ldrb	r2, [r7, #3]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	1a9b      	subs	r3, r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	334d      	adds	r3, #77	; 0x4d
 80027ec:	2204      	movs	r2, #4
 80027ee:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	3319      	adds	r3, #25
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d114      	bne.n	8002830 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002806:	78fa      	ldrb	r2, [r7, #3]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	1a9b      	subs	r3, r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	3318      	adds	r3, #24
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d109      	bne.n	8002830 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800281c:	78fa      	ldrb	r2, [r7, #3]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	1a9b      	subs	r3, r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	3319      	adds	r3, #25
 800282c:	2201      	movs	r2, #1
 800282e:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	78fa      	ldrb	r2, [r7, #3]
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f002 fc67 	bl	800510c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4413      	add	r3, r2
 8002846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284a:	461a      	mov	r2, r3
 800284c:	2310      	movs	r3, #16
 800284e:	6093      	str	r3, [r2, #8]
 8002850:	e28d      	b.n	8002d6e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	78fa      	ldrb	r2, [r7, #3]
 8002858:	4611      	mov	r1, r2
 800285a:	4618      	mov	r0, r3
 800285c:	f002 fbd9 	bl	8005012 <USB_ReadChInterrupts>
 8002860:	4603      	mov	r3, r0
 8002862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002866:	2b80      	cmp	r3, #128	; 0x80
 8002868:	d169      	bne.n	800293e <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	799b      	ldrb	r3, [r3, #6]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d111      	bne.n	8002896 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002872:	78fa      	ldrb	r2, [r7, #3]
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	1a9b      	subs	r3, r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	334d      	adds	r3, #77	; 0x4d
 8002882:	2207      	movs	r2, #7
 8002884:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	78fa      	ldrb	r2, [r7, #3]
 800288c:	4611      	mov	r1, r2
 800288e:	4618      	mov	r0, r3
 8002890:	f002 fc3c 	bl	800510c <USB_HC_Halt>
 8002894:	e049      	b.n	800292a <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002896:	78fa      	ldrb	r2, [r7, #3]
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	1a9b      	subs	r3, r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	3344      	adds	r3, #68	; 0x44
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	1c59      	adds	r1, r3, #1
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4403      	add	r3, r0
 80028b6:	3344      	adds	r3, #68	; 0x44
 80028b8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80028ba:	78fa      	ldrb	r2, [r7, #3]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	1a9b      	subs	r3, r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	3344      	adds	r3, #68	; 0x44
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d922      	bls.n	8002916 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80028d0:	78fa      	ldrb	r2, [r7, #3]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	3344      	adds	r3, #68	; 0x44
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80028e4:	78fa      	ldrb	r2, [r7, #3]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	1a9b      	subs	r3, r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	334c      	adds	r3, #76	; 0x4c
 80028f4:	2204      	movs	r2, #4
 80028f6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80028f8:	78fa      	ldrb	r2, [r7, #3]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	1a9b      	subs	r3, r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	334c      	adds	r3, #76	; 0x4c
 8002908:	781a      	ldrb	r2, [r3, #0]
 800290a:	78fb      	ldrb	r3, [r7, #3]
 800290c:	4619      	mov	r1, r3
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f005 fb4e 	bl	8007fb0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002914:	e009      	b.n	800292a <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002916:	78fa      	ldrb	r2, [r7, #3]
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	1a9b      	subs	r3, r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	334c      	adds	r3, #76	; 0x4c
 8002926:	2202      	movs	r2, #2
 8002928:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800292a:	78fb      	ldrb	r3, [r7, #3]
 800292c:	015a      	lsls	r2, r3, #5
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4413      	add	r3, r2
 8002932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002936:	461a      	mov	r2, r3
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	6093      	str	r3, [r2, #8]
 800293c:	e217      	b.n	8002d6e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	78fa      	ldrb	r2, [r7, #3]
 8002944:	4611      	mov	r1, r2
 8002946:	4618      	mov	r0, r3
 8002948:	f002 fb63 	bl	8005012 <USB_ReadChInterrupts>
 800294c:	4603      	mov	r3, r0
 800294e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002956:	d11b      	bne.n	8002990 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002958:	78fa      	ldrb	r2, [r7, #3]
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	1a9b      	subs	r3, r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	334d      	adds	r3, #77	; 0x4d
 8002968:	2209      	movs	r2, #9
 800296a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	78fa      	ldrb	r2, [r7, #3]
 8002972:	4611      	mov	r1, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f002 fbc9 	bl	800510c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800297a:	78fb      	ldrb	r3, [r7, #3]
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4413      	add	r3, r2
 8002982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002986:	461a      	mov	r2, r3
 8002988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800298c:	6093      	str	r3, [r2, #8]
 800298e:	e1ee      	b.n	8002d6e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	78fa      	ldrb	r2, [r7, #3]
 8002996:	4611      	mov	r1, r2
 8002998:	4618      	mov	r0, r3
 800299a:	f002 fb3a 	bl	8005012 <USB_ReadChInterrupts>
 800299e:	4603      	mov	r3, r0
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	f040 81df 	bne.w	8002d68 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80029aa:	78fb      	ldrb	r3, [r7, #3]
 80029ac:	015a      	lsls	r2, r3, #5
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b6:	461a      	mov	r2, r3
 80029b8:	2302      	movs	r3, #2
 80029ba:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80029bc:	78fa      	ldrb	r2, [r7, #3]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	334d      	adds	r3, #77	; 0x4d
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	f040 8093 	bne.w	8002afa <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	334d      	adds	r3, #77	; 0x4d
 80029e4:	2202      	movs	r2, #2
 80029e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80029e8:	78fa      	ldrb	r2, [r7, #3]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	334c      	adds	r3, #76	; 0x4c
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80029fc:	78fa      	ldrb	r2, [r7, #3]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	3326      	adds	r3, #38	; 0x26
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d00b      	beq.n	8002a2a <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	1a9b      	subs	r3, r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	3326      	adds	r3, #38	; 0x26
 8002a22:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	f040 8190 	bne.w	8002d4a <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	799b      	ldrb	r3, [r3, #6]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d115      	bne.n	8002a5e <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002a32:	78fa      	ldrb	r2, [r7, #3]
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	1a9b      	subs	r3, r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	333d      	adds	r3, #61	; 0x3d
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	78fa      	ldrb	r2, [r7, #3]
 8002a46:	f083 0301 	eor.w	r3, r3, #1
 8002a4a:	b2d8      	uxtb	r0, r3
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	1a9b      	subs	r3, r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	333d      	adds	r3, #61	; 0x3d
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	799b      	ldrb	r3, [r3, #6]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	f040 8171 	bne.w	8002d4a <HCD_HC_OUT_IRQHandler+0x920>
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	3334      	adds	r3, #52	; 0x34
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 8165 	beq.w	8002d4a <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002a80:	78fa      	ldrb	r2, [r7, #3]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	3334      	adds	r3, #52	; 0x34
 8002a90:	6819      	ldr	r1, [r3, #0]
 8002a92:	78fa      	ldrb	r2, [r7, #3]
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	1a9b      	subs	r3, r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4403      	add	r3, r0
 8002aa0:	3328      	adds	r3, #40	; 0x28
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	440b      	add	r3, r1
 8002aa6:	1e59      	subs	r1, r3, #1
 8002aa8:	78fa      	ldrb	r2, [r7, #3]
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4403      	add	r3, r0
 8002ab6:	3328      	adds	r3, #40	; 0x28
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	fbb1 f3f3 	udiv	r3, r1, r3
 8002abe:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 813f 	beq.w	8002d4a <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002acc:	78fa      	ldrb	r2, [r7, #3]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	333d      	adds	r3, #61	; 0x3d
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	78fa      	ldrb	r2, [r7, #3]
 8002ae0:	f083 0301 	eor.w	r3, r3, #1
 8002ae4:	b2d8      	uxtb	r0, r3
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	333d      	adds	r3, #61	; 0x3d
 8002af4:	4602      	mov	r2, r0
 8002af6:	701a      	strb	r2, [r3, #0]
 8002af8:	e127      	b.n	8002d4a <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	1a9b      	subs	r3, r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	334d      	adds	r3, #77	; 0x4d
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d120      	bne.n	8002b52 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b10:	78fa      	ldrb	r2, [r7, #3]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	1a9b      	subs	r3, r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	334d      	adds	r3, #77	; 0x4d
 8002b20:	2202      	movs	r2, #2
 8002b22:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002b24:	78fa      	ldrb	r2, [r7, #3]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	331b      	adds	r3, #27
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	f040 8107 	bne.w	8002d4a <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b3c:	78fa      	ldrb	r2, [r7, #3]
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	1a9b      	subs	r3, r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	334c      	adds	r3, #76	; 0x4c
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	701a      	strb	r2, [r3, #0]
 8002b50:	e0fb      	b.n	8002d4a <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002b52:	78fa      	ldrb	r2, [r7, #3]
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	1a9b      	subs	r3, r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	334d      	adds	r3, #77	; 0x4d
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d13a      	bne.n	8002bde <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b68:	78fa      	ldrb	r2, [r7, #3]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	334d      	adds	r3, #77	; 0x4d
 8002b78:	2202      	movs	r2, #2
 8002b7a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b7c:	78fa      	ldrb	r2, [r7, #3]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	1a9b      	subs	r3, r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	334c      	adds	r3, #76	; 0x4c
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002b90:	78fa      	ldrb	r2, [r7, #3]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	1a9b      	subs	r3, r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	331b      	adds	r3, #27
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	f040 80d1 	bne.w	8002d4a <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	331b      	adds	r3, #27
 8002bb8:	2200      	movs	r2, #0
 8002bba:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	78fa      	ldrb	r2, [r7, #3]
 8002bcc:	0151      	lsls	r1, r2, #5
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	440a      	add	r2, r1
 8002bd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bda:	6053      	str	r3, [r2, #4]
 8002bdc:	e0b5      	b.n	8002d4a <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002bde:	78fa      	ldrb	r2, [r7, #3]
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	1a9b      	subs	r3, r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	334d      	adds	r3, #77	; 0x4d
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b05      	cmp	r3, #5
 8002bf2:	d114      	bne.n	8002c1e <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	334d      	adds	r3, #77	; 0x4d
 8002c04:	2202      	movs	r2, #2
 8002c06:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002c08:	78fa      	ldrb	r2, [r7, #3]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	1a9b      	subs	r3, r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	334c      	adds	r3, #76	; 0x4c
 8002c18:	2202      	movs	r2, #2
 8002c1a:	701a      	strb	r2, [r3, #0]
 8002c1c:	e095      	b.n	8002d4a <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	334d      	adds	r3, #77	; 0x4d
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b06      	cmp	r3, #6
 8002c32:	d114      	bne.n	8002c5e <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c34:	78fa      	ldrb	r2, [r7, #3]
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	334d      	adds	r3, #77	; 0x4d
 8002c44:	2202      	movs	r2, #2
 8002c46:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002c48:	78fa      	ldrb	r2, [r7, #3]
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	1a9b      	subs	r3, r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	334c      	adds	r3, #76	; 0x4c
 8002c58:	2205      	movs	r2, #5
 8002c5a:	701a      	strb	r2, [r3, #0]
 8002c5c:	e075      	b.n	8002d4a <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002c5e:	78fa      	ldrb	r2, [r7, #3]
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	1a9b      	subs	r3, r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	334d      	adds	r3, #77	; 0x4d
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b07      	cmp	r3, #7
 8002c72:	d00a      	beq.n	8002c8a <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002c74:	78fa      	ldrb	r2, [r7, #3]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	1a9b      	subs	r3, r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	334d      	adds	r3, #77	; 0x4d
 8002c84:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002c86:	2b09      	cmp	r3, #9
 8002c88:	d170      	bne.n	8002d6c <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c8a:	78fa      	ldrb	r2, [r7, #3]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	334d      	adds	r3, #77	; 0x4d
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002c9e:	78fa      	ldrb	r2, [r7, #3]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	1a9b      	subs	r3, r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	3344      	adds	r3, #68	; 0x44
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	1c59      	adds	r1, r3, #1
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4403      	add	r3, r0
 8002cbe:	3344      	adds	r3, #68	; 0x44
 8002cc0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002cc2:	78fa      	ldrb	r2, [r7, #3]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	1a9b      	subs	r3, r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	3344      	adds	r3, #68	; 0x44
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d914      	bls.n	8002d02 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	3344      	adds	r3, #68	; 0x44
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002cec:	78fa      	ldrb	r2, [r7, #3]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	334c      	adds	r3, #76	; 0x4c
 8002cfc:	2204      	movs	r2, #4
 8002cfe:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d00:	e022      	b.n	8002d48 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d02:	78fa      	ldrb	r2, [r7, #3]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	334c      	adds	r3, #76	; 0x4c
 8002d12:	2202      	movs	r2, #2
 8002d14:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	015a      	lsls	r2, r3, #5
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d2c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d34:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	015a      	lsls	r2, r3, #5
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d42:	461a      	mov	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d48:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002d4a:	78fa      	ldrb	r2, [r7, #3]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	334c      	adds	r3, #76	; 0x4c
 8002d5a:	781a      	ldrb	r2, [r3, #0]
 8002d5c:	78fb      	ldrb	r3, [r7, #3]
 8002d5e:	4619      	mov	r1, r3
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f005 f925 	bl	8007fb0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002d66:	e002      	b.n	8002d6e <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8002d68:	bf00      	nop
 8002d6a:	e000      	b.n	8002d6e <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8002d6c:	bf00      	nop
  }
}
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08a      	sub	sp, #40	; 0x28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	f003 030f 	and.w	r3, r3, #15
 8002d94:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	0c5b      	lsrs	r3, r3, #17
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	091b      	lsrs	r3, r3, #4
 8002da4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002da8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d004      	beq.n	8002dba <HCD_RXQLVL_IRQHandler+0x46>
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2b05      	cmp	r3, #5
 8002db4:	f000 80b6 	beq.w	8002f24 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002db8:	e0b7      	b.n	8002f2a <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80b3 	beq.w	8002f28 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	332c      	adds	r3, #44	; 0x2c
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 80a7 	beq.w	8002f28 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4613      	mov	r3, r2
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	3338      	adds	r3, #56	; 0x38
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	18d1      	adds	r1, r2, r3
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4613      	mov	r3, r2
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4403      	add	r3, r0
 8002dfe:	3334      	adds	r3, #52	; 0x34
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4299      	cmp	r1, r3
 8002e04:	f200 8083 	bhi.w	8002f0e <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4613      	mov	r3, r2
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	1a9b      	subs	r3, r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	332c      	adds	r3, #44	; 0x2c
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	b292      	uxth	r2, r2
 8002e22:	4619      	mov	r1, r3
 8002e24:	f002 f88a 	bl	8004f3c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	1a9b      	subs	r3, r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	332c      	adds	r3, #44	; 0x2c
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	18d1      	adds	r1, r2, r3
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4613      	mov	r3, r2
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4403      	add	r3, r0
 8002e4c:	332c      	adds	r3, #44	; 0x2c
 8002e4e:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4613      	mov	r3, r2
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	1a9b      	subs	r3, r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	3338      	adds	r3, #56	; 0x38
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	18d1      	adds	r1, r2, r3
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4403      	add	r3, r0
 8002e74:	3338      	adds	r3, #56	; 0x38
 8002e76:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	0cdb      	lsrs	r3, r3, #19
 8002e88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e8c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4613      	mov	r3, r2
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	1a9b      	subs	r3, r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	3328      	adds	r3, #40	; 0x28
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d13f      	bne.n	8002f28 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d03c      	beq.n	8002f28 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ec4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ecc:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	015a      	lsls	r2, r3, #5
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eda:	461a      	mov	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	1a9b      	subs	r3, r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	333c      	adds	r3, #60	; 0x3c
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	f083 0301 	eor.w	r3, r3, #1
 8002ef6:	b2d8      	uxtb	r0, r3
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4613      	mov	r3, r2
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	333c      	adds	r3, #60	; 0x3c
 8002f08:	4602      	mov	r2, r0
 8002f0a:	701a      	strb	r2, [r3, #0]
      break;
 8002f0c:	e00c      	b.n	8002f28 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4613      	mov	r3, r2
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	1a9b      	subs	r3, r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	334c      	adds	r3, #76	; 0x4c
 8002f1e:	2204      	movs	r2, #4
 8002f20:	701a      	strb	r2, [r3, #0]
      break;
 8002f22:	e001      	b.n	8002f28 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8002f24:	bf00      	nop
 8002f26:	e000      	b.n	8002f2a <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8002f28:	bf00      	nop
  }
}
 8002f2a:	bf00      	nop
 8002f2c:	3728      	adds	r7, #40	; 0x28
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b086      	sub	sp, #24
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f5e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d10b      	bne.n	8002f82 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d102      	bne.n	8002f7a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f004 ffff 	bl	8007f78 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f043 0302 	orr.w	r3, r3, #2
 8002f80:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d132      	bne.n	8002ff2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f043 0308 	orr.w	r3, r3, #8
 8002f92:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 0304 	and.w	r3, r3, #4
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d126      	bne.n	8002fec <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	7a5b      	ldrb	r3, [r3, #9]
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d113      	bne.n	8002fce <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002fac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fb0:	d106      	bne.n	8002fc0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2102      	movs	r1, #2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f002 f859 	bl	8005070 <USB_InitFSLSPClkSel>
 8002fbe:	e011      	b.n	8002fe4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f002 f852 	bl	8005070 <USB_InitFSLSPClkSel>
 8002fcc:	e00a      	b.n	8002fe4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	79db      	ldrb	r3, [r3, #7]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d106      	bne.n	8002fe4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fdc:	461a      	mov	r2, r3
 8002fde:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002fe2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f004 fff5 	bl	8007fd4 <HAL_HCD_PortEnabled_Callback>
 8002fea:	e002      	b.n	8002ff2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f004 ffff 	bl	8007ff0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f003 0320 	and.w	r3, r3, #32
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d103      	bne.n	8003004 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f043 0320 	orr.w	r3, r3, #32
 8003002:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800300a:	461a      	mov	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	6013      	str	r3, [r2, #0]
}
 8003010:	bf00      	nop
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e12b      	b.n	8003282 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fd fd3a 	bl	8000ab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2224      	movs	r2, #36	; 0x24
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0201 	bic.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800306a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800307a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800307c:	f001 fa20 	bl	80044c0 <HAL_RCC_GetPCLK1Freq>
 8003080:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	4a81      	ldr	r2, [pc, #516]	; (800328c <HAL_I2C_Init+0x274>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d807      	bhi.n	800309c <HAL_I2C_Init+0x84>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4a80      	ldr	r2, [pc, #512]	; (8003290 <HAL_I2C_Init+0x278>)
 8003090:	4293      	cmp	r3, r2
 8003092:	bf94      	ite	ls
 8003094:	2301      	movls	r3, #1
 8003096:	2300      	movhi	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	e006      	b.n	80030aa <HAL_I2C_Init+0x92>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4a7d      	ldr	r2, [pc, #500]	; (8003294 <HAL_I2C_Init+0x27c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	bf94      	ite	ls
 80030a4:	2301      	movls	r3, #1
 80030a6:	2300      	movhi	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e0e7      	b.n	8003282 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4a78      	ldr	r2, [pc, #480]	; (8003298 <HAL_I2C_Init+0x280>)
 80030b6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ba:	0c9b      	lsrs	r3, r3, #18
 80030bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	4a6a      	ldr	r2, [pc, #424]	; (800328c <HAL_I2C_Init+0x274>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d802      	bhi.n	80030ec <HAL_I2C_Init+0xd4>
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	3301      	adds	r3, #1
 80030ea:	e009      	b.n	8003100 <HAL_I2C_Init+0xe8>
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030f2:	fb02 f303 	mul.w	r3, r2, r3
 80030f6:	4a69      	ldr	r2, [pc, #420]	; (800329c <HAL_I2C_Init+0x284>)
 80030f8:	fba2 2303 	umull	r2, r3, r2, r3
 80030fc:	099b      	lsrs	r3, r3, #6
 80030fe:	3301      	adds	r3, #1
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	430b      	orrs	r3, r1
 8003106:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003112:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	495c      	ldr	r1, [pc, #368]	; (800328c <HAL_I2C_Init+0x274>)
 800311c:	428b      	cmp	r3, r1
 800311e:	d819      	bhi.n	8003154 <HAL_I2C_Init+0x13c>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	1e59      	subs	r1, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	fbb1 f3f3 	udiv	r3, r1, r3
 800312e:	1c59      	adds	r1, r3, #1
 8003130:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003134:	400b      	ands	r3, r1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_I2C_Init+0x138>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1e59      	subs	r1, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	fbb1 f3f3 	udiv	r3, r1, r3
 8003148:	3301      	adds	r3, #1
 800314a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314e:	e051      	b.n	80031f4 <HAL_I2C_Init+0x1dc>
 8003150:	2304      	movs	r3, #4
 8003152:	e04f      	b.n	80031f4 <HAL_I2C_Init+0x1dc>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d111      	bne.n	8003180 <HAL_I2C_Init+0x168>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	1e58      	subs	r0, r3, #1
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6859      	ldr	r1, [r3, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	440b      	add	r3, r1
 800316a:	fbb0 f3f3 	udiv	r3, r0, r3
 800316e:	3301      	adds	r3, #1
 8003170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003174:	2b00      	cmp	r3, #0
 8003176:	bf0c      	ite	eq
 8003178:	2301      	moveq	r3, #1
 800317a:	2300      	movne	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	e012      	b.n	80031a6 <HAL_I2C_Init+0x18e>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	1e58      	subs	r0, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6859      	ldr	r1, [r3, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	0099      	lsls	r1, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	fbb0 f3f3 	udiv	r3, r0, r3
 8003196:	3301      	adds	r3, #1
 8003198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319c:	2b00      	cmp	r3, #0
 800319e:	bf0c      	ite	eq
 80031a0:	2301      	moveq	r3, #1
 80031a2:	2300      	movne	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_I2C_Init+0x196>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e022      	b.n	80031f4 <HAL_I2C_Init+0x1dc>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10e      	bne.n	80031d4 <HAL_I2C_Init+0x1bc>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1e58      	subs	r0, r3, #1
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6859      	ldr	r1, [r3, #4]
 80031be:	460b      	mov	r3, r1
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	440b      	add	r3, r1
 80031c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80031c8:	3301      	adds	r3, #1
 80031ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031d2:	e00f      	b.n	80031f4 <HAL_I2C_Init+0x1dc>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1e58      	subs	r0, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6859      	ldr	r1, [r3, #4]
 80031dc:	460b      	mov	r3, r1
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	0099      	lsls	r1, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ea:	3301      	adds	r3, #1
 80031ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	6809      	ldr	r1, [r1, #0]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69da      	ldr	r2, [r3, #28]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003222:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6911      	ldr	r1, [r2, #16]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	68d2      	ldr	r2, [r2, #12]
 800322e:	4311      	orrs	r1, r2
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	430b      	orrs	r3, r1
 8003236:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695a      	ldr	r2, [r3, #20]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	000186a0 	.word	0x000186a0
 8003290:	001e847f 	.word	0x001e847f
 8003294:	003d08ff 	.word	0x003d08ff
 8003298:	431bde83 	.word	0x431bde83
 800329c:	10624dd3 	.word	0x10624dd3

080032a0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e128      	b.n	8003504 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d109      	bne.n	80032d2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a90      	ldr	r2, [pc, #576]	; (800350c <HAL_I2S_Init+0x26c>)
 80032ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7fd fc3b 	bl	8000b48 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2202      	movs	r2, #2
 80032d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6812      	ldr	r2, [r2, #0]
 80032e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032e8:	f023 030f 	bic.w	r3, r3, #15
 80032ec:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2202      	movs	r2, #2
 80032f4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d060      	beq.n	80033c0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d102      	bne.n	800330c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003306:	2310      	movs	r3, #16
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	e001      	b.n	8003310 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800330c:	2320      	movs	r3, #32
 800330e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	2b20      	cmp	r3, #32
 8003316:	d802      	bhi.n	800331e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800331e:	2001      	movs	r0, #1
 8003320:	f001 fa0a 	bl	8004738 <HAL_RCCEx_GetPeriphCLKFreq>
 8003324:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800332e:	d125      	bne.n	800337c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d010      	beq.n	800335a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	461a      	mov	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	fbb2 f3f3 	udiv	r3, r2, r3
 8003354:	3305      	adds	r3, #5
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	e01f      	b.n	800339a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	fbb2 f2f3 	udiv	r2, r2, r3
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	461a      	mov	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	fbb2 f3f3 	udiv	r3, r2, r3
 8003376:	3305      	adds	r3, #5
 8003378:	613b      	str	r3, [r7, #16]
 800337a:	e00e      	b.n	800339a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	fbb2 f2f3 	udiv	r2, r2, r3
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	461a      	mov	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	fbb2 f3f3 	udiv	r3, r2, r3
 8003396:	3305      	adds	r3, #5
 8003398:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	4a5c      	ldr	r2, [pc, #368]	; (8003510 <HAL_I2S_Init+0x270>)
 800339e:	fba2 2303 	umull	r2, r3, r2, r3
 80033a2:	08db      	lsrs	r3, r3, #3
 80033a4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	085b      	lsrs	r3, r3, #1
 80033b6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	021b      	lsls	r3, r3, #8
 80033bc:	61bb      	str	r3, [r7, #24]
 80033be:	e003      	b.n	80033c8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80033c0:	2302      	movs	r3, #2
 80033c2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d902      	bls.n	80033d4 <HAL_I2S_Init+0x134>
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	2bff      	cmp	r3, #255	; 0xff
 80033d2:	d907      	bls.n	80033e4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d8:	f043 0210 	orr.w	r2, r3, #16
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e08f      	b.n	8003504 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	ea42 0103 	orr.w	r1, r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69fa      	ldr	r2, [r7, #28]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003402:	f023 030f 	bic.w	r3, r3, #15
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6851      	ldr	r1, [r2, #4]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6892      	ldr	r2, [r2, #8]
 800340e:	4311      	orrs	r1, r2
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	68d2      	ldr	r2, [r2, #12]
 8003414:	4311      	orrs	r1, r2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6992      	ldr	r2, [r2, #24]
 800341a:	430a      	orrs	r2, r1
 800341c:	431a      	orrs	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003426:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d161      	bne.n	80034f4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a38      	ldr	r2, [pc, #224]	; (8003514 <HAL_I2S_Init+0x274>)
 8003434:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a37      	ldr	r2, [pc, #220]	; (8003518 <HAL_I2S_Init+0x278>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d101      	bne.n	8003444 <HAL_I2S_Init+0x1a4>
 8003440:	4b36      	ldr	r3, [pc, #216]	; (800351c <HAL_I2S_Init+0x27c>)
 8003442:	e001      	b.n	8003448 <HAL_I2S_Init+0x1a8>
 8003444:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	4932      	ldr	r1, [pc, #200]	; (8003518 <HAL_I2S_Init+0x278>)
 8003450:	428a      	cmp	r2, r1
 8003452:	d101      	bne.n	8003458 <HAL_I2S_Init+0x1b8>
 8003454:	4a31      	ldr	r2, [pc, #196]	; (800351c <HAL_I2S_Init+0x27c>)
 8003456:	e001      	b.n	800345c <HAL_I2S_Init+0x1bc>
 8003458:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800345c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003460:	f023 030f 	bic.w	r3, r3, #15
 8003464:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a2b      	ldr	r2, [pc, #172]	; (8003518 <HAL_I2S_Init+0x278>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d101      	bne.n	8003474 <HAL_I2S_Init+0x1d4>
 8003470:	4b2a      	ldr	r3, [pc, #168]	; (800351c <HAL_I2S_Init+0x27c>)
 8003472:	e001      	b.n	8003478 <HAL_I2S_Init+0x1d8>
 8003474:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003478:	2202      	movs	r2, #2
 800347a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a25      	ldr	r2, [pc, #148]	; (8003518 <HAL_I2S_Init+0x278>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d101      	bne.n	800348a <HAL_I2S_Init+0x1ea>
 8003486:	4b25      	ldr	r3, [pc, #148]	; (800351c <HAL_I2S_Init+0x27c>)
 8003488:	e001      	b.n	800348e <HAL_I2S_Init+0x1ee>
 800348a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800349a:	d003      	beq.n	80034a4 <HAL_I2S_Init+0x204>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d103      	bne.n	80034ac <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80034a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	e001      	b.n	80034b0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80034ac:	2300      	movs	r3, #0
 80034ae:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034ba:	4313      	orrs	r3, r2
 80034bc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034c4:	4313      	orrs	r3, r2
 80034c6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034ce:	4313      	orrs	r3, r2
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	897b      	ldrh	r3, [r7, #10]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034dc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a0d      	ldr	r2, [pc, #52]	; (8003518 <HAL_I2S_Init+0x278>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d101      	bne.n	80034ec <HAL_I2S_Init+0x24c>
 80034e8:	4b0c      	ldr	r3, [pc, #48]	; (800351c <HAL_I2S_Init+0x27c>)
 80034ea:	e001      	b.n	80034f0 <HAL_I2S_Init+0x250>
 80034ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034f0:	897a      	ldrh	r2, [r7, #10]
 80034f2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3720      	adds	r7, #32
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	08003617 	.word	0x08003617
 8003510:	cccccccd 	.word	0xcccccccd
 8003514:	0800372d 	.word	0x0800372d
 8003518:	40003800 	.word	0x40003800
 800351c:	40003400 	.word	0x40003400

08003520 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	881a      	ldrh	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	1c9a      	adds	r2, r3, #2
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358c:	b29b      	uxth	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10e      	bne.n	80035b0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035a0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff ffb8 	bl	8003520 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80035b0:	bf00      	nop
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ca:	b292      	uxth	r2, r2
 80035cc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	1c9a      	adds	r2, r3, #2
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3b01      	subs	r3, #1
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10e      	bne.n	800360e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035fe:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7ff ff93 	bl	8003534 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800360e:	bf00      	nop
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b086      	sub	sp, #24
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b04      	cmp	r3, #4
 8003630:	d13a      	bne.n	80036a8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b01      	cmp	r3, #1
 800363a:	d109      	bne.n	8003650 <I2S_IRQHandler+0x3a>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003646:	2b40      	cmp	r3, #64	; 0x40
 8003648:	d102      	bne.n	8003650 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff ffb4 	bl	80035b8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003656:	2b40      	cmp	r3, #64	; 0x40
 8003658:	d126      	bne.n	80036a8 <I2S_IRQHandler+0x92>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b20      	cmp	r3, #32
 8003666:	d11f      	bne.n	80036a8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003676:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003678:	2300      	movs	r3, #0
 800367a:	613b      	str	r3, [r7, #16]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369a:	f043 0202 	orr.w	r2, r3, #2
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff ff50 	bl	8003548 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	d136      	bne.n	8003722 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d109      	bne.n	80036d2 <I2S_IRQHandler+0xbc>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c8:	2b80      	cmp	r3, #128	; 0x80
 80036ca:	d102      	bne.n	80036d2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff ff45 	bl	800355c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d122      	bne.n	8003722 <I2S_IRQHandler+0x10c>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b20      	cmp	r3, #32
 80036e8:	d11b      	bne.n	8003722 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036f8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003714:	f043 0204 	orr.w	r2, r3, #4
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff ff13 	bl	8003548 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003722:	bf00      	nop
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a92      	ldr	r2, [pc, #584]	; (800398c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d101      	bne.n	800374a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003746:	4b92      	ldr	r3, [pc, #584]	; (8003990 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003748:	e001      	b.n	800374e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800374a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a8b      	ldr	r2, [pc, #556]	; (800398c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d101      	bne.n	8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003764:	4b8a      	ldr	r3, [pc, #552]	; (8003990 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003766:	e001      	b.n	800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003768:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003778:	d004      	beq.n	8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	f040 8099 	bne.w	80038b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b02      	cmp	r3, #2
 800378c:	d107      	bne.n	800379e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003794:	2b00      	cmp	r3, #0
 8003796:	d002      	beq.n	800379e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f925 	bl	80039e8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d107      	bne.n	80037b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f9c8 	bl	8003b48 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037be:	2b40      	cmp	r3, #64	; 0x40
 80037c0:	d13a      	bne.n	8003838 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d035      	beq.n	8003838 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a6e      	ldr	r2, [pc, #440]	; (800398c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d101      	bne.n	80037da <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80037d6:	4b6e      	ldr	r3, [pc, #440]	; (8003990 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037d8:	e001      	b.n	80037de <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80037da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4969      	ldr	r1, [pc, #420]	; (800398c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037e6:	428b      	cmp	r3, r1
 80037e8:	d101      	bne.n	80037ee <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80037ea:	4b69      	ldr	r3, [pc, #420]	; (8003990 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037ec:	e001      	b.n	80037f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80037ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037f6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003806:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003808:	2300      	movs	r3, #0
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382a:	f043 0202 	orr.w	r2, r3, #2
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff fe88 	bl	8003548 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b08      	cmp	r3, #8
 8003840:	f040 80c3 	bne.w	80039ca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f003 0320 	and.w	r3, r3, #32
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 80bd 	beq.w	80039ca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800385e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a49      	ldr	r2, [pc, #292]	; (800398c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d101      	bne.n	800386e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800386a:	4b49      	ldr	r3, [pc, #292]	; (8003990 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800386c:	e001      	b.n	8003872 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800386e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4944      	ldr	r1, [pc, #272]	; (800398c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800387a:	428b      	cmp	r3, r1
 800387c:	d101      	bne.n	8003882 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800387e:	4b44      	ldr	r3, [pc, #272]	; (8003990 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003880:	e001      	b.n	8003886 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003882:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003886:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800388a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800388c:	2300      	movs	r3, #0
 800388e:	60bb      	str	r3, [r7, #8]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	60bb      	str	r3, [r7, #8]
 8003898:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a6:	f043 0204 	orr.w	r2, r3, #4
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff fe4a 	bl	8003548 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038b4:	e089      	b.n	80039ca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d107      	bne.n	80038d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f8be 	bl	8003a4c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d107      	bne.n	80038ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f8fd 	bl	8003ae4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f0:	2b40      	cmp	r3, #64	; 0x40
 80038f2:	d12f      	bne.n	8003954 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d02a      	beq.n	8003954 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800390c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a1e      	ldr	r2, [pc, #120]	; (800398c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d101      	bne.n	800391c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003918:	4b1d      	ldr	r3, [pc, #116]	; (8003990 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800391a:	e001      	b.n	8003920 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800391c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4919      	ldr	r1, [pc, #100]	; (800398c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003928:	428b      	cmp	r3, r1
 800392a:	d101      	bne.n	8003930 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800392c:	4b18      	ldr	r3, [pc, #96]	; (8003990 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800392e:	e001      	b.n	8003934 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003930:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003934:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003938:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	f043 0202 	orr.w	r2, r3, #2
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff fdfa 	bl	8003548 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b08      	cmp	r3, #8
 800395c:	d136      	bne.n	80039cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f003 0320 	and.w	r3, r3, #32
 8003964:	2b00      	cmp	r3, #0
 8003966:	d031      	beq.n	80039cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a07      	ldr	r2, [pc, #28]	; (800398c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d101      	bne.n	8003976 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003972:	4b07      	ldr	r3, [pc, #28]	; (8003990 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003974:	e001      	b.n	800397a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003976:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4902      	ldr	r1, [pc, #8]	; (800398c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003982:	428b      	cmp	r3, r1
 8003984:	d106      	bne.n	8003994 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003986:	4b02      	ldr	r3, [pc, #8]	; (8003990 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003988:	e006      	b.n	8003998 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800398a:	bf00      	nop
 800398c:	40003800 	.word	0x40003800
 8003990:	40003400 	.word	0x40003400
 8003994:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003998:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800399c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039ac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	f043 0204 	orr.w	r2, r3, #4
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff fdc0 	bl	8003548 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039c8:	e000      	b.n	80039cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039ca:	bf00      	nop
}
 80039cc:	bf00      	nop
 80039ce:	3720      	adds	r7, #32
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	1c99      	adds	r1, r3, #2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6251      	str	r1, [r2, #36]	; 0x24
 80039fa:	881a      	ldrh	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d113      	bne.n	8003a42 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a28:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d106      	bne.n	8003a42 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7ff ffc9 	bl	80039d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	1c99      	adds	r1, r3, #2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6251      	str	r1, [r2, #36]	; 0x24
 8003a5e:	8819      	ldrh	r1, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a1d      	ldr	r2, [pc, #116]	; (8003adc <I2SEx_TxISR_I2SExt+0x90>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d101      	bne.n	8003a6e <I2SEx_TxISR_I2SExt+0x22>
 8003a6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ae0 <I2SEx_TxISR_I2SExt+0x94>)
 8003a6c:	e001      	b.n	8003a72 <I2SEx_TxISR_I2SExt+0x26>
 8003a6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a72:	460a      	mov	r2, r1
 8003a74:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d121      	bne.n	8003ad2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a12      	ldr	r2, [pc, #72]	; (8003adc <I2SEx_TxISR_I2SExt+0x90>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d101      	bne.n	8003a9c <I2SEx_TxISR_I2SExt+0x50>
 8003a98:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <I2SEx_TxISR_I2SExt+0x94>)
 8003a9a:	e001      	b.n	8003aa0 <I2SEx_TxISR_I2SExt+0x54>
 8003a9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	490d      	ldr	r1, [pc, #52]	; (8003adc <I2SEx_TxISR_I2SExt+0x90>)
 8003aa8:	428b      	cmp	r3, r1
 8003aaa:	d101      	bne.n	8003ab0 <I2SEx_TxISR_I2SExt+0x64>
 8003aac:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <I2SEx_TxISR_I2SExt+0x94>)
 8003aae:	e001      	b.n	8003ab4 <I2SEx_TxISR_I2SExt+0x68>
 8003ab0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ab4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ab8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d106      	bne.n	8003ad2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff ff81 	bl	80039d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40003800 	.word	0x40003800
 8003ae0:	40003400 	.word	0x40003400

08003ae4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68d8      	ldr	r0, [r3, #12]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af6:	1c99      	adds	r1, r3, #2
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003afc:	b282      	uxth	r2, r0
 8003afe:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d113      	bne.n	8003b40 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b26:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d106      	bne.n	8003b40 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff ff4a 	bl	80039d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a20      	ldr	r2, [pc, #128]	; (8003bd8 <I2SEx_RxISR_I2SExt+0x90>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d101      	bne.n	8003b5e <I2SEx_RxISR_I2SExt+0x16>
 8003b5a:	4b20      	ldr	r3, [pc, #128]	; (8003bdc <I2SEx_RxISR_I2SExt+0x94>)
 8003b5c:	e001      	b.n	8003b62 <I2SEx_RxISR_I2SExt+0x1a>
 8003b5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b62:	68d8      	ldr	r0, [r3, #12]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	1c99      	adds	r1, r3, #2
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b6e:	b282      	uxth	r2, r0
 8003b70:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d121      	bne.n	8003bce <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a12      	ldr	r2, [pc, #72]	; (8003bd8 <I2SEx_RxISR_I2SExt+0x90>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d101      	bne.n	8003b98 <I2SEx_RxISR_I2SExt+0x50>
 8003b94:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <I2SEx_RxISR_I2SExt+0x94>)
 8003b96:	e001      	b.n	8003b9c <I2SEx_RxISR_I2SExt+0x54>
 8003b98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	490d      	ldr	r1, [pc, #52]	; (8003bd8 <I2SEx_RxISR_I2SExt+0x90>)
 8003ba4:	428b      	cmp	r3, r1
 8003ba6:	d101      	bne.n	8003bac <I2SEx_RxISR_I2SExt+0x64>
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <I2SEx_RxISR_I2SExt+0x94>)
 8003baa:	e001      	b.n	8003bb0 <I2SEx_RxISR_I2SExt+0x68>
 8003bac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bb0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bb4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d106      	bne.n	8003bce <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff ff03 	bl	80039d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40003800 	.word	0x40003800
 8003bdc:	40003400 	.word	0x40003400

08003be0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e267      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d075      	beq.n	8003cea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bfe:	4b88      	ldr	r3, [pc, #544]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 030c 	and.w	r3, r3, #12
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d00c      	beq.n	8003c24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c0a:	4b85      	ldr	r3, [pc, #532]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d112      	bne.n	8003c3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c16:	4b82      	ldr	r3, [pc, #520]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c22:	d10b      	bne.n	8003c3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c24:	4b7e      	ldr	r3, [pc, #504]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d05b      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x108>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d157      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e242      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c44:	d106      	bne.n	8003c54 <HAL_RCC_OscConfig+0x74>
 8003c46:	4b76      	ldr	r3, [pc, #472]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a75      	ldr	r2, [pc, #468]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	e01d      	b.n	8003c90 <HAL_RCC_OscConfig+0xb0>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c5c:	d10c      	bne.n	8003c78 <HAL_RCC_OscConfig+0x98>
 8003c5e:	4b70      	ldr	r3, [pc, #448]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a6f      	ldr	r2, [pc, #444]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	4b6d      	ldr	r3, [pc, #436]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a6c      	ldr	r2, [pc, #432]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	e00b      	b.n	8003c90 <HAL_RCC_OscConfig+0xb0>
 8003c78:	4b69      	ldr	r3, [pc, #420]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a68      	ldr	r2, [pc, #416]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c82:	6013      	str	r3, [r2, #0]
 8003c84:	4b66      	ldr	r3, [pc, #408]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a65      	ldr	r2, [pc, #404]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d013      	beq.n	8003cc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c98:	f7fd f950 	bl	8000f3c <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ca0:	f7fd f94c 	bl	8000f3c <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b64      	cmp	r3, #100	; 0x64
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e207      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb2:	4b5b      	ldr	r3, [pc, #364]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0f0      	beq.n	8003ca0 <HAL_RCC_OscConfig+0xc0>
 8003cbe:	e014      	b.n	8003cea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc0:	f7fd f93c 	bl	8000f3c <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cc8:	f7fd f938 	bl	8000f3c <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b64      	cmp	r3, #100	; 0x64
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e1f3      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cda:	4b51      	ldr	r3, [pc, #324]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0xe8>
 8003ce6:	e000      	b.n	8003cea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d063      	beq.n	8003dbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cf6:	4b4a      	ldr	r3, [pc, #296]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 030c 	and.w	r3, r3, #12
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00b      	beq.n	8003d1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d02:	4b47      	ldr	r3, [pc, #284]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d11c      	bne.n	8003d48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d0e:	4b44      	ldr	r3, [pc, #272]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d116      	bne.n	8003d48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d1a:	4b41      	ldr	r3, [pc, #260]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d005      	beq.n	8003d32 <HAL_RCC_OscConfig+0x152>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d001      	beq.n	8003d32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e1c7      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d32:	4b3b      	ldr	r3, [pc, #236]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	4937      	ldr	r1, [pc, #220]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d46:	e03a      	b.n	8003dbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d020      	beq.n	8003d92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d50:	4b34      	ldr	r3, [pc, #208]	; (8003e24 <HAL_RCC_OscConfig+0x244>)
 8003d52:	2201      	movs	r2, #1
 8003d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d56:	f7fd f8f1 	bl	8000f3c <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d5e:	f7fd f8ed 	bl	8000f3c <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e1a8      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d70:	4b2b      	ldr	r3, [pc, #172]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0f0      	beq.n	8003d5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d7c:	4b28      	ldr	r3, [pc, #160]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	4925      	ldr	r1, [pc, #148]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	600b      	str	r3, [r1, #0]
 8003d90:	e015      	b.n	8003dbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d92:	4b24      	ldr	r3, [pc, #144]	; (8003e24 <HAL_RCC_OscConfig+0x244>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d98:	f7fd f8d0 	bl	8000f3c <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003da0:	f7fd f8cc 	bl	8000f3c <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e187      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003db2:	4b1b      	ldr	r3, [pc, #108]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1f0      	bne.n	8003da0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d036      	beq.n	8003e38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d016      	beq.n	8003e00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dd2:	4b15      	ldr	r3, [pc, #84]	; (8003e28 <HAL_RCC_OscConfig+0x248>)
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd8:	f7fd f8b0 	bl	8000f3c <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003de0:	f7fd f8ac 	bl	8000f3c <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e167      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003df2:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0f0      	beq.n	8003de0 <HAL_RCC_OscConfig+0x200>
 8003dfe:	e01b      	b.n	8003e38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e00:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <HAL_RCC_OscConfig+0x248>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e06:	f7fd f899 	bl	8000f3c <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e0c:	e00e      	b.n	8003e2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e0e:	f7fd f895 	bl	8000f3c <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d907      	bls.n	8003e2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e150      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
 8003e20:	40023800 	.word	0x40023800
 8003e24:	42470000 	.word	0x42470000
 8003e28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e2c:	4b88      	ldr	r3, [pc, #544]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1ea      	bne.n	8003e0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 8097 	beq.w	8003f74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e46:	2300      	movs	r3, #0
 8003e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e4a:	4b81      	ldr	r3, [pc, #516]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10f      	bne.n	8003e76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e56:	2300      	movs	r3, #0
 8003e58:	60bb      	str	r3, [r7, #8]
 8003e5a:	4b7d      	ldr	r3, [pc, #500]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	4a7c      	ldr	r2, [pc, #496]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e64:	6413      	str	r3, [r2, #64]	; 0x40
 8003e66:	4b7a      	ldr	r3, [pc, #488]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6e:	60bb      	str	r3, [r7, #8]
 8003e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e72:	2301      	movs	r3, #1
 8003e74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e76:	4b77      	ldr	r3, [pc, #476]	; (8004054 <HAL_RCC_OscConfig+0x474>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d118      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e82:	4b74      	ldr	r3, [pc, #464]	; (8004054 <HAL_RCC_OscConfig+0x474>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a73      	ldr	r2, [pc, #460]	; (8004054 <HAL_RCC_OscConfig+0x474>)
 8003e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e8e:	f7fd f855 	bl	8000f3c <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e96:	f7fd f851 	bl	8000f3c <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e10c      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea8:	4b6a      	ldr	r3, [pc, #424]	; (8004054 <HAL_RCC_OscConfig+0x474>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0f0      	beq.n	8003e96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d106      	bne.n	8003eca <HAL_RCC_OscConfig+0x2ea>
 8003ebc:	4b64      	ldr	r3, [pc, #400]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec0:	4a63      	ldr	r2, [pc, #396]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003ec2:	f043 0301 	orr.w	r3, r3, #1
 8003ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec8:	e01c      	b.n	8003f04 <HAL_RCC_OscConfig+0x324>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b05      	cmp	r3, #5
 8003ed0:	d10c      	bne.n	8003eec <HAL_RCC_OscConfig+0x30c>
 8003ed2:	4b5f      	ldr	r3, [pc, #380]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed6:	4a5e      	ldr	r2, [pc, #376]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003ed8:	f043 0304 	orr.w	r3, r3, #4
 8003edc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ede:	4b5c      	ldr	r3, [pc, #368]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	4a5b      	ldr	r2, [pc, #364]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003ee4:	f043 0301 	orr.w	r3, r3, #1
 8003ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eea:	e00b      	b.n	8003f04 <HAL_RCC_OscConfig+0x324>
 8003eec:	4b58      	ldr	r3, [pc, #352]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef0:	4a57      	ldr	r2, [pc, #348]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003ef2:	f023 0301 	bic.w	r3, r3, #1
 8003ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef8:	4b55      	ldr	r3, [pc, #340]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efc:	4a54      	ldr	r2, [pc, #336]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003efe:	f023 0304 	bic.w	r3, r3, #4
 8003f02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d015      	beq.n	8003f38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0c:	f7fd f816 	bl	8000f3c <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f12:	e00a      	b.n	8003f2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f14:	f7fd f812 	bl	8000f3c <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e0cb      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f2a:	4b49      	ldr	r3, [pc, #292]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0ee      	beq.n	8003f14 <HAL_RCC_OscConfig+0x334>
 8003f36:	e014      	b.n	8003f62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f38:	f7fd f800 	bl	8000f3c <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f3e:	e00a      	b.n	8003f56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f40:	f7fc fffc 	bl	8000f3c <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e0b5      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f56:	4b3e      	ldr	r3, [pc, #248]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1ee      	bne.n	8003f40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f62:	7dfb      	ldrb	r3, [r7, #23]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d105      	bne.n	8003f74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f68:	4b39      	ldr	r3, [pc, #228]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	4a38      	ldr	r2, [pc, #224]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 80a1 	beq.w	80040c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f7e:	4b34      	ldr	r3, [pc, #208]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d05c      	beq.n	8004044 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d141      	bne.n	8004016 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f92:	4b31      	ldr	r3, [pc, #196]	; (8004058 <HAL_RCC_OscConfig+0x478>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f98:	f7fc ffd0 	bl	8000f3c <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa0:	f7fc ffcc 	bl	8000f3c <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e087      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb2:	4b27      	ldr	r3, [pc, #156]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f0      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69da      	ldr	r2, [r3, #28]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	019b      	lsls	r3, r3, #6
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd4:	085b      	lsrs	r3, r3, #1
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	041b      	lsls	r3, r3, #16
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	061b      	lsls	r3, r3, #24
 8003fe2:	491b      	ldr	r1, [pc, #108]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe8:	4b1b      	ldr	r3, [pc, #108]	; (8004058 <HAL_RCC_OscConfig+0x478>)
 8003fea:	2201      	movs	r2, #1
 8003fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fee:	f7fc ffa5 	bl	8000f3c <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff4:	e008      	b.n	8004008 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff6:	f7fc ffa1 	bl	8000f3c <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e05c      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004008:	4b11      	ldr	r3, [pc, #68]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0f0      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x416>
 8004014:	e054      	b.n	80040c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004016:	4b10      	ldr	r3, [pc, #64]	; (8004058 <HAL_RCC_OscConfig+0x478>)
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401c:	f7fc ff8e 	bl	8000f3c <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004024:	f7fc ff8a 	bl	8000f3c <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e045      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004036:	4b06      	ldr	r3, [pc, #24]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f0      	bne.n	8004024 <HAL_RCC_OscConfig+0x444>
 8004042:	e03d      	b.n	80040c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d107      	bne.n	800405c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e038      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
 8004050:	40023800 	.word	0x40023800
 8004054:	40007000 	.word	0x40007000
 8004058:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800405c:	4b1b      	ldr	r3, [pc, #108]	; (80040cc <HAL_RCC_OscConfig+0x4ec>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d028      	beq.n	80040bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004074:	429a      	cmp	r2, r3
 8004076:	d121      	bne.n	80040bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004082:	429a      	cmp	r2, r3
 8004084:	d11a      	bne.n	80040bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800408c:	4013      	ands	r3, r2
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004092:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004094:	4293      	cmp	r3, r2
 8004096:	d111      	bne.n	80040bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a2:	085b      	lsrs	r3, r3, #1
 80040a4:	3b01      	subs	r3, #1
 80040a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d107      	bne.n	80040bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40023800 	.word	0x40023800

080040d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0cc      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040e4:	4b68      	ldr	r3, [pc, #416]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d90c      	bls.n	800410c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f2:	4b65      	ldr	r3, [pc, #404]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fa:	4b63      	ldr	r3, [pc, #396]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	429a      	cmp	r2, r3
 8004106:	d001      	beq.n	800410c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e0b8      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d020      	beq.n	800415a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004124:	4b59      	ldr	r3, [pc, #356]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	4a58      	ldr	r2, [pc, #352]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 800412a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800412e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800413c:	4b53      	ldr	r3, [pc, #332]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	4a52      	ldr	r2, [pc, #328]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004146:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004148:	4b50      	ldr	r3, [pc, #320]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	494d      	ldr	r1, [pc, #308]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	4313      	orrs	r3, r2
 8004158:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d044      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d107      	bne.n	800417e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416e:	4b47      	ldr	r3, [pc, #284]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d119      	bne.n	80041ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e07f      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b02      	cmp	r3, #2
 8004184:	d003      	beq.n	800418e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800418a:	2b03      	cmp	r3, #3
 800418c:	d107      	bne.n	800419e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418e:	4b3f      	ldr	r3, [pc, #252]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d109      	bne.n	80041ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e06f      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800419e:	4b3b      	ldr	r3, [pc, #236]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e067      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ae:	4b37      	ldr	r3, [pc, #220]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f023 0203 	bic.w	r2, r3, #3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	4934      	ldr	r1, [pc, #208]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041c0:	f7fc febc 	bl	8000f3c <HAL_GetTick>
 80041c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c6:	e00a      	b.n	80041de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c8:	f7fc feb8 	bl	8000f3c <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e04f      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041de:	4b2b      	ldr	r3, [pc, #172]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 020c 	and.w	r2, r3, #12
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d1eb      	bne.n	80041c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041f0:	4b25      	ldr	r3, [pc, #148]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d20c      	bcs.n	8004218 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fe:	4b22      	ldr	r3, [pc, #136]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004206:	4b20      	ldr	r3, [pc, #128]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0307 	and.w	r3, r3, #7
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d001      	beq.n	8004218 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e032      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	d008      	beq.n	8004236 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004224:	4b19      	ldr	r3, [pc, #100]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	4916      	ldr	r1, [pc, #88]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	4313      	orrs	r3, r2
 8004234:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	2b00      	cmp	r3, #0
 8004240:	d009      	beq.n	8004256 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004242:	4b12      	ldr	r3, [pc, #72]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	490e      	ldr	r1, [pc, #56]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	4313      	orrs	r3, r2
 8004254:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004256:	f000 f821 	bl	800429c <HAL_RCC_GetSysClockFreq>
 800425a:	4602      	mov	r2, r0
 800425c:	4b0b      	ldr	r3, [pc, #44]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	091b      	lsrs	r3, r3, #4
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	490a      	ldr	r1, [pc, #40]	; (8004290 <HAL_RCC_ClockConfig+0x1c0>)
 8004268:	5ccb      	ldrb	r3, [r1, r3]
 800426a:	fa22 f303 	lsr.w	r3, r2, r3
 800426e:	4a09      	ldr	r2, [pc, #36]	; (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 8004270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004272:	4b09      	ldr	r3, [pc, #36]	; (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f7fc fd50 	bl	8000d1c <HAL_InitTick>

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	40023c00 	.word	0x40023c00
 800428c:	40023800 	.word	0x40023800
 8004290:	080082b4 	.word	0x080082b4
 8004294:	20000000 	.word	0x20000000
 8004298:	20000004 	.word	0x20000004

0800429c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800429c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042a0:	b094      	sub	sp, #80	; 0x50
 80042a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	647b      	str	r3, [r7, #68]	; 0x44
 80042a8:	2300      	movs	r3, #0
 80042aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042ac:	2300      	movs	r3, #0
 80042ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042b4:	4b79      	ldr	r3, [pc, #484]	; (800449c <HAL_RCC_GetSysClockFreq+0x200>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f003 030c 	and.w	r3, r3, #12
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d00d      	beq.n	80042dc <HAL_RCC_GetSysClockFreq+0x40>
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	f200 80e1 	bhi.w	8004488 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <HAL_RCC_GetSysClockFreq+0x34>
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d003      	beq.n	80042d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80042ce:	e0db      	b.n	8004488 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042d0:	4b73      	ldr	r3, [pc, #460]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80042d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80042d4:	e0db      	b.n	800448e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042d6:	4b73      	ldr	r3, [pc, #460]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80042d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042da:	e0d8      	b.n	800448e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042dc:	4b6f      	ldr	r3, [pc, #444]	; (800449c <HAL_RCC_GetSysClockFreq+0x200>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042e6:	4b6d      	ldr	r3, [pc, #436]	; (800449c <HAL_RCC_GetSysClockFreq+0x200>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d063      	beq.n	80043ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042f2:	4b6a      	ldr	r3, [pc, #424]	; (800449c <HAL_RCC_GetSysClockFreq+0x200>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	099b      	lsrs	r3, r3, #6
 80042f8:	2200      	movs	r2, #0
 80042fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80042fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004304:	633b      	str	r3, [r7, #48]	; 0x30
 8004306:	2300      	movs	r3, #0
 8004308:	637b      	str	r3, [r7, #52]	; 0x34
 800430a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800430e:	4622      	mov	r2, r4
 8004310:	462b      	mov	r3, r5
 8004312:	f04f 0000 	mov.w	r0, #0
 8004316:	f04f 0100 	mov.w	r1, #0
 800431a:	0159      	lsls	r1, r3, #5
 800431c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004320:	0150      	lsls	r0, r2, #5
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	4621      	mov	r1, r4
 8004328:	1a51      	subs	r1, r2, r1
 800432a:	6139      	str	r1, [r7, #16]
 800432c:	4629      	mov	r1, r5
 800432e:	eb63 0301 	sbc.w	r3, r3, r1
 8004332:	617b      	str	r3, [r7, #20]
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004340:	4659      	mov	r1, fp
 8004342:	018b      	lsls	r3, r1, #6
 8004344:	4651      	mov	r1, sl
 8004346:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800434a:	4651      	mov	r1, sl
 800434c:	018a      	lsls	r2, r1, #6
 800434e:	4651      	mov	r1, sl
 8004350:	ebb2 0801 	subs.w	r8, r2, r1
 8004354:	4659      	mov	r1, fp
 8004356:	eb63 0901 	sbc.w	r9, r3, r1
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004366:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800436a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800436e:	4690      	mov	r8, r2
 8004370:	4699      	mov	r9, r3
 8004372:	4623      	mov	r3, r4
 8004374:	eb18 0303 	adds.w	r3, r8, r3
 8004378:	60bb      	str	r3, [r7, #8]
 800437a:	462b      	mov	r3, r5
 800437c:	eb49 0303 	adc.w	r3, r9, r3
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	f04f 0300 	mov.w	r3, #0
 800438a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800438e:	4629      	mov	r1, r5
 8004390:	024b      	lsls	r3, r1, #9
 8004392:	4621      	mov	r1, r4
 8004394:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004398:	4621      	mov	r1, r4
 800439a:	024a      	lsls	r2, r1, #9
 800439c:	4610      	mov	r0, r2
 800439e:	4619      	mov	r1, r3
 80043a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043a2:	2200      	movs	r2, #0
 80043a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80043a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043ac:	f7fb ff10 	bl	80001d0 <__aeabi_uldivmod>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4613      	mov	r3, r2
 80043b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043b8:	e058      	b.n	800446c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ba:	4b38      	ldr	r3, [pc, #224]	; (800449c <HAL_RCC_GetSysClockFreq+0x200>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	099b      	lsrs	r3, r3, #6
 80043c0:	2200      	movs	r2, #0
 80043c2:	4618      	mov	r0, r3
 80043c4:	4611      	mov	r1, r2
 80043c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043ca:	623b      	str	r3, [r7, #32]
 80043cc:	2300      	movs	r3, #0
 80043ce:	627b      	str	r3, [r7, #36]	; 0x24
 80043d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043d4:	4642      	mov	r2, r8
 80043d6:	464b      	mov	r3, r9
 80043d8:	f04f 0000 	mov.w	r0, #0
 80043dc:	f04f 0100 	mov.w	r1, #0
 80043e0:	0159      	lsls	r1, r3, #5
 80043e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043e6:	0150      	lsls	r0, r2, #5
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	4641      	mov	r1, r8
 80043ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80043f2:	4649      	mov	r1, r9
 80043f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004404:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004408:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800440c:	ebb2 040a 	subs.w	r4, r2, sl
 8004410:	eb63 050b 	sbc.w	r5, r3, fp
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	00eb      	lsls	r3, r5, #3
 800441e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004422:	00e2      	lsls	r2, r4, #3
 8004424:	4614      	mov	r4, r2
 8004426:	461d      	mov	r5, r3
 8004428:	4643      	mov	r3, r8
 800442a:	18e3      	adds	r3, r4, r3
 800442c:	603b      	str	r3, [r7, #0]
 800442e:	464b      	mov	r3, r9
 8004430:	eb45 0303 	adc.w	r3, r5, r3
 8004434:	607b      	str	r3, [r7, #4]
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	f04f 0300 	mov.w	r3, #0
 800443e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004442:	4629      	mov	r1, r5
 8004444:	028b      	lsls	r3, r1, #10
 8004446:	4621      	mov	r1, r4
 8004448:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800444c:	4621      	mov	r1, r4
 800444e:	028a      	lsls	r2, r1, #10
 8004450:	4610      	mov	r0, r2
 8004452:	4619      	mov	r1, r3
 8004454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004456:	2200      	movs	r2, #0
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	61fa      	str	r2, [r7, #28]
 800445c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004460:	f7fb feb6 	bl	80001d0 <__aeabi_uldivmod>
 8004464:	4602      	mov	r2, r0
 8004466:	460b      	mov	r3, r1
 8004468:	4613      	mov	r3, r2
 800446a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800446c:	4b0b      	ldr	r3, [pc, #44]	; (800449c <HAL_RCC_GetSysClockFreq+0x200>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	0c1b      	lsrs	r3, r3, #16
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	3301      	adds	r3, #1
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800447c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800447e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004480:	fbb2 f3f3 	udiv	r3, r2, r3
 8004484:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004486:	e002      	b.n	800448e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004488:	4b05      	ldr	r3, [pc, #20]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800448a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800448c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800448e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004490:	4618      	mov	r0, r3
 8004492:	3750      	adds	r7, #80	; 0x50
 8004494:	46bd      	mov	sp, r7
 8004496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800449a:	bf00      	nop
 800449c:	40023800 	.word	0x40023800
 80044a0:	00f42400 	.word	0x00f42400
 80044a4:	007a1200 	.word	0x007a1200

080044a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044ac:	4b03      	ldr	r3, [pc, #12]	; (80044bc <HAL_RCC_GetHCLKFreq+0x14>)
 80044ae:	681b      	ldr	r3, [r3, #0]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	20000000 	.word	0x20000000

080044c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044c4:	f7ff fff0 	bl	80044a8 <HAL_RCC_GetHCLKFreq>
 80044c8:	4602      	mov	r2, r0
 80044ca:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	0a9b      	lsrs	r3, r3, #10
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	4903      	ldr	r1, [pc, #12]	; (80044e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044d6:	5ccb      	ldrb	r3, [r1, r3]
 80044d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044dc:	4618      	mov	r0, r3
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40023800 	.word	0x40023800
 80044e4:	080082c4 	.word	0x080082c4

080044e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044ec:	f7ff ffdc 	bl	80044a8 <HAL_RCC_GetHCLKFreq>
 80044f0:	4602      	mov	r2, r0
 80044f2:	4b05      	ldr	r3, [pc, #20]	; (8004508 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	0b5b      	lsrs	r3, r3, #13
 80044f8:	f003 0307 	and.w	r3, r3, #7
 80044fc:	4903      	ldr	r1, [pc, #12]	; (800450c <HAL_RCC_GetPCLK2Freq+0x24>)
 80044fe:	5ccb      	ldrb	r3, [r1, r3]
 8004500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004504:	4618      	mov	r0, r3
 8004506:	bd80      	pop	{r7, pc}
 8004508:	40023800 	.word	0x40023800
 800450c:	080082c4 	.word	0x080082c4

08004510 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	220f      	movs	r2, #15
 800451e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004520:	4b12      	ldr	r3, [pc, #72]	; (800456c <HAL_RCC_GetClockConfig+0x5c>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f003 0203 	and.w	r2, r3, #3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800452c:	4b0f      	ldr	r3, [pc, #60]	; (800456c <HAL_RCC_GetClockConfig+0x5c>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004538:	4b0c      	ldr	r3, [pc, #48]	; (800456c <HAL_RCC_GetClockConfig+0x5c>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004544:	4b09      	ldr	r3, [pc, #36]	; (800456c <HAL_RCC_GetClockConfig+0x5c>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	08db      	lsrs	r3, r3, #3
 800454a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004552:	4b07      	ldr	r3, [pc, #28]	; (8004570 <HAL_RCC_GetClockConfig+0x60>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0207 	and.w	r2, r3, #7
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	601a      	str	r2, [r3, #0]
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40023800 	.word	0x40023800
 8004570:	40023c00 	.word	0x40023c00

08004574 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800457c:	2300      	movs	r3, #0
 800457e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d105      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004598:	2b00      	cmp	r3, #0
 800459a:	d035      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800459c:	4b62      	ldr	r3, [pc, #392]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045a2:	f7fc fccb 	bl	8000f3c <HAL_GetTick>
 80045a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045aa:	f7fc fcc7 	bl	8000f3c <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e0b0      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045bc:	4b5b      	ldr	r3, [pc, #364]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1f0      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	019a      	lsls	r2, r3, #6
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	071b      	lsls	r3, r3, #28
 80045d4:	4955      	ldr	r1, [pc, #340]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045dc:	4b52      	ldr	r3, [pc, #328]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80045de:	2201      	movs	r2, #1
 80045e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045e2:	f7fc fcab 	bl	8000f3c <HAL_GetTick>
 80045e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045e8:	e008      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045ea:	f7fc fca7 	bl	8000f3c <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e090      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045fc:	4b4b      	ldr	r3, [pc, #300]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0f0      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 8083 	beq.w	800471c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]
 800461a:	4b44      	ldr	r3, [pc, #272]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	4a43      	ldr	r2, [pc, #268]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004624:	6413      	str	r3, [r2, #64]	; 0x40
 8004626:	4b41      	ldr	r3, [pc, #260]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004632:	4b3f      	ldr	r3, [pc, #252]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a3e      	ldr	r2, [pc, #248]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800463c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800463e:	f7fc fc7d 	bl	8000f3c <HAL_GetTick>
 8004642:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004644:	e008      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004646:	f7fc fc79 	bl	8000f3c <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e062      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004658:	4b35      	ldr	r3, [pc, #212]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0f0      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004664:	4b31      	ldr	r3, [pc, #196]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800466c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d02f      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	429a      	cmp	r2, r3
 8004680:	d028      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004682:	4b2a      	ldr	r3, [pc, #168]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800468a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800468c:	4b29      	ldr	r3, [pc, #164]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800468e:	2201      	movs	r2, #1
 8004690:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004692:	4b28      	ldr	r3, [pc, #160]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004698:	4a24      	ldr	r2, [pc, #144]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800469e:	4b23      	ldr	r3, [pc, #140]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d114      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80046aa:	f7fc fc47 	bl	8000f3c <HAL_GetTick>
 80046ae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b0:	e00a      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046b2:	f7fc fc43 	bl	8000f3c <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e02a      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c8:	4b18      	ldr	r3, [pc, #96]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0ee      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046e0:	d10d      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80046e2:	4b12      	ldr	r3, [pc, #72]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80046f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f6:	490d      	ldr	r1, [pc, #52]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	608b      	str	r3, [r1, #8]
 80046fc:	e005      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80046fe:	4b0b      	ldr	r3, [pc, #44]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	4a0a      	ldr	r2, [pc, #40]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004704:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004708:	6093      	str	r3, [r2, #8]
 800470a:	4b08      	ldr	r3, [pc, #32]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800470c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004716:	4905      	ldr	r1, [pc, #20]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004718:	4313      	orrs	r3, r2
 800471a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3718      	adds	r7, #24
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	42470068 	.word	0x42470068
 800472c:	40023800 	.word	0x40023800
 8004730:	40007000 	.word	0x40007000
 8004734:	42470e40 	.word	0x42470e40

08004738 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d13f      	bne.n	80047d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004756:	4b24      	ldr	r3, [pc, #144]	; (80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d006      	beq.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800476c:	d12f      	bne.n	80047ce <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800476e:	4b1f      	ldr	r3, [pc, #124]	; (80047ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004770:	617b      	str	r3, [r7, #20]
          break;
 8004772:	e02f      	b.n	80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004774:	4b1c      	ldr	r3, [pc, #112]	; (80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800477c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004780:	d108      	bne.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004782:	4b19      	ldr	r3, [pc, #100]	; (80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800478a:	4a19      	ldr	r2, [pc, #100]	; (80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800478c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004790:	613b      	str	r3, [r7, #16]
 8004792:	e007      	b.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004794:	4b14      	ldr	r3, [pc, #80]	; (80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800479c:	4a15      	ldr	r2, [pc, #84]	; (80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800479e:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80047a4:	4b10      	ldr	r3, [pc, #64]	; (80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047aa:	099b      	lsrs	r3, r3, #6
 80047ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	fb02 f303 	mul.w	r3, r2, r3
 80047b6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80047b8:	4b0b      	ldr	r3, [pc, #44]	; (80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047be:	0f1b      	lsrs	r3, r3, #28
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ca:	617b      	str	r3, [r7, #20]
          break;
 80047cc:	e002      	b.n	80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	617b      	str	r3, [r7, #20]
          break;
 80047d2:	bf00      	nop
        }
      }
      break;
 80047d4:	e000      	b.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 80047d6:	bf00      	nop
    }
  }
  return frequency;
 80047d8:	697b      	ldr	r3, [r7, #20]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	371c      	adds	r7, #28
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40023800 	.word	0x40023800
 80047ec:	00bb8000 	.word	0x00bb8000
 80047f0:	007a1200 	.word	0x007a1200
 80047f4:	00f42400 	.word	0x00f42400

080047f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e07b      	b.n	8004902 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	2b00      	cmp	r3, #0
 8004810:	d108      	bne.n	8004824 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800481a:	d009      	beq.n	8004830 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	61da      	str	r2, [r3, #28]
 8004822:	e005      	b.n	8004830 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d106      	bne.n	8004850 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fc f9fc 	bl	8000c48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004866:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004878:	431a      	orrs	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b4:	ea42 0103 	orr.w	r1, r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	0c1b      	lsrs	r3, r3, #16
 80048ce:	f003 0104 	and.w	r1, r3, #4
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	f003 0210 	and.w	r2, r3, #16
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69da      	ldr	r2, [r3, #28]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b082      	sub	sp, #8
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e041      	b.n	80049a0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d106      	bne.n	8004936 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f7fc f9d1 	bl	8000cd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2202      	movs	r2, #2
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3304      	adds	r3, #4
 8004946:	4619      	mov	r1, r3
 8004948:	4610      	mov	r0, r2
 800494a:	f000 f9b5 	bl	8004cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d001      	beq.n	80049c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e04e      	b.n	8004a5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0201 	orr.w	r2, r2, #1
 80049d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a23      	ldr	r2, [pc, #140]	; (8004a6c <HAL_TIM_Base_Start_IT+0xc4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d022      	beq.n	8004a28 <HAL_TIM_Base_Start_IT+0x80>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ea:	d01d      	beq.n	8004a28 <HAL_TIM_Base_Start_IT+0x80>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a1f      	ldr	r2, [pc, #124]	; (8004a70 <HAL_TIM_Base_Start_IT+0xc8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d018      	beq.n	8004a28 <HAL_TIM_Base_Start_IT+0x80>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a1e      	ldr	r2, [pc, #120]	; (8004a74 <HAL_TIM_Base_Start_IT+0xcc>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d013      	beq.n	8004a28 <HAL_TIM_Base_Start_IT+0x80>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a1c      	ldr	r2, [pc, #112]	; (8004a78 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00e      	beq.n	8004a28 <HAL_TIM_Base_Start_IT+0x80>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a1b      	ldr	r2, [pc, #108]	; (8004a7c <HAL_TIM_Base_Start_IT+0xd4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d009      	beq.n	8004a28 <HAL_TIM_Base_Start_IT+0x80>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a19      	ldr	r2, [pc, #100]	; (8004a80 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d004      	beq.n	8004a28 <HAL_TIM_Base_Start_IT+0x80>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a18      	ldr	r2, [pc, #96]	; (8004a84 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d111      	bne.n	8004a4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 0307 	and.w	r3, r3, #7
 8004a32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b06      	cmp	r3, #6
 8004a38:	d010      	beq.n	8004a5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 0201 	orr.w	r2, r2, #1
 8004a48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a4a:	e007      	b.n	8004a5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0201 	orr.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40010000 	.word	0x40010000
 8004a70:	40000400 	.word	0x40000400
 8004a74:	40000800 	.word	0x40000800
 8004a78:	40000c00 	.word	0x40000c00
 8004a7c:	40010400 	.word	0x40010400
 8004a80:	40014000 	.word	0x40014000
 8004a84:	40001800 	.word	0x40001800

08004a88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d020      	beq.n	8004aec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01b      	beq.n	8004aec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f06f 0202 	mvn.w	r2, #2
 8004abc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f8d2 	bl	8004c7c <HAL_TIM_IC_CaptureCallback>
 8004ad8:	e005      	b.n	8004ae6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f8c4 	bl	8004c68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f8d5 	bl	8004c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f003 0304 	and.w	r3, r3, #4
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d020      	beq.n	8004b38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d01b      	beq.n	8004b38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f06f 0204 	mvn.w	r2, #4
 8004b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f8ac 	bl	8004c7c <HAL_TIM_IC_CaptureCallback>
 8004b24:	e005      	b.n	8004b32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f89e 	bl	8004c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f8af 	bl	8004c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f003 0308 	and.w	r3, r3, #8
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d020      	beq.n	8004b84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01b      	beq.n	8004b84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f06f 0208 	mvn.w	r2, #8
 8004b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2204      	movs	r2, #4
 8004b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	f003 0303 	and.w	r3, r3, #3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f886 	bl	8004c7c <HAL_TIM_IC_CaptureCallback>
 8004b70:	e005      	b.n	8004b7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f878 	bl	8004c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f889 	bl	8004c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f003 0310 	and.w	r3, r3, #16
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d020      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f003 0310 	and.w	r3, r3, #16
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01b      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0210 	mvn.w	r2, #16
 8004ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2208      	movs	r2, #8
 8004ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f860 	bl	8004c7c <HAL_TIM_IC_CaptureCallback>
 8004bbc:	e005      	b.n	8004bca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f852 	bl	8004c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f863 	bl	8004c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00c      	beq.n	8004bf4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d007      	beq.n	8004bf4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0201 	mvn.w	r2, #1
 8004bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fb ff1e 	bl	8000a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00c      	beq.n	8004c18 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d007      	beq.n	8004c18 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f906 	bl	8004e24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00c      	beq.n	8004c3c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d007      	beq.n	8004c3c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f834 	bl	8004ca4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f003 0320 	and.w	r3, r3, #32
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00c      	beq.n	8004c60 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f003 0320 	and.w	r3, r3, #32
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d007      	beq.n	8004c60 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f06f 0220 	mvn.w	r2, #32
 8004c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f8d8 	bl	8004e10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c60:	bf00      	nop
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a46      	ldr	r2, [pc, #280]	; (8004de4 <TIM_Base_SetConfig+0x12c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d013      	beq.n	8004cf8 <TIM_Base_SetConfig+0x40>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd6:	d00f      	beq.n	8004cf8 <TIM_Base_SetConfig+0x40>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a43      	ldr	r2, [pc, #268]	; (8004de8 <TIM_Base_SetConfig+0x130>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d00b      	beq.n	8004cf8 <TIM_Base_SetConfig+0x40>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a42      	ldr	r2, [pc, #264]	; (8004dec <TIM_Base_SetConfig+0x134>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d007      	beq.n	8004cf8 <TIM_Base_SetConfig+0x40>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a41      	ldr	r2, [pc, #260]	; (8004df0 <TIM_Base_SetConfig+0x138>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d003      	beq.n	8004cf8 <TIM_Base_SetConfig+0x40>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a40      	ldr	r2, [pc, #256]	; (8004df4 <TIM_Base_SetConfig+0x13c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d108      	bne.n	8004d0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a35      	ldr	r2, [pc, #212]	; (8004de4 <TIM_Base_SetConfig+0x12c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d02b      	beq.n	8004d6a <TIM_Base_SetConfig+0xb2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d18:	d027      	beq.n	8004d6a <TIM_Base_SetConfig+0xb2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a32      	ldr	r2, [pc, #200]	; (8004de8 <TIM_Base_SetConfig+0x130>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d023      	beq.n	8004d6a <TIM_Base_SetConfig+0xb2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a31      	ldr	r2, [pc, #196]	; (8004dec <TIM_Base_SetConfig+0x134>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d01f      	beq.n	8004d6a <TIM_Base_SetConfig+0xb2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a30      	ldr	r2, [pc, #192]	; (8004df0 <TIM_Base_SetConfig+0x138>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d01b      	beq.n	8004d6a <TIM_Base_SetConfig+0xb2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a2f      	ldr	r2, [pc, #188]	; (8004df4 <TIM_Base_SetConfig+0x13c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d017      	beq.n	8004d6a <TIM_Base_SetConfig+0xb2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a2e      	ldr	r2, [pc, #184]	; (8004df8 <TIM_Base_SetConfig+0x140>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d013      	beq.n	8004d6a <TIM_Base_SetConfig+0xb2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a2d      	ldr	r2, [pc, #180]	; (8004dfc <TIM_Base_SetConfig+0x144>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d00f      	beq.n	8004d6a <TIM_Base_SetConfig+0xb2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a2c      	ldr	r2, [pc, #176]	; (8004e00 <TIM_Base_SetConfig+0x148>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d00b      	beq.n	8004d6a <TIM_Base_SetConfig+0xb2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a2b      	ldr	r2, [pc, #172]	; (8004e04 <TIM_Base_SetConfig+0x14c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d007      	beq.n	8004d6a <TIM_Base_SetConfig+0xb2>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a2a      	ldr	r2, [pc, #168]	; (8004e08 <TIM_Base_SetConfig+0x150>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d003      	beq.n	8004d6a <TIM_Base_SetConfig+0xb2>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a29      	ldr	r2, [pc, #164]	; (8004e0c <TIM_Base_SetConfig+0x154>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d108      	bne.n	8004d7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a10      	ldr	r2, [pc, #64]	; (8004de4 <TIM_Base_SetConfig+0x12c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d003      	beq.n	8004db0 <TIM_Base_SetConfig+0xf8>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a12      	ldr	r2, [pc, #72]	; (8004df4 <TIM_Base_SetConfig+0x13c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d103      	bne.n	8004db8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	691a      	ldr	r2, [r3, #16]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d105      	bne.n	8004dd6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f023 0201 	bic.w	r2, r3, #1
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	611a      	str	r2, [r3, #16]
  }
}
 8004dd6:	bf00      	nop
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40010000 	.word	0x40010000
 8004de8:	40000400 	.word	0x40000400
 8004dec:	40000800 	.word	0x40000800
 8004df0:	40000c00 	.word	0x40000c00
 8004df4:	40010400 	.word	0x40010400
 8004df8:	40014000 	.word	0x40014000
 8004dfc:	40014400 	.word	0x40014400
 8004e00:	40014800 	.word	0x40014800
 8004e04:	40001800 	.word	0x40001800
 8004e08:	40001c00 	.word	0x40001c00
 8004e0c:	40002000 	.word	0x40002000

08004e10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f043 0201 	orr.w	r2, r3, #1
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f023 0201 	bic.w	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e86:	2300      	movs	r3, #0
 8004e88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004e96:	d901      	bls.n	8004e9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e01b      	b.n	8004ed4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	daf2      	bge.n	8004e8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	019b      	lsls	r3, r3, #6
 8004eac:	f043 0220 	orr.w	r2, r3, #32
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004ec0:	d901      	bls.n	8004ec6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e006      	b.n	8004ed4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f003 0320 	and.w	r3, r3, #32
 8004ece:	2b20      	cmp	r3, #32
 8004ed0:	d0f0      	beq.n	8004eb4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004ef8:	d901      	bls.n	8004efe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e018      	b.n	8004f30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	daf2      	bge.n	8004eec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2210      	movs	r2, #16
 8004f0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3301      	adds	r3, #1
 8004f14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004f1c:	d901      	bls.n	8004f22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e006      	b.n	8004f30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f003 0310 	and.w	r3, r3, #16
 8004f2a:	2b10      	cmp	r3, #16
 8004f2c:	d0f0      	beq.n	8004f10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b08b      	sub	sp, #44	; 0x2c
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	4613      	mov	r3, r2
 8004f48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f52:	88fb      	ldrh	r3, [r7, #6]
 8004f54:	089b      	lsrs	r3, r3, #2
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f5a:	88fb      	ldrh	r3, [r7, #6]
 8004f5c:	f003 0303 	and.w	r3, r3, #3
 8004f60:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f62:	2300      	movs	r3, #0
 8004f64:	623b      	str	r3, [r7, #32]
 8004f66:	e014      	b.n	8004f92 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	3301      	adds	r3, #1
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	3301      	adds	r3, #1
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	3301      	adds	r3, #1
 8004f8a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	623b      	str	r3, [r7, #32]
 8004f92:	6a3a      	ldr	r2, [r7, #32]
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d3e6      	bcc.n	8004f68 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004f9a:	8bfb      	ldrh	r3, [r7, #30]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d01e      	beq.n	8004fde <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004faa:	461a      	mov	r2, r3
 8004fac:	f107 0310 	add.w	r3, r7, #16
 8004fb0:	6812      	ldr	r2, [r2, #0]
 8004fb2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	701a      	strb	r2, [r3, #0]
      i++;
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	623b      	str	r3, [r7, #32]
      pDest++;
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	3301      	adds	r3, #1
 8004fd0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004fd2:	8bfb      	ldrh	r3, [r7, #30]
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004fd8:	8bfb      	ldrh	r3, [r7, #30]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1ea      	bne.n	8004fb4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	372c      	adds	r7, #44	; 0x2c
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4013      	ands	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005004:	68fb      	ldr	r3, [r7, #12]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005012:	b480      	push	{r7}
 8005014:	b085      	sub	sp, #20
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
 800501a:	460b      	mov	r3, r1
 800501c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005022:	78fb      	ldrb	r3, [r7, #3]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4413      	add	r3, r2
 800502a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005032:	78fb      	ldrb	r3, [r7, #3]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4413      	add	r3, r2
 800503a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	4013      	ands	r3, r2
 8005044:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005046:	68bb      	ldr	r3, [r7, #8]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	f003 0301 	and.w	r3, r3, #1
}
 8005064:	4618      	mov	r0, r3
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	460b      	mov	r3, r1
 800507a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800508e:	f023 0303 	bic.w	r3, r3, #3
 8005092:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	78fb      	ldrb	r3, [r7, #3]
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	68f9      	ldr	r1, [r7, #12]
 80050a4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80050a8:	4313      	orrs	r3, r2
 80050aa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80050ac:	78fb      	ldrb	r3, [r7, #3]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d107      	bne.n	80050c2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050b8:	461a      	mov	r2, r3
 80050ba:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80050be:	6053      	str	r3, [r2, #4]
 80050c0:	e00c      	b.n	80050dc <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80050c2:	78fb      	ldrb	r3, [r7, #3]
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d107      	bne.n	80050d8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050ce:	461a      	mov	r2, r3
 80050d0:	f241 7370 	movw	r3, #6000	; 0x1770
 80050d4:	6053      	str	r3, [r2, #4]
 80050d6:	e001      	b.n	80050dc <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e000      	b.n	80050de <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3714      	adds	r7, #20
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b085      	sub	sp, #20
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	b29b      	uxth	r3, r3
}
 8005100:	4618      	mov	r0, r3
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800510c:	b480      	push	{r7}
 800510e:	b089      	sub	sp, #36	; 0x24
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	460b      	mov	r3, r1
 8005116:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800511c:	78fb      	ldrb	r3, [r7, #3]
 800511e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	4413      	add	r3, r2
 800512c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	0c9b      	lsrs	r3, r3, #18
 8005134:	f003 0303 	and.w	r3, r3, #3
 8005138:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	4413      	add	r3, r2
 8005142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	0fdb      	lsrs	r3, r3, #31
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	4413      	add	r3, r2
 8005158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	0fdb      	lsrs	r3, r3, #31
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 0320 	and.w	r3, r3, #32
 800516e:	2b20      	cmp	r3, #32
 8005170:	d10d      	bne.n	800518e <USB_HC_Halt+0x82>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10a      	bne.n	800518e <USB_HC_Halt+0x82>
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d005      	beq.n	800518a <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d002      	beq.n	800518a <USB_HC_Halt+0x7e>
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	2b03      	cmp	r3, #3
 8005188:	d101      	bne.n	800518e <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800518a:	2300      	movs	r3, #0
 800518c:	e0d8      	b.n	8005340 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <USB_HC_Halt+0x8e>
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	2b02      	cmp	r3, #2
 8005198:	d173      	bne.n	8005282 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	0151      	lsls	r1, r2, #5
 80051ac:	69fa      	ldr	r2, [r7, #28]
 80051ae:	440a      	add	r2, r1
 80051b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051b8:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 0320 	and.w	r3, r3, #32
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d14a      	bne.n	800525c <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d133      	bne.n	800523a <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	0151      	lsls	r1, r2, #5
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	440a      	add	r2, r1
 80051e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051f0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	0151      	lsls	r1, r2, #5
 8005204:	69fa      	ldr	r2, [r7, #28]
 8005206:	440a      	add	r2, r1
 8005208:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800520c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005210:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	3301      	adds	r3, #1
 8005216:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800521e:	d82e      	bhi.n	800527e <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	4413      	add	r3, r2
 8005228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005232:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005236:	d0ec      	beq.n	8005212 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005238:	e081      	b.n	800533e <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	4413      	add	r3, r2
 8005242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	0151      	lsls	r1, r2, #5
 800524c:	69fa      	ldr	r2, [r7, #28]
 800524e:	440a      	add	r2, r1
 8005250:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005254:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005258:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800525a:	e070      	b.n	800533e <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	4413      	add	r3, r2
 8005264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	0151      	lsls	r1, r2, #5
 800526e:	69fa      	ldr	r2, [r7, #28]
 8005270:	440a      	add	r2, r1
 8005272:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005276:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800527a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800527c:	e05f      	b.n	800533e <USB_HC_Halt+0x232>
            break;
 800527e:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005280:	e05d      	b.n	800533e <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	015a      	lsls	r2, r3, #5
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	4413      	add	r3, r2
 800528a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	0151      	lsls	r1, r2, #5
 8005294:	69fa      	ldr	r2, [r7, #28]
 8005296:	440a      	add	r2, r1
 8005298:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800529c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052a0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d133      	bne.n	800531a <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	0151      	lsls	r1, r2, #5
 80052c4:	69fa      	ldr	r2, [r7, #28]
 80052c6:	440a      	add	r2, r1
 80052c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052d0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	0151      	lsls	r1, r2, #5
 80052e4:	69fa      	ldr	r2, [r7, #28]
 80052e6:	440a      	add	r2, r1
 80052e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052f0:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	3301      	adds	r3, #1
 80052f6:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052fe:	d81d      	bhi.n	800533c <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	4413      	add	r3, r2
 8005308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005312:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005316:	d0ec      	beq.n	80052f2 <USB_HC_Halt+0x1e6>
 8005318:	e011      	b.n	800533e <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	4413      	add	r3, r2
 8005322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	0151      	lsls	r1, r2, #5
 800532c:	69fa      	ldr	r2, [r7, #28]
 800532e:	440a      	add	r2, r1
 8005330:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005334:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	e000      	b.n	800533e <USB_HC_Halt+0x232>
          break;
 800533c:	bf00      	nop
    }
  }

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3724      	adds	r7, #36	; 0x24
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b088      	sub	sp, #32
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005354:	2300      	movs	r3, #0
 8005356:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7ff fd7a 	bl	8004e5a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005366:	2110      	movs	r1, #16
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff fd87 	bl	8004e7c <USB_FlushTxFifo>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7ff fdb1 	bl	8004ee0 <USB_FlushRxFifo>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d001      	beq.n	8005388 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005388:	2300      	movs	r3, #0
 800538a:	61bb      	str	r3, [r7, #24]
 800538c:	e01f      	b.n	80053ce <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	4413      	add	r3, r2
 8005396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053a4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053ac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053b4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c2:	461a      	mov	r2, r3
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	3301      	adds	r3, #1
 80053cc:	61bb      	str	r3, [r7, #24]
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	2b0f      	cmp	r3, #15
 80053d2:	d9dc      	bls.n	800538e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80053d4:	2300      	movs	r3, #0
 80053d6:	61bb      	str	r3, [r7, #24]
 80053d8:	e034      	b.n	8005444 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053f0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053f8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005400:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	4413      	add	r3, r2
 800540a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540e:	461a      	mov	r2, r3
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	3301      	adds	r3, #1
 8005418:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005420:	d80c      	bhi.n	800543c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	4413      	add	r3, r2
 800542a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005434:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005438:	d0ec      	beq.n	8005414 <USB_StopHost+0xc8>
 800543a:	e000      	b.n	800543e <USB_StopHost+0xf2>
        break;
 800543c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	3301      	adds	r3, #1
 8005442:	61bb      	str	r3, [r7, #24]
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	2b0f      	cmp	r3, #15
 8005448:	d9c7      	bls.n	80053da <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005450:	461a      	mov	r2, r3
 8005452:	f04f 33ff 	mov.w	r3, #4294967295
 8005456:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f04f 32ff 	mov.w	r2, #4294967295
 800545e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7ff fce9 	bl	8004e38 <USB_EnableGlobalInt>

  return ret;
 8005466:	7ffb      	ldrb	r3, [r7, #31]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3720      	adds	r7, #32
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800547e:	1c5a      	adds	r2, r3, #1
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f804 	bl	8005494 <USBH_HandleSof>
}
 800548c:	bf00      	nop
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b0b      	cmp	r3, #11
 80054a4:	d10a      	bne.n	80054bc <USBH_HandleSof+0x28>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d005      	beq.n	80054bc <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	4798      	blx	r3
  }
}
 80054bc:	bf00      	nop
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80054e8:	2200      	movs	r2, #0
 80054ea:	4619      	mov	r1, r3
 80054ec:	f000 f8ae 	bl	800564c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80054f0:	bf00      	nop
}
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8005508:	bf00      	nop
}
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005548:	2200      	movs	r2, #0
 800554a:	4619      	mov	r1, r3
 800554c:	f000 f87e 	bl	800564c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b082      	sub	sp, #8
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f002 fd46 	bl	800800c <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	791b      	ldrb	r3, [r3, #4]
 8005584:	4619      	mov	r1, r3
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f830 	bl	80055ec <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	795b      	ldrb	r3, [r3, #5]
 8005590:	4619      	mov	r1, r3
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f82a 	bl	80055ec <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80055ac:	2200      	movs	r2, #0
 80055ae:	4619      	mov	r1, r3
 80055b0:	f000 f84c 	bl	800564c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b082      	sub	sp, #8
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80055da:	2200      	movs	r2, #0
 80055dc:	4619      	mov	r1, r3
 80055de:	f000 f835 	bl	800564c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	460b      	mov	r3, r1
 80055f6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80055f8:	78fb      	ldrb	r3, [r7, #3]
 80055fa:	2b0f      	cmp	r3, #15
 80055fc:	d80d      	bhi.n	800561a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80055fe:	78fb      	ldrb	r3, [r7, #3]
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	33e0      	adds	r3, #224	; 0xe0
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	78fb      	ldrb	r3, [r7, #3]
 800560c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8005610:	6879      	ldr	r1, [r7, #4]
 8005612:	33e0      	adds	r3, #224	; 0xe0
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	440b      	add	r3, r1
 8005618:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800562e:	f3ef 8305 	mrs	r3, IPSR
 8005632:	607b      	str	r3, [r7, #4]
  return(result);
 8005634:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005636:	2b00      	cmp	r3, #0
 8005638:	bf14      	ite	ne
 800563a:	2301      	movne	r3, #1
 800563c:	2300      	moveq	r3, #0
 800563e:	b2db      	uxtb	r3, r3
}
 8005640:	4618      	mov	r0, r3
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005658:	2300      	movs	r3, #0
 800565a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <osMessagePut+0x1e>
    ticks = 1;
 8005666:	2301      	movs	r3, #1
 8005668:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800566a:	f7ff ffdd 	bl	8005628 <inHandlerMode>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d018      	beq.n	80056a6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005674:	f107 0210 	add.w	r2, r7, #16
 8005678:	f107 0108 	add.w	r1, r7, #8
 800567c:	2300      	movs	r3, #0
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 fa94 	bl	8005bac <xQueueGenericSendFromISR>
 8005684:	4603      	mov	r3, r0
 8005686:	2b01      	cmp	r3, #1
 8005688:	d001      	beq.n	800568e <osMessagePut+0x42>
      return osErrorOS;
 800568a:	23ff      	movs	r3, #255	; 0xff
 800568c:	e018      	b.n	80056c0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d014      	beq.n	80056be <osMessagePut+0x72>
 8005694:	4b0c      	ldr	r3, [pc, #48]	; (80056c8 <osMessagePut+0x7c>)
 8005696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	e00b      	b.n	80056be <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80056a6:	f107 0108 	add.w	r1, r7, #8
 80056aa:	2300      	movs	r3, #0
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f000 f97e 	bl	80059b0 <xQueueGenericSend>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d001      	beq.n	80056be <osMessagePut+0x72>
      return osErrorOS;
 80056ba:	23ff      	movs	r3, #255	; 0xff
 80056bc:	e000      	b.n	80056c0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	e000ed04 	.word	0xe000ed04

080056cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f103 0208 	add.w	r2, r3, #8
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f04f 32ff 	mov.w	r2, #4294967295
 80056e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f103 0208 	add.w	r2, r3, #8
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f103 0208 	add.w	r2, r3, #8
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800571a:	bf00      	nop
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005726:	b480      	push	{r7}
 8005728:	b085      	sub	sp, #20
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	601a      	str	r2, [r3, #0]
}
 8005762:	bf00      	nop
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800576e:	b480      	push	{r7}
 8005770:	b085      	sub	sp, #20
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005784:	d103      	bne.n	800578e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	e00c      	b.n	80057a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3308      	adds	r3, #8
 8005792:	60fb      	str	r3, [r7, #12]
 8005794:	e002      	b.n	800579c <vListInsert+0x2e>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d2f6      	bcs.n	8005796 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	601a      	str	r2, [r3, #0]
}
 80057d4:	bf00      	nop
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	6892      	ldr	r2, [r2, #8]
 80057f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6852      	ldr	r2, [r2, #4]
 8005800:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	429a      	cmp	r2, r3
 800580a:	d103      	bne.n	8005814 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	1e5a      	subs	r2, r3, #1
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10a      	bne.n	800585e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584c:	f383 8811 	msr	BASEPRI, r3
 8005850:	f3bf 8f6f 	isb	sy
 8005854:	f3bf 8f4f 	dsb	sy
 8005858:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800585a:	bf00      	nop
 800585c:	e7fe      	b.n	800585c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800585e:	f002 f871 	bl	8007944 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800586a:	68f9      	ldr	r1, [r7, #12]
 800586c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800586e:	fb01 f303 	mul.w	r3, r1, r3
 8005872:	441a      	add	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588e:	3b01      	subs	r3, #1
 8005890:	68f9      	ldr	r1, [r7, #12]
 8005892:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005894:	fb01 f303 	mul.w	r3, r1, r3
 8005898:	441a      	add	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	22ff      	movs	r2, #255	; 0xff
 80058a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	22ff      	movs	r2, #255	; 0xff
 80058aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d114      	bne.n	80058de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01a      	beq.n	80058f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3310      	adds	r3, #16
 80058c0:	4618      	mov	r0, r3
 80058c2:	f001 f855 	bl	8006970 <xTaskRemoveFromEventList>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d012      	beq.n	80058f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80058cc:	4b0c      	ldr	r3, [pc, #48]	; (8005900 <xQueueGenericReset+0xcc>)
 80058ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	e009      	b.n	80058f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3310      	adds	r3, #16
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7ff fef2 	bl	80056cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	3324      	adds	r3, #36	; 0x24
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7ff feed 	bl	80056cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80058f2:	f002 f857 	bl	80079a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80058f6:	2301      	movs	r3, #1
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	e000ed04 	.word	0xe000ed04

08005904 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005904:	b580      	push	{r7, lr}
 8005906:	b08a      	sub	sp, #40	; 0x28
 8005908:	af02      	add	r7, sp, #8
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	4613      	mov	r3, r2
 8005910:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10a      	bne.n	800592e <xQueueGenericCreate+0x2a>
	__asm volatile
 8005918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	613b      	str	r3, [r7, #16]
}
 800592a:	bf00      	nop
 800592c:	e7fe      	b.n	800592c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	fb02 f303 	mul.w	r3, r2, r3
 8005936:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	3348      	adds	r3, #72	; 0x48
 800593c:	4618      	mov	r0, r3
 800593e:	f002 f923 	bl	8007b88 <pvPortMalloc>
 8005942:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00d      	beq.n	8005966 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	3348      	adds	r3, #72	; 0x48
 8005952:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005954:	79fa      	ldrb	r2, [r7, #7]
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	4613      	mov	r3, r2
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	68b9      	ldr	r1, [r7, #8]
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 f805 	bl	8005970 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005966:	69bb      	ldr	r3, [r7, #24]
	}
 8005968:	4618      	mov	r0, r3
 800596a:	3720      	adds	r7, #32
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
 800597c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d103      	bne.n	800598c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	e002      	b.n	8005992 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800599e:	2101      	movs	r1, #1
 80059a0:	69b8      	ldr	r0, [r7, #24]
 80059a2:	f7ff ff47 	bl	8005834 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80059a6:	bf00      	nop
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b08e      	sub	sp, #56	; 0x38
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
 80059bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80059be:	2300      	movs	r3, #0
 80059c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10a      	bne.n	80059e2 <xQueueGenericSend+0x32>
	__asm volatile
 80059cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d0:	f383 8811 	msr	BASEPRI, r3
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059de:	bf00      	nop
 80059e0:	e7fe      	b.n	80059e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d103      	bne.n	80059f0 <xQueueGenericSend+0x40>
 80059e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <xQueueGenericSend+0x44>
 80059f0:	2301      	movs	r3, #1
 80059f2:	e000      	b.n	80059f6 <xQueueGenericSend+0x46>
 80059f4:	2300      	movs	r3, #0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10a      	bne.n	8005a10 <xQueueGenericSend+0x60>
	__asm volatile
 80059fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a0c:	bf00      	nop
 8005a0e:	e7fe      	b.n	8005a0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d103      	bne.n	8005a1e <xQueueGenericSend+0x6e>
 8005a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d101      	bne.n	8005a22 <xQueueGenericSend+0x72>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e000      	b.n	8005a24 <xQueueGenericSend+0x74>
 8005a22:	2300      	movs	r3, #0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10a      	bne.n	8005a3e <xQueueGenericSend+0x8e>
	__asm volatile
 8005a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2c:	f383 8811 	msr	BASEPRI, r3
 8005a30:	f3bf 8f6f 	isb	sy
 8005a34:	f3bf 8f4f 	dsb	sy
 8005a38:	623b      	str	r3, [r7, #32]
}
 8005a3a:	bf00      	nop
 8005a3c:	e7fe      	b.n	8005a3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a3e:	f001 f939 	bl	8006cb4 <xTaskGetSchedulerState>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d102      	bne.n	8005a4e <xQueueGenericSend+0x9e>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <xQueueGenericSend+0xa2>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e000      	b.n	8005a54 <xQueueGenericSend+0xa4>
 8005a52:	2300      	movs	r3, #0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10a      	bne.n	8005a6e <xQueueGenericSend+0xbe>
	__asm volatile
 8005a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5c:	f383 8811 	msr	BASEPRI, r3
 8005a60:	f3bf 8f6f 	isb	sy
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	61fb      	str	r3, [r7, #28]
}
 8005a6a:	bf00      	nop
 8005a6c:	e7fe      	b.n	8005a6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a6e:	f001 ff69 	bl	8007944 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d302      	bcc.n	8005a84 <xQueueGenericSend+0xd4>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d129      	bne.n	8005ad8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	68b9      	ldr	r1, [r7, #8]
 8005a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a8a:	f000 fa0b 	bl	8005ea4 <prvCopyDataToQueue>
 8005a8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d010      	beq.n	8005aba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9a:	3324      	adds	r3, #36	; 0x24
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 ff67 	bl	8006970 <xTaskRemoveFromEventList>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d013      	beq.n	8005ad0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005aa8:	4b3f      	ldr	r3, [pc, #252]	; (8005ba8 <xQueueGenericSend+0x1f8>)
 8005aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aae:	601a      	str	r2, [r3, #0]
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	e00a      	b.n	8005ad0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d007      	beq.n	8005ad0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ac0:	4b39      	ldr	r3, [pc, #228]	; (8005ba8 <xQueueGenericSend+0x1f8>)
 8005ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ad0:	f001 ff68 	bl	80079a4 <vPortExitCritical>
				return pdPASS;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e063      	b.n	8005ba0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d103      	bne.n	8005ae6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ade:	f001 ff61 	bl	80079a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	e05c      	b.n	8005ba0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d106      	bne.n	8005afa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005aec:	f107 0314 	add.w	r3, r7, #20
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 ff9f 	bl	8006a34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005af6:	2301      	movs	r3, #1
 8005af8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005afa:	f001 ff53 	bl	80079a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005afe:	f000 fd13 	bl	8006528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b02:	f001 ff1f 	bl	8007944 <vPortEnterCritical>
 8005b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b0c:	b25b      	sxtb	r3, r3
 8005b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b12:	d103      	bne.n	8005b1c <xQueueGenericSend+0x16c>
 8005b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b22:	b25b      	sxtb	r3, r3
 8005b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b28:	d103      	bne.n	8005b32 <xQueueGenericSend+0x182>
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b32:	f001 ff37 	bl	80079a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b36:	1d3a      	adds	r2, r7, #4
 8005b38:	f107 0314 	add.w	r3, r7, #20
 8005b3c:	4611      	mov	r1, r2
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 ff8e 	bl	8006a60 <xTaskCheckForTimeOut>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d124      	bne.n	8005b94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b4c:	f000 faa2 	bl	8006094 <prvIsQueueFull>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d018      	beq.n	8005b88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b58:	3310      	adds	r3, #16
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	4611      	mov	r1, r2
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 feb6 	bl	80068d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b66:	f000 fa2d 	bl	8005fc4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b6a:	f000 fceb 	bl	8006544 <xTaskResumeAll>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f47f af7c 	bne.w	8005a6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005b76:	4b0c      	ldr	r3, [pc, #48]	; (8005ba8 <xQueueGenericSend+0x1f8>)
 8005b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	e772      	b.n	8005a6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b8a:	f000 fa1b 	bl	8005fc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b8e:	f000 fcd9 	bl	8006544 <xTaskResumeAll>
 8005b92:	e76c      	b.n	8005a6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b96:	f000 fa15 	bl	8005fc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b9a:	f000 fcd3 	bl	8006544 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3738      	adds	r7, #56	; 0x38
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	e000ed04 	.word	0xe000ed04

08005bac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b090      	sub	sp, #64	; 0x40
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
 8005bb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10a      	bne.n	8005bda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005bd6:	bf00      	nop
 8005bd8:	e7fe      	b.n	8005bd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d103      	bne.n	8005be8 <xQueueGenericSendFromISR+0x3c>
 8005be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <xQueueGenericSendFromISR+0x40>
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <xQueueGenericSendFromISR+0x42>
 8005bec:	2300      	movs	r3, #0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10a      	bne.n	8005c08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c04:	bf00      	nop
 8005c06:	e7fe      	b.n	8005c06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d103      	bne.n	8005c16 <xQueueGenericSendFromISR+0x6a>
 8005c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d101      	bne.n	8005c1a <xQueueGenericSendFromISR+0x6e>
 8005c16:	2301      	movs	r3, #1
 8005c18:	e000      	b.n	8005c1c <xQueueGenericSendFromISR+0x70>
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10a      	bne.n	8005c36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	623b      	str	r3, [r7, #32]
}
 8005c32:	bf00      	nop
 8005c34:	e7fe      	b.n	8005c34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c36:	f001 ff67 	bl	8007b08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c3a:	f3ef 8211 	mrs	r2, BASEPRI
 8005c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	61fa      	str	r2, [r7, #28]
 8005c50:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c52:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c54:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d302      	bcc.n	8005c68 <xQueueGenericSendFromISR+0xbc>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d12f      	bne.n	8005cc8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c76:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	68b9      	ldr	r1, [r7, #8]
 8005c7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c7e:	f000 f911 	bl	8005ea4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c8a:	d112      	bne.n	8005cb2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d016      	beq.n	8005cc2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c96:	3324      	adds	r3, #36	; 0x24
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f000 fe69 	bl	8006970 <xTaskRemoveFromEventList>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00e      	beq.n	8005cc2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00b      	beq.n	8005cc2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	601a      	str	r2, [r3, #0]
 8005cb0:	e007      	b.n	8005cc2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005cb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	b25a      	sxtb	r2, r3
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005cc6:	e001      	b.n	8005ccc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005cd6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3740      	adds	r7, #64	; 0x40
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
	...

08005ce4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b08c      	sub	sp, #48	; 0x30
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10a      	bne.n	8005d14 <xQueueReceive+0x30>
	__asm volatile
 8005cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	623b      	str	r3, [r7, #32]
}
 8005d10:	bf00      	nop
 8005d12:	e7fe      	b.n	8005d12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d103      	bne.n	8005d22 <xQueueReceive+0x3e>
 8005d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <xQueueReceive+0x42>
 8005d22:	2301      	movs	r3, #1
 8005d24:	e000      	b.n	8005d28 <xQueueReceive+0x44>
 8005d26:	2300      	movs	r3, #0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10a      	bne.n	8005d42 <xQueueReceive+0x5e>
	__asm volatile
 8005d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d30:	f383 8811 	msr	BASEPRI, r3
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	61fb      	str	r3, [r7, #28]
}
 8005d3e:	bf00      	nop
 8005d40:	e7fe      	b.n	8005d40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d42:	f000 ffb7 	bl	8006cb4 <xTaskGetSchedulerState>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d102      	bne.n	8005d52 <xQueueReceive+0x6e>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <xQueueReceive+0x72>
 8005d52:	2301      	movs	r3, #1
 8005d54:	e000      	b.n	8005d58 <xQueueReceive+0x74>
 8005d56:	2300      	movs	r3, #0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10a      	bne.n	8005d72 <xQueueReceive+0x8e>
	__asm volatile
 8005d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	61bb      	str	r3, [r7, #24]
}
 8005d6e:	bf00      	nop
 8005d70:	e7fe      	b.n	8005d70 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d72:	f001 fde7 	bl	8007944 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d01f      	beq.n	8005dc2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d82:	68b9      	ldr	r1, [r7, #8]
 8005d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d86:	f000 f8f7 	bl	8005f78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	1e5a      	subs	r2, r3, #1
 8005d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00f      	beq.n	8005dba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9c:	3310      	adds	r3, #16
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 fde6 	bl	8006970 <xTaskRemoveFromEventList>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d007      	beq.n	8005dba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005daa:	4b3d      	ldr	r3, [pc, #244]	; (8005ea0 <xQueueReceive+0x1bc>)
 8005dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005dba:	f001 fdf3 	bl	80079a4 <vPortExitCritical>
				return pdPASS;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e069      	b.n	8005e96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d103      	bne.n	8005dd0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005dc8:	f001 fdec 	bl	80079a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	e062      	b.n	8005e96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d106      	bne.n	8005de4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005dd6:	f107 0310 	add.w	r3, r7, #16
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fe2a 	bl	8006a34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005de0:	2301      	movs	r3, #1
 8005de2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005de4:	f001 fdde 	bl	80079a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005de8:	f000 fb9e 	bl	8006528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005dec:	f001 fdaa 	bl	8007944 <vPortEnterCritical>
 8005df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005df6:	b25b      	sxtb	r3, r3
 8005df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfc:	d103      	bne.n	8005e06 <xQueueReceive+0x122>
 8005dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e0c:	b25b      	sxtb	r3, r3
 8005e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e12:	d103      	bne.n	8005e1c <xQueueReceive+0x138>
 8005e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e1c:	f001 fdc2 	bl	80079a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e20:	1d3a      	adds	r2, r7, #4
 8005e22:	f107 0310 	add.w	r3, r7, #16
 8005e26:	4611      	mov	r1, r2
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f000 fe19 	bl	8006a60 <xTaskCheckForTimeOut>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d123      	bne.n	8005e7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e36:	f000 f917 	bl	8006068 <prvIsQueueEmpty>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d017      	beq.n	8005e70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e42:	3324      	adds	r3, #36	; 0x24
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	4611      	mov	r1, r2
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 fd41 	bl	80068d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e50:	f000 f8b8 	bl	8005fc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e54:	f000 fb76 	bl	8006544 <xTaskResumeAll>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d189      	bne.n	8005d72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005e5e:	4b10      	ldr	r3, [pc, #64]	; (8005ea0 <xQueueReceive+0x1bc>)
 8005e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e64:	601a      	str	r2, [r3, #0]
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	f3bf 8f6f 	isb	sy
 8005e6e:	e780      	b.n	8005d72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e72:	f000 f8a7 	bl	8005fc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e76:	f000 fb65 	bl	8006544 <xTaskResumeAll>
 8005e7a:	e77a      	b.n	8005d72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e7e:	f000 f8a1 	bl	8005fc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e82:	f000 fb5f 	bl	8006544 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e88:	f000 f8ee 	bl	8006068 <prvIsQueueEmpty>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f43f af6f 	beq.w	8005d72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3730      	adds	r7, #48	; 0x30
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	e000ed04 	.word	0xe000ed04

08005ea4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10d      	bne.n	8005ede <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d14d      	bne.n	8005f66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 ff0e 	bl	8006cf0 <xTaskPriorityDisinherit>
 8005ed4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	609a      	str	r2, [r3, #8]
 8005edc:	e043      	b.n	8005f66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d119      	bne.n	8005f18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6858      	ldr	r0, [r3, #4]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eec:	461a      	mov	r2, r3
 8005eee:	68b9      	ldr	r1, [r7, #8]
 8005ef0:	f002 f964 	bl	80081bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efc:	441a      	add	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d32b      	bcc.n	8005f66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	605a      	str	r2, [r3, #4]
 8005f16:	e026      	b.n	8005f66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	68d8      	ldr	r0, [r3, #12]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	461a      	mov	r2, r3
 8005f22:	68b9      	ldr	r1, [r7, #8]
 8005f24:	f002 f94a 	bl	80081bc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	68da      	ldr	r2, [r3, #12]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f30:	425b      	negs	r3, r3
 8005f32:	441a      	add	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	68da      	ldr	r2, [r3, #12]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d207      	bcs.n	8005f54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4c:	425b      	negs	r3, r3
 8005f4e:	441a      	add	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d105      	bne.n	8005f66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d002      	beq.n	8005f66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	1c5a      	adds	r2, r3, #1
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f6e:	697b      	ldr	r3, [r7, #20]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3718      	adds	r7, #24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d018      	beq.n	8005fbc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	441a      	add	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	68da      	ldr	r2, [r3, #12]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d303      	bcc.n	8005fac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68d9      	ldr	r1, [r3, #12]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	6838      	ldr	r0, [r7, #0]
 8005fb8:	f002 f900 	bl	80081bc <memcpy>
	}
}
 8005fbc:	bf00      	nop
 8005fbe:	3708      	adds	r7, #8
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005fcc:	f001 fcba 	bl	8007944 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fd6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fd8:	e011      	b.n	8005ffe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d012      	beq.n	8006008 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	3324      	adds	r3, #36	; 0x24
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 fcc2 	bl	8006970 <xTaskRemoveFromEventList>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ff2:	f000 fd97 	bl	8006b24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ff6:	7bfb      	ldrb	r3, [r7, #15]
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006002:	2b00      	cmp	r3, #0
 8006004:	dce9      	bgt.n	8005fda <prvUnlockQueue+0x16>
 8006006:	e000      	b.n	800600a <prvUnlockQueue+0x46>
					break;
 8006008:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	22ff      	movs	r2, #255	; 0xff
 800600e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006012:	f001 fcc7 	bl	80079a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006016:	f001 fc95 	bl	8007944 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006020:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006022:	e011      	b.n	8006048 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d012      	beq.n	8006052 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3310      	adds	r3, #16
 8006030:	4618      	mov	r0, r3
 8006032:	f000 fc9d 	bl	8006970 <xTaskRemoveFromEventList>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800603c:	f000 fd72 	bl	8006b24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006040:	7bbb      	ldrb	r3, [r7, #14]
 8006042:	3b01      	subs	r3, #1
 8006044:	b2db      	uxtb	r3, r3
 8006046:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006048:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800604c:	2b00      	cmp	r3, #0
 800604e:	dce9      	bgt.n	8006024 <prvUnlockQueue+0x60>
 8006050:	e000      	b.n	8006054 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006052:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	22ff      	movs	r2, #255	; 0xff
 8006058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800605c:	f001 fca2 	bl	80079a4 <vPortExitCritical>
}
 8006060:	bf00      	nop
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006070:	f001 fc68 	bl	8007944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006078:	2b00      	cmp	r3, #0
 800607a:	d102      	bne.n	8006082 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800607c:	2301      	movs	r3, #1
 800607e:	60fb      	str	r3, [r7, #12]
 8006080:	e001      	b.n	8006086 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006082:	2300      	movs	r3, #0
 8006084:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006086:	f001 fc8d 	bl	80079a4 <vPortExitCritical>

	return xReturn;
 800608a:	68fb      	ldr	r3, [r7, #12]
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800609c:	f001 fc52 	bl	8007944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d102      	bne.n	80060b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80060ac:	2301      	movs	r3, #1
 80060ae:	60fb      	str	r3, [r7, #12]
 80060b0:	e001      	b.n	80060b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80060b2:	2300      	movs	r3, #0
 80060b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060b6:	f001 fc75 	bl	80079a4 <vPortExitCritical>

	return xReturn;
 80060ba:	68fb      	ldr	r3, [r7, #12]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060ce:	2300      	movs	r3, #0
 80060d0:	60fb      	str	r3, [r7, #12]
 80060d2:	e014      	b.n	80060fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80060d4:	4a0f      	ldr	r2, [pc, #60]	; (8006114 <vQueueAddToRegistry+0x50>)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10b      	bne.n	80060f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80060e0:	490c      	ldr	r1, [pc, #48]	; (8006114 <vQueueAddToRegistry+0x50>)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80060ea:	4a0a      	ldr	r2, [pc, #40]	; (8006114 <vQueueAddToRegistry+0x50>)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	4413      	add	r3, r2
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80060f6:	e006      	b.n	8006106 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	3301      	adds	r3, #1
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2b07      	cmp	r3, #7
 8006102:	d9e7      	bls.n	80060d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006104:	bf00      	nop
 8006106:	bf00      	nop
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	20000208 	.word	0x20000208

08006118 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006128:	f001 fc0c 	bl	8007944 <vPortEnterCritical>
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006132:	b25b      	sxtb	r3, r3
 8006134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006138:	d103      	bne.n	8006142 <vQueueWaitForMessageRestricted+0x2a>
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006148:	b25b      	sxtb	r3, r3
 800614a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614e:	d103      	bne.n	8006158 <vQueueWaitForMessageRestricted+0x40>
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006158:	f001 fc24 	bl	80079a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006160:	2b00      	cmp	r3, #0
 8006162:	d106      	bne.n	8006172 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	3324      	adds	r3, #36	; 0x24
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	68b9      	ldr	r1, [r7, #8]
 800616c:	4618      	mov	r0, r3
 800616e:	f000 fbd3 	bl	8006918 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006172:	6978      	ldr	r0, [r7, #20]
 8006174:	f7ff ff26 	bl	8005fc4 <prvUnlockQueue>
	}
 8006178:	bf00      	nop
 800617a:	3718      	adds	r7, #24
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006180:	b580      	push	{r7, lr}
 8006182:	b08c      	sub	sp, #48	; 0x30
 8006184:	af04      	add	r7, sp, #16
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	603b      	str	r3, [r7, #0]
 800618c:	4613      	mov	r3, r2
 800618e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006190:	88fb      	ldrh	r3, [r7, #6]
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4618      	mov	r0, r3
 8006196:	f001 fcf7 	bl	8007b88 <pvPortMalloc>
 800619a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00e      	beq.n	80061c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80061a2:	20a0      	movs	r0, #160	; 0xa0
 80061a4:	f001 fcf0 	bl	8007b88 <pvPortMalloc>
 80061a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d003      	beq.n	80061b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	631a      	str	r2, [r3, #48]	; 0x30
 80061b6:	e005      	b.n	80061c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80061b8:	6978      	ldr	r0, [r7, #20]
 80061ba:	f001 fdb1 	bl	8007d20 <vPortFree>
 80061be:	e001      	b.n	80061c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80061c0:	2300      	movs	r3, #0
 80061c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d013      	beq.n	80061f2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80061ca:	88fa      	ldrh	r2, [r7, #6]
 80061cc:	2300      	movs	r3, #0
 80061ce:	9303      	str	r3, [sp, #12]
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	9302      	str	r3, [sp, #8]
 80061d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d6:	9301      	str	r3, [sp, #4]
 80061d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	68b9      	ldr	r1, [r7, #8]
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 f80f 	bl	8006204 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061e6:	69f8      	ldr	r0, [r7, #28]
 80061e8:	f000 f8aa 	bl	8006340 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061ec:	2301      	movs	r3, #1
 80061ee:	61bb      	str	r3, [r7, #24]
 80061f0:	e002      	b.n	80061f8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061f2:	f04f 33ff 	mov.w	r3, #4294967295
 80061f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061f8:	69bb      	ldr	r3, [r7, #24]
	}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3720      	adds	r7, #32
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
	...

08006204 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b088      	sub	sp, #32
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
 8006210:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800621c:	3b01      	subs	r3, #1
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	f023 0307 	bic.w	r3, r3, #7
 800622a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00a      	beq.n	800624c <prvInitialiseNewTask+0x48>
	__asm volatile
 8006236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623a:	f383 8811 	msr	BASEPRI, r3
 800623e:	f3bf 8f6f 	isb	sy
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	617b      	str	r3, [r7, #20]
}
 8006248:	bf00      	nop
 800624a:	e7fe      	b.n	800624a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d01f      	beq.n	8006292 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006252:	2300      	movs	r3, #0
 8006254:	61fb      	str	r3, [r7, #28]
 8006256:	e012      	b.n	800627e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	4413      	add	r3, r2
 800625e:	7819      	ldrb	r1, [r3, #0]
 8006260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	4413      	add	r3, r2
 8006266:	3334      	adds	r3, #52	; 0x34
 8006268:	460a      	mov	r2, r1
 800626a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	4413      	add	r3, r2
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d006      	beq.n	8006286 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	3301      	adds	r3, #1
 800627c:	61fb      	str	r3, [r7, #28]
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	2b0f      	cmp	r3, #15
 8006282:	d9e9      	bls.n	8006258 <prvInitialiseNewTask+0x54>
 8006284:	e000      	b.n	8006288 <prvInitialiseNewTask+0x84>
			{
				break;
 8006286:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006290:	e003      	b.n	800629a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629c:	2b06      	cmp	r3, #6
 800629e:	d901      	bls.n	80062a4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80062a0:	2306      	movs	r3, #6
 80062a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80062a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062ae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80062b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b2:	2200      	movs	r2, #0
 80062b4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80062b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b8:	3304      	adds	r3, #4
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7ff fa26 	bl	800570c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80062c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c2:	3318      	adds	r3, #24
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7ff fa21 	bl	800570c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80062ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d2:	f1c3 0207 	rsb	r2, r3, #7
 80062d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80062da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80062f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f2:	334c      	adds	r3, #76	; 0x4c
 80062f4:	224c      	movs	r2, #76	; 0x4c
 80062f6:	2100      	movs	r1, #0
 80062f8:	4618      	mov	r0, r3
 80062fa:	f001 fedb 	bl	80080b4 <memset>
 80062fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006300:	4a0c      	ldr	r2, [pc, #48]	; (8006334 <prvInitialiseNewTask+0x130>)
 8006302:	651a      	str	r2, [r3, #80]	; 0x50
 8006304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006306:	4a0c      	ldr	r2, [pc, #48]	; (8006338 <prvInitialiseNewTask+0x134>)
 8006308:	655a      	str	r2, [r3, #84]	; 0x54
 800630a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630c:	4a0b      	ldr	r2, [pc, #44]	; (800633c <prvInitialiseNewTask+0x138>)
 800630e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	68f9      	ldr	r1, [r7, #12]
 8006314:	69b8      	ldr	r0, [r7, #24]
 8006316:	f001 f9e5 	bl	80076e4 <pxPortInitialiseStack>
 800631a:	4602      	mov	r2, r0
 800631c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006322:	2b00      	cmp	r3, #0
 8006324:	d002      	beq.n	800632c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800632a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800632c:	bf00      	nop
 800632e:	3720      	adds	r7, #32
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	200043bc 	.word	0x200043bc
 8006338:	20004424 	.word	0x20004424
 800633c:	2000448c 	.word	0x2000448c

08006340 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006348:	f001 fafc 	bl	8007944 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800634c:	4b2a      	ldr	r3, [pc, #168]	; (80063f8 <prvAddNewTaskToReadyList+0xb8>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3301      	adds	r3, #1
 8006352:	4a29      	ldr	r2, [pc, #164]	; (80063f8 <prvAddNewTaskToReadyList+0xb8>)
 8006354:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006356:	4b29      	ldr	r3, [pc, #164]	; (80063fc <prvAddNewTaskToReadyList+0xbc>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d109      	bne.n	8006372 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800635e:	4a27      	ldr	r2, [pc, #156]	; (80063fc <prvAddNewTaskToReadyList+0xbc>)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006364:	4b24      	ldr	r3, [pc, #144]	; (80063f8 <prvAddNewTaskToReadyList+0xb8>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d110      	bne.n	800638e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800636c:	f000 fbfe 	bl	8006b6c <prvInitialiseTaskLists>
 8006370:	e00d      	b.n	800638e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006372:	4b23      	ldr	r3, [pc, #140]	; (8006400 <prvAddNewTaskToReadyList+0xc0>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d109      	bne.n	800638e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800637a:	4b20      	ldr	r3, [pc, #128]	; (80063fc <prvAddNewTaskToReadyList+0xbc>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006384:	429a      	cmp	r2, r3
 8006386:	d802      	bhi.n	800638e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006388:	4a1c      	ldr	r2, [pc, #112]	; (80063fc <prvAddNewTaskToReadyList+0xbc>)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800638e:	4b1d      	ldr	r3, [pc, #116]	; (8006404 <prvAddNewTaskToReadyList+0xc4>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3301      	adds	r3, #1
 8006394:	4a1b      	ldr	r2, [pc, #108]	; (8006404 <prvAddNewTaskToReadyList+0xc4>)
 8006396:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639c:	2201      	movs	r2, #1
 800639e:	409a      	lsls	r2, r3
 80063a0:	4b19      	ldr	r3, [pc, #100]	; (8006408 <prvAddNewTaskToReadyList+0xc8>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	4a18      	ldr	r2, [pc, #96]	; (8006408 <prvAddNewTaskToReadyList+0xc8>)
 80063a8:	6013      	str	r3, [r2, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ae:	4613      	mov	r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4413      	add	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4a15      	ldr	r2, [pc, #84]	; (800640c <prvAddNewTaskToReadyList+0xcc>)
 80063b8:	441a      	add	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	3304      	adds	r3, #4
 80063be:	4619      	mov	r1, r3
 80063c0:	4610      	mov	r0, r2
 80063c2:	f7ff f9b0 	bl	8005726 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80063c6:	f001 faed 	bl	80079a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80063ca:	4b0d      	ldr	r3, [pc, #52]	; (8006400 <prvAddNewTaskToReadyList+0xc0>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00e      	beq.n	80063f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80063d2:	4b0a      	ldr	r3, [pc, #40]	; (80063fc <prvAddNewTaskToReadyList+0xbc>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063dc:	429a      	cmp	r2, r3
 80063de:	d207      	bcs.n	80063f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80063e0:	4b0b      	ldr	r3, [pc, #44]	; (8006410 <prvAddNewTaskToReadyList+0xd0>)
 80063e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063f0:	bf00      	nop
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	20000348 	.word	0x20000348
 80063fc:	20000248 	.word	0x20000248
 8006400:	20000354 	.word	0x20000354
 8006404:	20000364 	.word	0x20000364
 8006408:	20000350 	.word	0x20000350
 800640c:	2000024c 	.word	0x2000024c
 8006410:	e000ed04 	.word	0xe000ed04

08006414 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800641c:	2300      	movs	r3, #0
 800641e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d017      	beq.n	8006456 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006426:	4b13      	ldr	r3, [pc, #76]	; (8006474 <vTaskDelay+0x60>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00a      	beq.n	8006444 <vTaskDelay+0x30>
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	60bb      	str	r3, [r7, #8]
}
 8006440:	bf00      	nop
 8006442:	e7fe      	b.n	8006442 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006444:	f000 f870 	bl	8006528 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006448:	2100      	movs	r1, #0
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fdb6 	bl	8006fbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006450:	f000 f878 	bl	8006544 <xTaskResumeAll>
 8006454:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d107      	bne.n	800646c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800645c:	4b06      	ldr	r3, [pc, #24]	; (8006478 <vTaskDelay+0x64>)
 800645e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006462:	601a      	str	r2, [r3, #0]
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800646c:	bf00      	nop
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	20000370 	.word	0x20000370
 8006478:	e000ed04 	.word	0xe000ed04

0800647c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b086      	sub	sp, #24
 8006480:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8006482:	4b21      	ldr	r3, [pc, #132]	; (8006508 <vTaskStartScheduler+0x8c>)
 8006484:	9301      	str	r3, [sp, #4]
 8006486:	2300      	movs	r3, #0
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	2300      	movs	r3, #0
 800648c:	2280      	movs	r2, #128	; 0x80
 800648e:	491f      	ldr	r1, [pc, #124]	; (800650c <vTaskStartScheduler+0x90>)
 8006490:	481f      	ldr	r0, [pc, #124]	; (8006510 <vTaskStartScheduler+0x94>)
 8006492:	f7ff fe75 	bl	8006180 <xTaskCreate>
 8006496:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d102      	bne.n	80064a4 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800649e:	f000 fdf3 	bl	8007088 <xTimerCreateTimerTask>
 80064a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d11b      	bne.n	80064e2 <vTaskStartScheduler+0x66>
	__asm volatile
 80064aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	60bb      	str	r3, [r7, #8]
}
 80064bc:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80064be:	4b15      	ldr	r3, [pc, #84]	; (8006514 <vTaskStartScheduler+0x98>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	334c      	adds	r3, #76	; 0x4c
 80064c4:	4a14      	ldr	r2, [pc, #80]	; (8006518 <vTaskStartScheduler+0x9c>)
 80064c6:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80064c8:	4b14      	ldr	r3, [pc, #80]	; (800651c <vTaskStartScheduler+0xa0>)
 80064ca:	f04f 32ff 	mov.w	r2, #4294967295
 80064ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80064d0:	4b13      	ldr	r3, [pc, #76]	; (8006520 <vTaskStartScheduler+0xa4>)
 80064d2:	2201      	movs	r2, #1
 80064d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80064d6:	4b13      	ldr	r3, [pc, #76]	; (8006524 <vTaskStartScheduler+0xa8>)
 80064d8:	2200      	movs	r2, #0
 80064da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80064dc:	f001 f990 	bl	8007800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80064e0:	e00e      	b.n	8006500 <vTaskStartScheduler+0x84>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e8:	d10a      	bne.n	8006500 <vTaskStartScheduler+0x84>
	__asm volatile
 80064ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ee:	f383 8811 	msr	BASEPRI, r3
 80064f2:	f3bf 8f6f 	isb	sy
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	607b      	str	r3, [r7, #4]
}
 80064fc:	bf00      	nop
 80064fe:	e7fe      	b.n	80064fe <vTaskStartScheduler+0x82>
}
 8006500:	bf00      	nop
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	2000036c 	.word	0x2000036c
 800650c:	0800829c 	.word	0x0800829c
 8006510:	08006b3d 	.word	0x08006b3d
 8006514:	20000248 	.word	0x20000248
 8006518:	2000005c 	.word	0x2000005c
 800651c:	20000368 	.word	0x20000368
 8006520:	20000354 	.word	0x20000354
 8006524:	2000034c 	.word	0x2000034c

08006528 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006528:	b480      	push	{r7}
 800652a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800652c:	4b04      	ldr	r3, [pc, #16]	; (8006540 <vTaskSuspendAll+0x18>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3301      	adds	r3, #1
 8006532:	4a03      	ldr	r2, [pc, #12]	; (8006540 <vTaskSuspendAll+0x18>)
 8006534:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006536:	bf00      	nop
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	20000370 	.word	0x20000370

08006544 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800654a:	2300      	movs	r3, #0
 800654c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800654e:	2300      	movs	r3, #0
 8006550:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006552:	4b41      	ldr	r3, [pc, #260]	; (8006658 <xTaskResumeAll+0x114>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10a      	bne.n	8006570 <xTaskResumeAll+0x2c>
	__asm volatile
 800655a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	603b      	str	r3, [r7, #0]
}
 800656c:	bf00      	nop
 800656e:	e7fe      	b.n	800656e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006570:	f001 f9e8 	bl	8007944 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006574:	4b38      	ldr	r3, [pc, #224]	; (8006658 <xTaskResumeAll+0x114>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3b01      	subs	r3, #1
 800657a:	4a37      	ldr	r2, [pc, #220]	; (8006658 <xTaskResumeAll+0x114>)
 800657c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800657e:	4b36      	ldr	r3, [pc, #216]	; (8006658 <xTaskResumeAll+0x114>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d161      	bne.n	800664a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006586:	4b35      	ldr	r3, [pc, #212]	; (800665c <xTaskResumeAll+0x118>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d05d      	beq.n	800664a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800658e:	e02e      	b.n	80065ee <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006590:	4b33      	ldr	r3, [pc, #204]	; (8006660 <xTaskResumeAll+0x11c>)
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	3318      	adds	r3, #24
 800659c:	4618      	mov	r0, r3
 800659e:	f7ff f91f 	bl	80057e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	3304      	adds	r3, #4
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7ff f91a 	bl	80057e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b0:	2201      	movs	r2, #1
 80065b2:	409a      	lsls	r2, r3
 80065b4:	4b2b      	ldr	r3, [pc, #172]	; (8006664 <xTaskResumeAll+0x120>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	4a2a      	ldr	r2, [pc, #168]	; (8006664 <xTaskResumeAll+0x120>)
 80065bc:	6013      	str	r3, [r2, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c2:	4613      	mov	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	4413      	add	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4a27      	ldr	r2, [pc, #156]	; (8006668 <xTaskResumeAll+0x124>)
 80065cc:	441a      	add	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	3304      	adds	r3, #4
 80065d2:	4619      	mov	r1, r3
 80065d4:	4610      	mov	r0, r2
 80065d6:	f7ff f8a6 	bl	8005726 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065de:	4b23      	ldr	r3, [pc, #140]	; (800666c <xTaskResumeAll+0x128>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d302      	bcc.n	80065ee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80065e8:	4b21      	ldr	r3, [pc, #132]	; (8006670 <xTaskResumeAll+0x12c>)
 80065ea:	2201      	movs	r2, #1
 80065ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065ee:	4b1c      	ldr	r3, [pc, #112]	; (8006660 <xTaskResumeAll+0x11c>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1cc      	bne.n	8006590 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80065fc:	f000 fb3a 	bl	8006c74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006600:	4b1c      	ldr	r3, [pc, #112]	; (8006674 <xTaskResumeAll+0x130>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d010      	beq.n	800662e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800660c:	f000 f846 	bl	800669c <xTaskIncrementTick>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d002      	beq.n	800661c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006616:	4b16      	ldr	r3, [pc, #88]	; (8006670 <xTaskResumeAll+0x12c>)
 8006618:	2201      	movs	r2, #1
 800661a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	3b01      	subs	r3, #1
 8006620:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1f1      	bne.n	800660c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006628:	4b12      	ldr	r3, [pc, #72]	; (8006674 <xTaskResumeAll+0x130>)
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800662e:	4b10      	ldr	r3, [pc, #64]	; (8006670 <xTaskResumeAll+0x12c>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d009      	beq.n	800664a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006636:	2301      	movs	r3, #1
 8006638:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800663a:	4b0f      	ldr	r3, [pc, #60]	; (8006678 <xTaskResumeAll+0x134>)
 800663c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006640:	601a      	str	r2, [r3, #0]
 8006642:	f3bf 8f4f 	dsb	sy
 8006646:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800664a:	f001 f9ab 	bl	80079a4 <vPortExitCritical>

	return xAlreadyYielded;
 800664e:	68bb      	ldr	r3, [r7, #8]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	20000370 	.word	0x20000370
 800665c:	20000348 	.word	0x20000348
 8006660:	20000308 	.word	0x20000308
 8006664:	20000350 	.word	0x20000350
 8006668:	2000024c 	.word	0x2000024c
 800666c:	20000248 	.word	0x20000248
 8006670:	2000035c 	.word	0x2000035c
 8006674:	20000358 	.word	0x20000358
 8006678:	e000ed04 	.word	0xe000ed04

0800667c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006682:	4b05      	ldr	r3, [pc, #20]	; (8006698 <xTaskGetTickCount+0x1c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006688:	687b      	ldr	r3, [r7, #4]
}
 800668a:	4618      	mov	r0, r3
 800668c:	370c      	adds	r7, #12
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	2000034c 	.word	0x2000034c

0800669c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80066a2:	2300      	movs	r3, #0
 80066a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066a6:	4b4e      	ldr	r3, [pc, #312]	; (80067e0 <xTaskIncrementTick+0x144>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f040 808e 	bne.w	80067cc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80066b0:	4b4c      	ldr	r3, [pc, #304]	; (80067e4 <xTaskIncrementTick+0x148>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	3301      	adds	r3, #1
 80066b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80066b8:	4a4a      	ldr	r2, [pc, #296]	; (80067e4 <xTaskIncrementTick+0x148>)
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d120      	bne.n	8006706 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80066c4:	4b48      	ldr	r3, [pc, #288]	; (80067e8 <xTaskIncrementTick+0x14c>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00a      	beq.n	80066e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	603b      	str	r3, [r7, #0]
}
 80066e0:	bf00      	nop
 80066e2:	e7fe      	b.n	80066e2 <xTaskIncrementTick+0x46>
 80066e4:	4b40      	ldr	r3, [pc, #256]	; (80067e8 <xTaskIncrementTick+0x14c>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	60fb      	str	r3, [r7, #12]
 80066ea:	4b40      	ldr	r3, [pc, #256]	; (80067ec <xTaskIncrementTick+0x150>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a3e      	ldr	r2, [pc, #248]	; (80067e8 <xTaskIncrementTick+0x14c>)
 80066f0:	6013      	str	r3, [r2, #0]
 80066f2:	4a3e      	ldr	r2, [pc, #248]	; (80067ec <xTaskIncrementTick+0x150>)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6013      	str	r3, [r2, #0]
 80066f8:	4b3d      	ldr	r3, [pc, #244]	; (80067f0 <xTaskIncrementTick+0x154>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3301      	adds	r3, #1
 80066fe:	4a3c      	ldr	r2, [pc, #240]	; (80067f0 <xTaskIncrementTick+0x154>)
 8006700:	6013      	str	r3, [r2, #0]
 8006702:	f000 fab7 	bl	8006c74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006706:	4b3b      	ldr	r3, [pc, #236]	; (80067f4 <xTaskIncrementTick+0x158>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	429a      	cmp	r2, r3
 800670e:	d348      	bcc.n	80067a2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006710:	4b35      	ldr	r3, [pc, #212]	; (80067e8 <xTaskIncrementTick+0x14c>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d104      	bne.n	8006724 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800671a:	4b36      	ldr	r3, [pc, #216]	; (80067f4 <xTaskIncrementTick+0x158>)
 800671c:	f04f 32ff 	mov.w	r2, #4294967295
 8006720:	601a      	str	r2, [r3, #0]
					break;
 8006722:	e03e      	b.n	80067a2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006724:	4b30      	ldr	r3, [pc, #192]	; (80067e8 <xTaskIncrementTick+0x14c>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	429a      	cmp	r2, r3
 800673a:	d203      	bcs.n	8006744 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800673c:	4a2d      	ldr	r2, [pc, #180]	; (80067f4 <xTaskIncrementTick+0x158>)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006742:	e02e      	b.n	80067a2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	3304      	adds	r3, #4
 8006748:	4618      	mov	r0, r3
 800674a:	f7ff f849 	bl	80057e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006752:	2b00      	cmp	r3, #0
 8006754:	d004      	beq.n	8006760 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	3318      	adds	r3, #24
 800675a:	4618      	mov	r0, r3
 800675c:	f7ff f840 	bl	80057e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006764:	2201      	movs	r2, #1
 8006766:	409a      	lsls	r2, r3
 8006768:	4b23      	ldr	r3, [pc, #140]	; (80067f8 <xTaskIncrementTick+0x15c>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4313      	orrs	r3, r2
 800676e:	4a22      	ldr	r2, [pc, #136]	; (80067f8 <xTaskIncrementTick+0x15c>)
 8006770:	6013      	str	r3, [r2, #0]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006776:	4613      	mov	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4a1f      	ldr	r2, [pc, #124]	; (80067fc <xTaskIncrementTick+0x160>)
 8006780:	441a      	add	r2, r3
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	3304      	adds	r3, #4
 8006786:	4619      	mov	r1, r3
 8006788:	4610      	mov	r0, r2
 800678a:	f7fe ffcc 	bl	8005726 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006792:	4b1b      	ldr	r3, [pc, #108]	; (8006800 <xTaskIncrementTick+0x164>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006798:	429a      	cmp	r2, r3
 800679a:	d3b9      	bcc.n	8006710 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800679c:	2301      	movs	r3, #1
 800679e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067a0:	e7b6      	b.n	8006710 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80067a2:	4b17      	ldr	r3, [pc, #92]	; (8006800 <xTaskIncrementTick+0x164>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a8:	4914      	ldr	r1, [pc, #80]	; (80067fc <xTaskIncrementTick+0x160>)
 80067aa:	4613      	mov	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4413      	add	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	440b      	add	r3, r1
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d901      	bls.n	80067be <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80067ba:	2301      	movs	r3, #1
 80067bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80067be:	4b11      	ldr	r3, [pc, #68]	; (8006804 <xTaskIncrementTick+0x168>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d007      	beq.n	80067d6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80067c6:	2301      	movs	r3, #1
 80067c8:	617b      	str	r3, [r7, #20]
 80067ca:	e004      	b.n	80067d6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80067cc:	4b0e      	ldr	r3, [pc, #56]	; (8006808 <xTaskIncrementTick+0x16c>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	3301      	adds	r3, #1
 80067d2:	4a0d      	ldr	r2, [pc, #52]	; (8006808 <xTaskIncrementTick+0x16c>)
 80067d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80067d6:	697b      	ldr	r3, [r7, #20]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3718      	adds	r7, #24
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	20000370 	.word	0x20000370
 80067e4:	2000034c 	.word	0x2000034c
 80067e8:	20000300 	.word	0x20000300
 80067ec:	20000304 	.word	0x20000304
 80067f0:	20000360 	.word	0x20000360
 80067f4:	20000368 	.word	0x20000368
 80067f8:	20000350 	.word	0x20000350
 80067fc:	2000024c 	.word	0x2000024c
 8006800:	20000248 	.word	0x20000248
 8006804:	2000035c 	.word	0x2000035c
 8006808:	20000358 	.word	0x20000358

0800680c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800680c:	b480      	push	{r7}
 800680e:	b087      	sub	sp, #28
 8006810:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006812:	4b29      	ldr	r3, [pc, #164]	; (80068b8 <vTaskSwitchContext+0xac>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800681a:	4b28      	ldr	r3, [pc, #160]	; (80068bc <vTaskSwitchContext+0xb0>)
 800681c:	2201      	movs	r2, #1
 800681e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006820:	e044      	b.n	80068ac <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006822:	4b26      	ldr	r3, [pc, #152]	; (80068bc <vTaskSwitchContext+0xb0>)
 8006824:	2200      	movs	r2, #0
 8006826:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006828:	4b25      	ldr	r3, [pc, #148]	; (80068c0 <vTaskSwitchContext+0xb4>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	fab3 f383 	clz	r3, r3
 8006834:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006836:	7afb      	ldrb	r3, [r7, #11]
 8006838:	f1c3 031f 	rsb	r3, r3, #31
 800683c:	617b      	str	r3, [r7, #20]
 800683e:	4921      	ldr	r1, [pc, #132]	; (80068c4 <vTaskSwitchContext+0xb8>)
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	4613      	mov	r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	440b      	add	r3, r1
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10a      	bne.n	8006868 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	607b      	str	r3, [r7, #4]
}
 8006864:	bf00      	nop
 8006866:	e7fe      	b.n	8006866 <vTaskSwitchContext+0x5a>
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	4613      	mov	r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4a14      	ldr	r2, [pc, #80]	; (80068c4 <vTaskSwitchContext+0xb8>)
 8006874:	4413      	add	r3, r2
 8006876:	613b      	str	r3, [r7, #16]
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	605a      	str	r2, [r3, #4]
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	3308      	adds	r3, #8
 800688a:	429a      	cmp	r2, r3
 800688c:	d104      	bne.n	8006898 <vTaskSwitchContext+0x8c>
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	605a      	str	r2, [r3, #4]
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	4a0a      	ldr	r2, [pc, #40]	; (80068c8 <vTaskSwitchContext+0xbc>)
 80068a0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80068a2:	4b09      	ldr	r3, [pc, #36]	; (80068c8 <vTaskSwitchContext+0xbc>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	334c      	adds	r3, #76	; 0x4c
 80068a8:	4a08      	ldr	r2, [pc, #32]	; (80068cc <vTaskSwitchContext+0xc0>)
 80068aa:	6013      	str	r3, [r2, #0]
}
 80068ac:	bf00      	nop
 80068ae:	371c      	adds	r7, #28
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	20000370 	.word	0x20000370
 80068bc:	2000035c 	.word	0x2000035c
 80068c0:	20000350 	.word	0x20000350
 80068c4:	2000024c 	.word	0x2000024c
 80068c8:	20000248 	.word	0x20000248
 80068cc:	2000005c 	.word	0x2000005c

080068d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10a      	bne.n	80068f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80068e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	60fb      	str	r3, [r7, #12]
}
 80068f2:	bf00      	nop
 80068f4:	e7fe      	b.n	80068f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068f6:	4b07      	ldr	r3, [pc, #28]	; (8006914 <vTaskPlaceOnEventList+0x44>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3318      	adds	r3, #24
 80068fc:	4619      	mov	r1, r3
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7fe ff35 	bl	800576e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006904:	2101      	movs	r1, #1
 8006906:	6838      	ldr	r0, [r7, #0]
 8006908:	f000 fb58 	bl	8006fbc <prvAddCurrentTaskToDelayedList>
}
 800690c:	bf00      	nop
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	20000248 	.word	0x20000248

08006918 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006918:	b580      	push	{r7, lr}
 800691a:	b086      	sub	sp, #24
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10a      	bne.n	8006940 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800692a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692e:	f383 8811 	msr	BASEPRI, r3
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	617b      	str	r3, [r7, #20]
}
 800693c:	bf00      	nop
 800693e:	e7fe      	b.n	800693e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006940:	4b0a      	ldr	r3, [pc, #40]	; (800696c <vTaskPlaceOnEventListRestricted+0x54>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3318      	adds	r3, #24
 8006946:	4619      	mov	r1, r3
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f7fe feec 	bl	8005726 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d002      	beq.n	800695a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006954:	f04f 33ff 	mov.w	r3, #4294967295
 8006958:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800695a:	6879      	ldr	r1, [r7, #4]
 800695c:	68b8      	ldr	r0, [r7, #8]
 800695e:	f000 fb2d 	bl	8006fbc <prvAddCurrentTaskToDelayedList>
	}
 8006962:	bf00      	nop
 8006964:	3718      	adds	r7, #24
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	20000248 	.word	0x20000248

08006970 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10a      	bne.n	800699c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	60fb      	str	r3, [r7, #12]
}
 8006998:	bf00      	nop
 800699a:	e7fe      	b.n	800699a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	3318      	adds	r3, #24
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7fe ff1d 	bl	80057e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069a6:	4b1d      	ldr	r3, [pc, #116]	; (8006a1c <xTaskRemoveFromEventList+0xac>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d11c      	bne.n	80069e8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	3304      	adds	r3, #4
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fe ff14 	bl	80057e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069bc:	2201      	movs	r2, #1
 80069be:	409a      	lsls	r2, r3
 80069c0:	4b17      	ldr	r3, [pc, #92]	; (8006a20 <xTaskRemoveFromEventList+0xb0>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	4a16      	ldr	r2, [pc, #88]	; (8006a20 <xTaskRemoveFromEventList+0xb0>)
 80069c8:	6013      	str	r3, [r2, #0]
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ce:	4613      	mov	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4a13      	ldr	r2, [pc, #76]	; (8006a24 <xTaskRemoveFromEventList+0xb4>)
 80069d8:	441a      	add	r2, r3
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	3304      	adds	r3, #4
 80069de:	4619      	mov	r1, r3
 80069e0:	4610      	mov	r0, r2
 80069e2:	f7fe fea0 	bl	8005726 <vListInsertEnd>
 80069e6:	e005      	b.n	80069f4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	3318      	adds	r3, #24
 80069ec:	4619      	mov	r1, r3
 80069ee:	480e      	ldr	r0, [pc, #56]	; (8006a28 <xTaskRemoveFromEventList+0xb8>)
 80069f0:	f7fe fe99 	bl	8005726 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f8:	4b0c      	ldr	r3, [pc, #48]	; (8006a2c <xTaskRemoveFromEventList+0xbc>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d905      	bls.n	8006a0e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a02:	2301      	movs	r3, #1
 8006a04:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a06:	4b0a      	ldr	r3, [pc, #40]	; (8006a30 <xTaskRemoveFromEventList+0xc0>)
 8006a08:	2201      	movs	r2, #1
 8006a0a:	601a      	str	r2, [r3, #0]
 8006a0c:	e001      	b.n	8006a12 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a12:	697b      	ldr	r3, [r7, #20]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	20000370 	.word	0x20000370
 8006a20:	20000350 	.word	0x20000350
 8006a24:	2000024c 	.word	0x2000024c
 8006a28:	20000308 	.word	0x20000308
 8006a2c:	20000248 	.word	0x20000248
 8006a30:	2000035c 	.word	0x2000035c

08006a34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a3c:	4b06      	ldr	r3, [pc, #24]	; (8006a58 <vTaskInternalSetTimeOutState+0x24>)
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a44:	4b05      	ldr	r3, [pc, #20]	; (8006a5c <vTaskInternalSetTimeOutState+0x28>)
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	605a      	str	r2, [r3, #4]
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	20000360 	.word	0x20000360
 8006a5c:	2000034c 	.word	0x2000034c

08006a60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b088      	sub	sp, #32
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10a      	bne.n	8006a86 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	613b      	str	r3, [r7, #16]
}
 8006a82:	bf00      	nop
 8006a84:	e7fe      	b.n	8006a84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10a      	bne.n	8006aa2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	60fb      	str	r3, [r7, #12]
}
 8006a9e:	bf00      	nop
 8006aa0:	e7fe      	b.n	8006aa0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006aa2:	f000 ff4f 	bl	8007944 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006aa6:	4b1d      	ldr	r3, [pc, #116]	; (8006b1c <xTaskCheckForTimeOut+0xbc>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006abe:	d102      	bne.n	8006ac6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	61fb      	str	r3, [r7, #28]
 8006ac4:	e023      	b.n	8006b0e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	4b15      	ldr	r3, [pc, #84]	; (8006b20 <xTaskCheckForTimeOut+0xc0>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d007      	beq.n	8006ae2 <xTaskCheckForTimeOut+0x82>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	69ba      	ldr	r2, [r7, #24]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d302      	bcc.n	8006ae2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006adc:	2301      	movs	r3, #1
 8006ade:	61fb      	str	r3, [r7, #28]
 8006ae0:	e015      	b.n	8006b0e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d20b      	bcs.n	8006b04 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	1ad2      	subs	r2, r2, r3
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7ff ff9b 	bl	8006a34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006afe:	2300      	movs	r3, #0
 8006b00:	61fb      	str	r3, [r7, #28]
 8006b02:	e004      	b.n	8006b0e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	2200      	movs	r2, #0
 8006b08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b0e:	f000 ff49 	bl	80079a4 <vPortExitCritical>

	return xReturn;
 8006b12:	69fb      	ldr	r3, [r7, #28]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3720      	adds	r7, #32
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	2000034c 	.word	0x2000034c
 8006b20:	20000360 	.word	0x20000360

08006b24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b24:	b480      	push	{r7}
 8006b26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b28:	4b03      	ldr	r3, [pc, #12]	; (8006b38 <vTaskMissedYield+0x14>)
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	601a      	str	r2, [r3, #0]
}
 8006b2e:	bf00      	nop
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	2000035c 	.word	0x2000035c

08006b3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b44:	f000 f852 	bl	8006bec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b48:	4b06      	ldr	r3, [pc, #24]	; (8006b64 <prvIdleTask+0x28>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d9f9      	bls.n	8006b44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b50:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <prvIdleTask+0x2c>)
 8006b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b56:	601a      	str	r2, [r3, #0]
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b60:	e7f0      	b.n	8006b44 <prvIdleTask+0x8>
 8006b62:	bf00      	nop
 8006b64:	2000024c 	.word	0x2000024c
 8006b68:	e000ed04 	.word	0xe000ed04

08006b6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b72:	2300      	movs	r3, #0
 8006b74:	607b      	str	r3, [r7, #4]
 8006b76:	e00c      	b.n	8006b92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4a12      	ldr	r2, [pc, #72]	; (8006bcc <prvInitialiseTaskLists+0x60>)
 8006b84:	4413      	add	r3, r2
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7fe fda0 	bl	80056cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	607b      	str	r3, [r7, #4]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b06      	cmp	r3, #6
 8006b96:	d9ef      	bls.n	8006b78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006b98:	480d      	ldr	r0, [pc, #52]	; (8006bd0 <prvInitialiseTaskLists+0x64>)
 8006b9a:	f7fe fd97 	bl	80056cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b9e:	480d      	ldr	r0, [pc, #52]	; (8006bd4 <prvInitialiseTaskLists+0x68>)
 8006ba0:	f7fe fd94 	bl	80056cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ba4:	480c      	ldr	r0, [pc, #48]	; (8006bd8 <prvInitialiseTaskLists+0x6c>)
 8006ba6:	f7fe fd91 	bl	80056cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006baa:	480c      	ldr	r0, [pc, #48]	; (8006bdc <prvInitialiseTaskLists+0x70>)
 8006bac:	f7fe fd8e 	bl	80056cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006bb0:	480b      	ldr	r0, [pc, #44]	; (8006be0 <prvInitialiseTaskLists+0x74>)
 8006bb2:	f7fe fd8b 	bl	80056cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006bb6:	4b0b      	ldr	r3, [pc, #44]	; (8006be4 <prvInitialiseTaskLists+0x78>)
 8006bb8:	4a05      	ldr	r2, [pc, #20]	; (8006bd0 <prvInitialiseTaskLists+0x64>)
 8006bba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006bbc:	4b0a      	ldr	r3, [pc, #40]	; (8006be8 <prvInitialiseTaskLists+0x7c>)
 8006bbe:	4a05      	ldr	r2, [pc, #20]	; (8006bd4 <prvInitialiseTaskLists+0x68>)
 8006bc0:	601a      	str	r2, [r3, #0]
}
 8006bc2:	bf00      	nop
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	2000024c 	.word	0x2000024c
 8006bd0:	200002d8 	.word	0x200002d8
 8006bd4:	200002ec 	.word	0x200002ec
 8006bd8:	20000308 	.word	0x20000308
 8006bdc:	2000031c 	.word	0x2000031c
 8006be0:	20000334 	.word	0x20000334
 8006be4:	20000300 	.word	0x20000300
 8006be8:	20000304 	.word	0x20000304

08006bec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bf2:	e019      	b.n	8006c28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006bf4:	f000 fea6 	bl	8007944 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bf8:	4b10      	ldr	r3, [pc, #64]	; (8006c3c <prvCheckTasksWaitingTermination+0x50>)
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	3304      	adds	r3, #4
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7fe fdeb 	bl	80057e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c0a:	4b0d      	ldr	r3, [pc, #52]	; (8006c40 <prvCheckTasksWaitingTermination+0x54>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	4a0b      	ldr	r2, [pc, #44]	; (8006c40 <prvCheckTasksWaitingTermination+0x54>)
 8006c12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c14:	4b0b      	ldr	r3, [pc, #44]	; (8006c44 <prvCheckTasksWaitingTermination+0x58>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	4a0a      	ldr	r2, [pc, #40]	; (8006c44 <prvCheckTasksWaitingTermination+0x58>)
 8006c1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c1e:	f000 fec1 	bl	80079a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f810 	bl	8006c48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c28:	4b06      	ldr	r3, [pc, #24]	; (8006c44 <prvCheckTasksWaitingTermination+0x58>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1e1      	bne.n	8006bf4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c30:	bf00      	nop
 8006c32:	bf00      	nop
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	2000031c 	.word	0x2000031c
 8006c40:	20000348 	.word	0x20000348
 8006c44:	20000330 	.word	0x20000330

08006c48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	334c      	adds	r3, #76	; 0x4c
 8006c54:	4618      	mov	r0, r3
 8006c56:	f001 fa35 	bl	80080c4 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f001 f85e 	bl	8007d20 <vPortFree>
			vPortFree( pxTCB );
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f001 f85b 	bl	8007d20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c6a:	bf00      	nop
 8006c6c:	3708      	adds	r7, #8
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
	...

08006c74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c7a:	4b0c      	ldr	r3, [pc, #48]	; (8006cac <prvResetNextTaskUnblockTime+0x38>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d104      	bne.n	8006c8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c84:	4b0a      	ldr	r3, [pc, #40]	; (8006cb0 <prvResetNextTaskUnblockTime+0x3c>)
 8006c86:	f04f 32ff 	mov.w	r2, #4294967295
 8006c8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c8c:	e008      	b.n	8006ca0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c8e:	4b07      	ldr	r3, [pc, #28]	; (8006cac <prvResetNextTaskUnblockTime+0x38>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	4a04      	ldr	r2, [pc, #16]	; (8006cb0 <prvResetNextTaskUnblockTime+0x3c>)
 8006c9e:	6013      	str	r3, [r2, #0]
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	20000300 	.word	0x20000300
 8006cb0:	20000368 	.word	0x20000368

08006cb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006cba:	4b0b      	ldr	r3, [pc, #44]	; (8006ce8 <xTaskGetSchedulerState+0x34>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d102      	bne.n	8006cc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	607b      	str	r3, [r7, #4]
 8006cc6:	e008      	b.n	8006cda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cc8:	4b08      	ldr	r3, [pc, #32]	; (8006cec <xTaskGetSchedulerState+0x38>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d102      	bne.n	8006cd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	607b      	str	r3, [r7, #4]
 8006cd4:	e001      	b.n	8006cda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006cda:	687b      	ldr	r3, [r7, #4]
	}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr
 8006ce8:	20000354 	.word	0x20000354
 8006cec:	20000370 	.word	0x20000370

08006cf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b086      	sub	sp, #24
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d06e      	beq.n	8006de4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d06:	4b3a      	ldr	r3, [pc, #232]	; (8006df0 <xTaskPriorityDisinherit+0x100>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d00a      	beq.n	8006d26 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	60fb      	str	r3, [r7, #12]
}
 8006d22:	bf00      	nop
 8006d24:	e7fe      	b.n	8006d24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10a      	bne.n	8006d44 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d32:	f383 8811 	msr	BASEPRI, r3
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	60bb      	str	r3, [r7, #8]
}
 8006d40:	bf00      	nop
 8006d42:	e7fe      	b.n	8006d42 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d48:	1e5a      	subs	r2, r3, #1
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d044      	beq.n	8006de4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d140      	bne.n	8006de4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	3304      	adds	r3, #4
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7fe fd3a 	bl	80057e0 <uxListRemove>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d115      	bne.n	8006d9e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d76:	491f      	ldr	r1, [pc, #124]	; (8006df4 <xTaskPriorityDisinherit+0x104>)
 8006d78:	4613      	mov	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4413      	add	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	440b      	add	r3, r1
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10a      	bne.n	8006d9e <xTaskPriorityDisinherit+0xae>
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d92:	43da      	mvns	r2, r3
 8006d94:	4b18      	ldr	r3, [pc, #96]	; (8006df8 <xTaskPriorityDisinherit+0x108>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4013      	ands	r3, r2
 8006d9a:	4a17      	ldr	r2, [pc, #92]	; (8006df8 <xTaskPriorityDisinherit+0x108>)
 8006d9c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006daa:	f1c3 0207 	rsb	r2, r3, #7
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db6:	2201      	movs	r2, #1
 8006db8:	409a      	lsls	r2, r3
 8006dba:	4b0f      	ldr	r3, [pc, #60]	; (8006df8 <xTaskPriorityDisinherit+0x108>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	4a0d      	ldr	r2, [pc, #52]	; (8006df8 <xTaskPriorityDisinherit+0x108>)
 8006dc2:	6013      	str	r3, [r2, #0]
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc8:	4613      	mov	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4413      	add	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4a08      	ldr	r2, [pc, #32]	; (8006df4 <xTaskPriorityDisinherit+0x104>)
 8006dd2:	441a      	add	r2, r3
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	3304      	adds	r3, #4
 8006dd8:	4619      	mov	r1, r3
 8006dda:	4610      	mov	r0, r2
 8006ddc:	f7fe fca3 	bl	8005726 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006de0:	2301      	movs	r3, #1
 8006de2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006de4:	697b      	ldr	r3, [r7, #20]
	}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3718      	adds	r7, #24
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	20000248 	.word	0x20000248
 8006df4:	2000024c 	.word	0x2000024c
 8006df8:	20000350 	.word	0x20000350

08006dfc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8006e06:	f000 fd9d 	bl	8007944 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8006e0a:	4b20      	ldr	r3, [pc, #128]	; (8006e8c <ulTaskNotifyTake+0x90>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d113      	bne.n	8006e3e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006e16:	4b1d      	ldr	r3, [pc, #116]	; (8006e8c <ulTaskNotifyTake+0x90>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00b      	beq.n	8006e3e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e26:	2101      	movs	r1, #1
 8006e28:	6838      	ldr	r0, [r7, #0]
 8006e2a:	f000 f8c7 	bl	8006fbc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006e2e:	4b18      	ldr	r3, [pc, #96]	; (8006e90 <ulTaskNotifyTake+0x94>)
 8006e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e34:	601a      	str	r2, [r3, #0]
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006e3e:	f000 fdb1 	bl	80079a4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8006e42:	f000 fd7f 	bl	8007944 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8006e46:	4b11      	ldr	r3, [pc, #68]	; (8006e8c <ulTaskNotifyTake+0x90>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e4e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00e      	beq.n	8006e74 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d005      	beq.n	8006e68 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8006e5c:	4b0b      	ldr	r3, [pc, #44]	; (8006e8c <ulTaskNotifyTake+0x90>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8006e66:	e005      	b.n	8006e74 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8006e68:	4b08      	ldr	r3, [pc, #32]	; (8006e8c <ulTaskNotifyTake+0x90>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	3a01      	subs	r2, #1
 8006e70:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e74:	4b05      	ldr	r3, [pc, #20]	; (8006e8c <ulTaskNotifyTake+0x90>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 8006e7e:	f000 fd91 	bl	80079a4 <vPortExitCritical>

		return ulReturn;
 8006e82:	68fb      	ldr	r3, [r7, #12]
	}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	20000248 	.word	0x20000248
 8006e90:	e000ed04 	.word	0xe000ed04

08006e94 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b08a      	sub	sp, #40	; 0x28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10a      	bne.n	8006eba <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 8006ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea8:	f383 8811 	msr	BASEPRI, r3
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	61bb      	str	r3, [r7, #24]
}
 8006eb6:	bf00      	nop
 8006eb8:	e7fe      	b.n	8006eb8 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006eba:	f000 fe25 	bl	8007b08 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8006ec2:	f3ef 8211 	mrs	r2, BASEPRI
 8006ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eca:	f383 8811 	msr	BASEPRI, r3
 8006ece:	f3bf 8f6f 	isb	sy
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	617a      	str	r2, [r7, #20]
 8006ed8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006eda:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006edc:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee0:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006ee4:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee8:	2202      	movs	r2, #2
 8006eea:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ef4:	1c5a      	adds	r2, r3, #1
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006efc:	7ffb      	ldrb	r3, [r7, #31]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d145      	bne.n	8006f8e <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00a      	beq.n	8006f20 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8006f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	60fb      	str	r3, [r7, #12]
}
 8006f1c:	bf00      	nop
 8006f1e:	e7fe      	b.n	8006f1e <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f20:	4b20      	ldr	r3, [pc, #128]	; (8006fa4 <vTaskNotifyGiveFromISR+0x110>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d11c      	bne.n	8006f62 <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2a:	3304      	adds	r3, #4
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7fe fc57 	bl	80057e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f36:	2201      	movs	r2, #1
 8006f38:	409a      	lsls	r2, r3
 8006f3a:	4b1b      	ldr	r3, [pc, #108]	; (8006fa8 <vTaskNotifyGiveFromISR+0x114>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	4a19      	ldr	r2, [pc, #100]	; (8006fa8 <vTaskNotifyGiveFromISR+0x114>)
 8006f42:	6013      	str	r3, [r2, #0]
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f48:	4613      	mov	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4413      	add	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4a16      	ldr	r2, [pc, #88]	; (8006fac <vTaskNotifyGiveFromISR+0x118>)
 8006f52:	441a      	add	r2, r3
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	3304      	adds	r3, #4
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	f7fe fbe3 	bl	8005726 <vListInsertEnd>
 8006f60:	e005      	b.n	8006f6e <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f64:	3318      	adds	r3, #24
 8006f66:	4619      	mov	r1, r3
 8006f68:	4811      	ldr	r0, [pc, #68]	; (8006fb0 <vTaskNotifyGiveFromISR+0x11c>)
 8006f6a:	f7fe fbdc 	bl	8005726 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f72:	4b10      	ldr	r3, [pc, #64]	; (8006fb4 <vTaskNotifyGiveFromISR+0x120>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d908      	bls.n	8006f8e <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d002      	beq.n	8006f88 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2201      	movs	r2, #1
 8006f86:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006f88:	4b0b      	ldr	r3, [pc, #44]	; (8006fb8 <vTaskNotifyGiveFromISR+0x124>)
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	601a      	str	r2, [r3, #0]
 8006f8e:	6a3b      	ldr	r3, [r7, #32]
 8006f90:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	f383 8811 	msr	BASEPRI, r3
}
 8006f98:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8006f9a:	bf00      	nop
 8006f9c:	3728      	adds	r7, #40	; 0x28
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	20000370 	.word	0x20000370
 8006fa8:	20000350 	.word	0x20000350
 8006fac:	2000024c 	.word	0x2000024c
 8006fb0:	20000308 	.word	0x20000308
 8006fb4:	20000248 	.word	0x20000248
 8006fb8:	2000035c 	.word	0x2000035c

08006fbc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006fc6:	4b29      	ldr	r3, [pc, #164]	; (800706c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fcc:	4b28      	ldr	r3, [pc, #160]	; (8007070 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7fe fc04 	bl	80057e0 <uxListRemove>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10b      	bne.n	8006ff6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006fde:	4b24      	ldr	r3, [pc, #144]	; (8007070 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fea:	43da      	mvns	r2, r3
 8006fec:	4b21      	ldr	r3, [pc, #132]	; (8007074 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	4a20      	ldr	r2, [pc, #128]	; (8007074 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ff4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffc:	d10a      	bne.n	8007014 <prvAddCurrentTaskToDelayedList+0x58>
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d007      	beq.n	8007014 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007004:	4b1a      	ldr	r3, [pc, #104]	; (8007070 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3304      	adds	r3, #4
 800700a:	4619      	mov	r1, r3
 800700c:	481a      	ldr	r0, [pc, #104]	; (8007078 <prvAddCurrentTaskToDelayedList+0xbc>)
 800700e:	f7fe fb8a 	bl	8005726 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007012:	e026      	b.n	8007062 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4413      	add	r3, r2
 800701a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800701c:	4b14      	ldr	r3, [pc, #80]	; (8007070 <prvAddCurrentTaskToDelayedList+0xb4>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	429a      	cmp	r2, r3
 800702a:	d209      	bcs.n	8007040 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800702c:	4b13      	ldr	r3, [pc, #76]	; (800707c <prvAddCurrentTaskToDelayedList+0xc0>)
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	4b0f      	ldr	r3, [pc, #60]	; (8007070 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3304      	adds	r3, #4
 8007036:	4619      	mov	r1, r3
 8007038:	4610      	mov	r0, r2
 800703a:	f7fe fb98 	bl	800576e <vListInsert>
}
 800703e:	e010      	b.n	8007062 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007040:	4b0f      	ldr	r3, [pc, #60]	; (8007080 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	4b0a      	ldr	r3, [pc, #40]	; (8007070 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	3304      	adds	r3, #4
 800704a:	4619      	mov	r1, r3
 800704c:	4610      	mov	r0, r2
 800704e:	f7fe fb8e 	bl	800576e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007052:	4b0c      	ldr	r3, [pc, #48]	; (8007084 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	429a      	cmp	r2, r3
 800705a:	d202      	bcs.n	8007062 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800705c:	4a09      	ldr	r2, [pc, #36]	; (8007084 <prvAddCurrentTaskToDelayedList+0xc8>)
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	6013      	str	r3, [r2, #0]
}
 8007062:	bf00      	nop
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	2000034c 	.word	0x2000034c
 8007070:	20000248 	.word	0x20000248
 8007074:	20000350 	.word	0x20000350
 8007078:	20000334 	.word	0x20000334
 800707c:	20000304 	.word	0x20000304
 8007080:	20000300 	.word	0x20000300
 8007084:	20000368 	.word	0x20000368

08007088 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800708e:	2300      	movs	r3, #0
 8007090:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007092:	f000 faf1 	bl	8007678 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007096:	4b11      	ldr	r3, [pc, #68]	; (80070dc <xTimerCreateTimerTask+0x54>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00b      	beq.n	80070b6 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800709e:	4b10      	ldr	r3, [pc, #64]	; (80070e0 <xTimerCreateTimerTask+0x58>)
 80070a0:	9301      	str	r3, [sp, #4]
 80070a2:	2305      	movs	r3, #5
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	2300      	movs	r3, #0
 80070a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070ac:	490d      	ldr	r1, [pc, #52]	; (80070e4 <xTimerCreateTimerTask+0x5c>)
 80070ae:	480e      	ldr	r0, [pc, #56]	; (80070e8 <xTimerCreateTimerTask+0x60>)
 80070b0:	f7ff f866 	bl	8006180 <xTaskCreate>
 80070b4:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10a      	bne.n	80070d2 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 80070bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	603b      	str	r3, [r7, #0]
}
 80070ce:	bf00      	nop
 80070d0:	e7fe      	b.n	80070d0 <xTimerCreateTimerTask+0x48>
	return xReturn;
 80070d2:	687b      	ldr	r3, [r7, #4]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3708      	adds	r7, #8
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	200003a4 	.word	0x200003a4
 80070e0:	200003a8 	.word	0x200003a8
 80070e4:	080082a4 	.word	0x080082a4
 80070e8:	08007221 	.word	0x08007221

080070ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b08a      	sub	sp, #40	; 0x28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
 80070f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80070fa:	2300      	movs	r3, #0
 80070fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d10a      	bne.n	800711a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007108:	f383 8811 	msr	BASEPRI, r3
 800710c:	f3bf 8f6f 	isb	sy
 8007110:	f3bf 8f4f 	dsb	sy
 8007114:	623b      	str	r3, [r7, #32]
}
 8007116:	bf00      	nop
 8007118:	e7fe      	b.n	8007118 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800711a:	4b1a      	ldr	r3, [pc, #104]	; (8007184 <xTimerGenericCommand+0x98>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d02a      	beq.n	8007178 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	2b05      	cmp	r3, #5
 8007132:	dc18      	bgt.n	8007166 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007134:	f7ff fdbe 	bl	8006cb4 <xTaskGetSchedulerState>
 8007138:	4603      	mov	r3, r0
 800713a:	2b02      	cmp	r3, #2
 800713c:	d109      	bne.n	8007152 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800713e:	4b11      	ldr	r3, [pc, #68]	; (8007184 <xTimerGenericCommand+0x98>)
 8007140:	6818      	ldr	r0, [r3, #0]
 8007142:	f107 0110 	add.w	r1, r7, #16
 8007146:	2300      	movs	r3, #0
 8007148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800714a:	f7fe fc31 	bl	80059b0 <xQueueGenericSend>
 800714e:	6278      	str	r0, [r7, #36]	; 0x24
 8007150:	e012      	b.n	8007178 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007152:	4b0c      	ldr	r3, [pc, #48]	; (8007184 <xTimerGenericCommand+0x98>)
 8007154:	6818      	ldr	r0, [r3, #0]
 8007156:	f107 0110 	add.w	r1, r7, #16
 800715a:	2300      	movs	r3, #0
 800715c:	2200      	movs	r2, #0
 800715e:	f7fe fc27 	bl	80059b0 <xQueueGenericSend>
 8007162:	6278      	str	r0, [r7, #36]	; 0x24
 8007164:	e008      	b.n	8007178 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007166:	4b07      	ldr	r3, [pc, #28]	; (8007184 <xTimerGenericCommand+0x98>)
 8007168:	6818      	ldr	r0, [r3, #0]
 800716a:	f107 0110 	add.w	r1, r7, #16
 800716e:	2300      	movs	r3, #0
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	f7fe fd1b 	bl	8005bac <xQueueGenericSendFromISR>
 8007176:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800717a:	4618      	mov	r0, r3
 800717c:	3728      	adds	r7, #40	; 0x28
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	200003a4 	.word	0x200003a4

08007188 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b088      	sub	sp, #32
 800718c:	af02      	add	r7, sp, #8
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007192:	4b22      	ldr	r3, [pc, #136]	; (800721c <prvProcessExpiredTimer+0x94>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	3304      	adds	r3, #4
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fe fb1d 	bl	80057e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80071ac:	f003 0304 	and.w	r3, r3, #4
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d022      	beq.n	80071fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	699a      	ldr	r2, [r3, #24]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	18d1      	adds	r1, r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	6978      	ldr	r0, [r7, #20]
 80071c2:	f000 f8d1 	bl	8007368 <prvInsertTimerInActiveList>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d01f      	beq.n	800720c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071cc:	2300      	movs	r3, #0
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	2300      	movs	r3, #0
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	2100      	movs	r1, #0
 80071d6:	6978      	ldr	r0, [r7, #20]
 80071d8:	f7ff ff88 	bl	80070ec <xTimerGenericCommand>
 80071dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d113      	bne.n	800720c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80071e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e8:	f383 8811 	msr	BASEPRI, r3
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	60fb      	str	r3, [r7, #12]
}
 80071f6:	bf00      	nop
 80071f8:	e7fe      	b.n	80071f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007200:	f023 0301 	bic.w	r3, r3, #1
 8007204:	b2da      	uxtb	r2, r3
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	6978      	ldr	r0, [r7, #20]
 8007212:	4798      	blx	r3
}
 8007214:	bf00      	nop
 8007216:	3718      	adds	r7, #24
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	2000039c 	.word	0x2000039c

08007220 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007228:	f107 0308 	add.w	r3, r7, #8
 800722c:	4618      	mov	r0, r3
 800722e:	f000 f857 	bl	80072e0 <prvGetNextExpireTime>
 8007232:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	4619      	mov	r1, r3
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f000 f803 	bl	8007244 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800723e:	f000 f8d5 	bl	80073ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007242:	e7f1      	b.n	8007228 <prvTimerTask+0x8>

08007244 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800724e:	f7ff f96b 	bl	8006528 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007252:	f107 0308 	add.w	r3, r7, #8
 8007256:	4618      	mov	r0, r3
 8007258:	f000 f866 	bl	8007328 <prvSampleTimeNow>
 800725c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d130      	bne.n	80072c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10a      	bne.n	8007280 <prvProcessTimerOrBlockTask+0x3c>
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	429a      	cmp	r2, r3
 8007270:	d806      	bhi.n	8007280 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007272:	f7ff f967 	bl	8006544 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007276:	68f9      	ldr	r1, [r7, #12]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f7ff ff85 	bl	8007188 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800727e:	e024      	b.n	80072ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d008      	beq.n	8007298 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007286:	4b13      	ldr	r3, [pc, #76]	; (80072d4 <prvProcessTimerOrBlockTask+0x90>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d101      	bne.n	8007294 <prvProcessTimerOrBlockTask+0x50>
 8007290:	2301      	movs	r3, #1
 8007292:	e000      	b.n	8007296 <prvProcessTimerOrBlockTask+0x52>
 8007294:	2300      	movs	r3, #0
 8007296:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007298:	4b0f      	ldr	r3, [pc, #60]	; (80072d8 <prvProcessTimerOrBlockTask+0x94>)
 800729a:	6818      	ldr	r0, [r3, #0]
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	4619      	mov	r1, r3
 80072a6:	f7fe ff37 	bl	8006118 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80072aa:	f7ff f94b 	bl	8006544 <xTaskResumeAll>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10a      	bne.n	80072ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80072b4:	4b09      	ldr	r3, [pc, #36]	; (80072dc <prvProcessTimerOrBlockTask+0x98>)
 80072b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	f3bf 8f4f 	dsb	sy
 80072c0:	f3bf 8f6f 	isb	sy
}
 80072c4:	e001      	b.n	80072ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80072c6:	f7ff f93d 	bl	8006544 <xTaskResumeAll>
}
 80072ca:	bf00      	nop
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	200003a0 	.word	0x200003a0
 80072d8:	200003a4 	.word	0x200003a4
 80072dc:	e000ed04 	.word	0xe000ed04

080072e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80072e8:	4b0e      	ldr	r3, [pc, #56]	; (8007324 <prvGetNextExpireTime+0x44>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d101      	bne.n	80072f6 <prvGetNextExpireTime+0x16>
 80072f2:	2201      	movs	r2, #1
 80072f4:	e000      	b.n	80072f8 <prvGetNextExpireTime+0x18>
 80072f6:	2200      	movs	r2, #0
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d105      	bne.n	8007310 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007304:	4b07      	ldr	r3, [pc, #28]	; (8007324 <prvGetNextExpireTime+0x44>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	60fb      	str	r3, [r7, #12]
 800730e:	e001      	b.n	8007314 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007310:	2300      	movs	r3, #0
 8007312:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007314:	68fb      	ldr	r3, [r7, #12]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3714      	adds	r7, #20
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	2000039c 	.word	0x2000039c

08007328 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007330:	f7ff f9a4 	bl	800667c <xTaskGetTickCount>
 8007334:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007336:	4b0b      	ldr	r3, [pc, #44]	; (8007364 <prvSampleTimeNow+0x3c>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	429a      	cmp	r2, r3
 800733e:	d205      	bcs.n	800734c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007340:	f000 f936 	bl	80075b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	601a      	str	r2, [r3, #0]
 800734a:	e002      	b.n	8007352 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007352:	4a04      	ldr	r2, [pc, #16]	; (8007364 <prvSampleTimeNow+0x3c>)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007358:	68fb      	ldr	r3, [r7, #12]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	200003ac 	.word	0x200003ac

08007368 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
 8007374:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007376:	2300      	movs	r3, #0
 8007378:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	429a      	cmp	r2, r3
 800738c:	d812      	bhi.n	80073b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	1ad2      	subs	r2, r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	429a      	cmp	r2, r3
 800739a:	d302      	bcc.n	80073a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800739c:	2301      	movs	r3, #1
 800739e:	617b      	str	r3, [r7, #20]
 80073a0:	e01b      	b.n	80073da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80073a2:	4b10      	ldr	r3, [pc, #64]	; (80073e4 <prvInsertTimerInActiveList+0x7c>)
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	3304      	adds	r3, #4
 80073aa:	4619      	mov	r1, r3
 80073ac:	4610      	mov	r0, r2
 80073ae:	f7fe f9de 	bl	800576e <vListInsert>
 80073b2:	e012      	b.n	80073da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d206      	bcs.n	80073ca <prvInsertTimerInActiveList+0x62>
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d302      	bcc.n	80073ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80073c4:	2301      	movs	r3, #1
 80073c6:	617b      	str	r3, [r7, #20]
 80073c8:	e007      	b.n	80073da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073ca:	4b07      	ldr	r3, [pc, #28]	; (80073e8 <prvInsertTimerInActiveList+0x80>)
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	3304      	adds	r3, #4
 80073d2:	4619      	mov	r1, r3
 80073d4:	4610      	mov	r0, r2
 80073d6:	f7fe f9ca 	bl	800576e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80073da:	697b      	ldr	r3, [r7, #20]
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3718      	adds	r7, #24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	200003a0 	.word	0x200003a0
 80073e8:	2000039c 	.word	0x2000039c

080073ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08e      	sub	sp, #56	; 0x38
 80073f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073f2:	e0ca      	b.n	800758a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	da18      	bge.n	800742c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80073fa:	1d3b      	adds	r3, r7, #4
 80073fc:	3304      	adds	r3, #4
 80073fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10a      	bne.n	800741c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740a:	f383 8811 	msr	BASEPRI, r3
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	61fb      	str	r3, [r7, #28]
}
 8007418:	bf00      	nop
 800741a:	e7fe      	b.n	800741a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800741c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007422:	6850      	ldr	r0, [r2, #4]
 8007424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007426:	6892      	ldr	r2, [r2, #8]
 8007428:	4611      	mov	r1, r2
 800742a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	f2c0 80ab 	blt.w	800758a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d004      	beq.n	800744a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007442:	3304      	adds	r3, #4
 8007444:	4618      	mov	r0, r3
 8007446:	f7fe f9cb 	bl	80057e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800744a:	463b      	mov	r3, r7
 800744c:	4618      	mov	r0, r3
 800744e:	f7ff ff6b 	bl	8007328 <prvSampleTimeNow>
 8007452:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b09      	cmp	r3, #9
 8007458:	f200 8096 	bhi.w	8007588 <prvProcessReceivedCommands+0x19c>
 800745c:	a201      	add	r2, pc, #4	; (adr r2, 8007464 <prvProcessReceivedCommands+0x78>)
 800745e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007462:	bf00      	nop
 8007464:	0800748d 	.word	0x0800748d
 8007468:	0800748d 	.word	0x0800748d
 800746c:	0800748d 	.word	0x0800748d
 8007470:	08007501 	.word	0x08007501
 8007474:	08007515 	.word	0x08007515
 8007478:	0800755f 	.word	0x0800755f
 800747c:	0800748d 	.word	0x0800748d
 8007480:	0800748d 	.word	0x0800748d
 8007484:	08007501 	.word	0x08007501
 8007488:	08007515 	.word	0x08007515
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800748c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007492:	f043 0301 	orr.w	r3, r3, #1
 8007496:	b2da      	uxtb	r2, r3
 8007498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	18d1      	adds	r1, r2, r3
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074ac:	f7ff ff5c 	bl	8007368 <prvInsertTimerInActiveList>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d069      	beq.n	800758a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80074c4:	f003 0304 	and.w	r3, r3, #4
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d05e      	beq.n	800758a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	441a      	add	r2, r3
 80074d4:	2300      	movs	r3, #0
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	2300      	movs	r3, #0
 80074da:	2100      	movs	r1, #0
 80074dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074de:	f7ff fe05 	bl	80070ec <xTimerGenericCommand>
 80074e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d14f      	bne.n	800758a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80074ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ee:	f383 8811 	msr	BASEPRI, r3
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	f3bf 8f4f 	dsb	sy
 80074fa:	61bb      	str	r3, [r7, #24]
}
 80074fc:	bf00      	nop
 80074fe:	e7fe      	b.n	80074fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007502:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007506:	f023 0301 	bic.w	r3, r3, #1
 800750a:	b2da      	uxtb	r2, r3
 800750c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8007512:	e03a      	b.n	800758a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007516:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800751a:	f043 0301 	orr.w	r3, r3, #1
 800751e:	b2da      	uxtb	r2, r3
 8007520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007522:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007526:	68ba      	ldr	r2, [r7, #8]
 8007528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800752c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10a      	bne.n	800754a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	617b      	str	r3, [r7, #20]
}
 8007546:	bf00      	nop
 8007548:	e7fe      	b.n	8007548 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800754a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754c:	699a      	ldr	r2, [r3, #24]
 800754e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007550:	18d1      	adds	r1, r2, r3
 8007552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007558:	f7ff ff06 	bl	8007368 <prvInsertTimerInActiveList>
					break;
 800755c:	e015      	b.n	800758a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007564:	f003 0302 	and.w	r3, r3, #2
 8007568:	2b00      	cmp	r3, #0
 800756a:	d103      	bne.n	8007574 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800756c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800756e:	f000 fbd7 	bl	8007d20 <vPortFree>
 8007572:	e00a      	b.n	800758a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007576:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800757a:	f023 0301 	bic.w	r3, r3, #1
 800757e:	b2da      	uxtb	r2, r3
 8007580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007582:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007586:	e000      	b.n	800758a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007588:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800758a:	4b08      	ldr	r3, [pc, #32]	; (80075ac <prvProcessReceivedCommands+0x1c0>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	1d39      	adds	r1, r7, #4
 8007590:	2200      	movs	r2, #0
 8007592:	4618      	mov	r0, r3
 8007594:	f7fe fba6 	bl	8005ce4 <xQueueReceive>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	f47f af2a 	bne.w	80073f4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80075a0:	bf00      	nop
 80075a2:	bf00      	nop
 80075a4:	3730      	adds	r7, #48	; 0x30
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	200003a4 	.word	0x200003a4

080075b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b088      	sub	sp, #32
 80075b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075b6:	e048      	b.n	800764a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075b8:	4b2d      	ldr	r3, [pc, #180]	; (8007670 <prvSwitchTimerLists+0xc0>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075c2:	4b2b      	ldr	r3, [pc, #172]	; (8007670 <prvSwitchTimerLists+0xc0>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	3304      	adds	r3, #4
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7fe f905 	bl	80057e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6a1b      	ldr	r3, [r3, #32]
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80075e4:	f003 0304 	and.w	r3, r3, #4
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d02e      	beq.n	800764a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	4413      	add	r3, r2
 80075f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d90e      	bls.n	800761c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800760a:	4b19      	ldr	r3, [pc, #100]	; (8007670 <prvSwitchTimerLists+0xc0>)
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	3304      	adds	r3, #4
 8007612:	4619      	mov	r1, r3
 8007614:	4610      	mov	r0, r2
 8007616:	f7fe f8aa 	bl	800576e <vListInsert>
 800761a:	e016      	b.n	800764a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800761c:	2300      	movs	r3, #0
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	2300      	movs	r3, #0
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	2100      	movs	r1, #0
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f7ff fd60 	bl	80070ec <xTimerGenericCommand>
 800762c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d10a      	bne.n	800764a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007638:	f383 8811 	msr	BASEPRI, r3
 800763c:	f3bf 8f6f 	isb	sy
 8007640:	f3bf 8f4f 	dsb	sy
 8007644:	603b      	str	r3, [r7, #0]
}
 8007646:	bf00      	nop
 8007648:	e7fe      	b.n	8007648 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800764a:	4b09      	ldr	r3, [pc, #36]	; (8007670 <prvSwitchTimerLists+0xc0>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1b1      	bne.n	80075b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007654:	4b06      	ldr	r3, [pc, #24]	; (8007670 <prvSwitchTimerLists+0xc0>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800765a:	4b06      	ldr	r3, [pc, #24]	; (8007674 <prvSwitchTimerLists+0xc4>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a04      	ldr	r2, [pc, #16]	; (8007670 <prvSwitchTimerLists+0xc0>)
 8007660:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007662:	4a04      	ldr	r2, [pc, #16]	; (8007674 <prvSwitchTimerLists+0xc4>)
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	6013      	str	r3, [r2, #0]
}
 8007668:	bf00      	nop
 800766a:	3718      	adds	r7, #24
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	2000039c 	.word	0x2000039c
 8007674:	200003a0 	.word	0x200003a0

08007678 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800767c:	f000 f962 	bl	8007944 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007680:	4b12      	ldr	r3, [pc, #72]	; (80076cc <prvCheckForValidListAndQueue+0x54>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d11d      	bne.n	80076c4 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8007688:	4811      	ldr	r0, [pc, #68]	; (80076d0 <prvCheckForValidListAndQueue+0x58>)
 800768a:	f7fe f81f 	bl	80056cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800768e:	4811      	ldr	r0, [pc, #68]	; (80076d4 <prvCheckForValidListAndQueue+0x5c>)
 8007690:	f7fe f81c 	bl	80056cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007694:	4b10      	ldr	r3, [pc, #64]	; (80076d8 <prvCheckForValidListAndQueue+0x60>)
 8007696:	4a0e      	ldr	r2, [pc, #56]	; (80076d0 <prvCheckForValidListAndQueue+0x58>)
 8007698:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800769a:	4b10      	ldr	r3, [pc, #64]	; (80076dc <prvCheckForValidListAndQueue+0x64>)
 800769c:	4a0d      	ldr	r2, [pc, #52]	; (80076d4 <prvCheckForValidListAndQueue+0x5c>)
 800769e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80076a0:	2200      	movs	r2, #0
 80076a2:	2110      	movs	r1, #16
 80076a4:	2014      	movs	r0, #20
 80076a6:	f7fe f92d 	bl	8005904 <xQueueGenericCreate>
 80076aa:	4603      	mov	r3, r0
 80076ac:	4a07      	ldr	r2, [pc, #28]	; (80076cc <prvCheckForValidListAndQueue+0x54>)
 80076ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80076b0:	4b06      	ldr	r3, [pc, #24]	; (80076cc <prvCheckForValidListAndQueue+0x54>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d005      	beq.n	80076c4 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80076b8:	4b04      	ldr	r3, [pc, #16]	; (80076cc <prvCheckForValidListAndQueue+0x54>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4908      	ldr	r1, [pc, #32]	; (80076e0 <prvCheckForValidListAndQueue+0x68>)
 80076be:	4618      	mov	r0, r3
 80076c0:	f7fe fd00 	bl	80060c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076c4:	f000 f96e 	bl	80079a4 <vPortExitCritical>
}
 80076c8:	bf00      	nop
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	200003a4 	.word	0x200003a4
 80076d0:	20000374 	.word	0x20000374
 80076d4:	20000388 	.word	0x20000388
 80076d8:	2000039c 	.word	0x2000039c
 80076dc:	200003a0 	.word	0x200003a0
 80076e0:	080082ac 	.word	0x080082ac

080076e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	3b04      	subs	r3, #4
 80076f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80076fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	3b04      	subs	r3, #4
 8007702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	f023 0201 	bic.w	r2, r3, #1
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	3b04      	subs	r3, #4
 8007712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007714:	4a0c      	ldr	r2, [pc, #48]	; (8007748 <pxPortInitialiseStack+0x64>)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	3b14      	subs	r3, #20
 800771e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	3b04      	subs	r3, #4
 800772a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f06f 0202 	mvn.w	r2, #2
 8007732:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	3b20      	subs	r3, #32
 8007738:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800773a:	68fb      	ldr	r3, [r7, #12]
}
 800773c:	4618      	mov	r0, r3
 800773e:	3714      	adds	r7, #20
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr
 8007748:	0800774d 	.word	0x0800774d

0800774c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007752:	2300      	movs	r3, #0
 8007754:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007756:	4b12      	ldr	r3, [pc, #72]	; (80077a0 <prvTaskExitError+0x54>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800775e:	d00a      	beq.n	8007776 <prvTaskExitError+0x2a>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	60fb      	str	r3, [r7, #12]
}
 8007772:	bf00      	nop
 8007774:	e7fe      	b.n	8007774 <prvTaskExitError+0x28>
	__asm volatile
 8007776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	60bb      	str	r3, [r7, #8]
}
 8007788:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800778a:	bf00      	nop
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d0fc      	beq.n	800778c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007792:	bf00      	nop
 8007794:	bf00      	nop
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	2000000c 	.word	0x2000000c
	...

080077b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80077b0:	4b07      	ldr	r3, [pc, #28]	; (80077d0 <pxCurrentTCBConst2>)
 80077b2:	6819      	ldr	r1, [r3, #0]
 80077b4:	6808      	ldr	r0, [r1, #0]
 80077b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ba:	f380 8809 	msr	PSP, r0
 80077be:	f3bf 8f6f 	isb	sy
 80077c2:	f04f 0000 	mov.w	r0, #0
 80077c6:	f380 8811 	msr	BASEPRI, r0
 80077ca:	4770      	bx	lr
 80077cc:	f3af 8000 	nop.w

080077d0 <pxCurrentTCBConst2>:
 80077d0:	20000248 	.word	0x20000248
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077d4:	bf00      	nop
 80077d6:	bf00      	nop

080077d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80077d8:	4808      	ldr	r0, [pc, #32]	; (80077fc <prvPortStartFirstTask+0x24>)
 80077da:	6800      	ldr	r0, [r0, #0]
 80077dc:	6800      	ldr	r0, [r0, #0]
 80077de:	f380 8808 	msr	MSP, r0
 80077e2:	f04f 0000 	mov.w	r0, #0
 80077e6:	f380 8814 	msr	CONTROL, r0
 80077ea:	b662      	cpsie	i
 80077ec:	b661      	cpsie	f
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	df00      	svc	0
 80077f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077fa:	bf00      	nop
 80077fc:	e000ed08 	.word	0xe000ed08

08007800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007806:	4b46      	ldr	r3, [pc, #280]	; (8007920 <xPortStartScheduler+0x120>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a46      	ldr	r2, [pc, #280]	; (8007924 <xPortStartScheduler+0x124>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d10a      	bne.n	8007826 <xPortStartScheduler+0x26>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	613b      	str	r3, [r7, #16]
}
 8007822:	bf00      	nop
 8007824:	e7fe      	b.n	8007824 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007826:	4b3e      	ldr	r3, [pc, #248]	; (8007920 <xPortStartScheduler+0x120>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a3f      	ldr	r2, [pc, #252]	; (8007928 <xPortStartScheduler+0x128>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d10a      	bne.n	8007846 <xPortStartScheduler+0x46>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	60fb      	str	r3, [r7, #12]
}
 8007842:	bf00      	nop
 8007844:	e7fe      	b.n	8007844 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007846:	4b39      	ldr	r3, [pc, #228]	; (800792c <xPortStartScheduler+0x12c>)
 8007848:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	b2db      	uxtb	r3, r3
 8007850:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	22ff      	movs	r2, #255	; 0xff
 8007856:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	b2db      	uxtb	r3, r3
 800785e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007860:	78fb      	ldrb	r3, [r7, #3]
 8007862:	b2db      	uxtb	r3, r3
 8007864:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007868:	b2da      	uxtb	r2, r3
 800786a:	4b31      	ldr	r3, [pc, #196]	; (8007930 <xPortStartScheduler+0x130>)
 800786c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800786e:	4b31      	ldr	r3, [pc, #196]	; (8007934 <xPortStartScheduler+0x134>)
 8007870:	2207      	movs	r2, #7
 8007872:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007874:	e009      	b.n	800788a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007876:	4b2f      	ldr	r3, [pc, #188]	; (8007934 <xPortStartScheduler+0x134>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3b01      	subs	r3, #1
 800787c:	4a2d      	ldr	r2, [pc, #180]	; (8007934 <xPortStartScheduler+0x134>)
 800787e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007880:	78fb      	ldrb	r3, [r7, #3]
 8007882:	b2db      	uxtb	r3, r3
 8007884:	005b      	lsls	r3, r3, #1
 8007886:	b2db      	uxtb	r3, r3
 8007888:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800788a:	78fb      	ldrb	r3, [r7, #3]
 800788c:	b2db      	uxtb	r3, r3
 800788e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007892:	2b80      	cmp	r3, #128	; 0x80
 8007894:	d0ef      	beq.n	8007876 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007896:	4b27      	ldr	r3, [pc, #156]	; (8007934 <xPortStartScheduler+0x134>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f1c3 0307 	rsb	r3, r3, #7
 800789e:	2b04      	cmp	r3, #4
 80078a0:	d00a      	beq.n	80078b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80078a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	60bb      	str	r3, [r7, #8]
}
 80078b4:	bf00      	nop
 80078b6:	e7fe      	b.n	80078b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80078b8:	4b1e      	ldr	r3, [pc, #120]	; (8007934 <xPortStartScheduler+0x134>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	021b      	lsls	r3, r3, #8
 80078be:	4a1d      	ldr	r2, [pc, #116]	; (8007934 <xPortStartScheduler+0x134>)
 80078c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078c2:	4b1c      	ldr	r3, [pc, #112]	; (8007934 <xPortStartScheduler+0x134>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078ca:	4a1a      	ldr	r2, [pc, #104]	; (8007934 <xPortStartScheduler+0x134>)
 80078cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078d6:	4b18      	ldr	r3, [pc, #96]	; (8007938 <xPortStartScheduler+0x138>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a17      	ldr	r2, [pc, #92]	; (8007938 <xPortStartScheduler+0x138>)
 80078dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078e2:	4b15      	ldr	r3, [pc, #84]	; (8007938 <xPortStartScheduler+0x138>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a14      	ldr	r2, [pc, #80]	; (8007938 <xPortStartScheduler+0x138>)
 80078e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80078ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078ee:	f000 f8dd 	bl	8007aac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078f2:	4b12      	ldr	r3, [pc, #72]	; (800793c <xPortStartScheduler+0x13c>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078f8:	f000 f8fc 	bl	8007af4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078fc:	4b10      	ldr	r3, [pc, #64]	; (8007940 <xPortStartScheduler+0x140>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a0f      	ldr	r2, [pc, #60]	; (8007940 <xPortStartScheduler+0x140>)
 8007902:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007906:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007908:	f7ff ff66 	bl	80077d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800790c:	f7fe ff7e 	bl	800680c <vTaskSwitchContext>
	prvTaskExitError();
 8007910:	f7ff ff1c 	bl	800774c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3718      	adds	r7, #24
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	e000ed00 	.word	0xe000ed00
 8007924:	410fc271 	.word	0x410fc271
 8007928:	410fc270 	.word	0x410fc270
 800792c:	e000e400 	.word	0xe000e400
 8007930:	200003b0 	.word	0x200003b0
 8007934:	200003b4 	.word	0x200003b4
 8007938:	e000ed20 	.word	0xe000ed20
 800793c:	2000000c 	.word	0x2000000c
 8007940:	e000ef34 	.word	0xe000ef34

08007944 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	607b      	str	r3, [r7, #4]
}
 800795c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800795e:	4b0f      	ldr	r3, [pc, #60]	; (800799c <vPortEnterCritical+0x58>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	3301      	adds	r3, #1
 8007964:	4a0d      	ldr	r2, [pc, #52]	; (800799c <vPortEnterCritical+0x58>)
 8007966:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007968:	4b0c      	ldr	r3, [pc, #48]	; (800799c <vPortEnterCritical+0x58>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d10f      	bne.n	8007990 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007970:	4b0b      	ldr	r3, [pc, #44]	; (80079a0 <vPortEnterCritical+0x5c>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00a      	beq.n	8007990 <vPortEnterCritical+0x4c>
	__asm volatile
 800797a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	603b      	str	r3, [r7, #0]
}
 800798c:	bf00      	nop
 800798e:	e7fe      	b.n	800798e <vPortEnterCritical+0x4a>
	}
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr
 800799c:	2000000c 	.word	0x2000000c
 80079a0:	e000ed04 	.word	0xe000ed04

080079a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80079aa:	4b12      	ldr	r3, [pc, #72]	; (80079f4 <vPortExitCritical+0x50>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10a      	bne.n	80079c8 <vPortExitCritical+0x24>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	607b      	str	r3, [r7, #4]
}
 80079c4:	bf00      	nop
 80079c6:	e7fe      	b.n	80079c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80079c8:	4b0a      	ldr	r3, [pc, #40]	; (80079f4 <vPortExitCritical+0x50>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	3b01      	subs	r3, #1
 80079ce:	4a09      	ldr	r2, [pc, #36]	; (80079f4 <vPortExitCritical+0x50>)
 80079d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079d2:	4b08      	ldr	r3, [pc, #32]	; (80079f4 <vPortExitCritical+0x50>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d105      	bne.n	80079e6 <vPortExitCritical+0x42>
 80079da:	2300      	movs	r3, #0
 80079dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	f383 8811 	msr	BASEPRI, r3
}
 80079e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80079e6:	bf00      	nop
 80079e8:	370c      	adds	r7, #12
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	2000000c 	.word	0x2000000c
	...

08007a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a00:	f3ef 8009 	mrs	r0, PSP
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	4b15      	ldr	r3, [pc, #84]	; (8007a60 <pxCurrentTCBConst>)
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	f01e 0f10 	tst.w	lr, #16
 8007a10:	bf08      	it	eq
 8007a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1a:	6010      	str	r0, [r2, #0]
 8007a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a24:	f380 8811 	msr	BASEPRI, r0
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	f3bf 8f6f 	isb	sy
 8007a30:	f7fe feec 	bl	800680c <vTaskSwitchContext>
 8007a34:	f04f 0000 	mov.w	r0, #0
 8007a38:	f380 8811 	msr	BASEPRI, r0
 8007a3c:	bc09      	pop	{r0, r3}
 8007a3e:	6819      	ldr	r1, [r3, #0]
 8007a40:	6808      	ldr	r0, [r1, #0]
 8007a42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a46:	f01e 0f10 	tst.w	lr, #16
 8007a4a:	bf08      	it	eq
 8007a4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a50:	f380 8809 	msr	PSP, r0
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	f3af 8000 	nop.w

08007a60 <pxCurrentTCBConst>:
 8007a60:	20000248 	.word	0x20000248
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a64:	bf00      	nop
 8007a66:	bf00      	nop

08007a68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	607b      	str	r3, [r7, #4]
}
 8007a80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a82:	f7fe fe0b 	bl	800669c <xTaskIncrementTick>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d003      	beq.n	8007a94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a8c:	4b06      	ldr	r3, [pc, #24]	; (8007aa8 <SysTick_Handler+0x40>)
 8007a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	2300      	movs	r3, #0
 8007a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	f383 8811 	msr	BASEPRI, r3
}
 8007a9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007aa0:	bf00      	nop
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	e000ed04 	.word	0xe000ed04

08007aac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007aac:	b480      	push	{r7}
 8007aae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ab0:	4b0b      	ldr	r3, [pc, #44]	; (8007ae0 <vPortSetupTimerInterrupt+0x34>)
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ab6:	4b0b      	ldr	r3, [pc, #44]	; (8007ae4 <vPortSetupTimerInterrupt+0x38>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007abc:	4b0a      	ldr	r3, [pc, #40]	; (8007ae8 <vPortSetupTimerInterrupt+0x3c>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a0a      	ldr	r2, [pc, #40]	; (8007aec <vPortSetupTimerInterrupt+0x40>)
 8007ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac6:	099b      	lsrs	r3, r3, #6
 8007ac8:	4a09      	ldr	r2, [pc, #36]	; (8007af0 <vPortSetupTimerInterrupt+0x44>)
 8007aca:	3b01      	subs	r3, #1
 8007acc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ace:	4b04      	ldr	r3, [pc, #16]	; (8007ae0 <vPortSetupTimerInterrupt+0x34>)
 8007ad0:	2207      	movs	r2, #7
 8007ad2:	601a      	str	r2, [r3, #0]
}
 8007ad4:	bf00      	nop
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	e000e010 	.word	0xe000e010
 8007ae4:	e000e018 	.word	0xe000e018
 8007ae8:	20000000 	.word	0x20000000
 8007aec:	10624dd3 	.word	0x10624dd3
 8007af0:	e000e014 	.word	0xe000e014

08007af4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007af4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b04 <vPortEnableVFP+0x10>
 8007af8:	6801      	ldr	r1, [r0, #0]
 8007afa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007afe:	6001      	str	r1, [r0, #0]
 8007b00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b02:	bf00      	nop
 8007b04:	e000ed88 	.word	0xe000ed88

08007b08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b0e:	f3ef 8305 	mrs	r3, IPSR
 8007b12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2b0f      	cmp	r3, #15
 8007b18:	d914      	bls.n	8007b44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b1a:	4a17      	ldr	r2, [pc, #92]	; (8007b78 <vPortValidateInterruptPriority+0x70>)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	4413      	add	r3, r2
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b24:	4b15      	ldr	r3, [pc, #84]	; (8007b7c <vPortValidateInterruptPriority+0x74>)
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	7afa      	ldrb	r2, [r7, #11]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d20a      	bcs.n	8007b44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	607b      	str	r3, [r7, #4]
}
 8007b40:	bf00      	nop
 8007b42:	e7fe      	b.n	8007b42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b44:	4b0e      	ldr	r3, [pc, #56]	; (8007b80 <vPortValidateInterruptPriority+0x78>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b4c:	4b0d      	ldr	r3, [pc, #52]	; (8007b84 <vPortValidateInterruptPriority+0x7c>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d90a      	bls.n	8007b6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	603b      	str	r3, [r7, #0]
}
 8007b66:	bf00      	nop
 8007b68:	e7fe      	b.n	8007b68 <vPortValidateInterruptPriority+0x60>
	}
 8007b6a:	bf00      	nop
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	e000e3f0 	.word	0xe000e3f0
 8007b7c:	200003b0 	.word	0x200003b0
 8007b80:	e000ed0c 	.word	0xe000ed0c
 8007b84:	200003b4 	.word	0x200003b4

08007b88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b08a      	sub	sp, #40	; 0x28
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b90:	2300      	movs	r3, #0
 8007b92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b94:	f7fe fcc8 	bl	8006528 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b98:	4b5b      	ldr	r3, [pc, #364]	; (8007d08 <pvPortMalloc+0x180>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d101      	bne.n	8007ba4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ba0:	f000 f920 	bl	8007de4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ba4:	4b59      	ldr	r3, [pc, #356]	; (8007d0c <pvPortMalloc+0x184>)
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4013      	ands	r3, r2
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f040 8093 	bne.w	8007cd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d01d      	beq.n	8007bf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007bb8:	2208      	movs	r2, #8
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f003 0307 	and.w	r3, r3, #7
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d014      	beq.n	8007bf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f023 0307 	bic.w	r3, r3, #7
 8007bd0:	3308      	adds	r3, #8
 8007bd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f003 0307 	and.w	r3, r3, #7
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00a      	beq.n	8007bf4 <pvPortMalloc+0x6c>
	__asm volatile
 8007bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	617b      	str	r3, [r7, #20]
}
 8007bf0:	bf00      	nop
 8007bf2:	e7fe      	b.n	8007bf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d06e      	beq.n	8007cd8 <pvPortMalloc+0x150>
 8007bfa:	4b45      	ldr	r3, [pc, #276]	; (8007d10 <pvPortMalloc+0x188>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d869      	bhi.n	8007cd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c04:	4b43      	ldr	r3, [pc, #268]	; (8007d14 <pvPortMalloc+0x18c>)
 8007c06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c08:	4b42      	ldr	r3, [pc, #264]	; (8007d14 <pvPortMalloc+0x18c>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c0e:	e004      	b.n	8007c1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d903      	bls.n	8007c2c <pvPortMalloc+0xa4>
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1f1      	bne.n	8007c10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c2c:	4b36      	ldr	r3, [pc, #216]	; (8007d08 <pvPortMalloc+0x180>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d050      	beq.n	8007cd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c36:	6a3b      	ldr	r3, [r7, #32]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2208      	movs	r2, #8
 8007c3c:	4413      	add	r3, r2
 8007c3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	1ad2      	subs	r2, r2, r3
 8007c50:	2308      	movs	r3, #8
 8007c52:	005b      	lsls	r3, r3, #1
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d91f      	bls.n	8007c98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	f003 0307 	and.w	r3, r3, #7
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00a      	beq.n	8007c80 <pvPortMalloc+0xf8>
	__asm volatile
 8007c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	613b      	str	r3, [r7, #16]
}
 8007c7c:	bf00      	nop
 8007c7e:	e7fe      	b.n	8007c7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	1ad2      	subs	r2, r2, r3
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c92:	69b8      	ldr	r0, [r7, #24]
 8007c94:	f000 f908 	bl	8007ea8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c98:	4b1d      	ldr	r3, [pc, #116]	; (8007d10 <pvPortMalloc+0x188>)
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	4a1b      	ldr	r2, [pc, #108]	; (8007d10 <pvPortMalloc+0x188>)
 8007ca4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ca6:	4b1a      	ldr	r3, [pc, #104]	; (8007d10 <pvPortMalloc+0x188>)
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	4b1b      	ldr	r3, [pc, #108]	; (8007d18 <pvPortMalloc+0x190>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d203      	bcs.n	8007cba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007cb2:	4b17      	ldr	r3, [pc, #92]	; (8007d10 <pvPortMalloc+0x188>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a18      	ldr	r2, [pc, #96]	; (8007d18 <pvPortMalloc+0x190>)
 8007cb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	685a      	ldr	r2, [r3, #4]
 8007cbe:	4b13      	ldr	r3, [pc, #76]	; (8007d0c <pvPortMalloc+0x184>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	431a      	orrs	r2, r3
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	2200      	movs	r2, #0
 8007ccc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007cce:	4b13      	ldr	r3, [pc, #76]	; (8007d1c <pvPortMalloc+0x194>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	4a11      	ldr	r2, [pc, #68]	; (8007d1c <pvPortMalloc+0x194>)
 8007cd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007cd8:	f7fe fc34 	bl	8006544 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	f003 0307 	and.w	r3, r3, #7
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00a      	beq.n	8007cfc <pvPortMalloc+0x174>
	__asm volatile
 8007ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	60fb      	str	r3, [r7, #12]
}
 8007cf8:	bf00      	nop
 8007cfa:	e7fe      	b.n	8007cfa <pvPortMalloc+0x172>
	return pvReturn;
 8007cfc:	69fb      	ldr	r3, [r7, #28]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3728      	adds	r7, #40	; 0x28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20003fc0 	.word	0x20003fc0
 8007d0c:	20003fd4 	.word	0x20003fd4
 8007d10:	20003fc4 	.word	0x20003fc4
 8007d14:	20003fb8 	.word	0x20003fb8
 8007d18:	20003fc8 	.word	0x20003fc8
 8007d1c:	20003fcc 	.word	0x20003fcc

08007d20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d04d      	beq.n	8007dce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d32:	2308      	movs	r3, #8
 8007d34:	425b      	negs	r3, r3
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	4413      	add	r3, r2
 8007d3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	4b24      	ldr	r3, [pc, #144]	; (8007dd8 <vPortFree+0xb8>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4013      	ands	r3, r2
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10a      	bne.n	8007d64 <vPortFree+0x44>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	60fb      	str	r3, [r7, #12]
}
 8007d60:	bf00      	nop
 8007d62:	e7fe      	b.n	8007d62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00a      	beq.n	8007d82 <vPortFree+0x62>
	__asm volatile
 8007d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d70:	f383 8811 	msr	BASEPRI, r3
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	60bb      	str	r3, [r7, #8]
}
 8007d7e:	bf00      	nop
 8007d80:	e7fe      	b.n	8007d80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	685a      	ldr	r2, [r3, #4]
 8007d86:	4b14      	ldr	r3, [pc, #80]	; (8007dd8 <vPortFree+0xb8>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d01e      	beq.n	8007dce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d11a      	bne.n	8007dce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	685a      	ldr	r2, [r3, #4]
 8007d9c:	4b0e      	ldr	r3, [pc, #56]	; (8007dd8 <vPortFree+0xb8>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	43db      	mvns	r3, r3
 8007da2:	401a      	ands	r2, r3
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007da8:	f7fe fbbe 	bl	8006528 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	685a      	ldr	r2, [r3, #4]
 8007db0:	4b0a      	ldr	r3, [pc, #40]	; (8007ddc <vPortFree+0xbc>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4413      	add	r3, r2
 8007db6:	4a09      	ldr	r2, [pc, #36]	; (8007ddc <vPortFree+0xbc>)
 8007db8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007dba:	6938      	ldr	r0, [r7, #16]
 8007dbc:	f000 f874 	bl	8007ea8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007dc0:	4b07      	ldr	r3, [pc, #28]	; (8007de0 <vPortFree+0xc0>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	4a06      	ldr	r2, [pc, #24]	; (8007de0 <vPortFree+0xc0>)
 8007dc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007dca:	f7fe fbbb 	bl	8006544 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007dce:	bf00      	nop
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20003fd4 	.word	0x20003fd4
 8007ddc:	20003fc4 	.word	0x20003fc4
 8007de0:	20003fd0 	.word	0x20003fd0

08007de4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007dea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007dee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007df0:	4b27      	ldr	r3, [pc, #156]	; (8007e90 <prvHeapInit+0xac>)
 8007df2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f003 0307 	and.w	r3, r3, #7
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00c      	beq.n	8007e18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	3307      	adds	r3, #7
 8007e02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f023 0307 	bic.w	r3, r3, #7
 8007e0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e0c:	68ba      	ldr	r2, [r7, #8]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	4a1f      	ldr	r2, [pc, #124]	; (8007e90 <prvHeapInit+0xac>)
 8007e14:	4413      	add	r3, r2
 8007e16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e1c:	4a1d      	ldr	r2, [pc, #116]	; (8007e94 <prvHeapInit+0xb0>)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e22:	4b1c      	ldr	r3, [pc, #112]	; (8007e94 <prvHeapInit+0xb0>)
 8007e24:	2200      	movs	r2, #0
 8007e26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e30:	2208      	movs	r2, #8
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	1a9b      	subs	r3, r3, r2
 8007e36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f023 0307 	bic.w	r3, r3, #7
 8007e3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	4a15      	ldr	r2, [pc, #84]	; (8007e98 <prvHeapInit+0xb4>)
 8007e44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e46:	4b14      	ldr	r3, [pc, #80]	; (8007e98 <prvHeapInit+0xb4>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e4e:	4b12      	ldr	r3, [pc, #72]	; (8007e98 <prvHeapInit+0xb4>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2200      	movs	r2, #0
 8007e54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	1ad2      	subs	r2, r2, r3
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e64:	4b0c      	ldr	r3, [pc, #48]	; (8007e98 <prvHeapInit+0xb4>)
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	4a0a      	ldr	r2, [pc, #40]	; (8007e9c <prvHeapInit+0xb8>)
 8007e72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	4a09      	ldr	r2, [pc, #36]	; (8007ea0 <prvHeapInit+0xbc>)
 8007e7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e7c:	4b09      	ldr	r3, [pc, #36]	; (8007ea4 <prvHeapInit+0xc0>)
 8007e7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e82:	601a      	str	r2, [r3, #0]
}
 8007e84:	bf00      	nop
 8007e86:	3714      	adds	r7, #20
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr
 8007e90:	200003b8 	.word	0x200003b8
 8007e94:	20003fb8 	.word	0x20003fb8
 8007e98:	20003fc0 	.word	0x20003fc0
 8007e9c:	20003fc8 	.word	0x20003fc8
 8007ea0:	20003fc4 	.word	0x20003fc4
 8007ea4:	20003fd4 	.word	0x20003fd4

08007ea8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007eb0:	4b28      	ldr	r3, [pc, #160]	; (8007f54 <prvInsertBlockIntoFreeList+0xac>)
 8007eb2:	60fb      	str	r3, [r7, #12]
 8007eb4:	e002      	b.n	8007ebc <prvInsertBlockIntoFreeList+0x14>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	60fb      	str	r3, [r7, #12]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d8f7      	bhi.n	8007eb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d108      	bne.n	8007eea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	441a      	add	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	441a      	add	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d118      	bne.n	8007f30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	4b15      	ldr	r3, [pc, #84]	; (8007f58 <prvInsertBlockIntoFreeList+0xb0>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d00d      	beq.n	8007f26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	441a      	add	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	601a      	str	r2, [r3, #0]
 8007f24:	e008      	b.n	8007f38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f26:	4b0c      	ldr	r3, [pc, #48]	; (8007f58 <prvInsertBlockIntoFreeList+0xb0>)
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	601a      	str	r2, [r3, #0]
 8007f2e:	e003      	b.n	8007f38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d002      	beq.n	8007f46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f46:	bf00      	nop
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	20003fb8 	.word	0x20003fb8
 8007f58:	20003fc0 	.word	0x20003fc0

08007f5c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7fd fa80 	bl	8005470 <USBH_LL_IncTimer>
}
 8007f70:	bf00      	nop
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7fd fac4 	bl	8005514 <USBH_LL_Connect>
}
 8007f8c:	bf00      	nop
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fd fad9 	bl	800555a <USBH_LL_Disconnect>
}
 8007fa8:	bf00      	nop
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	70fb      	strb	r3, [r7, #3]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7fd faf9 	bl	80055be <USBH_LL_NotifyURBChange>
#endif
}
 8007fcc:	bf00      	nop
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fd fa6e 	bl	80054c4 <USBH_LL_PortEnabled>
}
 8007fe8:	bf00      	nop
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fd fa7a 	bl	80054f8 <USBH_LL_PortDisabled>
}
 8008004:	bf00      	nop
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008014:	2300      	movs	r3, #0
 8008016:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008022:	4618      	mov	r0, r3
 8008024:	f7f9 fb7b 	bl	800171e <HAL_HCD_Stop>
 8008028:	4603      	mov	r3, r0
 800802a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800802c:	7bfb      	ldrb	r3, [r7, #15]
 800802e:	4618      	mov	r0, r3
 8008030:	f000 f808 	bl	8008044 <USBH_Get_USB_Status>
 8008034:	4603      	mov	r3, r0
 8008036:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008038:	7bbb      	ldrb	r3, [r7, #14]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
	...

08008044 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	4603      	mov	r3, r0
 800804c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008052:	79fb      	ldrb	r3, [r7, #7]
 8008054:	2b03      	cmp	r3, #3
 8008056:	d817      	bhi.n	8008088 <USBH_Get_USB_Status+0x44>
 8008058:	a201      	add	r2, pc, #4	; (adr r2, 8008060 <USBH_Get_USB_Status+0x1c>)
 800805a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805e:	bf00      	nop
 8008060:	08008071 	.word	0x08008071
 8008064:	08008077 	.word	0x08008077
 8008068:	0800807d 	.word	0x0800807d
 800806c:	08008083 	.word	0x08008083
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	73fb      	strb	r3, [r7, #15]
    break;
 8008074:	e00b      	b.n	800808e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008076:	2302      	movs	r3, #2
 8008078:	73fb      	strb	r3, [r7, #15]
    break;
 800807a:	e008      	b.n	800808e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800807c:	2301      	movs	r3, #1
 800807e:	73fb      	strb	r3, [r7, #15]
    break;
 8008080:	e005      	b.n	800808e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008082:	2302      	movs	r3, #2
 8008084:	73fb      	strb	r3, [r7, #15]
    break;
 8008086:	e002      	b.n	800808e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008088:	2302      	movs	r3, #2
 800808a:	73fb      	strb	r3, [r7, #15]
    break;
 800808c:	bf00      	nop
  }
  return usb_status;
 800808e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3714      	adds	r7, #20
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <__malloc_lock>:
 800809c:	4801      	ldr	r0, [pc, #4]	; (80080a4 <__malloc_lock+0x8>)
 800809e:	f000 b88b 	b.w	80081b8 <__retarget_lock_acquire_recursive>
 80080a2:	bf00      	nop
 80080a4:	200044f4 	.word	0x200044f4

080080a8 <__malloc_unlock>:
 80080a8:	4801      	ldr	r0, [pc, #4]	; (80080b0 <__malloc_unlock+0x8>)
 80080aa:	f000 b886 	b.w	80081ba <__retarget_lock_release_recursive>
 80080ae:	bf00      	nop
 80080b0:	200044f4 	.word	0x200044f4

080080b4 <memset>:
 80080b4:	4402      	add	r2, r0
 80080b6:	4603      	mov	r3, r0
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d100      	bne.n	80080be <memset+0xa>
 80080bc:	4770      	bx	lr
 80080be:	f803 1b01 	strb.w	r1, [r3], #1
 80080c2:	e7f9      	b.n	80080b8 <memset+0x4>

080080c4 <_reclaim_reent>:
 80080c4:	4b29      	ldr	r3, [pc, #164]	; (800816c <_reclaim_reent+0xa8>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4283      	cmp	r3, r0
 80080ca:	b570      	push	{r4, r5, r6, lr}
 80080cc:	4604      	mov	r4, r0
 80080ce:	d04b      	beq.n	8008168 <_reclaim_reent+0xa4>
 80080d0:	69c3      	ldr	r3, [r0, #28]
 80080d2:	b143      	cbz	r3, 80080e6 <_reclaim_reent+0x22>
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d144      	bne.n	8008164 <_reclaim_reent+0xa0>
 80080da:	69e3      	ldr	r3, [r4, #28]
 80080dc:	6819      	ldr	r1, [r3, #0]
 80080de:	b111      	cbz	r1, 80080e6 <_reclaim_reent+0x22>
 80080e0:	4620      	mov	r0, r4
 80080e2:	f000 f879 	bl	80081d8 <_free_r>
 80080e6:	6961      	ldr	r1, [r4, #20]
 80080e8:	b111      	cbz	r1, 80080f0 <_reclaim_reent+0x2c>
 80080ea:	4620      	mov	r0, r4
 80080ec:	f000 f874 	bl	80081d8 <_free_r>
 80080f0:	69e1      	ldr	r1, [r4, #28]
 80080f2:	b111      	cbz	r1, 80080fa <_reclaim_reent+0x36>
 80080f4:	4620      	mov	r0, r4
 80080f6:	f000 f86f 	bl	80081d8 <_free_r>
 80080fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80080fc:	b111      	cbz	r1, 8008104 <_reclaim_reent+0x40>
 80080fe:	4620      	mov	r0, r4
 8008100:	f000 f86a 	bl	80081d8 <_free_r>
 8008104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008106:	b111      	cbz	r1, 800810e <_reclaim_reent+0x4a>
 8008108:	4620      	mov	r0, r4
 800810a:	f000 f865 	bl	80081d8 <_free_r>
 800810e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008110:	b111      	cbz	r1, 8008118 <_reclaim_reent+0x54>
 8008112:	4620      	mov	r0, r4
 8008114:	f000 f860 	bl	80081d8 <_free_r>
 8008118:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800811a:	b111      	cbz	r1, 8008122 <_reclaim_reent+0x5e>
 800811c:	4620      	mov	r0, r4
 800811e:	f000 f85b 	bl	80081d8 <_free_r>
 8008122:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008124:	b111      	cbz	r1, 800812c <_reclaim_reent+0x68>
 8008126:	4620      	mov	r0, r4
 8008128:	f000 f856 	bl	80081d8 <_free_r>
 800812c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800812e:	b111      	cbz	r1, 8008136 <_reclaim_reent+0x72>
 8008130:	4620      	mov	r0, r4
 8008132:	f000 f851 	bl	80081d8 <_free_r>
 8008136:	6a23      	ldr	r3, [r4, #32]
 8008138:	b1b3      	cbz	r3, 8008168 <_reclaim_reent+0xa4>
 800813a:	4620      	mov	r0, r4
 800813c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008140:	4718      	bx	r3
 8008142:	5949      	ldr	r1, [r1, r5]
 8008144:	b941      	cbnz	r1, 8008158 <_reclaim_reent+0x94>
 8008146:	3504      	adds	r5, #4
 8008148:	69e3      	ldr	r3, [r4, #28]
 800814a:	2d80      	cmp	r5, #128	; 0x80
 800814c:	68d9      	ldr	r1, [r3, #12]
 800814e:	d1f8      	bne.n	8008142 <_reclaim_reent+0x7e>
 8008150:	4620      	mov	r0, r4
 8008152:	f000 f841 	bl	80081d8 <_free_r>
 8008156:	e7c0      	b.n	80080da <_reclaim_reent+0x16>
 8008158:	680e      	ldr	r6, [r1, #0]
 800815a:	4620      	mov	r0, r4
 800815c:	f000 f83c 	bl	80081d8 <_free_r>
 8008160:	4631      	mov	r1, r6
 8008162:	e7ef      	b.n	8008144 <_reclaim_reent+0x80>
 8008164:	2500      	movs	r5, #0
 8008166:	e7ef      	b.n	8008148 <_reclaim_reent+0x84>
 8008168:	bd70      	pop	{r4, r5, r6, pc}
 800816a:	bf00      	nop
 800816c:	2000005c 	.word	0x2000005c

08008170 <__libc_init_array>:
 8008170:	b570      	push	{r4, r5, r6, lr}
 8008172:	4d0d      	ldr	r5, [pc, #52]	; (80081a8 <__libc_init_array+0x38>)
 8008174:	4c0d      	ldr	r4, [pc, #52]	; (80081ac <__libc_init_array+0x3c>)
 8008176:	1b64      	subs	r4, r4, r5
 8008178:	10a4      	asrs	r4, r4, #2
 800817a:	2600      	movs	r6, #0
 800817c:	42a6      	cmp	r6, r4
 800817e:	d109      	bne.n	8008194 <__libc_init_array+0x24>
 8008180:	4d0b      	ldr	r5, [pc, #44]	; (80081b0 <__libc_init_array+0x40>)
 8008182:	4c0c      	ldr	r4, [pc, #48]	; (80081b4 <__libc_init_array+0x44>)
 8008184:	f000 f874 	bl	8008270 <_init>
 8008188:	1b64      	subs	r4, r4, r5
 800818a:	10a4      	asrs	r4, r4, #2
 800818c:	2600      	movs	r6, #0
 800818e:	42a6      	cmp	r6, r4
 8008190:	d105      	bne.n	800819e <__libc_init_array+0x2e>
 8008192:	bd70      	pop	{r4, r5, r6, pc}
 8008194:	f855 3b04 	ldr.w	r3, [r5], #4
 8008198:	4798      	blx	r3
 800819a:	3601      	adds	r6, #1
 800819c:	e7ee      	b.n	800817c <__libc_init_array+0xc>
 800819e:	f855 3b04 	ldr.w	r3, [r5], #4
 80081a2:	4798      	blx	r3
 80081a4:	3601      	adds	r6, #1
 80081a6:	e7f2      	b.n	800818e <__libc_init_array+0x1e>
 80081a8:	080082d4 	.word	0x080082d4
 80081ac:	080082d4 	.word	0x080082d4
 80081b0:	080082d4 	.word	0x080082d4
 80081b4:	080082d8 	.word	0x080082d8

080081b8 <__retarget_lock_acquire_recursive>:
 80081b8:	4770      	bx	lr

080081ba <__retarget_lock_release_recursive>:
 80081ba:	4770      	bx	lr

080081bc <memcpy>:
 80081bc:	440a      	add	r2, r1
 80081be:	4291      	cmp	r1, r2
 80081c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80081c4:	d100      	bne.n	80081c8 <memcpy+0xc>
 80081c6:	4770      	bx	lr
 80081c8:	b510      	push	{r4, lr}
 80081ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081d2:	4291      	cmp	r1, r2
 80081d4:	d1f9      	bne.n	80081ca <memcpy+0xe>
 80081d6:	bd10      	pop	{r4, pc}

080081d8 <_free_r>:
 80081d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081da:	2900      	cmp	r1, #0
 80081dc:	d044      	beq.n	8008268 <_free_r+0x90>
 80081de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081e2:	9001      	str	r0, [sp, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f1a1 0404 	sub.w	r4, r1, #4
 80081ea:	bfb8      	it	lt
 80081ec:	18e4      	addlt	r4, r4, r3
 80081ee:	f7ff ff55 	bl	800809c <__malloc_lock>
 80081f2:	4a1e      	ldr	r2, [pc, #120]	; (800826c <_free_r+0x94>)
 80081f4:	9801      	ldr	r0, [sp, #4]
 80081f6:	6813      	ldr	r3, [r2, #0]
 80081f8:	b933      	cbnz	r3, 8008208 <_free_r+0x30>
 80081fa:	6063      	str	r3, [r4, #4]
 80081fc:	6014      	str	r4, [r2, #0]
 80081fe:	b003      	add	sp, #12
 8008200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008204:	f7ff bf50 	b.w	80080a8 <__malloc_unlock>
 8008208:	42a3      	cmp	r3, r4
 800820a:	d908      	bls.n	800821e <_free_r+0x46>
 800820c:	6825      	ldr	r5, [r4, #0]
 800820e:	1961      	adds	r1, r4, r5
 8008210:	428b      	cmp	r3, r1
 8008212:	bf01      	itttt	eq
 8008214:	6819      	ldreq	r1, [r3, #0]
 8008216:	685b      	ldreq	r3, [r3, #4]
 8008218:	1949      	addeq	r1, r1, r5
 800821a:	6021      	streq	r1, [r4, #0]
 800821c:	e7ed      	b.n	80081fa <_free_r+0x22>
 800821e:	461a      	mov	r2, r3
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	b10b      	cbz	r3, 8008228 <_free_r+0x50>
 8008224:	42a3      	cmp	r3, r4
 8008226:	d9fa      	bls.n	800821e <_free_r+0x46>
 8008228:	6811      	ldr	r1, [r2, #0]
 800822a:	1855      	adds	r5, r2, r1
 800822c:	42a5      	cmp	r5, r4
 800822e:	d10b      	bne.n	8008248 <_free_r+0x70>
 8008230:	6824      	ldr	r4, [r4, #0]
 8008232:	4421      	add	r1, r4
 8008234:	1854      	adds	r4, r2, r1
 8008236:	42a3      	cmp	r3, r4
 8008238:	6011      	str	r1, [r2, #0]
 800823a:	d1e0      	bne.n	80081fe <_free_r+0x26>
 800823c:	681c      	ldr	r4, [r3, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	6053      	str	r3, [r2, #4]
 8008242:	440c      	add	r4, r1
 8008244:	6014      	str	r4, [r2, #0]
 8008246:	e7da      	b.n	80081fe <_free_r+0x26>
 8008248:	d902      	bls.n	8008250 <_free_r+0x78>
 800824a:	230c      	movs	r3, #12
 800824c:	6003      	str	r3, [r0, #0]
 800824e:	e7d6      	b.n	80081fe <_free_r+0x26>
 8008250:	6825      	ldr	r5, [r4, #0]
 8008252:	1961      	adds	r1, r4, r5
 8008254:	428b      	cmp	r3, r1
 8008256:	bf04      	itt	eq
 8008258:	6819      	ldreq	r1, [r3, #0]
 800825a:	685b      	ldreq	r3, [r3, #4]
 800825c:	6063      	str	r3, [r4, #4]
 800825e:	bf04      	itt	eq
 8008260:	1949      	addeq	r1, r1, r5
 8008262:	6021      	streq	r1, [r4, #0]
 8008264:	6054      	str	r4, [r2, #4]
 8008266:	e7ca      	b.n	80081fe <_free_r+0x26>
 8008268:	b003      	add	sp, #12
 800826a:	bd30      	pop	{r4, r5, pc}
 800826c:	200043b8 	.word	0x200043b8

08008270 <_init>:
 8008270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008272:	bf00      	nop
 8008274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008276:	bc08      	pop	{r3}
 8008278:	469e      	mov	lr, r3
 800827a:	4770      	bx	lr

0800827c <_fini>:
 800827c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827e:	bf00      	nop
 8008280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008282:	bc08      	pop	{r3}
 8008284:	469e      	mov	lr, r3
 8008286:	4770      	bx	lr
