
RTPLaboratories.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08007888  08007888  00017888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078b8  080078b8  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080078b8  080078b8  000178b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078c0  080078c0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078c0  080078c0  000178c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078c4  080078c4  000178c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080078c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000046bc  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000471c  2000471c  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001eed4  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004839  00000000  00000000  0003efa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ae0  00000000  00000000  000437e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000014d2  00000000  00000000  000452c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000250c3  00000000  00000000  00046792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000217d0  00000000  00000000  0006b855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dc05b  00000000  00000000  0008d025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000750c  00000000  00000000  00169080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  0017058c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007870 	.word	0x08007870

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08007870 	.word	0x08007870

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <vTask1>:
TaskHandle_t xTask2Handle;

void vTask2( void *pvParameters );

void vTask1( void *pvParameters )
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af02      	add	r7, sp, #8
 80004d2:	6078      	str	r0, [r7, #4]
const TickType_t xDelay100ms = pdMS_TO_TICKS( 100UL );
 80004d4:	2364      	movs	r3, #100	; 0x64
 80004d6:	60fb      	str	r3, [r7, #12]

	for( ;; )
	{
		/* Toggle green led. */
		HAL_GPIO_TogglePin(GPIOD, GREEN_LED);
 80004d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004dc:	4808      	ldr	r0, [pc, #32]	; (8000500 <vTask1+0x34>)
 80004de:	f000 ffbc 	bl	800145a <HAL_GPIO_TogglePin>

		/* Create task 2 at a higher priority.  Again the task parameter is not
		used so is set to NULL - BUT this time we want to obtain a handle to the
		task so pass in the address of the xTask2Handle variable. */
		xTaskCreate( vTask2, "Task 2", 1000, NULL, 2, &xTask2Handle );
 80004e2:	4b08      	ldr	r3, [pc, #32]	; (8000504 <vTask1+0x38>)
 80004e4:	9301      	str	r3, [sp, #4]
 80004e6:	2302      	movs	r3, #2
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2300      	movs	r3, #0
 80004ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004f0:	4905      	ldr	r1, [pc, #20]	; (8000508 <vTask1+0x3c>)
 80004f2:	4806      	ldr	r0, [pc, #24]	; (800050c <vTask1+0x40>)
 80004f4:	f005 fcc9 	bl	8005e8a <xTaskCreate>
			 /* The task handle is the last parameter ^^^^^^^^^^^^^ */

		/* Task2 has/had the higher priority, so for Task1 to reach here Task2
		must have already executed and deleted itself.  Delay for 100
		milliseconds. */
		vTaskDelay( xDelay100ms );
 80004f8:	68f8      	ldr	r0, [r7, #12]
 80004fa:	f005 fea3 	bl	8006244 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GREEN_LED);
 80004fe:	e7eb      	b.n	80004d8 <vTask1+0xc>
 8000500:	40020c00 	.word	0x40020c00
 8000504:	2000007c 	.word	0x2000007c
 8000508:	08007888 	.word	0x08007888
 800050c:	08000511 	.word	0x08000511

08000510 <vTask2>:
}

/*-----------------------------------------------------------*/

void vTask2( void *pvParameters )
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	/* Task2 blinks once delete itself.  To do this it could call vTaskDelete()
	using a NULL parameter, but instead and purely for demonstration purposes it
	instead calls vTaskDelete() with its own task handle. */
	/* Toggle green led. */
	HAL_GPIO_TogglePin(GPIOD, BLUE_LED);
 8000518:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800051c:	4805      	ldr	r0, [pc, #20]	; (8000534 <vTask2+0x24>)
 800051e:	f000 ff9c 	bl	800145a <HAL_GPIO_TogglePin>
	vTaskDelete( xTask2Handle );
 8000522:	4b05      	ldr	r3, [pc, #20]	; (8000538 <vTask2+0x28>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4618      	mov	r0, r3
 8000528:	f005 fdfc 	bl	8006124 <vTaskDelete>
}
 800052c:	bf00      	nop
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40020c00 	.word	0x40020c00
 8000538:	2000007c 	.word	0x2000007c

0800053c <application9>:
/*-----------------------------------------------------------*/


void application9(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af02      	add	r7, sp, #8

	/* Create the first task at priority 1.  This time the task parameter is
	not used and is set to NULL.  The task handle is also not used so likewise
	is also set to NULL. */
	xTaskCreate( vTask1, "Task 1", 1000, NULL, 1, NULL );
 8000542:	2300      	movs	r3, #0
 8000544:	9301      	str	r3, [sp, #4]
 8000546:	2301      	movs	r3, #1
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2300      	movs	r3, #0
 800054c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000550:	4903      	ldr	r1, [pc, #12]	; (8000560 <application9+0x24>)
 8000552:	4804      	ldr	r0, [pc, #16]	; (8000564 <application9+0x28>)
 8000554:	f005 fc99 	bl	8005e8a <xTaskCreate>
    /* The task is created at priority 1 ^. */

}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	08007890 	.word	0x08007890
 8000564:	080004cd 	.word	0x080004cd

08000568 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	4a07      	ldr	r2, [pc, #28]	; (8000594 <vApplicationGetIdleTaskMemory+0x2c>)
 8000578:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <vApplicationGetIdleTaskMemory+0x30>)
 800057e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2280      	movs	r2, #128	; 0x80
 8000584:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000080 	.word	0x20000080
 8000598:	20000120 	.word	0x20000120

0800059c <main>:
*/



int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005a0:	f000 fc82 	bl	8000ea8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005a4:	f000 f810 	bl	80005c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005a8:	f000 f930 	bl	800080c <MX_GPIO_Init>
	MX_I2C1_Init();
 80005ac:	f000 f876 	bl	800069c <MX_I2C1_Init>
	MX_I2S3_Init();
 80005b0:	f000 f8a2 	bl	80006f8 <MX_I2S3_Init>
	MX_SPI1_Init();
 80005b4:	f000 f8d0 	bl	8000758 <MX_SPI1_Init>
	MX_TIM11_Init();
 80005b8:	f000 f904 	bl	80007c4 <MX_TIM11_Init>



	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	application9();
 80005bc:	f7ff ffbe 	bl	800053c <application9>
	/* USER CODE END RTOS_THREADS */


	/* Start scheduler */
	//osKernelStart();
	vTaskStartScheduler();
 80005c0:	f005 fe74 	bl	80062ac <vTaskStartScheduler>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80005c4:	e7fe      	b.n	80005c4 <main+0x28>
	...

080005c8 <SystemClock_Config>:
/**
* @brief System Clock Configuration
* @retval None
*/
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	; 0x50
 80005cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	2230      	movs	r2, #48	; 0x30
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f007 f86c 	bl	80076b4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	4b28      	ldr	r3, [pc, #160]	; (8000694 <SystemClock_Config+0xcc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	4a27      	ldr	r2, [pc, #156]	; (8000694 <SystemClock_Config+0xcc>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	; 0x40
 80005fc:	4b25      	ldr	r3, [pc, #148]	; (8000694 <SystemClock_Config+0xcc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b22      	ldr	r3, [pc, #136]	; (8000698 <SystemClock_Config+0xd0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a21      	ldr	r2, [pc, #132]	; (8000698 <SystemClock_Config+0xd0>)
 8000612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <SystemClock_Config+0xd0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000624:	2301      	movs	r3, #1
 8000626:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000628:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800062c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000632:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000638:	2308      	movs	r3, #8
 800063a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 800063c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000640:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000646:	2307      	movs	r3, #7
 8000648:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	4618      	mov	r0, r3
 8000650:	f003 fa8e 	bl	8003b70 <HAL_RCC_OscConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x96>
	{
		Error_Handler();
 800065a:	f000 f9e7 	bl	8000a2c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800065e:	230f      	movs	r3, #15
 8000660:	60fb      	str	r3, [r7, #12]
		| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000662:	2302      	movs	r3, #2
 8000664:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800066a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800066e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000674:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	2105      	movs	r1, #5
 800067c:	4618      	mov	r0, r3
 800067e:	f003 fcef 	bl	8004060 <HAL_RCC_ClockConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8000688:	f000 f9d0 	bl	8000a2c <Error_Handler>
	}
}
 800068c:	bf00      	nop
 800068e:	3750      	adds	r7, #80	; 0x50
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_I2C1_Init>:
* @brief I2C1 Initialization Function
* @param None
* @retval None
*/
static void MX_I2C1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_I2C1_Init+0x50>)
 80006a2:	4a13      	ldr	r2, [pc, #76]	; (80006f0 <MX_I2C1_Init+0x54>)
 80006a4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_I2C1_Init+0x50>)
 80006a8:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <MX_I2C1_Init+0x58>)
 80006aa:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_I2C1_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_I2C1_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_I2C1_Init+0x50>)
 80006ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006be:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <MX_I2C1_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_I2C1_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_I2C1_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_I2C1_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_I2C1_Init+0x50>)
 80006da:	f002 fc65 	bl	8002fa8 <HAL_I2C_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80006e4:	f000 f9a2 	bl	8000a2c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000320 	.word	0x20000320
 80006f0:	40005400 	.word	0x40005400
 80006f4:	000186a0 	.word	0x000186a0

080006f8 <MX_I2S3_Init>:
* @brief I2S3 Initialization Function
* @param None
* @retval None
*/
static void MX_I2S3_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_I2S3_Init+0x54>)
 80006fe:	4a14      	ldr	r2, [pc, #80]	; (8000750 <MX_I2S3_Init+0x58>)
 8000700:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_I2S3_Init+0x54>)
 8000704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000708:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_I2S3_Init+0x54>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_I2S3_Init+0x54>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <MX_I2S3_Init+0x54>)
 8000718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800071c:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_I2S3_Init+0x54>)
 8000720:	4a0c      	ldr	r2, [pc, #48]	; (8000754 <MX_I2S3_Init+0x5c>)
 8000722:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_I2S3_Init+0x54>)
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_I2S3_Init+0x54>)
 800072c:	2200      	movs	r2, #0
 800072e:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_I2S3_Init+0x54>)
 8000732:	2200      	movs	r2, #0
 8000734:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_I2S3_Init+0x54>)
 8000738:	f002 fd7a 	bl	8003230 <HAL_I2S_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_I2S3_Init+0x4e>
	{
		Error_Handler();
 8000742:	f000 f973 	bl	8000a2c <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000374 	.word	0x20000374
 8000750:	40003c00 	.word	0x40003c00
 8000754:	00017700 	.word	0x00017700

08000758 <MX_SPI1_Init>:
* @brief SPI1 Initialization Function
* @param None
* @retval None
*/
static void MX_SPI1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800075c:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_SPI1_Init+0x64>)
 800075e:	4a18      	ldr	r2, [pc, #96]	; (80007c0 <MX_SPI1_Init+0x68>)
 8000760:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_SPI1_Init+0x64>)
 8000764:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000768:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_SPI1_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_SPI1_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_SPI1_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_SPI1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_SPI1_Init+0x64>)
 8000784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000788:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_SPI1_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <MX_SPI1_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_SPI1_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <MX_SPI1_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_SPI1_Init+0x64>)
 80007a4:	220a      	movs	r2, #10
 80007a6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_SPI1_Init+0x64>)
 80007aa:	f003 ffed 	bl	8004788 <HAL_SPI_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 80007b4:	f000 f93a 	bl	8000a2c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200003bc 	.word	0x200003bc
 80007c0:	40013000 	.word	0x40013000

080007c4 <MX_TIM11_Init>:
* @brief TIM11 Initialization Function
* @param None
* @retval None
*/
static void MX_TIM11_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	/* USER CODE END TIM11_Init 0 */

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_TIM11_Init+0x40>)
 80007ca:	4a0f      	ldr	r2, [pc, #60]	; (8000808 <MX_TIM11_Init+0x44>)
 80007cc:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 0;
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <MX_TIM11_Init+0x40>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d4:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_TIM11_Init+0x40>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 65535;
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_TIM11_Init+0x40>)
 80007dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007e0:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_TIM11_Init+0x40>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_TIM11_Init+0x40>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_TIM11_Init+0x40>)
 80007f0:	f004 f853 	bl	800489a <HAL_TIM_Base_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM11_Init+0x3a>
	{
		Error_Handler();
 80007fa:	f000 f917 	bl	8000a2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000414 	.word	0x20000414
 8000808:	40014800 	.word	0x40014800

0800080c <MX_GPIO_Init>:
* @brief GPIO Initialization Function
* @param None
* @retval None
*/
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08c      	sub	sp, #48	; 0x30
 8000810:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
 8000826:	4b72      	ldr	r3, [pc, #456]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a71      	ldr	r2, [pc, #452]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 800082c:	f043 0310 	orr.w	r3, r3, #16
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b6f      	ldr	r3, [pc, #444]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0310 	and.w	r3, r3, #16
 800083a:	61bb      	str	r3, [r7, #24]
 800083c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
 8000842:	4b6b      	ldr	r3, [pc, #428]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a6a      	ldr	r2, [pc, #424]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b68      	ldr	r3, [pc, #416]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0304 	and.w	r3, r3, #4
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b64      	ldr	r3, [pc, #400]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a63      	ldr	r2, [pc, #396]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 8000864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b61      	ldr	r3, [pc, #388]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b5d      	ldr	r3, [pc, #372]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a5c      	ldr	r2, [pc, #368]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b5a      	ldr	r3, [pc, #360]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b56      	ldr	r3, [pc, #344]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a55      	ldr	r2, [pc, #340]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b53      	ldr	r3, [pc, #332]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b4f      	ldr	r3, [pc, #316]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a4e      	ldr	r2, [pc, #312]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 80008b8:	f043 0308 	orr.w	r3, r3, #8
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b4c      	ldr	r3, [pc, #304]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0308 	and.w	r3, r3, #8
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2108      	movs	r1, #8
 80008ce:	4849      	ldr	r0, [pc, #292]	; (80009f4 <MX_GPIO_Init+0x1e8>)
 80008d0:	f000 fdaa 	bl	8001428 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2101      	movs	r1, #1
 80008d8:	4847      	ldr	r0, [pc, #284]	; (80009f8 <MX_GPIO_Init+0x1ec>)
 80008da:	f000 fda5 	bl	8001428 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin
 80008de:	2200      	movs	r2, #0
 80008e0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008e4:	4845      	ldr	r0, [pc, #276]	; (80009fc <MX_GPIO_Init+0x1f0>)
 80008e6:	f000 fd9f 	bl	8001428 <HAL_GPIO_WritePin>
		| Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008ea:	2308      	movs	r3, #8
 80008ec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	483c      	ldr	r0, [pc, #240]	; (80009f4 <MX_GPIO_Init+0x1e8>)
 8000902:	f000 fbf5 	bl	80010f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000906:	2301      	movs	r3, #1
 8000908:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4836      	ldr	r0, [pc, #216]	; (80009f8 <MX_GPIO_Init+0x1ec>)
 800091e:	f000 fbe7 	bl	80010f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000922:	2308      	movs	r3, #8
 8000924:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000932:	2305      	movs	r3, #5
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	482e      	ldr	r0, [pc, #184]	; (80009f8 <MX_GPIO_Init+0x1ec>)
 800093e:	f000 fbd7 	bl	80010f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000942:	2301      	movs	r3, #1
 8000944:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000946:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800094a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	482a      	ldr	r0, [pc, #168]	; (8000a00 <MX_GPIO_Init+0x1f4>)
 8000958:	f000 fbca 	bl	80010f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 800095c:	2304      	movs	r3, #4
 800095e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	4825      	ldr	r0, [pc, #148]	; (8000a04 <MX_GPIO_Init+0x1f8>)
 8000970:	f000 fbbe 	bl	80010f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000978:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000986:	2305      	movs	r3, #5
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	481c      	ldr	r0, [pc, #112]	; (8000a04 <MX_GPIO_Init+0x1f8>)
 8000992:	f000 fbad 	bl	80010f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin
 8000996:	f24f 0310 	movw	r3, #61456	; 0xf010
 800099a:	61fb      	str	r3, [r7, #28]
		| Audio_RST_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4813      	ldr	r0, [pc, #76]	; (80009fc <MX_GPIO_Init+0x1f0>)
 80009b0:	f000 fb9e 	bl	80010f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009b4:	2320      	movs	r3, #32
 80009b6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	480d      	ldr	r0, [pc, #52]	; (80009fc <MX_GPIO_Init+0x1f0>)
 80009c8:	f000 fb92 	bl	80010f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009d0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009d4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_GPIO_Init+0x1e8>)
 80009e2:	f000 fb85 	bl	80010f0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80009e6:	bf00      	nop
 80009e8:	3730      	adds	r7, #48	; 0x30
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40021000 	.word	0x40021000
 80009f8:	40020800 	.word	0x40020800
 80009fc:	40020c00 	.word	0x40020c00
 8000a00:	40020000 	.word	0x40020000
 8000a04:	40020400 	.word	0x40020400

08000a08 <HAL_TIM_PeriodElapsedCallback>:
* a global variable "uwTick" used as application time base.
* @param  htim : TIM handle
* @retval None
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d101      	bne.n	8000a1e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000a1a:	f000 fa67 	bl	8000eec <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40010000 	.word	0x40010000

08000a2c <Error_Handler>:
/**
* @brief  This function is executed in case of error occurrence.
* @retval None
*/
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a34:	e7fe      	b.n	8000a34 <Error_Handler+0x8>
	...

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_MspInit+0x54>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	4a11      	ldr	r2, [pc, #68]	; (8000a8c <HAL_MspInit+0x54>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <HAL_MspInit+0x54>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <HAL_MspInit+0x54>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <HAL_MspInit+0x54>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <HAL_MspInit+0x54>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	210f      	movs	r1, #15
 8000a7a:	f06f 0001 	mvn.w	r0, #1
 8000a7e:	f000 fb0d 	bl	800109c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800

08000a90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a19      	ldr	r2, [pc, #100]	; (8000b14 <HAL_I2C_MspInit+0x84>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d12c      	bne.n	8000b0c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <HAL_I2C_MspInit+0x88>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <HAL_I2C_MspInit+0x88>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_I2C_MspInit+0x88>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ace:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad4:	2312      	movs	r3, #18
 8000ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	480c      	ldr	r0, [pc, #48]	; (8000b1c <HAL_I2C_MspInit+0x8c>)
 8000aec:	f000 fb00 	bl	80010f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <HAL_I2C_MspInit+0x88>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <HAL_I2C_MspInit+0x88>)
 8000afa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000afe:	6413      	str	r3, [r2, #64]	; 0x40
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <HAL_I2C_MspInit+0x88>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b0c:	bf00      	nop
 8000b0e:	3728      	adds	r7, #40	; 0x28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40005400 	.word	0x40005400
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020400 	.word	0x40020400

08000b20 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08e      	sub	sp, #56	; 0x38
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a31      	ldr	r2, [pc, #196]	; (8000c10 <HAL_I2S_MspInit+0xf0>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d15a      	bne.n	8000c06 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b50:	2301      	movs	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b54:	23c0      	movs	r3, #192	; 0xc0
 8000b56:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4618      	mov	r0, r3
 8000b62:	f003 fccf 	bl	8004504 <HAL_RCCEx_PeriphCLKConfig>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b6c:	f7ff ff5e 	bl	8000a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	4b27      	ldr	r3, [pc, #156]	; (8000c14 <HAL_I2S_MspInit+0xf4>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	4a26      	ldr	r2, [pc, #152]	; (8000c14 <HAL_I2S_MspInit+0xf4>)
 8000b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b80:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <HAL_I2S_MspInit+0xf4>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <HAL_I2S_MspInit+0xf4>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	4a1f      	ldr	r2, [pc, #124]	; (8000c14 <HAL_I2S_MspInit+0xf4>)
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <HAL_I2S_MspInit+0xf4>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <HAL_I2S_MspInit+0xf4>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	4a18      	ldr	r2, [pc, #96]	; (8000c14 <HAL_I2S_MspInit+0xf4>)
 8000bb2:	f043 0304 	orr.w	r3, r3, #4
 8000bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb8:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <HAL_I2S_MspInit+0xf4>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	f003 0304 	and.w	r3, r3, #4
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bc4:	2310      	movs	r3, #16
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bd4:	2306      	movs	r3, #6
 8000bd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	480e      	ldr	r0, [pc, #56]	; (8000c18 <HAL_I2S_MspInit+0xf8>)
 8000be0:	f000 fa86 	bl	80010f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000be4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bf6:	2306      	movs	r3, #6
 8000bf8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4806      	ldr	r0, [pc, #24]	; (8000c1c <HAL_I2S_MspInit+0xfc>)
 8000c02:	f000 fa75 	bl	80010f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c06:	bf00      	nop
 8000c08:	3738      	adds	r7, #56	; 0x38
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40003c00 	.word	0x40003c00
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020000 	.word	0x40020000
 8000c1c:	40020800 	.word	0x40020800

08000c20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a19      	ldr	r2, [pc, #100]	; (8000ca4 <HAL_SPI_MspInit+0x84>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d12b      	bne.n	8000c9a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <HAL_SPI_MspInit+0x88>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	4a17      	ldr	r2, [pc, #92]	; (8000ca8 <HAL_SPI_MspInit+0x88>)
 8000c4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c50:	6453      	str	r3, [r2, #68]	; 0x44
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <HAL_SPI_MspInit+0x88>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <HAL_SPI_MspInit+0x88>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a10      	ldr	r2, [pc, #64]	; (8000ca8 <HAL_SPI_MspInit+0x88>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <HAL_SPI_MspInit+0x88>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c7a:	23e0      	movs	r3, #224	; 0xe0
 8000c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c8a:	2305      	movs	r3, #5
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	4805      	ldr	r0, [pc, #20]	; (8000cac <HAL_SPI_MspInit+0x8c>)
 8000c96:	f000 fa2b 	bl	80010f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c9a:	bf00      	nop
 8000c9c:	3728      	adds	r7, #40	; 0x28
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40013000 	.word	0x40013000
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000

08000cb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <HAL_TIM_Base_MspInit+0x3c>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d10d      	bne.n	8000cde <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <HAL_TIM_Base_MspInit+0x40>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	4a09      	ldr	r2, [pc, #36]	; (8000cf0 <HAL_TIM_Base_MspInit+0x40>)
 8000ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd2:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <HAL_TIM_Base_MspInit+0x40>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000cde:	bf00      	nop
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40014800 	.word	0x40014800
 8000cf0:	40023800 	.word	0x40023800

08000cf4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08c      	sub	sp, #48	; 0x30
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d00:	2300      	movs	r3, #0
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d04:	2300      	movs	r3, #0
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	4b2f      	ldr	r3, [pc, #188]	; (8000dc8 <HAL_InitTick+0xd4>)
 8000d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0c:	4a2e      	ldr	r2, [pc, #184]	; (8000dc8 <HAL_InitTick+0xd4>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	6453      	str	r3, [r2, #68]	; 0x44
 8000d14:	4b2c      	ldr	r3, [pc, #176]	; (8000dc8 <HAL_InitTick+0xd4>)
 8000d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d20:	f107 020c 	add.w	r2, r7, #12
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	4611      	mov	r1, r2
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f003 fbb8 	bl	80044a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d30:	f003 fba2 	bl	8004478 <HAL_RCC_GetPCLK2Freq>
 8000d34:	4603      	mov	r3, r0
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d3c:	4a23      	ldr	r2, [pc, #140]	; (8000dcc <HAL_InitTick+0xd8>)
 8000d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d42:	0c9b      	lsrs	r3, r3, #18
 8000d44:	3b01      	subs	r3, #1
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d48:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <HAL_InitTick+0xdc>)
 8000d4a:	4a22      	ldr	r2, [pc, #136]	; (8000dd4 <HAL_InitTick+0xe0>)
 8000d4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d4e:	4b20      	ldr	r3, [pc, #128]	; (8000dd0 <HAL_InitTick+0xdc>)
 8000d50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d54:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d56:	4a1e      	ldr	r2, [pc, #120]	; (8000dd0 <HAL_InitTick+0xdc>)
 8000d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <HAL_InitTick+0xdc>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d62:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <HAL_InitTick+0xdc>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d68:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <HAL_InitTick+0xdc>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000d6e:	4818      	ldr	r0, [pc, #96]	; (8000dd0 <HAL_InitTick+0xdc>)
 8000d70:	f003 fd93 	bl	800489a <HAL_TIM_Base_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d11b      	bne.n	8000dba <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000d82:	4813      	ldr	r0, [pc, #76]	; (8000dd0 <HAL_InitTick+0xdc>)
 8000d84:	f003 fdd8 	bl	8004938 <HAL_TIM_Base_Start_IT>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d111      	bne.n	8000dba <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d96:	2019      	movs	r0, #25
 8000d98:	f000 f99c 	bl	80010d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b0f      	cmp	r3, #15
 8000da0:	d808      	bhi.n	8000db4 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000da2:	2200      	movs	r2, #0
 8000da4:	6879      	ldr	r1, [r7, #4]
 8000da6:	2019      	movs	r0, #25
 8000da8:	f000 f978 	bl	800109c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dac:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <HAL_InitTick+0xe4>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6013      	str	r3, [r2, #0]
 8000db2:	e002      	b.n	8000dba <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000dba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3730      	adds	r7, #48	; 0x30
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	431bde83 	.word	0x431bde83
 8000dd0:	2000045c 	.word	0x2000045c
 8000dd4:	40010000 	.word	0x40010000
 8000dd8:	20000004 	.word	0x20000004

08000ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000de0:	e7fe      	b.n	8000de0 <NMI_Handler+0x4>

08000de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <HardFault_Handler+0x4>

08000de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <MemManage_Handler+0x4>

08000dee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <BusFault_Handler+0x4>

08000df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <UsageFault_Handler+0x4>

08000dfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e0e:	f003 fe03 	bl	8004a18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	2000045c 	.word	0x2000045c

08000e1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <OTG_FS_IRQHandler+0x10>)
 8000e22:	f000 fb34 	bl	800148e <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	200041fc 	.word	0x200041fc

08000e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <SystemInit+0x20>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <SystemInit+0x20>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e58:	f7ff ffea 	bl	8000e30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e5c:	480c      	ldr	r0, [pc, #48]	; (8000e90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e5e:	490d      	ldr	r1, [pc, #52]	; (8000e94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e60:	4a0d      	ldr	r2, [pc, #52]	; (8000e98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e74:	4c0a      	ldr	r4, [pc, #40]	; (8000ea0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e82:	f006 fc75 	bl	8007770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e86:	f7ff fb89 	bl	800059c <main>
  bx  lr    
 8000e8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e94:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e98:	080078c8 	.word	0x080078c8
  ldr r2, =_sbss
 8000e9c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ea0:	2000471c 	.word	0x2000471c

08000ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC_IRQHandler>
	...

08000ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eac:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <HAL_Init+0x40>)
 8000eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <HAL_Init+0x40>)
 8000ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <HAL_Init+0x40>)
 8000eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 f8d8 	bl	8001086 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed6:	200f      	movs	r0, #15
 8000ed8:	f7ff ff0c 	bl	8000cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000edc:	f7ff fdac 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023c00 	.word	0x40023c00

08000eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x20>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x24>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <HAL_IncTick+0x24>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	200004a4 	.word	0x200004a4

08000f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <HAL_GetTick+0x14>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	200004a4 	.word	0x200004a4

08000f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5e:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	60d3      	str	r3, [r2, #12]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <__NVIC_GetPriorityGrouping+0x18>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	f003 0307 	and.w	r3, r3, #7
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	db0b      	blt.n	8000fba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	f003 021f 	and.w	r2, r3, #31
 8000fa8:	4907      	ldr	r1, [pc, #28]	; (8000fc8 <__NVIC_EnableIRQ+0x38>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	095b      	lsrs	r3, r3, #5
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000e100 	.word	0xe000e100

08000fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	db0a      	blt.n	8000ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	490c      	ldr	r1, [pc, #48]	; (8001018 <__NVIC_SetPriority+0x4c>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	0112      	lsls	r2, r2, #4
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	440b      	add	r3, r1
 8000ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff4:	e00a      	b.n	800100c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4908      	ldr	r1, [pc, #32]	; (800101c <__NVIC_SetPriority+0x50>)
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	f003 030f 	and.w	r3, r3, #15
 8001002:	3b04      	subs	r3, #4
 8001004:	0112      	lsls	r2, r2, #4
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	440b      	add	r3, r1
 800100a:	761a      	strb	r2, [r3, #24]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000e100 	.word	0xe000e100
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	; 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f1c3 0307 	rsb	r3, r3, #7
 800103a:	2b04      	cmp	r3, #4
 800103c:	bf28      	it	cs
 800103e:	2304      	movcs	r3, #4
 8001040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3304      	adds	r3, #4
 8001046:	2b06      	cmp	r3, #6
 8001048:	d902      	bls.n	8001050 <NVIC_EncodePriority+0x30>
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3b03      	subs	r3, #3
 800104e:	e000      	b.n	8001052 <NVIC_EncodePriority+0x32>
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	f04f 32ff 	mov.w	r2, #4294967295
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43da      	mvns	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	401a      	ands	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001068:	f04f 31ff 	mov.w	r1, #4294967295
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	43d9      	mvns	r1, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	4313      	orrs	r3, r2
         );
}
 800107a:	4618      	mov	r0, r3
 800107c:	3724      	adds	r7, #36	; 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ff4c 	bl	8000f2c <__NVIC_SetPriorityGrouping>
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ae:	f7ff ff61 	bl	8000f74 <__NVIC_GetPriorityGrouping>
 80010b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	68b9      	ldr	r1, [r7, #8]
 80010b8:	6978      	ldr	r0, [r7, #20]
 80010ba:	f7ff ffb1 	bl	8001020 <NVIC_EncodePriority>
 80010be:	4602      	mov	r2, r0
 80010c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c4:	4611      	mov	r1, r2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ff80 	bl	8000fcc <__NVIC_SetPriority>
}
 80010cc:	bf00      	nop
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff ff54 	bl	8000f90 <__NVIC_EnableIRQ>
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b089      	sub	sp, #36	; 0x24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
 800110a:	e16b      	b.n	80013e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800110c:	2201      	movs	r2, #1
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	429a      	cmp	r2, r3
 8001126:	f040 815a 	bne.w	80013de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0303 	and.w	r3, r3, #3
 8001132:	2b01      	cmp	r3, #1
 8001134:	d005      	beq.n	8001142 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800113e:	2b02      	cmp	r3, #2
 8001140:	d130      	bne.n	80011a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	2203      	movs	r2, #3
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	68da      	ldr	r2, [r3, #12]
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001178:	2201      	movs	r2, #1
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	091b      	lsrs	r3, r3, #4
 800118e:	f003 0201 	and.w	r2, r3, #1
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d017      	beq.n	80011e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	2203      	movs	r2, #3
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d123      	bne.n	8001234 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	08da      	lsrs	r2, r3, #3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3208      	adds	r2, #8
 80011f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	f003 0307 	and.w	r3, r3, #7
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	220f      	movs	r2, #15
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	691a      	ldr	r2, [r3, #16]
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	08da      	lsrs	r2, r3, #3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3208      	adds	r2, #8
 800122e:	69b9      	ldr	r1, [r7, #24]
 8001230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	2203      	movs	r2, #3
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0203 	and.w	r2, r3, #3
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 80b4 	beq.w	80013de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b60      	ldr	r3, [pc, #384]	; (80013fc <HAL_GPIO_Init+0x30c>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	4a5f      	ldr	r2, [pc, #380]	; (80013fc <HAL_GPIO_Init+0x30c>)
 8001280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001284:	6453      	str	r3, [r2, #68]	; 0x44
 8001286:	4b5d      	ldr	r3, [pc, #372]	; (80013fc <HAL_GPIO_Init+0x30c>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001292:	4a5b      	ldr	r2, [pc, #364]	; (8001400 <HAL_GPIO_Init+0x310>)
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	3302      	adds	r3, #2
 800129a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	220f      	movs	r2, #15
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a52      	ldr	r2, [pc, #328]	; (8001404 <HAL_GPIO_Init+0x314>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d02b      	beq.n	8001316 <HAL_GPIO_Init+0x226>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a51      	ldr	r2, [pc, #324]	; (8001408 <HAL_GPIO_Init+0x318>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d025      	beq.n	8001312 <HAL_GPIO_Init+0x222>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a50      	ldr	r2, [pc, #320]	; (800140c <HAL_GPIO_Init+0x31c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d01f      	beq.n	800130e <HAL_GPIO_Init+0x21e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4f      	ldr	r2, [pc, #316]	; (8001410 <HAL_GPIO_Init+0x320>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d019      	beq.n	800130a <HAL_GPIO_Init+0x21a>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4e      	ldr	r2, [pc, #312]	; (8001414 <HAL_GPIO_Init+0x324>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d013      	beq.n	8001306 <HAL_GPIO_Init+0x216>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4d      	ldr	r2, [pc, #308]	; (8001418 <HAL_GPIO_Init+0x328>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d00d      	beq.n	8001302 <HAL_GPIO_Init+0x212>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4c      	ldr	r2, [pc, #304]	; (800141c <HAL_GPIO_Init+0x32c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d007      	beq.n	80012fe <HAL_GPIO_Init+0x20e>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4b      	ldr	r2, [pc, #300]	; (8001420 <HAL_GPIO_Init+0x330>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d101      	bne.n	80012fa <HAL_GPIO_Init+0x20a>
 80012f6:	2307      	movs	r3, #7
 80012f8:	e00e      	b.n	8001318 <HAL_GPIO_Init+0x228>
 80012fa:	2308      	movs	r3, #8
 80012fc:	e00c      	b.n	8001318 <HAL_GPIO_Init+0x228>
 80012fe:	2306      	movs	r3, #6
 8001300:	e00a      	b.n	8001318 <HAL_GPIO_Init+0x228>
 8001302:	2305      	movs	r3, #5
 8001304:	e008      	b.n	8001318 <HAL_GPIO_Init+0x228>
 8001306:	2304      	movs	r3, #4
 8001308:	e006      	b.n	8001318 <HAL_GPIO_Init+0x228>
 800130a:	2303      	movs	r3, #3
 800130c:	e004      	b.n	8001318 <HAL_GPIO_Init+0x228>
 800130e:	2302      	movs	r3, #2
 8001310:	e002      	b.n	8001318 <HAL_GPIO_Init+0x228>
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <HAL_GPIO_Init+0x228>
 8001316:	2300      	movs	r3, #0
 8001318:	69fa      	ldr	r2, [r7, #28]
 800131a:	f002 0203 	and.w	r2, r2, #3
 800131e:	0092      	lsls	r2, r2, #2
 8001320:	4093      	lsls	r3, r2
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001328:	4935      	ldr	r1, [pc, #212]	; (8001400 <HAL_GPIO_Init+0x310>)
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	089b      	lsrs	r3, r3, #2
 800132e:	3302      	adds	r3, #2
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001336:	4b3b      	ldr	r3, [pc, #236]	; (8001424 <HAL_GPIO_Init+0x334>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800135a:	4a32      	ldr	r2, [pc, #200]	; (8001424 <HAL_GPIO_Init+0x334>)
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001360:	4b30      	ldr	r3, [pc, #192]	; (8001424 <HAL_GPIO_Init+0x334>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d003      	beq.n	8001384 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001384:	4a27      	ldr	r2, [pc, #156]	; (8001424 <HAL_GPIO_Init+0x334>)
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800138a:	4b26      	ldr	r3, [pc, #152]	; (8001424 <HAL_GPIO_Init+0x334>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ae:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <HAL_GPIO_Init+0x334>)
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <HAL_GPIO_Init+0x334>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013d8:	4a12      	ldr	r2, [pc, #72]	; (8001424 <HAL_GPIO_Init+0x334>)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3301      	adds	r3, #1
 80013e2:	61fb      	str	r3, [r7, #28]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	2b0f      	cmp	r3, #15
 80013e8:	f67f ae90 	bls.w	800110c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	3724      	adds	r7, #36	; 0x24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	40013800 	.word	0x40013800
 8001404:	40020000 	.word	0x40020000
 8001408:	40020400 	.word	0x40020400
 800140c:	40020800 	.word	0x40020800
 8001410:	40020c00 	.word	0x40020c00
 8001414:	40021000 	.word	0x40021000
 8001418:	40021400 	.word	0x40021400
 800141c:	40021800 	.word	0x40021800
 8001420:	40021c00 	.word	0x40021c00
 8001424:	40013c00 	.word	0x40013c00

08001428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	807b      	strh	r3, [r7, #2]
 8001434:	4613      	mov	r3, r2
 8001436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001438:	787b      	ldrb	r3, [r7, #1]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800143e:	887a      	ldrh	r2, [r7, #2]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001444:	e003      	b.n	800144e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001446:	887b      	ldrh	r3, [r7, #2]
 8001448:	041a      	lsls	r2, r3, #16
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	619a      	str	r2, [r3, #24]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800145a:	b480      	push	{r7}
 800145c:	b085      	sub	sp, #20
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	460b      	mov	r3, r1
 8001464:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800146c:	887a      	ldrh	r2, [r7, #2]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4013      	ands	r3, r2
 8001472:	041a      	lsls	r2, r3, #16
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	43d9      	mvns	r1, r3
 8001478:	887b      	ldrh	r3, [r7, #2]
 800147a:	400b      	ands	r3, r1
 800147c:	431a      	orrs	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	619a      	str	r2, [r3, #24]
}
 8001482:	bf00      	nop
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f003 fd9d 	bl	8004fe4 <USB_GetMode>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	f040 80fb 	bne.w	80016a8 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f003 fd60 	bl	8004f7c <USB_ReadInterrupts>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 80f1 	beq.w	80016a6 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f003 fd57 	bl	8004f7c <USB_ReadInterrupts>
 80014ce:	4603      	mov	r3, r0
 80014d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80014d8:	d104      	bne.n	80014e4 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014e2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f003 fd47 	bl	8004f7c <USB_ReadInterrupts>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014f8:	d104      	bne.n	8001504 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001502:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f003 fd37 	bl	8004f7c <USB_ReadInterrupts>
 800150e:	4603      	mov	r3, r0
 8001510:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001514:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001518:	d104      	bne.n	8001524 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001522:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f003 fd27 	bl	8004f7c <USB_ReadInterrupts>
 800152e:	4603      	mov	r3, r0
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b02      	cmp	r3, #2
 8001536:	d103      	bne.n	8001540 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2202      	movs	r2, #2
 800153e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f003 fd19 	bl	8004f7c <USB_ReadInterrupts>
 800154a:	4603      	mov	r3, r0
 800154c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001554:	d120      	bne.n	8001598 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800155e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b00      	cmp	r3, #0
 800156e:	d113      	bne.n	8001598 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001570:	2110      	movs	r1, #16
 8001572:	6938      	ldr	r0, [r7, #16]
 8001574:	f003 fc4a 	bl	8004e0c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001578:	6938      	ldr	r0, [r7, #16]
 800157a:	f003 fc79 	bl	8004e70 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	7a5b      	ldrb	r3, [r3, #9]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d105      	bne.n	8001592 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2101      	movs	r1, #1
 800158c:	4618      	mov	r0, r3
 800158e:	f003 fd37 	bl	8005000 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f005 fffe 	bl	8007594 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f003 fced 	bl	8004f7c <USB_ReadInterrupts>
 80015a2:	4603      	mov	r3, r0
 80015a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ac:	d102      	bne.n	80015b4 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f001 fc87 	bl	8002ec2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f003 fcdf 	bl	8004f7c <USB_ReadInterrupts>
 80015be:	4603      	mov	r3, r0
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	d106      	bne.n	80015d6 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f005 ffc7 	bl	800755c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2208      	movs	r2, #8
 80015d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f003 fcce 	bl	8004f7c <USB_ReadInterrupts>
 80015e0:	4603      	mov	r3, r0
 80015e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015ea:	d139      	bne.n	8001660 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f003 fd42 	bl	800507a <USB_HC_ReadInterrupt>
 80015f6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	e025      	b.n	800164a <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f003 030f 	and.w	r3, r3, #15
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	fa22 f303 	lsr.w	r3, r2, r3
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d018      	beq.n	8001644 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	015a      	lsls	r2, r3, #5
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4413      	add	r3, r2
 800161a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001628:	d106      	bne.n	8001638 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	4619      	mov	r1, r3
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 f859 	bl	80016e8 <HCD_HC_IN_IRQHandler>
 8001636:	e005      	b.n	8001644 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	4619      	mov	r1, r3
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 febb 	bl	80023ba <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	3301      	adds	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	795b      	ldrb	r3, [r3, #5]
 800164e:	461a      	mov	r2, r3
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	4293      	cmp	r3, r2
 8001654:	d3d3      	bcc.n	80015fe <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800165e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f003 fc89 	bl	8004f7c <USB_ReadInterrupts>
 800166a:	4603      	mov	r3, r0
 800166c:	f003 0310 	and.w	r3, r3, #16
 8001670:	2b10      	cmp	r3, #16
 8001672:	d101      	bne.n	8001678 <HAL_HCD_IRQHandler+0x1ea>
 8001674:	2301      	movs	r3, #1
 8001676:	e000      	b.n	800167a <HAL_HCD_IRQHandler+0x1ec>
 8001678:	2300      	movs	r3, #0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d014      	beq.n	80016a8 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	699a      	ldr	r2, [r3, #24]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 0210 	bic.w	r2, r2, #16
 800168c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f001 fb38 	bl	8002d04 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	699a      	ldr	r2, [r3, #24]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0210 	orr.w	r2, r2, #16
 80016a2:	619a      	str	r2, [r3, #24]
 80016a4:	e000      	b.n	80016a8 <HAL_HCD_IRQHandler+0x21a>
      return;
 80016a6:	bf00      	nop
    }
  }
}
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d101      	bne.n	80016c4 <HAL_HCD_Stop+0x16>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e00d      	b.n	80016e0 <HAL_HCD_Stop+0x32>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f003 fe03 	bl	80052dc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	78fa      	ldrb	r2, [r7, #3]
 8001704:	4611      	mov	r1, r2
 8001706:	4618      	mov	r0, r3
 8001708:	f003 fc4b 	bl	8004fa2 <USB_ReadChInterrupts>
 800170c:	4603      	mov	r3, r0
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	2b04      	cmp	r3, #4
 8001714:	d11a      	bne.n	800174c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001716:	78fb      	ldrb	r3, [r7, #3]
 8001718:	015a      	lsls	r2, r3, #5
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	4413      	add	r3, r2
 800171e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001722:	461a      	mov	r2, r3
 8001724:	2304      	movs	r3, #4
 8001726:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001728:	78fa      	ldrb	r2, [r7, #3]
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	4613      	mov	r3, r2
 800172e:	011b      	lsls	r3, r3, #4
 8001730:	1a9b      	subs	r3, r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	440b      	add	r3, r1
 8001736:	334d      	adds	r3, #77	; 0x4d
 8001738:	2207      	movs	r2, #7
 800173a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	78fa      	ldrb	r2, [r7, #3]
 8001742:	4611      	mov	r1, r2
 8001744:	4618      	mov	r0, r3
 8001746:	f003 fca9 	bl	800509c <USB_HC_Halt>
 800174a:	e09e      	b.n	800188a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	78fa      	ldrb	r2, [r7, #3]
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f003 fc24 	bl	8004fa2 <USB_ReadChInterrupts>
 800175a:	4603      	mov	r3, r0
 800175c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001764:	d11b      	bne.n	800179e <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001766:	78fb      	ldrb	r3, [r7, #3]
 8001768:	015a      	lsls	r2, r3, #5
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	4413      	add	r3, r2
 800176e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001772:	461a      	mov	r2, r3
 8001774:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001778:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800177a:	78fa      	ldrb	r2, [r7, #3]
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	1a9b      	subs	r3, r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	334d      	adds	r3, #77	; 0x4d
 800178a:	2208      	movs	r2, #8
 800178c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	78fa      	ldrb	r2, [r7, #3]
 8001794:	4611      	mov	r1, r2
 8001796:	4618      	mov	r0, r3
 8001798:	f003 fc80 	bl	800509c <USB_HC_Halt>
 800179c:	e075      	b.n	800188a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	78fa      	ldrb	r2, [r7, #3]
 80017a4:	4611      	mov	r1, r2
 80017a6:	4618      	mov	r0, r3
 80017a8:	f003 fbfb 	bl	8004fa2 <USB_ReadChInterrupts>
 80017ac:	4603      	mov	r3, r0
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d11a      	bne.n	80017ec <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	015a      	lsls	r2, r3, #5
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	4413      	add	r3, r2
 80017be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017c2:	461a      	mov	r2, r3
 80017c4:	2308      	movs	r3, #8
 80017c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	334d      	adds	r3, #77	; 0x4d
 80017d8:	2206      	movs	r2, #6
 80017da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	78fa      	ldrb	r2, [r7, #3]
 80017e2:	4611      	mov	r1, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f003 fc59 	bl	800509c <USB_HC_Halt>
 80017ea:	e04e      	b.n	800188a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	78fa      	ldrb	r2, [r7, #3]
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f003 fbd4 	bl	8004fa2 <USB_ReadChInterrupts>
 80017fa:	4603      	mov	r3, r0
 80017fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001804:	d11b      	bne.n	800183e <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	015a      	lsls	r2, r3, #5
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4413      	add	r3, r2
 800180e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001812:	461a      	mov	r2, r3
 8001814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001818:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800181a:	78fa      	ldrb	r2, [r7, #3]
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	1a9b      	subs	r3, r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	440b      	add	r3, r1
 8001828:	334d      	adds	r3, #77	; 0x4d
 800182a:	2209      	movs	r2, #9
 800182c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	78fa      	ldrb	r2, [r7, #3]
 8001834:	4611      	mov	r1, r2
 8001836:	4618      	mov	r0, r3
 8001838:	f003 fc30 	bl	800509c <USB_HC_Halt>
 800183c:	e025      	b.n	800188a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	78fa      	ldrb	r2, [r7, #3]
 8001844:	4611      	mov	r1, r2
 8001846:	4618      	mov	r0, r3
 8001848:	f003 fbab 	bl	8004fa2 <USB_ReadChInterrupts>
 800184c:	4603      	mov	r3, r0
 800184e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001852:	2b80      	cmp	r3, #128	; 0x80
 8001854:	d119      	bne.n	800188a <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	015a      	lsls	r2, r3, #5
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	4413      	add	r3, r2
 800185e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001862:	461a      	mov	r2, r3
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001868:	78fa      	ldrb	r2, [r7, #3]
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	1a9b      	subs	r3, r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	440b      	add	r3, r1
 8001876:	334d      	adds	r3, #77	; 0x4d
 8001878:	2207      	movs	r2, #7
 800187a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	78fa      	ldrb	r2, [r7, #3]
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f003 fc09 	bl	800509c <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	78fa      	ldrb	r2, [r7, #3]
 8001890:	4611      	mov	r1, r2
 8001892:	4618      	mov	r0, r3
 8001894:	f003 fb85 	bl	8004fa2 <USB_ReadChInterrupts>
 8001898:	4603      	mov	r3, r0
 800189a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800189e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018a2:	d112      	bne.n	80018ca <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	78fa      	ldrb	r2, [r7, #3]
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f003 fbf5 	bl	800509c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80018b2:	78fb      	ldrb	r3, [r7, #3]
 80018b4:	015a      	lsls	r2, r3, #5
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	4413      	add	r3, r2
 80018ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018be:	461a      	mov	r2, r3
 80018c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018c4:	6093      	str	r3, [r2, #8]
 80018c6:	f000 bd75 	b.w	80023b4 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	78fa      	ldrb	r2, [r7, #3]
 80018d0:	4611      	mov	r1, r2
 80018d2:	4618      	mov	r0, r3
 80018d4:	f003 fb65 	bl	8004fa2 <USB_ReadChInterrupts>
 80018d8:	4603      	mov	r3, r0
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b01      	cmp	r3, #1
 80018e0:	f040 8128 	bne.w	8001b34 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	015a      	lsls	r2, r3, #5
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4413      	add	r3, r2
 80018ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018f0:	461a      	mov	r2, r3
 80018f2:	2320      	movs	r3, #32
 80018f4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80018f6:	78fa      	ldrb	r2, [r7, #3]
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	1a9b      	subs	r3, r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	331b      	adds	r3, #27
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d119      	bne.n	8001940 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800190c:	78fa      	ldrb	r2, [r7, #3]
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	1a9b      	subs	r3, r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	331b      	adds	r3, #27
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001920:	78fb      	ldrb	r3, [r7, #3]
 8001922:	015a      	lsls	r2, r3, #5
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	4413      	add	r3, r2
 8001928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	78fa      	ldrb	r2, [r7, #3]
 8001930:	0151      	lsls	r1, r2, #5
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	440a      	add	r2, r1
 8001936:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800193a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800193e:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	799b      	ldrb	r3, [r3, #6]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d01b      	beq.n	8001980 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001948:	78fa      	ldrb	r2, [r7, #3]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	011b      	lsls	r3, r3, #4
 8001950:	1a9b      	subs	r3, r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	3330      	adds	r3, #48	; 0x30
 8001958:	6819      	ldr	r1, [r3, #0]
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	015a      	lsls	r2, r3, #5
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	4413      	add	r3, r2
 8001962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	1ac9      	subs	r1, r1, r3
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	1a9b      	subs	r3, r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4403      	add	r3, r0
 800197c:	3338      	adds	r3, #56	; 0x38
 800197e:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001980:	78fa      	ldrb	r2, [r7, #3]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	334d      	adds	r3, #77	; 0x4d
 8001990:	2201      	movs	r2, #1
 8001992:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001994:	78fa      	ldrb	r2, [r7, #3]
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	1a9b      	subs	r3, r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	3344      	adds	r3, #68	; 0x44
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	015a      	lsls	r2, r3, #5
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	4413      	add	r3, r2
 80019b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019b4:	461a      	mov	r2, r3
 80019b6:	2301      	movs	r3, #1
 80019b8:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80019ba:	78fa      	ldrb	r2, [r7, #3]
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	1a9b      	subs	r3, r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	440b      	add	r3, r1
 80019c8:	3326      	adds	r3, #38	; 0x26
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00a      	beq.n	80019e6 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80019d0:	78fa      	ldrb	r2, [r7, #3]
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	011b      	lsls	r3, r3, #4
 80019d8:	1a9b      	subs	r3, r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	3326      	adds	r3, #38	; 0x26
 80019e0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d110      	bne.n	8001a08 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	78fa      	ldrb	r2, [r7, #3]
 80019ec:	4611      	mov	r1, r2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f003 fb54 	bl	800509c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	015a      	lsls	r2, r3, #5
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	4413      	add	r3, r2
 80019fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a00:	461a      	mov	r2, r3
 8001a02:	2310      	movs	r3, #16
 8001a04:	6093      	str	r3, [r2, #8]
 8001a06:	e03d      	b.n	8001a84 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001a08:	78fa      	ldrb	r2, [r7, #3]
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	011b      	lsls	r3, r3, #4
 8001a10:	1a9b      	subs	r3, r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	440b      	add	r3, r1
 8001a16:	3326      	adds	r3, #38	; 0x26
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d00a      	beq.n	8001a34 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001a1e:	78fa      	ldrb	r2, [r7, #3]
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	011b      	lsls	r3, r3, #4
 8001a26:	1a9b      	subs	r3, r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	3326      	adds	r3, #38	; 0x26
 8001a2e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d127      	bne.n	8001a84 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001a34:	78fb      	ldrb	r3, [r7, #3]
 8001a36:	015a      	lsls	r2, r3, #5
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	78fa      	ldrb	r2, [r7, #3]
 8001a44:	0151      	lsls	r1, r2, #5
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	440a      	add	r2, r1
 8001a4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a52:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001a54:	78fa      	ldrb	r2, [r7, #3]
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	1a9b      	subs	r3, r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	334c      	adds	r3, #76	; 0x4c
 8001a64:	2201      	movs	r2, #1
 8001a66:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001a68:	78fa      	ldrb	r2, [r7, #3]
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	1a9b      	subs	r3, r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	440b      	add	r3, r1
 8001a76:	334c      	adds	r3, #76	; 0x4c
 8001a78:	781a      	ldrb	r2, [r3, #0]
 8001a7a:	78fb      	ldrb	r3, [r7, #3]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f005 fd96 	bl	80075b0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	799b      	ldrb	r3, [r3, #6]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d13b      	bne.n	8001b04 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001a8c:	78fa      	ldrb	r2, [r7, #3]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	1a9b      	subs	r3, r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	3338      	adds	r3, #56	; 0x38
 8001a9c:	6819      	ldr	r1, [r3, #0]
 8001a9e:	78fa      	ldrb	r2, [r7, #3]
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	011b      	lsls	r3, r3, #4
 8001aa6:	1a9b      	subs	r3, r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4403      	add	r3, r0
 8001aac:	3328      	adds	r3, #40	; 0x28
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	440b      	add	r3, r1
 8001ab2:	1e59      	subs	r1, r3, #1
 8001ab4:	78fa      	ldrb	r2, [r7, #3]
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	1a9b      	subs	r3, r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4403      	add	r3, r0
 8001ac2:	3328      	adds	r3, #40	; 0x28
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 8470 	beq.w	80023b4 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001ad4:	78fa      	ldrb	r2, [r7, #3]
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	1a9b      	subs	r3, r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	333c      	adds	r3, #60	; 0x3c
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	78fa      	ldrb	r2, [r7, #3]
 8001ae8:	f083 0301 	eor.w	r3, r3, #1
 8001aec:	b2d8      	uxtb	r0, r3
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	011b      	lsls	r3, r3, #4
 8001af4:	1a9b      	subs	r3, r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	333c      	adds	r3, #60	; 0x3c
 8001afc:	4602      	mov	r2, r0
 8001afe:	701a      	strb	r2, [r3, #0]
 8001b00:	f000 bc58 	b.w	80023b4 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001b04:	78fa      	ldrb	r2, [r7, #3]
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	011b      	lsls	r3, r3, #4
 8001b0c:	1a9b      	subs	r3, r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	333c      	adds	r3, #60	; 0x3c
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	78fa      	ldrb	r2, [r7, #3]
 8001b18:	f083 0301 	eor.w	r3, r3, #1
 8001b1c:	b2d8      	uxtb	r0, r3
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	4613      	mov	r3, r2
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	1a9b      	subs	r3, r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	333c      	adds	r3, #60	; 0x3c
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	701a      	strb	r2, [r3, #0]
 8001b30:	f000 bc40 	b.w	80023b4 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	78fa      	ldrb	r2, [r7, #3]
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f003 fa30 	bl	8004fa2 <USB_ReadChInterrupts>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f003 0320 	and.w	r3, r3, #32
 8001b48:	2b20      	cmp	r3, #32
 8001b4a:	d131      	bne.n	8001bb0 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	015a      	lsls	r2, r3, #5
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4413      	add	r3, r2
 8001b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b58:	461a      	mov	r2, r3
 8001b5a:	2320      	movs	r3, #32
 8001b5c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8001b5e:	78fa      	ldrb	r2, [r7, #3]
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	1a9b      	subs	r3, r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	331a      	adds	r3, #26
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	f040 841f 	bne.w	80023b4 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8001b76:	78fa      	ldrb	r2, [r7, #3]
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	1a9b      	subs	r3, r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	440b      	add	r3, r1
 8001b84:	331b      	adds	r3, #27
 8001b86:	2201      	movs	r2, #1
 8001b88:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001b8a:	78fa      	ldrb	r2, [r7, #3]
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	1a9b      	subs	r3, r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	334d      	adds	r3, #77	; 0x4d
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	78fa      	ldrb	r2, [r7, #3]
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f003 fa78 	bl	800509c <USB_HC_Halt>
 8001bac:	f000 bc02 	b.w	80023b4 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	78fa      	ldrb	r2, [r7, #3]
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f003 f9f2 	bl	8004fa2 <USB_ReadChInterrupts>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	f040 8305 	bne.w	80021d4 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001bca:	78fb      	ldrb	r3, [r7, #3]
 8001bcc:	015a      	lsls	r2, r3, #5
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	2302      	movs	r3, #2
 8001bda:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001bdc:	78fa      	ldrb	r2, [r7, #3]
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	1a9b      	subs	r3, r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	334d      	adds	r3, #77	; 0x4d
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d114      	bne.n	8001c1c <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001bf2:	78fa      	ldrb	r2, [r7, #3]
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	1a9b      	subs	r3, r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	440b      	add	r3, r1
 8001c00:	334d      	adds	r3, #77	; 0x4d
 8001c02:	2202      	movs	r2, #2
 8001c04:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001c06:	78fa      	ldrb	r2, [r7, #3]
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	1a9b      	subs	r3, r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	334c      	adds	r3, #76	; 0x4c
 8001c16:	2201      	movs	r2, #1
 8001c18:	701a      	strb	r2, [r3, #0]
 8001c1a:	e2cc      	b.n	80021b6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001c1c:	78fa      	ldrb	r2, [r7, #3]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	011b      	lsls	r3, r3, #4
 8001c24:	1a9b      	subs	r3, r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	334d      	adds	r3, #77	; 0x4d
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b06      	cmp	r3, #6
 8001c30:	d114      	bne.n	8001c5c <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001c32:	78fa      	ldrb	r2, [r7, #3]
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	011b      	lsls	r3, r3, #4
 8001c3a:	1a9b      	subs	r3, r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	440b      	add	r3, r1
 8001c40:	334d      	adds	r3, #77	; 0x4d
 8001c42:	2202      	movs	r2, #2
 8001c44:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8001c46:	78fa      	ldrb	r2, [r7, #3]
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	1a9b      	subs	r3, r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	440b      	add	r3, r1
 8001c54:	334c      	adds	r3, #76	; 0x4c
 8001c56:	2205      	movs	r2, #5
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	e2ac      	b.n	80021b6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001c5c:	78fa      	ldrb	r2, [r7, #3]
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	011b      	lsls	r3, r3, #4
 8001c64:	1a9b      	subs	r3, r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	334d      	adds	r3, #77	; 0x4d
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b07      	cmp	r3, #7
 8001c70:	d00b      	beq.n	8001c8a <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001c72:	78fa      	ldrb	r2, [r7, #3]
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	4613      	mov	r3, r2
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	1a9b      	subs	r3, r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	440b      	add	r3, r1
 8001c80:	334d      	adds	r3, #77	; 0x4d
 8001c82:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001c84:	2b09      	cmp	r3, #9
 8001c86:	f040 80a6 	bne.w	8001dd6 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001c8a:	78fa      	ldrb	r2, [r7, #3]
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	011b      	lsls	r3, r3, #4
 8001c92:	1a9b      	subs	r3, r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	440b      	add	r3, r1
 8001c98:	334d      	adds	r3, #77	; 0x4d
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001c9e:	78fa      	ldrb	r2, [r7, #3]
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	011b      	lsls	r3, r3, #4
 8001ca6:	1a9b      	subs	r3, r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	3344      	adds	r3, #68	; 0x44
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	1c59      	adds	r1, r3, #1
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	1a9b      	subs	r3, r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4403      	add	r3, r0
 8001cbe:	3344      	adds	r3, #68	; 0x44
 8001cc0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001cc2:	78fa      	ldrb	r2, [r7, #3]
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	1a9b      	subs	r3, r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	440b      	add	r3, r1
 8001cd0:	3344      	adds	r3, #68	; 0x44
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d943      	bls.n	8001d60 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001cd8:	78fa      	ldrb	r2, [r7, #3]
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	1a9b      	subs	r3, r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	3344      	adds	r3, #68	; 0x44
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8001cec:	78fa      	ldrb	r2, [r7, #3]
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	1a9b      	subs	r3, r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	331a      	adds	r3, #26
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d123      	bne.n	8001d4a <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8001d02:	78fa      	ldrb	r2, [r7, #3]
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	1a9b      	subs	r3, r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	440b      	add	r3, r1
 8001d10:	331b      	adds	r3, #27
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8001d16:	78fa      	ldrb	r2, [r7, #3]
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	011b      	lsls	r3, r3, #4
 8001d1e:	1a9b      	subs	r3, r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	440b      	add	r3, r1
 8001d24:	331c      	adds	r3, #28
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	015a      	lsls	r2, r3, #5
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4413      	add	r3, r2
 8001d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	78fa      	ldrb	r2, [r7, #3]
 8001d3a:	0151      	lsls	r1, r2, #5
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	440a      	add	r2, r1
 8001d40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d48:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001d4a:	78fa      	ldrb	r2, [r7, #3]
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	1a9b      	subs	r3, r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	440b      	add	r3, r1
 8001d58:	334c      	adds	r3, #76	; 0x4c
 8001d5a:	2204      	movs	r2, #4
 8001d5c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001d5e:	e229      	b.n	80021b4 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001d60:	78fa      	ldrb	r2, [r7, #3]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	1a9b      	subs	r3, r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	334c      	adds	r3, #76	; 0x4c
 8001d70:	2202      	movs	r2, #2
 8001d72:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001d74:	78fa      	ldrb	r2, [r7, #3]
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	1a9b      	subs	r3, r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	3326      	adds	r3, #38	; 0x26
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00b      	beq.n	8001da2 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001d8a:	78fa      	ldrb	r2, [r7, #3]
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	011b      	lsls	r3, r3, #4
 8001d92:	1a9b      	subs	r3, r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	440b      	add	r3, r1
 8001d98:	3326      	adds	r3, #38	; 0x26
 8001d9a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	f040 8209 	bne.w	80021b4 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001da2:	78fb      	ldrb	r3, [r7, #3]
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001db8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001dc0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001dc2:	78fb      	ldrb	r3, [r7, #3]
 8001dc4:	015a      	lsls	r2, r3, #5
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4413      	add	r3, r2
 8001dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001dd4:	e1ee      	b.n	80021b4 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8001dd6:	78fa      	ldrb	r2, [r7, #3]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	1a9b      	subs	r3, r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	334d      	adds	r3, #77	; 0x4d
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b05      	cmp	r3, #5
 8001dea:	f040 80c8 	bne.w	8001f7e <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001dee:	78fa      	ldrb	r2, [r7, #3]
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	1a9b      	subs	r3, r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	334d      	adds	r3, #77	; 0x4d
 8001dfe:	2202      	movs	r2, #2
 8001e00:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001e02:	78fa      	ldrb	r2, [r7, #3]
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	011b      	lsls	r3, r3, #4
 8001e0a:	1a9b      	subs	r3, r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	331b      	adds	r3, #27
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	f040 81ce 	bne.w	80021b6 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001e1a:	78fa      	ldrb	r2, [r7, #3]
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	011b      	lsls	r3, r3, #4
 8001e22:	1a9b      	subs	r3, r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	440b      	add	r3, r1
 8001e28:	3326      	adds	r3, #38	; 0x26
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d16b      	bne.n	8001f08 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8001e30:	78fa      	ldrb	r2, [r7, #3]
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	011b      	lsls	r3, r3, #4
 8001e38:	1a9b      	subs	r3, r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	3348      	adds	r3, #72	; 0x48
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	1c59      	adds	r1, r3, #1
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	011b      	lsls	r3, r3, #4
 8001e4a:	1a9b      	subs	r3, r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4403      	add	r3, r0
 8001e50:	3348      	adds	r3, #72	; 0x48
 8001e52:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8001e54:	78fa      	ldrb	r2, [r7, #3]
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	1a9b      	subs	r3, r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	3348      	adds	r3, #72	; 0x48
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d943      	bls.n	8001ef2 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8001e6a:	78fa      	ldrb	r2, [r7, #3]
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	1a9b      	subs	r3, r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	440b      	add	r3, r1
 8001e78:	3348      	adds	r3, #72	; 0x48
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8001e7e:	78fa      	ldrb	r2, [r7, #3]
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	4613      	mov	r3, r2
 8001e84:	011b      	lsls	r3, r3, #4
 8001e86:	1a9b      	subs	r3, r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	331b      	adds	r3, #27
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8001e92:	78fa      	ldrb	r2, [r7, #3]
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	1a9b      	subs	r3, r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	3344      	adds	r3, #68	; 0x44
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d809      	bhi.n	8001ebc <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8001ea8:	78fa      	ldrb	r2, [r7, #3]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	1a9b      	subs	r3, r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	331c      	adds	r3, #28
 8001eb8:	2201      	movs	r2, #1
 8001eba:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	015a      	lsls	r2, r3, #5
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	78fa      	ldrb	r2, [r7, #3]
 8001ecc:	0151      	lsls	r1, r2, #5
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	440a      	add	r2, r1
 8001ed2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eda:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8001edc:	78fa      	ldrb	r2, [r7, #3]
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	011b      	lsls	r3, r3, #4
 8001ee4:	1a9b      	subs	r3, r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	334c      	adds	r3, #76	; 0x4c
 8001eec:	2204      	movs	r2, #4
 8001eee:	701a      	strb	r2, [r3, #0]
 8001ef0:	e014      	b.n	8001f1c <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001ef2:	78fa      	ldrb	r2, [r7, #3]
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	011b      	lsls	r3, r3, #4
 8001efa:	1a9b      	subs	r3, r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	440b      	add	r3, r1
 8001f00:	334c      	adds	r3, #76	; 0x4c
 8001f02:	2202      	movs	r2, #2
 8001f04:	701a      	strb	r2, [r3, #0]
 8001f06:	e009      	b.n	8001f1c <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001f08:	78fa      	ldrb	r2, [r7, #3]
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	1a9b      	subs	r3, r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	334c      	adds	r3, #76	; 0x4c
 8001f18:	2202      	movs	r2, #2
 8001f1a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001f1c:	78fa      	ldrb	r2, [r7, #3]
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	011b      	lsls	r3, r3, #4
 8001f24:	1a9b      	subs	r3, r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	3326      	adds	r3, #38	; 0x26
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00b      	beq.n	8001f4a <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001f32:	78fa      	ldrb	r2, [r7, #3]
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	011b      	lsls	r3, r3, #4
 8001f3a:	1a9b      	subs	r3, r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	440b      	add	r3, r1
 8001f40:	3326      	adds	r3, #38	; 0x26
 8001f42:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	f040 8136 	bne.w	80021b6 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	015a      	lsls	r2, r3, #5
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4413      	add	r3, r2
 8001f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f60:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f68:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	015a      	lsls	r2, r3, #5
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4413      	add	r3, r2
 8001f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f76:	461a      	mov	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6013      	str	r3, [r2, #0]
 8001f7c:	e11b      	b.n	80021b6 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8001f7e:	78fa      	ldrb	r2, [r7, #3]
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	1a9b      	subs	r3, r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	334d      	adds	r3, #77	; 0x4d
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	f040 8081 	bne.w	8002098 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001f96:	78fa      	ldrb	r2, [r7, #3]
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	011b      	lsls	r3, r3, #4
 8001f9e:	1a9b      	subs	r3, r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	334d      	adds	r3, #77	; 0x4d
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001faa:	78fa      	ldrb	r2, [r7, #3]
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	1a9b      	subs	r3, r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	331b      	adds	r3, #27
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	f040 80fa 	bne.w	80021b6 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001fc2:	78fa      	ldrb	r2, [r7, #3]
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	1a9b      	subs	r3, r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	334c      	adds	r3, #76	; 0x4c
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	015a      	lsls	r2, r3, #5
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4413      	add	r3, r2
 8001fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	78fa      	ldrb	r2, [r7, #3]
 8001fe6:	0151      	lsls	r1, r2, #5
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	440a      	add	r2, r1
 8001fec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff4:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	015a      	lsls	r2, r3, #5
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	78fa      	ldrb	r2, [r7, #3]
 8002006:	0151      	lsls	r1, r2, #5
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	440a      	add	r2, r1
 800200c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002014:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002016:	78fb      	ldrb	r3, [r7, #3]
 8002018:	015a      	lsls	r2, r3, #5
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	4413      	add	r3, r2
 800201e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	78fa      	ldrb	r2, [r7, #3]
 8002026:	0151      	lsls	r1, r2, #5
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	440a      	add	r2, r1
 800202c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002030:	f023 0320 	bic.w	r3, r3, #32
 8002034:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002036:	78fa      	ldrb	r2, [r7, #3]
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	011b      	lsls	r3, r3, #4
 800203e:	1a9b      	subs	r3, r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	440b      	add	r3, r1
 8002044:	3326      	adds	r3, #38	; 0x26
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00b      	beq.n	8002064 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800204c:	78fa      	ldrb	r2, [r7, #3]
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	4613      	mov	r3, r2
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	1a9b      	subs	r3, r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	3326      	adds	r3, #38	; 0x26
 800205c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800205e:	2b02      	cmp	r3, #2
 8002060:	f040 80a9 	bne.w	80021b6 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	015a      	lsls	r2, r3, #5
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4413      	add	r3, r2
 800206c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800207a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002082:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	015a      	lsls	r2, r3, #5
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	4413      	add	r3, r2
 800208c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002090:	461a      	mov	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	e08e      	b.n	80021b6 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002098:	78fa      	ldrb	r2, [r7, #3]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	1a9b      	subs	r3, r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	334d      	adds	r3, #77	; 0x4d
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d143      	bne.n	8002136 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80020ae:	78fa      	ldrb	r2, [r7, #3]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	011b      	lsls	r3, r3, #4
 80020b6:	1a9b      	subs	r3, r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	334d      	adds	r3, #77	; 0x4d
 80020be:	2202      	movs	r2, #2
 80020c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80020c2:	78fa      	ldrb	r2, [r7, #3]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	1a9b      	subs	r3, r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	334c      	adds	r3, #76	; 0x4c
 80020d2:	2202      	movs	r2, #2
 80020d4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020d6:	78fa      	ldrb	r2, [r7, #3]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	1a9b      	subs	r3, r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	3326      	adds	r3, #38	; 0x26
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00a      	beq.n	8002102 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80020ec:	78fa      	ldrb	r2, [r7, #3]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	3326      	adds	r3, #38	; 0x26
 80020fc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d159      	bne.n	80021b6 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002102:	78fb      	ldrb	r3, [r7, #3]
 8002104:	015a      	lsls	r2, r3, #5
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4413      	add	r3, r2
 800210a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002118:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002120:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	015a      	lsls	r2, r3, #5
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4413      	add	r3, r2
 800212a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212e:	461a      	mov	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	e03f      	b.n	80021b6 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002136:	78fa      	ldrb	r2, [r7, #3]
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	011b      	lsls	r3, r3, #4
 800213e:	1a9b      	subs	r3, r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	440b      	add	r3, r1
 8002144:	334d      	adds	r3, #77	; 0x4d
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b08      	cmp	r3, #8
 800214a:	d126      	bne.n	800219a <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800214c:	78fa      	ldrb	r2, [r7, #3]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	334d      	adds	r3, #77	; 0x4d
 800215c:	2202      	movs	r2, #2
 800215e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002160:	78fa      	ldrb	r2, [r7, #3]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	011b      	lsls	r3, r3, #4
 8002168:	1a9b      	subs	r3, r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	3344      	adds	r3, #68	; 0x44
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	1c59      	adds	r1, r3, #1
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	011b      	lsls	r3, r3, #4
 800217a:	1a9b      	subs	r3, r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4403      	add	r3, r0
 8002180:	3344      	adds	r3, #68	; 0x44
 8002182:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	1a9b      	subs	r3, r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	334c      	adds	r3, #76	; 0x4c
 8002194:	2204      	movs	r2, #4
 8002196:	701a      	strb	r2, [r3, #0]
 8002198:	e00d      	b.n	80021b6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800219a:	78fa      	ldrb	r2, [r7, #3]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	011b      	lsls	r3, r3, #4
 80021a2:	1a9b      	subs	r3, r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	334d      	adds	r3, #77	; 0x4d
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	f000 8100 	beq.w	80023b2 <HCD_HC_IN_IRQHandler+0xcca>
 80021b2:	e000      	b.n	80021b6 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80021b4:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80021b6:	78fa      	ldrb	r2, [r7, #3]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	1a9b      	subs	r3, r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	334c      	adds	r3, #76	; 0x4c
 80021c6:	781a      	ldrb	r2, [r3, #0]
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	4619      	mov	r1, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f005 f9ef 	bl	80075b0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80021d2:	e0ef      	b.n	80023b4 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	78fa      	ldrb	r2, [r7, #3]
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f002 fee0 	bl	8004fa2 <USB_ReadChInterrupts>
 80021e2:	4603      	mov	r3, r0
 80021e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e8:	2b40      	cmp	r3, #64	; 0x40
 80021ea:	d12f      	bne.n	800224c <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f8:	461a      	mov	r2, r3
 80021fa:	2340      	movs	r3, #64	; 0x40
 80021fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80021fe:	78fa      	ldrb	r2, [r7, #3]
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	1a9b      	subs	r3, r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	334d      	adds	r3, #77	; 0x4d
 800220e:	2205      	movs	r2, #5
 8002210:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002212:	78fa      	ldrb	r2, [r7, #3]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	1a9b      	subs	r3, r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	331a      	adds	r3, #26
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d109      	bne.n	800223c <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002228:	78fa      	ldrb	r2, [r7, #3]
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	1a9b      	subs	r3, r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	3344      	adds	r3, #68	; 0x44
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	78fa      	ldrb	r2, [r7, #3]
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f002 ff29 	bl	800509c <USB_HC_Halt>
 800224a:	e0b3      	b.n	80023b4 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	78fa      	ldrb	r2, [r7, #3]
 8002252:	4611      	mov	r1, r2
 8002254:	4618      	mov	r0, r3
 8002256:	f002 fea4 	bl	8004fa2 <USB_ReadChInterrupts>
 800225a:	4603      	mov	r3, r0
 800225c:	f003 0310 	and.w	r3, r3, #16
 8002260:	2b10      	cmp	r3, #16
 8002262:	f040 80a7 	bne.w	80023b4 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002266:	78fa      	ldrb	r2, [r7, #3]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	1a9b      	subs	r3, r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	3326      	adds	r3, #38	; 0x26
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b03      	cmp	r3, #3
 800227a:	d11b      	bne.n	80022b4 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	1a9b      	subs	r3, r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	3344      	adds	r3, #68	; 0x44
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002290:	78fa      	ldrb	r2, [r7, #3]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	1a9b      	subs	r3, r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	334d      	adds	r3, #77	; 0x4d
 80022a0:	2204      	movs	r2, #4
 80022a2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	78fa      	ldrb	r2, [r7, #3]
 80022aa:	4611      	mov	r1, r2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f002 fef5 	bl	800509c <USB_HC_Halt>
 80022b2:	e03f      	b.n	8002334 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022b4:	78fa      	ldrb	r2, [r7, #3]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	011b      	lsls	r3, r3, #4
 80022bc:	1a9b      	subs	r3, r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	3326      	adds	r3, #38	; 0x26
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00a      	beq.n	80022e0 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80022ca:	78fa      	ldrb	r2, [r7, #3]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	3326      	adds	r3, #38	; 0x26
 80022da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d129      	bne.n	8002334 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	3344      	adds	r3, #68	; 0x44
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	799b      	ldrb	r3, [r3, #6]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00a      	beq.n	8002312 <HCD_HC_IN_IRQHandler+0xc2a>
 80022fc:	78fa      	ldrb	r2, [r7, #3]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	331b      	adds	r3, #27
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d110      	bne.n	8002334 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002312:	78fa      	ldrb	r2, [r7, #3]
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	011b      	lsls	r3, r3, #4
 800231a:	1a9b      	subs	r3, r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	334d      	adds	r3, #77	; 0x4d
 8002322:	2204      	movs	r2, #4
 8002324:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	78fa      	ldrb	r2, [r7, #3]
 800232c:	4611      	mov	r1, r2
 800232e:	4618      	mov	r0, r3
 8002330:	f002 feb4 	bl	800509c <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	331b      	adds	r3, #27
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d129      	bne.n	800239e <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800234a:	78fa      	ldrb	r2, [r7, #3]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	1a9b      	subs	r3, r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	331b      	adds	r3, #27
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800235e:	78fb      	ldrb	r3, [r7, #3]
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4413      	add	r3, r2
 8002366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	78fa      	ldrb	r2, [r7, #3]
 800236e:	0151      	lsls	r1, r2, #5
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	440a      	add	r2, r1
 8002374:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800237c:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800237e:	78fb      	ldrb	r3, [r7, #3]
 8002380:	015a      	lsls	r2, r3, #5
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4413      	add	r3, r2
 8002386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	78fa      	ldrb	r2, [r7, #3]
 800238e:	0151      	lsls	r1, r2, #5
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	440a      	add	r2, r1
 8002394:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002398:	f043 0320 	orr.w	r3, r3, #32
 800239c:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	015a      	lsls	r2, r3, #5
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4413      	add	r3, r2
 80023a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023aa:	461a      	mov	r2, r3
 80023ac:	2310      	movs	r3, #16
 80023ae:	6093      	str	r3, [r2, #8]
 80023b0:	e000      	b.n	80023b4 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80023b2:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b086      	sub	sp, #24
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	460b      	mov	r3, r1
 80023c4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	78fa      	ldrb	r2, [r7, #3]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f002 fde2 	bl	8004fa2 <USB_ReadChInterrupts>
 80023de:	4603      	mov	r3, r0
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d11b      	bne.n	8002420 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80023e8:	78fb      	ldrb	r3, [r7, #3]
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f4:	461a      	mov	r2, r3
 80023f6:	2304      	movs	r3, #4
 80023f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80023fa:	78fa      	ldrb	r2, [r7, #3]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	334d      	adds	r3, #77	; 0x4d
 800240a:	2207      	movs	r2, #7
 800240c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	78fa      	ldrb	r2, [r7, #3]
 8002414:	4611      	mov	r1, r2
 8002416:	4618      	mov	r0, r3
 8002418:	f002 fe40 	bl	800509c <USB_HC_Halt>
 800241c:	f000 bc6f 	b.w	8002cfe <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f002 fdba 	bl	8004fa2 <USB_ReadChInterrupts>
 800242e:	4603      	mov	r3, r0
 8002430:	f003 0320 	and.w	r3, r3, #32
 8002434:	2b20      	cmp	r3, #32
 8002436:	f040 8082 	bne.w	800253e <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800243a:	78fb      	ldrb	r3, [r7, #3]
 800243c:	015a      	lsls	r2, r3, #5
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4413      	add	r3, r2
 8002442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002446:	461a      	mov	r2, r3
 8002448:	2320      	movs	r3, #32
 800244a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800244c:	78fa      	ldrb	r2, [r7, #3]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	1a9b      	subs	r3, r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	3319      	adds	r3, #25
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d124      	bne.n	80024ac <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002462:	78fa      	ldrb	r2, [r7, #3]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	1a9b      	subs	r3, r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	3319      	adds	r3, #25
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002476:	78fa      	ldrb	r2, [r7, #3]
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	1a9b      	subs	r3, r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	334c      	adds	r3, #76	; 0x4c
 8002486:	2202      	movs	r2, #2
 8002488:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800248a:	78fa      	ldrb	r2, [r7, #3]
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	1a9b      	subs	r3, r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	334d      	adds	r3, #77	; 0x4d
 800249a:	2203      	movs	r2, #3
 800249c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	78fa      	ldrb	r2, [r7, #3]
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f002 fdf8 	bl	800509c <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	331a      	adds	r3, #26
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	f040 841d 	bne.w	8002cfe <HCD_HC_OUT_IRQHandler+0x944>
 80024c4:	78fa      	ldrb	r2, [r7, #3]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	1a9b      	subs	r3, r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	331b      	adds	r3, #27
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f040 8411 	bne.w	8002cfe <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80024dc:	78fa      	ldrb	r2, [r7, #3]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	1a9b      	subs	r3, r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	3326      	adds	r3, #38	; 0x26
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d009      	beq.n	8002506 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80024f2:	78fa      	ldrb	r2, [r7, #3]
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	1a9b      	subs	r3, r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	440b      	add	r3, r1
 8002500:	331b      	adds	r3, #27
 8002502:	2201      	movs	r2, #1
 8002504:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002506:	78fa      	ldrb	r2, [r7, #3]
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	1a9b      	subs	r3, r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	440b      	add	r3, r1
 8002514:	334d      	adds	r3, #77	; 0x4d
 8002516:	2203      	movs	r2, #3
 8002518:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	78fa      	ldrb	r2, [r7, #3]
 8002520:	4611      	mov	r1, r2
 8002522:	4618      	mov	r0, r3
 8002524:	f002 fdba 	bl	800509c <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	3344      	adds	r3, #68	; 0x44
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	e3df      	b.n	8002cfe <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	78fa      	ldrb	r2, [r7, #3]
 8002544:	4611      	mov	r1, r2
 8002546:	4618      	mov	r0, r3
 8002548:	f002 fd2b 	bl	8004fa2 <USB_ReadChInterrupts>
 800254c:	4603      	mov	r3, r0
 800254e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002552:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002556:	d111      	bne.n	800257c <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4413      	add	r3, r2
 8002560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002564:	461a      	mov	r2, r3
 8002566:	f44f 7300 	mov.w	r3, #512	; 0x200
 800256a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	4611      	mov	r1, r2
 8002574:	4618      	mov	r0, r3
 8002576:	f002 fd91 	bl	800509c <USB_HC_Halt>
 800257a:	e3c0      	b.n	8002cfe <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	4611      	mov	r1, r2
 8002584:	4618      	mov	r0, r3
 8002586:	f002 fd0c 	bl	8004fa2 <USB_ReadChInterrupts>
 800258a:	4603      	mov	r3, r0
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b01      	cmp	r3, #1
 8002592:	d168      	bne.n	8002666 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	3344      	adds	r3, #68	; 0x44
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	78fa      	ldrb	r2, [r7, #3]
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f002 fcf6 	bl	8004fa2 <USB_ReadChInterrupts>
 80025b6:	4603      	mov	r3, r0
 80025b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025bc:	2b40      	cmp	r3, #64	; 0x40
 80025be:	d112      	bne.n	80025e6 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80025c0:	78fa      	ldrb	r2, [r7, #3]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	1a9b      	subs	r3, r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	3319      	adds	r3, #25
 80025d0:	2201      	movs	r2, #1
 80025d2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80025d4:	78fb      	ldrb	r3, [r7, #3]
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e0:	461a      	mov	r2, r3
 80025e2:	2340      	movs	r3, #64	; 0x40
 80025e4:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80025e6:	78fa      	ldrb	r2, [r7, #3]
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	1a9b      	subs	r3, r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	331b      	adds	r3, #27
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d019      	beq.n	8002630 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80025fc:	78fa      	ldrb	r2, [r7, #3]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	331b      	adds	r3, #27
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002610:	78fb      	ldrb	r3, [r7, #3]
 8002612:	015a      	lsls	r2, r3, #5
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4413      	add	r3, r2
 8002618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	78fa      	ldrb	r2, [r7, #3]
 8002620:	0151      	lsls	r1, r2, #5
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	440a      	add	r2, r1
 8002626:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800262a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800262e:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002630:	78fb      	ldrb	r3, [r7, #3]
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	4413      	add	r3, r2
 8002638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263c:	461a      	mov	r2, r3
 800263e:	2301      	movs	r3, #1
 8002640:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002642:	78fa      	ldrb	r2, [r7, #3]
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	1a9b      	subs	r3, r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	334d      	adds	r3, #77	; 0x4d
 8002652:	2201      	movs	r2, #1
 8002654:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	78fa      	ldrb	r2, [r7, #3]
 800265c:	4611      	mov	r1, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f002 fd1c 	bl	800509c <USB_HC_Halt>
 8002664:	e34b      	b.n	8002cfe <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	78fa      	ldrb	r2, [r7, #3]
 800266c:	4611      	mov	r1, r2
 800266e:	4618      	mov	r0, r3
 8002670:	f002 fc97 	bl	8004fa2 <USB_ReadChInterrupts>
 8002674:	4603      	mov	r3, r0
 8002676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267a:	2b40      	cmp	r3, #64	; 0x40
 800267c:	d139      	bne.n	80026f2 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800267e:	78fa      	ldrb	r2, [r7, #3]
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	1a9b      	subs	r3, r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	440b      	add	r3, r1
 800268c:	334d      	adds	r3, #77	; 0x4d
 800268e:	2205      	movs	r2, #5
 8002690:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002692:	78fa      	ldrb	r2, [r7, #3]
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	1a9b      	subs	r3, r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	440b      	add	r3, r1
 80026a0:	331a      	adds	r3, #26
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d109      	bne.n	80026bc <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80026a8:	78fa      	ldrb	r2, [r7, #3]
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	011b      	lsls	r3, r3, #4
 80026b0:	1a9b      	subs	r3, r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	3319      	adds	r3, #25
 80026b8:	2201      	movs	r2, #1
 80026ba:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80026bc:	78fa      	ldrb	r2, [r7, #3]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	1a9b      	subs	r3, r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	3344      	adds	r3, #68	; 0x44
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	78fa      	ldrb	r2, [r7, #3]
 80026d6:	4611      	mov	r1, r2
 80026d8:	4618      	mov	r0, r3
 80026da:	f002 fcdf 	bl	800509c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	015a      	lsls	r2, r3, #5
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ea:	461a      	mov	r2, r3
 80026ec:	2340      	movs	r3, #64	; 0x40
 80026ee:	6093      	str	r3, [r2, #8]
 80026f0:	e305      	b.n	8002cfe <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	78fa      	ldrb	r2, [r7, #3]
 80026f8:	4611      	mov	r1, r2
 80026fa:	4618      	mov	r0, r3
 80026fc:	f002 fc51 	bl	8004fa2 <USB_ReadChInterrupts>
 8002700:	4603      	mov	r3, r0
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b08      	cmp	r3, #8
 8002708:	d11a      	bne.n	8002740 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800270a:	78fb      	ldrb	r3, [r7, #3]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4413      	add	r3, r2
 8002712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002716:	461a      	mov	r2, r3
 8002718:	2308      	movs	r3, #8
 800271a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800271c:	78fa      	ldrb	r2, [r7, #3]
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	1a9b      	subs	r3, r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	334d      	adds	r3, #77	; 0x4d
 800272c:	2206      	movs	r2, #6
 800272e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	78fa      	ldrb	r2, [r7, #3]
 8002736:	4611      	mov	r1, r2
 8002738:	4618      	mov	r0, r3
 800273a:	f002 fcaf 	bl	800509c <USB_HC_Halt>
 800273e:	e2de      	b.n	8002cfe <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f002 fc2a 	bl	8004fa2 <USB_ReadChInterrupts>
 800274e:	4603      	mov	r3, r0
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	2b10      	cmp	r3, #16
 8002756:	d144      	bne.n	80027e2 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	3344      	adds	r3, #68	; 0x44
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800276c:	78fa      	ldrb	r2, [r7, #3]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	1a9b      	subs	r3, r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	334d      	adds	r3, #77	; 0x4d
 800277c:	2204      	movs	r2, #4
 800277e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002780:	78fa      	ldrb	r2, [r7, #3]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	3319      	adds	r3, #25
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d114      	bne.n	80027c0 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002796:	78fa      	ldrb	r2, [r7, #3]
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	011b      	lsls	r3, r3, #4
 800279e:	1a9b      	subs	r3, r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	3318      	adds	r3, #24
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d109      	bne.n	80027c0 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80027ac:	78fa      	ldrb	r2, [r7, #3]
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	3319      	adds	r3, #25
 80027bc:	2201      	movs	r2, #1
 80027be:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	78fa      	ldrb	r2, [r7, #3]
 80027c6:	4611      	mov	r1, r2
 80027c8:	4618      	mov	r0, r3
 80027ca:	f002 fc67 	bl	800509c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80027ce:	78fb      	ldrb	r3, [r7, #3]
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027da:	461a      	mov	r2, r3
 80027dc:	2310      	movs	r3, #16
 80027de:	6093      	str	r3, [r2, #8]
 80027e0:	e28d      	b.n	8002cfe <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	4611      	mov	r1, r2
 80027ea:	4618      	mov	r0, r3
 80027ec:	f002 fbd9 	bl	8004fa2 <USB_ReadChInterrupts>
 80027f0:	4603      	mov	r3, r0
 80027f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f6:	2b80      	cmp	r3, #128	; 0x80
 80027f8:	d169      	bne.n	80028ce <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	799b      	ldrb	r3, [r3, #6]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d111      	bne.n	8002826 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002802:	78fa      	ldrb	r2, [r7, #3]
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	334d      	adds	r3, #77	; 0x4d
 8002812:	2207      	movs	r2, #7
 8002814:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	4611      	mov	r1, r2
 800281e:	4618      	mov	r0, r3
 8002820:	f002 fc3c 	bl	800509c <USB_HC_Halt>
 8002824:	e049      	b.n	80028ba <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002826:	78fa      	ldrb	r2, [r7, #3]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	3344      	adds	r3, #68	; 0x44
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	1c59      	adds	r1, r3, #1
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	1a9b      	subs	r3, r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4403      	add	r3, r0
 8002846:	3344      	adds	r3, #68	; 0x44
 8002848:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800284a:	78fa      	ldrb	r2, [r7, #3]
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	1a9b      	subs	r3, r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	3344      	adds	r3, #68	; 0x44
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d922      	bls.n	80028a6 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002860:	78fa      	ldrb	r2, [r7, #3]
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	1a9b      	subs	r3, r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	3344      	adds	r3, #68	; 0x44
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	334c      	adds	r3, #76	; 0x4c
 8002884:	2204      	movs	r2, #4
 8002886:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002888:	78fa      	ldrb	r2, [r7, #3]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	334c      	adds	r3, #76	; 0x4c
 8002898:	781a      	ldrb	r2, [r3, #0]
 800289a:	78fb      	ldrb	r3, [r7, #3]
 800289c:	4619      	mov	r1, r3
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f004 fe86 	bl	80075b0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80028a4:	e009      	b.n	80028ba <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80028a6:	78fa      	ldrb	r2, [r7, #3]
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	1a9b      	subs	r3, r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	334c      	adds	r3, #76	; 0x4c
 80028b6:	2202      	movs	r2, #2
 80028b8:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80028ba:	78fb      	ldrb	r3, [r7, #3]
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c6:	461a      	mov	r2, r3
 80028c8:	2380      	movs	r3, #128	; 0x80
 80028ca:	6093      	str	r3, [r2, #8]
 80028cc:	e217      	b.n	8002cfe <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	78fa      	ldrb	r2, [r7, #3]
 80028d4:	4611      	mov	r1, r2
 80028d6:	4618      	mov	r0, r3
 80028d8:	f002 fb63 	bl	8004fa2 <USB_ReadChInterrupts>
 80028dc:	4603      	mov	r3, r0
 80028de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e6:	d11b      	bne.n	8002920 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80028e8:	78fa      	ldrb	r2, [r7, #3]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	334d      	adds	r3, #77	; 0x4d
 80028f8:	2209      	movs	r2, #9
 80028fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f002 fbc9 	bl	800509c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800290a:	78fb      	ldrb	r3, [r7, #3]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4413      	add	r3, r2
 8002912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002916:	461a      	mov	r2, r3
 8002918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800291c:	6093      	str	r3, [r2, #8]
 800291e:	e1ee      	b.n	8002cfe <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	78fa      	ldrb	r2, [r7, #3]
 8002926:	4611      	mov	r1, r2
 8002928:	4618      	mov	r0, r3
 800292a:	f002 fb3a 	bl	8004fa2 <USB_ReadChInterrupts>
 800292e:	4603      	mov	r3, r0
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b02      	cmp	r3, #2
 8002936:	f040 81df 	bne.w	8002cf8 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	4413      	add	r3, r2
 8002942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002946:	461a      	mov	r2, r3
 8002948:	2302      	movs	r3, #2
 800294a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800294c:	78fa      	ldrb	r2, [r7, #3]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	1a9b      	subs	r3, r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	334d      	adds	r3, #77	; 0x4d
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b01      	cmp	r3, #1
 8002960:	f040 8093 	bne.w	8002a8a <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	334d      	adds	r3, #77	; 0x4d
 8002974:	2202      	movs	r2, #2
 8002976:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	334c      	adds	r3, #76	; 0x4c
 8002988:	2201      	movs	r2, #1
 800298a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	3326      	adds	r3, #38	; 0x26
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d00b      	beq.n	80029ba <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80029a2:	78fa      	ldrb	r2, [r7, #3]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	1a9b      	subs	r3, r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	3326      	adds	r3, #38	; 0x26
 80029b2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	f040 8190 	bne.w	8002cda <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	799b      	ldrb	r3, [r3, #6]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d115      	bne.n	80029ee <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80029c2:	78fa      	ldrb	r2, [r7, #3]
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	1a9b      	subs	r3, r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	333d      	adds	r3, #61	; 0x3d
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	f083 0301 	eor.w	r3, r3, #1
 80029da:	b2d8      	uxtb	r0, r3
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	1a9b      	subs	r3, r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	333d      	adds	r3, #61	; 0x3d
 80029ea:	4602      	mov	r2, r0
 80029ec:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	799b      	ldrb	r3, [r3, #6]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	f040 8171 	bne.w	8002cda <HCD_HC_OUT_IRQHandler+0x920>
 80029f8:	78fa      	ldrb	r2, [r7, #3]
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	011b      	lsls	r3, r3, #4
 8002a00:	1a9b      	subs	r3, r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	3334      	adds	r3, #52	; 0x34
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 8165 	beq.w	8002cda <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002a10:	78fa      	ldrb	r2, [r7, #3]
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	1a9b      	subs	r3, r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	3334      	adds	r3, #52	; 0x34
 8002a20:	6819      	ldr	r1, [r3, #0]
 8002a22:	78fa      	ldrb	r2, [r7, #3]
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	1a9b      	subs	r3, r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4403      	add	r3, r0
 8002a30:	3328      	adds	r3, #40	; 0x28
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	440b      	add	r3, r1
 8002a36:	1e59      	subs	r1, r3, #1
 8002a38:	78fa      	ldrb	r2, [r7, #3]
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4403      	add	r3, r0
 8002a46:	3328      	adds	r3, #40	; 0x28
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a4e:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 813f 	beq.w	8002cda <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002a5c:	78fa      	ldrb	r2, [r7, #3]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	1a9b      	subs	r3, r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	333d      	adds	r3, #61	; 0x3d
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	78fa      	ldrb	r2, [r7, #3]
 8002a70:	f083 0301 	eor.w	r3, r3, #1
 8002a74:	b2d8      	uxtb	r0, r3
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	333d      	adds	r3, #61	; 0x3d
 8002a84:	4602      	mov	r2, r0
 8002a86:	701a      	strb	r2, [r3, #0]
 8002a88:	e127      	b.n	8002cda <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002a8a:	78fa      	ldrb	r2, [r7, #3]
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	1a9b      	subs	r3, r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	334d      	adds	r3, #77	; 0x4d
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d120      	bne.n	8002ae2 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002aa0:	78fa      	ldrb	r2, [r7, #3]
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	334d      	adds	r3, #77	; 0x4d
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002ab4:	78fa      	ldrb	r2, [r7, #3]
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	1a9b      	subs	r3, r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	331b      	adds	r3, #27
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	f040 8107 	bne.w	8002cda <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002acc:	78fa      	ldrb	r2, [r7, #3]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	334c      	adds	r3, #76	; 0x4c
 8002adc:	2202      	movs	r2, #2
 8002ade:	701a      	strb	r2, [r3, #0]
 8002ae0:	e0fb      	b.n	8002cda <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002ae2:	78fa      	ldrb	r2, [r7, #3]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	334d      	adds	r3, #77	; 0x4d
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d13a      	bne.n	8002b6e <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002af8:	78fa      	ldrb	r2, [r7, #3]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	1a9b      	subs	r3, r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	334d      	adds	r3, #77	; 0x4d
 8002b08:	2202      	movs	r2, #2
 8002b0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b0c:	78fa      	ldrb	r2, [r7, #3]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	1a9b      	subs	r3, r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	334c      	adds	r3, #76	; 0x4c
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002b20:	78fa      	ldrb	r2, [r7, #3]
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	1a9b      	subs	r3, r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	331b      	adds	r3, #27
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	f040 80d1 	bne.w	8002cda <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8002b38:	78fa      	ldrb	r2, [r7, #3]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	331b      	adds	r3, #27
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	78fa      	ldrb	r2, [r7, #3]
 8002b5c:	0151      	lsls	r1, r2, #5
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	440a      	add	r2, r1
 8002b62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b6a:	6053      	str	r3, [r2, #4]
 8002b6c:	e0b5      	b.n	8002cda <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	1a9b      	subs	r3, r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	334d      	adds	r3, #77	; 0x4d
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b05      	cmp	r3, #5
 8002b82:	d114      	bne.n	8002bae <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b84:	78fa      	ldrb	r2, [r7, #3]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	1a9b      	subs	r3, r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	334d      	adds	r3, #77	; 0x4d
 8002b94:	2202      	movs	r2, #2
 8002b96:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002b98:	78fa      	ldrb	r2, [r7, #3]
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	1a9b      	subs	r3, r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	334c      	adds	r3, #76	; 0x4c
 8002ba8:	2202      	movs	r2, #2
 8002baa:	701a      	strb	r2, [r3, #0]
 8002bac:	e095      	b.n	8002cda <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002bae:	78fa      	ldrb	r2, [r7, #3]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	1a9b      	subs	r3, r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	334d      	adds	r3, #77	; 0x4d
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b06      	cmp	r3, #6
 8002bc2:	d114      	bne.n	8002bee <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002bc4:	78fa      	ldrb	r2, [r7, #3]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	334d      	adds	r3, #77	; 0x4d
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	334c      	adds	r3, #76	; 0x4c
 8002be8:	2205      	movs	r2, #5
 8002bea:	701a      	strb	r2, [r3, #0]
 8002bec:	e075      	b.n	8002cda <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002bee:	78fa      	ldrb	r2, [r7, #3]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	1a9b      	subs	r3, r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	334d      	adds	r3, #77	; 0x4d
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b07      	cmp	r3, #7
 8002c02:	d00a      	beq.n	8002c1a <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002c04:	78fa      	ldrb	r2, [r7, #3]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	1a9b      	subs	r3, r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	334d      	adds	r3, #77	; 0x4d
 8002c14:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002c16:	2b09      	cmp	r3, #9
 8002c18:	d170      	bne.n	8002cfc <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c1a:	78fa      	ldrb	r2, [r7, #3]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	1a9b      	subs	r3, r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	334d      	adds	r3, #77	; 0x4d
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002c2e:	78fa      	ldrb	r2, [r7, #3]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	1a9b      	subs	r3, r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	3344      	adds	r3, #68	; 0x44
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	1c59      	adds	r1, r3, #1
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4403      	add	r3, r0
 8002c4e:	3344      	adds	r3, #68	; 0x44
 8002c50:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002c52:	78fa      	ldrb	r2, [r7, #3]
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	3344      	adds	r3, #68	; 0x44
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d914      	bls.n	8002c92 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002c68:	78fa      	ldrb	r2, [r7, #3]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	3344      	adds	r3, #68	; 0x44
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002c7c:	78fa      	ldrb	r2, [r7, #3]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	334c      	adds	r3, #76	; 0x4c
 8002c8c:	2204      	movs	r2, #4
 8002c8e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002c90:	e022      	b.n	8002cd8 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c92:	78fa      	ldrb	r2, [r7, #3]
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	1a9b      	subs	r3, r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	334c      	adds	r3, #76	; 0x4c
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002ca6:	78fb      	ldrb	r3, [r7, #3]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cbc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cc4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	015a      	lsls	r2, r3, #5
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002cd8:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002cda:	78fa      	ldrb	r2, [r7, #3]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	1a9b      	subs	r3, r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	334c      	adds	r3, #76	; 0x4c
 8002cea:	781a      	ldrb	r2, [r3, #0]
 8002cec:	78fb      	ldrb	r3, [r7, #3]
 8002cee:	4619      	mov	r1, r3
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f004 fc5d 	bl	80075b0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002cf6:	e002      	b.n	8002cfe <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8002cf8:	bf00      	nop
 8002cfa:	e000      	b.n	8002cfe <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8002cfc:	bf00      	nop
  }
}
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08a      	sub	sp, #40	; 0x28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	0c5b      	lsrs	r3, r3, #17
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	091b      	lsrs	r3, r3, #4
 8002d34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d38:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d004      	beq.n	8002d4a <HCD_RXQLVL_IRQHandler+0x46>
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	2b05      	cmp	r3, #5
 8002d44:	f000 80b6 	beq.w	8002eb4 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002d48:	e0b7      	b.n	8002eba <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 80b3 	beq.w	8002eb8 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4613      	mov	r3, r2
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	1a9b      	subs	r3, r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	440b      	add	r3, r1
 8002d60:	332c      	adds	r3, #44	; 0x2c
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 80a7 	beq.w	8002eb8 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	3338      	adds	r3, #56	; 0x38
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	18d1      	adds	r1, r2, r3
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4613      	mov	r3, r2
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4403      	add	r3, r0
 8002d8e:	3334      	adds	r3, #52	; 0x34
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4299      	cmp	r1, r3
 8002d94:	f200 8083 	bhi.w	8002e9e <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6818      	ldr	r0, [r3, #0]
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4613      	mov	r3, r2
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	1a9b      	subs	r3, r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	332c      	adds	r3, #44	; 0x2c
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	b292      	uxth	r2, r2
 8002db2:	4619      	mov	r1, r3
 8002db4:	f002 f88a 	bl	8004ecc <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	1a9b      	subs	r3, r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	332c      	adds	r3, #44	; 0x2c
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	18d1      	adds	r1, r2, r3
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	1a9b      	subs	r3, r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4403      	add	r3, r0
 8002ddc:	332c      	adds	r3, #44	; 0x2c
 8002dde:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4613      	mov	r3, r2
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	3338      	adds	r3, #56	; 0x38
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	18d1      	adds	r1, r2, r3
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	1a9b      	subs	r3, r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4403      	add	r3, r0
 8002e04:	3338      	adds	r3, #56	; 0x38
 8002e06:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	0cdb      	lsrs	r3, r3, #19
 8002e18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e1c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4613      	mov	r3, r2
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	1a9b      	subs	r3, r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3328      	adds	r3, #40	; 0x28
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d13f      	bne.n	8002eb8 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d03c      	beq.n	8002eb8 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e54:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e5c:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4613      	mov	r3, r2
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	1a9b      	subs	r3, r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	333c      	adds	r3, #60	; 0x3c
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	f083 0301 	eor.w	r3, r3, #1
 8002e86:	b2d8      	uxtb	r0, r3
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	333c      	adds	r3, #60	; 0x3c
 8002e98:	4602      	mov	r2, r0
 8002e9a:	701a      	strb	r2, [r3, #0]
      break;
 8002e9c:	e00c      	b.n	8002eb8 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	334c      	adds	r3, #76	; 0x4c
 8002eae:	2204      	movs	r2, #4
 8002eb0:	701a      	strb	r2, [r3, #0]
      break;
 8002eb2:	e001      	b.n	8002eb8 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8002eb4:	bf00      	nop
 8002eb6:	e000      	b.n	8002eba <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8002eb8:	bf00      	nop
  }
}
 8002eba:	bf00      	nop
 8002ebc:	3728      	adds	r7, #40	; 0x28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b086      	sub	sp, #24
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002eee:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d10b      	bne.n	8002f12 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d102      	bne.n	8002f0a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f004 fb37 	bl	8007578 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	f043 0302 	orr.w	r3, r3, #2
 8002f10:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d132      	bne.n	8002f82 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f043 0308 	orr.w	r3, r3, #8
 8002f22:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d126      	bne.n	8002f7c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	7a5b      	ldrb	r3, [r3, #9]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d113      	bne.n	8002f5e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f40:	d106      	bne.n	8002f50 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2102      	movs	r1, #2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f002 f859 	bl	8005000 <USB_InitFSLSPClkSel>
 8002f4e:	e011      	b.n	8002f74 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2101      	movs	r1, #1
 8002f56:	4618      	mov	r0, r3
 8002f58:	f002 f852 	bl	8005000 <USB_InitFSLSPClkSel>
 8002f5c:	e00a      	b.n	8002f74 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	79db      	ldrb	r3, [r3, #7]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d106      	bne.n	8002f74 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002f72:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f004 fb2d 	bl	80075d4 <HAL_HCD_PortEnabled_Callback>
 8002f7a:	e002      	b.n	8002f82 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f004 fb37 	bl	80075f0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f003 0320 	and.w	r3, r3, #32
 8002f88:	2b20      	cmp	r3, #32
 8002f8a:	d103      	bne.n	8002f94 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f043 0320 	orr.w	r3, r3, #32
 8002f92:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	6013      	str	r3, [r2, #0]
}
 8002fa0:	bf00      	nop
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e12b      	b.n	8003212 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7fd fd5e 	bl	8000a90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2224      	movs	r2, #36	; 0x24
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ffa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800300a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800300c:	f001 fa20 	bl	8004450 <HAL_RCC_GetPCLK1Freq>
 8003010:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	4a81      	ldr	r2, [pc, #516]	; (800321c <HAL_I2C_Init+0x274>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d807      	bhi.n	800302c <HAL_I2C_Init+0x84>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4a80      	ldr	r2, [pc, #512]	; (8003220 <HAL_I2C_Init+0x278>)
 8003020:	4293      	cmp	r3, r2
 8003022:	bf94      	ite	ls
 8003024:	2301      	movls	r3, #1
 8003026:	2300      	movhi	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	e006      	b.n	800303a <HAL_I2C_Init+0x92>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4a7d      	ldr	r2, [pc, #500]	; (8003224 <HAL_I2C_Init+0x27c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	bf94      	ite	ls
 8003034:	2301      	movls	r3, #1
 8003036:	2300      	movhi	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e0e7      	b.n	8003212 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4a78      	ldr	r2, [pc, #480]	; (8003228 <HAL_I2C_Init+0x280>)
 8003046:	fba2 2303 	umull	r2, r3, r2, r3
 800304a:	0c9b      	lsrs	r3, r3, #18
 800304c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	430a      	orrs	r2, r1
 8003060:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	4a6a      	ldr	r2, [pc, #424]	; (800321c <HAL_I2C_Init+0x274>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d802      	bhi.n	800307c <HAL_I2C_Init+0xd4>
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	3301      	adds	r3, #1
 800307a:	e009      	b.n	8003090 <HAL_I2C_Init+0xe8>
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003082:	fb02 f303 	mul.w	r3, r2, r3
 8003086:	4a69      	ldr	r2, [pc, #420]	; (800322c <HAL_I2C_Init+0x284>)
 8003088:	fba2 2303 	umull	r2, r3, r2, r3
 800308c:	099b      	lsrs	r3, r3, #6
 800308e:	3301      	adds	r3, #1
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6812      	ldr	r2, [r2, #0]
 8003094:	430b      	orrs	r3, r1
 8003096:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	495c      	ldr	r1, [pc, #368]	; (800321c <HAL_I2C_Init+0x274>)
 80030ac:	428b      	cmp	r3, r1
 80030ae:	d819      	bhi.n	80030e4 <HAL_I2C_Init+0x13c>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1e59      	subs	r1, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80030be:	1c59      	adds	r1, r3, #1
 80030c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030c4:	400b      	ands	r3, r1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <HAL_I2C_Init+0x138>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	1e59      	subs	r1, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030d8:	3301      	adds	r3, #1
 80030da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030de:	e051      	b.n	8003184 <HAL_I2C_Init+0x1dc>
 80030e0:	2304      	movs	r3, #4
 80030e2:	e04f      	b.n	8003184 <HAL_I2C_Init+0x1dc>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d111      	bne.n	8003110 <HAL_I2C_Init+0x168>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	1e58      	subs	r0, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6859      	ldr	r1, [r3, #4]
 80030f4:	460b      	mov	r3, r1
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	440b      	add	r3, r1
 80030fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80030fe:	3301      	adds	r3, #1
 8003100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003104:	2b00      	cmp	r3, #0
 8003106:	bf0c      	ite	eq
 8003108:	2301      	moveq	r3, #1
 800310a:	2300      	movne	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	e012      	b.n	8003136 <HAL_I2C_Init+0x18e>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	1e58      	subs	r0, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6859      	ldr	r1, [r3, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	0099      	lsls	r1, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	fbb0 f3f3 	udiv	r3, r0, r3
 8003126:	3301      	adds	r3, #1
 8003128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2300      	movne	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_I2C_Init+0x196>
 800313a:	2301      	movs	r3, #1
 800313c:	e022      	b.n	8003184 <HAL_I2C_Init+0x1dc>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10e      	bne.n	8003164 <HAL_I2C_Init+0x1bc>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1e58      	subs	r0, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6859      	ldr	r1, [r3, #4]
 800314e:	460b      	mov	r3, r1
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	440b      	add	r3, r1
 8003154:	fbb0 f3f3 	udiv	r3, r0, r3
 8003158:	3301      	adds	r3, #1
 800315a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800315e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003162:	e00f      	b.n	8003184 <HAL_I2C_Init+0x1dc>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1e58      	subs	r0, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6859      	ldr	r1, [r3, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	0099      	lsls	r1, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	fbb0 f3f3 	udiv	r3, r0, r3
 800317a:	3301      	adds	r3, #1
 800317c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003180:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	6809      	ldr	r1, [r1, #0]
 8003188:	4313      	orrs	r3, r2
 800318a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69da      	ldr	r2, [r3, #28]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6911      	ldr	r1, [r2, #16]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68d2      	ldr	r2, [r2, #12]
 80031be:	4311      	orrs	r1, r2
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	430b      	orrs	r3, r1
 80031c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695a      	ldr	r2, [r3, #20]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	000186a0 	.word	0x000186a0
 8003220:	001e847f 	.word	0x001e847f
 8003224:	003d08ff 	.word	0x003d08ff
 8003228:	431bde83 	.word	0x431bde83
 800322c:	10624dd3 	.word	0x10624dd3

08003230 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e128      	b.n	8003494 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d109      	bne.n	8003262 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a90      	ldr	r2, [pc, #576]	; (800349c <HAL_I2S_Init+0x26c>)
 800325a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7fd fc5f 	bl	8000b20 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2202      	movs	r2, #2
 8003266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6812      	ldr	r2, [r2, #0]
 8003274:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003278:	f023 030f 	bic.w	r3, r3, #15
 800327c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2202      	movs	r2, #2
 8003284:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d060      	beq.n	8003350 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d102      	bne.n	800329c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003296:	2310      	movs	r3, #16
 8003298:	617b      	str	r3, [r7, #20]
 800329a:	e001      	b.n	80032a0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800329c:	2320      	movs	r3, #32
 800329e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2b20      	cmp	r3, #32
 80032a6:	d802      	bhi.n	80032ae <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80032ae:	2001      	movs	r0, #1
 80032b0:	f001 fa0a 	bl	80046c8 <HAL_RCCEx_GetPeriphCLKFreq>
 80032b4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032be:	d125      	bne.n	800330c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d010      	beq.n	80032ea <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	461a      	mov	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e4:	3305      	adds	r3, #5
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	e01f      	b.n	800332a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	461a      	mov	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	fbb2 f3f3 	udiv	r3, r2, r3
 8003306:	3305      	adds	r3, #5
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	e00e      	b.n	800332a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	fbb2 f2f3 	udiv	r2, r2, r3
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	461a      	mov	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	fbb2 f3f3 	udiv	r3, r2, r3
 8003326:	3305      	adds	r3, #5
 8003328:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	4a5c      	ldr	r2, [pc, #368]	; (80034a0 <HAL_I2S_Init+0x270>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	08db      	lsrs	r3, r3, #3
 8003334:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	085b      	lsrs	r3, r3, #1
 8003346:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	021b      	lsls	r3, r3, #8
 800334c:	61bb      	str	r3, [r7, #24]
 800334e:	e003      	b.n	8003358 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003350:	2302      	movs	r3, #2
 8003352:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d902      	bls.n	8003364 <HAL_I2S_Init+0x134>
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	2bff      	cmp	r3, #255	; 0xff
 8003362:	d907      	bls.n	8003374 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003368:	f043 0210 	orr.w	r2, r3, #16
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e08f      	b.n	8003494 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	ea42 0103 	orr.w	r1, r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69fa      	ldr	r2, [r7, #28]
 8003384:	430a      	orrs	r2, r1
 8003386:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003392:	f023 030f 	bic.w	r3, r3, #15
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6851      	ldr	r1, [r2, #4]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6892      	ldr	r2, [r2, #8]
 800339e:	4311      	orrs	r1, r2
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	68d2      	ldr	r2, [r2, #12]
 80033a4:	4311      	orrs	r1, r2
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6992      	ldr	r2, [r2, #24]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033b6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d161      	bne.n	8003484 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a38      	ldr	r2, [pc, #224]	; (80034a4 <HAL_I2S_Init+0x274>)
 80033c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a37      	ldr	r2, [pc, #220]	; (80034a8 <HAL_I2S_Init+0x278>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d101      	bne.n	80033d4 <HAL_I2S_Init+0x1a4>
 80033d0:	4b36      	ldr	r3, [pc, #216]	; (80034ac <HAL_I2S_Init+0x27c>)
 80033d2:	e001      	b.n	80033d8 <HAL_I2S_Init+0x1a8>
 80033d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6812      	ldr	r2, [r2, #0]
 80033de:	4932      	ldr	r1, [pc, #200]	; (80034a8 <HAL_I2S_Init+0x278>)
 80033e0:	428a      	cmp	r2, r1
 80033e2:	d101      	bne.n	80033e8 <HAL_I2S_Init+0x1b8>
 80033e4:	4a31      	ldr	r2, [pc, #196]	; (80034ac <HAL_I2S_Init+0x27c>)
 80033e6:	e001      	b.n	80033ec <HAL_I2S_Init+0x1bc>
 80033e8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80033ec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033f0:	f023 030f 	bic.w	r3, r3, #15
 80033f4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a2b      	ldr	r2, [pc, #172]	; (80034a8 <HAL_I2S_Init+0x278>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d101      	bne.n	8003404 <HAL_I2S_Init+0x1d4>
 8003400:	4b2a      	ldr	r3, [pc, #168]	; (80034ac <HAL_I2S_Init+0x27c>)
 8003402:	e001      	b.n	8003408 <HAL_I2S_Init+0x1d8>
 8003404:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003408:	2202      	movs	r2, #2
 800340a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a25      	ldr	r2, [pc, #148]	; (80034a8 <HAL_I2S_Init+0x278>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d101      	bne.n	800341a <HAL_I2S_Init+0x1ea>
 8003416:	4b25      	ldr	r3, [pc, #148]	; (80034ac <HAL_I2S_Init+0x27c>)
 8003418:	e001      	b.n	800341e <HAL_I2S_Init+0x1ee>
 800341a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800342a:	d003      	beq.n	8003434 <HAL_I2S_Init+0x204>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d103      	bne.n	800343c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003434:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	e001      	b.n	8003440 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800343c:	2300      	movs	r3, #0
 800343e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800344a:	4313      	orrs	r3, r2
 800344c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003454:	4313      	orrs	r3, r2
 8003456:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800345e:	4313      	orrs	r3, r2
 8003460:	b29a      	uxth	r2, r3
 8003462:	897b      	ldrh	r3, [r7, #10]
 8003464:	4313      	orrs	r3, r2
 8003466:	b29b      	uxth	r3, r3
 8003468:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800346c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a0d      	ldr	r2, [pc, #52]	; (80034a8 <HAL_I2S_Init+0x278>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d101      	bne.n	800347c <HAL_I2S_Init+0x24c>
 8003478:	4b0c      	ldr	r3, [pc, #48]	; (80034ac <HAL_I2S_Init+0x27c>)
 800347a:	e001      	b.n	8003480 <HAL_I2S_Init+0x250>
 800347c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003480:	897a      	ldrh	r2, [r7, #10]
 8003482:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3720      	adds	r7, #32
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	080035a7 	.word	0x080035a7
 80034a0:	cccccccd 	.word	0xcccccccd
 80034a4:	080036bd 	.word	0x080036bd
 80034a8:	40003800 	.word	0x40003800
 80034ac:	40003400 	.word	0x40003400

080034b0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	881a      	ldrh	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	1c9a      	adds	r2, r3, #2
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350e:	b29b      	uxth	r3, r3
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351c:	b29b      	uxth	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10e      	bne.n	8003540 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003530:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff ffb8 	bl	80034b0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003540:	bf00      	nop
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355a:	b292      	uxth	r2, r2
 800355c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003562:	1c9a      	adds	r2, r3, #2
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800356c:	b29b      	uxth	r3, r3
 800356e:	3b01      	subs	r3, #1
 8003570:	b29a      	uxth	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800357a:	b29b      	uxth	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10e      	bne.n	800359e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800358e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7ff ff93 	bl	80034c4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b086      	sub	sp, #24
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d13a      	bne.n	8003638 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d109      	bne.n	80035e0 <I2S_IRQHandler+0x3a>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d6:	2b40      	cmp	r3, #64	; 0x40
 80035d8:	d102      	bne.n	80035e0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff ffb4 	bl	8003548 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e6:	2b40      	cmp	r3, #64	; 0x40
 80035e8:	d126      	bne.n	8003638 <I2S_IRQHandler+0x92>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 0320 	and.w	r3, r3, #32
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d11f      	bne.n	8003638 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003606:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003608:	2300      	movs	r3, #0
 800360a:	613b      	str	r3, [r7, #16]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	613b      	str	r3, [r7, #16]
 800361c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362a:	f043 0202 	orr.w	r2, r3, #2
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7ff ff50 	bl	80034d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b03      	cmp	r3, #3
 8003642:	d136      	bne.n	80036b2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b02      	cmp	r3, #2
 800364c:	d109      	bne.n	8003662 <I2S_IRQHandler+0xbc>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003658:	2b80      	cmp	r3, #128	; 0x80
 800365a:	d102      	bne.n	8003662 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7ff ff45 	bl	80034ec <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f003 0308 	and.w	r3, r3, #8
 8003668:	2b08      	cmp	r3, #8
 800366a:	d122      	bne.n	80036b2 <I2S_IRQHandler+0x10c>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	2b20      	cmp	r3, #32
 8003678:	d11b      	bne.n	80036b2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003688:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a4:	f043 0204 	orr.w	r2, r3, #4
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff ff13 	bl	80034d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036b2:	bf00      	nop
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a92      	ldr	r2, [pc, #584]	; (800391c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d101      	bne.n	80036da <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80036d6:	4b92      	ldr	r3, [pc, #584]	; (8003920 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036d8:	e001      	b.n	80036de <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80036da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a8b      	ldr	r2, [pc, #556]	; (800391c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d101      	bne.n	80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80036f4:	4b8a      	ldr	r3, [pc, #552]	; (8003920 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036f6:	e001      	b.n	80036fc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80036f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003708:	d004      	beq.n	8003714 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	f040 8099 	bne.w	8003846 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b02      	cmp	r3, #2
 800371c:	d107      	bne.n	800372e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f925 	bl	8003978 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b01      	cmp	r3, #1
 8003736:	d107      	bne.n	8003748 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f9c8 	bl	8003ad8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374e:	2b40      	cmp	r3, #64	; 0x40
 8003750:	d13a      	bne.n	80037c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b00      	cmp	r3, #0
 800375a:	d035      	beq.n	80037c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a6e      	ldr	r2, [pc, #440]	; (800391c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d101      	bne.n	800376a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003766:	4b6e      	ldr	r3, [pc, #440]	; (8003920 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003768:	e001      	b.n	800376e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800376a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4969      	ldr	r1, [pc, #420]	; (800391c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003776:	428b      	cmp	r3, r1
 8003778:	d101      	bne.n	800377e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800377a:	4b69      	ldr	r3, [pc, #420]	; (8003920 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800377c:	e001      	b.n	8003782 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800377e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003782:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003786:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003796:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003798:	2300      	movs	r3, #0
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	f043 0202 	orr.w	r2, r3, #2
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff fe88 	bl	80034d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	f040 80c3 	bne.w	800395a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f003 0320 	and.w	r3, r3, #32
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 80bd 	beq.w	800395a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037ee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a49      	ldr	r2, [pc, #292]	; (800391c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d101      	bne.n	80037fe <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80037fa:	4b49      	ldr	r3, [pc, #292]	; (8003920 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037fc:	e001      	b.n	8003802 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80037fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4944      	ldr	r1, [pc, #272]	; (800391c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800380a:	428b      	cmp	r3, r1
 800380c:	d101      	bne.n	8003812 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800380e:	4b44      	ldr	r3, [pc, #272]	; (8003920 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003810:	e001      	b.n	8003816 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003812:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003816:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800381a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800381c:	2300      	movs	r3, #0
 800381e:	60bb      	str	r3, [r7, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	60bb      	str	r3, [r7, #8]
 8003828:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	f043 0204 	orr.w	r2, r3, #4
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7ff fe4a 	bl	80034d8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003844:	e089      	b.n	800395a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b02      	cmp	r3, #2
 800384e:	d107      	bne.n	8003860 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f8be 	bl	80039dc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b01      	cmp	r3, #1
 8003868:	d107      	bne.n	800387a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f8fd 	bl	8003a74 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003880:	2b40      	cmp	r3, #64	; 0x40
 8003882:	d12f      	bne.n	80038e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b00      	cmp	r3, #0
 800388c:	d02a      	beq.n	80038e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800389c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a1e      	ldr	r2, [pc, #120]	; (800391c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d101      	bne.n	80038ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80038a8:	4b1d      	ldr	r3, [pc, #116]	; (8003920 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038aa:	e001      	b.n	80038b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80038ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4919      	ldr	r1, [pc, #100]	; (800391c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038b8:	428b      	cmp	r3, r1
 80038ba:	d101      	bne.n	80038c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80038bc:	4b18      	ldr	r3, [pc, #96]	; (8003920 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038be:	e001      	b.n	80038c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80038c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038c8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	f043 0202 	orr.w	r2, r3, #2
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7ff fdfa 	bl	80034d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d136      	bne.n	800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d031      	beq.n	800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a07      	ldr	r2, [pc, #28]	; (800391c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d101      	bne.n	8003906 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003902:	4b07      	ldr	r3, [pc, #28]	; (8003920 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003904:	e001      	b.n	800390a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003906:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4902      	ldr	r1, [pc, #8]	; (800391c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003912:	428b      	cmp	r3, r1
 8003914:	d106      	bne.n	8003924 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003916:	4b02      	ldr	r3, [pc, #8]	; (8003920 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003918:	e006      	b.n	8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800391a:	bf00      	nop
 800391c:	40003800 	.word	0x40003800
 8003920:	40003400 	.word	0x40003400
 8003924:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003928:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800392c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800393c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394a:	f043 0204 	orr.w	r2, r3, #4
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff fdc0 	bl	80034d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003958:	e000      	b.n	800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800395a:	bf00      	nop
}
 800395c:	bf00      	nop
 800395e:	3720      	adds	r7, #32
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	1c99      	adds	r1, r3, #2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6251      	str	r1, [r2, #36]	; 0x24
 800398a:	881a      	ldrh	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d113      	bne.n	80039d2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d106      	bne.n	80039d2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff ffc9 	bl	8003964 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	1c99      	adds	r1, r3, #2
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6251      	str	r1, [r2, #36]	; 0x24
 80039ee:	8819      	ldrh	r1, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1d      	ldr	r2, [pc, #116]	; (8003a6c <I2SEx_TxISR_I2SExt+0x90>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d101      	bne.n	80039fe <I2SEx_TxISR_I2SExt+0x22>
 80039fa:	4b1d      	ldr	r3, [pc, #116]	; (8003a70 <I2SEx_TxISR_I2SExt+0x94>)
 80039fc:	e001      	b.n	8003a02 <I2SEx_TxISR_I2SExt+0x26>
 80039fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a02:	460a      	mov	r2, r1
 8003a04:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d121      	bne.n	8003a62 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a12      	ldr	r2, [pc, #72]	; (8003a6c <I2SEx_TxISR_I2SExt+0x90>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d101      	bne.n	8003a2c <I2SEx_TxISR_I2SExt+0x50>
 8003a28:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <I2SEx_TxISR_I2SExt+0x94>)
 8003a2a:	e001      	b.n	8003a30 <I2SEx_TxISR_I2SExt+0x54>
 8003a2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	490d      	ldr	r1, [pc, #52]	; (8003a6c <I2SEx_TxISR_I2SExt+0x90>)
 8003a38:	428b      	cmp	r3, r1
 8003a3a:	d101      	bne.n	8003a40 <I2SEx_TxISR_I2SExt+0x64>
 8003a3c:	4b0c      	ldr	r3, [pc, #48]	; (8003a70 <I2SEx_TxISR_I2SExt+0x94>)
 8003a3e:	e001      	b.n	8003a44 <I2SEx_TxISR_I2SExt+0x68>
 8003a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a48:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d106      	bne.n	8003a62 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff ff81 	bl	8003964 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a62:	bf00      	nop
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40003800 	.word	0x40003800
 8003a70:	40003400 	.word	0x40003400

08003a74 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68d8      	ldr	r0, [r3, #12]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a86:	1c99      	adds	r1, r3, #2
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a8c:	b282      	uxth	r2, r0
 8003a8e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d113      	bne.n	8003ad0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ab6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d106      	bne.n	8003ad0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff ff4a 	bl	8003964 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ad0:	bf00      	nop
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a20      	ldr	r2, [pc, #128]	; (8003b68 <I2SEx_RxISR_I2SExt+0x90>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d101      	bne.n	8003aee <I2SEx_RxISR_I2SExt+0x16>
 8003aea:	4b20      	ldr	r3, [pc, #128]	; (8003b6c <I2SEx_RxISR_I2SExt+0x94>)
 8003aec:	e001      	b.n	8003af2 <I2SEx_RxISR_I2SExt+0x1a>
 8003aee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003af2:	68d8      	ldr	r0, [r3, #12]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	1c99      	adds	r1, r3, #2
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003afe:	b282      	uxth	r2, r0
 8003b00:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d121      	bne.n	8003b5e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a12      	ldr	r2, [pc, #72]	; (8003b68 <I2SEx_RxISR_I2SExt+0x90>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d101      	bne.n	8003b28 <I2SEx_RxISR_I2SExt+0x50>
 8003b24:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <I2SEx_RxISR_I2SExt+0x94>)
 8003b26:	e001      	b.n	8003b2c <I2SEx_RxISR_I2SExt+0x54>
 8003b28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	490d      	ldr	r1, [pc, #52]	; (8003b68 <I2SEx_RxISR_I2SExt+0x90>)
 8003b34:	428b      	cmp	r3, r1
 8003b36:	d101      	bne.n	8003b3c <I2SEx_RxISR_I2SExt+0x64>
 8003b38:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <I2SEx_RxISR_I2SExt+0x94>)
 8003b3a:	e001      	b.n	8003b40 <I2SEx_RxISR_I2SExt+0x68>
 8003b3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b44:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d106      	bne.n	8003b5e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff ff03 	bl	8003964 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b5e:	bf00      	nop
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40003800 	.word	0x40003800
 8003b6c:	40003400 	.word	0x40003400

08003b70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e267      	b.n	8004052 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d075      	beq.n	8003c7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b8e:	4b88      	ldr	r3, [pc, #544]	; (8003db0 <HAL_RCC_OscConfig+0x240>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 030c 	and.w	r3, r3, #12
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d00c      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b9a:	4b85      	ldr	r3, [pc, #532]	; (8003db0 <HAL_RCC_OscConfig+0x240>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ba2:	2b08      	cmp	r3, #8
 8003ba4:	d112      	bne.n	8003bcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ba6:	4b82      	ldr	r3, [pc, #520]	; (8003db0 <HAL_RCC_OscConfig+0x240>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bb2:	d10b      	bne.n	8003bcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb4:	4b7e      	ldr	r3, [pc, #504]	; (8003db0 <HAL_RCC_OscConfig+0x240>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d05b      	beq.n	8003c78 <HAL_RCC_OscConfig+0x108>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d157      	bne.n	8003c78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e242      	b.n	8004052 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd4:	d106      	bne.n	8003be4 <HAL_RCC_OscConfig+0x74>
 8003bd6:	4b76      	ldr	r3, [pc, #472]	; (8003db0 <HAL_RCC_OscConfig+0x240>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a75      	ldr	r2, [pc, #468]	; (8003db0 <HAL_RCC_OscConfig+0x240>)
 8003bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	e01d      	b.n	8003c20 <HAL_RCC_OscConfig+0xb0>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bec:	d10c      	bne.n	8003c08 <HAL_RCC_OscConfig+0x98>
 8003bee:	4b70      	ldr	r3, [pc, #448]	; (8003db0 <HAL_RCC_OscConfig+0x240>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a6f      	ldr	r2, [pc, #444]	; (8003db0 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	4b6d      	ldr	r3, [pc, #436]	; (8003db0 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a6c      	ldr	r2, [pc, #432]	; (8003db0 <HAL_RCC_OscConfig+0x240>)
 8003c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	e00b      	b.n	8003c20 <HAL_RCC_OscConfig+0xb0>
 8003c08:	4b69      	ldr	r3, [pc, #420]	; (8003db0 <HAL_RCC_OscConfig+0x240>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a68      	ldr	r2, [pc, #416]	; (8003db0 <HAL_RCC_OscConfig+0x240>)
 8003c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	4b66      	ldr	r3, [pc, #408]	; (8003db0 <HAL_RCC_OscConfig+0x240>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a65      	ldr	r2, [pc, #404]	; (8003db0 <HAL_RCC_OscConfig+0x240>)
 8003c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d013      	beq.n	8003c50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c28:	f7fd f974 	bl	8000f14 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c30:	f7fd f970 	bl	8000f14 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b64      	cmp	r3, #100	; 0x64
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e207      	b.n	8004052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c42:	4b5b      	ldr	r3, [pc, #364]	; (8003db0 <HAL_RCC_OscConfig+0x240>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0f0      	beq.n	8003c30 <HAL_RCC_OscConfig+0xc0>
 8003c4e:	e014      	b.n	8003c7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c50:	f7fd f960 	bl	8000f14 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c58:	f7fd f95c 	bl	8000f14 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b64      	cmp	r3, #100	; 0x64
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e1f3      	b.n	8004052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6a:	4b51      	ldr	r3, [pc, #324]	; (8003db0 <HAL_RCC_OscConfig+0x240>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f0      	bne.n	8003c58 <HAL_RCC_OscConfig+0xe8>
 8003c76:	e000      	b.n	8003c7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d063      	beq.n	8003d4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c86:	4b4a      	ldr	r3, [pc, #296]	; (8003db0 <HAL_RCC_OscConfig+0x240>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 030c 	and.w	r3, r3, #12
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00b      	beq.n	8003caa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c92:	4b47      	ldr	r3, [pc, #284]	; (8003db0 <HAL_RCC_OscConfig+0x240>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c9a:	2b08      	cmp	r3, #8
 8003c9c:	d11c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c9e:	4b44      	ldr	r3, [pc, #272]	; (8003db0 <HAL_RCC_OscConfig+0x240>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d116      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003caa:	4b41      	ldr	r3, [pc, #260]	; (8003db0 <HAL_RCC_OscConfig+0x240>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d005      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x152>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d001      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e1c7      	b.n	8004052 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc2:	4b3b      	ldr	r3, [pc, #236]	; (8003db0 <HAL_RCC_OscConfig+0x240>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	4937      	ldr	r1, [pc, #220]	; (8003db0 <HAL_RCC_OscConfig+0x240>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd6:	e03a      	b.n	8003d4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d020      	beq.n	8003d22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce0:	4b34      	ldr	r3, [pc, #208]	; (8003db4 <HAL_RCC_OscConfig+0x244>)
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce6:	f7fd f915 	bl	8000f14 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cec:	e008      	b.n	8003d00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cee:	f7fd f911 	bl	8000f14 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e1a8      	b.n	8004052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d00:	4b2b      	ldr	r3, [pc, #172]	; (8003db0 <HAL_RCC_OscConfig+0x240>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0f0      	beq.n	8003cee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d0c:	4b28      	ldr	r3, [pc, #160]	; (8003db0 <HAL_RCC_OscConfig+0x240>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	4925      	ldr	r1, [pc, #148]	; (8003db0 <HAL_RCC_OscConfig+0x240>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	600b      	str	r3, [r1, #0]
 8003d20:	e015      	b.n	8003d4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d22:	4b24      	ldr	r3, [pc, #144]	; (8003db4 <HAL_RCC_OscConfig+0x244>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d28:	f7fd f8f4 	bl	8000f14 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d30:	f7fd f8f0 	bl	8000f14 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e187      	b.n	8004052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d42:	4b1b      	ldr	r3, [pc, #108]	; (8003db0 <HAL_RCC_OscConfig+0x240>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d036      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d016      	beq.n	8003d90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d62:	4b15      	ldr	r3, [pc, #84]	; (8003db8 <HAL_RCC_OscConfig+0x248>)
 8003d64:	2201      	movs	r2, #1
 8003d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d68:	f7fd f8d4 	bl	8000f14 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d70:	f7fd f8d0 	bl	8000f14 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e167      	b.n	8004052 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d82:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <HAL_RCC_OscConfig+0x240>)
 8003d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0x200>
 8003d8e:	e01b      	b.n	8003dc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d90:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <HAL_RCC_OscConfig+0x248>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d96:	f7fd f8bd 	bl	8000f14 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d9c:	e00e      	b.n	8003dbc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d9e:	f7fd f8b9 	bl	8000f14 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d907      	bls.n	8003dbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e150      	b.n	8004052 <HAL_RCC_OscConfig+0x4e2>
 8003db0:	40023800 	.word	0x40023800
 8003db4:	42470000 	.word	0x42470000
 8003db8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dbc:	4b88      	ldr	r3, [pc, #544]	; (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1ea      	bne.n	8003d9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 8097 	beq.w	8003f04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dda:	4b81      	ldr	r3, [pc, #516]	; (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10f      	bne.n	8003e06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de6:	2300      	movs	r3, #0
 8003de8:	60bb      	str	r3, [r7, #8]
 8003dea:	4b7d      	ldr	r3, [pc, #500]	; (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	4a7c      	ldr	r2, [pc, #496]	; (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df4:	6413      	str	r3, [r2, #64]	; 0x40
 8003df6:	4b7a      	ldr	r3, [pc, #488]	; (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfe:	60bb      	str	r3, [r7, #8]
 8003e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e02:	2301      	movs	r3, #1
 8003e04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e06:	4b77      	ldr	r3, [pc, #476]	; (8003fe4 <HAL_RCC_OscConfig+0x474>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d118      	bne.n	8003e44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e12:	4b74      	ldr	r3, [pc, #464]	; (8003fe4 <HAL_RCC_OscConfig+0x474>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a73      	ldr	r2, [pc, #460]	; (8003fe4 <HAL_RCC_OscConfig+0x474>)
 8003e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e1e:	f7fd f879 	bl	8000f14 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e26:	f7fd f875 	bl	8000f14 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e10c      	b.n	8004052 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e38:	4b6a      	ldr	r3, [pc, #424]	; (8003fe4 <HAL_RCC_OscConfig+0x474>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f0      	beq.n	8003e26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d106      	bne.n	8003e5a <HAL_RCC_OscConfig+0x2ea>
 8003e4c:	4b64      	ldr	r3, [pc, #400]	; (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e50:	4a63      	ldr	r2, [pc, #396]	; (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	6713      	str	r3, [r2, #112]	; 0x70
 8003e58:	e01c      	b.n	8003e94 <HAL_RCC_OscConfig+0x324>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	2b05      	cmp	r3, #5
 8003e60:	d10c      	bne.n	8003e7c <HAL_RCC_OscConfig+0x30c>
 8003e62:	4b5f      	ldr	r3, [pc, #380]	; (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e66:	4a5e      	ldr	r2, [pc, #376]	; (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003e68:	f043 0304 	orr.w	r3, r3, #4
 8003e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e6e:	4b5c      	ldr	r3, [pc, #368]	; (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e72:	4a5b      	ldr	r2, [pc, #364]	; (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003e74:	f043 0301 	orr.w	r3, r3, #1
 8003e78:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7a:	e00b      	b.n	8003e94 <HAL_RCC_OscConfig+0x324>
 8003e7c:	4b58      	ldr	r3, [pc, #352]	; (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e80:	4a57      	ldr	r2, [pc, #348]	; (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003e82:	f023 0301 	bic.w	r3, r3, #1
 8003e86:	6713      	str	r3, [r2, #112]	; 0x70
 8003e88:	4b55      	ldr	r3, [pc, #340]	; (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8c:	4a54      	ldr	r2, [pc, #336]	; (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003e8e:	f023 0304 	bic.w	r3, r3, #4
 8003e92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d015      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9c:	f7fd f83a 	bl	8000f14 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea2:	e00a      	b.n	8003eba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea4:	f7fd f836 	bl	8000f14 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e0cb      	b.n	8004052 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eba:	4b49      	ldr	r3, [pc, #292]	; (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0ee      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x334>
 8003ec6:	e014      	b.n	8003ef2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ec8:	f7fd f824 	bl	8000f14 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ece:	e00a      	b.n	8003ee6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed0:	f7fd f820 	bl	8000f14 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e0b5      	b.n	8004052 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee6:	4b3e      	ldr	r3, [pc, #248]	; (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1ee      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ef2:	7dfb      	ldrb	r3, [r7, #23]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d105      	bne.n	8003f04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef8:	4b39      	ldr	r3, [pc, #228]	; (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	4a38      	ldr	r2, [pc, #224]	; (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 80a1 	beq.w	8004050 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f0e:	4b34      	ldr	r3, [pc, #208]	; (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 030c 	and.w	r3, r3, #12
 8003f16:	2b08      	cmp	r3, #8
 8003f18:	d05c      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d141      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f22:	4b31      	ldr	r3, [pc, #196]	; (8003fe8 <HAL_RCC_OscConfig+0x478>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f28:	f7fc fff4 	bl	8000f14 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f30:	f7fc fff0 	bl	8000f14 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e087      	b.n	8004052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f42:	4b27      	ldr	r3, [pc, #156]	; (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f0      	bne.n	8003f30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69da      	ldr	r2, [r3, #28]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	019b      	lsls	r3, r3, #6
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f64:	085b      	lsrs	r3, r3, #1
 8003f66:	3b01      	subs	r3, #1
 8003f68:	041b      	lsls	r3, r3, #16
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	061b      	lsls	r3, r3, #24
 8003f72:	491b      	ldr	r1, [pc, #108]	; (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f78:	4b1b      	ldr	r3, [pc, #108]	; (8003fe8 <HAL_RCC_OscConfig+0x478>)
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7e:	f7fc ffc9 	bl	8000f14 <HAL_GetTick>
 8003f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f86:	f7fc ffc5 	bl	8000f14 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e05c      	b.n	8004052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f98:	4b11      	ldr	r3, [pc, #68]	; (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0f0      	beq.n	8003f86 <HAL_RCC_OscConfig+0x416>
 8003fa4:	e054      	b.n	8004050 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa6:	4b10      	ldr	r3, [pc, #64]	; (8003fe8 <HAL_RCC_OscConfig+0x478>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fac:	f7fc ffb2 	bl	8000f14 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb4:	f7fc ffae 	bl	8000f14 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e045      	b.n	8004052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc6:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f0      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x444>
 8003fd2:	e03d      	b.n	8004050 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d107      	bne.n	8003fec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e038      	b.n	8004052 <HAL_RCC_OscConfig+0x4e2>
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	40007000 	.word	0x40007000
 8003fe8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fec:	4b1b      	ldr	r3, [pc, #108]	; (800405c <HAL_RCC_OscConfig+0x4ec>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d028      	beq.n	800404c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004004:	429a      	cmp	r2, r3
 8004006:	d121      	bne.n	800404c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004012:	429a      	cmp	r2, r3
 8004014:	d11a      	bne.n	800404c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800401c:	4013      	ands	r3, r2
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004022:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004024:	4293      	cmp	r3, r2
 8004026:	d111      	bne.n	800404c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004032:	085b      	lsrs	r3, r3, #1
 8004034:	3b01      	subs	r3, #1
 8004036:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004038:	429a      	cmp	r2, r3
 800403a:	d107      	bne.n	800404c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004046:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004048:	429a      	cmp	r2, r3
 800404a:	d001      	beq.n	8004050 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e000      	b.n	8004052 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3718      	adds	r7, #24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40023800 	.word	0x40023800

08004060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e0cc      	b.n	800420e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004074:	4b68      	ldr	r3, [pc, #416]	; (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d90c      	bls.n	800409c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004082:	4b65      	ldr	r3, [pc, #404]	; (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800408a:	4b63      	ldr	r3, [pc, #396]	; (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d001      	beq.n	800409c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e0b8      	b.n	800420e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d020      	beq.n	80040ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040b4:	4b59      	ldr	r3, [pc, #356]	; (800421c <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	4a58      	ldr	r2, [pc, #352]	; (800421c <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d005      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040cc:	4b53      	ldr	r3, [pc, #332]	; (800421c <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	4a52      	ldr	r2, [pc, #328]	; (800421c <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d8:	4b50      	ldr	r3, [pc, #320]	; (800421c <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	494d      	ldr	r1, [pc, #308]	; (800421c <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d044      	beq.n	8004180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d107      	bne.n	800410e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fe:	4b47      	ldr	r3, [pc, #284]	; (800421c <HAL_RCC_ClockConfig+0x1bc>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d119      	bne.n	800413e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e07f      	b.n	800420e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b02      	cmp	r3, #2
 8004114:	d003      	beq.n	800411e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800411a:	2b03      	cmp	r3, #3
 800411c:	d107      	bne.n	800412e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800411e:	4b3f      	ldr	r3, [pc, #252]	; (800421c <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d109      	bne.n	800413e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e06f      	b.n	800420e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800412e:	4b3b      	ldr	r3, [pc, #236]	; (800421c <HAL_RCC_ClockConfig+0x1bc>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e067      	b.n	800420e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800413e:	4b37      	ldr	r3, [pc, #220]	; (800421c <HAL_RCC_ClockConfig+0x1bc>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f023 0203 	bic.w	r2, r3, #3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	4934      	ldr	r1, [pc, #208]	; (800421c <HAL_RCC_ClockConfig+0x1bc>)
 800414c:	4313      	orrs	r3, r2
 800414e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004150:	f7fc fee0 	bl	8000f14 <HAL_GetTick>
 8004154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004156:	e00a      	b.n	800416e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004158:	f7fc fedc 	bl	8000f14 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	f241 3288 	movw	r2, #5000	; 0x1388
 8004166:	4293      	cmp	r3, r2
 8004168:	d901      	bls.n	800416e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e04f      	b.n	800420e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416e:	4b2b      	ldr	r3, [pc, #172]	; (800421c <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 020c 	and.w	r2, r3, #12
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	429a      	cmp	r2, r3
 800417e:	d1eb      	bne.n	8004158 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004180:	4b25      	ldr	r3, [pc, #148]	; (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d20c      	bcs.n	80041a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418e:	4b22      	ldr	r3, [pc, #136]	; (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004196:	4b20      	ldr	r3, [pc, #128]	; (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0307 	and.w	r3, r3, #7
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d001      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e032      	b.n	800420e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d008      	beq.n	80041c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041b4:	4b19      	ldr	r3, [pc, #100]	; (800421c <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	4916      	ldr	r1, [pc, #88]	; (800421c <HAL_RCC_ClockConfig+0x1bc>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d009      	beq.n	80041e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041d2:	4b12      	ldr	r3, [pc, #72]	; (800421c <HAL_RCC_ClockConfig+0x1bc>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	490e      	ldr	r1, [pc, #56]	; (800421c <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041e6:	f000 f821 	bl	800422c <HAL_RCC_GetSysClockFreq>
 80041ea:	4602      	mov	r2, r0
 80041ec:	4b0b      	ldr	r3, [pc, #44]	; (800421c <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	091b      	lsrs	r3, r3, #4
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	490a      	ldr	r1, [pc, #40]	; (8004220 <HAL_RCC_ClockConfig+0x1c0>)
 80041f8:	5ccb      	ldrb	r3, [r1, r3]
 80041fa:	fa22 f303 	lsr.w	r3, r2, r3
 80041fe:	4a09      	ldr	r2, [pc, #36]	; (8004224 <HAL_RCC_ClockConfig+0x1c4>)
 8004200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004202:	4b09      	ldr	r3, [pc, #36]	; (8004228 <HAL_RCC_ClockConfig+0x1c8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f7fc fd74 	bl	8000cf4 <HAL_InitTick>

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	40023c00 	.word	0x40023c00
 800421c:	40023800 	.word	0x40023800
 8004220:	080078a0 	.word	0x080078a0
 8004224:	20000000 	.word	0x20000000
 8004228:	20000004 	.word	0x20000004

0800422c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800422c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004230:	b094      	sub	sp, #80	; 0x50
 8004232:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	647b      	str	r3, [r7, #68]	; 0x44
 8004238:	2300      	movs	r3, #0
 800423a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800423c:	2300      	movs	r3, #0
 800423e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004244:	4b79      	ldr	r3, [pc, #484]	; (800442c <HAL_RCC_GetSysClockFreq+0x200>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 030c 	and.w	r3, r3, #12
 800424c:	2b08      	cmp	r3, #8
 800424e:	d00d      	beq.n	800426c <HAL_RCC_GetSysClockFreq+0x40>
 8004250:	2b08      	cmp	r3, #8
 8004252:	f200 80e1 	bhi.w	8004418 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <HAL_RCC_GetSysClockFreq+0x34>
 800425a:	2b04      	cmp	r3, #4
 800425c:	d003      	beq.n	8004266 <HAL_RCC_GetSysClockFreq+0x3a>
 800425e:	e0db      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004260:	4b73      	ldr	r3, [pc, #460]	; (8004430 <HAL_RCC_GetSysClockFreq+0x204>)
 8004262:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004264:	e0db      	b.n	800441e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004266:	4b73      	ldr	r3, [pc, #460]	; (8004434 <HAL_RCC_GetSysClockFreq+0x208>)
 8004268:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800426a:	e0d8      	b.n	800441e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800426c:	4b6f      	ldr	r3, [pc, #444]	; (800442c <HAL_RCC_GetSysClockFreq+0x200>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004274:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004276:	4b6d      	ldr	r3, [pc, #436]	; (800442c <HAL_RCC_GetSysClockFreq+0x200>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d063      	beq.n	800434a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004282:	4b6a      	ldr	r3, [pc, #424]	; (800442c <HAL_RCC_GetSysClockFreq+0x200>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	099b      	lsrs	r3, r3, #6
 8004288:	2200      	movs	r2, #0
 800428a:	63bb      	str	r3, [r7, #56]	; 0x38
 800428c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800428e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004294:	633b      	str	r3, [r7, #48]	; 0x30
 8004296:	2300      	movs	r3, #0
 8004298:	637b      	str	r3, [r7, #52]	; 0x34
 800429a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800429e:	4622      	mov	r2, r4
 80042a0:	462b      	mov	r3, r5
 80042a2:	f04f 0000 	mov.w	r0, #0
 80042a6:	f04f 0100 	mov.w	r1, #0
 80042aa:	0159      	lsls	r1, r3, #5
 80042ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042b0:	0150      	lsls	r0, r2, #5
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	4621      	mov	r1, r4
 80042b8:	1a51      	subs	r1, r2, r1
 80042ba:	6139      	str	r1, [r7, #16]
 80042bc:	4629      	mov	r1, r5
 80042be:	eb63 0301 	sbc.w	r3, r3, r1
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042d0:	4659      	mov	r1, fp
 80042d2:	018b      	lsls	r3, r1, #6
 80042d4:	4651      	mov	r1, sl
 80042d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042da:	4651      	mov	r1, sl
 80042dc:	018a      	lsls	r2, r1, #6
 80042de:	4651      	mov	r1, sl
 80042e0:	ebb2 0801 	subs.w	r8, r2, r1
 80042e4:	4659      	mov	r1, fp
 80042e6:	eb63 0901 	sbc.w	r9, r3, r1
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042fe:	4690      	mov	r8, r2
 8004300:	4699      	mov	r9, r3
 8004302:	4623      	mov	r3, r4
 8004304:	eb18 0303 	adds.w	r3, r8, r3
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	462b      	mov	r3, r5
 800430c:	eb49 0303 	adc.w	r3, r9, r3
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800431e:	4629      	mov	r1, r5
 8004320:	024b      	lsls	r3, r1, #9
 8004322:	4621      	mov	r1, r4
 8004324:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004328:	4621      	mov	r1, r4
 800432a:	024a      	lsls	r2, r1, #9
 800432c:	4610      	mov	r0, r2
 800432e:	4619      	mov	r1, r3
 8004330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004332:	2200      	movs	r2, #0
 8004334:	62bb      	str	r3, [r7, #40]	; 0x28
 8004336:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004338:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800433c:	f7fb ff48 	bl	80001d0 <__aeabi_uldivmod>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4613      	mov	r3, r2
 8004346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004348:	e058      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800434a:	4b38      	ldr	r3, [pc, #224]	; (800442c <HAL_RCC_GetSysClockFreq+0x200>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	099b      	lsrs	r3, r3, #6
 8004350:	2200      	movs	r2, #0
 8004352:	4618      	mov	r0, r3
 8004354:	4611      	mov	r1, r2
 8004356:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800435a:	623b      	str	r3, [r7, #32]
 800435c:	2300      	movs	r3, #0
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
 8004360:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004364:	4642      	mov	r2, r8
 8004366:	464b      	mov	r3, r9
 8004368:	f04f 0000 	mov.w	r0, #0
 800436c:	f04f 0100 	mov.w	r1, #0
 8004370:	0159      	lsls	r1, r3, #5
 8004372:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004376:	0150      	lsls	r0, r2, #5
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4641      	mov	r1, r8
 800437e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004382:	4649      	mov	r1, r9
 8004384:	eb63 0b01 	sbc.w	fp, r3, r1
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004394:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004398:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800439c:	ebb2 040a 	subs.w	r4, r2, sl
 80043a0:	eb63 050b 	sbc.w	r5, r3, fp
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	00eb      	lsls	r3, r5, #3
 80043ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043b2:	00e2      	lsls	r2, r4, #3
 80043b4:	4614      	mov	r4, r2
 80043b6:	461d      	mov	r5, r3
 80043b8:	4643      	mov	r3, r8
 80043ba:	18e3      	adds	r3, r4, r3
 80043bc:	603b      	str	r3, [r7, #0]
 80043be:	464b      	mov	r3, r9
 80043c0:	eb45 0303 	adc.w	r3, r5, r3
 80043c4:	607b      	str	r3, [r7, #4]
 80043c6:	f04f 0200 	mov.w	r2, #0
 80043ca:	f04f 0300 	mov.w	r3, #0
 80043ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043d2:	4629      	mov	r1, r5
 80043d4:	028b      	lsls	r3, r1, #10
 80043d6:	4621      	mov	r1, r4
 80043d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043dc:	4621      	mov	r1, r4
 80043de:	028a      	lsls	r2, r1, #10
 80043e0:	4610      	mov	r0, r2
 80043e2:	4619      	mov	r1, r3
 80043e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043e6:	2200      	movs	r2, #0
 80043e8:	61bb      	str	r3, [r7, #24]
 80043ea:	61fa      	str	r2, [r7, #28]
 80043ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043f0:	f7fb feee 	bl	80001d0 <__aeabi_uldivmod>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	4613      	mov	r3, r2
 80043fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043fc:	4b0b      	ldr	r3, [pc, #44]	; (800442c <HAL_RCC_GetSysClockFreq+0x200>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	0c1b      	lsrs	r3, r3, #16
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	3301      	adds	r3, #1
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800440c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800440e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004410:	fbb2 f3f3 	udiv	r3, r2, r3
 8004414:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004416:	e002      	b.n	800441e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004418:	4b05      	ldr	r3, [pc, #20]	; (8004430 <HAL_RCC_GetSysClockFreq+0x204>)
 800441a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800441c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800441e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004420:	4618      	mov	r0, r3
 8004422:	3750      	adds	r7, #80	; 0x50
 8004424:	46bd      	mov	sp, r7
 8004426:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800442a:	bf00      	nop
 800442c:	40023800 	.word	0x40023800
 8004430:	00f42400 	.word	0x00f42400
 8004434:	007a1200 	.word	0x007a1200

08004438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800443c:	4b03      	ldr	r3, [pc, #12]	; (800444c <HAL_RCC_GetHCLKFreq+0x14>)
 800443e:	681b      	ldr	r3, [r3, #0]
}
 8004440:	4618      	mov	r0, r3
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	20000000 	.word	0x20000000

08004450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004454:	f7ff fff0 	bl	8004438 <HAL_RCC_GetHCLKFreq>
 8004458:	4602      	mov	r2, r0
 800445a:	4b05      	ldr	r3, [pc, #20]	; (8004470 <HAL_RCC_GetPCLK1Freq+0x20>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	0a9b      	lsrs	r3, r3, #10
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	4903      	ldr	r1, [pc, #12]	; (8004474 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004466:	5ccb      	ldrb	r3, [r1, r3]
 8004468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800446c:	4618      	mov	r0, r3
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40023800 	.word	0x40023800
 8004474:	080078b0 	.word	0x080078b0

08004478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800447c:	f7ff ffdc 	bl	8004438 <HAL_RCC_GetHCLKFreq>
 8004480:	4602      	mov	r2, r0
 8004482:	4b05      	ldr	r3, [pc, #20]	; (8004498 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	0b5b      	lsrs	r3, r3, #13
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	4903      	ldr	r1, [pc, #12]	; (800449c <HAL_RCC_GetPCLK2Freq+0x24>)
 800448e:	5ccb      	ldrb	r3, [r1, r3]
 8004490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004494:	4618      	mov	r0, r3
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40023800 	.word	0x40023800
 800449c:	080078b0 	.word	0x080078b0

080044a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	220f      	movs	r2, #15
 80044ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80044b0:	4b12      	ldr	r3, [pc, #72]	; (80044fc <HAL_RCC_GetClockConfig+0x5c>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f003 0203 	and.w	r2, r3, #3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80044bc:	4b0f      	ldr	r3, [pc, #60]	; (80044fc <HAL_RCC_GetClockConfig+0x5c>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80044c8:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <HAL_RCC_GetClockConfig+0x5c>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80044d4:	4b09      	ldr	r3, [pc, #36]	; (80044fc <HAL_RCC_GetClockConfig+0x5c>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	08db      	lsrs	r3, r3, #3
 80044da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044e2:	4b07      	ldr	r3, [pc, #28]	; (8004500 <HAL_RCC_GetClockConfig+0x60>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0207 	and.w	r2, r3, #7
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	601a      	str	r2, [r3, #0]
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40023800 	.word	0x40023800
 8004500:	40023c00 	.word	0x40023c00

08004504 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	d105      	bne.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004528:	2b00      	cmp	r3, #0
 800452a:	d035      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800452c:	4b62      	ldr	r3, [pc, #392]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004532:	f7fc fcef 	bl	8000f14 <HAL_GetTick>
 8004536:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004538:	e008      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800453a:	f7fc fceb 	bl	8000f14 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d901      	bls.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e0b0      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800454c:	4b5b      	ldr	r3, [pc, #364]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1f0      	bne.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	019a      	lsls	r2, r3, #6
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	071b      	lsls	r3, r3, #28
 8004564:	4955      	ldr	r1, [pc, #340]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004566:	4313      	orrs	r3, r2
 8004568:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800456c:	4b52      	ldr	r3, [pc, #328]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800456e:	2201      	movs	r2, #1
 8004570:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004572:	f7fc fccf 	bl	8000f14 <HAL_GetTick>
 8004576:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004578:	e008      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800457a:	f7fc fccb 	bl	8000f14 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e090      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800458c:	4b4b      	ldr	r3, [pc, #300]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0f0      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 8083 	beq.w	80046ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	4b44      	ldr	r3, [pc, #272]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	4a43      	ldr	r2, [pc, #268]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b4:	6413      	str	r3, [r2, #64]	; 0x40
 80045b6:	4b41      	ldr	r3, [pc, #260]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80045c2:	4b3f      	ldr	r3, [pc, #252]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a3e      	ldr	r2, [pc, #248]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045ce:	f7fc fca1 	bl	8000f14 <HAL_GetTick>
 80045d2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045d4:	e008      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80045d6:	f7fc fc9d 	bl	8000f14 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e062      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045e8:	4b35      	ldr	r3, [pc, #212]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f0      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045f4:	4b31      	ldr	r3, [pc, #196]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d02f      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	429a      	cmp	r2, r3
 8004610:	d028      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004612:	4b2a      	ldr	r3, [pc, #168]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800461a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800461c:	4b29      	ldr	r3, [pc, #164]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800461e:	2201      	movs	r2, #1
 8004620:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004622:	4b28      	ldr	r3, [pc, #160]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004628:	4a24      	ldr	r2, [pc, #144]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800462e:	4b23      	ldr	r3, [pc, #140]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b01      	cmp	r3, #1
 8004638:	d114      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800463a:	f7fc fc6b 	bl	8000f14 <HAL_GetTick>
 800463e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004640:	e00a      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004642:	f7fc fc67 	bl	8000f14 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004650:	4293      	cmp	r3, r2
 8004652:	d901      	bls.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e02a      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004658:	4b18      	ldr	r3, [pc, #96]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800465a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0ee      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800466c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004670:	d10d      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004672:	4b12      	ldr	r3, [pc, #72]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004686:	490d      	ldr	r1, [pc, #52]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004688:	4313      	orrs	r3, r2
 800468a:	608b      	str	r3, [r1, #8]
 800468c:	e005      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800468e:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	4a0a      	ldr	r2, [pc, #40]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004694:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004698:	6093      	str	r3, [r2, #8]
 800469a:	4b08      	ldr	r3, [pc, #32]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800469c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a6:	4905      	ldr	r1, [pc, #20]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	42470068 	.word	0x42470068
 80046bc:	40023800 	.word	0x40023800
 80046c0:	40007000 	.word	0x40007000
 80046c4:	42470e40 	.word	0x42470e40

080046c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b087      	sub	sp, #28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d13f      	bne.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80046e6:	4b24      	ldr	r3, [pc, #144]	; (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d006      	beq.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046fc:	d12f      	bne.n	800475e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80046fe:	4b1f      	ldr	r3, [pc, #124]	; (800477c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004700:	617b      	str	r3, [r7, #20]
          break;
 8004702:	e02f      	b.n	8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004704:	4b1c      	ldr	r3, [pc, #112]	; (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800470c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004710:	d108      	bne.n	8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004712:	4b19      	ldr	r3, [pc, #100]	; (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800471a:	4a19      	ldr	r2, [pc, #100]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800471c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004720:	613b      	str	r3, [r7, #16]
 8004722:	e007      	b.n	8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004724:	4b14      	ldr	r3, [pc, #80]	; (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800472c:	4a15      	ldr	r2, [pc, #84]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800472e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004732:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004734:	4b10      	ldr	r3, [pc, #64]	; (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800473a:	099b      	lsrs	r3, r3, #6
 800473c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	fb02 f303 	mul.w	r3, r2, r3
 8004746:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004748:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800474a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800474e:	0f1b      	lsrs	r3, r3, #28
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	fbb2 f3f3 	udiv	r3, r2, r3
 800475a:	617b      	str	r3, [r7, #20]
          break;
 800475c:	e002      	b.n	8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	617b      	str	r3, [r7, #20]
          break;
 8004762:	bf00      	nop
        }
      }
      break;
 8004764:	e000      	b.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8004766:	bf00      	nop
    }
  }
  return frequency;
 8004768:	697b      	ldr	r3, [r7, #20]
}
 800476a:	4618      	mov	r0, r3
 800476c:	371c      	adds	r7, #28
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	40023800 	.word	0x40023800
 800477c:	00bb8000 	.word	0x00bb8000
 8004780:	007a1200 	.word	0x007a1200
 8004784:	00f42400 	.word	0x00f42400

08004788 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e07b      	b.n	8004892 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d108      	bne.n	80047b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047aa:	d009      	beq.n	80047c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	61da      	str	r2, [r3, #28]
 80047b2:	e005      	b.n	80047c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d106      	bne.n	80047e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7fc fa20 	bl	8000c20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004844:	ea42 0103 	orr.w	r1, r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	0c1b      	lsrs	r3, r3, #16
 800485e:	f003 0104 	and.w	r1, r3, #4
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	f003 0210 	and.w	r2, r3, #16
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69da      	ldr	r2, [r3, #28]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004880:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b082      	sub	sp, #8
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e041      	b.n	8004930 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d106      	bne.n	80048c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7fc f9f5 	bl	8000cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2202      	movs	r2, #2
 80048ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3304      	adds	r3, #4
 80048d6:	4619      	mov	r1, r3
 80048d8:	4610      	mov	r0, r2
 80048da:	f000 f9b5 	bl	8004c48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b01      	cmp	r3, #1
 800494a:	d001      	beq.n	8004950 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e04e      	b.n	80049ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0201 	orr.w	r2, r2, #1
 8004966:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a23      	ldr	r2, [pc, #140]	; (80049fc <HAL_TIM_Base_Start_IT+0xc4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d022      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0x80>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800497a:	d01d      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0x80>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a1f      	ldr	r2, [pc, #124]	; (8004a00 <HAL_TIM_Base_Start_IT+0xc8>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d018      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0x80>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a1e      	ldr	r2, [pc, #120]	; (8004a04 <HAL_TIM_Base_Start_IT+0xcc>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d013      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0x80>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a1c      	ldr	r2, [pc, #112]	; (8004a08 <HAL_TIM_Base_Start_IT+0xd0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d00e      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0x80>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a1b      	ldr	r2, [pc, #108]	; (8004a0c <HAL_TIM_Base_Start_IT+0xd4>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d009      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0x80>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a19      	ldr	r2, [pc, #100]	; (8004a10 <HAL_TIM_Base_Start_IT+0xd8>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d004      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0x80>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a18      	ldr	r2, [pc, #96]	; (8004a14 <HAL_TIM_Base_Start_IT+0xdc>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d111      	bne.n	80049dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2b06      	cmp	r3, #6
 80049c8:	d010      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f042 0201 	orr.w	r2, r2, #1
 80049d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049da:	e007      	b.n	80049ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0201 	orr.w	r2, r2, #1
 80049ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	40010000 	.word	0x40010000
 8004a00:	40000400 	.word	0x40000400
 8004a04:	40000800 	.word	0x40000800
 8004a08:	40000c00 	.word	0x40000c00
 8004a0c:	40010400 	.word	0x40010400
 8004a10:	40014000 	.word	0x40014000
 8004a14:	40001800 	.word	0x40001800

08004a18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d020      	beq.n	8004a7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d01b      	beq.n	8004a7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f06f 0202 	mvn.w	r2, #2
 8004a4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f8d2 	bl	8004c0c <HAL_TIM_IC_CaptureCallback>
 8004a68:	e005      	b.n	8004a76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f8c4 	bl	8004bf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f8d5 	bl	8004c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f003 0304 	and.w	r3, r3, #4
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d020      	beq.n	8004ac8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d01b      	beq.n	8004ac8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f06f 0204 	mvn.w	r2, #4
 8004a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f8ac 	bl	8004c0c <HAL_TIM_IC_CaptureCallback>
 8004ab4:	e005      	b.n	8004ac2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f89e 	bl	8004bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f8af 	bl	8004c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f003 0308 	and.w	r3, r3, #8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d020      	beq.n	8004b14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d01b      	beq.n	8004b14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f06f 0208 	mvn.w	r2, #8
 8004ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2204      	movs	r2, #4
 8004aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f886 	bl	8004c0c <HAL_TIM_IC_CaptureCallback>
 8004b00:	e005      	b.n	8004b0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f878 	bl	8004bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f889 	bl	8004c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f003 0310 	and.w	r3, r3, #16
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d020      	beq.n	8004b60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f003 0310 	and.w	r3, r3, #16
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d01b      	beq.n	8004b60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f06f 0210 	mvn.w	r2, #16
 8004b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2208      	movs	r2, #8
 8004b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f860 	bl	8004c0c <HAL_TIM_IC_CaptureCallback>
 8004b4c:	e005      	b.n	8004b5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f852 	bl	8004bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f863 	bl	8004c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00c      	beq.n	8004b84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d007      	beq.n	8004b84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f06f 0201 	mvn.w	r2, #1
 8004b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fb ff42 	bl	8000a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00c      	beq.n	8004ba8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d007      	beq.n	8004ba8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f906 	bl	8004db4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00c      	beq.n	8004bcc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d007      	beq.n	8004bcc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f834 	bl	8004c34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f003 0320 	and.w	r3, r3, #32
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00c      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f003 0320 	and.w	r3, r3, #32
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d007      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f06f 0220 	mvn.w	r2, #32
 8004be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f8d8 	bl	8004da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bf0:	bf00      	nop
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a46      	ldr	r2, [pc, #280]	; (8004d74 <TIM_Base_SetConfig+0x12c>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d013      	beq.n	8004c88 <TIM_Base_SetConfig+0x40>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c66:	d00f      	beq.n	8004c88 <TIM_Base_SetConfig+0x40>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a43      	ldr	r2, [pc, #268]	; (8004d78 <TIM_Base_SetConfig+0x130>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00b      	beq.n	8004c88 <TIM_Base_SetConfig+0x40>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a42      	ldr	r2, [pc, #264]	; (8004d7c <TIM_Base_SetConfig+0x134>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d007      	beq.n	8004c88 <TIM_Base_SetConfig+0x40>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a41      	ldr	r2, [pc, #260]	; (8004d80 <TIM_Base_SetConfig+0x138>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d003      	beq.n	8004c88 <TIM_Base_SetConfig+0x40>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a40      	ldr	r2, [pc, #256]	; (8004d84 <TIM_Base_SetConfig+0x13c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d108      	bne.n	8004c9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a35      	ldr	r2, [pc, #212]	; (8004d74 <TIM_Base_SetConfig+0x12c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d02b      	beq.n	8004cfa <TIM_Base_SetConfig+0xb2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca8:	d027      	beq.n	8004cfa <TIM_Base_SetConfig+0xb2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a32      	ldr	r2, [pc, #200]	; (8004d78 <TIM_Base_SetConfig+0x130>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d023      	beq.n	8004cfa <TIM_Base_SetConfig+0xb2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a31      	ldr	r2, [pc, #196]	; (8004d7c <TIM_Base_SetConfig+0x134>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d01f      	beq.n	8004cfa <TIM_Base_SetConfig+0xb2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a30      	ldr	r2, [pc, #192]	; (8004d80 <TIM_Base_SetConfig+0x138>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d01b      	beq.n	8004cfa <TIM_Base_SetConfig+0xb2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a2f      	ldr	r2, [pc, #188]	; (8004d84 <TIM_Base_SetConfig+0x13c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d017      	beq.n	8004cfa <TIM_Base_SetConfig+0xb2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a2e      	ldr	r2, [pc, #184]	; (8004d88 <TIM_Base_SetConfig+0x140>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d013      	beq.n	8004cfa <TIM_Base_SetConfig+0xb2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a2d      	ldr	r2, [pc, #180]	; (8004d8c <TIM_Base_SetConfig+0x144>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d00f      	beq.n	8004cfa <TIM_Base_SetConfig+0xb2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a2c      	ldr	r2, [pc, #176]	; (8004d90 <TIM_Base_SetConfig+0x148>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00b      	beq.n	8004cfa <TIM_Base_SetConfig+0xb2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a2b      	ldr	r2, [pc, #172]	; (8004d94 <TIM_Base_SetConfig+0x14c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d007      	beq.n	8004cfa <TIM_Base_SetConfig+0xb2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a2a      	ldr	r2, [pc, #168]	; (8004d98 <TIM_Base_SetConfig+0x150>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d003      	beq.n	8004cfa <TIM_Base_SetConfig+0xb2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a29      	ldr	r2, [pc, #164]	; (8004d9c <TIM_Base_SetConfig+0x154>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d108      	bne.n	8004d0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a10      	ldr	r2, [pc, #64]	; (8004d74 <TIM_Base_SetConfig+0x12c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d003      	beq.n	8004d40 <TIM_Base_SetConfig+0xf8>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a12      	ldr	r2, [pc, #72]	; (8004d84 <TIM_Base_SetConfig+0x13c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d103      	bne.n	8004d48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d105      	bne.n	8004d66 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f023 0201 	bic.w	r2, r3, #1
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	611a      	str	r2, [r3, #16]
  }
}
 8004d66:	bf00      	nop
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40010000 	.word	0x40010000
 8004d78:	40000400 	.word	0x40000400
 8004d7c:	40000800 	.word	0x40000800
 8004d80:	40000c00 	.word	0x40000c00
 8004d84:	40010400 	.word	0x40010400
 8004d88:	40014000 	.word	0x40014000
 8004d8c:	40014400 	.word	0x40014400
 8004d90:	40014800 	.word	0x40014800
 8004d94:	40001800 	.word	0x40001800
 8004d98:	40001c00 	.word	0x40001c00
 8004d9c:	40002000 	.word	0x40002000

08004da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f043 0201 	orr.w	r2, r3, #1
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f023 0201 	bic.w	r2, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004e26:	d901      	bls.n	8004e2c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e01b      	b.n	8004e64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	daf2      	bge.n	8004e1a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	019b      	lsls	r3, r3, #6
 8004e3c:	f043 0220 	orr.w	r2, r3, #32
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	3301      	adds	r3, #1
 8004e48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004e50:	d901      	bls.n	8004e56 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e006      	b.n	8004e64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	f003 0320 	and.w	r3, r3, #32
 8004e5e:	2b20      	cmp	r3, #32
 8004e60:	d0f0      	beq.n	8004e44 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004e88:	d901      	bls.n	8004e8e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e018      	b.n	8004ec0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	daf2      	bge.n	8004e7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2210      	movs	r2, #16
 8004e9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004eac:	d901      	bls.n	8004eb2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e006      	b.n	8004ec0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f003 0310 	and.w	r3, r3, #16
 8004eba:	2b10      	cmp	r3, #16
 8004ebc:	d0f0      	beq.n	8004ea0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b08b      	sub	sp, #44	; 0x2c
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004ee2:	88fb      	ldrh	r3, [r7, #6]
 8004ee4:	089b      	lsrs	r3, r3, #2
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004eea:	88fb      	ldrh	r3, [r7, #6]
 8004eec:	f003 0303 	and.w	r3, r3, #3
 8004ef0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	623b      	str	r3, [r7, #32]
 8004ef6:	e014      	b.n	8004f22 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	3301      	adds	r3, #1
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	3301      	adds	r3, #1
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	3301      	adds	r3, #1
 8004f1a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004f1c:	6a3b      	ldr	r3, [r7, #32]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	623b      	str	r3, [r7, #32]
 8004f22:	6a3a      	ldr	r2, [r7, #32]
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d3e6      	bcc.n	8004ef8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004f2a:	8bfb      	ldrh	r3, [r7, #30]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d01e      	beq.n	8004f6e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f107 0310 	add.w	r3, r7, #16
 8004f40:	6812      	ldr	r2, [r2, #0]
 8004f42:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	701a      	strb	r2, [r3, #0]
      i++;
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	3301      	adds	r3, #1
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004f62:	8bfb      	ldrh	r3, [r7, #30]
 8004f64:	3b01      	subs	r3, #1
 8004f66:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004f68:	8bfb      	ldrh	r3, [r7, #30]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1ea      	bne.n	8004f44 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	372c      	adds	r7, #44	; 0x2c
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	4013      	ands	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004f94:	68fb      	ldr	r3, [r7, #12]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b085      	sub	sp, #20
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	460b      	mov	r3, r1
 8004fac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8004fb2:	78fb      	ldrb	r3, [r7, #3]
 8004fb4:	015a      	lsls	r2, r3, #5
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8004fc2:	78fb      	ldrb	r3, [r7, #3]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	f003 0301 	and.w	r3, r3, #1
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800501e:	f023 0303 	bic.w	r3, r3, #3
 8005022:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	78fb      	ldrb	r3, [r7, #3]
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	68f9      	ldr	r1, [r7, #12]
 8005034:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005038:	4313      	orrs	r3, r2
 800503a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d107      	bne.n	8005052 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005048:	461a      	mov	r2, r3
 800504a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800504e:	6053      	str	r3, [r2, #4]
 8005050:	e00c      	b.n	800506c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005052:	78fb      	ldrb	r3, [r7, #3]
 8005054:	2b02      	cmp	r3, #2
 8005056:	d107      	bne.n	8005068 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800505e:	461a      	mov	r2, r3
 8005060:	f241 7370 	movw	r3, #6000	; 0x1770
 8005064:	6053      	str	r3, [r2, #4]
 8005066:	e001      	b.n	800506c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e000      	b.n	800506e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800507a:	b480      	push	{r7}
 800507c:	b085      	sub	sp, #20
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	b29b      	uxth	r3, r3
}
 8005090:	4618      	mov	r0, r3
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800509c:	b480      	push	{r7}
 800509e:	b089      	sub	sp, #36	; 0x24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80050ac:	78fb      	ldrb	r3, [r7, #3]
 80050ae:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	0c9b      	lsrs	r3, r3, #18
 80050c4:	f003 0303 	and.w	r3, r3, #3
 80050c8:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	0fdb      	lsrs	r3, r3, #31
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	0fdb      	lsrs	r3, r3, #31
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 0320 	and.w	r3, r3, #32
 80050fe:	2b20      	cmp	r3, #32
 8005100:	d10d      	bne.n	800511e <USB_HC_Halt+0x82>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10a      	bne.n	800511e <USB_HC_Halt+0x82>
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d005      	beq.n	800511a <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d002      	beq.n	800511a <USB_HC_Halt+0x7e>
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	2b03      	cmp	r3, #3
 8005118:	d101      	bne.n	800511e <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800511a:	2300      	movs	r3, #0
 800511c:	e0d8      	b.n	80052d0 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d002      	beq.n	800512a <USB_HC_Halt+0x8e>
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2b02      	cmp	r3, #2
 8005128:	d173      	bne.n	8005212 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	4413      	add	r3, r2
 8005132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	0151      	lsls	r1, r2, #5
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	440a      	add	r2, r1
 8005140:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005144:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005148:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 0320 	and.w	r3, r3, #32
 8005152:	2b00      	cmp	r3, #0
 8005154:	d14a      	bne.n	80051ec <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d133      	bne.n	80051ca <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	4413      	add	r3, r2
 800516a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	0151      	lsls	r1, r2, #5
 8005174:	69fa      	ldr	r2, [r7, #28]
 8005176:	440a      	add	r2, r1
 8005178:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800517c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005180:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	4413      	add	r3, r2
 800518a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	0151      	lsls	r1, r2, #5
 8005194:	69fa      	ldr	r2, [r7, #28]
 8005196:	440a      	add	r2, r1
 8005198:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800519c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051a0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	3301      	adds	r3, #1
 80051a6:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051ae:	d82e      	bhi.n	800520e <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051c6:	d0ec      	beq.n	80051a2 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051c8:	e081      	b.n	80052ce <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	0151      	lsls	r1, r2, #5
 80051dc:	69fa      	ldr	r2, [r7, #28]
 80051de:	440a      	add	r2, r1
 80051e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051e8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051ea:	e070      	b.n	80052ce <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	0151      	lsls	r1, r2, #5
 80051fe:	69fa      	ldr	r2, [r7, #28]
 8005200:	440a      	add	r2, r1
 8005202:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005206:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800520a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800520c:	e05f      	b.n	80052ce <USB_HC_Halt+0x232>
            break;
 800520e:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005210:	e05d      	b.n	80052ce <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	4413      	add	r3, r2
 800521a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	0151      	lsls	r1, r2, #5
 8005224:	69fa      	ldr	r2, [r7, #28]
 8005226:	440a      	add	r2, r1
 8005228:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800522c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005230:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d133      	bne.n	80052aa <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	4413      	add	r3, r2
 800524a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	0151      	lsls	r1, r2, #5
 8005254:	69fa      	ldr	r2, [r7, #28]
 8005256:	440a      	add	r2, r1
 8005258:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800525c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005260:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	4413      	add	r3, r2
 800526a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	0151      	lsls	r1, r2, #5
 8005274:	69fa      	ldr	r2, [r7, #28]
 8005276:	440a      	add	r2, r1
 8005278:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800527c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005280:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	3301      	adds	r3, #1
 8005286:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800528e:	d81d      	bhi.n	80052cc <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	4413      	add	r3, r2
 8005298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052a6:	d0ec      	beq.n	8005282 <USB_HC_Halt+0x1e6>
 80052a8:	e011      	b.n	80052ce <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	0151      	lsls	r1, r2, #5
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	440a      	add	r2, r1
 80052c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052c8:	6013      	str	r3, [r2, #0]
 80052ca:	e000      	b.n	80052ce <USB_HC_Halt+0x232>
          break;
 80052cc:	bf00      	nop
    }
  }

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3724      	adds	r7, #36	; 0x24
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b088      	sub	sp, #32
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80052e4:	2300      	movs	r3, #0
 80052e6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7ff fd7a 	bl	8004dea <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052f6:	2110      	movs	r1, #16
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7ff fd87 	bl	8004e0c <USB_FlushTxFifo>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7ff fdb1 	bl	8004e70 <USB_FlushRxFifo>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005318:	2300      	movs	r3, #0
 800531a:	61bb      	str	r3, [r7, #24]
 800531c:	e01f      	b.n	800535e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	4413      	add	r3, r2
 8005326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005334:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800533c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005344:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	4413      	add	r3, r2
 800534e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005352:	461a      	mov	r2, r3
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	3301      	adds	r3, #1
 800535c:	61bb      	str	r3, [r7, #24]
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	2b0f      	cmp	r3, #15
 8005362:	d9dc      	bls.n	800531e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005364:	2300      	movs	r3, #0
 8005366:	61bb      	str	r3, [r7, #24]
 8005368:	e034      	b.n	80053d4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	4413      	add	r3, r2
 8005372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005380:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005388:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005390:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	4413      	add	r3, r2
 800539a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539e:	461a      	mov	r2, r3
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3301      	adds	r3, #1
 80053a8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053b0:	d80c      	bhi.n	80053cc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053c8:	d0ec      	beq.n	80053a4 <USB_StopHost+0xc8>
 80053ca:	e000      	b.n	80053ce <USB_StopHost+0xf2>
        break;
 80053cc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	3301      	adds	r3, #1
 80053d2:	61bb      	str	r3, [r7, #24]
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	2b0f      	cmp	r3, #15
 80053d8:	d9c7      	bls.n	800536a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053e0:	461a      	mov	r2, r3
 80053e2:	f04f 33ff 	mov.w	r3, #4294967295
 80053e6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f04f 32ff 	mov.w	r2, #4294967295
 80053ee:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7ff fce9 	bl	8004dc8 <USB_EnableGlobalInt>

  return ret;
 80053f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3720      	adds	r7, #32
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f804 	bl	8005424 <USBH_HandleSof>
}
 800541c:	bf00      	nop
 800541e:	3708      	adds	r7, #8
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b0b      	cmp	r3, #11
 8005434:	d10a      	bne.n	800544c <USBH_HandleSof+0x28>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800543c:	2b00      	cmp	r3, #0
 800543e:	d005      	beq.n	800544c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	4798      	blx	r3
  }
}
 800544c:	bf00      	nop
 800544e:	3708      	adds	r7, #8
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005478:	2200      	movs	r2, #0
 800547a:	4619      	mov	r1, r3
 800547c:	f000 f8ae 	bl	80055dc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8005480:	bf00      	nop
}
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8005498:	bf00      	nop
}
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80054d8:	2200      	movs	r2, #0
 80054da:	4619      	mov	r1, r3
 80054dc:	f000 f87e 	bl	80055dc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b082      	sub	sp, #8
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f002 f87e 	bl	800760c <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	791b      	ldrb	r3, [r3, #4]
 8005514:	4619      	mov	r1, r3
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f830 	bl	800557c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	795b      	ldrb	r3, [r3, #5]
 8005520:	4619      	mov	r1, r3
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f82a 	bl	800557c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800553c:	2200      	movs	r2, #0
 800553e:	4619      	mov	r1, r3
 8005540:	f000 f84c 	bl	80055dc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b082      	sub	sp, #8
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800556a:	2200      	movs	r2, #0
 800556c:	4619      	mov	r1, r3
 800556e:	f000 f835 	bl	80055dc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3708      	adds	r7, #8
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	460b      	mov	r3, r1
 8005586:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8005588:	78fb      	ldrb	r3, [r7, #3]
 800558a:	2b0f      	cmp	r3, #15
 800558c:	d80d      	bhi.n	80055aa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800558e:	78fb      	ldrb	r3, [r7, #3]
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	33e0      	adds	r3, #224	; 0xe0
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	78fb      	ldrb	r3, [r7, #3]
 800559c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80055a0:	6879      	ldr	r1, [r7, #4]
 80055a2:	33e0      	adds	r3, #224	; 0xe0
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	440b      	add	r3, r1
 80055a8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055be:	f3ef 8305 	mrs	r3, IPSR
 80055c2:	607b      	str	r3, [r7, #4]
  return(result);
 80055c4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	bf14      	ite	ne
 80055ca:	2301      	movne	r3, #1
 80055cc:	2300      	moveq	r3, #0
 80055ce:	b2db      	uxtb	r3, r3
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80055e8:	2300      	movs	r3, #0
 80055ea:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <osMessagePut+0x1e>
    ticks = 1;
 80055f6:	2301      	movs	r3, #1
 80055f8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80055fa:	f7ff ffdd 	bl	80055b8 <inHandlerMode>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d018      	beq.n	8005636 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005604:	f107 0210 	add.w	r2, r7, #16
 8005608:	f107 0108 	add.w	r1, r7, #8
 800560c:	2300      	movs	r3, #0
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f000 f9f2 	bl	80059f8 <xQueueGenericSendFromISR>
 8005614:	4603      	mov	r3, r0
 8005616:	2b01      	cmp	r3, #1
 8005618:	d001      	beq.n	800561e <osMessagePut+0x42>
      return osErrorOS;
 800561a:	23ff      	movs	r3, #255	; 0xff
 800561c:	e018      	b.n	8005650 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d014      	beq.n	800564e <osMessagePut+0x72>
 8005624:	4b0c      	ldr	r3, [pc, #48]	; (8005658 <osMessagePut+0x7c>)
 8005626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	f3bf 8f6f 	isb	sy
 8005634:	e00b      	b.n	800564e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005636:	f107 0108 	add.w	r1, r7, #8
 800563a:	2300      	movs	r3, #0
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f000 f8c0 	bl	80057c4 <xQueueGenericSend>
 8005644:	4603      	mov	r3, r0
 8005646:	2b01      	cmp	r3, #1
 8005648:	d001      	beq.n	800564e <osMessagePut+0x72>
      return osErrorOS;
 800564a:	23ff      	movs	r3, #255	; 0xff
 800564c:	e000      	b.n	8005650 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3718      	adds	r7, #24
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	e000ed04 	.word	0xe000ed04

0800565c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f103 0208 	add.w	r2, r3, #8
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f04f 32ff 	mov.w	r2, #4294967295
 8005674:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f103 0208 	add.w	r2, r3, #8
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f103 0208 	add.w	r2, r3, #8
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056b6:	b480      	push	{r7}
 80056b8:	b085      	sub	sp, #20
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	1c5a      	adds	r2, r3, #1
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	601a      	str	r2, [r3, #0]
}
 80056f2:	bf00      	nop
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056fe:	b480      	push	{r7}
 8005700:	b085      	sub	sp, #20
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005714:	d103      	bne.n	800571e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	e00c      	b.n	8005738 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	3308      	adds	r3, #8
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	e002      	b.n	800572c <vListInsert+0x2e>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	429a      	cmp	r2, r3
 8005736:	d2f6      	bcs.n	8005726 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	601a      	str	r2, [r3, #0]
}
 8005764:	bf00      	nop
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6892      	ldr	r2, [r2, #8]
 8005786:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	6852      	ldr	r2, [r2, #4]
 8005790:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	429a      	cmp	r2, r3
 800579a:	d103      	bne.n	80057a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689a      	ldr	r2, [r3, #8]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	1e5a      	subs	r2, r3, #1
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08e      	sub	sp, #56	; 0x38
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80057d2:	2300      	movs	r3, #0
 80057d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10a      	bne.n	80057f6 <xQueueGenericSend+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	627b      	str	r3, [r7, #36]	; 0x24
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80057f2:	bf00      	nop
 80057f4:	e7fe      	b.n	80057f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d103      	bne.n	8005804 <xQueueGenericSend+0x40>
 80057fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <xQueueGenericSend+0x44>
 8005804:	2301      	movs	r3, #1
 8005806:	e000      	b.n	800580a <xQueueGenericSend+0x46>
 8005808:	2300      	movs	r3, #0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10a      	bne.n	8005824 <xQueueGenericSend+0x60>
	__asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	623b      	str	r3, [r7, #32]
}
 8005820:	bf00      	nop
 8005822:	e7fe      	b.n	8005822 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2b02      	cmp	r3, #2
 8005828:	d103      	bne.n	8005832 <xQueueGenericSend+0x6e>
 800582a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800582e:	2b01      	cmp	r3, #1
 8005830:	d101      	bne.n	8005836 <xQueueGenericSend+0x72>
 8005832:	2301      	movs	r3, #1
 8005834:	e000      	b.n	8005838 <xQueueGenericSend+0x74>
 8005836:	2300      	movs	r3, #0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10a      	bne.n	8005852 <xQueueGenericSend+0x8e>
	__asm volatile
 800583c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005840:	f383 8811 	msr	BASEPRI, r3
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	61fb      	str	r3, [r7, #28]
}
 800584e:	bf00      	nop
 8005850:	e7fe      	b.n	8005850 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005852:	f001 f93d 	bl	8006ad0 <xTaskGetSchedulerState>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d102      	bne.n	8005862 <xQueueGenericSend+0x9e>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <xQueueGenericSend+0xa2>
 8005862:	2301      	movs	r3, #1
 8005864:	e000      	b.n	8005868 <xQueueGenericSend+0xa4>
 8005866:	2300      	movs	r3, #0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10a      	bne.n	8005882 <xQueueGenericSend+0xbe>
	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	61bb      	str	r3, [r7, #24]
}
 800587e:	bf00      	nop
 8005880:	e7fe      	b.n	8005880 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005882:	f001 fb5f 	bl	8006f44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800588a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588e:	429a      	cmp	r2, r3
 8005890:	d302      	bcc.n	8005898 <xQueueGenericSend+0xd4>
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b02      	cmp	r3, #2
 8005896:	d145      	bne.n	8005924 <xQueueGenericSend+0x160>
			{
				traceQUEUE_SEND( pxQueue );

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589c:	62fb      	str	r3, [r7, #44]	; 0x2c

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	68b9      	ldr	r1, [r7, #8]
 80058a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058a4:	f000 f95a 	bl	8005b5c <prvCopyDataToQueue>
 80058a8:	62b8      	str	r0, [r7, #40]	; 0x28

					if( pxQueue->pxQueueSetContainer != NULL )
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d014      	beq.n	80058dc <xQueueGenericSend+0x118>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d102      	bne.n	80058be <xQueueGenericSend+0xfa>
 80058b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d12e      	bne.n	800591c <xQueueGenericSend+0x158>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 80058be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058c0:	f000 fa2d 	bl	8005d1e <prvNotifyQueueSetContainer>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d028      	beq.n	800591c <xQueueGenericSend+0x158>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 80058ca:	4b4a      	ldr	r3, [pc, #296]	; (80059f4 <xQueueGenericSend+0x230>)
 80058cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	e01f      	b.n	800591c <xQueueGenericSend+0x158>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d010      	beq.n	8005906 <xQueueGenericSend+0x142>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e6:	3324      	adds	r3, #36	; 0x24
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 ff31 	bl	8006750 <xTaskRemoveFromEventList>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d013      	beq.n	800591c <xQueueGenericSend+0x158>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 80058f4:	4b3f      	ldr	r3, [pc, #252]	; (80059f4 <xQueueGenericSend+0x230>)
 80058f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	e00a      	b.n	800591c <xQueueGenericSend+0x158>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8005906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005908:	2b00      	cmp	r3, #0
 800590a:	d007      	beq.n	800591c <xQueueGenericSend+0x158>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 800590c:	4b39      	ldr	r3, [pc, #228]	; (80059f4 <xQueueGenericSend+0x230>)
 800590e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800591c:	f001 fb42 	bl	8006fa4 <vPortExitCritical>
				return pdPASS;
 8005920:	2301      	movs	r3, #1
 8005922:	e063      	b.n	80059ec <xQueueGenericSend+0x228>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d103      	bne.n	8005932 <xQueueGenericSend+0x16e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800592a:	f001 fb3b 	bl	8006fa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800592e:	2300      	movs	r3, #0
 8005930:	e05c      	b.n	80059ec <xQueueGenericSend+0x228>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005934:	2b00      	cmp	r3, #0
 8005936:	d106      	bne.n	8005946 <xQueueGenericSend+0x182>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005938:	f107 0310 	add.w	r3, r7, #16
 800593c:	4618      	mov	r0, r3
 800593e:	f000 ff69 	bl	8006814 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005942:	2301      	movs	r3, #1
 8005944:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005946:	f001 fb2d 	bl	8006fa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800594a:	f000 fd19 	bl	8006380 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800594e:	f001 faf9 	bl	8006f44 <vPortEnterCritical>
 8005952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005954:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005958:	b25b      	sxtb	r3, r3
 800595a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595e:	d103      	bne.n	8005968 <xQueueGenericSend+0x1a4>
 8005960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005962:	2200      	movs	r2, #0
 8005964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800596e:	b25b      	sxtb	r3, r3
 8005970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005974:	d103      	bne.n	800597e <xQueueGenericSend+0x1ba>
 8005976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800597e:	f001 fb11 	bl	8006fa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005982:	1d3a      	adds	r2, r7, #4
 8005984:	f107 0310 	add.w	r3, r7, #16
 8005988:	4611      	mov	r1, r2
 800598a:	4618      	mov	r0, r3
 800598c:	f000 ff58 	bl	8006840 <xTaskCheckForTimeOut>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d124      	bne.n	80059e0 <xQueueGenericSend+0x21c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005996:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005998:	f000 f9a9 	bl	8005cee <prvIsQueueFull>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d018      	beq.n	80059d4 <xQueueGenericSend+0x210>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80059a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a4:	3310      	adds	r3, #16
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	4611      	mov	r1, r2
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 feac 	bl	8006708 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80059b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059b2:	f000 f93d 	bl	8005c30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80059b6:	f000 fcf1 	bl	800639c <xTaskResumeAll>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f47f af60 	bne.w	8005882 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80059c2:	4b0c      	ldr	r3, [pc, #48]	; (80059f4 <xQueueGenericSend+0x230>)
 80059c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	e756      	b.n	8005882 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80059d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059d6:	f000 f92b 	bl	8005c30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059da:	f000 fcdf 	bl	800639c <xTaskResumeAll>
 80059de:	e750      	b.n	8005882 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80059e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059e2:	f000 f925 	bl	8005c30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059e6:	f000 fcd9 	bl	800639c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80059ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3738      	adds	r7, #56	; 0x38
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	e000ed04 	.word	0xe000ed04

080059f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b090      	sub	sp, #64	; 0x40
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
 8005a04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10a      	bne.n	8005a26 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a14:	f383 8811 	msr	BASEPRI, r3
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a22:	bf00      	nop
 8005a24:	e7fe      	b.n	8005a24 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d103      	bne.n	8005a34 <xQueueGenericSendFromISR+0x3c>
 8005a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <xQueueGenericSendFromISR+0x40>
 8005a34:	2301      	movs	r3, #1
 8005a36:	e000      	b.n	8005a3a <xQueueGenericSendFromISR+0x42>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10a      	bne.n	8005a54 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a50:	bf00      	nop
 8005a52:	e7fe      	b.n	8005a52 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d103      	bne.n	8005a62 <xQueueGenericSendFromISR+0x6a>
 8005a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <xQueueGenericSendFromISR+0x6e>
 8005a62:	2301      	movs	r3, #1
 8005a64:	e000      	b.n	8005a68 <xQueueGenericSendFromISR+0x70>
 8005a66:	2300      	movs	r3, #0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10a      	bne.n	8005a82 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a70:	f383 8811 	msr	BASEPRI, r3
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	623b      	str	r3, [r7, #32]
}
 8005a7e:	bf00      	nop
 8005a80:	e7fe      	b.n	8005a80 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a82:	f001 fb41 	bl	8007108 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a86:	f3ef 8211 	mrs	r2, BASEPRI
 8005a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8e:	f383 8811 	msr	BASEPRI, r3
 8005a92:	f3bf 8f6f 	isb	sy
 8005a96:	f3bf 8f4f 	dsb	sy
 8005a9a:	61fa      	str	r2, [r7, #28]
 8005a9c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005a9e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005aa0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d302      	bcc.n	8005ab4 <xQueueGenericSendFromISR+0xbc>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d146      	bne.n	8005b42 <xQueueGenericSendFromISR+0x14a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	68b9      	ldr	r1, [r7, #8]
 8005ac8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005aca:	f000 f847 	bl	8005b5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ace:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad6:	d129      	bne.n	8005b2c <xQueueGenericSendFromISR+0x134>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8005ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d012      	beq.n	8005b06 <xQueueGenericSendFromISR+0x10e>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d102      	bne.n	8005aec <xQueueGenericSendFromISR+0xf4>
 8005ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d127      	bne.n	8005b3c <xQueueGenericSendFromISR+0x144>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8005aec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005aee:	f000 f916 	bl	8005d1e <prvNotifyQueueSetContainer>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d021      	beq.n	8005b3c <xQueueGenericSendFromISR+0x144>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d01e      	beq.n	8005b3c <xQueueGenericSendFromISR+0x144>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	e01a      	b.n	8005b3c <xQueueGenericSendFromISR+0x144>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d016      	beq.n	8005b3c <xQueueGenericSendFromISR+0x144>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b10:	3324      	adds	r3, #36	; 0x24
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 fe1c 	bl	8006750 <xTaskRemoveFromEventList>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00e      	beq.n	8005b3c <xQueueGenericSendFromISR+0x144>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00b      	beq.n	8005b3c <xQueueGenericSendFromISR+0x144>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	e007      	b.n	8005b3c <xQueueGenericSendFromISR+0x144>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005b30:	3301      	adds	r3, #1
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	b25a      	sxtb	r2, r3
 8005b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005b40:	e001      	b.n	8005b46 <xQueueGenericSendFromISR+0x14e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b42:	2300      	movs	r3, #0
 8005b44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b48:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005b50:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3740      	adds	r7, #64	; 0x40
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10d      	bne.n	8005b96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d14d      	bne.n	8005c1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 ffc0 	bl	8006b0c <xTaskPriorityDisinherit>
 8005b8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	609a      	str	r2, [r3, #8]
 8005b94:	e043      	b.n	8005c1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d119      	bne.n	8005bd0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6858      	ldr	r0, [r3, #4]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	68b9      	ldr	r1, [r7, #8]
 8005ba8:	f001 fe08 	bl	80077bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb4:	441a      	add	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d32b      	bcc.n	8005c1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	605a      	str	r2, [r3, #4]
 8005bce:	e026      	b.n	8005c1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	68d8      	ldr	r0, [r3, #12]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd8:	461a      	mov	r2, r3
 8005bda:	68b9      	ldr	r1, [r7, #8]
 8005bdc:	f001 fdee 	bl	80077bc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be8:	425b      	negs	r3, r3
 8005bea:	441a      	add	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	68da      	ldr	r2, [r3, #12]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d207      	bcs.n	8005c0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	689a      	ldr	r2, [r3, #8]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c04:	425b      	negs	r3, r3
 8005c06:	441a      	add	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d105      	bne.n	8005c1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	1c5a      	adds	r2, r3, #1
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c26:	697b      	ldr	r3, [r7, #20]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3718      	adds	r7, #24
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c38:	f001 f984 	bl	8006f44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c44:	e01e      	b.n	8005c84 <prvUnlockQueue+0x54>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d008      	beq.n	8005c60 <prvUnlockQueue+0x30>
				{
					if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f865 	bl	8005d1e <prvNotifyQueueSetContainer>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d010      	beq.n	8005c7c <prvUnlockQueue+0x4c>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 8005c5a:	f000 fe53 	bl	8006904 <vTaskMissedYield>
 8005c5e:	e00d      	b.n	8005c7c <prvUnlockQueue+0x4c>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d012      	beq.n	8005c8e <prvUnlockQueue+0x5e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	3324      	adds	r3, #36	; 0x24
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 fd6f 	bl	8006750 <xTaskRemoveFromEventList>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <prvUnlockQueue+0x4c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 8005c78:	f000 fe44 	bl	8006904 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	dcdc      	bgt.n	8005c46 <prvUnlockQueue+0x16>
 8005c8c:	e000      	b.n	8005c90 <prvUnlockQueue+0x60>
						break;
 8005c8e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	22ff      	movs	r2, #255	; 0xff
 8005c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005c98:	f001 f984 	bl	8006fa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c9c:	f001 f952 	bl	8006f44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ca6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ca8:	e011      	b.n	8005cce <prvUnlockQueue+0x9e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d012      	beq.n	8005cd8 <prvUnlockQueue+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	3310      	adds	r3, #16
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 fd4a 	bl	8006750 <xTaskRemoveFromEventList>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <prvUnlockQueue+0x96>
				{
					vTaskMissedYield();
 8005cc2:	f000 fe1f 	bl	8006904 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005cc6:	7bbb      	ldrb	r3, [r7, #14]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	dce9      	bgt.n	8005caa <prvUnlockQueue+0x7a>
 8005cd6:	e000      	b.n	8005cda <prvUnlockQueue+0xaa>
			}
			else
			{
				break;
 8005cd8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	22ff      	movs	r2, #255	; 0xff
 8005cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005ce2:	f001 f95f 	bl	8006fa4 <vPortExitCritical>
}
 8005ce6:	bf00      	nop
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b084      	sub	sp, #16
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005cf6:	f001 f925 	bl	8006f44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d102      	bne.n	8005d0c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d06:	2301      	movs	r3, #1
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	e001      	b.n	8005d10 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d10:	f001 f948 	bl	8006fa4 <vPortExitCritical>

	return xReturn;
 8005d14:	68fb      	ldr	r3, [r7, #12]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
	{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b088      	sub	sp, #32
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d2a:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10a      	bne.n	8005d4c <prvNotifyQueueSetContainer+0x2e>
	__asm volatile
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	613b      	str	r3, [r7, #16]
}
 8005d48:	bf00      	nop
 8005d4a:	e7fe      	b.n	8005d4a <prvNotifyQueueSetContainer+0x2c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d30a      	bcc.n	8005d6e <prvNotifyQueueSetContainer+0x50>
	__asm volatile
 8005d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5c:	f383 8811 	msr	BASEPRI, r3
 8005d60:	f3bf 8f6f 	isb	sy
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	60fb      	str	r3, [r7, #12]
}
 8005d6a:	bf00      	nop
 8005d6c:	e7fe      	b.n	8005d6c <prvNotifyQueueSetContainer+0x4e>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d225      	bcs.n	8005dc6 <prvNotifyQueueSetContainer+0xa8>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d80:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8005d82:	1d3b      	adds	r3, r7, #4
 8005d84:	2200      	movs	r2, #0
 8005d86:	4619      	mov	r1, r3
 8005d88:	69b8      	ldr	r0, [r7, #24]
 8005d8a:	f7ff fee7 	bl	8005b5c <prvCopyDataToQueue>
 8005d8e:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 8005d90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d98:	d10e      	bne.n	8005db8 <prvNotifyQueueSetContainer+0x9a>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d011      	beq.n	8005dc6 <prvNotifyQueueSetContainer+0xa8>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	3324      	adds	r3, #36	; 0x24
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 fcd2 	bl	8006750 <xTaskRemoveFromEventList>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d009      	beq.n	8005dc6 <prvNotifyQueueSetContainer+0xa8>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 8005db2:	2301      	movs	r3, #1
 8005db4:	61fb      	str	r3, [r7, #28]
 8005db6:	e006      	b.n	8005dc6 <prvNotifyQueueSetContainer+0xa8>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005db8:	7dfb      	ldrb	r3, [r7, #23]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	b25a      	sxtb	r2, r3
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005dc6:	69fb      	ldr	r3, [r7, #28]
	}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3720      	adds	r7, #32
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08e      	sub	sp, #56	; 0x38
 8005dd4:	af04      	add	r7, sp, #16
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10a      	bne.n	8005dfa <xTaskCreateStatic+0x2a>
	__asm volatile
 8005de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	623b      	str	r3, [r7, #32]
}
 8005df6:	bf00      	nop
 8005df8:	e7fe      	b.n	8005df8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10a      	bne.n	8005e16 <xTaskCreateStatic+0x46>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	61fb      	str	r3, [r7, #28]
}
 8005e12:	bf00      	nop
 8005e14:	e7fe      	b.n	8005e14 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e16:	23a0      	movs	r3, #160	; 0xa0
 8005e18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	2ba0      	cmp	r3, #160	; 0xa0
 8005e1e:	d00a      	beq.n	8005e36 <xTaskCreateStatic+0x66>
	__asm volatile
 8005e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	61bb      	str	r3, [r7, #24]
}
 8005e32:	bf00      	nop
 8005e34:	e7fe      	b.n	8005e34 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e36:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d01e      	beq.n	8005e7c <xTaskCreateStatic+0xac>
 8005e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d01b      	beq.n	8005e7c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	2202      	movs	r2, #2
 8005e52:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e56:	2300      	movs	r3, #0
 8005e58:	9303      	str	r3, [sp, #12]
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	9302      	str	r3, [sp, #8]
 8005e5e:	f107 0314 	add.w	r3, r7, #20
 8005e62:	9301      	str	r3, [sp, #4]
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	68b9      	ldr	r1, [r7, #8]
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 f850 	bl	8005f14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e76:	f000 f8eb 	bl	8006050 <prvAddNewTaskToReadyList>
 8005e7a:	e001      	b.n	8005e80 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e80:	697b      	ldr	r3, [r7, #20]
	}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3728      	adds	r7, #40	; 0x28
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b08c      	sub	sp, #48	; 0x30
 8005e8e:	af04      	add	r7, sp, #16
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	603b      	str	r3, [r7, #0]
 8005e96:	4613      	mov	r3, r2
 8005e98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e9a:	88fb      	ldrh	r3, [r7, #6]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f001 f972 	bl	8007188 <pvPortMalloc>
 8005ea4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00e      	beq.n	8005eca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005eac:	20a0      	movs	r0, #160	; 0xa0
 8005eae:	f001 f96b 	bl	8007188 <pvPortMalloc>
 8005eb2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	631a      	str	r2, [r3, #48]	; 0x30
 8005ec0:	e005      	b.n	8005ece <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ec2:	6978      	ldr	r0, [r7, #20]
 8005ec4:	f001 fa2c 	bl	8007320 <vPortFree>
 8005ec8:	e001      	b.n	8005ece <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d017      	beq.n	8005f04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005edc:	88fa      	ldrh	r2, [r7, #6]
 8005ede:	2300      	movs	r3, #0
 8005ee0:	9303      	str	r3, [sp, #12]
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	9302      	str	r3, [sp, #8]
 8005ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee8:	9301      	str	r3, [sp, #4]
 8005eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	68b9      	ldr	r1, [r7, #8]
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 f80e 	bl	8005f14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ef8:	69f8      	ldr	r0, [r7, #28]
 8005efa:	f000 f8a9 	bl	8006050 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005efe:	2301      	movs	r3, #1
 8005f00:	61bb      	str	r3, [r7, #24]
 8005f02:	e002      	b.n	8005f0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f04:	f04f 33ff 	mov.w	r3, #4294967295
 8005f08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f0a:	69bb      	ldr	r3, [r7, #24]
	}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3720      	adds	r7, #32
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b088      	sub	sp, #32
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
 8005f20:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	f023 0307 	bic.w	r3, r3, #7
 8005f3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <prvInitialiseNewTask+0x48>
	__asm volatile
 8005f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	617b      	str	r3, [r7, #20]
}
 8005f58:	bf00      	nop
 8005f5a:	e7fe      	b.n	8005f5a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d01f      	beq.n	8005fa2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f62:	2300      	movs	r3, #0
 8005f64:	61fb      	str	r3, [r7, #28]
 8005f66:	e012      	b.n	8005f8e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	7819      	ldrb	r1, [r3, #0]
 8005f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	4413      	add	r3, r2
 8005f76:	3334      	adds	r3, #52	; 0x34
 8005f78:	460a      	mov	r2, r1
 8005f7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	4413      	add	r3, r2
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d006      	beq.n	8005f96 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	61fb      	str	r3, [r7, #28]
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	2b0f      	cmp	r3, #15
 8005f92:	d9e9      	bls.n	8005f68 <prvInitialiseNewTask+0x54>
 8005f94:	e000      	b.n	8005f98 <prvInitialiseNewTask+0x84>
			{
				break;
 8005f96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fa0:	e003      	b.n	8005faa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fac:	2b06      	cmp	r3, #6
 8005fae:	d901      	bls.n	8005fb4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005fb0:	2306      	movs	r3, #6
 8005fb2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fb8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fbe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	3304      	adds	r3, #4
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7ff fb66 	bl	800569c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	3318      	adds	r3, #24
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7ff fb61 	bl	800569c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe2:	f1c3 0207 	rsb	r2, r3, #7
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006002:	334c      	adds	r3, #76	; 0x4c
 8006004:	224c      	movs	r2, #76	; 0x4c
 8006006:	2100      	movs	r1, #0
 8006008:	4618      	mov	r0, r3
 800600a:	f001 fb53 	bl	80076b4 <memset>
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	4a0c      	ldr	r2, [pc, #48]	; (8006044 <prvInitialiseNewTask+0x130>)
 8006012:	651a      	str	r2, [r3, #80]	; 0x50
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	4a0c      	ldr	r2, [pc, #48]	; (8006048 <prvInitialiseNewTask+0x134>)
 8006018:	655a      	str	r2, [r3, #84]	; 0x54
 800601a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601c:	4a0b      	ldr	r2, [pc, #44]	; (800604c <prvInitialiseNewTask+0x138>)
 800601e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	68f9      	ldr	r1, [r7, #12]
 8006024:	69b8      	ldr	r0, [r7, #24]
 8006026:	f000 fe5d 	bl	8006ce4 <pxPortInitialiseStack>
 800602a:	4602      	mov	r2, r0
 800602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006032:	2b00      	cmp	r3, #0
 8006034:	d002      	beq.n	800603c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800603a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800603c:	bf00      	nop
 800603e:	3720      	adds	r7, #32
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	200045e0 	.word	0x200045e0
 8006048:	20004648 	.word	0x20004648
 800604c:	200046b0 	.word	0x200046b0

08006050 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006058:	f000 ff74 	bl	8006f44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800605c:	4b2a      	ldr	r3, [pc, #168]	; (8006108 <prvAddNewTaskToReadyList+0xb8>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	3301      	adds	r3, #1
 8006062:	4a29      	ldr	r2, [pc, #164]	; (8006108 <prvAddNewTaskToReadyList+0xb8>)
 8006064:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006066:	4b29      	ldr	r3, [pc, #164]	; (800610c <prvAddNewTaskToReadyList+0xbc>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d109      	bne.n	8006082 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800606e:	4a27      	ldr	r2, [pc, #156]	; (800610c <prvAddNewTaskToReadyList+0xbc>)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006074:	4b24      	ldr	r3, [pc, #144]	; (8006108 <prvAddNewTaskToReadyList+0xb8>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d110      	bne.n	800609e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800607c:	f000 fc66 	bl	800694c <prvInitialiseTaskLists>
 8006080:	e00d      	b.n	800609e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006082:	4b23      	ldr	r3, [pc, #140]	; (8006110 <prvAddNewTaskToReadyList+0xc0>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d109      	bne.n	800609e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800608a:	4b20      	ldr	r3, [pc, #128]	; (800610c <prvAddNewTaskToReadyList+0xbc>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006094:	429a      	cmp	r2, r3
 8006096:	d802      	bhi.n	800609e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006098:	4a1c      	ldr	r2, [pc, #112]	; (800610c <prvAddNewTaskToReadyList+0xbc>)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800609e:	4b1d      	ldr	r3, [pc, #116]	; (8006114 <prvAddNewTaskToReadyList+0xc4>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3301      	adds	r3, #1
 80060a4:	4a1b      	ldr	r2, [pc, #108]	; (8006114 <prvAddNewTaskToReadyList+0xc4>)
 80060a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ac:	2201      	movs	r2, #1
 80060ae:	409a      	lsls	r2, r3
 80060b0:	4b19      	ldr	r3, [pc, #100]	; (8006118 <prvAddNewTaskToReadyList+0xc8>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	4a18      	ldr	r2, [pc, #96]	; (8006118 <prvAddNewTaskToReadyList+0xc8>)
 80060b8:	6013      	str	r3, [r2, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060be:	4613      	mov	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4a15      	ldr	r2, [pc, #84]	; (800611c <prvAddNewTaskToReadyList+0xcc>)
 80060c8:	441a      	add	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	3304      	adds	r3, #4
 80060ce:	4619      	mov	r1, r3
 80060d0:	4610      	mov	r0, r2
 80060d2:	f7ff faf0 	bl	80056b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060d6:	f000 ff65 	bl	8006fa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060da:	4b0d      	ldr	r3, [pc, #52]	; (8006110 <prvAddNewTaskToReadyList+0xc0>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00e      	beq.n	8006100 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060e2:	4b0a      	ldr	r3, [pc, #40]	; (800610c <prvAddNewTaskToReadyList+0xbc>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d207      	bcs.n	8006100 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060f0:	4b0b      	ldr	r3, [pc, #44]	; (8006120 <prvAddNewTaskToReadyList+0xd0>)
 80060f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006100:	bf00      	nop
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	200005a8 	.word	0x200005a8
 800610c:	200004a8 	.word	0x200004a8
 8006110:	200005b4 	.word	0x200005b4
 8006114:	200005c4 	.word	0x200005c4
 8006118:	200005b0 	.word	0x200005b0
 800611c:	200004ac 	.word	0x200004ac
 8006120:	e000ed04 	.word	0xe000ed04

08006124 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800612c:	f000 ff0a 	bl	8006f44 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d102      	bne.n	800613c <vTaskDelete+0x18>
 8006136:	4b39      	ldr	r3, [pc, #228]	; (800621c <vTaskDelete+0xf8>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	e000      	b.n	800613e <vTaskDelete+0x1a>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	3304      	adds	r3, #4
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff fb13 	bl	8005770 <uxListRemove>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d115      	bne.n	800617c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006154:	4932      	ldr	r1, [pc, #200]	; (8006220 <vTaskDelete+0xfc>)
 8006156:	4613      	mov	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	440b      	add	r3, r1
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10a      	bne.n	800617c <vTaskDelete+0x58>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616a:	2201      	movs	r2, #1
 800616c:	fa02 f303 	lsl.w	r3, r2, r3
 8006170:	43da      	mvns	r2, r3
 8006172:	4b2c      	ldr	r3, [pc, #176]	; (8006224 <vTaskDelete+0x100>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4013      	ands	r3, r2
 8006178:	4a2a      	ldr	r2, [pc, #168]	; (8006224 <vTaskDelete+0x100>)
 800617a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006180:	2b00      	cmp	r3, #0
 8006182:	d004      	beq.n	800618e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3318      	adds	r3, #24
 8006188:	4618      	mov	r0, r3
 800618a:	f7ff faf1 	bl	8005770 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800618e:	4b26      	ldr	r3, [pc, #152]	; (8006228 <vTaskDelete+0x104>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3301      	adds	r3, #1
 8006194:	4a24      	ldr	r2, [pc, #144]	; (8006228 <vTaskDelete+0x104>)
 8006196:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006198:	4b20      	ldr	r3, [pc, #128]	; (800621c <vTaskDelete+0xf8>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d10b      	bne.n	80061ba <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	3304      	adds	r3, #4
 80061a6:	4619      	mov	r1, r3
 80061a8:	4820      	ldr	r0, [pc, #128]	; (800622c <vTaskDelete+0x108>)
 80061aa:	f7ff fa84 	bl	80056b6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80061ae:	4b20      	ldr	r3, [pc, #128]	; (8006230 <vTaskDelete+0x10c>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3301      	adds	r3, #1
 80061b4:	4a1e      	ldr	r2, [pc, #120]	; (8006230 <vTaskDelete+0x10c>)
 80061b6:	6013      	str	r3, [r2, #0]
 80061b8:	e009      	b.n	80061ce <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80061ba:	4b1e      	ldr	r3, [pc, #120]	; (8006234 <vTaskDelete+0x110>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3b01      	subs	r3, #1
 80061c0:	4a1c      	ldr	r2, [pc, #112]	; (8006234 <vTaskDelete+0x110>)
 80061c2:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 fc2f 	bl	8006a28 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80061ca:	f000 fc61 	bl	8006a90 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80061ce:	f000 fee9 	bl	8006fa4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80061d2:	4b19      	ldr	r3, [pc, #100]	; (8006238 <vTaskDelete+0x114>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d01b      	beq.n	8006212 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 80061da:	4b10      	ldr	r3, [pc, #64]	; (800621c <vTaskDelete+0xf8>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d116      	bne.n	8006212 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80061e4:	4b15      	ldr	r3, [pc, #84]	; (800623c <vTaskDelete+0x118>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00a      	beq.n	8006202 <vTaskDelete+0xde>
	__asm volatile
 80061ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f0:	f383 8811 	msr	BASEPRI, r3
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	60bb      	str	r3, [r7, #8]
}
 80061fe:	bf00      	nop
 8006200:	e7fe      	b.n	8006200 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8006202:	4b0f      	ldr	r3, [pc, #60]	; (8006240 <vTaskDelete+0x11c>)
 8006204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006212:	bf00      	nop
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	200004a8 	.word	0x200004a8
 8006220:	200004ac 	.word	0x200004ac
 8006224:	200005b0 	.word	0x200005b0
 8006228:	200005c4 	.word	0x200005c4
 800622c:	2000057c 	.word	0x2000057c
 8006230:	20000590 	.word	0x20000590
 8006234:	200005a8 	.word	0x200005a8
 8006238:	200005b4 	.word	0x200005b4
 800623c:	200005d0 	.word	0x200005d0
 8006240:	e000ed04 	.word	0xe000ed04

08006244 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800624c:	2300      	movs	r3, #0
 800624e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d017      	beq.n	8006286 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006256:	4b13      	ldr	r3, [pc, #76]	; (80062a4 <vTaskDelay+0x60>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00a      	beq.n	8006274 <vTaskDelay+0x30>
	__asm volatile
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	60bb      	str	r3, [r7, #8]
}
 8006270:	bf00      	nop
 8006272:	e7fe      	b.n	8006272 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006274:	f000 f884 	bl	8006380 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006278:	2100      	movs	r1, #0
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fccc 	bl	8006c18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006280:	f000 f88c 	bl	800639c <xTaskResumeAll>
 8006284:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d107      	bne.n	800629c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800628c:	4b06      	ldr	r3, [pc, #24]	; (80062a8 <vTaskDelay+0x64>)
 800628e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006292:	601a      	str	r2, [r3, #0]
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800629c:	bf00      	nop
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	200005d0 	.word	0x200005d0
 80062a8:	e000ed04 	.word	0xe000ed04

080062ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b08a      	sub	sp, #40	; 0x28
 80062b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80062b2:	2300      	movs	r3, #0
 80062b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80062b6:	2300      	movs	r3, #0
 80062b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80062ba:	463a      	mov	r2, r7
 80062bc:	1d39      	adds	r1, r7, #4
 80062be:	f107 0308 	add.w	r3, r7, #8
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7fa f950 	bl	8000568 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80062c8:	6839      	ldr	r1, [r7, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	9202      	str	r2, [sp, #8]
 80062d0:	9301      	str	r3, [sp, #4]
 80062d2:	2300      	movs	r3, #0
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	2300      	movs	r3, #0
 80062d8:	460a      	mov	r2, r1
 80062da:	4921      	ldr	r1, [pc, #132]	; (8006360 <vTaskStartScheduler+0xb4>)
 80062dc:	4821      	ldr	r0, [pc, #132]	; (8006364 <vTaskStartScheduler+0xb8>)
 80062de:	f7ff fd77 	bl	8005dd0 <xTaskCreateStatic>
 80062e2:	4603      	mov	r3, r0
 80062e4:	4a20      	ldr	r2, [pc, #128]	; (8006368 <vTaskStartScheduler+0xbc>)
 80062e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80062e8:	4b1f      	ldr	r3, [pc, #124]	; (8006368 <vTaskStartScheduler+0xbc>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d002      	beq.n	80062f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80062f0:	2301      	movs	r3, #1
 80062f2:	617b      	str	r3, [r7, #20]
 80062f4:	e001      	b.n	80062fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80062f6:	2300      	movs	r3, #0
 80062f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d11b      	bne.n	8006338 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	613b      	str	r3, [r7, #16]
}
 8006312:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006314:	4b15      	ldr	r3, [pc, #84]	; (800636c <vTaskStartScheduler+0xc0>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	334c      	adds	r3, #76	; 0x4c
 800631a:	4a15      	ldr	r2, [pc, #84]	; (8006370 <vTaskStartScheduler+0xc4>)
 800631c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800631e:	4b15      	ldr	r3, [pc, #84]	; (8006374 <vTaskStartScheduler+0xc8>)
 8006320:	f04f 32ff 	mov.w	r2, #4294967295
 8006324:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006326:	4b14      	ldr	r3, [pc, #80]	; (8006378 <vTaskStartScheduler+0xcc>)
 8006328:	2201      	movs	r2, #1
 800632a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800632c:	4b13      	ldr	r3, [pc, #76]	; (800637c <vTaskStartScheduler+0xd0>)
 800632e:	2200      	movs	r2, #0
 8006330:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006332:	f000 fd65 	bl	8006e00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006336:	e00e      	b.n	8006356 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633e:	d10a      	bne.n	8006356 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006344:	f383 8811 	msr	BASEPRI, r3
 8006348:	f3bf 8f6f 	isb	sy
 800634c:	f3bf 8f4f 	dsb	sy
 8006350:	60fb      	str	r3, [r7, #12]
}
 8006352:	bf00      	nop
 8006354:	e7fe      	b.n	8006354 <vTaskStartScheduler+0xa8>
}
 8006356:	bf00      	nop
 8006358:	3718      	adds	r7, #24
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	08007898 	.word	0x08007898
 8006364:	0800691d 	.word	0x0800691d
 8006368:	200005cc 	.word	0x200005cc
 800636c:	200004a8 	.word	0x200004a8
 8006370:	2000005c 	.word	0x2000005c
 8006374:	200005c8 	.word	0x200005c8
 8006378:	200005b4 	.word	0x200005b4
 800637c:	200005ac 	.word	0x200005ac

08006380 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006380:	b480      	push	{r7}
 8006382:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006384:	4b04      	ldr	r3, [pc, #16]	; (8006398 <vTaskSuspendAll+0x18>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3301      	adds	r3, #1
 800638a:	4a03      	ldr	r2, [pc, #12]	; (8006398 <vTaskSuspendAll+0x18>)
 800638c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800638e:	bf00      	nop
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	200005d0 	.word	0x200005d0

0800639c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80063a6:	2300      	movs	r3, #0
 80063a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80063aa:	4b41      	ldr	r3, [pc, #260]	; (80064b0 <xTaskResumeAll+0x114>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10a      	bne.n	80063c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80063b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	603b      	str	r3, [r7, #0]
}
 80063c4:	bf00      	nop
 80063c6:	e7fe      	b.n	80063c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80063c8:	f000 fdbc 	bl	8006f44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80063cc:	4b38      	ldr	r3, [pc, #224]	; (80064b0 <xTaskResumeAll+0x114>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	3b01      	subs	r3, #1
 80063d2:	4a37      	ldr	r2, [pc, #220]	; (80064b0 <xTaskResumeAll+0x114>)
 80063d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063d6:	4b36      	ldr	r3, [pc, #216]	; (80064b0 <xTaskResumeAll+0x114>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d161      	bne.n	80064a2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063de:	4b35      	ldr	r3, [pc, #212]	; (80064b4 <xTaskResumeAll+0x118>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d05d      	beq.n	80064a2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063e6:	e02e      	b.n	8006446 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063e8:	4b33      	ldr	r3, [pc, #204]	; (80064b8 <xTaskResumeAll+0x11c>)
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	3318      	adds	r3, #24
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7ff f9bb 	bl	8005770 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	3304      	adds	r3, #4
 80063fe:	4618      	mov	r0, r3
 8006400:	f7ff f9b6 	bl	8005770 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006408:	2201      	movs	r2, #1
 800640a:	409a      	lsls	r2, r3
 800640c:	4b2b      	ldr	r3, [pc, #172]	; (80064bc <xTaskResumeAll+0x120>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4313      	orrs	r3, r2
 8006412:	4a2a      	ldr	r2, [pc, #168]	; (80064bc <xTaskResumeAll+0x120>)
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800641a:	4613      	mov	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4a27      	ldr	r2, [pc, #156]	; (80064c0 <xTaskResumeAll+0x124>)
 8006424:	441a      	add	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	3304      	adds	r3, #4
 800642a:	4619      	mov	r1, r3
 800642c:	4610      	mov	r0, r2
 800642e:	f7ff f942 	bl	80056b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006436:	4b23      	ldr	r3, [pc, #140]	; (80064c4 <xTaskResumeAll+0x128>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643c:	429a      	cmp	r2, r3
 800643e:	d302      	bcc.n	8006446 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006440:	4b21      	ldr	r3, [pc, #132]	; (80064c8 <xTaskResumeAll+0x12c>)
 8006442:	2201      	movs	r2, #1
 8006444:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006446:	4b1c      	ldr	r3, [pc, #112]	; (80064b8 <xTaskResumeAll+0x11c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1cc      	bne.n	80063e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d001      	beq.n	8006458 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006454:	f000 fb1c 	bl	8006a90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006458:	4b1c      	ldr	r3, [pc, #112]	; (80064cc <xTaskResumeAll+0x130>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d010      	beq.n	8006486 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006464:	f000 f836 	bl	80064d4 <xTaskIncrementTick>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d002      	beq.n	8006474 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800646e:	4b16      	ldr	r3, [pc, #88]	; (80064c8 <xTaskResumeAll+0x12c>)
 8006470:	2201      	movs	r2, #1
 8006472:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	3b01      	subs	r3, #1
 8006478:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1f1      	bne.n	8006464 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006480:	4b12      	ldr	r3, [pc, #72]	; (80064cc <xTaskResumeAll+0x130>)
 8006482:	2200      	movs	r2, #0
 8006484:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006486:	4b10      	ldr	r3, [pc, #64]	; (80064c8 <xTaskResumeAll+0x12c>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d009      	beq.n	80064a2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800648e:	2301      	movs	r3, #1
 8006490:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006492:	4b0f      	ldr	r3, [pc, #60]	; (80064d0 <xTaskResumeAll+0x134>)
 8006494:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064a2:	f000 fd7f 	bl	8006fa4 <vPortExitCritical>

	return xAlreadyYielded;
 80064a6:	68bb      	ldr	r3, [r7, #8]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	200005d0 	.word	0x200005d0
 80064b4:	200005a8 	.word	0x200005a8
 80064b8:	20000568 	.word	0x20000568
 80064bc:	200005b0 	.word	0x200005b0
 80064c0:	200004ac 	.word	0x200004ac
 80064c4:	200004a8 	.word	0x200004a8
 80064c8:	200005bc 	.word	0x200005bc
 80064cc:	200005b8 	.word	0x200005b8
 80064d0:	e000ed04 	.word	0xe000ed04

080064d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80064da:	2300      	movs	r3, #0
 80064dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064de:	4b4e      	ldr	r3, [pc, #312]	; (8006618 <xTaskIncrementTick+0x144>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f040 808e 	bne.w	8006604 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064e8:	4b4c      	ldr	r3, [pc, #304]	; (800661c <xTaskIncrementTick+0x148>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3301      	adds	r3, #1
 80064ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80064f0:	4a4a      	ldr	r2, [pc, #296]	; (800661c <xTaskIncrementTick+0x148>)
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d120      	bne.n	800653e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80064fc:	4b48      	ldr	r3, [pc, #288]	; (8006620 <xTaskIncrementTick+0x14c>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00a      	beq.n	800651c <xTaskIncrementTick+0x48>
	__asm volatile
 8006506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650a:	f383 8811 	msr	BASEPRI, r3
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	603b      	str	r3, [r7, #0]
}
 8006518:	bf00      	nop
 800651a:	e7fe      	b.n	800651a <xTaskIncrementTick+0x46>
 800651c:	4b40      	ldr	r3, [pc, #256]	; (8006620 <xTaskIncrementTick+0x14c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	60fb      	str	r3, [r7, #12]
 8006522:	4b40      	ldr	r3, [pc, #256]	; (8006624 <xTaskIncrementTick+0x150>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a3e      	ldr	r2, [pc, #248]	; (8006620 <xTaskIncrementTick+0x14c>)
 8006528:	6013      	str	r3, [r2, #0]
 800652a:	4a3e      	ldr	r2, [pc, #248]	; (8006624 <xTaskIncrementTick+0x150>)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	4b3d      	ldr	r3, [pc, #244]	; (8006628 <xTaskIncrementTick+0x154>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3301      	adds	r3, #1
 8006536:	4a3c      	ldr	r2, [pc, #240]	; (8006628 <xTaskIncrementTick+0x154>)
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	f000 faa9 	bl	8006a90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800653e:	4b3b      	ldr	r3, [pc, #236]	; (800662c <xTaskIncrementTick+0x158>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	429a      	cmp	r2, r3
 8006546:	d348      	bcc.n	80065da <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006548:	4b35      	ldr	r3, [pc, #212]	; (8006620 <xTaskIncrementTick+0x14c>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d104      	bne.n	800655c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006552:	4b36      	ldr	r3, [pc, #216]	; (800662c <xTaskIncrementTick+0x158>)
 8006554:	f04f 32ff 	mov.w	r2, #4294967295
 8006558:	601a      	str	r2, [r3, #0]
					break;
 800655a:	e03e      	b.n	80065da <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800655c:	4b30      	ldr	r3, [pc, #192]	; (8006620 <xTaskIncrementTick+0x14c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	429a      	cmp	r2, r3
 8006572:	d203      	bcs.n	800657c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006574:	4a2d      	ldr	r2, [pc, #180]	; (800662c <xTaskIncrementTick+0x158>)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800657a:	e02e      	b.n	80065da <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	3304      	adds	r3, #4
 8006580:	4618      	mov	r0, r3
 8006582:	f7ff f8f5 	bl	8005770 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658a:	2b00      	cmp	r3, #0
 800658c:	d004      	beq.n	8006598 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	3318      	adds	r3, #24
 8006592:	4618      	mov	r0, r3
 8006594:	f7ff f8ec 	bl	8005770 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659c:	2201      	movs	r2, #1
 800659e:	409a      	lsls	r2, r3
 80065a0:	4b23      	ldr	r3, [pc, #140]	; (8006630 <xTaskIncrementTick+0x15c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	4a22      	ldr	r2, [pc, #136]	; (8006630 <xTaskIncrementTick+0x15c>)
 80065a8:	6013      	str	r3, [r2, #0]
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ae:	4613      	mov	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4a1f      	ldr	r2, [pc, #124]	; (8006634 <xTaskIncrementTick+0x160>)
 80065b8:	441a      	add	r2, r3
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	3304      	adds	r3, #4
 80065be:	4619      	mov	r1, r3
 80065c0:	4610      	mov	r0, r2
 80065c2:	f7ff f878 	bl	80056b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ca:	4b1b      	ldr	r3, [pc, #108]	; (8006638 <xTaskIncrementTick+0x164>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d3b9      	bcc.n	8006548 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80065d4:	2301      	movs	r3, #1
 80065d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065d8:	e7b6      	b.n	8006548 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80065da:	4b17      	ldr	r3, [pc, #92]	; (8006638 <xTaskIncrementTick+0x164>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e0:	4914      	ldr	r1, [pc, #80]	; (8006634 <xTaskIncrementTick+0x160>)
 80065e2:	4613      	mov	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	440b      	add	r3, r1
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d901      	bls.n	80065f6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80065f2:	2301      	movs	r3, #1
 80065f4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80065f6:	4b11      	ldr	r3, [pc, #68]	; (800663c <xTaskIncrementTick+0x168>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d007      	beq.n	800660e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80065fe:	2301      	movs	r3, #1
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	e004      	b.n	800660e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006604:	4b0e      	ldr	r3, [pc, #56]	; (8006640 <xTaskIncrementTick+0x16c>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	3301      	adds	r3, #1
 800660a:	4a0d      	ldr	r2, [pc, #52]	; (8006640 <xTaskIncrementTick+0x16c>)
 800660c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800660e:	697b      	ldr	r3, [r7, #20]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3718      	adds	r7, #24
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	200005d0 	.word	0x200005d0
 800661c:	200005ac 	.word	0x200005ac
 8006620:	20000560 	.word	0x20000560
 8006624:	20000564 	.word	0x20000564
 8006628:	200005c0 	.word	0x200005c0
 800662c:	200005c8 	.word	0x200005c8
 8006630:	200005b0 	.word	0x200005b0
 8006634:	200004ac 	.word	0x200004ac
 8006638:	200004a8 	.word	0x200004a8
 800663c:	200005bc 	.word	0x200005bc
 8006640:	200005b8 	.word	0x200005b8

08006644 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800664a:	4b29      	ldr	r3, [pc, #164]	; (80066f0 <vTaskSwitchContext+0xac>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006652:	4b28      	ldr	r3, [pc, #160]	; (80066f4 <vTaskSwitchContext+0xb0>)
 8006654:	2201      	movs	r2, #1
 8006656:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006658:	e044      	b.n	80066e4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800665a:	4b26      	ldr	r3, [pc, #152]	; (80066f4 <vTaskSwitchContext+0xb0>)
 800665c:	2200      	movs	r2, #0
 800665e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006660:	4b25      	ldr	r3, [pc, #148]	; (80066f8 <vTaskSwitchContext+0xb4>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	fab3 f383 	clz	r3, r3
 800666c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800666e:	7afb      	ldrb	r3, [r7, #11]
 8006670:	f1c3 031f 	rsb	r3, r3, #31
 8006674:	617b      	str	r3, [r7, #20]
 8006676:	4921      	ldr	r1, [pc, #132]	; (80066fc <vTaskSwitchContext+0xb8>)
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	4613      	mov	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	440b      	add	r3, r1
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10a      	bne.n	80066a0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800668a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668e:	f383 8811 	msr	BASEPRI, r3
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	607b      	str	r3, [r7, #4]
}
 800669c:	bf00      	nop
 800669e:	e7fe      	b.n	800669e <vTaskSwitchContext+0x5a>
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	4613      	mov	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4a14      	ldr	r2, [pc, #80]	; (80066fc <vTaskSwitchContext+0xb8>)
 80066ac:	4413      	add	r3, r2
 80066ae:	613b      	str	r3, [r7, #16]
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	605a      	str	r2, [r3, #4]
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	3308      	adds	r3, #8
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d104      	bne.n	80066d0 <vTaskSwitchContext+0x8c>
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	605a      	str	r2, [r3, #4]
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	4a0a      	ldr	r2, [pc, #40]	; (8006700 <vTaskSwitchContext+0xbc>)
 80066d8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80066da:	4b09      	ldr	r3, [pc, #36]	; (8006700 <vTaskSwitchContext+0xbc>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	334c      	adds	r3, #76	; 0x4c
 80066e0:	4a08      	ldr	r2, [pc, #32]	; (8006704 <vTaskSwitchContext+0xc0>)
 80066e2:	6013      	str	r3, [r2, #0]
}
 80066e4:	bf00      	nop
 80066e6:	371c      	adds	r7, #28
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	200005d0 	.word	0x200005d0
 80066f4:	200005bc 	.word	0x200005bc
 80066f8:	200005b0 	.word	0x200005b0
 80066fc:	200004ac 	.word	0x200004ac
 8006700:	200004a8 	.word	0x200004a8
 8006704:	2000005c 	.word	0x2000005c

08006708 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10a      	bne.n	800672e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671c:	f383 8811 	msr	BASEPRI, r3
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	60fb      	str	r3, [r7, #12]
}
 800672a:	bf00      	nop
 800672c:	e7fe      	b.n	800672c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800672e:	4b07      	ldr	r3, [pc, #28]	; (800674c <vTaskPlaceOnEventList+0x44>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	3318      	adds	r3, #24
 8006734:	4619      	mov	r1, r3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7fe ffe1 	bl	80056fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800673c:	2101      	movs	r1, #1
 800673e:	6838      	ldr	r0, [r7, #0]
 8006740:	f000 fa6a 	bl	8006c18 <prvAddCurrentTaskToDelayedList>
}
 8006744:	bf00      	nop
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	200004a8 	.word	0x200004a8

08006750 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10a      	bne.n	800677c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	60fb      	str	r3, [r7, #12]
}
 8006778:	bf00      	nop
 800677a:	e7fe      	b.n	800677a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	3318      	adds	r3, #24
 8006780:	4618      	mov	r0, r3
 8006782:	f7fe fff5 	bl	8005770 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006786:	4b1d      	ldr	r3, [pc, #116]	; (80067fc <xTaskRemoveFromEventList+0xac>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d11c      	bne.n	80067c8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	3304      	adds	r3, #4
 8006792:	4618      	mov	r0, r3
 8006794:	f7fe ffec 	bl	8005770 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679c:	2201      	movs	r2, #1
 800679e:	409a      	lsls	r2, r3
 80067a0:	4b17      	ldr	r3, [pc, #92]	; (8006800 <xTaskRemoveFromEventList+0xb0>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	4a16      	ldr	r2, [pc, #88]	; (8006800 <xTaskRemoveFromEventList+0xb0>)
 80067a8:	6013      	str	r3, [r2, #0]
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ae:	4613      	mov	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4a13      	ldr	r2, [pc, #76]	; (8006804 <xTaskRemoveFromEventList+0xb4>)
 80067b8:	441a      	add	r2, r3
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	3304      	adds	r3, #4
 80067be:	4619      	mov	r1, r3
 80067c0:	4610      	mov	r0, r2
 80067c2:	f7fe ff78 	bl	80056b6 <vListInsertEnd>
 80067c6:	e005      	b.n	80067d4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	3318      	adds	r3, #24
 80067cc:	4619      	mov	r1, r3
 80067ce:	480e      	ldr	r0, [pc, #56]	; (8006808 <xTaskRemoveFromEventList+0xb8>)
 80067d0:	f7fe ff71 	bl	80056b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d8:	4b0c      	ldr	r3, [pc, #48]	; (800680c <xTaskRemoveFromEventList+0xbc>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067de:	429a      	cmp	r2, r3
 80067e0:	d905      	bls.n	80067ee <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80067e2:	2301      	movs	r3, #1
 80067e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80067e6:	4b0a      	ldr	r3, [pc, #40]	; (8006810 <xTaskRemoveFromEventList+0xc0>)
 80067e8:	2201      	movs	r2, #1
 80067ea:	601a      	str	r2, [r3, #0]
 80067ec:	e001      	b.n	80067f2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80067ee:	2300      	movs	r3, #0
 80067f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80067f2:	697b      	ldr	r3, [r7, #20]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	200005d0 	.word	0x200005d0
 8006800:	200005b0 	.word	0x200005b0
 8006804:	200004ac 	.word	0x200004ac
 8006808:	20000568 	.word	0x20000568
 800680c:	200004a8 	.word	0x200004a8
 8006810:	200005bc 	.word	0x200005bc

08006814 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800681c:	4b06      	ldr	r3, [pc, #24]	; (8006838 <vTaskInternalSetTimeOutState+0x24>)
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006824:	4b05      	ldr	r3, [pc, #20]	; (800683c <vTaskInternalSetTimeOutState+0x28>)
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	605a      	str	r2, [r3, #4]
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	200005c0 	.word	0x200005c0
 800683c:	200005ac 	.word	0x200005ac

08006840 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b088      	sub	sp, #32
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10a      	bne.n	8006866 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	613b      	str	r3, [r7, #16]
}
 8006862:	bf00      	nop
 8006864:	e7fe      	b.n	8006864 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10a      	bne.n	8006882 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800686c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	60fb      	str	r3, [r7, #12]
}
 800687e:	bf00      	nop
 8006880:	e7fe      	b.n	8006880 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006882:	f000 fb5f 	bl	8006f44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006886:	4b1d      	ldr	r3, [pc, #116]	; (80068fc <xTaskCheckForTimeOut+0xbc>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689e:	d102      	bne.n	80068a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80068a0:	2300      	movs	r3, #0
 80068a2:	61fb      	str	r3, [r7, #28]
 80068a4:	e023      	b.n	80068ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	4b15      	ldr	r3, [pc, #84]	; (8006900 <xTaskCheckForTimeOut+0xc0>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d007      	beq.n	80068c2 <xTaskCheckForTimeOut+0x82>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d302      	bcc.n	80068c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80068bc:	2301      	movs	r3, #1
 80068be:	61fb      	str	r3, [r7, #28]
 80068c0:	e015      	b.n	80068ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d20b      	bcs.n	80068e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	1ad2      	subs	r2, r2, r3
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f7ff ff9b 	bl	8006814 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80068de:	2300      	movs	r3, #0
 80068e0:	61fb      	str	r3, [r7, #28]
 80068e2:	e004      	b.n	80068ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	2200      	movs	r2, #0
 80068e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80068ea:	2301      	movs	r3, #1
 80068ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80068ee:	f000 fb59 	bl	8006fa4 <vPortExitCritical>

	return xReturn;
 80068f2:	69fb      	ldr	r3, [r7, #28]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3720      	adds	r7, #32
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	200005ac 	.word	0x200005ac
 8006900:	200005c0 	.word	0x200005c0

08006904 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006904:	b480      	push	{r7}
 8006906:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006908:	4b03      	ldr	r3, [pc, #12]	; (8006918 <vTaskMissedYield+0x14>)
 800690a:	2201      	movs	r2, #1
 800690c:	601a      	str	r2, [r3, #0]
}
 800690e:	bf00      	nop
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	200005bc 	.word	0x200005bc

0800691c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006924:	f000 f852 	bl	80069cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006928:	4b06      	ldr	r3, [pc, #24]	; (8006944 <prvIdleTask+0x28>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d9f9      	bls.n	8006924 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006930:	4b05      	ldr	r3, [pc, #20]	; (8006948 <prvIdleTask+0x2c>)
 8006932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006936:	601a      	str	r2, [r3, #0]
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006940:	e7f0      	b.n	8006924 <prvIdleTask+0x8>
 8006942:	bf00      	nop
 8006944:	200004ac 	.word	0x200004ac
 8006948:	e000ed04 	.word	0xe000ed04

0800694c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006952:	2300      	movs	r3, #0
 8006954:	607b      	str	r3, [r7, #4]
 8006956:	e00c      	b.n	8006972 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	4613      	mov	r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4413      	add	r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4a12      	ldr	r2, [pc, #72]	; (80069ac <prvInitialiseTaskLists+0x60>)
 8006964:	4413      	add	r3, r2
 8006966:	4618      	mov	r0, r3
 8006968:	f7fe fe78 	bl	800565c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	3301      	adds	r3, #1
 8006970:	607b      	str	r3, [r7, #4]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b06      	cmp	r3, #6
 8006976:	d9ef      	bls.n	8006958 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006978:	480d      	ldr	r0, [pc, #52]	; (80069b0 <prvInitialiseTaskLists+0x64>)
 800697a:	f7fe fe6f 	bl	800565c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800697e:	480d      	ldr	r0, [pc, #52]	; (80069b4 <prvInitialiseTaskLists+0x68>)
 8006980:	f7fe fe6c 	bl	800565c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006984:	480c      	ldr	r0, [pc, #48]	; (80069b8 <prvInitialiseTaskLists+0x6c>)
 8006986:	f7fe fe69 	bl	800565c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800698a:	480c      	ldr	r0, [pc, #48]	; (80069bc <prvInitialiseTaskLists+0x70>)
 800698c:	f7fe fe66 	bl	800565c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006990:	480b      	ldr	r0, [pc, #44]	; (80069c0 <prvInitialiseTaskLists+0x74>)
 8006992:	f7fe fe63 	bl	800565c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006996:	4b0b      	ldr	r3, [pc, #44]	; (80069c4 <prvInitialiseTaskLists+0x78>)
 8006998:	4a05      	ldr	r2, [pc, #20]	; (80069b0 <prvInitialiseTaskLists+0x64>)
 800699a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800699c:	4b0a      	ldr	r3, [pc, #40]	; (80069c8 <prvInitialiseTaskLists+0x7c>)
 800699e:	4a05      	ldr	r2, [pc, #20]	; (80069b4 <prvInitialiseTaskLists+0x68>)
 80069a0:	601a      	str	r2, [r3, #0]
}
 80069a2:	bf00      	nop
 80069a4:	3708      	adds	r7, #8
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	200004ac 	.word	0x200004ac
 80069b0:	20000538 	.word	0x20000538
 80069b4:	2000054c 	.word	0x2000054c
 80069b8:	20000568 	.word	0x20000568
 80069bc:	2000057c 	.word	0x2000057c
 80069c0:	20000594 	.word	0x20000594
 80069c4:	20000560 	.word	0x20000560
 80069c8:	20000564 	.word	0x20000564

080069cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069d2:	e019      	b.n	8006a08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80069d4:	f000 fab6 	bl	8006f44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069d8:	4b10      	ldr	r3, [pc, #64]	; (8006a1c <prvCheckTasksWaitingTermination+0x50>)
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	3304      	adds	r3, #4
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7fe fec3 	bl	8005770 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80069ea:	4b0d      	ldr	r3, [pc, #52]	; (8006a20 <prvCheckTasksWaitingTermination+0x54>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3b01      	subs	r3, #1
 80069f0:	4a0b      	ldr	r2, [pc, #44]	; (8006a20 <prvCheckTasksWaitingTermination+0x54>)
 80069f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069f4:	4b0b      	ldr	r3, [pc, #44]	; (8006a24 <prvCheckTasksWaitingTermination+0x58>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3b01      	subs	r3, #1
 80069fa:	4a0a      	ldr	r2, [pc, #40]	; (8006a24 <prvCheckTasksWaitingTermination+0x58>)
 80069fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80069fe:	f000 fad1 	bl	8006fa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f810 	bl	8006a28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a08:	4b06      	ldr	r3, [pc, #24]	; (8006a24 <prvCheckTasksWaitingTermination+0x58>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1e1      	bne.n	80069d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a10:	bf00      	nop
 8006a12:	bf00      	nop
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	2000057c 	.word	0x2000057c
 8006a20:	200005a8 	.word	0x200005a8
 8006a24:	20000590 	.word	0x20000590

08006a28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	334c      	adds	r3, #76	; 0x4c
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 fe45 	bl	80076c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d108      	bne.n	8006a56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 fc69 	bl	8007320 <vPortFree>
				vPortFree( pxTCB );
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fc66 	bl	8007320 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a54:	e018      	b.n	8006a88 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d103      	bne.n	8006a68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 fc5d 	bl	8007320 <vPortFree>
	}
 8006a66:	e00f      	b.n	8006a88 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d00a      	beq.n	8006a88 <prvDeleteTCB+0x60>
	__asm volatile
 8006a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	60fb      	str	r3, [r7, #12]
}
 8006a84:	bf00      	nop
 8006a86:	e7fe      	b.n	8006a86 <prvDeleteTCB+0x5e>
	}
 8006a88:	bf00      	nop
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a96:	4b0c      	ldr	r3, [pc, #48]	; (8006ac8 <prvResetNextTaskUnblockTime+0x38>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d104      	bne.n	8006aaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006aa0:	4b0a      	ldr	r3, [pc, #40]	; (8006acc <prvResetNextTaskUnblockTime+0x3c>)
 8006aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006aa8:	e008      	b.n	8006abc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aaa:	4b07      	ldr	r3, [pc, #28]	; (8006ac8 <prvResetNextTaskUnblockTime+0x38>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	4a04      	ldr	r2, [pc, #16]	; (8006acc <prvResetNextTaskUnblockTime+0x3c>)
 8006aba:	6013      	str	r3, [r2, #0]
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	20000560 	.word	0x20000560
 8006acc:	200005c8 	.word	0x200005c8

08006ad0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006ad6:	4b0b      	ldr	r3, [pc, #44]	; (8006b04 <xTaskGetSchedulerState+0x34>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d102      	bne.n	8006ae4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	607b      	str	r3, [r7, #4]
 8006ae2:	e008      	b.n	8006af6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ae4:	4b08      	ldr	r3, [pc, #32]	; (8006b08 <xTaskGetSchedulerState+0x38>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d102      	bne.n	8006af2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006aec:	2302      	movs	r3, #2
 8006aee:	607b      	str	r3, [r7, #4]
 8006af0:	e001      	b.n	8006af6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006af2:	2300      	movs	r3, #0
 8006af4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006af6:	687b      	ldr	r3, [r7, #4]
	}
 8006af8:	4618      	mov	r0, r3
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr
 8006b04:	200005b4 	.word	0x200005b4
 8006b08:	200005d0 	.word	0x200005d0

08006b0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d06e      	beq.n	8006c00 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b22:	4b3a      	ldr	r3, [pc, #232]	; (8006c0c <xTaskPriorityDisinherit+0x100>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d00a      	beq.n	8006b42 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	60fb      	str	r3, [r7, #12]
}
 8006b3e:	bf00      	nop
 8006b40:	e7fe      	b.n	8006b40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10a      	bne.n	8006b60 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4e:	f383 8811 	msr	BASEPRI, r3
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	60bb      	str	r3, [r7, #8]
}
 8006b5c:	bf00      	nop
 8006b5e:	e7fe      	b.n	8006b5e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b64:	1e5a      	subs	r2, r3, #1
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d044      	beq.n	8006c00 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d140      	bne.n	8006c00 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	3304      	adds	r3, #4
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fe fdf4 	bl	8005770 <uxListRemove>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d115      	bne.n	8006bba <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b92:	491f      	ldr	r1, [pc, #124]	; (8006c10 <xTaskPriorityDisinherit+0x104>)
 8006b94:	4613      	mov	r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	4413      	add	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	440b      	add	r3, r1
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10a      	bne.n	8006bba <xTaskPriorityDisinherit+0xae>
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba8:	2201      	movs	r2, #1
 8006baa:	fa02 f303 	lsl.w	r3, r2, r3
 8006bae:	43da      	mvns	r2, r3
 8006bb0:	4b18      	ldr	r3, [pc, #96]	; (8006c14 <xTaskPriorityDisinherit+0x108>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	4a17      	ldr	r2, [pc, #92]	; (8006c14 <xTaskPriorityDisinherit+0x108>)
 8006bb8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc6:	f1c3 0207 	rsb	r2, r3, #7
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	409a      	lsls	r2, r3
 8006bd6:	4b0f      	ldr	r3, [pc, #60]	; (8006c14 <xTaskPriorityDisinherit+0x108>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	4a0d      	ldr	r2, [pc, #52]	; (8006c14 <xTaskPriorityDisinherit+0x108>)
 8006bde:	6013      	str	r3, [r2, #0]
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be4:	4613      	mov	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4a08      	ldr	r2, [pc, #32]	; (8006c10 <xTaskPriorityDisinherit+0x104>)
 8006bee:	441a      	add	r2, r3
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	3304      	adds	r3, #4
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	4610      	mov	r0, r2
 8006bf8:	f7fe fd5d 	bl	80056b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c00:	697b      	ldr	r3, [r7, #20]
	}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	200004a8 	.word	0x200004a8
 8006c10:	200004ac 	.word	0x200004ac
 8006c14:	200005b0 	.word	0x200005b0

08006c18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c22:	4b29      	ldr	r3, [pc, #164]	; (8006cc8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c28:	4b28      	ldr	r3, [pc, #160]	; (8006ccc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	3304      	adds	r3, #4
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7fe fd9e 	bl	8005770 <uxListRemove>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10b      	bne.n	8006c52 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006c3a:	4b24      	ldr	r3, [pc, #144]	; (8006ccc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c40:	2201      	movs	r2, #1
 8006c42:	fa02 f303 	lsl.w	r3, r2, r3
 8006c46:	43da      	mvns	r2, r3
 8006c48:	4b21      	ldr	r3, [pc, #132]	; (8006cd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	4a20      	ldr	r2, [pc, #128]	; (8006cd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c50:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c58:	d10a      	bne.n	8006c70 <prvAddCurrentTaskToDelayedList+0x58>
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d007      	beq.n	8006c70 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c60:	4b1a      	ldr	r3, [pc, #104]	; (8006ccc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3304      	adds	r3, #4
 8006c66:	4619      	mov	r1, r3
 8006c68:	481a      	ldr	r0, [pc, #104]	; (8006cd4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006c6a:	f7fe fd24 	bl	80056b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c6e:	e026      	b.n	8006cbe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4413      	add	r3, r2
 8006c76:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c78:	4b14      	ldr	r3, [pc, #80]	; (8006ccc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d209      	bcs.n	8006c9c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c88:	4b13      	ldr	r3, [pc, #76]	; (8006cd8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	4b0f      	ldr	r3, [pc, #60]	; (8006ccc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	3304      	adds	r3, #4
 8006c92:	4619      	mov	r1, r3
 8006c94:	4610      	mov	r0, r2
 8006c96:	f7fe fd32 	bl	80056fe <vListInsert>
}
 8006c9a:	e010      	b.n	8006cbe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c9c:	4b0f      	ldr	r3, [pc, #60]	; (8006cdc <prvAddCurrentTaskToDelayedList+0xc4>)
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	4b0a      	ldr	r3, [pc, #40]	; (8006ccc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	4610      	mov	r0, r2
 8006caa:	f7fe fd28 	bl	80056fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006cae:	4b0c      	ldr	r3, [pc, #48]	; (8006ce0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d202      	bcs.n	8006cbe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006cb8:	4a09      	ldr	r2, [pc, #36]	; (8006ce0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	6013      	str	r3, [r2, #0]
}
 8006cbe:	bf00      	nop
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	200005ac 	.word	0x200005ac
 8006ccc:	200004a8 	.word	0x200004a8
 8006cd0:	200005b0 	.word	0x200005b0
 8006cd4:	20000594 	.word	0x20000594
 8006cd8:	20000564 	.word	0x20000564
 8006cdc:	20000560 	.word	0x20000560
 8006ce0:	200005c8 	.word	0x200005c8

08006ce4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	3b04      	subs	r3, #4
 8006cf4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006cfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	3b04      	subs	r3, #4
 8006d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	f023 0201 	bic.w	r2, r3, #1
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	3b04      	subs	r3, #4
 8006d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d14:	4a0c      	ldr	r2, [pc, #48]	; (8006d48 <pxPortInitialiseStack+0x64>)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3b14      	subs	r3, #20
 8006d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	3b04      	subs	r3, #4
 8006d2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f06f 0202 	mvn.w	r2, #2
 8006d32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	3b20      	subs	r3, #32
 8006d38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	08006d4d 	.word	0x08006d4d

08006d4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d52:	2300      	movs	r3, #0
 8006d54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d56:	4b12      	ldr	r3, [pc, #72]	; (8006da0 <prvTaskExitError+0x54>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5e:	d00a      	beq.n	8006d76 <prvTaskExitError+0x2a>
	__asm volatile
 8006d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	60fb      	str	r3, [r7, #12]
}
 8006d72:	bf00      	nop
 8006d74:	e7fe      	b.n	8006d74 <prvTaskExitError+0x28>
	__asm volatile
 8006d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	60bb      	str	r3, [r7, #8]
}
 8006d88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d8a:	bf00      	nop
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d0fc      	beq.n	8006d8c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d92:	bf00      	nop
 8006d94:	bf00      	nop
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	2000000c 	.word	0x2000000c
	...

08006db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006db0:	4b07      	ldr	r3, [pc, #28]	; (8006dd0 <pxCurrentTCBConst2>)
 8006db2:	6819      	ldr	r1, [r3, #0]
 8006db4:	6808      	ldr	r0, [r1, #0]
 8006db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dba:	f380 8809 	msr	PSP, r0
 8006dbe:	f3bf 8f6f 	isb	sy
 8006dc2:	f04f 0000 	mov.w	r0, #0
 8006dc6:	f380 8811 	msr	BASEPRI, r0
 8006dca:	4770      	bx	lr
 8006dcc:	f3af 8000 	nop.w

08006dd0 <pxCurrentTCBConst2>:
 8006dd0:	200004a8 	.word	0x200004a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006dd4:	bf00      	nop
 8006dd6:	bf00      	nop

08006dd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006dd8:	4808      	ldr	r0, [pc, #32]	; (8006dfc <prvPortStartFirstTask+0x24>)
 8006dda:	6800      	ldr	r0, [r0, #0]
 8006ddc:	6800      	ldr	r0, [r0, #0]
 8006dde:	f380 8808 	msr	MSP, r0
 8006de2:	f04f 0000 	mov.w	r0, #0
 8006de6:	f380 8814 	msr	CONTROL, r0
 8006dea:	b662      	cpsie	i
 8006dec:	b661      	cpsie	f
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	f3bf 8f6f 	isb	sy
 8006df6:	df00      	svc	0
 8006df8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006dfa:	bf00      	nop
 8006dfc:	e000ed08 	.word	0xe000ed08

08006e00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006e06:	4b46      	ldr	r3, [pc, #280]	; (8006f20 <xPortStartScheduler+0x120>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a46      	ldr	r2, [pc, #280]	; (8006f24 <xPortStartScheduler+0x124>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d10a      	bne.n	8006e26 <xPortStartScheduler+0x26>
	__asm volatile
 8006e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e14:	f383 8811 	msr	BASEPRI, r3
 8006e18:	f3bf 8f6f 	isb	sy
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	613b      	str	r3, [r7, #16]
}
 8006e22:	bf00      	nop
 8006e24:	e7fe      	b.n	8006e24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006e26:	4b3e      	ldr	r3, [pc, #248]	; (8006f20 <xPortStartScheduler+0x120>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a3f      	ldr	r2, [pc, #252]	; (8006f28 <xPortStartScheduler+0x128>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d10a      	bne.n	8006e46 <xPortStartScheduler+0x46>
	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	60fb      	str	r3, [r7, #12]
}
 8006e42:	bf00      	nop
 8006e44:	e7fe      	b.n	8006e44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e46:	4b39      	ldr	r3, [pc, #228]	; (8006f2c <xPortStartScheduler+0x12c>)
 8006e48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	22ff      	movs	r2, #255	; 0xff
 8006e56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e60:	78fb      	ldrb	r3, [r7, #3]
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	4b31      	ldr	r3, [pc, #196]	; (8006f30 <xPortStartScheduler+0x130>)
 8006e6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e6e:	4b31      	ldr	r3, [pc, #196]	; (8006f34 <xPortStartScheduler+0x134>)
 8006e70:	2207      	movs	r2, #7
 8006e72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e74:	e009      	b.n	8006e8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006e76:	4b2f      	ldr	r3, [pc, #188]	; (8006f34 <xPortStartScheduler+0x134>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	4a2d      	ldr	r2, [pc, #180]	; (8006f34 <xPortStartScheduler+0x134>)
 8006e7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e80:	78fb      	ldrb	r3, [r7, #3]
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	005b      	lsls	r3, r3, #1
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e8a:	78fb      	ldrb	r3, [r7, #3]
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e92:	2b80      	cmp	r3, #128	; 0x80
 8006e94:	d0ef      	beq.n	8006e76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e96:	4b27      	ldr	r3, [pc, #156]	; (8006f34 <xPortStartScheduler+0x134>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f1c3 0307 	rsb	r3, r3, #7
 8006e9e:	2b04      	cmp	r3, #4
 8006ea0:	d00a      	beq.n	8006eb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea6:	f383 8811 	msr	BASEPRI, r3
 8006eaa:	f3bf 8f6f 	isb	sy
 8006eae:	f3bf 8f4f 	dsb	sy
 8006eb2:	60bb      	str	r3, [r7, #8]
}
 8006eb4:	bf00      	nop
 8006eb6:	e7fe      	b.n	8006eb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006eb8:	4b1e      	ldr	r3, [pc, #120]	; (8006f34 <xPortStartScheduler+0x134>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	021b      	lsls	r3, r3, #8
 8006ebe:	4a1d      	ldr	r2, [pc, #116]	; (8006f34 <xPortStartScheduler+0x134>)
 8006ec0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ec2:	4b1c      	ldr	r3, [pc, #112]	; (8006f34 <xPortStartScheduler+0x134>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006eca:	4a1a      	ldr	r2, [pc, #104]	; (8006f34 <xPortStartScheduler+0x134>)
 8006ecc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ed6:	4b18      	ldr	r3, [pc, #96]	; (8006f38 <xPortStartScheduler+0x138>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a17      	ldr	r2, [pc, #92]	; (8006f38 <xPortStartScheduler+0x138>)
 8006edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ee0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ee2:	4b15      	ldr	r3, [pc, #84]	; (8006f38 <xPortStartScheduler+0x138>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a14      	ldr	r2, [pc, #80]	; (8006f38 <xPortStartScheduler+0x138>)
 8006ee8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006eec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006eee:	f000 f8dd 	bl	80070ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ef2:	4b12      	ldr	r3, [pc, #72]	; (8006f3c <xPortStartScheduler+0x13c>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006ef8:	f000 f8fc 	bl	80070f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006efc:	4b10      	ldr	r3, [pc, #64]	; (8006f40 <xPortStartScheduler+0x140>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a0f      	ldr	r2, [pc, #60]	; (8006f40 <xPortStartScheduler+0x140>)
 8006f02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006f06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f08:	f7ff ff66 	bl	8006dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006f0c:	f7ff fb9a 	bl	8006644 <vTaskSwitchContext>
	prvTaskExitError();
 8006f10:	f7ff ff1c 	bl	8006d4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3718      	adds	r7, #24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	e000ed00 	.word	0xe000ed00
 8006f24:	410fc271 	.word	0x410fc271
 8006f28:	410fc270 	.word	0x410fc270
 8006f2c:	e000e400 	.word	0xe000e400
 8006f30:	200005d4 	.word	0x200005d4
 8006f34:	200005d8 	.word	0x200005d8
 8006f38:	e000ed20 	.word	0xe000ed20
 8006f3c:	2000000c 	.word	0x2000000c
 8006f40:	e000ef34 	.word	0xe000ef34

08006f44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
	__asm volatile
 8006f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	607b      	str	r3, [r7, #4]
}
 8006f5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f5e:	4b0f      	ldr	r3, [pc, #60]	; (8006f9c <vPortEnterCritical+0x58>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	3301      	adds	r3, #1
 8006f64:	4a0d      	ldr	r2, [pc, #52]	; (8006f9c <vPortEnterCritical+0x58>)
 8006f66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f68:	4b0c      	ldr	r3, [pc, #48]	; (8006f9c <vPortEnterCritical+0x58>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d10f      	bne.n	8006f90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f70:	4b0b      	ldr	r3, [pc, #44]	; (8006fa0 <vPortEnterCritical+0x5c>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00a      	beq.n	8006f90 <vPortEnterCritical+0x4c>
	__asm volatile
 8006f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	603b      	str	r3, [r7, #0]
}
 8006f8c:	bf00      	nop
 8006f8e:	e7fe      	b.n	8006f8e <vPortEnterCritical+0x4a>
	}
}
 8006f90:	bf00      	nop
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	2000000c 	.word	0x2000000c
 8006fa0:	e000ed04 	.word	0xe000ed04

08006fa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006faa:	4b12      	ldr	r3, [pc, #72]	; (8006ff4 <vPortExitCritical+0x50>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10a      	bne.n	8006fc8 <vPortExitCritical+0x24>
	__asm volatile
 8006fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb6:	f383 8811 	msr	BASEPRI, r3
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	607b      	str	r3, [r7, #4]
}
 8006fc4:	bf00      	nop
 8006fc6:	e7fe      	b.n	8006fc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006fc8:	4b0a      	ldr	r3, [pc, #40]	; (8006ff4 <vPortExitCritical+0x50>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	4a09      	ldr	r2, [pc, #36]	; (8006ff4 <vPortExitCritical+0x50>)
 8006fd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006fd2:	4b08      	ldr	r3, [pc, #32]	; (8006ff4 <vPortExitCritical+0x50>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d105      	bne.n	8006fe6 <vPortExitCritical+0x42>
 8006fda:	2300      	movs	r3, #0
 8006fdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	f383 8811 	msr	BASEPRI, r3
}
 8006fe4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006fe6:	bf00      	nop
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	2000000c 	.word	0x2000000c
	...

08007000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007000:	f3ef 8009 	mrs	r0, PSP
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	4b15      	ldr	r3, [pc, #84]	; (8007060 <pxCurrentTCBConst>)
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	f01e 0f10 	tst.w	lr, #16
 8007010:	bf08      	it	eq
 8007012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800701a:	6010      	str	r0, [r2, #0]
 800701c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007020:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007024:	f380 8811 	msr	BASEPRI, r0
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f7ff fb08 	bl	8006644 <vTaskSwitchContext>
 8007034:	f04f 0000 	mov.w	r0, #0
 8007038:	f380 8811 	msr	BASEPRI, r0
 800703c:	bc09      	pop	{r0, r3}
 800703e:	6819      	ldr	r1, [r3, #0]
 8007040:	6808      	ldr	r0, [r1, #0]
 8007042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007046:	f01e 0f10 	tst.w	lr, #16
 800704a:	bf08      	it	eq
 800704c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007050:	f380 8809 	msr	PSP, r0
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	f3af 8000 	nop.w

08007060 <pxCurrentTCBConst>:
 8007060:	200004a8 	.word	0x200004a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007064:	bf00      	nop
 8007066:	bf00      	nop

08007068 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
	__asm volatile
 800706e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	607b      	str	r3, [r7, #4]
}
 8007080:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007082:	f7ff fa27 	bl	80064d4 <xTaskIncrementTick>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d003      	beq.n	8007094 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800708c:	4b06      	ldr	r3, [pc, #24]	; (80070a8 <SysTick_Handler+0x40>)
 800708e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007092:	601a      	str	r2, [r3, #0]
 8007094:	2300      	movs	r3, #0
 8007096:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	f383 8811 	msr	BASEPRI, r3
}
 800709e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80070a0:	bf00      	nop
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	e000ed04 	.word	0xe000ed04

080070ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80070ac:	b480      	push	{r7}
 80070ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80070b0:	4b0b      	ldr	r3, [pc, #44]	; (80070e0 <vPortSetupTimerInterrupt+0x34>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80070b6:	4b0b      	ldr	r3, [pc, #44]	; (80070e4 <vPortSetupTimerInterrupt+0x38>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80070bc:	4b0a      	ldr	r3, [pc, #40]	; (80070e8 <vPortSetupTimerInterrupt+0x3c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a0a      	ldr	r2, [pc, #40]	; (80070ec <vPortSetupTimerInterrupt+0x40>)
 80070c2:	fba2 2303 	umull	r2, r3, r2, r3
 80070c6:	099b      	lsrs	r3, r3, #6
 80070c8:	4a09      	ldr	r2, [pc, #36]	; (80070f0 <vPortSetupTimerInterrupt+0x44>)
 80070ca:	3b01      	subs	r3, #1
 80070cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80070ce:	4b04      	ldr	r3, [pc, #16]	; (80070e0 <vPortSetupTimerInterrupt+0x34>)
 80070d0:	2207      	movs	r2, #7
 80070d2:	601a      	str	r2, [r3, #0]
}
 80070d4:	bf00      	nop
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	e000e010 	.word	0xe000e010
 80070e4:	e000e018 	.word	0xe000e018
 80070e8:	20000000 	.word	0x20000000
 80070ec:	10624dd3 	.word	0x10624dd3
 80070f0:	e000e014 	.word	0xe000e014

080070f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80070f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007104 <vPortEnableVFP+0x10>
 80070f8:	6801      	ldr	r1, [r0, #0]
 80070fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80070fe:	6001      	str	r1, [r0, #0]
 8007100:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007102:	bf00      	nop
 8007104:	e000ed88 	.word	0xe000ed88

08007108 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800710e:	f3ef 8305 	mrs	r3, IPSR
 8007112:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2b0f      	cmp	r3, #15
 8007118:	d914      	bls.n	8007144 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800711a:	4a17      	ldr	r2, [pc, #92]	; (8007178 <vPortValidateInterruptPriority+0x70>)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	4413      	add	r3, r2
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007124:	4b15      	ldr	r3, [pc, #84]	; (800717c <vPortValidateInterruptPriority+0x74>)
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	7afa      	ldrb	r2, [r7, #11]
 800712a:	429a      	cmp	r2, r3
 800712c:	d20a      	bcs.n	8007144 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800712e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	607b      	str	r3, [r7, #4]
}
 8007140:	bf00      	nop
 8007142:	e7fe      	b.n	8007142 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007144:	4b0e      	ldr	r3, [pc, #56]	; (8007180 <vPortValidateInterruptPriority+0x78>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800714c:	4b0d      	ldr	r3, [pc, #52]	; (8007184 <vPortValidateInterruptPriority+0x7c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	429a      	cmp	r2, r3
 8007152:	d90a      	bls.n	800716a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007158:	f383 8811 	msr	BASEPRI, r3
 800715c:	f3bf 8f6f 	isb	sy
 8007160:	f3bf 8f4f 	dsb	sy
 8007164:	603b      	str	r3, [r7, #0]
}
 8007166:	bf00      	nop
 8007168:	e7fe      	b.n	8007168 <vPortValidateInterruptPriority+0x60>
	}
 800716a:	bf00      	nop
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	e000e3f0 	.word	0xe000e3f0
 800717c:	200005d4 	.word	0x200005d4
 8007180:	e000ed0c 	.word	0xe000ed0c
 8007184:	200005d8 	.word	0x200005d8

08007188 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b08a      	sub	sp, #40	; 0x28
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007190:	2300      	movs	r3, #0
 8007192:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007194:	f7ff f8f4 	bl	8006380 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007198:	4b5b      	ldr	r3, [pc, #364]	; (8007308 <pvPortMalloc+0x180>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d101      	bne.n	80071a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80071a0:	f000 f920 	bl	80073e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80071a4:	4b59      	ldr	r3, [pc, #356]	; (800730c <pvPortMalloc+0x184>)
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4013      	ands	r3, r2
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f040 8093 	bne.w	80072d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d01d      	beq.n	80071f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80071b8:	2208      	movs	r2, #8
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4413      	add	r3, r2
 80071be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f003 0307 	and.w	r3, r3, #7
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d014      	beq.n	80071f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f023 0307 	bic.w	r3, r3, #7
 80071d0:	3308      	adds	r3, #8
 80071d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f003 0307 	and.w	r3, r3, #7
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00a      	beq.n	80071f4 <pvPortMalloc+0x6c>
	__asm volatile
 80071de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	617b      	str	r3, [r7, #20]
}
 80071f0:	bf00      	nop
 80071f2:	e7fe      	b.n	80071f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d06e      	beq.n	80072d8 <pvPortMalloc+0x150>
 80071fa:	4b45      	ldr	r3, [pc, #276]	; (8007310 <pvPortMalloc+0x188>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	429a      	cmp	r2, r3
 8007202:	d869      	bhi.n	80072d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007204:	4b43      	ldr	r3, [pc, #268]	; (8007314 <pvPortMalloc+0x18c>)
 8007206:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007208:	4b42      	ldr	r3, [pc, #264]	; (8007314 <pvPortMalloc+0x18c>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800720e:	e004      	b.n	800721a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007212:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	429a      	cmp	r2, r3
 8007222:	d903      	bls.n	800722c <pvPortMalloc+0xa4>
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1f1      	bne.n	8007210 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800722c:	4b36      	ldr	r3, [pc, #216]	; (8007308 <pvPortMalloc+0x180>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007232:	429a      	cmp	r2, r3
 8007234:	d050      	beq.n	80072d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007236:	6a3b      	ldr	r3, [r7, #32]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2208      	movs	r2, #8
 800723c:	4413      	add	r3, r2
 800723e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	6a3b      	ldr	r3, [r7, #32]
 8007246:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	1ad2      	subs	r2, r2, r3
 8007250:	2308      	movs	r3, #8
 8007252:	005b      	lsls	r3, r3, #1
 8007254:	429a      	cmp	r2, r3
 8007256:	d91f      	bls.n	8007298 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4413      	add	r3, r2
 800725e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	f003 0307 	and.w	r3, r3, #7
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00a      	beq.n	8007280 <pvPortMalloc+0xf8>
	__asm volatile
 800726a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726e:	f383 8811 	msr	BASEPRI, r3
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	f3bf 8f4f 	dsb	sy
 800727a:	613b      	str	r3, [r7, #16]
}
 800727c:	bf00      	nop
 800727e:	e7fe      	b.n	800727e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	1ad2      	subs	r2, r2, r3
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007292:	69b8      	ldr	r0, [r7, #24]
 8007294:	f000 f908 	bl	80074a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007298:	4b1d      	ldr	r3, [pc, #116]	; (8007310 <pvPortMalloc+0x188>)
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	4a1b      	ldr	r2, [pc, #108]	; (8007310 <pvPortMalloc+0x188>)
 80072a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80072a6:	4b1a      	ldr	r3, [pc, #104]	; (8007310 <pvPortMalloc+0x188>)
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	4b1b      	ldr	r3, [pc, #108]	; (8007318 <pvPortMalloc+0x190>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d203      	bcs.n	80072ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80072b2:	4b17      	ldr	r3, [pc, #92]	; (8007310 <pvPortMalloc+0x188>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a18      	ldr	r2, [pc, #96]	; (8007318 <pvPortMalloc+0x190>)
 80072b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80072ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	4b13      	ldr	r3, [pc, #76]	; (800730c <pvPortMalloc+0x184>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	431a      	orrs	r2, r3
 80072c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80072c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ca:	2200      	movs	r2, #0
 80072cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80072ce:	4b13      	ldr	r3, [pc, #76]	; (800731c <pvPortMalloc+0x194>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	3301      	adds	r3, #1
 80072d4:	4a11      	ldr	r2, [pc, #68]	; (800731c <pvPortMalloc+0x194>)
 80072d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80072d8:	f7ff f860 	bl	800639c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	f003 0307 	and.w	r3, r3, #7
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00a      	beq.n	80072fc <pvPortMalloc+0x174>
	__asm volatile
 80072e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ea:	f383 8811 	msr	BASEPRI, r3
 80072ee:	f3bf 8f6f 	isb	sy
 80072f2:	f3bf 8f4f 	dsb	sy
 80072f6:	60fb      	str	r3, [r7, #12]
}
 80072f8:	bf00      	nop
 80072fa:	e7fe      	b.n	80072fa <pvPortMalloc+0x172>
	return pvReturn;
 80072fc:	69fb      	ldr	r3, [r7, #28]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3728      	adds	r7, #40	; 0x28
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	200041e4 	.word	0x200041e4
 800730c:	200041f8 	.word	0x200041f8
 8007310:	200041e8 	.word	0x200041e8
 8007314:	200041dc 	.word	0x200041dc
 8007318:	200041ec 	.word	0x200041ec
 800731c:	200041f0 	.word	0x200041f0

08007320 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d04d      	beq.n	80073ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007332:	2308      	movs	r3, #8
 8007334:	425b      	negs	r3, r3
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	4413      	add	r3, r2
 800733a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	4b24      	ldr	r3, [pc, #144]	; (80073d8 <vPortFree+0xb8>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4013      	ands	r3, r2
 800734a:	2b00      	cmp	r3, #0
 800734c:	d10a      	bne.n	8007364 <vPortFree+0x44>
	__asm volatile
 800734e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	60fb      	str	r3, [r7, #12]
}
 8007360:	bf00      	nop
 8007362:	e7fe      	b.n	8007362 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00a      	beq.n	8007382 <vPortFree+0x62>
	__asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	60bb      	str	r3, [r7, #8]
}
 800737e:	bf00      	nop
 8007380:	e7fe      	b.n	8007380 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	4b14      	ldr	r3, [pc, #80]	; (80073d8 <vPortFree+0xb8>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4013      	ands	r3, r2
 800738c:	2b00      	cmp	r3, #0
 800738e:	d01e      	beq.n	80073ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d11a      	bne.n	80073ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	4b0e      	ldr	r3, [pc, #56]	; (80073d8 <vPortFree+0xb8>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	43db      	mvns	r3, r3
 80073a2:	401a      	ands	r2, r3
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80073a8:	f7fe ffea 	bl	8006380 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	4b0a      	ldr	r3, [pc, #40]	; (80073dc <vPortFree+0xbc>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4413      	add	r3, r2
 80073b6:	4a09      	ldr	r2, [pc, #36]	; (80073dc <vPortFree+0xbc>)
 80073b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80073ba:	6938      	ldr	r0, [r7, #16]
 80073bc:	f000 f874 	bl	80074a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80073c0:	4b07      	ldr	r3, [pc, #28]	; (80073e0 <vPortFree+0xc0>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3301      	adds	r3, #1
 80073c6:	4a06      	ldr	r2, [pc, #24]	; (80073e0 <vPortFree+0xc0>)
 80073c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80073ca:	f7fe ffe7 	bl	800639c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80073ce:	bf00      	nop
 80073d0:	3718      	adds	r7, #24
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	200041f8 	.word	0x200041f8
 80073dc:	200041e8 	.word	0x200041e8
 80073e0:	200041f4 	.word	0x200041f4

080073e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80073ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80073ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80073f0:	4b27      	ldr	r3, [pc, #156]	; (8007490 <prvHeapInit+0xac>)
 80073f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f003 0307 	and.w	r3, r3, #7
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00c      	beq.n	8007418 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	3307      	adds	r3, #7
 8007402:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f023 0307 	bic.w	r3, r3, #7
 800740a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	4a1f      	ldr	r2, [pc, #124]	; (8007490 <prvHeapInit+0xac>)
 8007414:	4413      	add	r3, r2
 8007416:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800741c:	4a1d      	ldr	r2, [pc, #116]	; (8007494 <prvHeapInit+0xb0>)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007422:	4b1c      	ldr	r3, [pc, #112]	; (8007494 <prvHeapInit+0xb0>)
 8007424:	2200      	movs	r2, #0
 8007426:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	4413      	add	r3, r2
 800742e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007430:	2208      	movs	r2, #8
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	1a9b      	subs	r3, r3, r2
 8007436:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f023 0307 	bic.w	r3, r3, #7
 800743e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	4a15      	ldr	r2, [pc, #84]	; (8007498 <prvHeapInit+0xb4>)
 8007444:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007446:	4b14      	ldr	r3, [pc, #80]	; (8007498 <prvHeapInit+0xb4>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2200      	movs	r2, #0
 800744c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800744e:	4b12      	ldr	r3, [pc, #72]	; (8007498 <prvHeapInit+0xb4>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2200      	movs	r2, #0
 8007454:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	1ad2      	subs	r2, r2, r3
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007464:	4b0c      	ldr	r3, [pc, #48]	; (8007498 <prvHeapInit+0xb4>)
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	4a0a      	ldr	r2, [pc, #40]	; (800749c <prvHeapInit+0xb8>)
 8007472:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	4a09      	ldr	r2, [pc, #36]	; (80074a0 <prvHeapInit+0xbc>)
 800747a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800747c:	4b09      	ldr	r3, [pc, #36]	; (80074a4 <prvHeapInit+0xc0>)
 800747e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007482:	601a      	str	r2, [r3, #0]
}
 8007484:	bf00      	nop
 8007486:	3714      	adds	r7, #20
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr
 8007490:	200005dc 	.word	0x200005dc
 8007494:	200041dc 	.word	0x200041dc
 8007498:	200041e4 	.word	0x200041e4
 800749c:	200041ec 	.word	0x200041ec
 80074a0:	200041e8 	.word	0x200041e8
 80074a4:	200041f8 	.word	0x200041f8

080074a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80074b0:	4b28      	ldr	r3, [pc, #160]	; (8007554 <prvInsertBlockIntoFreeList+0xac>)
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	e002      	b.n	80074bc <prvInsertBlockIntoFreeList+0x14>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	60fb      	str	r3, [r7, #12]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d8f7      	bhi.n	80074b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	68ba      	ldr	r2, [r7, #8]
 80074d0:	4413      	add	r3, r2
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d108      	bne.n	80074ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	441a      	add	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	68ba      	ldr	r2, [r7, #8]
 80074f4:	441a      	add	r2, r3
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d118      	bne.n	8007530 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	4b15      	ldr	r3, [pc, #84]	; (8007558 <prvInsertBlockIntoFreeList+0xb0>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	429a      	cmp	r2, r3
 8007508:	d00d      	beq.n	8007526 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	441a      	add	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	601a      	str	r2, [r3, #0]
 8007524:	e008      	b.n	8007538 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007526:	4b0c      	ldr	r3, [pc, #48]	; (8007558 <prvInsertBlockIntoFreeList+0xb0>)
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	601a      	str	r2, [r3, #0]
 800752e:	e003      	b.n	8007538 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	429a      	cmp	r2, r3
 800753e:	d002      	beq.n	8007546 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007546:	bf00      	nop
 8007548:	3714      	adds	r7, #20
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	200041dc 	.word	0x200041dc
 8007558:	200041e4 	.word	0x200041e4

0800755c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800756a:	4618      	mov	r0, r3
 800756c:	f7fd ff48 	bl	8005400 <USBH_LL_IncTimer>
}
 8007570:	bf00      	nop
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007586:	4618      	mov	r0, r3
 8007588:	f7fd ff8c 	bl	80054a4 <USBH_LL_Connect>
}
 800758c:	bf00      	nop
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fd ffa1 	bl	80054ea <USBH_LL_Disconnect>
}
 80075a8:	bf00      	nop
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	460b      	mov	r3, r1
 80075ba:	70fb      	strb	r3, [r7, #3]
 80075bc:	4613      	mov	r3, r2
 80075be:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7fd ffc1 	bl	800554e <USBH_LL_NotifyURBChange>
#endif
}
 80075cc:	bf00      	nop
 80075ce:	3708      	adds	r7, #8
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7fd ff36 	bl	8005454 <USBH_LL_PortEnabled>
}
 80075e8:	bf00      	nop
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fd ff42 	bl	8005488 <USBH_LL_PortDisabled>
}
 8007604:	bf00      	nop
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007614:	2300      	movs	r3, #0
 8007616:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007622:	4618      	mov	r0, r3
 8007624:	f7fa f843 	bl	80016ae <HAL_HCD_Stop>
 8007628:	4603      	mov	r3, r0
 800762a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800762c:	7bfb      	ldrb	r3, [r7, #15]
 800762e:	4618      	mov	r0, r3
 8007630:	f000 f808 	bl	8007644 <USBH_Get_USB_Status>
 8007634:	4603      	mov	r3, r0
 8007636:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007638:	7bbb      	ldrb	r3, [r7, #14]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
	...

08007644 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	4603      	mov	r3, r0
 800764c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800764e:	2300      	movs	r3, #0
 8007650:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007652:	79fb      	ldrb	r3, [r7, #7]
 8007654:	2b03      	cmp	r3, #3
 8007656:	d817      	bhi.n	8007688 <USBH_Get_USB_Status+0x44>
 8007658:	a201      	add	r2, pc, #4	; (adr r2, 8007660 <USBH_Get_USB_Status+0x1c>)
 800765a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765e:	bf00      	nop
 8007660:	08007671 	.word	0x08007671
 8007664:	08007677 	.word	0x08007677
 8007668:	0800767d 	.word	0x0800767d
 800766c:	08007683 	.word	0x08007683
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007670:	2300      	movs	r3, #0
 8007672:	73fb      	strb	r3, [r7, #15]
    break;
 8007674:	e00b      	b.n	800768e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007676:	2302      	movs	r3, #2
 8007678:	73fb      	strb	r3, [r7, #15]
    break;
 800767a:	e008      	b.n	800768e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800767c:	2301      	movs	r3, #1
 800767e:	73fb      	strb	r3, [r7, #15]
    break;
 8007680:	e005      	b.n	800768e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007682:	2302      	movs	r3, #2
 8007684:	73fb      	strb	r3, [r7, #15]
    break;
 8007686:	e002      	b.n	800768e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007688:	2302      	movs	r3, #2
 800768a:	73fb      	strb	r3, [r7, #15]
    break;
 800768c:	bf00      	nop
  }
  return usb_status;
 800768e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <__malloc_lock>:
 800769c:	4801      	ldr	r0, [pc, #4]	; (80076a4 <__malloc_lock+0x8>)
 800769e:	f000 b88b 	b.w	80077b8 <__retarget_lock_acquire_recursive>
 80076a2:	bf00      	nop
 80076a4:	20004718 	.word	0x20004718

080076a8 <__malloc_unlock>:
 80076a8:	4801      	ldr	r0, [pc, #4]	; (80076b0 <__malloc_unlock+0x8>)
 80076aa:	f000 b886 	b.w	80077ba <__retarget_lock_release_recursive>
 80076ae:	bf00      	nop
 80076b0:	20004718 	.word	0x20004718

080076b4 <memset>:
 80076b4:	4402      	add	r2, r0
 80076b6:	4603      	mov	r3, r0
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d100      	bne.n	80076be <memset+0xa>
 80076bc:	4770      	bx	lr
 80076be:	f803 1b01 	strb.w	r1, [r3], #1
 80076c2:	e7f9      	b.n	80076b8 <memset+0x4>

080076c4 <_reclaim_reent>:
 80076c4:	4b29      	ldr	r3, [pc, #164]	; (800776c <_reclaim_reent+0xa8>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4283      	cmp	r3, r0
 80076ca:	b570      	push	{r4, r5, r6, lr}
 80076cc:	4604      	mov	r4, r0
 80076ce:	d04b      	beq.n	8007768 <_reclaim_reent+0xa4>
 80076d0:	69c3      	ldr	r3, [r0, #28]
 80076d2:	b143      	cbz	r3, 80076e6 <_reclaim_reent+0x22>
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d144      	bne.n	8007764 <_reclaim_reent+0xa0>
 80076da:	69e3      	ldr	r3, [r4, #28]
 80076dc:	6819      	ldr	r1, [r3, #0]
 80076de:	b111      	cbz	r1, 80076e6 <_reclaim_reent+0x22>
 80076e0:	4620      	mov	r0, r4
 80076e2:	f000 f879 	bl	80077d8 <_free_r>
 80076e6:	6961      	ldr	r1, [r4, #20]
 80076e8:	b111      	cbz	r1, 80076f0 <_reclaim_reent+0x2c>
 80076ea:	4620      	mov	r0, r4
 80076ec:	f000 f874 	bl	80077d8 <_free_r>
 80076f0:	69e1      	ldr	r1, [r4, #28]
 80076f2:	b111      	cbz	r1, 80076fa <_reclaim_reent+0x36>
 80076f4:	4620      	mov	r0, r4
 80076f6:	f000 f86f 	bl	80077d8 <_free_r>
 80076fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80076fc:	b111      	cbz	r1, 8007704 <_reclaim_reent+0x40>
 80076fe:	4620      	mov	r0, r4
 8007700:	f000 f86a 	bl	80077d8 <_free_r>
 8007704:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007706:	b111      	cbz	r1, 800770e <_reclaim_reent+0x4a>
 8007708:	4620      	mov	r0, r4
 800770a:	f000 f865 	bl	80077d8 <_free_r>
 800770e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007710:	b111      	cbz	r1, 8007718 <_reclaim_reent+0x54>
 8007712:	4620      	mov	r0, r4
 8007714:	f000 f860 	bl	80077d8 <_free_r>
 8007718:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800771a:	b111      	cbz	r1, 8007722 <_reclaim_reent+0x5e>
 800771c:	4620      	mov	r0, r4
 800771e:	f000 f85b 	bl	80077d8 <_free_r>
 8007722:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007724:	b111      	cbz	r1, 800772c <_reclaim_reent+0x68>
 8007726:	4620      	mov	r0, r4
 8007728:	f000 f856 	bl	80077d8 <_free_r>
 800772c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800772e:	b111      	cbz	r1, 8007736 <_reclaim_reent+0x72>
 8007730:	4620      	mov	r0, r4
 8007732:	f000 f851 	bl	80077d8 <_free_r>
 8007736:	6a23      	ldr	r3, [r4, #32]
 8007738:	b1b3      	cbz	r3, 8007768 <_reclaim_reent+0xa4>
 800773a:	4620      	mov	r0, r4
 800773c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007740:	4718      	bx	r3
 8007742:	5949      	ldr	r1, [r1, r5]
 8007744:	b941      	cbnz	r1, 8007758 <_reclaim_reent+0x94>
 8007746:	3504      	adds	r5, #4
 8007748:	69e3      	ldr	r3, [r4, #28]
 800774a:	2d80      	cmp	r5, #128	; 0x80
 800774c:	68d9      	ldr	r1, [r3, #12]
 800774e:	d1f8      	bne.n	8007742 <_reclaim_reent+0x7e>
 8007750:	4620      	mov	r0, r4
 8007752:	f000 f841 	bl	80077d8 <_free_r>
 8007756:	e7c0      	b.n	80076da <_reclaim_reent+0x16>
 8007758:	680e      	ldr	r6, [r1, #0]
 800775a:	4620      	mov	r0, r4
 800775c:	f000 f83c 	bl	80077d8 <_free_r>
 8007760:	4631      	mov	r1, r6
 8007762:	e7ef      	b.n	8007744 <_reclaim_reent+0x80>
 8007764:	2500      	movs	r5, #0
 8007766:	e7ef      	b.n	8007748 <_reclaim_reent+0x84>
 8007768:	bd70      	pop	{r4, r5, r6, pc}
 800776a:	bf00      	nop
 800776c:	2000005c 	.word	0x2000005c

08007770 <__libc_init_array>:
 8007770:	b570      	push	{r4, r5, r6, lr}
 8007772:	4d0d      	ldr	r5, [pc, #52]	; (80077a8 <__libc_init_array+0x38>)
 8007774:	4c0d      	ldr	r4, [pc, #52]	; (80077ac <__libc_init_array+0x3c>)
 8007776:	1b64      	subs	r4, r4, r5
 8007778:	10a4      	asrs	r4, r4, #2
 800777a:	2600      	movs	r6, #0
 800777c:	42a6      	cmp	r6, r4
 800777e:	d109      	bne.n	8007794 <__libc_init_array+0x24>
 8007780:	4d0b      	ldr	r5, [pc, #44]	; (80077b0 <__libc_init_array+0x40>)
 8007782:	4c0c      	ldr	r4, [pc, #48]	; (80077b4 <__libc_init_array+0x44>)
 8007784:	f000 f874 	bl	8007870 <_init>
 8007788:	1b64      	subs	r4, r4, r5
 800778a:	10a4      	asrs	r4, r4, #2
 800778c:	2600      	movs	r6, #0
 800778e:	42a6      	cmp	r6, r4
 8007790:	d105      	bne.n	800779e <__libc_init_array+0x2e>
 8007792:	bd70      	pop	{r4, r5, r6, pc}
 8007794:	f855 3b04 	ldr.w	r3, [r5], #4
 8007798:	4798      	blx	r3
 800779a:	3601      	adds	r6, #1
 800779c:	e7ee      	b.n	800777c <__libc_init_array+0xc>
 800779e:	f855 3b04 	ldr.w	r3, [r5], #4
 80077a2:	4798      	blx	r3
 80077a4:	3601      	adds	r6, #1
 80077a6:	e7f2      	b.n	800778e <__libc_init_array+0x1e>
 80077a8:	080078c0 	.word	0x080078c0
 80077ac:	080078c0 	.word	0x080078c0
 80077b0:	080078c0 	.word	0x080078c0
 80077b4:	080078c4 	.word	0x080078c4

080077b8 <__retarget_lock_acquire_recursive>:
 80077b8:	4770      	bx	lr

080077ba <__retarget_lock_release_recursive>:
 80077ba:	4770      	bx	lr

080077bc <memcpy>:
 80077bc:	440a      	add	r2, r1
 80077be:	4291      	cmp	r1, r2
 80077c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80077c4:	d100      	bne.n	80077c8 <memcpy+0xc>
 80077c6:	4770      	bx	lr
 80077c8:	b510      	push	{r4, lr}
 80077ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077d2:	4291      	cmp	r1, r2
 80077d4:	d1f9      	bne.n	80077ca <memcpy+0xe>
 80077d6:	bd10      	pop	{r4, pc}

080077d8 <_free_r>:
 80077d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077da:	2900      	cmp	r1, #0
 80077dc:	d044      	beq.n	8007868 <_free_r+0x90>
 80077de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077e2:	9001      	str	r0, [sp, #4]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f1a1 0404 	sub.w	r4, r1, #4
 80077ea:	bfb8      	it	lt
 80077ec:	18e4      	addlt	r4, r4, r3
 80077ee:	f7ff ff55 	bl	800769c <__malloc_lock>
 80077f2:	4a1e      	ldr	r2, [pc, #120]	; (800786c <_free_r+0x94>)
 80077f4:	9801      	ldr	r0, [sp, #4]
 80077f6:	6813      	ldr	r3, [r2, #0]
 80077f8:	b933      	cbnz	r3, 8007808 <_free_r+0x30>
 80077fa:	6063      	str	r3, [r4, #4]
 80077fc:	6014      	str	r4, [r2, #0]
 80077fe:	b003      	add	sp, #12
 8007800:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007804:	f7ff bf50 	b.w	80076a8 <__malloc_unlock>
 8007808:	42a3      	cmp	r3, r4
 800780a:	d908      	bls.n	800781e <_free_r+0x46>
 800780c:	6825      	ldr	r5, [r4, #0]
 800780e:	1961      	adds	r1, r4, r5
 8007810:	428b      	cmp	r3, r1
 8007812:	bf01      	itttt	eq
 8007814:	6819      	ldreq	r1, [r3, #0]
 8007816:	685b      	ldreq	r3, [r3, #4]
 8007818:	1949      	addeq	r1, r1, r5
 800781a:	6021      	streq	r1, [r4, #0]
 800781c:	e7ed      	b.n	80077fa <_free_r+0x22>
 800781e:	461a      	mov	r2, r3
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	b10b      	cbz	r3, 8007828 <_free_r+0x50>
 8007824:	42a3      	cmp	r3, r4
 8007826:	d9fa      	bls.n	800781e <_free_r+0x46>
 8007828:	6811      	ldr	r1, [r2, #0]
 800782a:	1855      	adds	r5, r2, r1
 800782c:	42a5      	cmp	r5, r4
 800782e:	d10b      	bne.n	8007848 <_free_r+0x70>
 8007830:	6824      	ldr	r4, [r4, #0]
 8007832:	4421      	add	r1, r4
 8007834:	1854      	adds	r4, r2, r1
 8007836:	42a3      	cmp	r3, r4
 8007838:	6011      	str	r1, [r2, #0]
 800783a:	d1e0      	bne.n	80077fe <_free_r+0x26>
 800783c:	681c      	ldr	r4, [r3, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	6053      	str	r3, [r2, #4]
 8007842:	440c      	add	r4, r1
 8007844:	6014      	str	r4, [r2, #0]
 8007846:	e7da      	b.n	80077fe <_free_r+0x26>
 8007848:	d902      	bls.n	8007850 <_free_r+0x78>
 800784a:	230c      	movs	r3, #12
 800784c:	6003      	str	r3, [r0, #0]
 800784e:	e7d6      	b.n	80077fe <_free_r+0x26>
 8007850:	6825      	ldr	r5, [r4, #0]
 8007852:	1961      	adds	r1, r4, r5
 8007854:	428b      	cmp	r3, r1
 8007856:	bf04      	itt	eq
 8007858:	6819      	ldreq	r1, [r3, #0]
 800785a:	685b      	ldreq	r3, [r3, #4]
 800785c:	6063      	str	r3, [r4, #4]
 800785e:	bf04      	itt	eq
 8007860:	1949      	addeq	r1, r1, r5
 8007862:	6021      	streq	r1, [r4, #0]
 8007864:	6054      	str	r4, [r2, #4]
 8007866:	e7ca      	b.n	80077fe <_free_r+0x26>
 8007868:	b003      	add	sp, #12
 800786a:	bd30      	pop	{r4, r5, pc}
 800786c:	200045dc 	.word	0x200045dc

08007870 <_init>:
 8007870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007872:	bf00      	nop
 8007874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007876:	bc08      	pop	{r3}
 8007878:	469e      	mov	lr, r3
 800787a:	4770      	bx	lr

0800787c <_fini>:
 800787c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787e:	bf00      	nop
 8007880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007882:	bc08      	pop	{r3}
 8007884:	469e      	mov	lr, r3
 8007886:	4770      	bx	lr
