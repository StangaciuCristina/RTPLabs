
RTPLaboratories.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008050  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080081e0  080081e0  000091e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008254  08008254  0000a070  2**0
                  CONTENTS
  4 .ARM          00000008  08008254  08008254  00009254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800825c  0800825c  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800825c  0800825c  0000925c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008260  08008260  00009260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008264  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a070  2**0
                  CONTENTS
 10 .bss          00004498  20000070  20000070  0000a070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004508  20004508  0000a070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001df53  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000493a  00000000  00000000  00027ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b88  00000000  00000000  0002c930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001555  00000000  00000000  0002e4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f15  00000000  00000000  0002fa0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021db0  00000000  00000000  00054922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbede  00000000  00000000  000766d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001525b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000077dc  00000000  00000000  001525f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  00159dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080081c8 	.word	0x080081c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080081c8 	.word	0x080081c8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <rand>:
{
	1000,100,10
};

unsigned int rand (void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
   static unsigned int z1 = 12345, z2 = 12345, z3 = 12345, z4 = 12345;
   unsigned int b;
   b  = ((z1 << 6) ^ z1) >> 13;
 80004c6:	4b2b      	ldr	r3, [pc, #172]	@ (8000574 <rand+0xb4>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	019a      	lsls	r2, r3, #6
 80004cc:	4b29      	ldr	r3, [pc, #164]	@ (8000574 <rand+0xb4>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4053      	eors	r3, r2
 80004d2:	0b5b      	lsrs	r3, r3, #13
 80004d4:	607b      	str	r3, [r7, #4]
   z1 = ((z1 & 4294967294U) << 18) ^ b;
 80004d6:	4b27      	ldr	r3, [pc, #156]	@ (8000574 <rand+0xb4>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	049b      	lsls	r3, r3, #18
 80004dc:	0cdb      	lsrs	r3, r3, #19
 80004de:	04db      	lsls	r3, r3, #19
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	4053      	eors	r3, r2
 80004e4:	4a23      	ldr	r2, [pc, #140]	@ (8000574 <rand+0xb4>)
 80004e6:	6013      	str	r3, [r2, #0]
   b  = ((z2 << 2) ^ z2) >> 27;
 80004e8:	4b23      	ldr	r3, [pc, #140]	@ (8000578 <rand+0xb8>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	009a      	lsls	r2, r3, #2
 80004ee:	4b22      	ldr	r3, [pc, #136]	@ (8000578 <rand+0xb8>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4053      	eors	r3, r2
 80004f4:	0edb      	lsrs	r3, r3, #27
 80004f6:	607b      	str	r3, [r7, #4]
   z2 = ((z2 & 4294967288U) << 2) ^ b;
 80004f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000578 <rand+0xb8>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	f023 021f 	bic.w	r2, r3, #31
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4053      	eors	r3, r2
 8000506:	4a1c      	ldr	r2, [pc, #112]	@ (8000578 <rand+0xb8>)
 8000508:	6013      	str	r3, [r2, #0]
   b  = ((z3 << 13) ^ z3) >> 21;
 800050a:	4b1c      	ldr	r3, [pc, #112]	@ (800057c <rand+0xbc>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	035a      	lsls	r2, r3, #13
 8000510:	4b1a      	ldr	r3, [pc, #104]	@ (800057c <rand+0xbc>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4053      	eors	r3, r2
 8000516:	0d5b      	lsrs	r3, r3, #21
 8000518:	607b      	str	r3, [r7, #4]
   z3 = ((z3 & 4294967280U) << 7) ^ b;
 800051a:	4b18      	ldr	r3, [pc, #96]	@ (800057c <rand+0xbc>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	01db      	lsls	r3, r3, #7
 8000520:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000524:	f023 0307 	bic.w	r3, r3, #7
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	4053      	eors	r3, r2
 800052c:	4a13      	ldr	r2, [pc, #76]	@ (800057c <rand+0xbc>)
 800052e:	6013      	str	r3, [r2, #0]
   b  = ((z4 << 3) ^ z4) >> 12;
 8000530:	4b13      	ldr	r3, [pc, #76]	@ (8000580 <rand+0xc0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	00da      	lsls	r2, r3, #3
 8000536:	4b12      	ldr	r3, [pc, #72]	@ (8000580 <rand+0xc0>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4053      	eors	r3, r2
 800053c:	0b1b      	lsrs	r3, r3, #12
 800053e:	607b      	str	r3, [r7, #4]
   z4 = ((z4 & 4294967168U) << 13) ^ b;
 8000540:	4b0f      	ldr	r3, [pc, #60]	@ (8000580 <rand+0xc0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	035b      	lsls	r3, r3, #13
 8000546:	0d1b      	lsrs	r3, r3, #20
 8000548:	051b      	lsls	r3, r3, #20
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	4053      	eors	r3, r2
 800054e:	4a0c      	ldr	r2, [pc, #48]	@ (8000580 <rand+0xc0>)
 8000550:	6013      	str	r3, [r2, #0]
   return (z1 ^ z2 ^ z3 ^ z4);
 8000552:	4b08      	ldr	r3, [pc, #32]	@ (8000574 <rand+0xb4>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	4b08      	ldr	r3, [pc, #32]	@ (8000578 <rand+0xb8>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	405a      	eors	r2, r3
 800055c:	4b07      	ldr	r3, [pc, #28]	@ (800057c <rand+0xbc>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	405a      	eors	r2, r3
 8000562:	4b07      	ldr	r3, [pc, #28]	@ (8000580 <rand+0xc0>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4053      	eors	r3, r2
}
 8000568:	4618      	mov	r0, r3
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	20000000 	.word	0x20000000
 8000578:	20000004 	.word	0x20000004
 800057c:	20000008 	.word	0x20000008
 8000580:	2000000c 	.word	0x2000000c

08000584 <prvStdioGatekeeperTask>:

/* The tasks block for a pseudo random time between 0 and xMaxBlockTime ticks. */
const TickType_t xMaxBlockTimeTicks = 0x20;

static void prvStdioGatekeeperTask( void *pvParameters )
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	writes to standard out there are no mutual exclusion or serialization issues
	to consider within this task itself. */
	for( ;; )
	{
		/* Wait for a message to arrive. */
		xQueueReceive( xPrintQueue, &delay, portMAX_DELAY );
 800058c:	4b0e      	ldr	r3, [pc, #56]	@ (80005c8 <prvStdioGatekeeperTask+0x44>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f107 010c 	add.w	r1, r7, #12
 8000594:	f04f 32ff 	mov.w	r2, #4294967295
 8000598:	4618      	mov	r0, r3
 800059a:	f005 fc07 	bl	8005dac <xQueueReceive>

		HAL_GPIO_TogglePin(GPIOD, BLUE_LED);
 800059e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005a2:	480a      	ldr	r0, [pc, #40]	@ (80005cc <prvStdioGatekeeperTask+0x48>)
 80005a4:	f000 ffed 	bl	8001582 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(delay));
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	461a      	mov	r2, r3
 80005ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005b0:	fb02 f303 	mul.w	r3, r2, r3
 80005b4:	4a06      	ldr	r2, [pc, #24]	@ (80005d0 <prvStdioGatekeeperTask+0x4c>)
 80005b6:	fba2 2303 	umull	r2, r3, r2, r3
 80005ba:	099b      	lsrs	r3, r3, #6
 80005bc:	4618      	mov	r0, r3
 80005be:	f005 ff91 	bl	80064e4 <vTaskDelay>
		xQueueReceive( xPrintQueue, &delay, portMAX_DELAY );
 80005c2:	bf00      	nop
 80005c4:	e7e2      	b.n	800058c <prvStdioGatekeeperTask+0x8>
 80005c6:	bf00      	nop
 80005c8:	2000008c 	.word	0x2000008c
 80005cc:	40020c00 	.word	0x40020c00
 80005d0:	10624dd3 	.word	0x10624dd3

080005d4 <prvPrintTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvPrintTask( void *pvParameters )
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
int iIndexToString;

	/* Two instances of this task are created so the index to the string the task
	will send to the gatekeeper task is passed in the task parameter.  Cast this
	to the required type. */
	iIndexToString = ( int ) pvParameters;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	60fb      	str	r3, [r7, #12]
	{
		/* Print out the string, not directly but by passing the string to the
		gatekeeper task on the queue.  The queue is created before the scheduler is
		started so will already exist by the time this task executes.  A block time
		is not specified as there should always be space in the queue. */
		xQueueSendToBack( xPrintQueue, &( Delays[ iIndexToString ] ), 0 );
 80005e0:	4b0e      	ldr	r3, [pc, #56]	@ (800061c <prvPrintTask+0x48>)
 80005e2:	6818      	ldr	r0, [r3, #0]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000620 <prvPrintTask+0x4c>)
 80005ea:	1899      	adds	r1, r3, r2
 80005ec:	2300      	movs	r3, #0
 80005ee:	2200      	movs	r2, #0
 80005f0:	f005 fa3c 	bl	8005a6c <xQueueGenericSend>
		HAL_GPIO_TogglePin(GPIOD, GREEN_LED);
 80005f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005f8:	480a      	ldr	r0, [pc, #40]	@ (8000624 <prvPrintTask+0x50>)
 80005fa:	f000 ffc2 	bl	8001582 <HAL_GPIO_TogglePin>
		/* Wait a pseudo random time.  Note that rand() is not necessarily
		re-entrant, but in this case it does not really matter as the code does
		not care what value is returned.  In a more secure application a version
		of rand() that is known to be re-entrant should be used - or calls to
		rand() should be protected using a critical section. */
		vTaskDelay( ( rand() % xMaxBlockTimeTicks ) );
 80005fe:	f7ff ff5f 	bl	80004c0 <rand>
 8000602:	4603      	mov	r3, r0
 8000604:	2220      	movs	r2, #32
 8000606:	fbb3 f1f2 	udiv	r1, r3, r2
 800060a:	fb01 f202 	mul.w	r2, r1, r2
 800060e:	1a9b      	subs	r3, r3, r2
 8000610:	4618      	mov	r0, r3
 8000612:	f005 ff67 	bl	80064e4 <vTaskDelay>
		xQueueSendToBack( xPrintQueue, &( Delays[ iIndexToString ] ), 0 );
 8000616:	bf00      	nop
 8000618:	e7e2      	b.n	80005e0 <prvPrintTask+0xc>
 800061a:	bf00      	nop
 800061c:	2000008c 	.word	0x2000008c
 8000620:	08008230 	.word	0x08008230
 8000624:	40020c00 	.word	0x40020c00

08000628 <application21>:
	vAssertCalled( __LINE__, __FILE__ );
}
/*-----------------------------------------------------------*/

void application21(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af02      	add	r7, sp, #8
	/* Before a queue is used it must be explicitly created.  The queue is created
	to hold a maximum of 5 character pointers. */
	xPrintQueue = xQueueCreate( 5, sizeof( char * ) );
 800062e:	2200      	movs	r2, #0
 8000630:	2104      	movs	r1, #4
 8000632:	2005      	movs	r0, #5
 8000634:	f005 f9c4 	bl	80059c0 <xQueueGenericCreate>
 8000638:	4603      	mov	r3, r0
 800063a:	4a15      	ldr	r2, [pc, #84]	@ (8000690 <application21+0x68>)
 800063c:	6013      	str	r3, [r2, #0]

	/* Check the queue was created successfully. */
	if( xPrintQueue != NULL )
 800063e:	4b14      	ldr	r3, [pc, #80]	@ (8000690 <application21+0x68>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d020      	beq.n	8000688 <application21+0x60>
	{
		/* Create two instances of the tasks that send messages to the gatekeeper.
		The	index to the string they attempt to write is passed in as the task
		parameter (4th parameter to xTaskCreate()).  The tasks are created at
		different priorities so some pre-emption will occur. */
		xTaskCreate( prvPrintTask, "Print1", 1000, ( void * ) 0, 1, NULL );
 8000646:	2300      	movs	r3, #0
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	2301      	movs	r3, #1
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2300      	movs	r3, #0
 8000650:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000654:	490f      	ldr	r1, [pc, #60]	@ (8000694 <application21+0x6c>)
 8000656:	4810      	ldr	r0, [pc, #64]	@ (8000698 <application21+0x70>)
 8000658:	f005 fdf8 	bl	800624c <xTaskCreate>
		xTaskCreate( prvPrintTask, "Print2", 1000, ( void * ) 1, 2, NULL );
 800065c:	2300      	movs	r3, #0
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	2302      	movs	r3, #2
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	2301      	movs	r3, #1
 8000666:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800066a:	490c      	ldr	r1, [pc, #48]	@ (800069c <application21+0x74>)
 800066c:	480a      	ldr	r0, [pc, #40]	@ (8000698 <application21+0x70>)
 800066e:	f005 fded 	bl	800624c <xTaskCreate>

		/* Create the gatekeeper task.  This is the only task that is permitted
		to access standard out. */
		xTaskCreate( prvStdioGatekeeperTask, "Gatekeeper", 1000, NULL, 0, NULL );
 8000672:	2300      	movs	r3, #0
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2300      	movs	r3, #0
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2300      	movs	r3, #0
 800067c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000680:	4907      	ldr	r1, [pc, #28]	@ (80006a0 <application21+0x78>)
 8000682:	4808      	ldr	r0, [pc, #32]	@ (80006a4 <application21+0x7c>)
 8000684:	f005 fde2 	bl	800624c <xTaskCreate>
	}

}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	2000008c 	.word	0x2000008c
 8000694:	080081fc 	.word	0x080081fc
 8000698:	080005d5 	.word	0x080005d5
 800069c:	08008204 	.word	0x08008204
 80006a0:	0800820c 	.word	0x0800820c
 80006a4:	08000585 	.word	0x08000585

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ac:	f000 fc90 	bl	8000fd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b0:	f000 f810 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b4:	f000 f930 	bl	8000918 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006b8:	f000 f876 	bl	80007a8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80006bc:	f000 f8a2 	bl	8000804 <MX_I2S3_Init>
  MX_SPI1_Init();
 80006c0:	f000 f8d0 	bl	8000864 <MX_SPI1_Init>
  MX_TIM11_Init();
 80006c4:	f000 f904 	bl	80008d0 <MX_TIM11_Init>
  /* definition and creation of defaultTask */


  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	application21();
 80006c8:	f7ff ffae 	bl	8000628 <application21>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 80006cc:	f005 ff40 	bl	8006550 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <main+0x28>

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	@ 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	2230      	movs	r2, #48	@ 0x30
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f007 fc94 	bl	8008010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	4b28      	ldr	r3, [pc, #160]	@ (80007a0 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000700:	4a27      	ldr	r2, [pc, #156]	@ (80007a0 <SystemClock_Config+0xcc>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	@ 0x40
 8000708:	4b25      	ldr	r3, [pc, #148]	@ (80007a0 <SystemClock_Config+0xcc>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	4b22      	ldr	r3, [pc, #136]	@ (80007a4 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a21      	ldr	r2, [pc, #132]	@ (80007a4 <SystemClock_Config+0xd0>)
 800071e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b1f      	ldr	r3, [pc, #124]	@ (80007a4 <SystemClock_Config+0xd0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000730:	2301      	movs	r3, #1
 8000732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000734:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000738:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000744:	2308      	movs	r3, #8
 8000746:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000748:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800074c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074e:	2302      	movs	r3, #2
 8000750:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000752:	2307      	movs	r3, #7
 8000754:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	4618      	mov	r0, r3
 800075c:	f003 fa9c 	bl	8003c98 <HAL_RCC_OscConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000766:	f000 f9ef 	bl	8000b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	230f      	movs	r3, #15
 800076c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	2302      	movs	r3, #2
 8000770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000776:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800077a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000780:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2105      	movs	r1, #5
 8000788:	4618      	mov	r0, r3
 800078a:	f003 fcfd 	bl	8004188 <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000794:	f000 f9d8 	bl	8000b48 <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3750      	adds	r7, #80	@ 0x50
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ac:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007ae:	4a13      	ldr	r2, [pc, #76]	@ (80007fc <MX_I2C1_Init+0x54>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007b2:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007b4:	4a12      	ldr	r2, [pc, #72]	@ (8000800 <MX_I2C1_Init+0x58>)
 80007b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007be:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007d2:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d8:	4b07      	ldr	r3, [pc, #28]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e4:	4804      	ldr	r0, [pc, #16]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007e6:	f002 fc73 	bl	80030d0 <HAL_I2C_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007f0:	f000 f9aa 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000090 	.word	0x20000090
 80007fc:	40005400 	.word	0x40005400
 8000800:	000186a0 	.word	0x000186a0

08000804 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000808:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <MX_I2S3_Init+0x54>)
 800080a:	4a14      	ldr	r2, [pc, #80]	@ (800085c <MX_I2S3_Init+0x58>)
 800080c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800080e:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <MX_I2S3_Init+0x54>)
 8000810:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000814:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000816:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <MX_I2S3_Init+0x54>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800081c:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_I2S3_Init+0x54>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000822:	4b0d      	ldr	r3, [pc, #52]	@ (8000858 <MX_I2S3_Init+0x54>)
 8000824:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000828:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <MX_I2S3_Init+0x54>)
 800082c:	4a0c      	ldr	r2, [pc, #48]	@ (8000860 <MX_I2S3_Init+0x5c>)
 800082e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000830:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_I2S3_Init+0x54>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <MX_I2S3_Init+0x54>)
 8000838:	2200      	movs	r2, #0
 800083a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_I2S3_Init+0x54>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	@ (8000858 <MX_I2S3_Init+0x54>)
 8000844:	f002 fd88 	bl	8003358 <HAL_I2S_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800084e:	f000 f97b 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200000e4 	.word	0x200000e4
 800085c:	40003c00 	.word	0x40003c00
 8000860:	00017700 	.word	0x00017700

08000864 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000868:	4b17      	ldr	r3, [pc, #92]	@ (80008c8 <MX_SPI1_Init+0x64>)
 800086a:	4a18      	ldr	r2, [pc, #96]	@ (80008cc <MX_SPI1_Init+0x68>)
 800086c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800086e:	4b16      	ldr	r3, [pc, #88]	@ (80008c8 <MX_SPI1_Init+0x64>)
 8000870:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000874:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000876:	4b14      	ldr	r3, [pc, #80]	@ (80008c8 <MX_SPI1_Init+0x64>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800087c:	4b12      	ldr	r3, [pc, #72]	@ (80008c8 <MX_SPI1_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <MX_SPI1_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000888:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <MX_SPI1_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <MX_SPI1_Init+0x64>)
 8000890:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000894:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000896:	4b0c      	ldr	r3, [pc, #48]	@ (80008c8 <MX_SPI1_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800089c:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <MX_SPI1_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a2:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <MX_SPI1_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a8:	4b07      	ldr	r3, [pc, #28]	@ (80008c8 <MX_SPI1_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008ae:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <MX_SPI1_Init+0x64>)
 80008b0:	220a      	movs	r2, #10
 80008b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	@ (80008c8 <MX_SPI1_Init+0x64>)
 80008b6:	f003 fffb 	bl	80048b0 <HAL_SPI_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008c0:	f000 f942 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2000012c 	.word	0x2000012c
 80008cc:	40013000 	.word	0x40013000

080008d0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80008d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000910 <MX_TIM11_Init+0x40>)
 80008d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000914 <MX_TIM11_Init+0x44>)
 80008d8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80008da:	4b0d      	ldr	r3, [pc, #52]	@ (8000910 <MX_TIM11_Init+0x40>)
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000910 <MX_TIM11_Init+0x40>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80008e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000910 <MX_TIM11_Init+0x40>)
 80008e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008ec:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ee:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <MX_TIM11_Init+0x40>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <MX_TIM11_Init+0x40>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	@ (8000910 <MX_TIM11_Init+0x40>)
 80008fc:	f004 f861 	bl	80049c2 <HAL_TIM_Base_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000906:	f000 f91f 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000184 	.word	0x20000184
 8000914:	40014800 	.word	0x40014800

08000918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08c      	sub	sp, #48	@ 0x30
 800091c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	61bb      	str	r3, [r7, #24]
 8000932:	4b76      	ldr	r3, [pc, #472]	@ (8000b0c <MX_GPIO_Init+0x1f4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a75      	ldr	r2, [pc, #468]	@ (8000b0c <MX_GPIO_Init+0x1f4>)
 8000938:	f043 0310 	orr.w	r3, r3, #16
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b73      	ldr	r3, [pc, #460]	@ (8000b0c <MX_GPIO_Init+0x1f4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0310 	and.w	r3, r3, #16
 8000946:	61bb      	str	r3, [r7, #24]
 8000948:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
 800094e:	4b6f      	ldr	r3, [pc, #444]	@ (8000b0c <MX_GPIO_Init+0x1f4>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a6e      	ldr	r2, [pc, #440]	@ (8000b0c <MX_GPIO_Init+0x1f4>)
 8000954:	f043 0304 	orr.w	r3, r3, #4
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b6c      	ldr	r3, [pc, #432]	@ (8000b0c <MX_GPIO_Init+0x1f4>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0304 	and.w	r3, r3, #4
 8000962:	617b      	str	r3, [r7, #20]
 8000964:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	4b68      	ldr	r3, [pc, #416]	@ (8000b0c <MX_GPIO_Init+0x1f4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a67      	ldr	r2, [pc, #412]	@ (8000b0c <MX_GPIO_Init+0x1f4>)
 8000970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b65      	ldr	r3, [pc, #404]	@ (8000b0c <MX_GPIO_Init+0x1f4>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	4b61      	ldr	r3, [pc, #388]	@ (8000b0c <MX_GPIO_Init+0x1f4>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a60      	ldr	r2, [pc, #384]	@ (8000b0c <MX_GPIO_Init+0x1f4>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b5e      	ldr	r3, [pc, #376]	@ (8000b0c <MX_GPIO_Init+0x1f4>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	4b5a      	ldr	r3, [pc, #360]	@ (8000b0c <MX_GPIO_Init+0x1f4>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	4a59      	ldr	r2, [pc, #356]	@ (8000b0c <MX_GPIO_Init+0x1f4>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ae:	4b57      	ldr	r3, [pc, #348]	@ (8000b0c <MX_GPIO_Init+0x1f4>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b53      	ldr	r3, [pc, #332]	@ (8000b0c <MX_GPIO_Init+0x1f4>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a52      	ldr	r2, [pc, #328]	@ (8000b0c <MX_GPIO_Init+0x1f4>)
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b50      	ldr	r3, [pc, #320]	@ (8000b0c <MX_GPIO_Init+0x1f4>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0308 	and.w	r3, r3, #8
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2108      	movs	r1, #8
 80009da:	484d      	ldr	r0, [pc, #308]	@ (8000b10 <MX_GPIO_Init+0x1f8>)
 80009dc:	f000 fdb8 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	2101      	movs	r1, #1
 80009e4:	484b      	ldr	r0, [pc, #300]	@ (8000b14 <MX_GPIO_Init+0x1fc>)
 80009e6:	f000 fdb3 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ea:	2200      	movs	r2, #0
 80009ec:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80009f0:	4849      	ldr	r0, [pc, #292]	@ (8000b18 <MX_GPIO_Init+0x200>)
 80009f2:	f000 fdad 	bl	8001550 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009f6:	2308      	movs	r3, #8
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4840      	ldr	r0, [pc, #256]	@ (8000b10 <MX_GPIO_Init+0x1f8>)
 8000a0e:	f000 fc03 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a12:	2301      	movs	r3, #1
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	483a      	ldr	r0, [pc, #232]	@ (8000b14 <MX_GPIO_Init+0x1fc>)
 8000a2a:	f000 fbf5 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a2e:	2308      	movs	r3, #8
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a3e:	2305      	movs	r3, #5
 8000a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4832      	ldr	r0, [pc, #200]	@ (8000b14 <MX_GPIO_Init+0x1fc>)
 8000a4a:	f000 fbe5 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a52:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	482e      	ldr	r0, [pc, #184]	@ (8000b1c <MX_GPIO_Init+0x204>)
 8000a64:	f000 fbd8 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a68:	2304      	movs	r3, #4
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4829      	ldr	r0, [pc, #164]	@ (8000b20 <MX_GPIO_Init+0x208>)
 8000a7c:	f000 fbcc 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a92:	2305      	movs	r3, #5
 8000a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4820      	ldr	r0, [pc, #128]	@ (8000b20 <MX_GPIO_Init+0x208>)
 8000a9e:	f000 fbbb 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000aa2:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000aa6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4817      	ldr	r0, [pc, #92]	@ (8000b18 <MX_GPIO_Init+0x200>)
 8000abc:	f000 fbac 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ac0:	2320      	movs	r3, #32
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4811      	ldr	r0, [pc, #68]	@ (8000b18 <MX_GPIO_Init+0x200>)
 8000ad4:	f000 fba0 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000adc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	4619      	mov	r1, r3
 8000aec:	4808      	ldr	r0, [pc, #32]	@ (8000b10 <MX_GPIO_Init+0x1f8>)
 8000aee:	f000 fb93 	bl	8001218 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2105      	movs	r1, #5
 8000af6:	2006      	movs	r0, #6
 8000af8:	f000 fb64 	bl	80011c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000afc:	2006      	movs	r0, #6
 8000afe:	f000 fb7d 	bl	80011fc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b02:	bf00      	nop
 8000b04:	3730      	adds	r7, #48	@ 0x30
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40020800 	.word	0x40020800
 8000b18:	40020c00 	.word	0x40020c00
 8000b1c:	40020000 	.word	0x40020000
 8000b20:	40020400 	.word	0x40020400

08000b24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a04      	ldr	r2, [pc, #16]	@ (8000b44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d101      	bne.n	8000b3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b36:	f000 fa6d 	bl	8001014 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40010000 	.word	0x40010000

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <Error_Handler+0x8>

08000b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <HAL_MspInit+0x54>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b62:	4a11      	ldr	r2, [pc, #68]	@ (8000ba8 <HAL_MspInit+0x54>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <HAL_MspInit+0x54>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <HAL_MspInit+0x54>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba8 <HAL_MspInit+0x54>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b86:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <HAL_MspInit+0x54>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	210f      	movs	r1, #15
 8000b96:	f06f 0001 	mvn.w	r0, #1
 8000b9a:	f000 fb13 	bl	80011c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800

08000bac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	@ 0x28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a19      	ldr	r2, [pc, #100]	@ (8000c30 <HAL_I2C_MspInit+0x84>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d12c      	bne.n	8000c28 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <HAL_I2C_MspInit+0x88>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a17      	ldr	r2, [pc, #92]	@ (8000c34 <HAL_I2C_MspInit+0x88>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <HAL_I2C_MspInit+0x88>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000bea:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf0:	2312      	movs	r3, #18
 8000bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	480c      	ldr	r0, [pc, #48]	@ (8000c38 <HAL_I2C_MspInit+0x8c>)
 8000c08:	f000 fb06 	bl	8001218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <HAL_I2C_MspInit+0x88>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c14:	4a07      	ldr	r2, [pc, #28]	@ (8000c34 <HAL_I2C_MspInit+0x88>)
 8000c16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c1c:	4b05      	ldr	r3, [pc, #20]	@ (8000c34 <HAL_I2C_MspInit+0x88>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c28:	bf00      	nop
 8000c2a:	3728      	adds	r7, #40	@ 0x28
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40005400 	.word	0x40005400
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020400 	.word	0x40020400

08000c3c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08e      	sub	sp, #56	@ 0x38
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a31      	ldr	r2, [pc, #196]	@ (8000d2c <HAL_I2S_MspInit+0xf0>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d15a      	bne.n	8000d22 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c70:	23c0      	movs	r3, #192	@ 0xc0
 8000c72:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c74:	2302      	movs	r3, #2
 8000c76:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f003 fcd5 	bl	800462c <HAL_RCCEx_PeriphCLKConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c88:	f7ff ff5e 	bl	8000b48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	4b27      	ldr	r3, [pc, #156]	@ (8000d30 <HAL_I2S_MspInit+0xf4>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c94:	4a26      	ldr	r2, [pc, #152]	@ (8000d30 <HAL_I2S_MspInit+0xf4>)
 8000c96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c9c:	4b24      	ldr	r3, [pc, #144]	@ (8000d30 <HAL_I2S_MspInit+0xf4>)
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	4b20      	ldr	r3, [pc, #128]	@ (8000d30 <HAL_I2S_MspInit+0xf4>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb0:	4a1f      	ldr	r2, [pc, #124]	@ (8000d30 <HAL_I2S_MspInit+0xf4>)
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d30 <HAL_I2S_MspInit+0xf4>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	4b19      	ldr	r3, [pc, #100]	@ (8000d30 <HAL_I2S_MspInit+0xf4>)
 8000cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ccc:	4a18      	ldr	r2, [pc, #96]	@ (8000d30 <HAL_I2S_MspInit+0xf4>)
 8000cce:	f043 0304 	orr.w	r3, r3, #4
 8000cd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd4:	4b16      	ldr	r3, [pc, #88]	@ (8000d30 <HAL_I2S_MspInit+0xf4>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ce0:	2310      	movs	r3, #16
 8000ce2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cf0:	2306      	movs	r3, #6
 8000cf2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480e      	ldr	r0, [pc, #56]	@ (8000d34 <HAL_I2S_MspInit+0xf8>)
 8000cfc:	f000 fa8c 	bl	8001218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d00:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000d04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d12:	2306      	movs	r3, #6
 8000d14:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4806      	ldr	r0, [pc, #24]	@ (8000d38 <HAL_I2S_MspInit+0xfc>)
 8000d1e:	f000 fa7b 	bl	8001218 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d22:	bf00      	nop
 8000d24:	3738      	adds	r7, #56	@ 0x38
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40003c00 	.word	0x40003c00
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020000 	.word	0x40020000
 8000d38:	40020800 	.word	0x40020800

08000d3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	@ 0x28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a19      	ldr	r2, [pc, #100]	@ (8000dc0 <HAL_SPI_MspInit+0x84>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d12b      	bne.n	8000db6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	4b18      	ldr	r3, [pc, #96]	@ (8000dc4 <HAL_SPI_MspInit+0x88>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d66:	4a17      	ldr	r2, [pc, #92]	@ (8000dc4 <HAL_SPI_MspInit+0x88>)
 8000d68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d6e:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <HAL_SPI_MspInit+0x88>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <HAL_SPI_MspInit+0x88>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	4a10      	ldr	r2, [pc, #64]	@ (8000dc4 <HAL_SPI_MspInit+0x88>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <HAL_SPI_MspInit+0x88>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d96:	23e0      	movs	r3, #224	@ 0xe0
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000da6:	2305      	movs	r3, #5
 8000da8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	4805      	ldr	r0, [pc, #20]	@ (8000dc8 <HAL_SPI_MspInit+0x8c>)
 8000db2:	f000 fa31 	bl	8001218 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	3728      	adds	r7, #40	@ 0x28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40013000 	.word	0x40013000
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020000 	.word	0x40020000

08000dcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0b      	ldr	r2, [pc, #44]	@ (8000e08 <HAL_TIM_Base_MspInit+0x3c>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d10d      	bne.n	8000dfa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b0a      	ldr	r3, [pc, #40]	@ (8000e0c <HAL_TIM_Base_MspInit+0x40>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de6:	4a09      	ldr	r2, [pc, #36]	@ (8000e0c <HAL_TIM_Base_MspInit+0x40>)
 8000de8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dee:	4b07      	ldr	r3, [pc, #28]	@ (8000e0c <HAL_TIM_Base_MspInit+0x40>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000dfa:	bf00      	nop
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40014800 	.word	0x40014800
 8000e0c:	40023800 	.word	0x40023800

08000e10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08c      	sub	sp, #48	@ 0x30
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e20:	2300      	movs	r3, #0
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee4 <HAL_InitTick+0xd4>)
 8000e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e28:	4a2e      	ldr	r2, [pc, #184]	@ (8000ee4 <HAL_InitTick+0xd4>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e30:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee4 <HAL_InitTick+0xd4>)
 8000e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e3c:	f107 020c 	add.w	r2, r7, #12
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	4611      	mov	r1, r2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f003 fbbe 	bl	80045c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000e4c:	f003 fba8 	bl	80045a0 <HAL_RCC_GetPCLK2Freq>
 8000e50:	4603      	mov	r3, r0
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e58:	4a23      	ldr	r2, [pc, #140]	@ (8000ee8 <HAL_InitTick+0xd8>)
 8000e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5e:	0c9b      	lsrs	r3, r3, #18
 8000e60:	3b01      	subs	r3, #1
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e64:	4b21      	ldr	r3, [pc, #132]	@ (8000eec <HAL_InitTick+0xdc>)
 8000e66:	4a22      	ldr	r2, [pc, #136]	@ (8000ef0 <HAL_InitTick+0xe0>)
 8000e68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e6a:	4b20      	ldr	r3, [pc, #128]	@ (8000eec <HAL_InitTick+0xdc>)
 8000e6c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e70:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e72:	4a1e      	ldr	r2, [pc, #120]	@ (8000eec <HAL_InitTick+0xdc>)
 8000e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e76:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e78:	4b1c      	ldr	r3, [pc, #112]	@ (8000eec <HAL_InitTick+0xdc>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000eec <HAL_InitTick+0xdc>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e84:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <HAL_InitTick+0xdc>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000e8a:	4818      	ldr	r0, [pc, #96]	@ (8000eec <HAL_InitTick+0xdc>)
 8000e8c:	f003 fd99 	bl	80049c2 <HAL_TIM_Base_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000e96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d11b      	bne.n	8000ed6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e9e:	4813      	ldr	r0, [pc, #76]	@ (8000eec <HAL_InitTick+0xdc>)
 8000ea0:	f003 fdde 	bl	8004a60 <HAL_TIM_Base_Start_IT>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000eaa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d111      	bne.n	8000ed6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000eb2:	2019      	movs	r0, #25
 8000eb4:	f000 f9a2 	bl	80011fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b0f      	cmp	r3, #15
 8000ebc:	d808      	bhi.n	8000ed0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	2019      	movs	r0, #25
 8000ec4:	f000 f97e 	bl	80011c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef4 <HAL_InitTick+0xe4>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]
 8000ece:	e002      	b.n	8000ed6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ed6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3730      	adds	r7, #48	@ 0x30
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	431bde83 	.word	0x431bde83
 8000eec:	200001cc 	.word	0x200001cc
 8000ef0:	40010000 	.word	0x40010000
 8000ef4:	20000014 	.word	0x20000014

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <NMI_Handler+0x4>

08000f00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <MemManage_Handler+0x4>

08000f10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f36:	f003 fe03 	bl	8004b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200001cc 	.word	0x200001cc

08000f44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f48:	4802      	ldr	r0, [pc, #8]	@ (8000f54 <OTG_FS_IRQHandler+0x10>)
 8000f4a:	f000 fb34 	bl	80015b6 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20003fe8 	.word	0x20003fe8

08000f58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f5c:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <SystemInit+0x20>)
 8000f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f62:	4a05      	ldr	r2, [pc, #20]	@ (8000f78 <SystemInit+0x20>)
 8000f64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fb4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f80:	f7ff ffea 	bl	8000f58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f84:	480c      	ldr	r0, [pc, #48]	@ (8000fb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f86:	490d      	ldr	r1, [pc, #52]	@ (8000fbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f88:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f8c:	e002      	b.n	8000f94 <LoopCopyDataInit>

08000f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f92:	3304      	adds	r3, #4

08000f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f98:	d3f9      	bcc.n	8000f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000fc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa0:	e001      	b.n	8000fa6 <LoopFillZerobss>

08000fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa4:	3204      	adds	r2, #4

08000fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa8:	d3fb      	bcc.n	8000fa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000faa:	f007 f88f 	bl	80080cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fae:	f7ff fb7b 	bl	80006a8 <main>
  bx  lr    
 8000fb2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fbc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fc0:	08008264 	.word	0x08008264
  ldr r2, =_sbss
 8000fc4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fc8:	20004508 	.word	0x20004508

08000fcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fcc:	e7fe      	b.n	8000fcc <ADC_IRQHandler>
	...

08000fd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <HAL_Init+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001010 <HAL_Init+0x40>)
 8000fda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <HAL_Init+0x40>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0a      	ldr	r2, [pc, #40]	@ (8001010 <HAL_Init+0x40>)
 8000fe6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fec:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <HAL_Init+0x40>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a07      	ldr	r2, [pc, #28]	@ (8001010 <HAL_Init+0x40>)
 8000ff2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ff6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	f000 f8d8 	bl	80011ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffe:	200f      	movs	r0, #15
 8001000:	f7ff ff06 	bl	8000e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001004:	f7ff fda6 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023c00 	.word	0x40023c00

08001014 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <HAL_IncTick+0x20>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <HAL_IncTick+0x24>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4413      	add	r3, r2
 8001024:	4a04      	ldr	r2, [pc, #16]	@ (8001038 <HAL_IncTick+0x24>)
 8001026:	6013      	str	r3, [r2, #0]
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000018 	.word	0x20000018
 8001038:	20000214 	.word	0x20000214

0800103c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return uwTick;
 8001040:	4b03      	ldr	r3, [pc, #12]	@ (8001050 <HAL_GetTick+0x14>)
 8001042:	681b      	ldr	r3, [r3, #0]
}
 8001044:	4618      	mov	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000214 	.word	0x20000214

08001054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001064:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <__NVIC_SetPriorityGrouping+0x44>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001070:	4013      	ands	r3, r2
 8001072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800107c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001080:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001086:	4a04      	ldr	r2, [pc, #16]	@ (8001098 <__NVIC_SetPriorityGrouping+0x44>)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	60d3      	str	r3, [r2, #12]
}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a0:	4b04      	ldr	r3, [pc, #16]	@ (80010b4 <__NVIC_GetPriorityGrouping+0x18>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	f003 0307 	and.w	r3, r3, #7
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	db0b      	blt.n	80010e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	f003 021f 	and.w	r2, r3, #31
 80010d0:	4907      	ldr	r1, [pc, #28]	@ (80010f0 <__NVIC_EnableIRQ+0x38>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	095b      	lsrs	r3, r3, #5
 80010d8:	2001      	movs	r0, #1
 80010da:	fa00 f202 	lsl.w	r2, r0, r2
 80010de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000e100 	.word	0xe000e100

080010f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	db0a      	blt.n	800111e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	490c      	ldr	r1, [pc, #48]	@ (8001140 <__NVIC_SetPriority+0x4c>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	0112      	lsls	r2, r2, #4
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	440b      	add	r3, r1
 8001118:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800111c:	e00a      	b.n	8001134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4908      	ldr	r1, [pc, #32]	@ (8001144 <__NVIC_SetPriority+0x50>)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	3b04      	subs	r3, #4
 800112c:	0112      	lsls	r2, r2, #4
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	440b      	add	r3, r1
 8001132:	761a      	strb	r2, [r3, #24]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000e100 	.word	0xe000e100
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	@ 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f1c3 0307 	rsb	r3, r3, #7
 8001162:	2b04      	cmp	r3, #4
 8001164:	bf28      	it	cs
 8001166:	2304      	movcs	r3, #4
 8001168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3304      	adds	r3, #4
 800116e:	2b06      	cmp	r3, #6
 8001170:	d902      	bls.n	8001178 <NVIC_EncodePriority+0x30>
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3b03      	subs	r3, #3
 8001176:	e000      	b.n	800117a <NVIC_EncodePriority+0x32>
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	f04f 32ff 	mov.w	r2, #4294967295
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	401a      	ands	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001190:	f04f 31ff 	mov.w	r1, #4294967295
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fa01 f303 	lsl.w	r3, r1, r3
 800119a:	43d9      	mvns	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	4313      	orrs	r3, r2
         );
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3724      	adds	r7, #36	@ 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ff4c 	bl	8001054 <__NVIC_SetPriorityGrouping>
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d6:	f7ff ff61 	bl	800109c <__NVIC_GetPriorityGrouping>
 80011da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	68b9      	ldr	r1, [r7, #8]
 80011e0:	6978      	ldr	r0, [r7, #20]
 80011e2:	f7ff ffb1 	bl	8001148 <NVIC_EncodePriority>
 80011e6:	4602      	mov	r2, r0
 80011e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ec:	4611      	mov	r1, r2
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff ff80 	bl	80010f4 <__NVIC_SetPriority>
}
 80011f4:	bf00      	nop
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff54 	bl	80010b8 <__NVIC_EnableIRQ>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	@ 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800122a:	2300      	movs	r3, #0
 800122c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
 8001232:	e16b      	b.n	800150c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001234:	2201      	movs	r2, #1
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	429a      	cmp	r2, r3
 800124e:	f040 815a 	bne.w	8001506 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	2b01      	cmp	r3, #1
 800125c:	d005      	beq.n	800126a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001266:	2b02      	cmp	r3, #2
 8001268:	d130      	bne.n	80012cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	2203      	movs	r2, #3
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	68da      	ldr	r2, [r3, #12]
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012a0:	2201      	movs	r2, #1
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	091b      	lsrs	r3, r3, #4
 80012b6:	f003 0201 	and.w	r2, r3, #1
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	d017      	beq.n	8001308 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d123      	bne.n	800135c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	08da      	lsrs	r2, r3, #3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3208      	adds	r2, #8
 800131c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	220f      	movs	r2, #15
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	691a      	ldr	r2, [r3, #16]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	08da      	lsrs	r2, r3, #3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3208      	adds	r2, #8
 8001356:	69b9      	ldr	r1, [r7, #24]
 8001358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	2203      	movs	r2, #3
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0203 	and.w	r2, r3, #3
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 80b4 	beq.w	8001506 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b60      	ldr	r3, [pc, #384]	@ (8001524 <HAL_GPIO_Init+0x30c>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a6:	4a5f      	ldr	r2, [pc, #380]	@ (8001524 <HAL_GPIO_Init+0x30c>)
 80013a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001524 <HAL_GPIO_Init+0x30c>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ba:	4a5b      	ldr	r2, [pc, #364]	@ (8001528 <HAL_GPIO_Init+0x310>)
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	089b      	lsrs	r3, r3, #2
 80013c0:	3302      	adds	r3, #2
 80013c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	220f      	movs	r2, #15
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4013      	ands	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a52      	ldr	r2, [pc, #328]	@ (800152c <HAL_GPIO_Init+0x314>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d02b      	beq.n	800143e <HAL_GPIO_Init+0x226>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a51      	ldr	r2, [pc, #324]	@ (8001530 <HAL_GPIO_Init+0x318>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d025      	beq.n	800143a <HAL_GPIO_Init+0x222>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a50      	ldr	r2, [pc, #320]	@ (8001534 <HAL_GPIO_Init+0x31c>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d01f      	beq.n	8001436 <HAL_GPIO_Init+0x21e>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001538 <HAL_GPIO_Init+0x320>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d019      	beq.n	8001432 <HAL_GPIO_Init+0x21a>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a4e      	ldr	r2, [pc, #312]	@ (800153c <HAL_GPIO_Init+0x324>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d013      	beq.n	800142e <HAL_GPIO_Init+0x216>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4d      	ldr	r2, [pc, #308]	@ (8001540 <HAL_GPIO_Init+0x328>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d00d      	beq.n	800142a <HAL_GPIO_Init+0x212>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4c      	ldr	r2, [pc, #304]	@ (8001544 <HAL_GPIO_Init+0x32c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d007      	beq.n	8001426 <HAL_GPIO_Init+0x20e>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4b      	ldr	r2, [pc, #300]	@ (8001548 <HAL_GPIO_Init+0x330>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d101      	bne.n	8001422 <HAL_GPIO_Init+0x20a>
 800141e:	2307      	movs	r3, #7
 8001420:	e00e      	b.n	8001440 <HAL_GPIO_Init+0x228>
 8001422:	2308      	movs	r3, #8
 8001424:	e00c      	b.n	8001440 <HAL_GPIO_Init+0x228>
 8001426:	2306      	movs	r3, #6
 8001428:	e00a      	b.n	8001440 <HAL_GPIO_Init+0x228>
 800142a:	2305      	movs	r3, #5
 800142c:	e008      	b.n	8001440 <HAL_GPIO_Init+0x228>
 800142e:	2304      	movs	r3, #4
 8001430:	e006      	b.n	8001440 <HAL_GPIO_Init+0x228>
 8001432:	2303      	movs	r3, #3
 8001434:	e004      	b.n	8001440 <HAL_GPIO_Init+0x228>
 8001436:	2302      	movs	r3, #2
 8001438:	e002      	b.n	8001440 <HAL_GPIO_Init+0x228>
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <HAL_GPIO_Init+0x228>
 800143e:	2300      	movs	r3, #0
 8001440:	69fa      	ldr	r2, [r7, #28]
 8001442:	f002 0203 	and.w	r2, r2, #3
 8001446:	0092      	lsls	r2, r2, #2
 8001448:	4093      	lsls	r3, r2
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001450:	4935      	ldr	r1, [pc, #212]	@ (8001528 <HAL_GPIO_Init+0x310>)
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	089b      	lsrs	r3, r3, #2
 8001456:	3302      	adds	r3, #2
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800145e:	4b3b      	ldr	r3, [pc, #236]	@ (800154c <HAL_GPIO_Init+0x334>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001482:	4a32      	ldr	r2, [pc, #200]	@ (800154c <HAL_GPIO_Init+0x334>)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001488:	4b30      	ldr	r3, [pc, #192]	@ (800154c <HAL_GPIO_Init+0x334>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014ac:	4a27      	ldr	r2, [pc, #156]	@ (800154c <HAL_GPIO_Init+0x334>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014b2:	4b26      	ldr	r3, [pc, #152]	@ (800154c <HAL_GPIO_Init+0x334>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014d6:	4a1d      	ldr	r2, [pc, #116]	@ (800154c <HAL_GPIO_Init+0x334>)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	@ (800154c <HAL_GPIO_Init+0x334>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001500:	4a12      	ldr	r2, [pc, #72]	@ (800154c <HAL_GPIO_Init+0x334>)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	61fb      	str	r3, [r7, #28]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	2b0f      	cmp	r3, #15
 8001510:	f67f ae90 	bls.w	8001234 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3724      	adds	r7, #36	@ 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	40013800 	.word	0x40013800
 800152c:	40020000 	.word	0x40020000
 8001530:	40020400 	.word	0x40020400
 8001534:	40020800 	.word	0x40020800
 8001538:	40020c00 	.word	0x40020c00
 800153c:	40021000 	.word	0x40021000
 8001540:	40021400 	.word	0x40021400
 8001544:	40021800 	.word	0x40021800
 8001548:	40021c00 	.word	0x40021c00
 800154c:	40013c00 	.word	0x40013c00

08001550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]
 800155c:	4613      	mov	r3, r2
 800155e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001560:	787b      	ldrb	r3, [r7, #1]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001566:	887a      	ldrh	r2, [r7, #2]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800156c:	e003      	b.n	8001576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	041a      	lsls	r2, r3, #16
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	619a      	str	r2, [r3, #24]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001582:	b480      	push	{r7}
 8001584:	b085      	sub	sp, #20
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	460b      	mov	r3, r1
 800158c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001594:	887a      	ldrh	r2, [r7, #2]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4013      	ands	r3, r2
 800159a:	041a      	lsls	r2, r3, #16
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	43d9      	mvns	r1, r3
 80015a0:	887b      	ldrh	r3, [r7, #2]
 80015a2:	400b      	ands	r3, r1
 80015a4:	431a      	orrs	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	619a      	str	r2, [r3, #24]
}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b086      	sub	sp, #24
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f003 fd9d 	bl	800510c <USB_GetMode>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	f040 80fb 	bne.w	80017d0 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f003 fd60 	bl	80050a4 <USB_ReadInterrupts>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 80f1 	beq.w	80017ce <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f003 fd57 	bl	80050a4 <USB_ReadInterrupts>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001600:	d104      	bne.n	800160c <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800160a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f003 fd47 	bl	80050a4 <USB_ReadInterrupts>
 8001616:	4603      	mov	r3, r0
 8001618:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800161c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001620:	d104      	bne.n	800162c <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800162a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f003 fd37 	bl	80050a4 <USB_ReadInterrupts>
 8001636:	4603      	mov	r3, r0
 8001638:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800163c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001640:	d104      	bne.n	800164c <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800164a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f003 fd27 	bl	80050a4 <USB_ReadInterrupts>
 8001656:	4603      	mov	r3, r0
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b02      	cmp	r3, #2
 800165e:	d103      	bne.n	8001668 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2202      	movs	r2, #2
 8001666:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f003 fd19 	bl	80050a4 <USB_ReadInterrupts>
 8001672:	4603      	mov	r3, r0
 8001674:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001678:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800167c:	d120      	bne.n	80016c0 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001686:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b00      	cmp	r3, #0
 8001696:	d113      	bne.n	80016c0 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001698:	2110      	movs	r1, #16
 800169a:	6938      	ldr	r0, [r7, #16]
 800169c:	f003 fc4a 	bl	8004f34 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80016a0:	6938      	ldr	r0, [r7, #16]
 80016a2:	f003 fc79 	bl	8004f98 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	7a5b      	ldrb	r3, [r3, #9]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d105      	bne.n	80016ba <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2101      	movs	r1, #1
 80016b4:	4618      	mov	r0, r3
 80016b6:	f003 fd37 	bl	8005128 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f006 fc18 	bl	8007ef0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f003 fced 	bl	80050a4 <USB_ReadInterrupts>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016d4:	d102      	bne.n	80016dc <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f001 fc87 	bl	8002fea <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f003 fcdf 	bl	80050a4 <USB_ReadInterrupts>
 80016e6:	4603      	mov	r3, r0
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d106      	bne.n	80016fe <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f006 fbe1 	bl	8007eb8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2208      	movs	r2, #8
 80016fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f003 fcce 	bl	80050a4 <USB_ReadInterrupts>
 8001708:	4603      	mov	r3, r0
 800170a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800170e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001712:	d139      	bne.n	8001788 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f003 fd42 	bl	80051a2 <USB_HC_ReadInterrupt>
 800171e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	e025      	b.n	8001772 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	f003 030f 	and.w	r3, r3, #15
 800172c:	68ba      	ldr	r2, [r7, #8]
 800172e:	fa22 f303 	lsr.w	r3, r2, r3
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	d018      	beq.n	800176c <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	015a      	lsls	r2, r3, #5
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	4413      	add	r3, r2
 8001742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800174c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001750:	d106      	bne.n	8001760 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	4619      	mov	r1, r3
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 f859 	bl	8001810 <HCD_HC_IN_IRQHandler>
 800175e:	e005      	b.n	800176c <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	4619      	mov	r1, r3
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 febb 	bl	80024e2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	3301      	adds	r3, #1
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	795b      	ldrb	r3, [r3, #5]
 8001776:	461a      	mov	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	4293      	cmp	r3, r2
 800177c:	d3d3      	bcc.n	8001726 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001786:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f003 fc89 	bl	80050a4 <USB_ReadInterrupts>
 8001792:	4603      	mov	r3, r0
 8001794:	f003 0310 	and.w	r3, r3, #16
 8001798:	2b10      	cmp	r3, #16
 800179a:	d101      	bne.n	80017a0 <HAL_HCD_IRQHandler+0x1ea>
 800179c:	2301      	movs	r3, #1
 800179e:	e000      	b.n	80017a2 <HAL_HCD_IRQHandler+0x1ec>
 80017a0:	2300      	movs	r3, #0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d014      	beq.n	80017d0 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	699a      	ldr	r2, [r3, #24]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 0210 	bic.w	r2, r2, #16
 80017b4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f001 fb38 	bl	8002e2c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	699a      	ldr	r2, [r3, #24]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0210 	orr.w	r2, r2, #16
 80017ca:	619a      	str	r2, [r3, #24]
 80017cc:	e000      	b.n	80017d0 <HAL_HCD_IRQHandler+0x21a>
      return;
 80017ce:	bf00      	nop
    }
  }
}
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d101      	bne.n	80017ec <HAL_HCD_Stop+0x16>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e00d      	b.n	8001808 <HAL_HCD_Stop+0x32>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f003 fe03 	bl	8005404 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	78fa      	ldrb	r2, [r7, #3]
 800182c:	4611      	mov	r1, r2
 800182e:	4618      	mov	r0, r3
 8001830:	f003 fc4b 	bl	80050ca <USB_ReadChInterrupts>
 8001834:	4603      	mov	r3, r0
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	2b04      	cmp	r3, #4
 800183c:	d11a      	bne.n	8001874 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800183e:	78fb      	ldrb	r3, [r7, #3]
 8001840:	015a      	lsls	r2, r3, #5
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4413      	add	r3, r2
 8001846:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800184a:	461a      	mov	r2, r3
 800184c:	2304      	movs	r3, #4
 800184e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001850:	78fa      	ldrb	r2, [r7, #3]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	1a9b      	subs	r3, r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	334d      	adds	r3, #77	@ 0x4d
 8001860:	2207      	movs	r2, #7
 8001862:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	78fa      	ldrb	r2, [r7, #3]
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f003 fca9 	bl	80051c4 <USB_HC_Halt>
 8001872:	e09e      	b.n	80019b2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	78fa      	ldrb	r2, [r7, #3]
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f003 fc24 	bl	80050ca <USB_ReadChInterrupts>
 8001882:	4603      	mov	r3, r0
 8001884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001888:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800188c:	d11b      	bne.n	80018c6 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800188e:	78fb      	ldrb	r3, [r7, #3]
 8001890:	015a      	lsls	r2, r3, #5
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	4413      	add	r3, r2
 8001896:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800189a:	461a      	mov	r2, r3
 800189c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80018a2:	78fa      	ldrb	r2, [r7, #3]
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	011b      	lsls	r3, r3, #4
 80018aa:	1a9b      	subs	r3, r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	440b      	add	r3, r1
 80018b0:	334d      	adds	r3, #77	@ 0x4d
 80018b2:	2208      	movs	r2, #8
 80018b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	78fa      	ldrb	r2, [r7, #3]
 80018bc:	4611      	mov	r1, r2
 80018be:	4618      	mov	r0, r3
 80018c0:	f003 fc80 	bl	80051c4 <USB_HC_Halt>
 80018c4:	e075      	b.n	80019b2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	78fa      	ldrb	r2, [r7, #3]
 80018cc:	4611      	mov	r1, r2
 80018ce:	4618      	mov	r0, r3
 80018d0:	f003 fbfb 	bl	80050ca <USB_ReadChInterrupts>
 80018d4:	4603      	mov	r3, r0
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b08      	cmp	r3, #8
 80018dc:	d11a      	bne.n	8001914 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80018de:	78fb      	ldrb	r3, [r7, #3]
 80018e0:	015a      	lsls	r2, r3, #5
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4413      	add	r3, r2
 80018e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80018ea:	461a      	mov	r2, r3
 80018ec:	2308      	movs	r3, #8
 80018ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80018f0:	78fa      	ldrb	r2, [r7, #3]
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	4613      	mov	r3, r2
 80018f6:	011b      	lsls	r3, r3, #4
 80018f8:	1a9b      	subs	r3, r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	334d      	adds	r3, #77	@ 0x4d
 8001900:	2206      	movs	r2, #6
 8001902:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	78fa      	ldrb	r2, [r7, #3]
 800190a:	4611      	mov	r1, r2
 800190c:	4618      	mov	r0, r3
 800190e:	f003 fc59 	bl	80051c4 <USB_HC_Halt>
 8001912:	e04e      	b.n	80019b2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	78fa      	ldrb	r2, [r7, #3]
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f003 fbd4 	bl	80050ca <USB_ReadChInterrupts>
 8001922:	4603      	mov	r3, r0
 8001924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001928:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800192c:	d11b      	bne.n	8001966 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800192e:	78fb      	ldrb	r3, [r7, #3]
 8001930:	015a      	lsls	r2, r3, #5
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	4413      	add	r3, r2
 8001936:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800193a:	461a      	mov	r2, r3
 800193c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001940:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001942:	78fa      	ldrb	r2, [r7, #3]
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	1a9b      	subs	r3, r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	440b      	add	r3, r1
 8001950:	334d      	adds	r3, #77	@ 0x4d
 8001952:	2209      	movs	r2, #9
 8001954:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	78fa      	ldrb	r2, [r7, #3]
 800195c:	4611      	mov	r1, r2
 800195e:	4618      	mov	r0, r3
 8001960:	f003 fc30 	bl	80051c4 <USB_HC_Halt>
 8001964:	e025      	b.n	80019b2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	78fa      	ldrb	r2, [r7, #3]
 800196c:	4611      	mov	r1, r2
 800196e:	4618      	mov	r0, r3
 8001970:	f003 fbab 	bl	80050ca <USB_ReadChInterrupts>
 8001974:	4603      	mov	r3, r0
 8001976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800197a:	2b80      	cmp	r3, #128	@ 0x80
 800197c:	d119      	bne.n	80019b2 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800197e:	78fb      	ldrb	r3, [r7, #3]
 8001980:	015a      	lsls	r2, r3, #5
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	4413      	add	r3, r2
 8001986:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800198a:	461a      	mov	r2, r3
 800198c:	2380      	movs	r3, #128	@ 0x80
 800198e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001990:	78fa      	ldrb	r2, [r7, #3]
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	1a9b      	subs	r3, r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	334d      	adds	r3, #77	@ 0x4d
 80019a0:	2207      	movs	r2, #7
 80019a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	78fa      	ldrb	r2, [r7, #3]
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f003 fc09 	bl	80051c4 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	78fa      	ldrb	r2, [r7, #3]
 80019b8:	4611      	mov	r1, r2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f003 fb85 	bl	80050ca <USB_ReadChInterrupts>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019ca:	d112      	bne.n	80019f2 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	78fa      	ldrb	r2, [r7, #3]
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f003 fbf5 	bl	80051c4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	015a      	lsls	r2, r3, #5
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	4413      	add	r3, r2
 80019e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80019e6:	461a      	mov	r2, r3
 80019e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019ec:	6093      	str	r3, [r2, #8]
 80019ee:	f000 bd75 	b.w	80024dc <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	78fa      	ldrb	r2, [r7, #3]
 80019f8:	4611      	mov	r1, r2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f003 fb65 	bl	80050ca <USB_ReadChInterrupts>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	f040 8128 	bne.w	8001c5c <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	015a      	lsls	r2, r3, #5
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4413      	add	r3, r2
 8001a14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2320      	movs	r3, #32
 8001a1c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001a1e:	78fa      	ldrb	r2, [r7, #3]
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	011b      	lsls	r3, r3, #4
 8001a26:	1a9b      	subs	r3, r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	331b      	adds	r3, #27
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d119      	bne.n	8001a68 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001a34:	78fa      	ldrb	r2, [r7, #3]
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	1a9b      	subs	r3, r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	331b      	adds	r3, #27
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	015a      	lsls	r2, r3, #5
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4413      	add	r3, r2
 8001a50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	78fa      	ldrb	r2, [r7, #3]
 8001a58:	0151      	lsls	r1, r2, #5
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	440a      	add	r2, r1
 8001a5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001a62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a66:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	799b      	ldrb	r3, [r3, #6]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d01b      	beq.n	8001aa8 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	1a9b      	subs	r3, r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	3330      	adds	r3, #48	@ 0x30
 8001a80:	6819      	ldr	r1, [r3, #0]
 8001a82:	78fb      	ldrb	r3, [r7, #3]
 8001a84:	015a      	lsls	r2, r3, #5
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	4413      	add	r3, r2
 8001a8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a94:	78fa      	ldrb	r2, [r7, #3]
 8001a96:	1ac9      	subs	r1, r1, r3
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	011b      	lsls	r3, r3, #4
 8001a9e:	1a9b      	subs	r3, r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4403      	add	r3, r0
 8001aa4:	3338      	adds	r3, #56	@ 0x38
 8001aa6:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001aa8:	78fa      	ldrb	r2, [r7, #3]
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	4613      	mov	r3, r2
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	1a9b      	subs	r3, r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	334d      	adds	r3, #77	@ 0x4d
 8001ab8:	2201      	movs	r2, #1
 8001aba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001abc:	78fa      	ldrb	r2, [r7, #3]
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	1a9b      	subs	r3, r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	3344      	adds	r3, #68	@ 0x44
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	015a      	lsls	r2, r3, #5
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001adc:	461a      	mov	r2, r3
 8001ade:	2301      	movs	r3, #1
 8001ae0:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001ae2:	78fa      	ldrb	r2, [r7, #3]
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	1a9b      	subs	r3, r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	440b      	add	r3, r1
 8001af0:	3326      	adds	r3, #38	@ 0x26
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00a      	beq.n	8001b0e <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001af8:	78fa      	ldrb	r2, [r7, #3]
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	011b      	lsls	r3, r3, #4
 8001b00:	1a9b      	subs	r3, r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	3326      	adds	r3, #38	@ 0x26
 8001b08:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d110      	bne.n	8001b30 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	78fa      	ldrb	r2, [r7, #3]
 8001b14:	4611      	mov	r1, r2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 fb54 	bl	80051c4 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001b1c:	78fb      	ldrb	r3, [r7, #3]
 8001b1e:	015a      	lsls	r2, r3, #5
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4413      	add	r3, r2
 8001b24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b28:	461a      	mov	r2, r3
 8001b2a:	2310      	movs	r3, #16
 8001b2c:	6093      	str	r3, [r2, #8]
 8001b2e:	e03d      	b.n	8001bac <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001b30:	78fa      	ldrb	r2, [r7, #3]
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	1a9b      	subs	r3, r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	3326      	adds	r3, #38	@ 0x26
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d00a      	beq.n	8001b5c <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001b46:	78fa      	ldrb	r2, [r7, #3]
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	1a9b      	subs	r3, r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	3326      	adds	r3, #38	@ 0x26
 8001b56:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d127      	bne.n	8001bac <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001b5c:	78fb      	ldrb	r3, [r7, #3]
 8001b5e:	015a      	lsls	r2, r3, #5
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	4413      	add	r3, r2
 8001b64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	78fa      	ldrb	r2, [r7, #3]
 8001b6c:	0151      	lsls	r1, r2, #5
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	440a      	add	r2, r1
 8001b72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001b76:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001b7a:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001b7c:	78fa      	ldrb	r2, [r7, #3]
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	4613      	mov	r3, r2
 8001b82:	011b      	lsls	r3, r3, #4
 8001b84:	1a9b      	subs	r3, r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	440b      	add	r3, r1
 8001b8a:	334c      	adds	r3, #76	@ 0x4c
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001b90:	78fa      	ldrb	r2, [r7, #3]
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	011b      	lsls	r3, r3, #4
 8001b98:	1a9b      	subs	r3, r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	334c      	adds	r3, #76	@ 0x4c
 8001ba0:	781a      	ldrb	r2, [r3, #0]
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f006 f9b0 	bl	8007f0c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	799b      	ldrb	r3, [r3, #6]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d13b      	bne.n	8001c2c <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001bb4:	78fa      	ldrb	r2, [r7, #3]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	3338      	adds	r3, #56	@ 0x38
 8001bc4:	6819      	ldr	r1, [r3, #0]
 8001bc6:	78fa      	ldrb	r2, [r7, #3]
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	011b      	lsls	r3, r3, #4
 8001bce:	1a9b      	subs	r3, r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4403      	add	r3, r0
 8001bd4:	3328      	adds	r3, #40	@ 0x28
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	440b      	add	r3, r1
 8001bda:	1e59      	subs	r1, r3, #1
 8001bdc:	78fa      	ldrb	r2, [r7, #3]
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	1a9b      	subs	r3, r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4403      	add	r3, r0
 8001bea:	3328      	adds	r3, #40	@ 0x28
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 8470 	beq.w	80024dc <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001bfc:	78fa      	ldrb	r2, [r7, #3]
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	1a9b      	subs	r3, r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	440b      	add	r3, r1
 8001c0a:	333c      	adds	r3, #60	@ 0x3c
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	78fa      	ldrb	r2, [r7, #3]
 8001c10:	f083 0301 	eor.w	r3, r3, #1
 8001c14:	b2d8      	uxtb	r0, r3
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	1a9b      	subs	r3, r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	333c      	adds	r3, #60	@ 0x3c
 8001c24:	4602      	mov	r2, r0
 8001c26:	701a      	strb	r2, [r3, #0]
 8001c28:	f000 bc58 	b.w	80024dc <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001c2c:	78fa      	ldrb	r2, [r7, #3]
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	011b      	lsls	r3, r3, #4
 8001c34:	1a9b      	subs	r3, r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	440b      	add	r3, r1
 8001c3a:	333c      	adds	r3, #60	@ 0x3c
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	78fa      	ldrb	r2, [r7, #3]
 8001c40:	f083 0301 	eor.w	r3, r3, #1
 8001c44:	b2d8      	uxtb	r0, r3
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	011b      	lsls	r3, r3, #4
 8001c4c:	1a9b      	subs	r3, r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	333c      	adds	r3, #60	@ 0x3c
 8001c54:	4602      	mov	r2, r0
 8001c56:	701a      	strb	r2, [r3, #0]
 8001c58:	f000 bc40 	b.w	80024dc <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	78fa      	ldrb	r2, [r7, #3]
 8001c62:	4611      	mov	r1, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f003 fa30 	bl	80050ca <USB_ReadChInterrupts>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f003 0320 	and.w	r3, r3, #32
 8001c70:	2b20      	cmp	r3, #32
 8001c72:	d131      	bne.n	8001cd8 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	015a      	lsls	r2, r3, #5
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c80:	461a      	mov	r2, r3
 8001c82:	2320      	movs	r3, #32
 8001c84:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8001c86:	78fa      	ldrb	r2, [r7, #3]
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	011b      	lsls	r3, r3, #4
 8001c8e:	1a9b      	subs	r3, r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	440b      	add	r3, r1
 8001c94:	331a      	adds	r3, #26
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	f040 841f 	bne.w	80024dc <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8001c9e:	78fa      	ldrb	r2, [r7, #3]
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	011b      	lsls	r3, r3, #4
 8001ca6:	1a9b      	subs	r3, r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	331b      	adds	r3, #27
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001cb2:	78fa      	ldrb	r2, [r7, #3]
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	1a9b      	subs	r3, r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	334d      	adds	r3, #77	@ 0x4d
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	78fa      	ldrb	r2, [r7, #3]
 8001ccc:	4611      	mov	r1, r2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f003 fa78 	bl	80051c4 <USB_HC_Halt>
 8001cd4:	f000 bc02 	b.w	80024dc <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	78fa      	ldrb	r2, [r7, #3]
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f003 f9f2 	bl	80050ca <USB_ReadChInterrupts>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	f040 8305 	bne.w	80022fc <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	015a      	lsls	r2, r3, #5
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001cfe:	461a      	mov	r2, r3
 8001d00:	2302      	movs	r3, #2
 8001d02:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001d04:	78fa      	ldrb	r2, [r7, #3]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	1a9b      	subs	r3, r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	334d      	adds	r3, #77	@ 0x4d
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d114      	bne.n	8001d44 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001d1a:	78fa      	ldrb	r2, [r7, #3]
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	011b      	lsls	r3, r3, #4
 8001d22:	1a9b      	subs	r3, r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	440b      	add	r3, r1
 8001d28:	334d      	adds	r3, #77	@ 0x4d
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001d2e:	78fa      	ldrb	r2, [r7, #3]
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	1a9b      	subs	r3, r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	334c      	adds	r3, #76	@ 0x4c
 8001d3e:	2201      	movs	r2, #1
 8001d40:	701a      	strb	r2, [r3, #0]
 8001d42:	e2cc      	b.n	80022de <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001d44:	78fa      	ldrb	r2, [r7, #3]
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	1a9b      	subs	r3, r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	334d      	adds	r3, #77	@ 0x4d
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d114      	bne.n	8001d84 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001d5a:	78fa      	ldrb	r2, [r7, #3]
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	1a9b      	subs	r3, r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	440b      	add	r3, r1
 8001d68:	334d      	adds	r3, #77	@ 0x4d
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8001d6e:	78fa      	ldrb	r2, [r7, #3]
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	4613      	mov	r3, r2
 8001d74:	011b      	lsls	r3, r3, #4
 8001d76:	1a9b      	subs	r3, r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	334c      	adds	r3, #76	@ 0x4c
 8001d7e:	2205      	movs	r2, #5
 8001d80:	701a      	strb	r2, [r3, #0]
 8001d82:	e2ac      	b.n	80022de <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001d84:	78fa      	ldrb	r2, [r7, #3]
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	011b      	lsls	r3, r3, #4
 8001d8c:	1a9b      	subs	r3, r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	334d      	adds	r3, #77	@ 0x4d
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b07      	cmp	r3, #7
 8001d98:	d00b      	beq.n	8001db2 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001d9a:	78fa      	ldrb	r2, [r7, #3]
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	011b      	lsls	r3, r3, #4
 8001da2:	1a9b      	subs	r3, r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	334d      	adds	r3, #77	@ 0x4d
 8001daa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001dac:	2b09      	cmp	r3, #9
 8001dae:	f040 80a6 	bne.w	8001efe <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001db2:	78fa      	ldrb	r2, [r7, #3]
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	011b      	lsls	r3, r3, #4
 8001dba:	1a9b      	subs	r3, r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	334d      	adds	r3, #77	@ 0x4d
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001dc6:	78fa      	ldrb	r2, [r7, #3]
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	1a9b      	subs	r3, r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	3344      	adds	r3, #68	@ 0x44
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	1c59      	adds	r1, r3, #1
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4403      	add	r3, r0
 8001de6:	3344      	adds	r3, #68	@ 0x44
 8001de8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001dea:	78fa      	ldrb	r2, [r7, #3]
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	1a9b      	subs	r3, r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	440b      	add	r3, r1
 8001df8:	3344      	adds	r3, #68	@ 0x44
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d943      	bls.n	8001e88 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001e00:	78fa      	ldrb	r2, [r7, #3]
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	1a9b      	subs	r3, r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	3344      	adds	r3, #68	@ 0x44
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8001e14:	78fa      	ldrb	r2, [r7, #3]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	1a9b      	subs	r3, r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	331a      	adds	r3, #26
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d123      	bne.n	8001e72 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8001e2a:	78fa      	ldrb	r2, [r7, #3]
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	011b      	lsls	r3, r3, #4
 8001e32:	1a9b      	subs	r3, r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	440b      	add	r3, r1
 8001e38:	331b      	adds	r3, #27
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8001e3e:	78fa      	ldrb	r2, [r7, #3]
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	1a9b      	subs	r3, r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	440b      	add	r3, r1
 8001e4c:	331c      	adds	r3, #28
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	015a      	lsls	r2, r3, #5
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	78fa      	ldrb	r2, [r7, #3]
 8001e62:	0151      	lsls	r1, r2, #5
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	440a      	add	r2, r1
 8001e68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001e6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e70:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001e72:	78fa      	ldrb	r2, [r7, #3]
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	1a9b      	subs	r3, r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	334c      	adds	r3, #76	@ 0x4c
 8001e82:	2204      	movs	r2, #4
 8001e84:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001e86:	e229      	b.n	80022dc <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001e88:	78fa      	ldrb	r2, [r7, #3]
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	011b      	lsls	r3, r3, #4
 8001e90:	1a9b      	subs	r3, r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	334c      	adds	r3, #76	@ 0x4c
 8001e98:	2202      	movs	r2, #2
 8001e9a:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001e9c:	78fa      	ldrb	r2, [r7, #3]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	011b      	lsls	r3, r3, #4
 8001ea4:	1a9b      	subs	r3, r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	3326      	adds	r3, #38	@ 0x26
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00b      	beq.n	8001eca <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001eb2:	78fa      	ldrb	r2, [r7, #3]
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	011b      	lsls	r3, r3, #4
 8001eba:	1a9b      	subs	r3, r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	3326      	adds	r3, #38	@ 0x26
 8001ec2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	f040 8209 	bne.w	80022dc <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001eca:	78fb      	ldrb	r3, [r7, #3]
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001ee0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001ee8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	015a      	lsls	r2, r3, #5
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001efc:	e1ee      	b.n	80022dc <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8001efe:	78fa      	ldrb	r2, [r7, #3]
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	1a9b      	subs	r3, r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	334d      	adds	r3, #77	@ 0x4d
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b05      	cmp	r3, #5
 8001f12:	f040 80c8 	bne.w	80020a6 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001f16:	78fa      	ldrb	r2, [r7, #3]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	1a9b      	subs	r3, r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	334d      	adds	r3, #77	@ 0x4d
 8001f26:	2202      	movs	r2, #2
 8001f28:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001f2a:	78fa      	ldrb	r2, [r7, #3]
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	1a9b      	subs	r3, r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	440b      	add	r3, r1
 8001f38:	331b      	adds	r3, #27
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	f040 81ce 	bne.w	80022de <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001f42:	78fa      	ldrb	r2, [r7, #3]
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	1a9b      	subs	r3, r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	440b      	add	r3, r1
 8001f50:	3326      	adds	r3, #38	@ 0x26
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d16b      	bne.n	8002030 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8001f58:	78fa      	ldrb	r2, [r7, #3]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	1a9b      	subs	r3, r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	3348      	adds	r3, #72	@ 0x48
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	1c59      	adds	r1, r3, #1
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	011b      	lsls	r3, r3, #4
 8001f72:	1a9b      	subs	r3, r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4403      	add	r3, r0
 8001f78:	3348      	adds	r3, #72	@ 0x48
 8001f7a:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8001f7c:	78fa      	ldrb	r2, [r7, #3]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	011b      	lsls	r3, r3, #4
 8001f84:	1a9b      	subs	r3, r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	3348      	adds	r3, #72	@ 0x48
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d943      	bls.n	800201a <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8001f92:	78fa      	ldrb	r2, [r7, #3]
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	1a9b      	subs	r3, r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	3348      	adds	r3, #72	@ 0x48
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8001fa6:	78fa      	ldrb	r2, [r7, #3]
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	1a9b      	subs	r3, r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	331b      	adds	r3, #27
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8001fba:	78fa      	ldrb	r2, [r7, #3]
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	011b      	lsls	r3, r3, #4
 8001fc2:	1a9b      	subs	r3, r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	3344      	adds	r3, #68	@ 0x44
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d809      	bhi.n	8001fe4 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8001fd0:	78fa      	ldrb	r2, [r7, #3]
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	011b      	lsls	r3, r3, #4
 8001fd8:	1a9b      	subs	r3, r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	331c      	adds	r3, #28
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	78fa      	ldrb	r2, [r7, #3]
 8001ff4:	0151      	lsls	r1, r2, #5
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	440a      	add	r2, r1
 8001ffa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002002:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002004:	78fa      	ldrb	r2, [r7, #3]
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	011b      	lsls	r3, r3, #4
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	334c      	adds	r3, #76	@ 0x4c
 8002014:	2204      	movs	r2, #4
 8002016:	701a      	strb	r2, [r3, #0]
 8002018:	e014      	b.n	8002044 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800201a:	78fa      	ldrb	r2, [r7, #3]
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	1a9b      	subs	r3, r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	334c      	adds	r3, #76	@ 0x4c
 800202a:	2202      	movs	r2, #2
 800202c:	701a      	strb	r2, [r3, #0]
 800202e:	e009      	b.n	8002044 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002030:	78fa      	ldrb	r2, [r7, #3]
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	1a9b      	subs	r3, r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	334c      	adds	r3, #76	@ 0x4c
 8002040:	2202      	movs	r2, #2
 8002042:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002044:	78fa      	ldrb	r2, [r7, #3]
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	1a9b      	subs	r3, r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	3326      	adds	r3, #38	@ 0x26
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00b      	beq.n	8002072 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800205a:	78fa      	ldrb	r2, [r7, #3]
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	3326      	adds	r3, #38	@ 0x26
 800206a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800206c:	2b02      	cmp	r3, #2
 800206e:	f040 8136 	bne.w	80022de <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	015a      	lsls	r2, r3, #5
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4413      	add	r3, r2
 800207a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002088:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002090:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	015a      	lsls	r2, r3, #5
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4413      	add	r3, r2
 800209a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800209e:	461a      	mov	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	e11b      	b.n	80022de <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80020a6:	78fa      	ldrb	r2, [r7, #3]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	334d      	adds	r3, #77	@ 0x4d
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	f040 8081 	bne.w	80021c0 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80020be:	78fa      	ldrb	r2, [r7, #3]
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	1a9b      	subs	r3, r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	440b      	add	r3, r1
 80020cc:	334d      	adds	r3, #77	@ 0x4d
 80020ce:	2202      	movs	r2, #2
 80020d0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80020d2:	78fa      	ldrb	r2, [r7, #3]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	331b      	adds	r3, #27
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	f040 80fa 	bne.w	80022de <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80020ea:	78fa      	ldrb	r2, [r7, #3]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	1a9b      	subs	r3, r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	334c      	adds	r3, #76	@ 0x4c
 80020fa:	2202      	movs	r2, #2
 80020fc:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4413      	add	r3, r2
 8002106:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	78fa      	ldrb	r2, [r7, #3]
 800210e:	0151      	lsls	r1, r2, #5
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	440a      	add	r2, r1
 8002114:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800211c:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800211e:	78fb      	ldrb	r3, [r7, #3]
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4413      	add	r3, r2
 8002126:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	78fa      	ldrb	r2, [r7, #3]
 800212e:	0151      	lsls	r1, r2, #5
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	440a      	add	r2, r1
 8002134:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002138:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800213c:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	78fa      	ldrb	r2, [r7, #3]
 800214e:	0151      	lsls	r1, r2, #5
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	440a      	add	r2, r1
 8002154:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002158:	f023 0320 	bic.w	r3, r3, #32
 800215c:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800215e:	78fa      	ldrb	r2, [r7, #3]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	3326      	adds	r3, #38	@ 0x26
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00b      	beq.n	800218c <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002174:	78fa      	ldrb	r2, [r7, #3]
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	1a9b      	subs	r3, r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	3326      	adds	r3, #38	@ 0x26
 8002184:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002186:	2b02      	cmp	r3, #2
 8002188:	f040 80a9 	bne.w	80022de <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	015a      	lsls	r2, r3, #5
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4413      	add	r3, r2
 8002194:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80021a2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80021aa:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	015a      	lsls	r2, r3, #5
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4413      	add	r3, r2
 80021b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021b8:	461a      	mov	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	e08e      	b.n	80022de <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80021c0:	78fa      	ldrb	r2, [r7, #3]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	334d      	adds	r3, #77	@ 0x4d
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d143      	bne.n	800225e <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80021d6:	78fa      	ldrb	r2, [r7, #3]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	011b      	lsls	r3, r3, #4
 80021de:	1a9b      	subs	r3, r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	334d      	adds	r3, #77	@ 0x4d
 80021e6:	2202      	movs	r2, #2
 80021e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80021ea:	78fa      	ldrb	r2, [r7, #3]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	1a9b      	subs	r3, r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	334c      	adds	r3, #76	@ 0x4c
 80021fa:	2202      	movs	r2, #2
 80021fc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80021fe:	78fa      	ldrb	r2, [r7, #3]
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	1a9b      	subs	r3, r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	3326      	adds	r3, #38	@ 0x26
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002214:	78fa      	ldrb	r2, [r7, #3]
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	1a9b      	subs	r3, r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	3326      	adds	r3, #38	@ 0x26
 8002224:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002226:	2b02      	cmp	r3, #2
 8002228:	d159      	bne.n	80022de <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800222a:	78fb      	ldrb	r3, [r7, #3]
 800222c:	015a      	lsls	r2, r3, #5
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4413      	add	r3, r2
 8002232:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002240:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002248:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800224a:	78fb      	ldrb	r3, [r7, #3]
 800224c:	015a      	lsls	r2, r3, #5
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4413      	add	r3, r2
 8002252:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002256:	461a      	mov	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6013      	str	r3, [r2, #0]
 800225c:	e03f      	b.n	80022de <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800225e:	78fa      	ldrb	r2, [r7, #3]
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	011b      	lsls	r3, r3, #4
 8002266:	1a9b      	subs	r3, r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	334d      	adds	r3, #77	@ 0x4d
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b08      	cmp	r3, #8
 8002272:	d126      	bne.n	80022c2 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002274:	78fa      	ldrb	r2, [r7, #3]
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	011b      	lsls	r3, r3, #4
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	334d      	adds	r3, #77	@ 0x4d
 8002284:	2202      	movs	r2, #2
 8002286:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002288:	78fa      	ldrb	r2, [r7, #3]
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	1a9b      	subs	r3, r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	3344      	adds	r3, #68	@ 0x44
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	1c59      	adds	r1, r3, #1
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	1a9b      	subs	r3, r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4403      	add	r3, r0
 80022a8:	3344      	adds	r3, #68	@ 0x44
 80022aa:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80022ac:	78fa      	ldrb	r2, [r7, #3]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	1a9b      	subs	r3, r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	334c      	adds	r3, #76	@ 0x4c
 80022bc:	2204      	movs	r2, #4
 80022be:	701a      	strb	r2, [r3, #0]
 80022c0:	e00d      	b.n	80022de <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80022c2:	78fa      	ldrb	r2, [r7, #3]
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	1a9b      	subs	r3, r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	440b      	add	r3, r1
 80022d0:	334d      	adds	r3, #77	@ 0x4d
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	f000 8100 	beq.w	80024da <HCD_HC_IN_IRQHandler+0xcca>
 80022da:	e000      	b.n	80022de <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80022dc:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80022de:	78fa      	ldrb	r2, [r7, #3]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	1a9b      	subs	r3, r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	334c      	adds	r3, #76	@ 0x4c
 80022ee:	781a      	ldrb	r2, [r3, #0]
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	4619      	mov	r1, r3
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f005 fe09 	bl	8007f0c <HAL_HCD_HC_NotifyURBChange_Callback>
 80022fa:	e0ef      	b.n	80024dc <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	78fa      	ldrb	r2, [r7, #3]
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f002 fee0 	bl	80050ca <USB_ReadChInterrupts>
 800230a:	4603      	mov	r3, r0
 800230c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002310:	2b40      	cmp	r3, #64	@ 0x40
 8002312:	d12f      	bne.n	8002374 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002314:	78fb      	ldrb	r3, [r7, #3]
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4413      	add	r3, r2
 800231c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002320:	461a      	mov	r2, r3
 8002322:	2340      	movs	r3, #64	@ 0x40
 8002324:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002326:	78fa      	ldrb	r2, [r7, #3]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	1a9b      	subs	r3, r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	334d      	adds	r3, #77	@ 0x4d
 8002336:	2205      	movs	r2, #5
 8002338:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800233a:	78fa      	ldrb	r2, [r7, #3]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	1a9b      	subs	r3, r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	331a      	adds	r3, #26
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d109      	bne.n	8002364 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	1a9b      	subs	r3, r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	3344      	adds	r3, #68	@ 0x44
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	4611      	mov	r1, r2
 800236c:	4618      	mov	r0, r3
 800236e:	f002 ff29 	bl	80051c4 <USB_HC_Halt>
 8002372:	e0b3      	b.n	80024dc <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f002 fea4 	bl	80050ca <USB_ReadChInterrupts>
 8002382:	4603      	mov	r3, r0
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	2b10      	cmp	r3, #16
 800238a:	f040 80a7 	bne.w	80024dc <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800238e:	78fa      	ldrb	r2, [r7, #3]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	1a9b      	subs	r3, r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	3326      	adds	r3, #38	@ 0x26
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d11b      	bne.n	80023dc <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80023a4:	78fa      	ldrb	r2, [r7, #3]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	011b      	lsls	r3, r3, #4
 80023ac:	1a9b      	subs	r3, r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	3344      	adds	r3, #68	@ 0x44
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80023b8:	78fa      	ldrb	r2, [r7, #3]
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	1a9b      	subs	r3, r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	334d      	adds	r3, #77	@ 0x4d
 80023c8:	2204      	movs	r2, #4
 80023ca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	78fa      	ldrb	r2, [r7, #3]
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f002 fef5 	bl	80051c4 <USB_HC_Halt>
 80023da:	e03f      	b.n	800245c <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	3326      	adds	r3, #38	@ 0x26
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00a      	beq.n	8002408 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80023f2:	78fa      	ldrb	r2, [r7, #3]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	1a9b      	subs	r3, r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	3326      	adds	r3, #38	@ 0x26
 8002402:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002404:	2b02      	cmp	r3, #2
 8002406:	d129      	bne.n	800245c <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002408:	78fa      	ldrb	r2, [r7, #3]
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	1a9b      	subs	r3, r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	3344      	adds	r3, #68	@ 0x44
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	799b      	ldrb	r3, [r3, #6]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00a      	beq.n	800243a <HCD_HC_IN_IRQHandler+0xc2a>
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	331b      	adds	r3, #27
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d110      	bne.n	800245c <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800243a:	78fa      	ldrb	r2, [r7, #3]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	334d      	adds	r3, #77	@ 0x4d
 800244a:	2204      	movs	r2, #4
 800244c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	78fa      	ldrb	r2, [r7, #3]
 8002454:	4611      	mov	r1, r2
 8002456:	4618      	mov	r0, r3
 8002458:	f002 feb4 	bl	80051c4 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	331b      	adds	r3, #27
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d129      	bne.n	80024c6 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002472:	78fa      	ldrb	r2, [r7, #3]
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	4613      	mov	r3, r2
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	1a9b      	subs	r3, r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	440b      	add	r3, r1
 8002480:	331b      	adds	r3, #27
 8002482:	2200      	movs	r2, #0
 8002484:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	015a      	lsls	r2, r3, #5
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4413      	add	r3, r2
 800248e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	0151      	lsls	r1, r2, #5
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	440a      	add	r2, r1
 800249c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024a4:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80024a6:	78fb      	ldrb	r3, [r7, #3]
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	78fa      	ldrb	r2, [r7, #3]
 80024b6:	0151      	lsls	r1, r2, #5
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	440a      	add	r2, r1
 80024bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024c0:	f043 0320 	orr.w	r3, r3, #32
 80024c4:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80024c6:	78fb      	ldrb	r3, [r7, #3]
 80024c8:	015a      	lsls	r2, r3, #5
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024d2:	461a      	mov	r2, r3
 80024d4:	2310      	movs	r3, #16
 80024d6:	6093      	str	r3, [r2, #8]
 80024d8:	e000      	b.n	80024dc <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80024da:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	460b      	mov	r3, r1
 80024ec:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	78fa      	ldrb	r2, [r7, #3]
 80024fe:	4611      	mov	r1, r2
 8002500:	4618      	mov	r0, r3
 8002502:	f002 fde2 	bl	80050ca <USB_ReadChInterrupts>
 8002506:	4603      	mov	r3, r0
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b04      	cmp	r3, #4
 800250e:	d11b      	bne.n	8002548 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4413      	add	r3, r2
 8002518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800251c:	461a      	mov	r2, r3
 800251e:	2304      	movs	r3, #4
 8002520:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002522:	78fa      	ldrb	r2, [r7, #3]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	011b      	lsls	r3, r3, #4
 800252a:	1a9b      	subs	r3, r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	440b      	add	r3, r1
 8002530:	334d      	adds	r3, #77	@ 0x4d
 8002532:	2207      	movs	r2, #7
 8002534:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	78fa      	ldrb	r2, [r7, #3]
 800253c:	4611      	mov	r1, r2
 800253e:	4618      	mov	r0, r3
 8002540:	f002 fe40 	bl	80051c4 <USB_HC_Halt>
 8002544:	f000 bc6f 	b.w	8002e26 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	78fa      	ldrb	r2, [r7, #3]
 800254e:	4611      	mov	r1, r2
 8002550:	4618      	mov	r0, r3
 8002552:	f002 fdba 	bl	80050ca <USB_ReadChInterrupts>
 8002556:	4603      	mov	r3, r0
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	2b20      	cmp	r3, #32
 800255e:	f040 8082 	bne.w	8002666 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002562:	78fb      	ldrb	r3, [r7, #3]
 8002564:	015a      	lsls	r2, r3, #5
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4413      	add	r3, r2
 800256a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800256e:	461a      	mov	r2, r3
 8002570:	2320      	movs	r3, #32
 8002572:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002574:	78fa      	ldrb	r2, [r7, #3]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	3319      	adds	r3, #25
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d124      	bne.n	80025d4 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800258a:	78fa      	ldrb	r2, [r7, #3]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	1a9b      	subs	r3, r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	3319      	adds	r3, #25
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800259e:	78fa      	ldrb	r2, [r7, #3]
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	1a9b      	subs	r3, r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	334c      	adds	r3, #76	@ 0x4c
 80025ae:	2202      	movs	r2, #2
 80025b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80025b2:	78fa      	ldrb	r2, [r7, #3]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	334d      	adds	r3, #77	@ 0x4d
 80025c2:	2203      	movs	r2, #3
 80025c4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	4611      	mov	r1, r2
 80025ce:	4618      	mov	r0, r3
 80025d0:	f002 fdf8 	bl	80051c4 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80025d4:	78fa      	ldrb	r2, [r7, #3]
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	1a9b      	subs	r3, r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	331a      	adds	r3, #26
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	f040 841d 	bne.w	8002e26 <HCD_HC_OUT_IRQHandler+0x944>
 80025ec:	78fa      	ldrb	r2, [r7, #3]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	331b      	adds	r3, #27
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f040 8411 	bne.w	8002e26 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002604:	78fa      	ldrb	r2, [r7, #3]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	1a9b      	subs	r3, r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	3326      	adds	r3, #38	@ 0x26
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d009      	beq.n	800262e <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800261a:	78fa      	ldrb	r2, [r7, #3]
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	440b      	add	r3, r1
 8002628:	331b      	adds	r3, #27
 800262a:	2201      	movs	r2, #1
 800262c:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800262e:	78fa      	ldrb	r2, [r7, #3]
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	1a9b      	subs	r3, r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	334d      	adds	r3, #77	@ 0x4d
 800263e:	2203      	movs	r2, #3
 8002640:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	78fa      	ldrb	r2, [r7, #3]
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f002 fdba 	bl	80051c4 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002650:	78fa      	ldrb	r2, [r7, #3]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	3344      	adds	r3, #68	@ 0x44
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	e3df      	b.n	8002e26 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	78fa      	ldrb	r2, [r7, #3]
 800266c:	4611      	mov	r1, r2
 800266e:	4618      	mov	r0, r3
 8002670:	f002 fd2b 	bl	80050ca <USB_ReadChInterrupts>
 8002674:	4603      	mov	r3, r0
 8002676:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800267a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800267e:	d111      	bne.n	80026a4 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	4413      	add	r3, r2
 8002688:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800268c:	461a      	mov	r2, r3
 800268e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002692:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	78fa      	ldrb	r2, [r7, #3]
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f002 fd91 	bl	80051c4 <USB_HC_Halt>
 80026a2:	e3c0      	b.n	8002e26 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	78fa      	ldrb	r2, [r7, #3]
 80026aa:	4611      	mov	r1, r2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f002 fd0c 	bl	80050ca <USB_ReadChInterrupts>
 80026b2:	4603      	mov	r3, r0
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d168      	bne.n	800278e <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80026bc:	78fa      	ldrb	r2, [r7, #3]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	1a9b      	subs	r3, r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	3344      	adds	r3, #68	@ 0x44
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	78fa      	ldrb	r2, [r7, #3]
 80026d6:	4611      	mov	r1, r2
 80026d8:	4618      	mov	r0, r3
 80026da:	f002 fcf6 	bl	80050ca <USB_ReadChInterrupts>
 80026de:	4603      	mov	r3, r0
 80026e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e4:	2b40      	cmp	r3, #64	@ 0x40
 80026e6:	d112      	bne.n	800270e <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80026e8:	78fa      	ldrb	r2, [r7, #3]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	1a9b      	subs	r3, r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	3319      	adds	r3, #25
 80026f8:	2201      	movs	r2, #1
 80026fa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4413      	add	r3, r2
 8002704:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002708:	461a      	mov	r2, r3
 800270a:	2340      	movs	r3, #64	@ 0x40
 800270c:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800270e:	78fa      	ldrb	r2, [r7, #3]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	1a9b      	subs	r3, r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	331b      	adds	r3, #27
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d019      	beq.n	8002758 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002724:	78fa      	ldrb	r2, [r7, #3]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	1a9b      	subs	r3, r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	331b      	adds	r3, #27
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4413      	add	r3, r2
 8002740:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	78fa      	ldrb	r2, [r7, #3]
 8002748:	0151      	lsls	r1, r2, #5
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	440a      	add	r2, r1
 800274e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002752:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002756:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4413      	add	r3, r2
 8002760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002764:	461a      	mov	r2, r3
 8002766:	2301      	movs	r3, #1
 8002768:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800276a:	78fa      	ldrb	r2, [r7, #3]
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	1a9b      	subs	r3, r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	334d      	adds	r3, #77	@ 0x4d
 800277a:	2201      	movs	r2, #1
 800277c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	78fa      	ldrb	r2, [r7, #3]
 8002784:	4611      	mov	r1, r2
 8002786:	4618      	mov	r0, r3
 8002788:	f002 fd1c 	bl	80051c4 <USB_HC_Halt>
 800278c:	e34b      	b.n	8002e26 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	78fa      	ldrb	r2, [r7, #3]
 8002794:	4611      	mov	r1, r2
 8002796:	4618      	mov	r0, r3
 8002798:	f002 fc97 	bl	80050ca <USB_ReadChInterrupts>
 800279c:	4603      	mov	r3, r0
 800279e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a2:	2b40      	cmp	r3, #64	@ 0x40
 80027a4:	d139      	bne.n	800281a <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80027a6:	78fa      	ldrb	r2, [r7, #3]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	1a9b      	subs	r3, r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	334d      	adds	r3, #77	@ 0x4d
 80027b6:	2205      	movs	r2, #5
 80027b8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80027ba:	78fa      	ldrb	r2, [r7, #3]
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	1a9b      	subs	r3, r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	440b      	add	r3, r1
 80027c8:	331a      	adds	r3, #26
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d109      	bne.n	80027e4 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80027d0:	78fa      	ldrb	r2, [r7, #3]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	3319      	adds	r3, #25
 80027e0:	2201      	movs	r2, #1
 80027e2:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80027e4:	78fa      	ldrb	r2, [r7, #3]
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	1a9b      	subs	r3, r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	3344      	adds	r3, #68	@ 0x44
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	4611      	mov	r1, r2
 8002800:	4618      	mov	r0, r3
 8002802:	f002 fcdf 	bl	80051c4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4413      	add	r3, r2
 800280e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002812:	461a      	mov	r2, r3
 8002814:	2340      	movs	r3, #64	@ 0x40
 8002816:	6093      	str	r3, [r2, #8]
 8002818:	e305      	b.n	8002e26 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	78fa      	ldrb	r2, [r7, #3]
 8002820:	4611      	mov	r1, r2
 8002822:	4618      	mov	r0, r3
 8002824:	f002 fc51 	bl	80050ca <USB_ReadChInterrupts>
 8002828:	4603      	mov	r3, r0
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b08      	cmp	r3, #8
 8002830:	d11a      	bne.n	8002868 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002832:	78fb      	ldrb	r3, [r7, #3]
 8002834:	015a      	lsls	r2, r3, #5
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4413      	add	r3, r2
 800283a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800283e:	461a      	mov	r2, r3
 8002840:	2308      	movs	r3, #8
 8002842:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002844:	78fa      	ldrb	r2, [r7, #3]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	334d      	adds	r3, #77	@ 0x4d
 8002854:	2206      	movs	r2, #6
 8002856:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	78fa      	ldrb	r2, [r7, #3]
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f002 fcaf 	bl	80051c4 <USB_HC_Halt>
 8002866:	e2de      	b.n	8002e26 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	78fa      	ldrb	r2, [r7, #3]
 800286e:	4611      	mov	r1, r2
 8002870:	4618      	mov	r0, r3
 8002872:	f002 fc2a 	bl	80050ca <USB_ReadChInterrupts>
 8002876:	4603      	mov	r3, r0
 8002878:	f003 0310 	and.w	r3, r3, #16
 800287c:	2b10      	cmp	r3, #16
 800287e:	d144      	bne.n	800290a <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002880:	78fa      	ldrb	r2, [r7, #3]
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	1a9b      	subs	r3, r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	3344      	adds	r3, #68	@ 0x44
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002894:	78fa      	ldrb	r2, [r7, #3]
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	1a9b      	subs	r3, r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	334d      	adds	r3, #77	@ 0x4d
 80028a4:	2204      	movs	r2, #4
 80028a6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80028a8:	78fa      	ldrb	r2, [r7, #3]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	3319      	adds	r3, #25
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d114      	bne.n	80028e8 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80028be:	78fa      	ldrb	r2, [r7, #3]
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	1a9b      	subs	r3, r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	440b      	add	r3, r1
 80028cc:	3318      	adds	r3, #24
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d109      	bne.n	80028e8 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80028d4:	78fa      	ldrb	r2, [r7, #3]
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	3319      	adds	r3, #25
 80028e4:	2201      	movs	r2, #1
 80028e6:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	78fa      	ldrb	r2, [r7, #3]
 80028ee:	4611      	mov	r1, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f002 fc67 	bl	80051c4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80028f6:	78fb      	ldrb	r3, [r7, #3]
 80028f8:	015a      	lsls	r2, r3, #5
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002902:	461a      	mov	r2, r3
 8002904:	2310      	movs	r3, #16
 8002906:	6093      	str	r3, [r2, #8]
 8002908:	e28d      	b.n	8002e26 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	78fa      	ldrb	r2, [r7, #3]
 8002910:	4611      	mov	r1, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f002 fbd9 	bl	80050ca <USB_ReadChInterrupts>
 8002918:	4603      	mov	r3, r0
 800291a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800291e:	2b80      	cmp	r3, #128	@ 0x80
 8002920:	d169      	bne.n	80029f6 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	799b      	ldrb	r3, [r3, #6]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d111      	bne.n	800294e <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800292a:	78fa      	ldrb	r2, [r7, #3]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	1a9b      	subs	r3, r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	334d      	adds	r3, #77	@ 0x4d
 800293a:	2207      	movs	r2, #7
 800293c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	78fa      	ldrb	r2, [r7, #3]
 8002944:	4611      	mov	r1, r2
 8002946:	4618      	mov	r0, r3
 8002948:	f002 fc3c 	bl	80051c4 <USB_HC_Halt>
 800294c:	e049      	b.n	80029e2 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800294e:	78fa      	ldrb	r2, [r7, #3]
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	1a9b      	subs	r3, r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	440b      	add	r3, r1
 800295c:	3344      	adds	r3, #68	@ 0x44
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	1c59      	adds	r1, r3, #1
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4403      	add	r3, r0
 800296e:	3344      	adds	r3, #68	@ 0x44
 8002970:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002972:	78fa      	ldrb	r2, [r7, #3]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	3344      	adds	r3, #68	@ 0x44
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b02      	cmp	r3, #2
 8002986:	d922      	bls.n	80029ce <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002988:	78fa      	ldrb	r2, [r7, #3]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	1a9b      	subs	r3, r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	3344      	adds	r3, #68	@ 0x44
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800299c:	78fa      	ldrb	r2, [r7, #3]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	334c      	adds	r3, #76	@ 0x4c
 80029ac:	2204      	movs	r2, #4
 80029ae:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80029b0:	78fa      	ldrb	r2, [r7, #3]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	334c      	adds	r3, #76	@ 0x4c
 80029c0:	781a      	ldrb	r2, [r3, #0]
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	4619      	mov	r1, r3
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f005 faa0 	bl	8007f0c <HAL_HCD_HC_NotifyURBChange_Callback>
 80029cc:	e009      	b.n	80029e2 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029ce:	78fa      	ldrb	r2, [r7, #3]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	1a9b      	subs	r3, r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	334c      	adds	r3, #76	@ 0x4c
 80029de:	2202      	movs	r2, #2
 80029e0:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029ee:	461a      	mov	r2, r3
 80029f0:	2380      	movs	r3, #128	@ 0x80
 80029f2:	6093      	str	r3, [r2, #8]
 80029f4:	e217      	b.n	8002e26 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	78fa      	ldrb	r2, [r7, #3]
 80029fc:	4611      	mov	r1, r2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f002 fb63 	bl	80050ca <USB_ReadChInterrupts>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a0e:	d11b      	bne.n	8002a48 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002a10:	78fa      	ldrb	r2, [r7, #3]
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	1a9b      	subs	r3, r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	334d      	adds	r3, #77	@ 0x4d
 8002a20:	2209      	movs	r2, #9
 8002a22:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f002 fbc9 	bl	80051c4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002a32:	78fb      	ldrb	r3, [r7, #3]
 8002a34:	015a      	lsls	r2, r3, #5
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4413      	add	r3, r2
 8002a3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a44:	6093      	str	r3, [r2, #8]
 8002a46:	e1ee      	b.n	8002e26 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	78fa      	ldrb	r2, [r7, #3]
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f002 fb3a 	bl	80050ca <USB_ReadChInterrupts>
 8002a56:	4603      	mov	r3, r0
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	f040 81df 	bne.w	8002e20 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002a62:	78fb      	ldrb	r3, [r7, #3]
 8002a64:	015a      	lsls	r2, r3, #5
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4413      	add	r3, r2
 8002a6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a6e:	461a      	mov	r2, r3
 8002a70:	2302      	movs	r3, #2
 8002a72:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002a74:	78fa      	ldrb	r2, [r7, #3]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	334d      	adds	r3, #77	@ 0x4d
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	f040 8093 	bne.w	8002bb2 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a8c:	78fa      	ldrb	r2, [r7, #3]
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	1a9b      	subs	r3, r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	334d      	adds	r3, #77	@ 0x4d
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002aa0:	78fa      	ldrb	r2, [r7, #3]
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	334c      	adds	r3, #76	@ 0x4c
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002ab4:	78fa      	ldrb	r2, [r7, #3]
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	1a9b      	subs	r3, r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	3326      	adds	r3, #38	@ 0x26
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d00b      	beq.n	8002ae2 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002aca:	78fa      	ldrb	r2, [r7, #3]
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	1a9b      	subs	r3, r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	3326      	adds	r3, #38	@ 0x26
 8002ada:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	f040 8190 	bne.w	8002e02 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	799b      	ldrb	r3, [r3, #6]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d115      	bne.n	8002b16 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002aea:	78fa      	ldrb	r2, [r7, #3]
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	1a9b      	subs	r3, r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	440b      	add	r3, r1
 8002af8:	333d      	adds	r3, #61	@ 0x3d
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	78fa      	ldrb	r2, [r7, #3]
 8002afe:	f083 0301 	eor.w	r3, r3, #1
 8002b02:	b2d8      	uxtb	r0, r3
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	1a9b      	subs	r3, r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	333d      	adds	r3, #61	@ 0x3d
 8002b12:	4602      	mov	r2, r0
 8002b14:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	799b      	ldrb	r3, [r3, #6]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	f040 8171 	bne.w	8002e02 <HCD_HC_OUT_IRQHandler+0x920>
 8002b20:	78fa      	ldrb	r2, [r7, #3]
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	1a9b      	subs	r3, r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	3334      	adds	r3, #52	@ 0x34
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 8165 	beq.w	8002e02 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002b38:	78fa      	ldrb	r2, [r7, #3]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	3334      	adds	r3, #52	@ 0x34
 8002b48:	6819      	ldr	r1, [r3, #0]
 8002b4a:	78fa      	ldrb	r2, [r7, #3]
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	1a9b      	subs	r3, r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4403      	add	r3, r0
 8002b58:	3328      	adds	r3, #40	@ 0x28
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	440b      	add	r3, r1
 8002b5e:	1e59      	subs	r1, r3, #1
 8002b60:	78fa      	ldrb	r2, [r7, #3]
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	1a9b      	subs	r3, r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4403      	add	r3, r0
 8002b6e:	3328      	adds	r3, #40	@ 0x28
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b76:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 813f 	beq.w	8002e02 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002b84:	78fa      	ldrb	r2, [r7, #3]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	1a9b      	subs	r3, r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	333d      	adds	r3, #61	@ 0x3d
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	78fa      	ldrb	r2, [r7, #3]
 8002b98:	f083 0301 	eor.w	r3, r3, #1
 8002b9c:	b2d8      	uxtb	r0, r3
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	011b      	lsls	r3, r3, #4
 8002ba4:	1a9b      	subs	r3, r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	333d      	adds	r3, #61	@ 0x3d
 8002bac:	4602      	mov	r2, r0
 8002bae:	701a      	strb	r2, [r3, #0]
 8002bb0:	e127      	b.n	8002e02 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002bb2:	78fa      	ldrb	r2, [r7, #3]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	334d      	adds	r3, #77	@ 0x4d
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	d120      	bne.n	8002c0a <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002bc8:	78fa      	ldrb	r2, [r7, #3]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	334d      	adds	r3, #77	@ 0x4d
 8002bd8:	2202      	movs	r2, #2
 8002bda:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	331b      	adds	r3, #27
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	f040 8107 	bne.w	8002e02 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	334c      	adds	r3, #76	@ 0x4c
 8002c04:	2202      	movs	r2, #2
 8002c06:	701a      	strb	r2, [r3, #0]
 8002c08:	e0fb      	b.n	8002e02 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002c0a:	78fa      	ldrb	r2, [r7, #3]
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	1a9b      	subs	r3, r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	440b      	add	r3, r1
 8002c18:	334d      	adds	r3, #77	@ 0x4d
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d13a      	bne.n	8002c96 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	334d      	adds	r3, #77	@ 0x4d
 8002c30:	2202      	movs	r2, #2
 8002c32:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c34:	78fa      	ldrb	r2, [r7, #3]
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	334c      	adds	r3, #76	@ 0x4c
 8002c44:	2202      	movs	r2, #2
 8002c46:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002c48:	78fa      	ldrb	r2, [r7, #3]
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	1a9b      	subs	r3, r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	331b      	adds	r3, #27
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	f040 80d1 	bne.w	8002e02 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8002c60:	78fa      	ldrb	r2, [r7, #3]
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	1a9b      	subs	r3, r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	331b      	adds	r3, #27
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	0151      	lsls	r1, r2, #5
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	440a      	add	r2, r1
 8002c8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c92:	6053      	str	r3, [r2, #4]
 8002c94:	e0b5      	b.n	8002e02 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	334d      	adds	r3, #77	@ 0x4d
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b05      	cmp	r3, #5
 8002caa:	d114      	bne.n	8002cd6 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002cac:	78fa      	ldrb	r2, [r7, #3]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	1a9b      	subs	r3, r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	334d      	adds	r3, #77	@ 0x4d
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	334c      	adds	r3, #76	@ 0x4c
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	701a      	strb	r2, [r3, #0]
 8002cd4:	e095      	b.n	8002e02 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002cd6:	78fa      	ldrb	r2, [r7, #3]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	1a9b      	subs	r3, r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	334d      	adds	r3, #77	@ 0x4d
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b06      	cmp	r3, #6
 8002cea:	d114      	bne.n	8002d16 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002cec:	78fa      	ldrb	r2, [r7, #3]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	334d      	adds	r3, #77	@ 0x4d
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	334c      	adds	r3, #76	@ 0x4c
 8002d10:	2205      	movs	r2, #5
 8002d12:	701a      	strb	r2, [r3, #0]
 8002d14:	e075      	b.n	8002e02 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002d16:	78fa      	ldrb	r2, [r7, #3]
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	1a9b      	subs	r3, r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	440b      	add	r3, r1
 8002d24:	334d      	adds	r3, #77	@ 0x4d
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b07      	cmp	r3, #7
 8002d2a:	d00a      	beq.n	8002d42 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002d2c:	78fa      	ldrb	r2, [r7, #3]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	1a9b      	subs	r3, r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	334d      	adds	r3, #77	@ 0x4d
 8002d3c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002d3e:	2b09      	cmp	r3, #9
 8002d40:	d170      	bne.n	8002e24 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	1a9b      	subs	r3, r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	440b      	add	r3, r1
 8002d50:	334d      	adds	r3, #77	@ 0x4d
 8002d52:	2202      	movs	r2, #2
 8002d54:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002d56:	78fa      	ldrb	r2, [r7, #3]
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	3344      	adds	r3, #68	@ 0x44
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	1c59      	adds	r1, r3, #1
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4403      	add	r3, r0
 8002d76:	3344      	adds	r3, #68	@ 0x44
 8002d78:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d7a:	78fa      	ldrb	r2, [r7, #3]
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	1a9b      	subs	r3, r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	440b      	add	r3, r1
 8002d88:	3344      	adds	r3, #68	@ 0x44
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d914      	bls.n	8002dba <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002d90:	78fa      	ldrb	r2, [r7, #3]
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	1a9b      	subs	r3, r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	3344      	adds	r3, #68	@ 0x44
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002da4:	78fa      	ldrb	r2, [r7, #3]
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	1a9b      	subs	r3, r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	334c      	adds	r3, #76	@ 0x4c
 8002db4:	2204      	movs	r2, #4
 8002db6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002db8:	e022      	b.n	8002e00 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002dba:	78fa      	ldrb	r2, [r7, #3]
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	1a9b      	subs	r3, r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	334c      	adds	r3, #76	@ 0x4c
 8002dca:	2202      	movs	r2, #2
 8002dcc:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002dce:	78fb      	ldrb	r3, [r7, #3]
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002de4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002dec:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002dee:	78fb      	ldrb	r3, [r7, #3]
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e00:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002e02:	78fa      	ldrb	r2, [r7, #3]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	1a9b      	subs	r3, r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	334c      	adds	r3, #76	@ 0x4c
 8002e12:	781a      	ldrb	r2, [r3, #0]
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	4619      	mov	r1, r3
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f005 f877 	bl	8007f0c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002e1e:	e002      	b.n	8002e26 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8002e20:	bf00      	nop
 8002e22:	e000      	b.n	8002e26 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8002e24:	bf00      	nop
  }
}
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08a      	sub	sp, #40	@ 0x28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	f003 030f 	and.w	r3, r3, #15
 8002e4c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	0c5b      	lsrs	r3, r3, #17
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	091b      	lsrs	r3, r3, #4
 8002e5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e60:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d004      	beq.n	8002e72 <HCD_RXQLVL_IRQHandler+0x46>
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2b05      	cmp	r3, #5
 8002e6c:	f000 80b6 	beq.w	8002fdc <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e70:	e0b7      	b.n	8002fe2 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 80b3 	beq.w	8002fe0 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	332c      	adds	r3, #44	@ 0x2c
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 80a7 	beq.w	8002fe0 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4613      	mov	r3, r2
 8002e98:	011b      	lsls	r3, r3, #4
 8002e9a:	1a9b      	subs	r3, r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	3338      	adds	r3, #56	@ 0x38
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	18d1      	adds	r1, r2, r3
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4613      	mov	r3, r2
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4403      	add	r3, r0
 8002eb6:	3334      	adds	r3, #52	@ 0x34
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4299      	cmp	r1, r3
 8002ebc:	f200 8083 	bhi.w	8002fc6 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	1a9b      	subs	r3, r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	332c      	adds	r3, #44	@ 0x2c
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	b292      	uxth	r2, r2
 8002eda:	4619      	mov	r1, r3
 8002edc:	f002 f88a 	bl	8004ff4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	1a9b      	subs	r3, r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	332c      	adds	r3, #44	@ 0x2c
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	18d1      	adds	r1, r2, r3
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4613      	mov	r3, r2
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	1a9b      	subs	r3, r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4403      	add	r3, r0
 8002f04:	332c      	adds	r3, #44	@ 0x2c
 8002f06:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	1a9b      	subs	r3, r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	3338      	adds	r3, #56	@ 0x38
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	18d1      	adds	r1, r2, r3
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4613      	mov	r3, r2
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	1a9b      	subs	r3, r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4403      	add	r3, r0
 8002f2c:	3338      	adds	r3, #56	@ 0x38
 8002f2e:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	0cdb      	lsrs	r3, r3, #19
 8002f40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f44:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	1a9b      	subs	r3, r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	3328      	adds	r3, #40	@ 0x28
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d13f      	bne.n	8002fe0 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d03c      	beq.n	8002fe0 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	015a      	lsls	r2, r3, #5
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f7c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f84:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f92:	461a      	mov	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	333c      	adds	r3, #60	@ 0x3c
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	f083 0301 	eor.w	r3, r3, #1
 8002fae:	b2d8      	uxtb	r0, r3
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	333c      	adds	r3, #60	@ 0x3c
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	701a      	strb	r2, [r3, #0]
      break;
 8002fc4:	e00c      	b.n	8002fe0 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	334c      	adds	r3, #76	@ 0x4c
 8002fd6:	2204      	movs	r2, #4
 8002fd8:	701a      	strb	r2, [r3, #0]
      break;
 8002fda:	e001      	b.n	8002fe0 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8002fdc:	bf00      	nop
 8002fde:	e000      	b.n	8002fe2 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8002fe0:	bf00      	nop
  }
}
 8002fe2:	bf00      	nop
 8002fe4:	3728      	adds	r7, #40	@ 0x28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b086      	sub	sp, #24
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003016:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b02      	cmp	r3, #2
 8003020:	d10b      	bne.n	800303a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b01      	cmp	r3, #1
 800302a:	d102      	bne.n	8003032 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f004 ff51 	bl	8007ed4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f043 0302 	orr.w	r3, r3, #2
 8003038:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b08      	cmp	r3, #8
 8003042:	d132      	bne.n	80030aa <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f043 0308 	orr.w	r3, r3, #8
 800304a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b04      	cmp	r3, #4
 8003054:	d126      	bne.n	80030a4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	7a5b      	ldrb	r3, [r3, #9]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d113      	bne.n	8003086 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003064:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003068:	d106      	bne.n	8003078 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2102      	movs	r1, #2
 8003070:	4618      	mov	r0, r3
 8003072:	f002 f859 	bl	8005128 <USB_InitFSLSPClkSel>
 8003076:	e011      	b.n	800309c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2101      	movs	r1, #1
 800307e:	4618      	mov	r0, r3
 8003080:	f002 f852 	bl	8005128 <USB_InitFSLSPClkSel>
 8003084:	e00a      	b.n	800309c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	79db      	ldrb	r3, [r3, #7]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d106      	bne.n	800309c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003094:	461a      	mov	r2, r3
 8003096:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800309a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f004 ff47 	bl	8007f30 <HAL_HCD_PortEnabled_Callback>
 80030a2:	e002      	b.n	80030aa <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f004 ff51 	bl	8007f4c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	2b20      	cmp	r3, #32
 80030b2:	d103      	bne.n	80030bc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f043 0320 	orr.w	r3, r3, #32
 80030ba:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80030c2:	461a      	mov	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	6013      	str	r3, [r2, #0]
}
 80030c8:	bf00      	nop
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e12b      	b.n	800333a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fd fd58 	bl	8000bac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2224      	movs	r2, #36	@ 0x24
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0201 	bic.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003122:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003132:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003134:	f001 fa20 	bl	8004578 <HAL_RCC_GetPCLK1Freq>
 8003138:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4a81      	ldr	r2, [pc, #516]	@ (8003344 <HAL_I2C_Init+0x274>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d807      	bhi.n	8003154 <HAL_I2C_Init+0x84>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4a80      	ldr	r2, [pc, #512]	@ (8003348 <HAL_I2C_Init+0x278>)
 8003148:	4293      	cmp	r3, r2
 800314a:	bf94      	ite	ls
 800314c:	2301      	movls	r3, #1
 800314e:	2300      	movhi	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	e006      	b.n	8003162 <HAL_I2C_Init+0x92>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4a7d      	ldr	r2, [pc, #500]	@ (800334c <HAL_I2C_Init+0x27c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	bf94      	ite	ls
 800315c:	2301      	movls	r3, #1
 800315e:	2300      	movhi	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e0e7      	b.n	800333a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4a78      	ldr	r2, [pc, #480]	@ (8003350 <HAL_I2C_Init+0x280>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	0c9b      	lsrs	r3, r3, #18
 8003174:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	4a6a      	ldr	r2, [pc, #424]	@ (8003344 <HAL_I2C_Init+0x274>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d802      	bhi.n	80031a4 <HAL_I2C_Init+0xd4>
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	3301      	adds	r3, #1
 80031a2:	e009      	b.n	80031b8 <HAL_I2C_Init+0xe8>
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80031aa:	fb02 f303 	mul.w	r3, r2, r3
 80031ae:	4a69      	ldr	r2, [pc, #420]	@ (8003354 <HAL_I2C_Init+0x284>)
 80031b0:	fba2 2303 	umull	r2, r3, r2, r3
 80031b4:	099b      	lsrs	r3, r3, #6
 80031b6:	3301      	adds	r3, #1
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6812      	ldr	r2, [r2, #0]
 80031bc:	430b      	orrs	r3, r1
 80031be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80031ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	495c      	ldr	r1, [pc, #368]	@ (8003344 <HAL_I2C_Init+0x274>)
 80031d4:	428b      	cmp	r3, r1
 80031d6:	d819      	bhi.n	800320c <HAL_I2C_Init+0x13c>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1e59      	subs	r1, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80031e6:	1c59      	adds	r1, r3, #1
 80031e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80031ec:	400b      	ands	r3, r1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <HAL_I2C_Init+0x138>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1e59      	subs	r1, r3, #1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003200:	3301      	adds	r3, #1
 8003202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003206:	e051      	b.n	80032ac <HAL_I2C_Init+0x1dc>
 8003208:	2304      	movs	r3, #4
 800320a:	e04f      	b.n	80032ac <HAL_I2C_Init+0x1dc>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d111      	bne.n	8003238 <HAL_I2C_Init+0x168>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1e58      	subs	r0, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6859      	ldr	r1, [r3, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	440b      	add	r3, r1
 8003222:	fbb0 f3f3 	udiv	r3, r0, r3
 8003226:	3301      	adds	r3, #1
 8003228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800322c:	2b00      	cmp	r3, #0
 800322e:	bf0c      	ite	eq
 8003230:	2301      	moveq	r3, #1
 8003232:	2300      	movne	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	e012      	b.n	800325e <HAL_I2C_Init+0x18e>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1e58      	subs	r0, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	0099      	lsls	r1, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	fbb0 f3f3 	udiv	r3, r0, r3
 800324e:	3301      	adds	r3, #1
 8003250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003254:	2b00      	cmp	r3, #0
 8003256:	bf0c      	ite	eq
 8003258:	2301      	moveq	r3, #1
 800325a:	2300      	movne	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_I2C_Init+0x196>
 8003262:	2301      	movs	r3, #1
 8003264:	e022      	b.n	80032ac <HAL_I2C_Init+0x1dc>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10e      	bne.n	800328c <HAL_I2C_Init+0x1bc>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1e58      	subs	r0, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6859      	ldr	r1, [r3, #4]
 8003276:	460b      	mov	r3, r1
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	440b      	add	r3, r1
 800327c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003280:	3301      	adds	r3, #1
 8003282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003286:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800328a:	e00f      	b.n	80032ac <HAL_I2C_Init+0x1dc>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1e58      	subs	r0, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6859      	ldr	r1, [r3, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	0099      	lsls	r1, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a2:	3301      	adds	r3, #1
 80032a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	6809      	ldr	r1, [r1, #0]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69da      	ldr	r2, [r3, #28]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80032da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6911      	ldr	r1, [r2, #16]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68d2      	ldr	r2, [r2, #12]
 80032e6:	4311      	orrs	r1, r2
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	430b      	orrs	r3, r1
 80032ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2220      	movs	r2, #32
 8003326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	000186a0 	.word	0x000186a0
 8003348:	001e847f 	.word	0x001e847f
 800334c:	003d08ff 	.word	0x003d08ff
 8003350:	431bde83 	.word	0x431bde83
 8003354:	10624dd3 	.word	0x10624dd3

08003358 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e128      	b.n	80035bc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d109      	bne.n	800338a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a90      	ldr	r2, [pc, #576]	@ (80035c4 <HAL_I2S_Init+0x26c>)
 8003382:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7fd fc59 	bl	8000c3c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2202      	movs	r2, #2
 800338e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80033a0:	f023 030f 	bic.w	r3, r3, #15
 80033a4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2202      	movs	r2, #2
 80033ac:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d060      	beq.n	8003478 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d102      	bne.n	80033c4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80033be:	2310      	movs	r3, #16
 80033c0:	617b      	str	r3, [r7, #20]
 80033c2:	e001      	b.n	80033c8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80033c4:	2320      	movs	r3, #32
 80033c6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b20      	cmp	r3, #32
 80033ce:	d802      	bhi.n	80033d6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80033d6:	2001      	movs	r0, #1
 80033d8:	f001 fa0a 	bl	80047f0 <HAL_RCCEx_GetPeriphCLKFreq>
 80033dc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033e6:	d125      	bne.n	8003434 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d010      	beq.n	8003412 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80033fa:	4613      	mov	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	461a      	mov	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	fbb2 f3f3 	udiv	r3, r2, r3
 800340c:	3305      	adds	r3, #5
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	e01f      	b.n	8003452 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	fbb2 f2f3 	udiv	r2, r2, r3
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	461a      	mov	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	fbb2 f3f3 	udiv	r3, r2, r3
 800342e:	3305      	adds	r3, #5
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	e00e      	b.n	8003452 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	fbb2 f2f3 	udiv	r2, r2, r3
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	461a      	mov	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	fbb2 f3f3 	udiv	r3, r2, r3
 800344e:	3305      	adds	r3, #5
 8003450:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	4a5c      	ldr	r2, [pc, #368]	@ (80035c8 <HAL_I2S_Init+0x270>)
 8003456:	fba2 2303 	umull	r2, r3, r2, r3
 800345a:	08db      	lsrs	r3, r3, #3
 800345c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	085b      	lsrs	r3, r3, #1
 800346e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	61bb      	str	r3, [r7, #24]
 8003476:	e003      	b.n	8003480 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003478:	2302      	movs	r3, #2
 800347a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d902      	bls.n	800348c <HAL_I2S_Init+0x134>
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	2bff      	cmp	r3, #255	@ 0xff
 800348a:	d907      	bls.n	800349c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003490:	f043 0210 	orr.w	r2, r3, #16
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e08f      	b.n	80035bc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	ea42 0103 	orr.w	r1, r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	69fa      	ldr	r2, [r7, #28]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80034ba:	f023 030f 	bic.w	r3, r3, #15
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6851      	ldr	r1, [r2, #4]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6892      	ldr	r2, [r2, #8]
 80034c6:	4311      	orrs	r1, r2
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	68d2      	ldr	r2, [r2, #12]
 80034cc:	4311      	orrs	r1, r2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6992      	ldr	r2, [r2, #24]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034de:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d161      	bne.n	80035ac <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a38      	ldr	r2, [pc, #224]	@ (80035cc <HAL_I2S_Init+0x274>)
 80034ec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a37      	ldr	r2, [pc, #220]	@ (80035d0 <HAL_I2S_Init+0x278>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d101      	bne.n	80034fc <HAL_I2S_Init+0x1a4>
 80034f8:	4b36      	ldr	r3, [pc, #216]	@ (80035d4 <HAL_I2S_Init+0x27c>)
 80034fa:	e001      	b.n	8003500 <HAL_I2S_Init+0x1a8>
 80034fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6812      	ldr	r2, [r2, #0]
 8003506:	4932      	ldr	r1, [pc, #200]	@ (80035d0 <HAL_I2S_Init+0x278>)
 8003508:	428a      	cmp	r2, r1
 800350a:	d101      	bne.n	8003510 <HAL_I2S_Init+0x1b8>
 800350c:	4a31      	ldr	r2, [pc, #196]	@ (80035d4 <HAL_I2S_Init+0x27c>)
 800350e:	e001      	b.n	8003514 <HAL_I2S_Init+0x1bc>
 8003510:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003514:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003518:	f023 030f 	bic.w	r3, r3, #15
 800351c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a2b      	ldr	r2, [pc, #172]	@ (80035d0 <HAL_I2S_Init+0x278>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d101      	bne.n	800352c <HAL_I2S_Init+0x1d4>
 8003528:	4b2a      	ldr	r3, [pc, #168]	@ (80035d4 <HAL_I2S_Init+0x27c>)
 800352a:	e001      	b.n	8003530 <HAL_I2S_Init+0x1d8>
 800352c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003530:	2202      	movs	r2, #2
 8003532:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a25      	ldr	r2, [pc, #148]	@ (80035d0 <HAL_I2S_Init+0x278>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d101      	bne.n	8003542 <HAL_I2S_Init+0x1ea>
 800353e:	4b25      	ldr	r3, [pc, #148]	@ (80035d4 <HAL_I2S_Init+0x27c>)
 8003540:	e001      	b.n	8003546 <HAL_I2S_Init+0x1ee>
 8003542:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003552:	d003      	beq.n	800355c <HAL_I2S_Init+0x204>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d103      	bne.n	8003564 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800355c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	e001      	b.n	8003568 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003564:	2300      	movs	r3, #0
 8003566:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003572:	4313      	orrs	r3, r2
 8003574:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800357c:	4313      	orrs	r3, r2
 800357e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003586:	4313      	orrs	r3, r2
 8003588:	b29a      	uxth	r2, r3
 800358a:	897b      	ldrh	r3, [r7, #10]
 800358c:	4313      	orrs	r3, r2
 800358e:	b29b      	uxth	r3, r3
 8003590:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003594:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a0d      	ldr	r2, [pc, #52]	@ (80035d0 <HAL_I2S_Init+0x278>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d101      	bne.n	80035a4 <HAL_I2S_Init+0x24c>
 80035a0:	4b0c      	ldr	r3, [pc, #48]	@ (80035d4 <HAL_I2S_Init+0x27c>)
 80035a2:	e001      	b.n	80035a8 <HAL_I2S_Init+0x250>
 80035a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80035a8:	897a      	ldrh	r2, [r7, #10]
 80035aa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3720      	adds	r7, #32
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	080036cf 	.word	0x080036cf
 80035c8:	cccccccd 	.word	0xcccccccd
 80035cc:	080037e5 	.word	0x080037e5
 80035d0:	40003800 	.word	0x40003800
 80035d4:	40003400 	.word	0x40003400

080035d8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003620:	881a      	ldrh	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362c:	1c9a      	adds	r2, r3, #2
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003636:	b29b      	uxth	r3, r3
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003644:	b29b      	uxth	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10e      	bne.n	8003668 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003658:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff ffb8 	bl	80035d8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003668:	bf00      	nop
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003682:	b292      	uxth	r2, r2
 8003684:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368a:	1c9a      	adds	r2, r3, #2
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003694:	b29b      	uxth	r3, r3
 8003696:	3b01      	subs	r3, #1
 8003698:	b29a      	uxth	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10e      	bne.n	80036c6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80036b6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7ff ff93 	bl	80035ec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036c6:	bf00      	nop
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b086      	sub	sp, #24
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d13a      	bne.n	8003760 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d109      	bne.n	8003708 <I2S_IRQHandler+0x3a>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036fe:	2b40      	cmp	r3, #64	@ 0x40
 8003700:	d102      	bne.n	8003708 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff ffb4 	bl	8003670 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800370e:	2b40      	cmp	r3, #64	@ 0x40
 8003710:	d126      	bne.n	8003760 <I2S_IRQHandler+0x92>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b20      	cmp	r3, #32
 800371e:	d11f      	bne.n	8003760 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800372e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003730:	2300      	movs	r3, #0
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003752:	f043 0202 	orr.w	r2, r3, #2
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff ff50 	bl	8003600 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b03      	cmp	r3, #3
 800376a:	d136      	bne.n	80037da <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b02      	cmp	r3, #2
 8003774:	d109      	bne.n	800378a <I2S_IRQHandler+0xbc>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003780:	2b80      	cmp	r3, #128	@ 0x80
 8003782:	d102      	bne.n	800378a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff ff45 	bl	8003614 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b08      	cmp	r3, #8
 8003792:	d122      	bne.n	80037da <I2S_IRQHandler+0x10c>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f003 0320 	and.w	r3, r3, #32
 800379e:	2b20      	cmp	r3, #32
 80037a0:	d11b      	bne.n	80037da <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80037b0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037b2:	2300      	movs	r3, #0
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037cc:	f043 0204 	orr.w	r2, r3, #4
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7ff ff13 	bl	8003600 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037da:	bf00      	nop
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a92      	ldr	r2, [pc, #584]	@ (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d101      	bne.n	8003802 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80037fe:	4b92      	ldr	r3, [pc, #584]	@ (8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003800:	e001      	b.n	8003806 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003802:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a8b      	ldr	r2, [pc, #556]	@ (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d101      	bne.n	8003820 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800381c:	4b8a      	ldr	r3, [pc, #552]	@ (8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800381e:	e001      	b.n	8003824 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003820:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003830:	d004      	beq.n	800383c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	f040 8099 	bne.w	800396e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b02      	cmp	r3, #2
 8003844:	d107      	bne.n	8003856 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800384c:	2b00      	cmp	r3, #0
 800384e:	d002      	beq.n	8003856 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f925 	bl	8003aa0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b01      	cmp	r3, #1
 800385e:	d107      	bne.n	8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f9c8 	bl	8003c00 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003876:	2b40      	cmp	r3, #64	@ 0x40
 8003878:	d13a      	bne.n	80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f003 0320 	and.w	r3, r3, #32
 8003880:	2b00      	cmp	r3, #0
 8003882:	d035      	beq.n	80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a6e      	ldr	r2, [pc, #440]	@ (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d101      	bne.n	8003892 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800388e:	4b6e      	ldr	r3, [pc, #440]	@ (8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003890:	e001      	b.n	8003896 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003892:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4969      	ldr	r1, [pc, #420]	@ (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800389e:	428b      	cmp	r3, r1
 80038a0:	d101      	bne.n	80038a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80038a2:	4b69      	ldr	r3, [pc, #420]	@ (8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038a4:	e001      	b.n	80038aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80038a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038aa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80038ae:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80038be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038c0:	2300      	movs	r3, #0
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e2:	f043 0202 	orr.w	r2, r3, #2
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7ff fe88 	bl	8003600 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	f040 80c3 	bne.w	8003a82 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f003 0320 	and.w	r3, r3, #32
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 80bd 	beq.w	8003a82 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003916:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a49      	ldr	r2, [pc, #292]	@ (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d101      	bne.n	8003926 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003922:	4b49      	ldr	r3, [pc, #292]	@ (8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003924:	e001      	b.n	800392a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003926:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4944      	ldr	r1, [pc, #272]	@ (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003932:	428b      	cmp	r3, r1
 8003934:	d101      	bne.n	800393a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003936:	4b44      	ldr	r3, [pc, #272]	@ (8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003938:	e001      	b.n	800393e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800393a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800393e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003942:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003944:	2300      	movs	r3, #0
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	60bb      	str	r3, [r7, #8]
 8003950:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395e:	f043 0204 	orr.w	r2, r3, #4
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff fe4a 	bl	8003600 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800396c:	e089      	b.n	8003a82 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b02      	cmp	r3, #2
 8003976:	d107      	bne.n	8003988 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f8be 	bl	8003b04 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b01      	cmp	r3, #1
 8003990:	d107      	bne.n	80039a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f8fd 	bl	8003b9c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a8:	2b40      	cmp	r3, #64	@ 0x40
 80039aa:	d12f      	bne.n	8003a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d02a      	beq.n	8003a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80039c4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d101      	bne.n	80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80039d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039d2:	e001      	b.n	80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80039d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4919      	ldr	r1, [pc, #100]	@ (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039e0:	428b      	cmp	r3, r1
 80039e2:	d101      	bne.n	80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80039e4:	4b18      	ldr	r3, [pc, #96]	@ (8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039e6:	e001      	b.n	80039ec <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80039e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039ec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80039f0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fe:	f043 0202 	orr.w	r2, r3, #2
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7ff fdfa 	bl	8003600 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d136      	bne.n	8003a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f003 0320 	and.w	r3, r3, #32
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d031      	beq.n	8003a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a07      	ldr	r2, [pc, #28]	@ (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d101      	bne.n	8003a2e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003a2a:	4b07      	ldr	r3, [pc, #28]	@ (8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a2c:	e001      	b.n	8003a32 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003a2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4902      	ldr	r1, [pc, #8]	@ (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a3a:	428b      	cmp	r3, r1
 8003a3c:	d106      	bne.n	8003a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003a3e:	4b02      	ldr	r3, [pc, #8]	@ (8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a40:	e006      	b.n	8003a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003a42:	bf00      	nop
 8003a44:	40003800 	.word	0x40003800
 8003a48:	40003400 	.word	0x40003400
 8003a4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a50:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003a54:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a64:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a72:	f043 0204 	orr.w	r2, r3, #4
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff fdc0 	bl	8003600 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a80:	e000      	b.n	8003a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a82:	bf00      	nop
}
 8003a84:	bf00      	nop
 8003a86:	3720      	adds	r7, #32
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aac:	1c99      	adds	r1, r3, #2
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6251      	str	r1, [r2, #36]	@ 0x24
 8003ab2:	881a      	ldrh	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d113      	bne.n	8003afa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ae0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d106      	bne.n	8003afa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7ff ffc9 	bl	8003a8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003afa:	bf00      	nop
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b10:	1c99      	adds	r1, r3, #2
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6251      	str	r1, [r2, #36]	@ 0x24
 8003b16:	8819      	ldrh	r1, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8003b94 <I2SEx_TxISR_I2SExt+0x90>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d101      	bne.n	8003b26 <I2SEx_TxISR_I2SExt+0x22>
 8003b22:	4b1d      	ldr	r3, [pc, #116]	@ (8003b98 <I2SEx_TxISR_I2SExt+0x94>)
 8003b24:	e001      	b.n	8003b2a <I2SEx_TxISR_I2SExt+0x26>
 8003b26:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b2a:	460a      	mov	r2, r1
 8003b2c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d121      	bne.n	8003b8a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a12      	ldr	r2, [pc, #72]	@ (8003b94 <I2SEx_TxISR_I2SExt+0x90>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d101      	bne.n	8003b54 <I2SEx_TxISR_I2SExt+0x50>
 8003b50:	4b11      	ldr	r3, [pc, #68]	@ (8003b98 <I2SEx_TxISR_I2SExt+0x94>)
 8003b52:	e001      	b.n	8003b58 <I2SEx_TxISR_I2SExt+0x54>
 8003b54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	490d      	ldr	r1, [pc, #52]	@ (8003b94 <I2SEx_TxISR_I2SExt+0x90>)
 8003b60:	428b      	cmp	r3, r1
 8003b62:	d101      	bne.n	8003b68 <I2SEx_TxISR_I2SExt+0x64>
 8003b64:	4b0c      	ldr	r3, [pc, #48]	@ (8003b98 <I2SEx_TxISR_I2SExt+0x94>)
 8003b66:	e001      	b.n	8003b6c <I2SEx_TxISR_I2SExt+0x68>
 8003b68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b6c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b70:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d106      	bne.n	8003b8a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7ff ff81 	bl	8003a8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40003800 	.word	0x40003800
 8003b98:	40003400 	.word	0x40003400

08003b9c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68d8      	ldr	r0, [r3, #12]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bae:	1c99      	adds	r1, r3, #2
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003bb4:	b282      	uxth	r2, r0
 8003bb6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d113      	bne.n	8003bf8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003bde:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d106      	bne.n	8003bf8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff ff4a 	bl	8003a8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a20      	ldr	r2, [pc, #128]	@ (8003c90 <I2SEx_RxISR_I2SExt+0x90>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d101      	bne.n	8003c16 <I2SEx_RxISR_I2SExt+0x16>
 8003c12:	4b20      	ldr	r3, [pc, #128]	@ (8003c94 <I2SEx_RxISR_I2SExt+0x94>)
 8003c14:	e001      	b.n	8003c1a <I2SEx_RxISR_I2SExt+0x1a>
 8003c16:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c1a:	68d8      	ldr	r0, [r3, #12]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c20:	1c99      	adds	r1, r3, #2
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003c26:	b282      	uxth	r2, r0
 8003c28:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d121      	bne.n	8003c86 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a12      	ldr	r2, [pc, #72]	@ (8003c90 <I2SEx_RxISR_I2SExt+0x90>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d101      	bne.n	8003c50 <I2SEx_RxISR_I2SExt+0x50>
 8003c4c:	4b11      	ldr	r3, [pc, #68]	@ (8003c94 <I2SEx_RxISR_I2SExt+0x94>)
 8003c4e:	e001      	b.n	8003c54 <I2SEx_RxISR_I2SExt+0x54>
 8003c50:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	490d      	ldr	r1, [pc, #52]	@ (8003c90 <I2SEx_RxISR_I2SExt+0x90>)
 8003c5c:	428b      	cmp	r3, r1
 8003c5e:	d101      	bne.n	8003c64 <I2SEx_RxISR_I2SExt+0x64>
 8003c60:	4b0c      	ldr	r3, [pc, #48]	@ (8003c94 <I2SEx_RxISR_I2SExt+0x94>)
 8003c62:	e001      	b.n	8003c68 <I2SEx_RxISR_I2SExt+0x68>
 8003c64:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c68:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c6c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d106      	bne.n	8003c86 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff ff03 	bl	8003a8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c86:	bf00      	nop
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	40003800 	.word	0x40003800
 8003c94:	40003400 	.word	0x40003400

08003c98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e267      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d075      	beq.n	8003da2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cb6:	4b88      	ldr	r3, [pc, #544]	@ (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d00c      	beq.n	8003cdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cc2:	4b85      	ldr	r3, [pc, #532]	@ (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d112      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cce:	4b82      	ldr	r3, [pc, #520]	@ (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cda:	d10b      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cdc:	4b7e      	ldr	r3, [pc, #504]	@ (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d05b      	beq.n	8003da0 <HAL_RCC_OscConfig+0x108>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d157      	bne.n	8003da0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e242      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cfc:	d106      	bne.n	8003d0c <HAL_RCC_OscConfig+0x74>
 8003cfe:	4b76      	ldr	r3, [pc, #472]	@ (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a75      	ldr	r2, [pc, #468]	@ (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	e01d      	b.n	8003d48 <HAL_RCC_OscConfig+0xb0>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d14:	d10c      	bne.n	8003d30 <HAL_RCC_OscConfig+0x98>
 8003d16:	4b70      	ldr	r3, [pc, #448]	@ (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a6f      	ldr	r2, [pc, #444]	@ (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003d1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	4b6d      	ldr	r3, [pc, #436]	@ (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a6c      	ldr	r2, [pc, #432]	@ (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	e00b      	b.n	8003d48 <HAL_RCC_OscConfig+0xb0>
 8003d30:	4b69      	ldr	r3, [pc, #420]	@ (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a68      	ldr	r2, [pc, #416]	@ (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003d36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d3a:	6013      	str	r3, [r2, #0]
 8003d3c:	4b66      	ldr	r3, [pc, #408]	@ (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a65      	ldr	r2, [pc, #404]	@ (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003d42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d013      	beq.n	8003d78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d50:	f7fd f974 	bl	800103c <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d58:	f7fd f970 	bl	800103c <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b64      	cmp	r3, #100	@ 0x64
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e207      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6a:	4b5b      	ldr	r3, [pc, #364]	@ (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0f0      	beq.n	8003d58 <HAL_RCC_OscConfig+0xc0>
 8003d76:	e014      	b.n	8003da2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d78:	f7fd f960 	bl	800103c <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d80:	f7fd f95c 	bl	800103c <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b64      	cmp	r3, #100	@ 0x64
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e1f3      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d92:	4b51      	ldr	r3, [pc, #324]	@ (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f0      	bne.n	8003d80 <HAL_RCC_OscConfig+0xe8>
 8003d9e:	e000      	b.n	8003da2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d063      	beq.n	8003e76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dae:	4b4a      	ldr	r3, [pc, #296]	@ (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 030c 	and.w	r3, r3, #12
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00b      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dba:	4b47      	ldr	r3, [pc, #284]	@ (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dc2:	2b08      	cmp	r3, #8
 8003dc4:	d11c      	bne.n	8003e00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dc6:	4b44      	ldr	r3, [pc, #272]	@ (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d116      	bne.n	8003e00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dd2:	4b41      	ldr	r3, [pc, #260]	@ (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d005      	beq.n	8003dea <HAL_RCC_OscConfig+0x152>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d001      	beq.n	8003dea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e1c7      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dea:	4b3b      	ldr	r3, [pc, #236]	@ (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	4937      	ldr	r1, [pc, #220]	@ (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dfe:	e03a      	b.n	8003e76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d020      	beq.n	8003e4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e08:	4b34      	ldr	r3, [pc, #208]	@ (8003edc <HAL_RCC_OscConfig+0x244>)
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0e:	f7fd f915 	bl	800103c <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e16:	f7fd f911 	bl	800103c <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e1a8      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e28:	4b2b      	ldr	r3, [pc, #172]	@ (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0f0      	beq.n	8003e16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e34:	4b28      	ldr	r3, [pc, #160]	@ (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	4925      	ldr	r1, [pc, #148]	@ (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	600b      	str	r3, [r1, #0]
 8003e48:	e015      	b.n	8003e76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e4a:	4b24      	ldr	r3, [pc, #144]	@ (8003edc <HAL_RCC_OscConfig+0x244>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e50:	f7fd f8f4 	bl	800103c <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e58:	f7fd f8f0 	bl	800103c <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e187      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f0      	bne.n	8003e58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d036      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d016      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e8a:	4b15      	ldr	r3, [pc, #84]	@ (8003ee0 <HAL_RCC_OscConfig+0x248>)
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e90:	f7fd f8d4 	bl	800103c <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e98:	f7fd f8d0 	bl	800103c <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e167      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003eac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCC_OscConfig+0x200>
 8003eb6:	e01b      	b.n	8003ef0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eb8:	4b09      	ldr	r3, [pc, #36]	@ (8003ee0 <HAL_RCC_OscConfig+0x248>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ebe:	f7fd f8bd 	bl	800103c <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec4:	e00e      	b.n	8003ee4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ec6:	f7fd f8b9 	bl	800103c <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d907      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e150      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	42470000 	.word	0x42470000
 8003ee0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee4:	4b88      	ldr	r3, [pc, #544]	@ (8004108 <HAL_RCC_OscConfig+0x470>)
 8003ee6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1ea      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 8097 	beq.w	800402c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003efe:	2300      	movs	r3, #0
 8003f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f02:	4b81      	ldr	r3, [pc, #516]	@ (8004108 <HAL_RCC_OscConfig+0x470>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10f      	bne.n	8003f2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60bb      	str	r3, [r7, #8]
 8003f12:	4b7d      	ldr	r3, [pc, #500]	@ (8004108 <HAL_RCC_OscConfig+0x470>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f16:	4a7c      	ldr	r2, [pc, #496]	@ (8004108 <HAL_RCC_OscConfig+0x470>)
 8003f18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f1e:	4b7a      	ldr	r3, [pc, #488]	@ (8004108 <HAL_RCC_OscConfig+0x470>)
 8003f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f26:	60bb      	str	r3, [r7, #8]
 8003f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2e:	4b77      	ldr	r3, [pc, #476]	@ (800410c <HAL_RCC_OscConfig+0x474>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d118      	bne.n	8003f6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f3a:	4b74      	ldr	r3, [pc, #464]	@ (800410c <HAL_RCC_OscConfig+0x474>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a73      	ldr	r2, [pc, #460]	@ (800410c <HAL_RCC_OscConfig+0x474>)
 8003f40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f46:	f7fd f879 	bl	800103c <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f4e:	f7fd f875 	bl	800103c <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e10c      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f60:	4b6a      	ldr	r3, [pc, #424]	@ (800410c <HAL_RCC_OscConfig+0x474>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d106      	bne.n	8003f82 <HAL_RCC_OscConfig+0x2ea>
 8003f74:	4b64      	ldr	r3, [pc, #400]	@ (8004108 <HAL_RCC_OscConfig+0x470>)
 8003f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f78:	4a63      	ldr	r2, [pc, #396]	@ (8004108 <HAL_RCC_OscConfig+0x470>)
 8003f7a:	f043 0301 	orr.w	r3, r3, #1
 8003f7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f80:	e01c      	b.n	8003fbc <HAL_RCC_OscConfig+0x324>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	2b05      	cmp	r3, #5
 8003f88:	d10c      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x30c>
 8003f8a:	4b5f      	ldr	r3, [pc, #380]	@ (8004108 <HAL_RCC_OscConfig+0x470>)
 8003f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f8e:	4a5e      	ldr	r2, [pc, #376]	@ (8004108 <HAL_RCC_OscConfig+0x470>)
 8003f90:	f043 0304 	orr.w	r3, r3, #4
 8003f94:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f96:	4b5c      	ldr	r3, [pc, #368]	@ (8004108 <HAL_RCC_OscConfig+0x470>)
 8003f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f9a:	4a5b      	ldr	r2, [pc, #364]	@ (8004108 <HAL_RCC_OscConfig+0x470>)
 8003f9c:	f043 0301 	orr.w	r3, r3, #1
 8003fa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fa2:	e00b      	b.n	8003fbc <HAL_RCC_OscConfig+0x324>
 8003fa4:	4b58      	ldr	r3, [pc, #352]	@ (8004108 <HAL_RCC_OscConfig+0x470>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa8:	4a57      	ldr	r2, [pc, #348]	@ (8004108 <HAL_RCC_OscConfig+0x470>)
 8003faa:	f023 0301 	bic.w	r3, r3, #1
 8003fae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fb0:	4b55      	ldr	r3, [pc, #340]	@ (8004108 <HAL_RCC_OscConfig+0x470>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb4:	4a54      	ldr	r2, [pc, #336]	@ (8004108 <HAL_RCC_OscConfig+0x470>)
 8003fb6:	f023 0304 	bic.w	r3, r3, #4
 8003fba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d015      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc4:	f7fd f83a 	bl	800103c <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fca:	e00a      	b.n	8003fe2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fcc:	f7fd f836 	bl	800103c <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e0cb      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe2:	4b49      	ldr	r3, [pc, #292]	@ (8004108 <HAL_RCC_OscConfig+0x470>)
 8003fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0ee      	beq.n	8003fcc <HAL_RCC_OscConfig+0x334>
 8003fee:	e014      	b.n	800401a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ff0:	f7fd f824 	bl	800103c <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff6:	e00a      	b.n	800400e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ff8:	f7fd f820 	bl	800103c <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004006:	4293      	cmp	r3, r2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e0b5      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800400e:	4b3e      	ldr	r3, [pc, #248]	@ (8004108 <HAL_RCC_OscConfig+0x470>)
 8004010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1ee      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800401a:	7dfb      	ldrb	r3, [r7, #23]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d105      	bne.n	800402c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004020:	4b39      	ldr	r3, [pc, #228]	@ (8004108 <HAL_RCC_OscConfig+0x470>)
 8004022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004024:	4a38      	ldr	r2, [pc, #224]	@ (8004108 <HAL_RCC_OscConfig+0x470>)
 8004026:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800402a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 80a1 	beq.w	8004178 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004036:	4b34      	ldr	r3, [pc, #208]	@ (8004108 <HAL_RCC_OscConfig+0x470>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 030c 	and.w	r3, r3, #12
 800403e:	2b08      	cmp	r3, #8
 8004040:	d05c      	beq.n	80040fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d141      	bne.n	80040ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800404a:	4b31      	ldr	r3, [pc, #196]	@ (8004110 <HAL_RCC_OscConfig+0x478>)
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004050:	f7fc fff4 	bl	800103c <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004058:	f7fc fff0 	bl	800103c <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e087      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406a:	4b27      	ldr	r3, [pc, #156]	@ (8004108 <HAL_RCC_OscConfig+0x470>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f0      	bne.n	8004058 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69da      	ldr	r2, [r3, #28]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004084:	019b      	lsls	r3, r3, #6
 8004086:	431a      	orrs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800408c:	085b      	lsrs	r3, r3, #1
 800408e:	3b01      	subs	r3, #1
 8004090:	041b      	lsls	r3, r3, #16
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004098:	061b      	lsls	r3, r3, #24
 800409a:	491b      	ldr	r1, [pc, #108]	@ (8004108 <HAL_RCC_OscConfig+0x470>)
 800409c:	4313      	orrs	r3, r2
 800409e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004110 <HAL_RCC_OscConfig+0x478>)
 80040a2:	2201      	movs	r2, #1
 80040a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a6:	f7fc ffc9 	bl	800103c <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ae:	f7fc ffc5 	bl	800103c <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e05c      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c0:	4b11      	ldr	r3, [pc, #68]	@ (8004108 <HAL_RCC_OscConfig+0x470>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0f0      	beq.n	80040ae <HAL_RCC_OscConfig+0x416>
 80040cc:	e054      	b.n	8004178 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ce:	4b10      	ldr	r3, [pc, #64]	@ (8004110 <HAL_RCC_OscConfig+0x478>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d4:	f7fc ffb2 	bl	800103c <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040dc:	f7fc ffae 	bl	800103c <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e045      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ee:	4b06      	ldr	r3, [pc, #24]	@ (8004108 <HAL_RCC_OscConfig+0x470>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1f0      	bne.n	80040dc <HAL_RCC_OscConfig+0x444>
 80040fa:	e03d      	b.n	8004178 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d107      	bne.n	8004114 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e038      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
 8004108:	40023800 	.word	0x40023800
 800410c:	40007000 	.word	0x40007000
 8004110:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004114:	4b1b      	ldr	r3, [pc, #108]	@ (8004184 <HAL_RCC_OscConfig+0x4ec>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d028      	beq.n	8004174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800412c:	429a      	cmp	r2, r3
 800412e:	d121      	bne.n	8004174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800413a:	429a      	cmp	r2, r3
 800413c:	d11a      	bne.n	8004174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004144:	4013      	ands	r3, r2
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800414a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800414c:	4293      	cmp	r3, r2
 800414e:	d111      	bne.n	8004174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415a:	085b      	lsrs	r3, r3, #1
 800415c:	3b01      	subs	r3, #1
 800415e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004160:	429a      	cmp	r2, r3
 8004162:	d107      	bne.n	8004174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004170:	429a      	cmp	r2, r3
 8004172:	d001      	beq.n	8004178 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e000      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40023800 	.word	0x40023800

08004188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e0cc      	b.n	8004336 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800419c:	4b68      	ldr	r3, [pc, #416]	@ (8004340 <HAL_RCC_ClockConfig+0x1b8>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d90c      	bls.n	80041c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041aa:	4b65      	ldr	r3, [pc, #404]	@ (8004340 <HAL_RCC_ClockConfig+0x1b8>)
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b2:	4b63      	ldr	r3, [pc, #396]	@ (8004340 <HAL_RCC_ClockConfig+0x1b8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d001      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e0b8      	b.n	8004336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d020      	beq.n	8004212 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d005      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041dc:	4b59      	ldr	r3, [pc, #356]	@ (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	4a58      	ldr	r2, [pc, #352]	@ (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80041e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0308 	and.w	r3, r3, #8
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d005      	beq.n	8004200 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041f4:	4b53      	ldr	r3, [pc, #332]	@ (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	4a52      	ldr	r2, [pc, #328]	@ (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80041fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004200:	4b50      	ldr	r3, [pc, #320]	@ (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	494d      	ldr	r1, [pc, #308]	@ (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	4313      	orrs	r3, r2
 8004210:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d044      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d107      	bne.n	8004236 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004226:	4b47      	ldr	r3, [pc, #284]	@ (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d119      	bne.n	8004266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e07f      	b.n	8004336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b02      	cmp	r3, #2
 800423c:	d003      	beq.n	8004246 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004242:	2b03      	cmp	r3, #3
 8004244:	d107      	bne.n	8004256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004246:	4b3f      	ldr	r3, [pc, #252]	@ (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d109      	bne.n	8004266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e06f      	b.n	8004336 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004256:	4b3b      	ldr	r3, [pc, #236]	@ (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e067      	b.n	8004336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004266:	4b37      	ldr	r3, [pc, #220]	@ (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f023 0203 	bic.w	r2, r3, #3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	4934      	ldr	r1, [pc, #208]	@ (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 8004274:	4313      	orrs	r3, r2
 8004276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004278:	f7fc fee0 	bl	800103c <HAL_GetTick>
 800427c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800427e:	e00a      	b.n	8004296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004280:	f7fc fedc 	bl	800103c <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800428e:	4293      	cmp	r3, r2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e04f      	b.n	8004336 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004296:	4b2b      	ldr	r3, [pc, #172]	@ (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 020c 	and.w	r2, r3, #12
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d1eb      	bne.n	8004280 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042a8:	4b25      	ldr	r3, [pc, #148]	@ (8004340 <HAL_RCC_ClockConfig+0x1b8>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d20c      	bcs.n	80042d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b6:	4b22      	ldr	r3, [pc, #136]	@ (8004340 <HAL_RCC_ClockConfig+0x1b8>)
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042be:	4b20      	ldr	r3, [pc, #128]	@ (8004340 <HAL_RCC_ClockConfig+0x1b8>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d001      	beq.n	80042d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e032      	b.n	8004336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d008      	beq.n	80042ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042dc:	4b19      	ldr	r3, [pc, #100]	@ (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	4916      	ldr	r1, [pc, #88]	@ (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d009      	beq.n	800430e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042fa:	4b12      	ldr	r3, [pc, #72]	@ (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	490e      	ldr	r1, [pc, #56]	@ (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	4313      	orrs	r3, r2
 800430c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800430e:	f000 f821 	bl	8004354 <HAL_RCC_GetSysClockFreq>
 8004312:	4602      	mov	r2, r0
 8004314:	4b0b      	ldr	r3, [pc, #44]	@ (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	091b      	lsrs	r3, r3, #4
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	490a      	ldr	r1, [pc, #40]	@ (8004348 <HAL_RCC_ClockConfig+0x1c0>)
 8004320:	5ccb      	ldrb	r3, [r1, r3]
 8004322:	fa22 f303 	lsr.w	r3, r2, r3
 8004326:	4a09      	ldr	r2, [pc, #36]	@ (800434c <HAL_RCC_ClockConfig+0x1c4>)
 8004328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800432a:	4b09      	ldr	r3, [pc, #36]	@ (8004350 <HAL_RCC_ClockConfig+0x1c8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f7fc fd6e 	bl	8000e10 <HAL_InitTick>

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40023c00 	.word	0x40023c00
 8004344:	40023800 	.word	0x40023800
 8004348:	0800823c 	.word	0x0800823c
 800434c:	20000010 	.word	0x20000010
 8004350:	20000014 	.word	0x20000014

08004354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004358:	b094      	sub	sp, #80	@ 0x50
 800435a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004360:	2300      	movs	r3, #0
 8004362:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004364:	2300      	movs	r3, #0
 8004366:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800436c:	4b79      	ldr	r3, [pc, #484]	@ (8004554 <HAL_RCC_GetSysClockFreq+0x200>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 030c 	and.w	r3, r3, #12
 8004374:	2b08      	cmp	r3, #8
 8004376:	d00d      	beq.n	8004394 <HAL_RCC_GetSysClockFreq+0x40>
 8004378:	2b08      	cmp	r3, #8
 800437a:	f200 80e1 	bhi.w	8004540 <HAL_RCC_GetSysClockFreq+0x1ec>
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <HAL_RCC_GetSysClockFreq+0x34>
 8004382:	2b04      	cmp	r3, #4
 8004384:	d003      	beq.n	800438e <HAL_RCC_GetSysClockFreq+0x3a>
 8004386:	e0db      	b.n	8004540 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004388:	4b73      	ldr	r3, [pc, #460]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x204>)
 800438a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800438c:	e0db      	b.n	8004546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800438e:	4b73      	ldr	r3, [pc, #460]	@ (800455c <HAL_RCC_GetSysClockFreq+0x208>)
 8004390:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004392:	e0d8      	b.n	8004546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004394:	4b6f      	ldr	r3, [pc, #444]	@ (8004554 <HAL_RCC_GetSysClockFreq+0x200>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800439c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800439e:	4b6d      	ldr	r3, [pc, #436]	@ (8004554 <HAL_RCC_GetSysClockFreq+0x200>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d063      	beq.n	8004472 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004554 <HAL_RCC_GetSysClockFreq+0x200>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	099b      	lsrs	r3, r3, #6
 80043b0:	2200      	movs	r2, #0
 80043b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80043b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80043be:	2300      	movs	r3, #0
 80043c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80043c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80043c6:	4622      	mov	r2, r4
 80043c8:	462b      	mov	r3, r5
 80043ca:	f04f 0000 	mov.w	r0, #0
 80043ce:	f04f 0100 	mov.w	r1, #0
 80043d2:	0159      	lsls	r1, r3, #5
 80043d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043d8:	0150      	lsls	r0, r2, #5
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4621      	mov	r1, r4
 80043e0:	1a51      	subs	r1, r2, r1
 80043e2:	6139      	str	r1, [r7, #16]
 80043e4:	4629      	mov	r1, r5
 80043e6:	eb63 0301 	sbc.w	r3, r3, r1
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043f8:	4659      	mov	r1, fp
 80043fa:	018b      	lsls	r3, r1, #6
 80043fc:	4651      	mov	r1, sl
 80043fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004402:	4651      	mov	r1, sl
 8004404:	018a      	lsls	r2, r1, #6
 8004406:	4651      	mov	r1, sl
 8004408:	ebb2 0801 	subs.w	r8, r2, r1
 800440c:	4659      	mov	r1, fp
 800440e:	eb63 0901 	sbc.w	r9, r3, r1
 8004412:	f04f 0200 	mov.w	r2, #0
 8004416:	f04f 0300 	mov.w	r3, #0
 800441a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800441e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004422:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004426:	4690      	mov	r8, r2
 8004428:	4699      	mov	r9, r3
 800442a:	4623      	mov	r3, r4
 800442c:	eb18 0303 	adds.w	r3, r8, r3
 8004430:	60bb      	str	r3, [r7, #8]
 8004432:	462b      	mov	r3, r5
 8004434:	eb49 0303 	adc.w	r3, r9, r3
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	f04f 0300 	mov.w	r3, #0
 8004442:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004446:	4629      	mov	r1, r5
 8004448:	024b      	lsls	r3, r1, #9
 800444a:	4621      	mov	r1, r4
 800444c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004450:	4621      	mov	r1, r4
 8004452:	024a      	lsls	r2, r1, #9
 8004454:	4610      	mov	r0, r2
 8004456:	4619      	mov	r1, r3
 8004458:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800445a:	2200      	movs	r2, #0
 800445c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800445e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004460:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004464:	f7fb feb4 	bl	80001d0 <__aeabi_uldivmod>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	4613      	mov	r3, r2
 800446e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004470:	e058      	b.n	8004524 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004472:	4b38      	ldr	r3, [pc, #224]	@ (8004554 <HAL_RCC_GetSysClockFreq+0x200>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	099b      	lsrs	r3, r3, #6
 8004478:	2200      	movs	r2, #0
 800447a:	4618      	mov	r0, r3
 800447c:	4611      	mov	r1, r2
 800447e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004482:	623b      	str	r3, [r7, #32]
 8004484:	2300      	movs	r3, #0
 8004486:	627b      	str	r3, [r7, #36]	@ 0x24
 8004488:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800448c:	4642      	mov	r2, r8
 800448e:	464b      	mov	r3, r9
 8004490:	f04f 0000 	mov.w	r0, #0
 8004494:	f04f 0100 	mov.w	r1, #0
 8004498:	0159      	lsls	r1, r3, #5
 800449a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800449e:	0150      	lsls	r0, r2, #5
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4641      	mov	r1, r8
 80044a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80044aa:	4649      	mov	r1, r9
 80044ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	f04f 0300 	mov.w	r3, #0
 80044b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044c4:	ebb2 040a 	subs.w	r4, r2, sl
 80044c8:	eb63 050b 	sbc.w	r5, r3, fp
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	00eb      	lsls	r3, r5, #3
 80044d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044da:	00e2      	lsls	r2, r4, #3
 80044dc:	4614      	mov	r4, r2
 80044de:	461d      	mov	r5, r3
 80044e0:	4643      	mov	r3, r8
 80044e2:	18e3      	adds	r3, r4, r3
 80044e4:	603b      	str	r3, [r7, #0]
 80044e6:	464b      	mov	r3, r9
 80044e8:	eb45 0303 	adc.w	r3, r5, r3
 80044ec:	607b      	str	r3, [r7, #4]
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	f04f 0300 	mov.w	r3, #0
 80044f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044fa:	4629      	mov	r1, r5
 80044fc:	028b      	lsls	r3, r1, #10
 80044fe:	4621      	mov	r1, r4
 8004500:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004504:	4621      	mov	r1, r4
 8004506:	028a      	lsls	r2, r1, #10
 8004508:	4610      	mov	r0, r2
 800450a:	4619      	mov	r1, r3
 800450c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800450e:	2200      	movs	r2, #0
 8004510:	61bb      	str	r3, [r7, #24]
 8004512:	61fa      	str	r2, [r7, #28]
 8004514:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004518:	f7fb fe5a 	bl	80001d0 <__aeabi_uldivmod>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4613      	mov	r3, r2
 8004522:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004524:	4b0b      	ldr	r3, [pc, #44]	@ (8004554 <HAL_RCC_GetSysClockFreq+0x200>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	0c1b      	lsrs	r3, r3, #16
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	3301      	adds	r3, #1
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004534:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004538:	fbb2 f3f3 	udiv	r3, r2, r3
 800453c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800453e:	e002      	b.n	8004546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004540:	4b05      	ldr	r3, [pc, #20]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x204>)
 8004542:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004546:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004548:	4618      	mov	r0, r3
 800454a:	3750      	adds	r7, #80	@ 0x50
 800454c:	46bd      	mov	sp, r7
 800454e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004552:	bf00      	nop
 8004554:	40023800 	.word	0x40023800
 8004558:	00f42400 	.word	0x00f42400
 800455c:	007a1200 	.word	0x007a1200

08004560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004564:	4b03      	ldr	r3, [pc, #12]	@ (8004574 <HAL_RCC_GetHCLKFreq+0x14>)
 8004566:	681b      	ldr	r3, [r3, #0]
}
 8004568:	4618      	mov	r0, r3
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	20000010 	.word	0x20000010

08004578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800457c:	f7ff fff0 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 8004580:	4602      	mov	r2, r0
 8004582:	4b05      	ldr	r3, [pc, #20]	@ (8004598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	0a9b      	lsrs	r3, r3, #10
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	4903      	ldr	r1, [pc, #12]	@ (800459c <HAL_RCC_GetPCLK1Freq+0x24>)
 800458e:	5ccb      	ldrb	r3, [r1, r3]
 8004590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004594:	4618      	mov	r0, r3
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40023800 	.word	0x40023800
 800459c:	0800824c 	.word	0x0800824c

080045a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045a4:	f7ff ffdc 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 80045a8:	4602      	mov	r2, r0
 80045aa:	4b05      	ldr	r3, [pc, #20]	@ (80045c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	0b5b      	lsrs	r3, r3, #13
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	4903      	ldr	r1, [pc, #12]	@ (80045c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045b6:	5ccb      	ldrb	r3, [r1, r3]
 80045b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045bc:	4618      	mov	r0, r3
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40023800 	.word	0x40023800
 80045c4:	0800824c 	.word	0x0800824c

080045c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	220f      	movs	r2, #15
 80045d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045d8:	4b12      	ldr	r3, [pc, #72]	@ (8004624 <HAL_RCC_GetClockConfig+0x5c>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 0203 	and.w	r2, r3, #3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045e4:	4b0f      	ldr	r3, [pc, #60]	@ (8004624 <HAL_RCC_GetClockConfig+0x5c>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80045f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004624 <HAL_RCC_GetClockConfig+0x5c>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80045fc:	4b09      	ldr	r3, [pc, #36]	@ (8004624 <HAL_RCC_GetClockConfig+0x5c>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	08db      	lsrs	r3, r3, #3
 8004602:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800460a:	4b07      	ldr	r3, [pc, #28]	@ (8004628 <HAL_RCC_GetClockConfig+0x60>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0207 	and.w	r2, r3, #7
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	601a      	str	r2, [r3, #0]
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	40023800 	.word	0x40023800
 8004628:	40023c00 	.word	0x40023c00

0800462c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d105      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004650:	2b00      	cmp	r3, #0
 8004652:	d035      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004654:	4b62      	ldr	r3, [pc, #392]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800465a:	f7fc fcef 	bl	800103c <HAL_GetTick>
 800465e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004660:	e008      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004662:	f7fc fceb 	bl	800103c <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e0b0      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004674:	4b5b      	ldr	r3, [pc, #364]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1f0      	bne.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	019a      	lsls	r2, r3, #6
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	071b      	lsls	r3, r3, #28
 800468c:	4955      	ldr	r1, [pc, #340]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004694:	4b52      	ldr	r3, [pc, #328]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004696:	2201      	movs	r2, #1
 8004698:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800469a:	f7fc fccf 	bl	800103c <HAL_GetTick>
 800469e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046a0:	e008      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046a2:	f7fc fccb 	bl	800103c <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e090      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046b4:	4b4b      	ldr	r3, [pc, #300]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0f0      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 8083 	beq.w	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046ce:	2300      	movs	r3, #0
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	4b44      	ldr	r3, [pc, #272]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d6:	4a43      	ldr	r2, [pc, #268]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80046de:	4b41      	ldr	r3, [pc, #260]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80046ea:	4b3f      	ldr	r3, [pc, #252]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a3e      	ldr	r2, [pc, #248]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046f4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046f6:	f7fc fca1 	bl	800103c <HAL_GetTick>
 80046fa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046fc:	e008      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80046fe:	f7fc fc9d 	bl	800103c <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e062      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004710:	4b35      	ldr	r3, [pc, #212]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0f0      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800471c:	4b31      	ldr	r3, [pc, #196]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800471e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004720:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004724:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d02f      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	429a      	cmp	r2, r3
 8004738:	d028      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800473a:	4b2a      	ldr	r3, [pc, #168]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800473c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800473e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004742:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004744:	4b29      	ldr	r3, [pc, #164]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004746:	2201      	movs	r2, #1
 8004748:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800474a:	4b28      	ldr	r3, [pc, #160]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004750:	4a24      	ldr	r2, [pc, #144]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004756:	4b23      	ldr	r3, [pc, #140]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b01      	cmp	r3, #1
 8004760:	d114      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004762:	f7fc fc6b 	bl	800103c <HAL_GetTick>
 8004766:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004768:	e00a      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800476a:	f7fc fc67 	bl	800103c <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004778:	4293      	cmp	r3, r2
 800477a:	d901      	bls.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e02a      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004780:	4b18      	ldr	r3, [pc, #96]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0ee      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004794:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004798:	d10d      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800479a:	4b12      	ldr	r3, [pc, #72]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80047aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047ae:	490d      	ldr	r1, [pc, #52]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	608b      	str	r3, [r1, #8]
 80047b4:	e005      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80047b6:	4b0b      	ldr	r3, [pc, #44]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	4a0a      	ldr	r2, [pc, #40]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047bc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80047c0:	6093      	str	r3, [r2, #8]
 80047c2:	4b08      	ldr	r3, [pc, #32]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047c4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ce:	4905      	ldr	r1, [pc, #20]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	42470068 	.word	0x42470068
 80047e4:	40023800 	.word	0x40023800
 80047e8:	40007000 	.word	0x40007000
 80047ec:	42470e40 	.word	0x42470e40

080047f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b087      	sub	sp, #28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80047fc:	2300      	movs	r3, #0
 80047fe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d13f      	bne.n	800488e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800480e:	4b24      	ldr	r3, [pc, #144]	@ (80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d006      	beq.n	800482c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004824:	d12f      	bne.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004826:	4b1f      	ldr	r3, [pc, #124]	@ (80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004828:	617b      	str	r3, [r7, #20]
          break;
 800482a:	e02f      	b.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800482c:	4b1c      	ldr	r3, [pc, #112]	@ (80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004834:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004838:	d108      	bne.n	800484c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800483a:	4b19      	ldr	r3, [pc, #100]	@ (80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004842:	4a19      	ldr	r2, [pc, #100]	@ (80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004844:	fbb2 f3f3 	udiv	r3, r2, r3
 8004848:	613b      	str	r3, [r7, #16]
 800484a:	e007      	b.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800484c:	4b14      	ldr	r3, [pc, #80]	@ (80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004854:	4a15      	ldr	r2, [pc, #84]	@ (80048ac <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004856:	fbb2 f3f3 	udiv	r3, r2, r3
 800485a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800485c:	4b10      	ldr	r3, [pc, #64]	@ (80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800485e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004862:	099b      	lsrs	r3, r3, #6
 8004864:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	fb02 f303 	mul.w	r3, r2, r3
 800486e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004870:	4b0b      	ldr	r3, [pc, #44]	@ (80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004872:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004876:	0f1b      	lsrs	r3, r3, #28
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004882:	617b      	str	r3, [r7, #20]
          break;
 8004884:	e002      	b.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	617b      	str	r3, [r7, #20]
          break;
 800488a:	bf00      	nop
        }
      }
      break;
 800488c:	e000      	b.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 800488e:	bf00      	nop
    }
  }
  return frequency;
 8004890:	697b      	ldr	r3, [r7, #20]
}
 8004892:	4618      	mov	r0, r3
 8004894:	371c      	adds	r7, #28
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40023800 	.word	0x40023800
 80048a4:	00bb8000 	.word	0x00bb8000
 80048a8:	007a1200 	.word	0x007a1200
 80048ac:	00f42400 	.word	0x00f42400

080048b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e07b      	b.n	80049ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d108      	bne.n	80048dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048d2:	d009      	beq.n	80048e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	61da      	str	r2, [r3, #28]
 80048da:	e005      	b.n	80048e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fc fa1a 	bl	8000d3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800491e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	431a      	orrs	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800496c:	ea42 0103 	orr.w	r1, r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004974:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	430a      	orrs	r2, r1
 800497e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	0c1b      	lsrs	r3, r3, #16
 8004986:	f003 0104 	and.w	r1, r3, #4
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498e:	f003 0210 	and.w	r2, r3, #16
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	69da      	ldr	r2, [r3, #28]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b082      	sub	sp, #8
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e041      	b.n	8004a58 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d106      	bne.n	80049ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7fc f9ef 	bl	8000dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2202      	movs	r2, #2
 80049f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	3304      	adds	r3, #4
 80049fe:	4619      	mov	r1, r3
 8004a00:	4610      	mov	r0, r2
 8004a02:	f000 f9b5 	bl	8004d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d001      	beq.n	8004a78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e04e      	b.n	8004b16 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0201 	orr.w	r2, r2, #1
 8004a8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a23      	ldr	r2, [pc, #140]	@ (8004b24 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d022      	beq.n	8004ae0 <HAL_TIM_Base_Start_IT+0x80>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aa2:	d01d      	beq.n	8004ae0 <HAL_TIM_Base_Start_IT+0x80>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a1f      	ldr	r2, [pc, #124]	@ (8004b28 <HAL_TIM_Base_Start_IT+0xc8>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d018      	beq.n	8004ae0 <HAL_TIM_Base_Start_IT+0x80>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a1e      	ldr	r2, [pc, #120]	@ (8004b2c <HAL_TIM_Base_Start_IT+0xcc>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d013      	beq.n	8004ae0 <HAL_TIM_Base_Start_IT+0x80>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a1c      	ldr	r2, [pc, #112]	@ (8004b30 <HAL_TIM_Base_Start_IT+0xd0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d00e      	beq.n	8004ae0 <HAL_TIM_Base_Start_IT+0x80>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8004b34 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d009      	beq.n	8004ae0 <HAL_TIM_Base_Start_IT+0x80>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a19      	ldr	r2, [pc, #100]	@ (8004b38 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d004      	beq.n	8004ae0 <HAL_TIM_Base_Start_IT+0x80>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a18      	ldr	r2, [pc, #96]	@ (8004b3c <HAL_TIM_Base_Start_IT+0xdc>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d111      	bne.n	8004b04 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2b06      	cmp	r3, #6
 8004af0:	d010      	beq.n	8004b14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f042 0201 	orr.w	r2, r2, #1
 8004b00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b02:	e007      	b.n	8004b14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0201 	orr.w	r2, r2, #1
 8004b12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	40010000 	.word	0x40010000
 8004b28:	40000400 	.word	0x40000400
 8004b2c:	40000800 	.word	0x40000800
 8004b30:	40000c00 	.word	0x40000c00
 8004b34:	40010400 	.word	0x40010400
 8004b38:	40014000 	.word	0x40014000
 8004b3c:	40001800 	.word	0x40001800

08004b40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d020      	beq.n	8004ba4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d01b      	beq.n	8004ba4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f06f 0202 	mvn.w	r2, #2
 8004b74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f8d2 	bl	8004d34 <HAL_TIM_IC_CaptureCallback>
 8004b90:	e005      	b.n	8004b9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f8c4 	bl	8004d20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f8d5 	bl	8004d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d020      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d01b      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0204 	mvn.w	r2, #4
 8004bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f8ac 	bl	8004d34 <HAL_TIM_IC_CaptureCallback>
 8004bdc:	e005      	b.n	8004bea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f89e 	bl	8004d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f8af 	bl	8004d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f003 0308 	and.w	r3, r3, #8
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d020      	beq.n	8004c3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f003 0308 	and.w	r3, r3, #8
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d01b      	beq.n	8004c3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f06f 0208 	mvn.w	r2, #8
 8004c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2204      	movs	r2, #4
 8004c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f886 	bl	8004d34 <HAL_TIM_IC_CaptureCallback>
 8004c28:	e005      	b.n	8004c36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f878 	bl	8004d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f889 	bl	8004d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f003 0310 	and.w	r3, r3, #16
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d020      	beq.n	8004c88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d01b      	beq.n	8004c88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f06f 0210 	mvn.w	r2, #16
 8004c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2208      	movs	r2, #8
 8004c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f860 	bl	8004d34 <HAL_TIM_IC_CaptureCallback>
 8004c74:	e005      	b.n	8004c82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f852 	bl	8004d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f863 	bl	8004d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00c      	beq.n	8004cac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d007      	beq.n	8004cac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f06f 0201 	mvn.w	r2, #1
 8004ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fb ff3c 	bl	8000b24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00c      	beq.n	8004cd0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d007      	beq.n	8004cd0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f906 	bl	8004edc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00c      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d007      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f834 	bl	8004d5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f003 0320 	and.w	r3, r3, #32
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00c      	beq.n	8004d18 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f003 0320 	and.w	r3, r3, #32
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d007      	beq.n	8004d18 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0220 	mvn.w	r2, #32
 8004d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f8d8 	bl	8004ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d18:	bf00      	nop
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a46      	ldr	r2, [pc, #280]	@ (8004e9c <TIM_Base_SetConfig+0x12c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d013      	beq.n	8004db0 <TIM_Base_SetConfig+0x40>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d8e:	d00f      	beq.n	8004db0 <TIM_Base_SetConfig+0x40>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a43      	ldr	r2, [pc, #268]	@ (8004ea0 <TIM_Base_SetConfig+0x130>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d00b      	beq.n	8004db0 <TIM_Base_SetConfig+0x40>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a42      	ldr	r2, [pc, #264]	@ (8004ea4 <TIM_Base_SetConfig+0x134>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d007      	beq.n	8004db0 <TIM_Base_SetConfig+0x40>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a41      	ldr	r2, [pc, #260]	@ (8004ea8 <TIM_Base_SetConfig+0x138>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d003      	beq.n	8004db0 <TIM_Base_SetConfig+0x40>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a40      	ldr	r2, [pc, #256]	@ (8004eac <TIM_Base_SetConfig+0x13c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d108      	bne.n	8004dc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a35      	ldr	r2, [pc, #212]	@ (8004e9c <TIM_Base_SetConfig+0x12c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d02b      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dd0:	d027      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a32      	ldr	r2, [pc, #200]	@ (8004ea0 <TIM_Base_SetConfig+0x130>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d023      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a31      	ldr	r2, [pc, #196]	@ (8004ea4 <TIM_Base_SetConfig+0x134>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d01f      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a30      	ldr	r2, [pc, #192]	@ (8004ea8 <TIM_Base_SetConfig+0x138>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d01b      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a2f      	ldr	r2, [pc, #188]	@ (8004eac <TIM_Base_SetConfig+0x13c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d017      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a2e      	ldr	r2, [pc, #184]	@ (8004eb0 <TIM_Base_SetConfig+0x140>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d013      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a2d      	ldr	r2, [pc, #180]	@ (8004eb4 <TIM_Base_SetConfig+0x144>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d00f      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a2c      	ldr	r2, [pc, #176]	@ (8004eb8 <TIM_Base_SetConfig+0x148>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d00b      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a2b      	ldr	r2, [pc, #172]	@ (8004ebc <TIM_Base_SetConfig+0x14c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d007      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a2a      	ldr	r2, [pc, #168]	@ (8004ec0 <TIM_Base_SetConfig+0x150>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d003      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a29      	ldr	r2, [pc, #164]	@ (8004ec4 <TIM_Base_SetConfig+0x154>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d108      	bne.n	8004e34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a10      	ldr	r2, [pc, #64]	@ (8004e9c <TIM_Base_SetConfig+0x12c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <TIM_Base_SetConfig+0xf8>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a12      	ldr	r2, [pc, #72]	@ (8004eac <TIM_Base_SetConfig+0x13c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d103      	bne.n	8004e70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	691a      	ldr	r2, [r3, #16]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d105      	bne.n	8004e8e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	f023 0201 	bic.w	r2, r3, #1
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	611a      	str	r2, [r3, #16]
  }
}
 8004e8e:	bf00      	nop
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	40010000 	.word	0x40010000
 8004ea0:	40000400 	.word	0x40000400
 8004ea4:	40000800 	.word	0x40000800
 8004ea8:	40000c00 	.word	0x40000c00
 8004eac:	40010400 	.word	0x40010400
 8004eb0:	40014000 	.word	0x40014000
 8004eb4:	40014400 	.word	0x40014400
 8004eb8:	40014800 	.word	0x40014800
 8004ebc:	40001800 	.word	0x40001800
 8004ec0:	40001c00 	.word	0x40001c00
 8004ec4:	40002000 	.word	0x40002000

08004ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f043 0201 	orr.w	r2, r3, #1
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f023 0201 	bic.w	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	3301      	adds	r3, #1
 8004f46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f4e:	d901      	bls.n	8004f54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e01b      	b.n	8004f8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	daf2      	bge.n	8004f42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	019b      	lsls	r3, r3, #6
 8004f64:	f043 0220 	orr.w	r2, r3, #32
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f78:	d901      	bls.n	8004f7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e006      	b.n	8004f8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b20      	cmp	r3, #32
 8004f88:	d0f0      	beq.n	8004f6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fb0:	d901      	bls.n	8004fb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e018      	b.n	8004fe8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	daf2      	bge.n	8004fa4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2210      	movs	r2, #16
 8004fc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fd4:	d901      	bls.n	8004fda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e006      	b.n	8004fe8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f003 0310 	and.w	r3, r3, #16
 8004fe2:	2b10      	cmp	r3, #16
 8004fe4:	d0f0      	beq.n	8004fc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b08b      	sub	sp, #44	@ 0x2c
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	4613      	mov	r3, r2
 8005000:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800500a:	88fb      	ldrh	r3, [r7, #6]
 800500c:	089b      	lsrs	r3, r3, #2
 800500e:	b29b      	uxth	r3, r3
 8005010:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005012:	88fb      	ldrh	r3, [r7, #6]
 8005014:	f003 0303 	and.w	r3, r3, #3
 8005018:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800501a:	2300      	movs	r3, #0
 800501c:	623b      	str	r3, [r7, #32]
 800501e:	e014      	b.n	800504a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502a:	601a      	str	r2, [r3, #0]
    pDest++;
 800502c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502e:	3301      	adds	r3, #1
 8005030:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005034:	3301      	adds	r3, #1
 8005036:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503a:	3301      	adds	r3, #1
 800503c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800503e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005040:	3301      	adds	r3, #1
 8005042:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	3301      	adds	r3, #1
 8005048:	623b      	str	r3, [r7, #32]
 800504a:	6a3a      	ldr	r2, [r7, #32]
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	429a      	cmp	r2, r3
 8005050:	d3e6      	bcc.n	8005020 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005052:	8bfb      	ldrh	r3, [r7, #30]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d01e      	beq.n	8005096 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005062:	461a      	mov	r2, r3
 8005064:	f107 0310 	add.w	r3, r7, #16
 8005068:	6812      	ldr	r2, [r2, #0]
 800506a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	b2db      	uxtb	r3, r3
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	fa22 f303 	lsr.w	r3, r2, r3
 8005078:	b2da      	uxtb	r2, r3
 800507a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507c:	701a      	strb	r2, [r3, #0]
      i++;
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	3301      	adds	r3, #1
 8005082:	623b      	str	r3, [r7, #32]
      pDest++;
 8005084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005086:	3301      	adds	r3, #1
 8005088:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800508a:	8bfb      	ldrh	r3, [r7, #30]
 800508c:	3b01      	subs	r3, #1
 800508e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005090:	8bfb      	ldrh	r3, [r7, #30]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1ea      	bne.n	800506c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005098:	4618      	mov	r0, r3
 800509a:	372c      	adds	r7, #44	@ 0x2c
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	4013      	ands	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80050bc:	68fb      	ldr	r3, [r7, #12]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b085      	sub	sp, #20
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	460b      	mov	r3, r1
 80050d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80050da:	78fb      	ldrb	r3, [r7, #3]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80050ea:	78fb      	ldrb	r3, [r7, #3]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	4013      	ands	r3, r2
 80050fc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80050fe:	68bb      	ldr	r3, [r7, #8]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	f003 0301 	and.w	r3, r3, #1
}
 800511c:	4618      	mov	r0, r3
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	460b      	mov	r3, r1
 8005132:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005146:	f023 0303 	bic.w	r3, r3, #3
 800514a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	78fb      	ldrb	r3, [r7, #3]
 8005156:	f003 0303 	and.w	r3, r3, #3
 800515a:	68f9      	ldr	r1, [r7, #12]
 800515c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005160:	4313      	orrs	r3, r2
 8005162:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005164:	78fb      	ldrb	r3, [r7, #3]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d107      	bne.n	800517a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005170:	461a      	mov	r2, r3
 8005172:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005176:	6053      	str	r3, [r2, #4]
 8005178:	e00c      	b.n	8005194 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800517a:	78fb      	ldrb	r3, [r7, #3]
 800517c:	2b02      	cmp	r3, #2
 800517e:	d107      	bne.n	8005190 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005186:	461a      	mov	r2, r3
 8005188:	f241 7370 	movw	r3, #6000	@ 0x1770
 800518c:	6053      	str	r3, [r2, #4]
 800518e:	e001      	b.n	8005194 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e000      	b.n	8005196 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b085      	sub	sp, #20
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	b29b      	uxth	r3, r3
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3714      	adds	r7, #20
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b089      	sub	sp, #36	@ 0x24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	460b      	mov	r3, r1
 80051ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80051d4:	78fb      	ldrb	r3, [r7, #3]
 80051d6:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	0c9b      	lsrs	r3, r3, #18
 80051ec:	f003 0303 	and.w	r3, r3, #3
 80051f0:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	0fdb      	lsrs	r3, r3, #31
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	4413      	add	r3, r2
 8005210:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	0fdb      	lsrs	r3, r3, #31
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f003 0320 	and.w	r3, r3, #32
 8005226:	2b20      	cmp	r3, #32
 8005228:	d10d      	bne.n	8005246 <USB_HC_Halt+0x82>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10a      	bne.n	8005246 <USB_HC_Halt+0x82>
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d005      	beq.n	8005242 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d002      	beq.n	8005242 <USB_HC_Halt+0x7e>
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2b03      	cmp	r3, #3
 8005240:	d101      	bne.n	8005246 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005242:	2300      	movs	r3, #0
 8005244:	e0d8      	b.n	80053f8 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <USB_HC_Halt+0x8e>
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	2b02      	cmp	r3, #2
 8005250:	d173      	bne.n	800533a <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	4413      	add	r3, r2
 800525a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	0151      	lsls	r1, r2, #5
 8005264:	69fa      	ldr	r2, [r7, #28]
 8005266:	440a      	add	r2, r1
 8005268:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800526c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005270:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	d14a      	bne.n	8005314 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005282:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d133      	bne.n	80052f2 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	4413      	add	r3, r2
 8005292:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	0151      	lsls	r1, r2, #5
 800529c:	69fa      	ldr	r2, [r7, #28]
 800529e:	440a      	add	r2, r1
 80052a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80052a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80052a8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	0151      	lsls	r1, r2, #5
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	440a      	add	r2, r1
 80052c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80052c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80052c8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	3301      	adds	r3, #1
 80052ce:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80052d6:	d82e      	bhi.n	8005336 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052ee:	d0ec      	beq.n	80052ca <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80052f0:	e081      	b.n	80053f6 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	0151      	lsls	r1, r2, #5
 8005304:	69fa      	ldr	r2, [r7, #28]
 8005306:	440a      	add	r2, r1
 8005308:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800530c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005310:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005312:	e070      	b.n	80053f6 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	4413      	add	r3, r2
 800531c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	0151      	lsls	r1, r2, #5
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	440a      	add	r2, r1
 800532a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800532e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005332:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005334:	e05f      	b.n	80053f6 <USB_HC_Halt+0x232>
            break;
 8005336:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005338:	e05d      	b.n	80053f6 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	4413      	add	r3, r2
 8005342:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	0151      	lsls	r1, r2, #5
 800534c:	69fa      	ldr	r2, [r7, #28]
 800534e:	440a      	add	r2, r1
 8005350:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005354:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005358:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d133      	bne.n	80053d2 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	4413      	add	r3, r2
 8005372:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	0151      	lsls	r1, r2, #5
 800537c:	69fa      	ldr	r2, [r7, #28]
 800537e:	440a      	add	r2, r1
 8005380:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005384:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005388:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	015a      	lsls	r2, r3, #5
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	4413      	add	r3, r2
 8005392:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	0151      	lsls	r1, r2, #5
 800539c:	69fa      	ldr	r2, [r7, #28]
 800539e:	440a      	add	r2, r1
 80053a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80053a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80053a8:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	3301      	adds	r3, #1
 80053ae:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80053b6:	d81d      	bhi.n	80053f4 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053ce:	d0ec      	beq.n	80053aa <USB_HC_Halt+0x1e6>
 80053d0:	e011      	b.n	80053f6 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	0151      	lsls	r1, r2, #5
 80053e4:	69fa      	ldr	r2, [r7, #28]
 80053e6:	440a      	add	r2, r1
 80053e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80053ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	e000      	b.n	80053f6 <USB_HC_Halt+0x232>
          break;
 80053f4:	bf00      	nop
    }
  }

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3724      	adds	r7, #36	@ 0x24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b088      	sub	sp, #32
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800540c:	2300      	movs	r3, #0
 800540e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f7ff fd7a 	bl	8004f12 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800541e:	2110      	movs	r1, #16
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7ff fd87 	bl	8004f34 <USB_FlushTxFifo>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7ff fdb1 	bl	8004f98 <USB_FlushRxFifo>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d001      	beq.n	8005440 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005440:	2300      	movs	r3, #0
 8005442:	61bb      	str	r3, [r7, #24]
 8005444:	e01f      	b.n	8005486 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	4413      	add	r3, r2
 800544e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800545c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005464:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800546c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	4413      	add	r3, r2
 8005476:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800547a:	461a      	mov	r2, r3
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	3301      	adds	r3, #1
 8005484:	61bb      	str	r3, [r7, #24]
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	2b0f      	cmp	r3, #15
 800548a:	d9dc      	bls.n	8005446 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800548c:	2300      	movs	r3, #0
 800548e:	61bb      	str	r3, [r7, #24]
 8005490:	e034      	b.n	80054fc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	4413      	add	r3, r2
 800549a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054a8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80054b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80054b8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054c6:	461a      	mov	r2, r3
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	3301      	adds	r3, #1
 80054d0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80054d8:	d80c      	bhi.n	80054f4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054f0:	d0ec      	beq.n	80054cc <USB_StopHost+0xc8>
 80054f2:	e000      	b.n	80054f6 <USB_StopHost+0xf2>
        break;
 80054f4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	3301      	adds	r3, #1
 80054fa:	61bb      	str	r3, [r7, #24]
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	2b0f      	cmp	r3, #15
 8005500:	d9c7      	bls.n	8005492 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005508:	461a      	mov	r2, r3
 800550a:	f04f 33ff 	mov.w	r3, #4294967295
 800550e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f04f 32ff 	mov.w	r2, #4294967295
 8005516:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7ff fce9 	bl	8004ef0 <USB_EnableGlobalInt>

  return ret;
 800551e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3720      	adds	r7, #32
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f804 	bl	800554c <USBH_HandleSof>
}
 8005544:	bf00      	nop
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b0b      	cmp	r3, #11
 800555c:	d10a      	bne.n	8005574 <USBH_HandleSof+0x28>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005564:	2b00      	cmp	r3, #0
 8005566:	d005      	beq.n	8005574 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	4798      	blx	r3
  }
}
 8005574:	bf00      	nop
 8005576:	3708      	adds	r7, #8
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80055a0:	2200      	movs	r2, #0
 80055a2:	4619      	mov	r1, r3
 80055a4:	f000 f8ae 	bl	8005704 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80055a8:	bf00      	nop
}
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80055c0:	bf00      	nop
}
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8005600:	2200      	movs	r2, #0
 8005602:	4619      	mov	r1, r3
 8005604:	f000 f87e 	bl	8005704 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b082      	sub	sp, #8
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f002 fc98 	bl	8007f68 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	791b      	ldrb	r3, [r3, #4]
 800563c:	4619      	mov	r1, r3
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f830 	bl	80056a4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	795b      	ldrb	r3, [r3, #5]
 8005648:	4619      	mov	r1, r3
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f82a 	bl	80056a4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8005664:	2200      	movs	r2, #0
 8005666:	4619      	mov	r1, r3
 8005668:	f000 f84c 	bl	8005704 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b082      	sub	sp, #8
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8005692:	2200      	movs	r2, #0
 8005694:	4619      	mov	r1, r3
 8005696:	f000 f835 	bl	8005704 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3708      	adds	r7, #8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	460b      	mov	r3, r1
 80056ae:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80056b0:	78fb      	ldrb	r3, [r7, #3]
 80056b2:	2b0f      	cmp	r3, #15
 80056b4:	d80d      	bhi.n	80056d2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80056b6:	78fb      	ldrb	r3, [r7, #3]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	33e0      	adds	r3, #224	@ 0xe0
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	78fb      	ldrb	r3, [r7, #3]
 80056c4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80056c8:	6879      	ldr	r1, [r7, #4]
 80056ca:	33e0      	adds	r3, #224	@ 0xe0
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	440b      	add	r3, r1
 80056d0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056e6:	f3ef 8305 	mrs	r3, IPSR
 80056ea:	607b      	str	r3, [r7, #4]
  return(result);
 80056ec:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	bf14      	ite	ne
 80056f2:	2301      	movne	r3, #1
 80056f4:	2300      	moveq	r3, #0
 80056f6:	b2db      	uxtb	r3, r3
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005710:	2300      	movs	r3, #0
 8005712:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <osMessagePut+0x1e>
    ticks = 1;
 800571e:	2301      	movs	r3, #1
 8005720:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005722:	f7ff ffdd 	bl	80056e0 <inHandlerMode>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d018      	beq.n	800575e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800572c:	f107 0210 	add.w	r2, r7, #16
 8005730:	f107 0108 	add.w	r1, r7, #8
 8005734:	2300      	movs	r3, #0
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 fa9a 	bl	8005c70 <xQueueGenericSendFromISR>
 800573c:	4603      	mov	r3, r0
 800573e:	2b01      	cmp	r3, #1
 8005740:	d001      	beq.n	8005746 <osMessagePut+0x42>
      return osErrorOS;
 8005742:	23ff      	movs	r3, #255	@ 0xff
 8005744:	e018      	b.n	8005778 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d014      	beq.n	8005776 <osMessagePut+0x72>
 800574c:	4b0c      	ldr	r3, [pc, #48]	@ (8005780 <osMessagePut+0x7c>)
 800574e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	e00b      	b.n	8005776 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800575e:	f107 0108 	add.w	r1, r7, #8
 8005762:	2300      	movs	r3, #0
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 f980 	bl	8005a6c <xQueueGenericSend>
 800576c:	4603      	mov	r3, r0
 800576e:	2b01      	cmp	r3, #1
 8005770:	d001      	beq.n	8005776 <osMessagePut+0x72>
      return osErrorOS;
 8005772:	23ff      	movs	r3, #255	@ 0xff
 8005774:	e000      	b.n	8005778 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	e000ed04 	.word	0xe000ed04

08005784 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f103 0208 	add.w	r2, r3, #8
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f04f 32ff 	mov.w	r2, #4294967295
 800579c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f103 0208 	add.w	r2, r3, #8
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f103 0208 	add.w	r2, r3, #8
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057de:	b480      	push	{r7}
 80057e0:	b085      	sub	sp, #20
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	683a      	ldr	r2, [r7, #0]
 8005802:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	601a      	str	r2, [r3, #0]
}
 800581a:	bf00      	nop
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005826:	b480      	push	{r7}
 8005828:	b085      	sub	sp, #20
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
 800582e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583c:	d103      	bne.n	8005846 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	e00c      	b.n	8005860 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	3308      	adds	r3, #8
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	e002      	b.n	8005854 <vListInsert+0x2e>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	429a      	cmp	r2, r3
 800585e:	d2f6      	bcs.n	800584e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	683a      	ldr	r2, [r7, #0]
 800586e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	1c5a      	adds	r2, r3, #1
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	601a      	str	r2, [r3, #0]
}
 800588c:	bf00      	nop
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	6892      	ldr	r2, [r2, #8]
 80058ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6852      	ldr	r2, [r2, #4]
 80058b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d103      	bne.n	80058cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	1e5a      	subs	r2, r3, #1
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10b      	bne.n	8005918 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005904:	f383 8811 	msr	BASEPRI, r3
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005912:	bf00      	nop
 8005914:	bf00      	nop
 8005916:	e7fd      	b.n	8005914 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005918:	f001 ffbe 	bl	8007898 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005924:	68f9      	ldr	r1, [r7, #12]
 8005926:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005928:	fb01 f303 	mul.w	r3, r1, r3
 800592c:	441a      	add	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005948:	3b01      	subs	r3, #1
 800594a:	68f9      	ldr	r1, [r7, #12]
 800594c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800594e:	fb01 f303 	mul.w	r3, r1, r3
 8005952:	441a      	add	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	22ff      	movs	r2, #255	@ 0xff
 800595c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	22ff      	movs	r2, #255	@ 0xff
 8005964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d114      	bne.n	8005998 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d01a      	beq.n	80059ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	3310      	adds	r3, #16
 800597a:	4618      	mov	r0, r3
 800597c:	f001 f86c 	bl	8006a58 <xTaskRemoveFromEventList>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d012      	beq.n	80059ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005986:	4b0d      	ldr	r3, [pc, #52]	@ (80059bc <xQueueGenericReset+0xd0>)
 8005988:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	e009      	b.n	80059ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	3310      	adds	r3, #16
 800599c:	4618      	mov	r0, r3
 800599e:	f7ff fef1 	bl	8005784 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3324      	adds	r3, #36	@ 0x24
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7ff feec 	bl	8005784 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80059ac:	f001 ffa6 	bl	80078fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80059b0:	2301      	movs	r3, #1
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	e000ed04 	.word	0xe000ed04

080059c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08a      	sub	sp, #40	@ 0x28
 80059c4:	af02      	add	r7, sp, #8
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	4613      	mov	r3, r2
 80059cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10b      	bne.n	80059ec <xQueueGenericCreate+0x2c>
	__asm volatile
 80059d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	613b      	str	r3, [r7, #16]
}
 80059e6:	bf00      	nop
 80059e8:	bf00      	nop
 80059ea:	e7fd      	b.n	80059e8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	fb02 f303 	mul.w	r3, r2, r3
 80059f4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	3348      	adds	r3, #72	@ 0x48
 80059fa:	4618      	mov	r0, r3
 80059fc:	f002 f86e 	bl	8007adc <pvPortMalloc>
 8005a00:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00d      	beq.n	8005a24 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	3348      	adds	r3, #72	@ 0x48
 8005a10:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a12:	79fa      	ldrb	r2, [r7, #7]
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	68b9      	ldr	r1, [r7, #8]
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 f805 	bl	8005a2e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a24:	69bb      	ldr	r3, [r7, #24]
	}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3720      	adds	r7, #32
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b084      	sub	sp, #16
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	60f8      	str	r0, [r7, #12]
 8005a36:	60b9      	str	r1, [r7, #8]
 8005a38:	607a      	str	r2, [r7, #4]
 8005a3a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d103      	bne.n	8005a4a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	601a      	str	r2, [r3, #0]
 8005a48:	e002      	b.n	8005a50 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	69b8      	ldr	r0, [r7, #24]
 8005a60:	f7ff ff44 	bl	80058ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a64:	bf00      	nop
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08e      	sub	sp, #56	@ 0x38
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
 8005a78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10b      	bne.n	8005aa0 <xQueueGenericSend+0x34>
	__asm volatile
 8005a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005a9a:	bf00      	nop
 8005a9c:	bf00      	nop
 8005a9e:	e7fd      	b.n	8005a9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d103      	bne.n	8005aae <xQueueGenericSend+0x42>
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <xQueueGenericSend+0x46>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e000      	b.n	8005ab4 <xQueueGenericSend+0x48>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10b      	bne.n	8005ad0 <xQueueGenericSend+0x64>
	__asm volatile
 8005ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005abc:	f383 8811 	msr	BASEPRI, r3
 8005ac0:	f3bf 8f6f 	isb	sy
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005aca:	bf00      	nop
 8005acc:	bf00      	nop
 8005ace:	e7fd      	b.n	8005acc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d103      	bne.n	8005ade <xQueueGenericSend+0x72>
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d101      	bne.n	8005ae2 <xQueueGenericSend+0x76>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e000      	b.n	8005ae4 <xQueueGenericSend+0x78>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10b      	bne.n	8005b00 <xQueueGenericSend+0x94>
	__asm volatile
 8005ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aec:	f383 8811 	msr	BASEPRI, r3
 8005af0:	f3bf 8f6f 	isb	sy
 8005af4:	f3bf 8f4f 	dsb	sy
 8005af8:	623b      	str	r3, [r7, #32]
}
 8005afa:	bf00      	nop
 8005afc:	bf00      	nop
 8005afe:	e7fd      	b.n	8005afc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b00:	f001 f950 	bl	8006da4 <xTaskGetSchedulerState>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d102      	bne.n	8005b10 <xQueueGenericSend+0xa4>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <xQueueGenericSend+0xa8>
 8005b10:	2301      	movs	r3, #1
 8005b12:	e000      	b.n	8005b16 <xQueueGenericSend+0xaa>
 8005b14:	2300      	movs	r3, #0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10b      	bne.n	8005b32 <xQueueGenericSend+0xc6>
	__asm volatile
 8005b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	61fb      	str	r3, [r7, #28]
}
 8005b2c:	bf00      	nop
 8005b2e:	bf00      	nop
 8005b30:	e7fd      	b.n	8005b2e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b32:	f001 feb1 	bl	8007898 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d302      	bcc.n	8005b48 <xQueueGenericSend+0xdc>
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d129      	bne.n	8005b9c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	68b9      	ldr	r1, [r7, #8]
 8005b4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b4e:	f000 fa0f 	bl	8005f70 <prvCopyDataToQueue>
 8005b52:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d010      	beq.n	8005b7e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5e:	3324      	adds	r3, #36	@ 0x24
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 ff79 	bl	8006a58 <xTaskRemoveFromEventList>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d013      	beq.n	8005b94 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005b6c:	4b3f      	ldr	r3, [pc, #252]	@ (8005c6c <xQueueGenericSend+0x200>)
 8005b6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	e00a      	b.n	8005b94 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d007      	beq.n	8005b94 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005b84:	4b39      	ldr	r3, [pc, #228]	@ (8005c6c <xQueueGenericSend+0x200>)
 8005b86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005b94:	f001 feb2 	bl	80078fc <vPortExitCritical>
				return pdPASS;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e063      	b.n	8005c64 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d103      	bne.n	8005baa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ba2:	f001 feab 	bl	80078fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	e05c      	b.n	8005c64 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d106      	bne.n	8005bbe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bb0:	f107 0314 	add.w	r3, r7, #20
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 ffb3 	bl	8006b20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bbe:	f001 fe9d 	bl	80078fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bc2:	f000 fd1d 	bl	8006600 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bc6:	f001 fe67 	bl	8007898 <vPortEnterCritical>
 8005bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bcc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005bd0:	b25b      	sxtb	r3, r3
 8005bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd6:	d103      	bne.n	8005be0 <xQueueGenericSend+0x174>
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005be6:	b25b      	sxtb	r3, r3
 8005be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bec:	d103      	bne.n	8005bf6 <xQueueGenericSend+0x18a>
 8005bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bf6:	f001 fe81 	bl	80078fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bfa:	1d3a      	adds	r2, r7, #4
 8005bfc:	f107 0314 	add.w	r3, r7, #20
 8005c00:	4611      	mov	r1, r2
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 ffa2 	bl	8006b4c <xTaskCheckForTimeOut>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d124      	bne.n	8005c58 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c10:	f000 faa6 	bl	8006160 <prvIsQueueFull>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d018      	beq.n	8005c4c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c1c:	3310      	adds	r3, #16
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	4611      	mov	r1, r2
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 fec6 	bl	80069b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005c28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c2a:	f000 fa31 	bl	8006090 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005c2e:	f000 fcf5 	bl	800661c <xTaskResumeAll>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f47f af7c 	bne.w	8005b32 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c6c <xQueueGenericSend+0x200>)
 8005c3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	e772      	b.n	8005b32 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005c4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c4e:	f000 fa1f 	bl	8006090 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c52:	f000 fce3 	bl	800661c <xTaskResumeAll>
 8005c56:	e76c      	b.n	8005b32 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005c58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c5a:	f000 fa19 	bl	8006090 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c5e:	f000 fcdd 	bl	800661c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3738      	adds	r7, #56	@ 0x38
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	e000ed04 	.word	0xe000ed04

08005c70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b090      	sub	sp, #64	@ 0x40
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
 8005c7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10b      	bne.n	8005ca0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c9a:	bf00      	nop
 8005c9c:	bf00      	nop
 8005c9e:	e7fd      	b.n	8005c9c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d103      	bne.n	8005cae <xQueueGenericSendFromISR+0x3e>
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <xQueueGenericSendFromISR+0x42>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e000      	b.n	8005cb4 <xQueueGenericSendFromISR+0x44>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10b      	bne.n	8005cd0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005cca:	bf00      	nop
 8005ccc:	bf00      	nop
 8005cce:	e7fd      	b.n	8005ccc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d103      	bne.n	8005cde <xQueueGenericSendFromISR+0x6e>
 8005cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d101      	bne.n	8005ce2 <xQueueGenericSendFromISR+0x72>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e000      	b.n	8005ce4 <xQueueGenericSendFromISR+0x74>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10b      	bne.n	8005d00 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cec:	f383 8811 	msr	BASEPRI, r3
 8005cf0:	f3bf 8f6f 	isb	sy
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	623b      	str	r3, [r7, #32]
}
 8005cfa:	bf00      	nop
 8005cfc:	bf00      	nop
 8005cfe:	e7fd      	b.n	8005cfc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d00:	f001 feaa 	bl	8007a58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d04:	f3ef 8211 	mrs	r2, BASEPRI
 8005d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	61fa      	str	r2, [r7, #28]
 8005d1a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005d1c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d1e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d302      	bcc.n	8005d32 <xQueueGenericSendFromISR+0xc2>
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d12f      	bne.n	8005d92 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	68b9      	ldr	r1, [r7, #8]
 8005d46:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005d48:	f000 f912 	bl	8005f70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d4c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d54:	d112      	bne.n	8005d7c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d016      	beq.n	8005d8c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d60:	3324      	adds	r3, #36	@ 0x24
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 fe78 	bl	8006a58 <xTaskRemoveFromEventList>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00e      	beq.n	8005d8c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00b      	beq.n	8005d8c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	601a      	str	r2, [r3, #0]
 8005d7a:	e007      	b.n	8005d8c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005d80:	3301      	adds	r3, #1
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	b25a      	sxtb	r2, r3
 8005d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005d90:	e001      	b.n	8005d96 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d92:	2300      	movs	r3, #0
 8005d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d98:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005da0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3740      	adds	r7, #64	@ 0x40
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b08c      	sub	sp, #48	@ 0x30
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005db8:	2300      	movs	r3, #0
 8005dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10b      	bne.n	8005dde <xQueueReceive+0x32>
	__asm volatile
 8005dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dca:	f383 8811 	msr	BASEPRI, r3
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	623b      	str	r3, [r7, #32]
}
 8005dd8:	bf00      	nop
 8005dda:	bf00      	nop
 8005ddc:	e7fd      	b.n	8005dda <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d103      	bne.n	8005dec <xQueueReceive+0x40>
 8005de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d101      	bne.n	8005df0 <xQueueReceive+0x44>
 8005dec:	2301      	movs	r3, #1
 8005dee:	e000      	b.n	8005df2 <xQueueReceive+0x46>
 8005df0:	2300      	movs	r3, #0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10b      	bne.n	8005e0e <xQueueReceive+0x62>
	__asm volatile
 8005df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dfa:	f383 8811 	msr	BASEPRI, r3
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	f3bf 8f4f 	dsb	sy
 8005e06:	61fb      	str	r3, [r7, #28]
}
 8005e08:	bf00      	nop
 8005e0a:	bf00      	nop
 8005e0c:	e7fd      	b.n	8005e0a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e0e:	f000 ffc9 	bl	8006da4 <xTaskGetSchedulerState>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d102      	bne.n	8005e1e <xQueueReceive+0x72>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <xQueueReceive+0x76>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e000      	b.n	8005e24 <xQueueReceive+0x78>
 8005e22:	2300      	movs	r3, #0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10b      	bne.n	8005e40 <xQueueReceive+0x94>
	__asm volatile
 8005e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	61bb      	str	r3, [r7, #24]
}
 8005e3a:	bf00      	nop
 8005e3c:	bf00      	nop
 8005e3e:	e7fd      	b.n	8005e3c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e40:	f001 fd2a 	bl	8007898 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e48:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d01f      	beq.n	8005e90 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e50:	68b9      	ldr	r1, [r7, #8]
 8005e52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e54:	f000 f8f6 	bl	8006044 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5a:	1e5a      	subs	r2, r3, #1
 8005e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00f      	beq.n	8005e88 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e6a:	3310      	adds	r3, #16
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 fdf3 	bl	8006a58 <xTaskRemoveFromEventList>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d007      	beq.n	8005e88 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e78:	4b3c      	ldr	r3, [pc, #240]	@ (8005f6c <xQueueReceive+0x1c0>)
 8005e7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e88:	f001 fd38 	bl	80078fc <vPortExitCritical>
				return pdPASS;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e069      	b.n	8005f64 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d103      	bne.n	8005e9e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e96:	f001 fd31 	bl	80078fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	e062      	b.n	8005f64 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d106      	bne.n	8005eb2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ea4:	f107 0310 	add.w	r3, r7, #16
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f000 fe39 	bl	8006b20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005eb2:	f001 fd23 	bl	80078fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005eb6:	f000 fba3 	bl	8006600 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005eba:	f001 fced 	bl	8007898 <vPortEnterCritical>
 8005ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ec4:	b25b      	sxtb	r3, r3
 8005ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eca:	d103      	bne.n	8005ed4 <xQueueReceive+0x128>
 8005ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005eda:	b25b      	sxtb	r3, r3
 8005edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee0:	d103      	bne.n	8005eea <xQueueReceive+0x13e>
 8005ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005eea:	f001 fd07 	bl	80078fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005eee:	1d3a      	adds	r2, r7, #4
 8005ef0:	f107 0310 	add.w	r3, r7, #16
 8005ef4:	4611      	mov	r1, r2
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fe28 	bl	8006b4c <xTaskCheckForTimeOut>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d123      	bne.n	8005f4a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f04:	f000 f916 	bl	8006134 <prvIsQueueEmpty>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d017      	beq.n	8005f3e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f10:	3324      	adds	r3, #36	@ 0x24
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	4611      	mov	r1, r2
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 fd4c 	bl	80069b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f1e:	f000 f8b7 	bl	8006090 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f22:	f000 fb7b 	bl	800661c <xTaskResumeAll>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d189      	bne.n	8005e40 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8005f6c <xQueueReceive+0x1c0>)
 8005f2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	e780      	b.n	8005e40 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005f3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f40:	f000 f8a6 	bl	8006090 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f44:	f000 fb6a 	bl	800661c <xTaskResumeAll>
 8005f48:	e77a      	b.n	8005e40 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005f4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f4c:	f000 f8a0 	bl	8006090 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f50:	f000 fb64 	bl	800661c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f56:	f000 f8ed 	bl	8006134 <prvIsQueueEmpty>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f43f af6f 	beq.w	8005e40 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f62:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3730      	adds	r7, #48	@ 0x30
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	e000ed04 	.word	0xe000ed04

08005f70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10d      	bne.n	8005faa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d14d      	bne.n	8006032 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 ff20 	bl	8006de0 <xTaskPriorityDisinherit>
 8005fa0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	609a      	str	r2, [r3, #8]
 8005fa8:	e043      	b.n	8006032 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d119      	bne.n	8005fe4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6858      	ldr	r0, [r3, #4]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb8:	461a      	mov	r2, r3
 8005fba:	68b9      	ldr	r1, [r7, #8]
 8005fbc:	f002 f8ac 	bl	8008118 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc8:	441a      	add	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d32b      	bcc.n	8006032 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	605a      	str	r2, [r3, #4]
 8005fe2:	e026      	b.n	8006032 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	68d8      	ldr	r0, [r3, #12]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fec:	461a      	mov	r2, r3
 8005fee:	68b9      	ldr	r1, [r7, #8]
 8005ff0:	f002 f892 	bl	8008118 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffc:	425b      	negs	r3, r3
 8005ffe:	441a      	add	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	68da      	ldr	r2, [r3, #12]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	429a      	cmp	r2, r3
 800600e:	d207      	bcs.n	8006020 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	689a      	ldr	r2, [r3, #8]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006018:	425b      	negs	r3, r3
 800601a:	441a      	add	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b02      	cmp	r3, #2
 8006024:	d105      	bne.n	8006032 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d002      	beq.n	8006032 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	3b01      	subs	r3, #1
 8006030:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1c5a      	adds	r2, r3, #1
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800603a:	697b      	ldr	r3, [r7, #20]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3718      	adds	r7, #24
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006052:	2b00      	cmp	r3, #0
 8006054:	d018      	beq.n	8006088 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605e:	441a      	add	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	429a      	cmp	r2, r3
 800606e:	d303      	bcc.n	8006078 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68d9      	ldr	r1, [r3, #12]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006080:	461a      	mov	r2, r3
 8006082:	6838      	ldr	r0, [r7, #0]
 8006084:	f002 f848 	bl	8008118 <memcpy>
	}
}
 8006088:	bf00      	nop
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006098:	f001 fbfe 	bl	8007898 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060a4:	e011      	b.n	80060ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d012      	beq.n	80060d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	3324      	adds	r3, #36	@ 0x24
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 fcd0 	bl	8006a58 <xTaskRemoveFromEventList>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80060be:	f000 fda9 	bl	8006c14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80060c2:	7bfb      	ldrb	r3, [r7, #15]
 80060c4:	3b01      	subs	r3, #1
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	dce9      	bgt.n	80060a6 <prvUnlockQueue+0x16>
 80060d2:	e000      	b.n	80060d6 <prvUnlockQueue+0x46>
					break;
 80060d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	22ff      	movs	r2, #255	@ 0xff
 80060da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80060de:	f001 fc0d 	bl	80078fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80060e2:	f001 fbd9 	bl	8007898 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060ee:	e011      	b.n	8006114 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d012      	beq.n	800611e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	3310      	adds	r3, #16
 80060fc:	4618      	mov	r0, r3
 80060fe:	f000 fcab 	bl	8006a58 <xTaskRemoveFromEventList>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d001      	beq.n	800610c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006108:	f000 fd84 	bl	8006c14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800610c:	7bbb      	ldrb	r3, [r7, #14]
 800610e:	3b01      	subs	r3, #1
 8006110:	b2db      	uxtb	r3, r3
 8006112:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006114:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006118:	2b00      	cmp	r3, #0
 800611a:	dce9      	bgt.n	80060f0 <prvUnlockQueue+0x60>
 800611c:	e000      	b.n	8006120 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800611e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	22ff      	movs	r2, #255	@ 0xff
 8006124:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006128:	f001 fbe8 	bl	80078fc <vPortExitCritical>
}
 800612c:	bf00      	nop
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800613c:	f001 fbac 	bl	8007898 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006144:	2b00      	cmp	r3, #0
 8006146:	d102      	bne.n	800614e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006148:	2301      	movs	r3, #1
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	e001      	b.n	8006152 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800614e:	2300      	movs	r3, #0
 8006150:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006152:	f001 fbd3 	bl	80078fc <vPortExitCritical>

	return xReturn;
 8006156:	68fb      	ldr	r3, [r7, #12]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006168:	f001 fb96 	bl	8007898 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006174:	429a      	cmp	r2, r3
 8006176:	d102      	bne.n	800617e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006178:	2301      	movs	r3, #1
 800617a:	60fb      	str	r3, [r7, #12]
 800617c:	e001      	b.n	8006182 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800617e:	2300      	movs	r3, #0
 8006180:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006182:	f001 fbbb 	bl	80078fc <vPortExitCritical>

	return xReturn;
 8006186:	68fb      	ldr	r3, [r7, #12]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800619a:	2300      	movs	r3, #0
 800619c:	60fb      	str	r3, [r7, #12]
 800619e:	e014      	b.n	80061ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80061a0:	4a0f      	ldr	r2, [pc, #60]	@ (80061e0 <vQueueAddToRegistry+0x50>)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10b      	bne.n	80061c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80061ac:	490c      	ldr	r1, [pc, #48]	@ (80061e0 <vQueueAddToRegistry+0x50>)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80061b6:	4a0a      	ldr	r2, [pc, #40]	@ (80061e0 <vQueueAddToRegistry+0x50>)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	00db      	lsls	r3, r3, #3
 80061bc:	4413      	add	r3, r2
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80061c2:	e006      	b.n	80061d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3301      	adds	r3, #1
 80061c8:	60fb      	str	r3, [r7, #12]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b07      	cmp	r3, #7
 80061ce:	d9e7      	bls.n	80061a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80061d0:	bf00      	nop
 80061d2:	bf00      	nop
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	20000218 	.word	0x20000218

080061e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80061f4:	f001 fb50 	bl	8007898 <vPortEnterCritical>
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061fe:	b25b      	sxtb	r3, r3
 8006200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006204:	d103      	bne.n	800620e <vQueueWaitForMessageRestricted+0x2a>
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006214:	b25b      	sxtb	r3, r3
 8006216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621a:	d103      	bne.n	8006224 <vQueueWaitForMessageRestricted+0x40>
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006224:	f001 fb6a 	bl	80078fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622c:	2b00      	cmp	r3, #0
 800622e:	d106      	bne.n	800623e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	3324      	adds	r3, #36	@ 0x24
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	68b9      	ldr	r1, [r7, #8]
 8006238:	4618      	mov	r0, r3
 800623a:	f000 fbe1 	bl	8006a00 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800623e:	6978      	ldr	r0, [r7, #20]
 8006240:	f7ff ff26 	bl	8006090 <prvUnlockQueue>
	}
 8006244:	bf00      	nop
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800624c:	b580      	push	{r7, lr}
 800624e:	b08c      	sub	sp, #48	@ 0x30
 8006250:	af04      	add	r7, sp, #16
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	603b      	str	r3, [r7, #0]
 8006258:	4613      	mov	r3, r2
 800625a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800625c:	88fb      	ldrh	r3, [r7, #6]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4618      	mov	r0, r3
 8006262:	f001 fc3b 	bl	8007adc <pvPortMalloc>
 8006266:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00e      	beq.n	800628c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800626e:	20a0      	movs	r0, #160	@ 0xa0
 8006270:	f001 fc34 	bl	8007adc <pvPortMalloc>
 8006274:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	631a      	str	r2, [r3, #48]	@ 0x30
 8006282:	e005      	b.n	8006290 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006284:	6978      	ldr	r0, [r7, #20]
 8006286:	f001 fcf7 	bl	8007c78 <vPortFree>
 800628a:	e001      	b.n	8006290 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800628c:	2300      	movs	r3, #0
 800628e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d013      	beq.n	80062be <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006296:	88fa      	ldrh	r2, [r7, #6]
 8006298:	2300      	movs	r3, #0
 800629a:	9303      	str	r3, [sp, #12]
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	9302      	str	r3, [sp, #8]
 80062a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a2:	9301      	str	r3, [sp, #4]
 80062a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	68b9      	ldr	r1, [r7, #8]
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 f80f 	bl	80062d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062b2:	69f8      	ldr	r0, [r7, #28]
 80062b4:	f000 f8ac 	bl	8006410 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80062b8:	2301      	movs	r3, #1
 80062ba:	61bb      	str	r3, [r7, #24]
 80062bc:	e002      	b.n	80062c4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80062be:	f04f 33ff 	mov.w	r3, #4294967295
 80062c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80062c4:	69bb      	ldr	r3, [r7, #24]
	}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3720      	adds	r7, #32
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
	...

080062d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b088      	sub	sp, #32
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80062de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062e8:	3b01      	subs	r3, #1
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4413      	add	r3, r2
 80062ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	f023 0307 	bic.w	r3, r3, #7
 80062f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	f003 0307 	and.w	r3, r3, #7
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00b      	beq.n	800631a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	617b      	str	r3, [r7, #20]
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop
 8006318:	e7fd      	b.n	8006316 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d01f      	beq.n	8006360 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006320:	2300      	movs	r3, #0
 8006322:	61fb      	str	r3, [r7, #28]
 8006324:	e012      	b.n	800634c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	4413      	add	r3, r2
 800632c:	7819      	ldrb	r1, [r3, #0]
 800632e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	4413      	add	r3, r2
 8006334:	3334      	adds	r3, #52	@ 0x34
 8006336:	460a      	mov	r2, r1
 8006338:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	4413      	add	r3, r2
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d006      	beq.n	8006354 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	3301      	adds	r3, #1
 800634a:	61fb      	str	r3, [r7, #28]
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	2b0f      	cmp	r3, #15
 8006350:	d9e9      	bls.n	8006326 <prvInitialiseNewTask+0x56>
 8006352:	e000      	b.n	8006356 <prvInitialiseNewTask+0x86>
			{
				break;
 8006354:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800635e:	e003      	b.n	8006368 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636a:	2b06      	cmp	r3, #6
 800636c:	d901      	bls.n	8006372 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800636e:	2306      	movs	r3, #6
 8006370:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006374:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006376:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800637c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800637e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006380:	2200      	movs	r2, #0
 8006382:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006386:	3304      	adds	r3, #4
 8006388:	4618      	mov	r0, r3
 800638a:	f7ff fa1b 	bl	80057c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800638e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006390:	3318      	adds	r3, #24
 8006392:	4618      	mov	r0, r3
 8006394:	f7ff fa16 	bl	80057c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800639c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800639e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a0:	f1c3 0207 	rsb	r2, r3, #7
 80063a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80063a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063ac:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80063ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b0:	2200      	movs	r2, #0
 80063b2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80063be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c0:	334c      	adds	r3, #76	@ 0x4c
 80063c2:	224c      	movs	r2, #76	@ 0x4c
 80063c4:	2100      	movs	r1, #0
 80063c6:	4618      	mov	r0, r3
 80063c8:	f001 fe22 	bl	8008010 <memset>
 80063cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ce:	4a0d      	ldr	r2, [pc, #52]	@ (8006404 <prvInitialiseNewTask+0x134>)
 80063d0:	651a      	str	r2, [r3, #80]	@ 0x50
 80063d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d4:	4a0c      	ldr	r2, [pc, #48]	@ (8006408 <prvInitialiseNewTask+0x138>)
 80063d6:	655a      	str	r2, [r3, #84]	@ 0x54
 80063d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063da:	4a0c      	ldr	r2, [pc, #48]	@ (800640c <prvInitialiseNewTask+0x13c>)
 80063dc:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	68f9      	ldr	r1, [r7, #12]
 80063e2:	69b8      	ldr	r0, [r7, #24]
 80063e4:	f001 f924 	bl	8007630 <pxPortInitialiseStack>
 80063e8:	4602      	mov	r2, r0
 80063ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80063ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d002      	beq.n	80063fa <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063fa:	bf00      	nop
 80063fc:	3720      	adds	r7, #32
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	200043cc 	.word	0x200043cc
 8006408:	20004434 	.word	0x20004434
 800640c:	2000449c 	.word	0x2000449c

08006410 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006418:	f001 fa3e 	bl	8007898 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800641c:	4b2a      	ldr	r3, [pc, #168]	@ (80064c8 <prvAddNewTaskToReadyList+0xb8>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	3301      	adds	r3, #1
 8006422:	4a29      	ldr	r2, [pc, #164]	@ (80064c8 <prvAddNewTaskToReadyList+0xb8>)
 8006424:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006426:	4b29      	ldr	r3, [pc, #164]	@ (80064cc <prvAddNewTaskToReadyList+0xbc>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d109      	bne.n	8006442 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800642e:	4a27      	ldr	r2, [pc, #156]	@ (80064cc <prvAddNewTaskToReadyList+0xbc>)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006434:	4b24      	ldr	r3, [pc, #144]	@ (80064c8 <prvAddNewTaskToReadyList+0xb8>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d110      	bne.n	800645e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800643c:	f000 fc0e 	bl	8006c5c <prvInitialiseTaskLists>
 8006440:	e00d      	b.n	800645e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006442:	4b23      	ldr	r3, [pc, #140]	@ (80064d0 <prvAddNewTaskToReadyList+0xc0>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d109      	bne.n	800645e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800644a:	4b20      	ldr	r3, [pc, #128]	@ (80064cc <prvAddNewTaskToReadyList+0xbc>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006454:	429a      	cmp	r2, r3
 8006456:	d802      	bhi.n	800645e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006458:	4a1c      	ldr	r2, [pc, #112]	@ (80064cc <prvAddNewTaskToReadyList+0xbc>)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800645e:	4b1d      	ldr	r3, [pc, #116]	@ (80064d4 <prvAddNewTaskToReadyList+0xc4>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3301      	adds	r3, #1
 8006464:	4a1b      	ldr	r2, [pc, #108]	@ (80064d4 <prvAddNewTaskToReadyList+0xc4>)
 8006466:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800646c:	2201      	movs	r2, #1
 800646e:	409a      	lsls	r2, r3
 8006470:	4b19      	ldr	r3, [pc, #100]	@ (80064d8 <prvAddNewTaskToReadyList+0xc8>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4313      	orrs	r3, r2
 8006476:	4a18      	ldr	r2, [pc, #96]	@ (80064d8 <prvAddNewTaskToReadyList+0xc8>)
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800647e:	4613      	mov	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4a15      	ldr	r2, [pc, #84]	@ (80064dc <prvAddNewTaskToReadyList+0xcc>)
 8006488:	441a      	add	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3304      	adds	r3, #4
 800648e:	4619      	mov	r1, r3
 8006490:	4610      	mov	r0, r2
 8006492:	f7ff f9a4 	bl	80057de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006496:	f001 fa31 	bl	80078fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800649a:	4b0d      	ldr	r3, [pc, #52]	@ (80064d0 <prvAddNewTaskToReadyList+0xc0>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00e      	beq.n	80064c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064a2:	4b0a      	ldr	r3, [pc, #40]	@ (80064cc <prvAddNewTaskToReadyList+0xbc>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d207      	bcs.n	80064c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80064b0:	4b0b      	ldr	r3, [pc, #44]	@ (80064e0 <prvAddNewTaskToReadyList+0xd0>)
 80064b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064c0:	bf00      	nop
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	20000358 	.word	0x20000358
 80064cc:	20000258 	.word	0x20000258
 80064d0:	20000364 	.word	0x20000364
 80064d4:	20000374 	.word	0x20000374
 80064d8:	20000360 	.word	0x20000360
 80064dc:	2000025c 	.word	0x2000025c
 80064e0:	e000ed04 	.word	0xe000ed04

080064e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064ec:	2300      	movs	r3, #0
 80064ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d018      	beq.n	8006528 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064f6:	4b14      	ldr	r3, [pc, #80]	@ (8006548 <vTaskDelay+0x64>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00b      	beq.n	8006516 <vTaskDelay+0x32>
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	60bb      	str	r3, [r7, #8]
}
 8006510:	bf00      	nop
 8006512:	bf00      	nop
 8006514:	e7fd      	b.n	8006512 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006516:	f000 f873 	bl	8006600 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800651a:	2100      	movs	r1, #0
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 fce7 	bl	8006ef0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006522:	f000 f87b 	bl	800661c <xTaskResumeAll>
 8006526:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d107      	bne.n	800653e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800652e:	4b07      	ldr	r3, [pc, #28]	@ (800654c <vTaskDelay+0x68>)
 8006530:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800653e:	bf00      	nop
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	20000380 	.word	0x20000380
 800654c:	e000ed04 	.word	0xe000ed04

08006550 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8006556:	4b22      	ldr	r3, [pc, #136]	@ (80065e0 <vTaskStartScheduler+0x90>)
 8006558:	9301      	str	r3, [sp, #4]
 800655a:	2300      	movs	r3, #0
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	2300      	movs	r3, #0
 8006560:	2280      	movs	r2, #128	@ 0x80
 8006562:	4920      	ldr	r1, [pc, #128]	@ (80065e4 <vTaskStartScheduler+0x94>)
 8006564:	4820      	ldr	r0, [pc, #128]	@ (80065e8 <vTaskStartScheduler+0x98>)
 8006566:	f7ff fe71 	bl	800624c <xTaskCreate>
 800656a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d102      	bne.n	8006578 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8006572:	f000 fd23 	bl	8006fbc <xTimerCreateTimerTask>
 8006576:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d11b      	bne.n	80065b6 <vTaskStartScheduler+0x66>
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	60bb      	str	r3, [r7, #8]
}
 8006590:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006592:	4b16      	ldr	r3, [pc, #88]	@ (80065ec <vTaskStartScheduler+0x9c>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	334c      	adds	r3, #76	@ 0x4c
 8006598:	4a15      	ldr	r2, [pc, #84]	@ (80065f0 <vTaskStartScheduler+0xa0>)
 800659a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800659c:	4b15      	ldr	r3, [pc, #84]	@ (80065f4 <vTaskStartScheduler+0xa4>)
 800659e:	f04f 32ff 	mov.w	r2, #4294967295
 80065a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065a4:	4b14      	ldr	r3, [pc, #80]	@ (80065f8 <vTaskStartScheduler+0xa8>)
 80065a6:	2201      	movs	r2, #1
 80065a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065aa:	4b14      	ldr	r3, [pc, #80]	@ (80065fc <vTaskStartScheduler+0xac>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065b0:	f001 f8ce 	bl	8007750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065b4:	e00f      	b.n	80065d6 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065bc:	d10b      	bne.n	80065d6 <vTaskStartScheduler+0x86>
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	607b      	str	r3, [r7, #4]
}
 80065d0:	bf00      	nop
 80065d2:	bf00      	nop
 80065d4:	e7fd      	b.n	80065d2 <vTaskStartScheduler+0x82>
}
 80065d6:	bf00      	nop
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	2000037c 	.word	0x2000037c
 80065e4:	08008218 	.word	0x08008218
 80065e8:	08006c2d 	.word	0x08006c2d
 80065ec:	20000258 	.word	0x20000258
 80065f0:	20000020 	.word	0x20000020
 80065f4:	20000378 	.word	0x20000378
 80065f8:	20000364 	.word	0x20000364
 80065fc:	2000035c 	.word	0x2000035c

08006600 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006600:	b480      	push	{r7}
 8006602:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006604:	4b04      	ldr	r3, [pc, #16]	@ (8006618 <vTaskSuspendAll+0x18>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	3301      	adds	r3, #1
 800660a:	4a03      	ldr	r2, [pc, #12]	@ (8006618 <vTaskSuspendAll+0x18>)
 800660c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800660e:	bf00      	nop
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr
 8006618:	20000380 	.word	0x20000380

0800661c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006622:	2300      	movs	r3, #0
 8006624:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006626:	2300      	movs	r3, #0
 8006628:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800662a:	4b42      	ldr	r3, [pc, #264]	@ (8006734 <xTaskResumeAll+0x118>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10b      	bne.n	800664a <xTaskResumeAll+0x2e>
	__asm volatile
 8006632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	603b      	str	r3, [r7, #0]
}
 8006644:	bf00      	nop
 8006646:	bf00      	nop
 8006648:	e7fd      	b.n	8006646 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800664a:	f001 f925 	bl	8007898 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800664e:	4b39      	ldr	r3, [pc, #228]	@ (8006734 <xTaskResumeAll+0x118>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3b01      	subs	r3, #1
 8006654:	4a37      	ldr	r2, [pc, #220]	@ (8006734 <xTaskResumeAll+0x118>)
 8006656:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006658:	4b36      	ldr	r3, [pc, #216]	@ (8006734 <xTaskResumeAll+0x118>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d161      	bne.n	8006724 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006660:	4b35      	ldr	r3, [pc, #212]	@ (8006738 <xTaskResumeAll+0x11c>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d05d      	beq.n	8006724 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006668:	e02e      	b.n	80066c8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800666a:	4b34      	ldr	r3, [pc, #208]	@ (800673c <xTaskResumeAll+0x120>)
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	3318      	adds	r3, #24
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff f90e 	bl	8005898 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	3304      	adds	r3, #4
 8006680:	4618      	mov	r0, r3
 8006682:	f7ff f909 	bl	8005898 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800668a:	2201      	movs	r2, #1
 800668c:	409a      	lsls	r2, r3
 800668e:	4b2c      	ldr	r3, [pc, #176]	@ (8006740 <xTaskResumeAll+0x124>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4313      	orrs	r3, r2
 8006694:	4a2a      	ldr	r2, [pc, #168]	@ (8006740 <xTaskResumeAll+0x124>)
 8006696:	6013      	str	r3, [r2, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800669c:	4613      	mov	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4a27      	ldr	r2, [pc, #156]	@ (8006744 <xTaskResumeAll+0x128>)
 80066a6:	441a      	add	r2, r3
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	3304      	adds	r3, #4
 80066ac:	4619      	mov	r1, r3
 80066ae:	4610      	mov	r0, r2
 80066b0:	f7ff f895 	bl	80057de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066b8:	4b23      	ldr	r3, [pc, #140]	@ (8006748 <xTaskResumeAll+0x12c>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066be:	429a      	cmp	r2, r3
 80066c0:	d302      	bcc.n	80066c8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80066c2:	4b22      	ldr	r3, [pc, #136]	@ (800674c <xTaskResumeAll+0x130>)
 80066c4:	2201      	movs	r2, #1
 80066c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066c8:	4b1c      	ldr	r3, [pc, #112]	@ (800673c <xTaskResumeAll+0x120>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1cc      	bne.n	800666a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066d6:	f000 fb45 	bl	8006d64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80066da:	4b1d      	ldr	r3, [pc, #116]	@ (8006750 <xTaskResumeAll+0x134>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d010      	beq.n	8006708 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066e6:	f000 f847 	bl	8006778 <xTaskIncrementTick>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d002      	beq.n	80066f6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80066f0:	4b16      	ldr	r3, [pc, #88]	@ (800674c <xTaskResumeAll+0x130>)
 80066f2:	2201      	movs	r2, #1
 80066f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	3b01      	subs	r3, #1
 80066fa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1f1      	bne.n	80066e6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006702:	4b13      	ldr	r3, [pc, #76]	@ (8006750 <xTaskResumeAll+0x134>)
 8006704:	2200      	movs	r2, #0
 8006706:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006708:	4b10      	ldr	r3, [pc, #64]	@ (800674c <xTaskResumeAll+0x130>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d009      	beq.n	8006724 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006710:	2301      	movs	r3, #1
 8006712:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006714:	4b0f      	ldr	r3, [pc, #60]	@ (8006754 <xTaskResumeAll+0x138>)
 8006716:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006724:	f001 f8ea 	bl	80078fc <vPortExitCritical>

	return xAlreadyYielded;
 8006728:	68bb      	ldr	r3, [r7, #8]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	20000380 	.word	0x20000380
 8006738:	20000358 	.word	0x20000358
 800673c:	20000318 	.word	0x20000318
 8006740:	20000360 	.word	0x20000360
 8006744:	2000025c 	.word	0x2000025c
 8006748:	20000258 	.word	0x20000258
 800674c:	2000036c 	.word	0x2000036c
 8006750:	20000368 	.word	0x20000368
 8006754:	e000ed04 	.word	0xe000ed04

08006758 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800675e:	4b05      	ldr	r3, [pc, #20]	@ (8006774 <xTaskGetTickCount+0x1c>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006764:	687b      	ldr	r3, [r7, #4]
}
 8006766:	4618      	mov	r0, r3
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	2000035c 	.word	0x2000035c

08006778 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800677e:	2300      	movs	r3, #0
 8006780:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006782:	4b4f      	ldr	r3, [pc, #316]	@ (80068c0 <xTaskIncrementTick+0x148>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	f040 808f 	bne.w	80068aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800678c:	4b4d      	ldr	r3, [pc, #308]	@ (80068c4 <xTaskIncrementTick+0x14c>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	3301      	adds	r3, #1
 8006792:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006794:	4a4b      	ldr	r2, [pc, #300]	@ (80068c4 <xTaskIncrementTick+0x14c>)
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d121      	bne.n	80067e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80067a0:	4b49      	ldr	r3, [pc, #292]	@ (80068c8 <xTaskIncrementTick+0x150>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00b      	beq.n	80067c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80067aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ae:	f383 8811 	msr	BASEPRI, r3
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	603b      	str	r3, [r7, #0]
}
 80067bc:	bf00      	nop
 80067be:	bf00      	nop
 80067c0:	e7fd      	b.n	80067be <xTaskIncrementTick+0x46>
 80067c2:	4b41      	ldr	r3, [pc, #260]	@ (80068c8 <xTaskIncrementTick+0x150>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	60fb      	str	r3, [r7, #12]
 80067c8:	4b40      	ldr	r3, [pc, #256]	@ (80068cc <xTaskIncrementTick+0x154>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a3e      	ldr	r2, [pc, #248]	@ (80068c8 <xTaskIncrementTick+0x150>)
 80067ce:	6013      	str	r3, [r2, #0]
 80067d0:	4a3e      	ldr	r2, [pc, #248]	@ (80068cc <xTaskIncrementTick+0x154>)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6013      	str	r3, [r2, #0]
 80067d6:	4b3e      	ldr	r3, [pc, #248]	@ (80068d0 <xTaskIncrementTick+0x158>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	3301      	adds	r3, #1
 80067dc:	4a3c      	ldr	r2, [pc, #240]	@ (80068d0 <xTaskIncrementTick+0x158>)
 80067de:	6013      	str	r3, [r2, #0]
 80067e0:	f000 fac0 	bl	8006d64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067e4:	4b3b      	ldr	r3, [pc, #236]	@ (80068d4 <xTaskIncrementTick+0x15c>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d348      	bcc.n	8006880 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067ee:	4b36      	ldr	r3, [pc, #216]	@ (80068c8 <xTaskIncrementTick+0x150>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d104      	bne.n	8006802 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067f8:	4b36      	ldr	r3, [pc, #216]	@ (80068d4 <xTaskIncrementTick+0x15c>)
 80067fa:	f04f 32ff 	mov.w	r2, #4294967295
 80067fe:	601a      	str	r2, [r3, #0]
					break;
 8006800:	e03e      	b.n	8006880 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006802:	4b31      	ldr	r3, [pc, #196]	@ (80068c8 <xTaskIncrementTick+0x150>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	429a      	cmp	r2, r3
 8006818:	d203      	bcs.n	8006822 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800681a:	4a2e      	ldr	r2, [pc, #184]	@ (80068d4 <xTaskIncrementTick+0x15c>)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006820:	e02e      	b.n	8006880 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	3304      	adds	r3, #4
 8006826:	4618      	mov	r0, r3
 8006828:	f7ff f836 	bl	8005898 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006830:	2b00      	cmp	r3, #0
 8006832:	d004      	beq.n	800683e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	3318      	adds	r3, #24
 8006838:	4618      	mov	r0, r3
 800683a:	f7ff f82d 	bl	8005898 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006842:	2201      	movs	r2, #1
 8006844:	409a      	lsls	r2, r3
 8006846:	4b24      	ldr	r3, [pc, #144]	@ (80068d8 <xTaskIncrementTick+0x160>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4313      	orrs	r3, r2
 800684c:	4a22      	ldr	r2, [pc, #136]	@ (80068d8 <xTaskIncrementTick+0x160>)
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006854:	4613      	mov	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4a1f      	ldr	r2, [pc, #124]	@ (80068dc <xTaskIncrementTick+0x164>)
 800685e:	441a      	add	r2, r3
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	3304      	adds	r3, #4
 8006864:	4619      	mov	r1, r3
 8006866:	4610      	mov	r0, r2
 8006868:	f7fe ffb9 	bl	80057de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006870:	4b1b      	ldr	r3, [pc, #108]	@ (80068e0 <xTaskIncrementTick+0x168>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006876:	429a      	cmp	r2, r3
 8006878:	d3b9      	bcc.n	80067ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800687a:	2301      	movs	r3, #1
 800687c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800687e:	e7b6      	b.n	80067ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006880:	4b17      	ldr	r3, [pc, #92]	@ (80068e0 <xTaskIncrementTick+0x168>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006886:	4915      	ldr	r1, [pc, #84]	@ (80068dc <xTaskIncrementTick+0x164>)
 8006888:	4613      	mov	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	440b      	add	r3, r1
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d901      	bls.n	800689c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006898:	2301      	movs	r3, #1
 800689a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800689c:	4b11      	ldr	r3, [pc, #68]	@ (80068e4 <xTaskIncrementTick+0x16c>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d007      	beq.n	80068b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80068a4:	2301      	movs	r3, #1
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	e004      	b.n	80068b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80068aa:	4b0f      	ldr	r3, [pc, #60]	@ (80068e8 <xTaskIncrementTick+0x170>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	3301      	adds	r3, #1
 80068b0:	4a0d      	ldr	r2, [pc, #52]	@ (80068e8 <xTaskIncrementTick+0x170>)
 80068b2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80068b4:	697b      	ldr	r3, [r7, #20]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3718      	adds	r7, #24
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	20000380 	.word	0x20000380
 80068c4:	2000035c 	.word	0x2000035c
 80068c8:	20000310 	.word	0x20000310
 80068cc:	20000314 	.word	0x20000314
 80068d0:	20000370 	.word	0x20000370
 80068d4:	20000378 	.word	0x20000378
 80068d8:	20000360 	.word	0x20000360
 80068dc:	2000025c 	.word	0x2000025c
 80068e0:	20000258 	.word	0x20000258
 80068e4:	2000036c 	.word	0x2000036c
 80068e8:	20000368 	.word	0x20000368

080068ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068f2:	4b2a      	ldr	r3, [pc, #168]	@ (800699c <vTaskSwitchContext+0xb0>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068fa:	4b29      	ldr	r3, [pc, #164]	@ (80069a0 <vTaskSwitchContext+0xb4>)
 80068fc:	2201      	movs	r2, #1
 80068fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006900:	e045      	b.n	800698e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8006902:	4b27      	ldr	r3, [pc, #156]	@ (80069a0 <vTaskSwitchContext+0xb4>)
 8006904:	2200      	movs	r2, #0
 8006906:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006908:	4b26      	ldr	r3, [pc, #152]	@ (80069a4 <vTaskSwitchContext+0xb8>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	fab3 f383 	clz	r3, r3
 8006914:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006916:	7afb      	ldrb	r3, [r7, #11]
 8006918:	f1c3 031f 	rsb	r3, r3, #31
 800691c:	617b      	str	r3, [r7, #20]
 800691e:	4922      	ldr	r1, [pc, #136]	@ (80069a8 <vTaskSwitchContext+0xbc>)
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	4613      	mov	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	440b      	add	r3, r1
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10b      	bne.n	800694a <vTaskSwitchContext+0x5e>
	__asm volatile
 8006932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006936:	f383 8811 	msr	BASEPRI, r3
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	607b      	str	r3, [r7, #4]
}
 8006944:	bf00      	nop
 8006946:	bf00      	nop
 8006948:	e7fd      	b.n	8006946 <vTaskSwitchContext+0x5a>
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	4613      	mov	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4a14      	ldr	r2, [pc, #80]	@ (80069a8 <vTaskSwitchContext+0xbc>)
 8006956:	4413      	add	r3, r2
 8006958:	613b      	str	r3, [r7, #16]
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	685a      	ldr	r2, [r3, #4]
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	605a      	str	r2, [r3, #4]
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	3308      	adds	r3, #8
 800696c:	429a      	cmp	r2, r3
 800696e:	d104      	bne.n	800697a <vTaskSwitchContext+0x8e>
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	605a      	str	r2, [r3, #4]
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	4a0a      	ldr	r2, [pc, #40]	@ (80069ac <vTaskSwitchContext+0xc0>)
 8006982:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006984:	4b09      	ldr	r3, [pc, #36]	@ (80069ac <vTaskSwitchContext+0xc0>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	334c      	adds	r3, #76	@ 0x4c
 800698a:	4a09      	ldr	r2, [pc, #36]	@ (80069b0 <vTaskSwitchContext+0xc4>)
 800698c:	6013      	str	r3, [r2, #0]
}
 800698e:	bf00      	nop
 8006990:	371c      	adds	r7, #28
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	20000380 	.word	0x20000380
 80069a0:	2000036c 	.word	0x2000036c
 80069a4:	20000360 	.word	0x20000360
 80069a8:	2000025c 	.word	0x2000025c
 80069ac:	20000258 	.word	0x20000258
 80069b0:	20000020 	.word	0x20000020

080069b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10b      	bne.n	80069dc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80069c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	60fb      	str	r3, [r7, #12]
}
 80069d6:	bf00      	nop
 80069d8:	bf00      	nop
 80069da:	e7fd      	b.n	80069d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069dc:	4b07      	ldr	r3, [pc, #28]	@ (80069fc <vTaskPlaceOnEventList+0x48>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3318      	adds	r3, #24
 80069e2:	4619      	mov	r1, r3
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7fe ff1e 	bl	8005826 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069ea:	2101      	movs	r1, #1
 80069ec:	6838      	ldr	r0, [r7, #0]
 80069ee:	f000 fa7f 	bl	8006ef0 <prvAddCurrentTaskToDelayedList>
}
 80069f2:	bf00      	nop
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	20000258 	.word	0x20000258

08006a00 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10b      	bne.n	8006a2a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	617b      	str	r3, [r7, #20]
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop
 8006a28:	e7fd      	b.n	8006a26 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a54 <vTaskPlaceOnEventListRestricted+0x54>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	3318      	adds	r3, #24
 8006a30:	4619      	mov	r1, r3
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f7fe fed3 	bl	80057de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d002      	beq.n	8006a44 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a42:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a44:	6879      	ldr	r1, [r7, #4]
 8006a46:	68b8      	ldr	r0, [r7, #8]
 8006a48:	f000 fa52 	bl	8006ef0 <prvAddCurrentTaskToDelayedList>
	}
 8006a4c:	bf00      	nop
 8006a4e:	3718      	adds	r7, #24
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	20000258 	.word	0x20000258

08006a58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10b      	bne.n	8006a86 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	60fb      	str	r3, [r7, #12]
}
 8006a80:	bf00      	nop
 8006a82:	bf00      	nop
 8006a84:	e7fd      	b.n	8006a82 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	3318      	adds	r3, #24
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fe ff04 	bl	8005898 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a90:	4b1d      	ldr	r3, [pc, #116]	@ (8006b08 <xTaskRemoveFromEventList+0xb0>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d11c      	bne.n	8006ad2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	3304      	adds	r3, #4
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7fe fefb 	bl	8005898 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	409a      	lsls	r2, r3
 8006aaa:	4b18      	ldr	r3, [pc, #96]	@ (8006b0c <xTaskRemoveFromEventList+0xb4>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	4a16      	ldr	r2, [pc, #88]	@ (8006b0c <xTaskRemoveFromEventList+0xb4>)
 8006ab2:	6013      	str	r3, [r2, #0]
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ab8:	4613      	mov	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4a13      	ldr	r2, [pc, #76]	@ (8006b10 <xTaskRemoveFromEventList+0xb8>)
 8006ac2:	441a      	add	r2, r3
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	4619      	mov	r1, r3
 8006aca:	4610      	mov	r0, r2
 8006acc:	f7fe fe87 	bl	80057de <vListInsertEnd>
 8006ad0:	e005      	b.n	8006ade <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	3318      	adds	r3, #24
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	480e      	ldr	r0, [pc, #56]	@ (8006b14 <xTaskRemoveFromEventList+0xbc>)
 8006ada:	f7fe fe80 	bl	80057de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8006b18 <xTaskRemoveFromEventList+0xc0>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d905      	bls.n	8006af8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006aec:	2301      	movs	r3, #1
 8006aee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006af0:	4b0a      	ldr	r3, [pc, #40]	@ (8006b1c <xTaskRemoveFromEventList+0xc4>)
 8006af2:	2201      	movs	r2, #1
 8006af4:	601a      	str	r2, [r3, #0]
 8006af6:	e001      	b.n	8006afc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006af8:	2300      	movs	r3, #0
 8006afa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006afc:	697b      	ldr	r3, [r7, #20]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3718      	adds	r7, #24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	20000380 	.word	0x20000380
 8006b0c:	20000360 	.word	0x20000360
 8006b10:	2000025c 	.word	0x2000025c
 8006b14:	20000318 	.word	0x20000318
 8006b18:	20000258 	.word	0x20000258
 8006b1c:	2000036c 	.word	0x2000036c

08006b20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b28:	4b06      	ldr	r3, [pc, #24]	@ (8006b44 <vTaskInternalSetTimeOutState+0x24>)
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b30:	4b05      	ldr	r3, [pc, #20]	@ (8006b48 <vTaskInternalSetTimeOutState+0x28>)
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	605a      	str	r2, [r3, #4]
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	20000370 	.word	0x20000370
 8006b48:	2000035c 	.word	0x2000035c

08006b4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b088      	sub	sp, #32
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10b      	bne.n	8006b74 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	613b      	str	r3, [r7, #16]
}
 8006b6e:	bf00      	nop
 8006b70:	bf00      	nop
 8006b72:	e7fd      	b.n	8006b70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10b      	bne.n	8006b92 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	60fb      	str	r3, [r7, #12]
}
 8006b8c:	bf00      	nop
 8006b8e:	bf00      	nop
 8006b90:	e7fd      	b.n	8006b8e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006b92:	f000 fe81 	bl	8007898 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b96:	4b1d      	ldr	r3, [pc, #116]	@ (8006c0c <xTaskCheckForTimeOut+0xc0>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	69ba      	ldr	r2, [r7, #24]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bae:	d102      	bne.n	8006bb6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	61fb      	str	r3, [r7, #28]
 8006bb4:	e023      	b.n	8006bfe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	4b15      	ldr	r3, [pc, #84]	@ (8006c10 <xTaskCheckForTimeOut+0xc4>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d007      	beq.n	8006bd2 <xTaskCheckForTimeOut+0x86>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d302      	bcc.n	8006bd2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	61fb      	str	r3, [r7, #28]
 8006bd0:	e015      	b.n	8006bfe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d20b      	bcs.n	8006bf4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	1ad2      	subs	r2, r2, r3
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f7ff ff99 	bl	8006b20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	61fb      	str	r3, [r7, #28]
 8006bf2:	e004      	b.n	8006bfe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006bfe:	f000 fe7d 	bl	80078fc <vPortExitCritical>

	return xReturn;
 8006c02:	69fb      	ldr	r3, [r7, #28]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3720      	adds	r7, #32
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	2000035c 	.word	0x2000035c
 8006c10:	20000370 	.word	0x20000370

08006c14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c14:	b480      	push	{r7}
 8006c16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c18:	4b03      	ldr	r3, [pc, #12]	@ (8006c28 <vTaskMissedYield+0x14>)
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]
}
 8006c1e:	bf00      	nop
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	2000036c 	.word	0x2000036c

08006c2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c34:	f000 f852 	bl	8006cdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c38:	4b06      	ldr	r3, [pc, #24]	@ (8006c54 <prvIdleTask+0x28>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d9f9      	bls.n	8006c34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c40:	4b05      	ldr	r3, [pc, #20]	@ (8006c58 <prvIdleTask+0x2c>)
 8006c42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c50:	e7f0      	b.n	8006c34 <prvIdleTask+0x8>
 8006c52:	bf00      	nop
 8006c54:	2000025c 	.word	0x2000025c
 8006c58:	e000ed04 	.word	0xe000ed04

08006c5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c62:	2300      	movs	r3, #0
 8006c64:	607b      	str	r3, [r7, #4]
 8006c66:	e00c      	b.n	8006c82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4a12      	ldr	r2, [pc, #72]	@ (8006cbc <prvInitialiseTaskLists+0x60>)
 8006c74:	4413      	add	r3, r2
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7fe fd84 	bl	8005784 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	607b      	str	r3, [r7, #4]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2b06      	cmp	r3, #6
 8006c86:	d9ef      	bls.n	8006c68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c88:	480d      	ldr	r0, [pc, #52]	@ (8006cc0 <prvInitialiseTaskLists+0x64>)
 8006c8a:	f7fe fd7b 	bl	8005784 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c8e:	480d      	ldr	r0, [pc, #52]	@ (8006cc4 <prvInitialiseTaskLists+0x68>)
 8006c90:	f7fe fd78 	bl	8005784 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c94:	480c      	ldr	r0, [pc, #48]	@ (8006cc8 <prvInitialiseTaskLists+0x6c>)
 8006c96:	f7fe fd75 	bl	8005784 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c9a:	480c      	ldr	r0, [pc, #48]	@ (8006ccc <prvInitialiseTaskLists+0x70>)
 8006c9c:	f7fe fd72 	bl	8005784 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ca0:	480b      	ldr	r0, [pc, #44]	@ (8006cd0 <prvInitialiseTaskLists+0x74>)
 8006ca2:	f7fe fd6f 	bl	8005784 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8006cd4 <prvInitialiseTaskLists+0x78>)
 8006ca8:	4a05      	ldr	r2, [pc, #20]	@ (8006cc0 <prvInitialiseTaskLists+0x64>)
 8006caa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006cac:	4b0a      	ldr	r3, [pc, #40]	@ (8006cd8 <prvInitialiseTaskLists+0x7c>)
 8006cae:	4a05      	ldr	r2, [pc, #20]	@ (8006cc4 <prvInitialiseTaskLists+0x68>)
 8006cb0:	601a      	str	r2, [r3, #0]
}
 8006cb2:	bf00      	nop
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	2000025c 	.word	0x2000025c
 8006cc0:	200002e8 	.word	0x200002e8
 8006cc4:	200002fc 	.word	0x200002fc
 8006cc8:	20000318 	.word	0x20000318
 8006ccc:	2000032c 	.word	0x2000032c
 8006cd0:	20000344 	.word	0x20000344
 8006cd4:	20000310 	.word	0x20000310
 8006cd8:	20000314 	.word	0x20000314

08006cdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ce2:	e019      	b.n	8006d18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ce4:	f000 fdd8 	bl	8007898 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ce8:	4b10      	ldr	r3, [pc, #64]	@ (8006d2c <prvCheckTasksWaitingTermination+0x50>)
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	3304      	adds	r3, #4
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fe fdcf 	bl	8005898 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8006d30 <prvCheckTasksWaitingTermination+0x54>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	4a0b      	ldr	r2, [pc, #44]	@ (8006d30 <prvCheckTasksWaitingTermination+0x54>)
 8006d02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d04:	4b0b      	ldr	r3, [pc, #44]	@ (8006d34 <prvCheckTasksWaitingTermination+0x58>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8006d34 <prvCheckTasksWaitingTermination+0x58>)
 8006d0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d0e:	f000 fdf5 	bl	80078fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f810 	bl	8006d38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d18:	4b06      	ldr	r3, [pc, #24]	@ (8006d34 <prvCheckTasksWaitingTermination+0x58>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1e1      	bne.n	8006ce4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d20:	bf00      	nop
 8006d22:	bf00      	nop
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	2000032c 	.word	0x2000032c
 8006d30:	20000358 	.word	0x20000358
 8006d34:	20000340 	.word	0x20000340

08006d38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	334c      	adds	r3, #76	@ 0x4c
 8006d44:	4618      	mov	r0, r3
 8006d46:	f001 f96b 	bl	8008020 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 ff92 	bl	8007c78 <vPortFree>
			vPortFree( pxTCB );
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 ff8f 	bl	8007c78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d5a:	bf00      	nop
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
	...

08006d64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8006d9c <prvResetNextTaskUnblockTime+0x38>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d104      	bne.n	8006d7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d74:	4b0a      	ldr	r3, [pc, #40]	@ (8006da0 <prvResetNextTaskUnblockTime+0x3c>)
 8006d76:	f04f 32ff 	mov.w	r2, #4294967295
 8006d7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d7c:	e008      	b.n	8006d90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d7e:	4b07      	ldr	r3, [pc, #28]	@ (8006d9c <prvResetNextTaskUnblockTime+0x38>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	4a04      	ldr	r2, [pc, #16]	@ (8006da0 <prvResetNextTaskUnblockTime+0x3c>)
 8006d8e:	6013      	str	r3, [r2, #0]
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr
 8006d9c:	20000310 	.word	0x20000310
 8006da0:	20000378 	.word	0x20000378

08006da4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006daa:	4b0b      	ldr	r3, [pc, #44]	@ (8006dd8 <xTaskGetSchedulerState+0x34>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d102      	bne.n	8006db8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006db2:	2301      	movs	r3, #1
 8006db4:	607b      	str	r3, [r7, #4]
 8006db6:	e008      	b.n	8006dca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006db8:	4b08      	ldr	r3, [pc, #32]	@ (8006ddc <xTaskGetSchedulerState+0x38>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d102      	bne.n	8006dc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	607b      	str	r3, [r7, #4]
 8006dc4:	e001      	b.n	8006dca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006dca:	687b      	ldr	r3, [r7, #4]
	}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	20000364 	.word	0x20000364
 8006ddc:	20000380 	.word	0x20000380

08006de0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006dec:	2300      	movs	r3, #0
 8006dee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d070      	beq.n	8006ed8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006df6:	4b3b      	ldr	r3, [pc, #236]	@ (8006ee4 <xTaskPriorityDisinherit+0x104>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d00b      	beq.n	8006e18 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	60fb      	str	r3, [r7, #12]
}
 8006e12:	bf00      	nop
 8006e14:	bf00      	nop
 8006e16:	e7fd      	b.n	8006e14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10b      	bne.n	8006e38 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	60bb      	str	r3, [r7, #8]
}
 8006e32:	bf00      	nop
 8006e34:	bf00      	nop
 8006e36:	e7fd      	b.n	8006e34 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e3c:	1e5a      	subs	r2, r3, #1
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d044      	beq.n	8006ed8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d140      	bne.n	8006ed8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	3304      	adds	r3, #4
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fe fd1c 	bl	8005898 <uxListRemove>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d115      	bne.n	8006e92 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e6a:	491f      	ldr	r1, [pc, #124]	@ (8006ee8 <xTaskPriorityDisinherit+0x108>)
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	440b      	add	r3, r1
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10a      	bne.n	8006e92 <xTaskPriorityDisinherit+0xb2>
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e80:	2201      	movs	r2, #1
 8006e82:	fa02 f303 	lsl.w	r3, r2, r3
 8006e86:	43da      	mvns	r2, r3
 8006e88:	4b18      	ldr	r3, [pc, #96]	@ (8006eec <xTaskPriorityDisinherit+0x10c>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	4a17      	ldr	r2, [pc, #92]	@ (8006eec <xTaskPriorityDisinherit+0x10c>)
 8006e90:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9e:	f1c3 0207 	rsb	r2, r3, #7
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eaa:	2201      	movs	r2, #1
 8006eac:	409a      	lsls	r2, r3
 8006eae:	4b0f      	ldr	r3, [pc, #60]	@ (8006eec <xTaskPriorityDisinherit+0x10c>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8006eec <xTaskPriorityDisinherit+0x10c>)
 8006eb6:	6013      	str	r3, [r2, #0]
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4413      	add	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4a08      	ldr	r2, [pc, #32]	@ (8006ee8 <xTaskPriorityDisinherit+0x108>)
 8006ec6:	441a      	add	r2, r3
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	4619      	mov	r1, r3
 8006ece:	4610      	mov	r0, r2
 8006ed0:	f7fe fc85 	bl	80057de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ed8:	697b      	ldr	r3, [r7, #20]
	}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3718      	adds	r7, #24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	20000258 	.word	0x20000258
 8006ee8:	2000025c 	.word	0x2000025c
 8006eec:	20000360 	.word	0x20000360

08006ef0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006efa:	4b29      	ldr	r3, [pc, #164]	@ (8006fa0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f00:	4b28      	ldr	r3, [pc, #160]	@ (8006fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	3304      	adds	r3, #4
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fe fcc6 	bl	8005898 <uxListRemove>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10b      	bne.n	8006f2a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006f12:	4b24      	ldr	r3, [pc, #144]	@ (8006fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f18:	2201      	movs	r2, #1
 8006f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1e:	43da      	mvns	r2, r3
 8006f20:	4b21      	ldr	r3, [pc, #132]	@ (8006fa8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4013      	ands	r3, r2
 8006f26:	4a20      	ldr	r2, [pc, #128]	@ (8006fa8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f28:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f30:	d10a      	bne.n	8006f48 <prvAddCurrentTaskToDelayedList+0x58>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d007      	beq.n	8006f48 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f38:	4b1a      	ldr	r3, [pc, #104]	@ (8006fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	3304      	adds	r3, #4
 8006f3e:	4619      	mov	r1, r3
 8006f40:	481a      	ldr	r0, [pc, #104]	@ (8006fac <prvAddCurrentTaskToDelayedList+0xbc>)
 8006f42:	f7fe fc4c 	bl	80057de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f46:	e026      	b.n	8006f96 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f50:	4b14      	ldr	r3, [pc, #80]	@ (8006fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d209      	bcs.n	8006f74 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f60:	4b13      	ldr	r3, [pc, #76]	@ (8006fb0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	4b0f      	ldr	r3, [pc, #60]	@ (8006fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3304      	adds	r3, #4
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	f7fe fc5a 	bl	8005826 <vListInsert>
}
 8006f72:	e010      	b.n	8006f96 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f74:	4b0f      	ldr	r3, [pc, #60]	@ (8006fb4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	4b0a      	ldr	r3, [pc, #40]	@ (8006fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	3304      	adds	r3, #4
 8006f7e:	4619      	mov	r1, r3
 8006f80:	4610      	mov	r0, r2
 8006f82:	f7fe fc50 	bl	8005826 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f86:	4b0c      	ldr	r3, [pc, #48]	@ (8006fb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d202      	bcs.n	8006f96 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006f90:	4a09      	ldr	r2, [pc, #36]	@ (8006fb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	6013      	str	r3, [r2, #0]
}
 8006f96:	bf00      	nop
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	2000035c 	.word	0x2000035c
 8006fa4:	20000258 	.word	0x20000258
 8006fa8:	20000360 	.word	0x20000360
 8006fac:	20000344 	.word	0x20000344
 8006fb0:	20000314 	.word	0x20000314
 8006fb4:	20000310 	.word	0x20000310
 8006fb8:	20000378 	.word	0x20000378

08006fbc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006fc6:	f000 fafd 	bl	80075c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006fca:	4b12      	ldr	r3, [pc, #72]	@ (8007014 <xTimerCreateTimerTask+0x58>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00b      	beq.n	8006fea <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8006fd2:	4b11      	ldr	r3, [pc, #68]	@ (8007018 <xTimerCreateTimerTask+0x5c>)
 8006fd4:	9301      	str	r3, [sp, #4]
 8006fd6:	2305      	movs	r3, #5
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	2300      	movs	r3, #0
 8006fdc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006fe0:	490e      	ldr	r1, [pc, #56]	@ (800701c <xTimerCreateTimerTask+0x60>)
 8006fe2:	480f      	ldr	r0, [pc, #60]	@ (8007020 <xTimerCreateTimerTask+0x64>)
 8006fe4:	f7ff f932 	bl	800624c <xTaskCreate>
 8006fe8:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d10b      	bne.n	8007008 <xTimerCreateTimerTask+0x4c>
	__asm volatile
 8006ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	603b      	str	r3, [r7, #0]
}
 8007002:	bf00      	nop
 8007004:	bf00      	nop
 8007006:	e7fd      	b.n	8007004 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8007008:	687b      	ldr	r3, [r7, #4]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	200003b4 	.word	0x200003b4
 8007018:	200003b8 	.word	0x200003b8
 800701c:	08008220 	.word	0x08008220
 8007020:	0800715d 	.word	0x0800715d

08007024 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b08a      	sub	sp, #40	@ 0x28
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
 8007030:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007032:	2300      	movs	r3, #0
 8007034:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10b      	bne.n	8007054 <xTimerGenericCommand+0x30>
	__asm volatile
 800703c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007040:	f383 8811 	msr	BASEPRI, r3
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	623b      	str	r3, [r7, #32]
}
 800704e:	bf00      	nop
 8007050:	bf00      	nop
 8007052:	e7fd      	b.n	8007050 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007054:	4b19      	ldr	r3, [pc, #100]	@ (80070bc <xTimerGenericCommand+0x98>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d02a      	beq.n	80070b2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	2b05      	cmp	r3, #5
 800706c:	dc18      	bgt.n	80070a0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800706e:	f7ff fe99 	bl	8006da4 <xTaskGetSchedulerState>
 8007072:	4603      	mov	r3, r0
 8007074:	2b02      	cmp	r3, #2
 8007076:	d109      	bne.n	800708c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007078:	4b10      	ldr	r3, [pc, #64]	@ (80070bc <xTimerGenericCommand+0x98>)
 800707a:	6818      	ldr	r0, [r3, #0]
 800707c:	f107 0110 	add.w	r1, r7, #16
 8007080:	2300      	movs	r3, #0
 8007082:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007084:	f7fe fcf2 	bl	8005a6c <xQueueGenericSend>
 8007088:	6278      	str	r0, [r7, #36]	@ 0x24
 800708a:	e012      	b.n	80070b2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800708c:	4b0b      	ldr	r3, [pc, #44]	@ (80070bc <xTimerGenericCommand+0x98>)
 800708e:	6818      	ldr	r0, [r3, #0]
 8007090:	f107 0110 	add.w	r1, r7, #16
 8007094:	2300      	movs	r3, #0
 8007096:	2200      	movs	r2, #0
 8007098:	f7fe fce8 	bl	8005a6c <xQueueGenericSend>
 800709c:	6278      	str	r0, [r7, #36]	@ 0x24
 800709e:	e008      	b.n	80070b2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80070a0:	4b06      	ldr	r3, [pc, #24]	@ (80070bc <xTimerGenericCommand+0x98>)
 80070a2:	6818      	ldr	r0, [r3, #0]
 80070a4:	f107 0110 	add.w	r1, r7, #16
 80070a8:	2300      	movs	r3, #0
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	f7fe fde0 	bl	8005c70 <xQueueGenericSendFromISR>
 80070b0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80070b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3728      	adds	r7, #40	@ 0x28
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	200003b4 	.word	0x200003b4

080070c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b088      	sub	sp, #32
 80070c4:	af02      	add	r7, sp, #8
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070ca:	4b23      	ldr	r3, [pc, #140]	@ (8007158 <prvProcessExpiredTimer+0x98>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	3304      	adds	r3, #4
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fe fbdd 	bl	8005898 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80070e4:	f003 0304 	and.w	r3, r3, #4
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d023      	beq.n	8007134 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	699a      	ldr	r2, [r3, #24]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	18d1      	adds	r1, r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	6978      	ldr	r0, [r7, #20]
 80070fa:	f000 f8d5 	bl	80072a8 <prvInsertTimerInActiveList>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d020      	beq.n	8007146 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007104:	2300      	movs	r3, #0
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	2300      	movs	r3, #0
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	2100      	movs	r1, #0
 800710e:	6978      	ldr	r0, [r7, #20]
 8007110:	f7ff ff88 	bl	8007024 <xTimerGenericCommand>
 8007114:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d114      	bne.n	8007146 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800711c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007120:	f383 8811 	msr	BASEPRI, r3
 8007124:	f3bf 8f6f 	isb	sy
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	60fb      	str	r3, [r7, #12]
}
 800712e:	bf00      	nop
 8007130:	bf00      	nop
 8007132:	e7fd      	b.n	8007130 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800713a:	f023 0301 	bic.w	r3, r3, #1
 800713e:	b2da      	uxtb	r2, r3
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	6a1b      	ldr	r3, [r3, #32]
 800714a:	6978      	ldr	r0, [r7, #20]
 800714c:	4798      	blx	r3
}
 800714e:	bf00      	nop
 8007150:	3718      	adds	r7, #24
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	200003ac 	.word	0x200003ac

0800715c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007164:	f107 0308 	add.w	r3, r7, #8
 8007168:	4618      	mov	r0, r3
 800716a:	f000 f859 	bl	8007220 <prvGetNextExpireTime>
 800716e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	4619      	mov	r1, r3
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f000 f805 	bl	8007184 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800717a:	f000 f8d7 	bl	800732c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800717e:	bf00      	nop
 8007180:	e7f0      	b.n	8007164 <prvTimerTask+0x8>
	...

08007184 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800718e:	f7ff fa37 	bl	8006600 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007192:	f107 0308 	add.w	r3, r7, #8
 8007196:	4618      	mov	r0, r3
 8007198:	f000 f866 	bl	8007268 <prvSampleTimeNow>
 800719c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d130      	bne.n	8007206 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10a      	bne.n	80071c0 <prvProcessTimerOrBlockTask+0x3c>
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d806      	bhi.n	80071c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80071b2:	f7ff fa33 	bl	800661c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80071b6:	68f9      	ldr	r1, [r7, #12]
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f7ff ff81 	bl	80070c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80071be:	e024      	b.n	800720a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d008      	beq.n	80071d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80071c6:	4b13      	ldr	r3, [pc, #76]	@ (8007214 <prvProcessTimerOrBlockTask+0x90>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d101      	bne.n	80071d4 <prvProcessTimerOrBlockTask+0x50>
 80071d0:	2301      	movs	r3, #1
 80071d2:	e000      	b.n	80071d6 <prvProcessTimerOrBlockTask+0x52>
 80071d4:	2300      	movs	r3, #0
 80071d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80071d8:	4b0f      	ldr	r3, [pc, #60]	@ (8007218 <prvProcessTimerOrBlockTask+0x94>)
 80071da:	6818      	ldr	r0, [r3, #0]
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	4619      	mov	r1, r3
 80071e6:	f7fe fffd 	bl	80061e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80071ea:	f7ff fa17 	bl	800661c <xTaskResumeAll>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10a      	bne.n	800720a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80071f4:	4b09      	ldr	r3, [pc, #36]	@ (800721c <prvProcessTimerOrBlockTask+0x98>)
 80071f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071fa:	601a      	str	r2, [r3, #0]
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	f3bf 8f6f 	isb	sy
}
 8007204:	e001      	b.n	800720a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007206:	f7ff fa09 	bl	800661c <xTaskResumeAll>
}
 800720a:	bf00      	nop
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	200003b0 	.word	0x200003b0
 8007218:	200003b4 	.word	0x200003b4
 800721c:	e000ed04 	.word	0xe000ed04

08007220 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007228:	4b0e      	ldr	r3, [pc, #56]	@ (8007264 <prvGetNextExpireTime+0x44>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <prvGetNextExpireTime+0x16>
 8007232:	2201      	movs	r2, #1
 8007234:	e000      	b.n	8007238 <prvGetNextExpireTime+0x18>
 8007236:	2200      	movs	r2, #0
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d105      	bne.n	8007250 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007244:	4b07      	ldr	r3, [pc, #28]	@ (8007264 <prvGetNextExpireTime+0x44>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	60fb      	str	r3, [r7, #12]
 800724e:	e001      	b.n	8007254 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007250:	2300      	movs	r3, #0
 8007252:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007254:	68fb      	ldr	r3, [r7, #12]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	200003ac 	.word	0x200003ac

08007268 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007270:	f7ff fa72 	bl	8006758 <xTaskGetTickCount>
 8007274:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007276:	4b0b      	ldr	r3, [pc, #44]	@ (80072a4 <prvSampleTimeNow+0x3c>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	429a      	cmp	r2, r3
 800727e:	d205      	bcs.n	800728c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007280:	f000 f93a 	bl	80074f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	601a      	str	r2, [r3, #0]
 800728a:	e002      	b.n	8007292 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007292:	4a04      	ldr	r2, [pc, #16]	@ (80072a4 <prvSampleTimeNow+0x3c>)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007298:	68fb      	ldr	r3, [r7, #12]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	200003bc 	.word	0x200003bc

080072a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
 80072b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80072b6:	2300      	movs	r3, #0
 80072b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d812      	bhi.n	80072f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	1ad2      	subs	r2, r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d302      	bcc.n	80072e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80072dc:	2301      	movs	r3, #1
 80072de:	617b      	str	r3, [r7, #20]
 80072e0:	e01b      	b.n	800731a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80072e2:	4b10      	ldr	r3, [pc, #64]	@ (8007324 <prvInsertTimerInActiveList+0x7c>)
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	3304      	adds	r3, #4
 80072ea:	4619      	mov	r1, r3
 80072ec:	4610      	mov	r0, r2
 80072ee:	f7fe fa9a 	bl	8005826 <vListInsert>
 80072f2:	e012      	b.n	800731a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d206      	bcs.n	800730a <prvInsertTimerInActiveList+0x62>
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	429a      	cmp	r2, r3
 8007302:	d302      	bcc.n	800730a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007304:	2301      	movs	r3, #1
 8007306:	617b      	str	r3, [r7, #20]
 8007308:	e007      	b.n	800731a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800730a:	4b07      	ldr	r3, [pc, #28]	@ (8007328 <prvInsertTimerInActiveList+0x80>)
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	3304      	adds	r3, #4
 8007312:	4619      	mov	r1, r3
 8007314:	4610      	mov	r0, r2
 8007316:	f7fe fa86 	bl	8005826 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800731a:	697b      	ldr	r3, [r7, #20]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3718      	adds	r7, #24
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	200003b0 	.word	0x200003b0
 8007328:	200003ac 	.word	0x200003ac

0800732c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b08e      	sub	sp, #56	@ 0x38
 8007330:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007332:	e0ce      	b.n	80074d2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	da19      	bge.n	800736e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800733a:	1d3b      	adds	r3, r7, #4
 800733c:	3304      	adds	r3, #4
 800733e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10b      	bne.n	800735e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	61fb      	str	r3, [r7, #28]
}
 8007358:	bf00      	nop
 800735a:	bf00      	nop
 800735c:	e7fd      	b.n	800735a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800735e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007364:	6850      	ldr	r0, [r2, #4]
 8007366:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007368:	6892      	ldr	r2, [r2, #8]
 800736a:	4611      	mov	r1, r2
 800736c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	f2c0 80ae 	blt.w	80074d2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800737a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d004      	beq.n	800738c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007384:	3304      	adds	r3, #4
 8007386:	4618      	mov	r0, r3
 8007388:	f7fe fa86 	bl	8005898 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800738c:	463b      	mov	r3, r7
 800738e:	4618      	mov	r0, r3
 8007390:	f7ff ff6a 	bl	8007268 <prvSampleTimeNow>
 8007394:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b09      	cmp	r3, #9
 800739a:	f200 8097 	bhi.w	80074cc <prvProcessReceivedCommands+0x1a0>
 800739e:	a201      	add	r2, pc, #4	@ (adr r2, 80073a4 <prvProcessReceivedCommands+0x78>)
 80073a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a4:	080073cd 	.word	0x080073cd
 80073a8:	080073cd 	.word	0x080073cd
 80073ac:	080073cd 	.word	0x080073cd
 80073b0:	08007443 	.word	0x08007443
 80073b4:	08007457 	.word	0x08007457
 80073b8:	080074a3 	.word	0x080074a3
 80073bc:	080073cd 	.word	0x080073cd
 80073c0:	080073cd 	.word	0x080073cd
 80073c4:	08007443 	.word	0x08007443
 80073c8:	08007457 	.word	0x08007457
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80073d2:	f043 0301 	orr.w	r3, r3, #1
 80073d6:	b2da      	uxtb	r2, r3
 80073d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	18d1      	adds	r1, r2, r3
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073ec:	f7ff ff5c 	bl	80072a8 <prvInsertTimerInActiveList>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d06c      	beq.n	80074d0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007400:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007404:	f003 0304 	and.w	r3, r3, #4
 8007408:	2b00      	cmp	r3, #0
 800740a:	d061      	beq.n	80074d0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	441a      	add	r2, r3
 8007414:	2300      	movs	r3, #0
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	2300      	movs	r3, #0
 800741a:	2100      	movs	r1, #0
 800741c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800741e:	f7ff fe01 	bl	8007024 <xTimerGenericCommand>
 8007422:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d152      	bne.n	80074d0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	61bb      	str	r3, [r7, #24]
}
 800743c:	bf00      	nop
 800743e:	bf00      	nop
 8007440:	e7fd      	b.n	800743e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007444:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007448:	f023 0301 	bic.w	r3, r3, #1
 800744c:	b2da      	uxtb	r2, r3
 800744e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007450:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8007454:	e03d      	b.n	80074d2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007458:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800745c:	f043 0301 	orr.w	r3, r3, #1
 8007460:	b2da      	uxtb	r2, r3
 8007462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007464:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800746e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10b      	bne.n	800748e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800747a:	f383 8811 	msr	BASEPRI, r3
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	617b      	str	r3, [r7, #20]
}
 8007488:	bf00      	nop
 800748a:	bf00      	nop
 800748c:	e7fd      	b.n	800748a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800748e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007490:	699a      	ldr	r2, [r3, #24]
 8007492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007494:	18d1      	adds	r1, r2, r3
 8007496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800749a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800749c:	f7ff ff04 	bl	80072a8 <prvInsertTimerInActiveList>
					break;
 80074a0:	e017      	b.n	80074d2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80074a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80074a8:	f003 0302 	and.w	r3, r3, #2
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d103      	bne.n	80074b8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80074b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074b2:	f000 fbe1 	bl	8007c78 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80074b6:	e00c      	b.n	80074d2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80074be:	f023 0301 	bic.w	r3, r3, #1
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 80074ca:	e002      	b.n	80074d2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80074cc:	bf00      	nop
 80074ce:	e000      	b.n	80074d2 <prvProcessReceivedCommands+0x1a6>
					break;
 80074d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074d2:	4b08      	ldr	r3, [pc, #32]	@ (80074f4 <prvProcessReceivedCommands+0x1c8>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	1d39      	adds	r1, r7, #4
 80074d8:	2200      	movs	r2, #0
 80074da:	4618      	mov	r0, r3
 80074dc:	f7fe fc66 	bl	8005dac <xQueueReceive>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f47f af26 	bne.w	8007334 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80074e8:	bf00      	nop
 80074ea:	bf00      	nop
 80074ec:	3730      	adds	r7, #48	@ 0x30
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	200003b4 	.word	0x200003b4

080074f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b088      	sub	sp, #32
 80074fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074fe:	e049      	b.n	8007594 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007500:	4b2e      	ldr	r3, [pc, #184]	@ (80075bc <prvSwitchTimerLists+0xc4>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800750a:	4b2c      	ldr	r3, [pc, #176]	@ (80075bc <prvSwitchTimerLists+0xc4>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	3304      	adds	r3, #4
 8007518:	4618      	mov	r0, r3
 800751a:	f7fe f9bd 	bl	8005898 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800752c:	f003 0304 	and.w	r3, r3, #4
 8007530:	2b00      	cmp	r3, #0
 8007532:	d02f      	beq.n	8007594 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	4413      	add	r3, r2
 800753c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	429a      	cmp	r2, r3
 8007544:	d90e      	bls.n	8007564 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007552:	4b1a      	ldr	r3, [pc, #104]	@ (80075bc <prvSwitchTimerLists+0xc4>)
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	3304      	adds	r3, #4
 800755a:	4619      	mov	r1, r3
 800755c:	4610      	mov	r0, r2
 800755e:	f7fe f962 	bl	8005826 <vListInsert>
 8007562:	e017      	b.n	8007594 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007564:	2300      	movs	r3, #0
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	2300      	movs	r3, #0
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	2100      	movs	r1, #0
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f7ff fd58 	bl	8007024 <xTimerGenericCommand>
 8007574:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10b      	bne.n	8007594 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800757c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007580:	f383 8811 	msr	BASEPRI, r3
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	603b      	str	r3, [r7, #0]
}
 800758e:	bf00      	nop
 8007590:	bf00      	nop
 8007592:	e7fd      	b.n	8007590 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007594:	4b09      	ldr	r3, [pc, #36]	@ (80075bc <prvSwitchTimerLists+0xc4>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1b0      	bne.n	8007500 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800759e:	4b07      	ldr	r3, [pc, #28]	@ (80075bc <prvSwitchTimerLists+0xc4>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80075a4:	4b06      	ldr	r3, [pc, #24]	@ (80075c0 <prvSwitchTimerLists+0xc8>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a04      	ldr	r2, [pc, #16]	@ (80075bc <prvSwitchTimerLists+0xc4>)
 80075aa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80075ac:	4a04      	ldr	r2, [pc, #16]	@ (80075c0 <prvSwitchTimerLists+0xc8>)
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	6013      	str	r3, [r2, #0]
}
 80075b2:	bf00      	nop
 80075b4:	3718      	adds	r7, #24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	200003ac 	.word	0x200003ac
 80075c0:	200003b0 	.word	0x200003b0

080075c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80075c8:	f000 f966 	bl	8007898 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80075cc:	4b12      	ldr	r3, [pc, #72]	@ (8007618 <prvCheckForValidListAndQueue+0x54>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d11d      	bne.n	8007610 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80075d4:	4811      	ldr	r0, [pc, #68]	@ (800761c <prvCheckForValidListAndQueue+0x58>)
 80075d6:	f7fe f8d5 	bl	8005784 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80075da:	4811      	ldr	r0, [pc, #68]	@ (8007620 <prvCheckForValidListAndQueue+0x5c>)
 80075dc:	f7fe f8d2 	bl	8005784 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80075e0:	4b10      	ldr	r3, [pc, #64]	@ (8007624 <prvCheckForValidListAndQueue+0x60>)
 80075e2:	4a0e      	ldr	r2, [pc, #56]	@ (800761c <prvCheckForValidListAndQueue+0x58>)
 80075e4:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80075e6:	4b10      	ldr	r3, [pc, #64]	@ (8007628 <prvCheckForValidListAndQueue+0x64>)
 80075e8:	4a0d      	ldr	r2, [pc, #52]	@ (8007620 <prvCheckForValidListAndQueue+0x5c>)
 80075ea:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80075ec:	2200      	movs	r2, #0
 80075ee:	2110      	movs	r1, #16
 80075f0:	2014      	movs	r0, #20
 80075f2:	f7fe f9e5 	bl	80059c0 <xQueueGenericCreate>
 80075f6:	4603      	mov	r3, r0
 80075f8:	4a07      	ldr	r2, [pc, #28]	@ (8007618 <prvCheckForValidListAndQueue+0x54>)
 80075fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80075fc:	4b06      	ldr	r3, [pc, #24]	@ (8007618 <prvCheckForValidListAndQueue+0x54>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d005      	beq.n	8007610 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007604:	4b04      	ldr	r3, [pc, #16]	@ (8007618 <prvCheckForValidListAndQueue+0x54>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4908      	ldr	r1, [pc, #32]	@ (800762c <prvCheckForValidListAndQueue+0x68>)
 800760a:	4618      	mov	r0, r3
 800760c:	f7fe fdc0 	bl	8006190 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007610:	f000 f974 	bl	80078fc <vPortExitCritical>
}
 8007614:	bf00      	nop
 8007616:	bd80      	pop	{r7, pc}
 8007618:	200003b4 	.word	0x200003b4
 800761c:	20000384 	.word	0x20000384
 8007620:	20000398 	.word	0x20000398
 8007624:	200003ac 	.word	0x200003ac
 8007628:	200003b0 	.word	0x200003b0
 800762c:	08008228 	.word	0x08008228

08007630 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	3b04      	subs	r3, #4
 8007640:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007648:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	3b04      	subs	r3, #4
 800764e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	f023 0201 	bic.w	r2, r3, #1
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3b04      	subs	r3, #4
 800765e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007660:	4a0c      	ldr	r2, [pc, #48]	@ (8007694 <pxPortInitialiseStack+0x64>)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	3b14      	subs	r3, #20
 800766a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	3b04      	subs	r3, #4
 8007676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f06f 0202 	mvn.w	r2, #2
 800767e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	3b20      	subs	r3, #32
 8007684:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007686:	68fb      	ldr	r3, [r7, #12]
}
 8007688:	4618      	mov	r0, r3
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	08007699 	.word	0x08007699

08007698 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800769e:	2300      	movs	r3, #0
 80076a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80076a2:	4b13      	ldr	r3, [pc, #76]	@ (80076f0 <prvTaskExitError+0x58>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076aa:	d00b      	beq.n	80076c4 <prvTaskExitError+0x2c>
	__asm volatile
 80076ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b0:	f383 8811 	msr	BASEPRI, r3
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	60fb      	str	r3, [r7, #12]
}
 80076be:	bf00      	nop
 80076c0:	bf00      	nop
 80076c2:	e7fd      	b.n	80076c0 <prvTaskExitError+0x28>
	__asm volatile
 80076c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c8:	f383 8811 	msr	BASEPRI, r3
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	60bb      	str	r3, [r7, #8]
}
 80076d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80076d8:	bf00      	nop
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d0fc      	beq.n	80076da <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80076e0:	bf00      	nop
 80076e2:	bf00      	nop
 80076e4:	3714      	adds	r7, #20
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	2000001c 	.word	0x2000001c
	...

08007700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007700:	4b07      	ldr	r3, [pc, #28]	@ (8007720 <pxCurrentTCBConst2>)
 8007702:	6819      	ldr	r1, [r3, #0]
 8007704:	6808      	ldr	r0, [r1, #0]
 8007706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800770a:	f380 8809 	msr	PSP, r0
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f04f 0000 	mov.w	r0, #0
 8007716:	f380 8811 	msr	BASEPRI, r0
 800771a:	4770      	bx	lr
 800771c:	f3af 8000 	nop.w

08007720 <pxCurrentTCBConst2>:
 8007720:	20000258 	.word	0x20000258
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007724:	bf00      	nop
 8007726:	bf00      	nop

08007728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007728:	4808      	ldr	r0, [pc, #32]	@ (800774c <prvPortStartFirstTask+0x24>)
 800772a:	6800      	ldr	r0, [r0, #0]
 800772c:	6800      	ldr	r0, [r0, #0]
 800772e:	f380 8808 	msr	MSP, r0
 8007732:	f04f 0000 	mov.w	r0, #0
 8007736:	f380 8814 	msr	CONTROL, r0
 800773a:	b662      	cpsie	i
 800773c:	b661      	cpsie	f
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	df00      	svc	0
 8007748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800774a:	bf00      	nop
 800774c:	e000ed08 	.word	0xe000ed08

08007750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007756:	4b47      	ldr	r3, [pc, #284]	@ (8007874 <xPortStartScheduler+0x124>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a47      	ldr	r2, [pc, #284]	@ (8007878 <xPortStartScheduler+0x128>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d10b      	bne.n	8007778 <xPortStartScheduler+0x28>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	613b      	str	r3, [r7, #16]
}
 8007772:	bf00      	nop
 8007774:	bf00      	nop
 8007776:	e7fd      	b.n	8007774 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007778:	4b3e      	ldr	r3, [pc, #248]	@ (8007874 <xPortStartScheduler+0x124>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a3f      	ldr	r2, [pc, #252]	@ (800787c <xPortStartScheduler+0x12c>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d10b      	bne.n	800779a <xPortStartScheduler+0x4a>
	__asm volatile
 8007782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007786:	f383 8811 	msr	BASEPRI, r3
 800778a:	f3bf 8f6f 	isb	sy
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	60fb      	str	r3, [r7, #12]
}
 8007794:	bf00      	nop
 8007796:	bf00      	nop
 8007798:	e7fd      	b.n	8007796 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800779a:	4b39      	ldr	r3, [pc, #228]	@ (8007880 <xPortStartScheduler+0x130>)
 800779c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	22ff      	movs	r2, #255	@ 0xff
 80077aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80077b4:	78fb      	ldrb	r3, [r7, #3]
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80077bc:	b2da      	uxtb	r2, r3
 80077be:	4b31      	ldr	r3, [pc, #196]	@ (8007884 <xPortStartScheduler+0x134>)
 80077c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80077c2:	4b31      	ldr	r3, [pc, #196]	@ (8007888 <xPortStartScheduler+0x138>)
 80077c4:	2207      	movs	r2, #7
 80077c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077c8:	e009      	b.n	80077de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80077ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007888 <xPortStartScheduler+0x138>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	3b01      	subs	r3, #1
 80077d0:	4a2d      	ldr	r2, [pc, #180]	@ (8007888 <xPortStartScheduler+0x138>)
 80077d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80077d4:	78fb      	ldrb	r3, [r7, #3]
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	005b      	lsls	r3, r3, #1
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077de:	78fb      	ldrb	r3, [r7, #3]
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077e6:	2b80      	cmp	r3, #128	@ 0x80
 80077e8:	d0ef      	beq.n	80077ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80077ea:	4b27      	ldr	r3, [pc, #156]	@ (8007888 <xPortStartScheduler+0x138>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f1c3 0307 	rsb	r3, r3, #7
 80077f2:	2b04      	cmp	r3, #4
 80077f4:	d00b      	beq.n	800780e <xPortStartScheduler+0xbe>
	__asm volatile
 80077f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077fa:	f383 8811 	msr	BASEPRI, r3
 80077fe:	f3bf 8f6f 	isb	sy
 8007802:	f3bf 8f4f 	dsb	sy
 8007806:	60bb      	str	r3, [r7, #8]
}
 8007808:	bf00      	nop
 800780a:	bf00      	nop
 800780c:	e7fd      	b.n	800780a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800780e:	4b1e      	ldr	r3, [pc, #120]	@ (8007888 <xPortStartScheduler+0x138>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	021b      	lsls	r3, r3, #8
 8007814:	4a1c      	ldr	r2, [pc, #112]	@ (8007888 <xPortStartScheduler+0x138>)
 8007816:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007818:	4b1b      	ldr	r3, [pc, #108]	@ (8007888 <xPortStartScheduler+0x138>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007820:	4a19      	ldr	r2, [pc, #100]	@ (8007888 <xPortStartScheduler+0x138>)
 8007822:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	b2da      	uxtb	r2, r3
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800782c:	4b17      	ldr	r3, [pc, #92]	@ (800788c <xPortStartScheduler+0x13c>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a16      	ldr	r2, [pc, #88]	@ (800788c <xPortStartScheduler+0x13c>)
 8007832:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007836:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007838:	4b14      	ldr	r3, [pc, #80]	@ (800788c <xPortStartScheduler+0x13c>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a13      	ldr	r2, [pc, #76]	@ (800788c <xPortStartScheduler+0x13c>)
 800783e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007842:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007844:	f000 f8da 	bl	80079fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007848:	4b11      	ldr	r3, [pc, #68]	@ (8007890 <xPortStartScheduler+0x140>)
 800784a:	2200      	movs	r2, #0
 800784c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800784e:	f000 f8f9 	bl	8007a44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007852:	4b10      	ldr	r3, [pc, #64]	@ (8007894 <xPortStartScheduler+0x144>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a0f      	ldr	r2, [pc, #60]	@ (8007894 <xPortStartScheduler+0x144>)
 8007858:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800785c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800785e:	f7ff ff63 	bl	8007728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007862:	f7ff f843 	bl	80068ec <vTaskSwitchContext>
	prvTaskExitError();
 8007866:	f7ff ff17 	bl	8007698 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	e000ed00 	.word	0xe000ed00
 8007878:	410fc271 	.word	0x410fc271
 800787c:	410fc270 	.word	0x410fc270
 8007880:	e000e400 	.word	0xe000e400
 8007884:	200003c0 	.word	0x200003c0
 8007888:	200003c4 	.word	0x200003c4
 800788c:	e000ed20 	.word	0xe000ed20
 8007890:	2000001c 	.word	0x2000001c
 8007894:	e000ef34 	.word	0xe000ef34

08007898 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
	__asm volatile
 800789e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a2:	f383 8811 	msr	BASEPRI, r3
 80078a6:	f3bf 8f6f 	isb	sy
 80078aa:	f3bf 8f4f 	dsb	sy
 80078ae:	607b      	str	r3, [r7, #4]
}
 80078b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80078b2:	4b10      	ldr	r3, [pc, #64]	@ (80078f4 <vPortEnterCritical+0x5c>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	3301      	adds	r3, #1
 80078b8:	4a0e      	ldr	r2, [pc, #56]	@ (80078f4 <vPortEnterCritical+0x5c>)
 80078ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80078bc:	4b0d      	ldr	r3, [pc, #52]	@ (80078f4 <vPortEnterCritical+0x5c>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d110      	bne.n	80078e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80078c4:	4b0c      	ldr	r3, [pc, #48]	@ (80078f8 <vPortEnterCritical+0x60>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00b      	beq.n	80078e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80078ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	603b      	str	r3, [r7, #0]
}
 80078e0:	bf00      	nop
 80078e2:	bf00      	nop
 80078e4:	e7fd      	b.n	80078e2 <vPortEnterCritical+0x4a>
	}
}
 80078e6:	bf00      	nop
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	2000001c 	.word	0x2000001c
 80078f8:	e000ed04 	.word	0xe000ed04

080078fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007902:	4b12      	ldr	r3, [pc, #72]	@ (800794c <vPortExitCritical+0x50>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10b      	bne.n	8007922 <vPortExitCritical+0x26>
	__asm volatile
 800790a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800790e:	f383 8811 	msr	BASEPRI, r3
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	607b      	str	r3, [r7, #4]
}
 800791c:	bf00      	nop
 800791e:	bf00      	nop
 8007920:	e7fd      	b.n	800791e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007922:	4b0a      	ldr	r3, [pc, #40]	@ (800794c <vPortExitCritical+0x50>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	3b01      	subs	r3, #1
 8007928:	4a08      	ldr	r2, [pc, #32]	@ (800794c <vPortExitCritical+0x50>)
 800792a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800792c:	4b07      	ldr	r3, [pc, #28]	@ (800794c <vPortExitCritical+0x50>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d105      	bne.n	8007940 <vPortExitCritical+0x44>
 8007934:	2300      	movs	r3, #0
 8007936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	f383 8811 	msr	BASEPRI, r3
}
 800793e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr
 800794c:	2000001c 	.word	0x2000001c

08007950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007950:	f3ef 8009 	mrs	r0, PSP
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	4b15      	ldr	r3, [pc, #84]	@ (80079b0 <pxCurrentTCBConst>)
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	f01e 0f10 	tst.w	lr, #16
 8007960:	bf08      	it	eq
 8007962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796a:	6010      	str	r0, [r2, #0]
 800796c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007970:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007974:	f380 8811 	msr	BASEPRI, r0
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	f3bf 8f6f 	isb	sy
 8007980:	f7fe ffb4 	bl	80068ec <vTaskSwitchContext>
 8007984:	f04f 0000 	mov.w	r0, #0
 8007988:	f380 8811 	msr	BASEPRI, r0
 800798c:	bc09      	pop	{r0, r3}
 800798e:	6819      	ldr	r1, [r3, #0]
 8007990:	6808      	ldr	r0, [r1, #0]
 8007992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007996:	f01e 0f10 	tst.w	lr, #16
 800799a:	bf08      	it	eq
 800799c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80079a0:	f380 8809 	msr	PSP, r0
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	f3af 8000 	nop.w

080079b0 <pxCurrentTCBConst>:
 80079b0:	20000258 	.word	0x20000258
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80079b4:	bf00      	nop
 80079b6:	bf00      	nop

080079b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
	__asm volatile
 80079be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	607b      	str	r3, [r7, #4]
}
 80079d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80079d2:	f7fe fed1 	bl	8006778 <xTaskIncrementTick>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d003      	beq.n	80079e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80079dc:	4b06      	ldr	r3, [pc, #24]	@ (80079f8 <SysTick_Handler+0x40>)
 80079de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	2300      	movs	r3, #0
 80079e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	f383 8811 	msr	BASEPRI, r3
}
 80079ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80079f0:	bf00      	nop
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	e000ed04 	.word	0xe000ed04

080079fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80079fc:	b480      	push	{r7}
 80079fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a00:	4b0b      	ldr	r3, [pc, #44]	@ (8007a30 <vPortSetupTimerInterrupt+0x34>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a06:	4b0b      	ldr	r3, [pc, #44]	@ (8007a34 <vPortSetupTimerInterrupt+0x38>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a38 <vPortSetupTimerInterrupt+0x3c>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a0a      	ldr	r2, [pc, #40]	@ (8007a3c <vPortSetupTimerInterrupt+0x40>)
 8007a12:	fba2 2303 	umull	r2, r3, r2, r3
 8007a16:	099b      	lsrs	r3, r3, #6
 8007a18:	4a09      	ldr	r2, [pc, #36]	@ (8007a40 <vPortSetupTimerInterrupt+0x44>)
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a1e:	4b04      	ldr	r3, [pc, #16]	@ (8007a30 <vPortSetupTimerInterrupt+0x34>)
 8007a20:	2207      	movs	r2, #7
 8007a22:	601a      	str	r2, [r3, #0]
}
 8007a24:	bf00      	nop
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	e000e010 	.word	0xe000e010
 8007a34:	e000e018 	.word	0xe000e018
 8007a38:	20000010 	.word	0x20000010
 8007a3c:	10624dd3 	.word	0x10624dd3
 8007a40:	e000e014 	.word	0xe000e014

08007a44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007a54 <vPortEnableVFP+0x10>
 8007a48:	6801      	ldr	r1, [r0, #0]
 8007a4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007a4e:	6001      	str	r1, [r0, #0]
 8007a50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a52:	bf00      	nop
 8007a54:	e000ed88 	.word	0xe000ed88

08007a58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a5e:	f3ef 8305 	mrs	r3, IPSR
 8007a62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2b0f      	cmp	r3, #15
 8007a68:	d915      	bls.n	8007a96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a6a:	4a18      	ldr	r2, [pc, #96]	@ (8007acc <vPortValidateInterruptPriority+0x74>)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	4413      	add	r3, r2
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a74:	4b16      	ldr	r3, [pc, #88]	@ (8007ad0 <vPortValidateInterruptPriority+0x78>)
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	7afa      	ldrb	r2, [r7, #11]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d20b      	bcs.n	8007a96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	607b      	str	r3, [r7, #4]
}
 8007a90:	bf00      	nop
 8007a92:	bf00      	nop
 8007a94:	e7fd      	b.n	8007a92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a96:	4b0f      	ldr	r3, [pc, #60]	@ (8007ad4 <vPortValidateInterruptPriority+0x7c>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8007ad8 <vPortValidateInterruptPriority+0x80>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d90b      	bls.n	8007abe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aaa:	f383 8811 	msr	BASEPRI, r3
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	f3bf 8f4f 	dsb	sy
 8007ab6:	603b      	str	r3, [r7, #0]
}
 8007ab8:	bf00      	nop
 8007aba:	bf00      	nop
 8007abc:	e7fd      	b.n	8007aba <vPortValidateInterruptPriority+0x62>
	}
 8007abe:	bf00      	nop
 8007ac0:	3714      	adds	r7, #20
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	e000e3f0 	.word	0xe000e3f0
 8007ad0:	200003c0 	.word	0x200003c0
 8007ad4:	e000ed0c 	.word	0xe000ed0c
 8007ad8:	200003c4 	.word	0x200003c4

08007adc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b08a      	sub	sp, #40	@ 0x28
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ae8:	f7fe fd8a 	bl	8006600 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007aec:	4b5c      	ldr	r3, [pc, #368]	@ (8007c60 <pvPortMalloc+0x184>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d101      	bne.n	8007af8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007af4:	f000 f924 	bl	8007d40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007af8:	4b5a      	ldr	r3, [pc, #360]	@ (8007c64 <pvPortMalloc+0x188>)
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4013      	ands	r3, r2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f040 8095 	bne.w	8007c30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d01e      	beq.n	8007b4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007b0c:	2208      	movs	r2, #8
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4413      	add	r3, r2
 8007b12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f003 0307 	and.w	r3, r3, #7
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d015      	beq.n	8007b4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f023 0307 	bic.w	r3, r3, #7
 8007b24:	3308      	adds	r3, #8
 8007b26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f003 0307 	and.w	r3, r3, #7
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00b      	beq.n	8007b4a <pvPortMalloc+0x6e>
	__asm volatile
 8007b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b36:	f383 8811 	msr	BASEPRI, r3
 8007b3a:	f3bf 8f6f 	isb	sy
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	617b      	str	r3, [r7, #20]
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop
 8007b48:	e7fd      	b.n	8007b46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d06f      	beq.n	8007c30 <pvPortMalloc+0x154>
 8007b50:	4b45      	ldr	r3, [pc, #276]	@ (8007c68 <pvPortMalloc+0x18c>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d86a      	bhi.n	8007c30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b5a:	4b44      	ldr	r3, [pc, #272]	@ (8007c6c <pvPortMalloc+0x190>)
 8007b5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007b5e:	4b43      	ldr	r3, [pc, #268]	@ (8007c6c <pvPortMalloc+0x190>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b64:	e004      	b.n	8007b70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d903      	bls.n	8007b82 <pvPortMalloc+0xa6>
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1f1      	bne.n	8007b66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b82:	4b37      	ldr	r3, [pc, #220]	@ (8007c60 <pvPortMalloc+0x184>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d051      	beq.n	8007c30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b8c:	6a3b      	ldr	r3, [r7, #32]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2208      	movs	r2, #8
 8007b92:	4413      	add	r3, r2
 8007b94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	6a3b      	ldr	r3, [r7, #32]
 8007b9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba0:	685a      	ldr	r2, [r3, #4]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	1ad2      	subs	r2, r2, r3
 8007ba6:	2308      	movs	r3, #8
 8007ba8:	005b      	lsls	r3, r3, #1
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d920      	bls.n	8007bf0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007bae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	f003 0307 	and.w	r3, r3, #7
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00b      	beq.n	8007bd8 <pvPortMalloc+0xfc>
	__asm volatile
 8007bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc4:	f383 8811 	msr	BASEPRI, r3
 8007bc8:	f3bf 8f6f 	isb	sy
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	613b      	str	r3, [r7, #16]
}
 8007bd2:	bf00      	nop
 8007bd4:	bf00      	nop
 8007bd6:	e7fd      	b.n	8007bd4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	1ad2      	subs	r2, r2, r3
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007bea:	69b8      	ldr	r0, [r7, #24]
 8007bec:	f000 f90a 	bl	8007e04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8007c68 <pvPortMalloc+0x18c>)
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	4a1b      	ldr	r2, [pc, #108]	@ (8007c68 <pvPortMalloc+0x18c>)
 8007bfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8007c68 <pvPortMalloc+0x18c>)
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	4b1b      	ldr	r3, [pc, #108]	@ (8007c70 <pvPortMalloc+0x194>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d203      	bcs.n	8007c12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c0a:	4b17      	ldr	r3, [pc, #92]	@ (8007c68 <pvPortMalloc+0x18c>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a18      	ldr	r2, [pc, #96]	@ (8007c70 <pvPortMalloc+0x194>)
 8007c10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c14:	685a      	ldr	r2, [r3, #4]
 8007c16:	4b13      	ldr	r3, [pc, #76]	@ (8007c64 <pvPortMalloc+0x188>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	431a      	orrs	r2, r3
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c22:	2200      	movs	r2, #0
 8007c24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007c26:	4b13      	ldr	r3, [pc, #76]	@ (8007c74 <pvPortMalloc+0x198>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	4a11      	ldr	r2, [pc, #68]	@ (8007c74 <pvPortMalloc+0x198>)
 8007c2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c30:	f7fe fcf4 	bl	800661c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	f003 0307 	and.w	r3, r3, #7
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00b      	beq.n	8007c56 <pvPortMalloc+0x17a>
	__asm volatile
 8007c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	60fb      	str	r3, [r7, #12]
}
 8007c50:	bf00      	nop
 8007c52:	bf00      	nop
 8007c54:	e7fd      	b.n	8007c52 <pvPortMalloc+0x176>
	return pvReturn;
 8007c56:	69fb      	ldr	r3, [r7, #28]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3728      	adds	r7, #40	@ 0x28
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	20003fd0 	.word	0x20003fd0
 8007c64:	20003fe4 	.word	0x20003fe4
 8007c68:	20003fd4 	.word	0x20003fd4
 8007c6c:	20003fc8 	.word	0x20003fc8
 8007c70:	20003fd8 	.word	0x20003fd8
 8007c74:	20003fdc 	.word	0x20003fdc

08007c78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b086      	sub	sp, #24
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d04f      	beq.n	8007d2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007c8a:	2308      	movs	r3, #8
 8007c8c:	425b      	negs	r3, r3
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	4413      	add	r3, r2
 8007c92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	685a      	ldr	r2, [r3, #4]
 8007c9c:	4b25      	ldr	r3, [pc, #148]	@ (8007d34 <vPortFree+0xbc>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10b      	bne.n	8007cbe <vPortFree+0x46>
	__asm volatile
 8007ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	60fb      	str	r3, [r7, #12]
}
 8007cb8:	bf00      	nop
 8007cba:	bf00      	nop
 8007cbc:	e7fd      	b.n	8007cba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00b      	beq.n	8007cde <vPortFree+0x66>
	__asm volatile
 8007cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cca:	f383 8811 	msr	BASEPRI, r3
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	60bb      	str	r3, [r7, #8]
}
 8007cd8:	bf00      	nop
 8007cda:	bf00      	nop
 8007cdc:	e7fd      	b.n	8007cda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	685a      	ldr	r2, [r3, #4]
 8007ce2:	4b14      	ldr	r3, [pc, #80]	@ (8007d34 <vPortFree+0xbc>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d01e      	beq.n	8007d2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d11a      	bne.n	8007d2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	685a      	ldr	r2, [r3, #4]
 8007cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8007d34 <vPortFree+0xbc>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	43db      	mvns	r3, r3
 8007cfe:	401a      	ands	r2, r3
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d04:	f7fe fc7c 	bl	8006600 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d38 <vPortFree+0xc0>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4413      	add	r3, r2
 8007d12:	4a09      	ldr	r2, [pc, #36]	@ (8007d38 <vPortFree+0xc0>)
 8007d14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d16:	6938      	ldr	r0, [r7, #16]
 8007d18:	f000 f874 	bl	8007e04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007d1c:	4b07      	ldr	r3, [pc, #28]	@ (8007d3c <vPortFree+0xc4>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3301      	adds	r3, #1
 8007d22:	4a06      	ldr	r2, [pc, #24]	@ (8007d3c <vPortFree+0xc4>)
 8007d24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007d26:	f7fe fc79 	bl	800661c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d2a:	bf00      	nop
 8007d2c:	3718      	adds	r7, #24
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	20003fe4 	.word	0x20003fe4
 8007d38:	20003fd4 	.word	0x20003fd4
 8007d3c:	20003fe0 	.word	0x20003fe0

08007d40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d46:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007d4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d4c:	4b27      	ldr	r3, [pc, #156]	@ (8007dec <prvHeapInit+0xac>)
 8007d4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f003 0307 	and.w	r3, r3, #7
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00c      	beq.n	8007d74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	3307      	adds	r3, #7
 8007d5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f023 0307 	bic.w	r3, r3, #7
 8007d66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d68:	68ba      	ldr	r2, [r7, #8]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	4a1f      	ldr	r2, [pc, #124]	@ (8007dec <prvHeapInit+0xac>)
 8007d70:	4413      	add	r3, r2
 8007d72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d78:	4a1d      	ldr	r2, [pc, #116]	@ (8007df0 <prvHeapInit+0xb0>)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8007df0 <prvHeapInit+0xb0>)
 8007d80:	2200      	movs	r2, #0
 8007d82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	4413      	add	r3, r2
 8007d8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d8c:	2208      	movs	r2, #8
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	1a9b      	subs	r3, r3, r2
 8007d92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f023 0307 	bic.w	r3, r3, #7
 8007d9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	4a15      	ldr	r2, [pc, #84]	@ (8007df4 <prvHeapInit+0xb4>)
 8007da0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007da2:	4b14      	ldr	r3, [pc, #80]	@ (8007df4 <prvHeapInit+0xb4>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2200      	movs	r2, #0
 8007da8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007daa:	4b12      	ldr	r3, [pc, #72]	@ (8007df4 <prvHeapInit+0xb4>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2200      	movs	r2, #0
 8007db0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	1ad2      	subs	r2, r2, r3
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8007df4 <prvHeapInit+0xb4>)
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8007df8 <prvHeapInit+0xb8>)
 8007dce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	4a09      	ldr	r2, [pc, #36]	@ (8007dfc <prvHeapInit+0xbc>)
 8007dd6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007dd8:	4b09      	ldr	r3, [pc, #36]	@ (8007e00 <prvHeapInit+0xc0>)
 8007dda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007dde:	601a      	str	r2, [r3, #0]
}
 8007de0:	bf00      	nop
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr
 8007dec:	200003c8 	.word	0x200003c8
 8007df0:	20003fc8 	.word	0x20003fc8
 8007df4:	20003fd0 	.word	0x20003fd0
 8007df8:	20003fd8 	.word	0x20003fd8
 8007dfc:	20003fd4 	.word	0x20003fd4
 8007e00:	20003fe4 	.word	0x20003fe4

08007e04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e0c:	4b28      	ldr	r3, [pc, #160]	@ (8007eb0 <prvInsertBlockIntoFreeList+0xac>)
 8007e0e:	60fb      	str	r3, [r7, #12]
 8007e10:	e002      	b.n	8007e18 <prvInsertBlockIntoFreeList+0x14>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d8f7      	bhi.n	8007e12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d108      	bne.n	8007e46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	685a      	ldr	r2, [r3, #4]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	441a      	add	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	441a      	add	r2, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d118      	bne.n	8007e8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	4b15      	ldr	r3, [pc, #84]	@ (8007eb4 <prvInsertBlockIntoFreeList+0xb0>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d00d      	beq.n	8007e82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	685a      	ldr	r2, [r3, #4]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	441a      	add	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	601a      	str	r2, [r3, #0]
 8007e80:	e008      	b.n	8007e94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e82:	4b0c      	ldr	r3, [pc, #48]	@ (8007eb4 <prvInsertBlockIntoFreeList+0xb0>)
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	e003      	b.n	8007e94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d002      	beq.n	8007ea2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ea2:	bf00      	nop
 8007ea4:	3714      	adds	r7, #20
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	20003fc8 	.word	0x20003fc8
 8007eb4:	20003fd0 	.word	0x20003fd0

08007eb8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7fd fb2e 	bl	8005528 <USBH_LL_IncTimer>
}
 8007ecc:	bf00      	nop
 8007ece:	3708      	adds	r7, #8
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7fd fb72 	bl	80055cc <USBH_LL_Connect>
}
 8007ee8:	bf00      	nop
 8007eea:	3708      	adds	r7, #8
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7fd fb87 	bl	8005612 <USBH_LL_Disconnect>
}
 8007f04:	bf00      	nop
 8007f06:	3708      	adds	r7, #8
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	460b      	mov	r3, r1
 8007f16:	70fb      	strb	r3, [r7, #3]
 8007f18:	4613      	mov	r3, r2
 8007f1a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7fd fba7 	bl	8005676 <USBH_LL_NotifyURBChange>
#endif
}
 8007f28:	bf00      	nop
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7fd fb1c 	bl	800557c <USBH_LL_PortEnabled>
}
 8007f44:	bf00      	nop
 8007f46:	3708      	adds	r7, #8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7fd fb28 	bl	80055b0 <USBH_LL_PortDisabled>
}
 8007f60:	bf00      	nop
 8007f62:	3708      	adds	r7, #8
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f70:	2300      	movs	r3, #0
 8007f72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7f9 fc29 	bl	80017d6 <HAL_HCD_Stop>
 8007f84:	4603      	mov	r3, r0
 8007f86:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f88:	7bfb      	ldrb	r3, [r7, #15]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 f808 	bl	8007fa0 <USBH_Get_USB_Status>
 8007f90:	4603      	mov	r3, r0
 8007f92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f94:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
	...

08007fa0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007faa:	2300      	movs	r3, #0
 8007fac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007fae:	79fb      	ldrb	r3, [r7, #7]
 8007fb0:	2b03      	cmp	r3, #3
 8007fb2:	d817      	bhi.n	8007fe4 <USBH_Get_USB_Status+0x44>
 8007fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8007fbc <USBH_Get_USB_Status+0x1c>)
 8007fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fba:	bf00      	nop
 8007fbc:	08007fcd 	.word	0x08007fcd
 8007fc0:	08007fd3 	.word	0x08007fd3
 8007fc4:	08007fd9 	.word	0x08007fd9
 8007fc8:	08007fdf 	.word	0x08007fdf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	73fb      	strb	r3, [r7, #15]
    break;
 8007fd0:	e00b      	b.n	8007fea <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	73fb      	strb	r3, [r7, #15]
    break;
 8007fd6:	e008      	b.n	8007fea <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	73fb      	strb	r3, [r7, #15]
    break;
 8007fdc:	e005      	b.n	8007fea <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007fde:	2302      	movs	r3, #2
 8007fe0:	73fb      	strb	r3, [r7, #15]
    break;
 8007fe2:	e002      	b.n	8007fea <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	73fb      	strb	r3, [r7, #15]
    break;
 8007fe8:	bf00      	nop
  }
  return usb_status;
 8007fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3714      	adds	r7, #20
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <__malloc_lock>:
 8007ff8:	4801      	ldr	r0, [pc, #4]	@ (8008000 <__malloc_lock+0x8>)
 8007ffa:	f000 b88b 	b.w	8008114 <__retarget_lock_acquire_recursive>
 8007ffe:	bf00      	nop
 8008000:	20004504 	.word	0x20004504

08008004 <__malloc_unlock>:
 8008004:	4801      	ldr	r0, [pc, #4]	@ (800800c <__malloc_unlock+0x8>)
 8008006:	f000 b886 	b.w	8008116 <__retarget_lock_release_recursive>
 800800a:	bf00      	nop
 800800c:	20004504 	.word	0x20004504

08008010 <memset>:
 8008010:	4402      	add	r2, r0
 8008012:	4603      	mov	r3, r0
 8008014:	4293      	cmp	r3, r2
 8008016:	d100      	bne.n	800801a <memset+0xa>
 8008018:	4770      	bx	lr
 800801a:	f803 1b01 	strb.w	r1, [r3], #1
 800801e:	e7f9      	b.n	8008014 <memset+0x4>

08008020 <_reclaim_reent>:
 8008020:	4b29      	ldr	r3, [pc, #164]	@ (80080c8 <_reclaim_reent+0xa8>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4283      	cmp	r3, r0
 8008026:	b570      	push	{r4, r5, r6, lr}
 8008028:	4604      	mov	r4, r0
 800802a:	d04b      	beq.n	80080c4 <_reclaim_reent+0xa4>
 800802c:	69c3      	ldr	r3, [r0, #28]
 800802e:	b1ab      	cbz	r3, 800805c <_reclaim_reent+0x3c>
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	b16b      	cbz	r3, 8008050 <_reclaim_reent+0x30>
 8008034:	2500      	movs	r5, #0
 8008036:	69e3      	ldr	r3, [r4, #28]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	5959      	ldr	r1, [r3, r5]
 800803c:	2900      	cmp	r1, #0
 800803e:	d13b      	bne.n	80080b8 <_reclaim_reent+0x98>
 8008040:	3504      	adds	r5, #4
 8008042:	2d80      	cmp	r5, #128	@ 0x80
 8008044:	d1f7      	bne.n	8008036 <_reclaim_reent+0x16>
 8008046:	69e3      	ldr	r3, [r4, #28]
 8008048:	4620      	mov	r0, r4
 800804a:	68d9      	ldr	r1, [r3, #12]
 800804c:	f000 f872 	bl	8008134 <_free_r>
 8008050:	69e3      	ldr	r3, [r4, #28]
 8008052:	6819      	ldr	r1, [r3, #0]
 8008054:	b111      	cbz	r1, 800805c <_reclaim_reent+0x3c>
 8008056:	4620      	mov	r0, r4
 8008058:	f000 f86c 	bl	8008134 <_free_r>
 800805c:	6961      	ldr	r1, [r4, #20]
 800805e:	b111      	cbz	r1, 8008066 <_reclaim_reent+0x46>
 8008060:	4620      	mov	r0, r4
 8008062:	f000 f867 	bl	8008134 <_free_r>
 8008066:	69e1      	ldr	r1, [r4, #28]
 8008068:	b111      	cbz	r1, 8008070 <_reclaim_reent+0x50>
 800806a:	4620      	mov	r0, r4
 800806c:	f000 f862 	bl	8008134 <_free_r>
 8008070:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008072:	b111      	cbz	r1, 800807a <_reclaim_reent+0x5a>
 8008074:	4620      	mov	r0, r4
 8008076:	f000 f85d 	bl	8008134 <_free_r>
 800807a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800807c:	b111      	cbz	r1, 8008084 <_reclaim_reent+0x64>
 800807e:	4620      	mov	r0, r4
 8008080:	f000 f858 	bl	8008134 <_free_r>
 8008084:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008086:	b111      	cbz	r1, 800808e <_reclaim_reent+0x6e>
 8008088:	4620      	mov	r0, r4
 800808a:	f000 f853 	bl	8008134 <_free_r>
 800808e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008090:	b111      	cbz	r1, 8008098 <_reclaim_reent+0x78>
 8008092:	4620      	mov	r0, r4
 8008094:	f000 f84e 	bl	8008134 <_free_r>
 8008098:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800809a:	b111      	cbz	r1, 80080a2 <_reclaim_reent+0x82>
 800809c:	4620      	mov	r0, r4
 800809e:	f000 f849 	bl	8008134 <_free_r>
 80080a2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80080a4:	b111      	cbz	r1, 80080ac <_reclaim_reent+0x8c>
 80080a6:	4620      	mov	r0, r4
 80080a8:	f000 f844 	bl	8008134 <_free_r>
 80080ac:	6a23      	ldr	r3, [r4, #32]
 80080ae:	b14b      	cbz	r3, 80080c4 <_reclaim_reent+0xa4>
 80080b0:	4620      	mov	r0, r4
 80080b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80080b6:	4718      	bx	r3
 80080b8:	680e      	ldr	r6, [r1, #0]
 80080ba:	4620      	mov	r0, r4
 80080bc:	f000 f83a 	bl	8008134 <_free_r>
 80080c0:	4631      	mov	r1, r6
 80080c2:	e7bb      	b.n	800803c <_reclaim_reent+0x1c>
 80080c4:	bd70      	pop	{r4, r5, r6, pc}
 80080c6:	bf00      	nop
 80080c8:	20000020 	.word	0x20000020

080080cc <__libc_init_array>:
 80080cc:	b570      	push	{r4, r5, r6, lr}
 80080ce:	4d0d      	ldr	r5, [pc, #52]	@ (8008104 <__libc_init_array+0x38>)
 80080d0:	4c0d      	ldr	r4, [pc, #52]	@ (8008108 <__libc_init_array+0x3c>)
 80080d2:	1b64      	subs	r4, r4, r5
 80080d4:	10a4      	asrs	r4, r4, #2
 80080d6:	2600      	movs	r6, #0
 80080d8:	42a6      	cmp	r6, r4
 80080da:	d109      	bne.n	80080f0 <__libc_init_array+0x24>
 80080dc:	4d0b      	ldr	r5, [pc, #44]	@ (800810c <__libc_init_array+0x40>)
 80080de:	4c0c      	ldr	r4, [pc, #48]	@ (8008110 <__libc_init_array+0x44>)
 80080e0:	f000 f872 	bl	80081c8 <_init>
 80080e4:	1b64      	subs	r4, r4, r5
 80080e6:	10a4      	asrs	r4, r4, #2
 80080e8:	2600      	movs	r6, #0
 80080ea:	42a6      	cmp	r6, r4
 80080ec:	d105      	bne.n	80080fa <__libc_init_array+0x2e>
 80080ee:	bd70      	pop	{r4, r5, r6, pc}
 80080f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080f4:	4798      	blx	r3
 80080f6:	3601      	adds	r6, #1
 80080f8:	e7ee      	b.n	80080d8 <__libc_init_array+0xc>
 80080fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80080fe:	4798      	blx	r3
 8008100:	3601      	adds	r6, #1
 8008102:	e7f2      	b.n	80080ea <__libc_init_array+0x1e>
 8008104:	0800825c 	.word	0x0800825c
 8008108:	0800825c 	.word	0x0800825c
 800810c:	0800825c 	.word	0x0800825c
 8008110:	08008260 	.word	0x08008260

08008114 <__retarget_lock_acquire_recursive>:
 8008114:	4770      	bx	lr

08008116 <__retarget_lock_release_recursive>:
 8008116:	4770      	bx	lr

08008118 <memcpy>:
 8008118:	440a      	add	r2, r1
 800811a:	4291      	cmp	r1, r2
 800811c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008120:	d100      	bne.n	8008124 <memcpy+0xc>
 8008122:	4770      	bx	lr
 8008124:	b510      	push	{r4, lr}
 8008126:	f811 4b01 	ldrb.w	r4, [r1], #1
 800812a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800812e:	4291      	cmp	r1, r2
 8008130:	d1f9      	bne.n	8008126 <memcpy+0xe>
 8008132:	bd10      	pop	{r4, pc}

08008134 <_free_r>:
 8008134:	b538      	push	{r3, r4, r5, lr}
 8008136:	4605      	mov	r5, r0
 8008138:	2900      	cmp	r1, #0
 800813a:	d041      	beq.n	80081c0 <_free_r+0x8c>
 800813c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008140:	1f0c      	subs	r4, r1, #4
 8008142:	2b00      	cmp	r3, #0
 8008144:	bfb8      	it	lt
 8008146:	18e4      	addlt	r4, r4, r3
 8008148:	f7ff ff56 	bl	8007ff8 <__malloc_lock>
 800814c:	4a1d      	ldr	r2, [pc, #116]	@ (80081c4 <_free_r+0x90>)
 800814e:	6813      	ldr	r3, [r2, #0]
 8008150:	b933      	cbnz	r3, 8008160 <_free_r+0x2c>
 8008152:	6063      	str	r3, [r4, #4]
 8008154:	6014      	str	r4, [r2, #0]
 8008156:	4628      	mov	r0, r5
 8008158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800815c:	f7ff bf52 	b.w	8008004 <__malloc_unlock>
 8008160:	42a3      	cmp	r3, r4
 8008162:	d908      	bls.n	8008176 <_free_r+0x42>
 8008164:	6820      	ldr	r0, [r4, #0]
 8008166:	1821      	adds	r1, r4, r0
 8008168:	428b      	cmp	r3, r1
 800816a:	bf01      	itttt	eq
 800816c:	6819      	ldreq	r1, [r3, #0]
 800816e:	685b      	ldreq	r3, [r3, #4]
 8008170:	1809      	addeq	r1, r1, r0
 8008172:	6021      	streq	r1, [r4, #0]
 8008174:	e7ed      	b.n	8008152 <_free_r+0x1e>
 8008176:	461a      	mov	r2, r3
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	b10b      	cbz	r3, 8008180 <_free_r+0x4c>
 800817c:	42a3      	cmp	r3, r4
 800817e:	d9fa      	bls.n	8008176 <_free_r+0x42>
 8008180:	6811      	ldr	r1, [r2, #0]
 8008182:	1850      	adds	r0, r2, r1
 8008184:	42a0      	cmp	r0, r4
 8008186:	d10b      	bne.n	80081a0 <_free_r+0x6c>
 8008188:	6820      	ldr	r0, [r4, #0]
 800818a:	4401      	add	r1, r0
 800818c:	1850      	adds	r0, r2, r1
 800818e:	4283      	cmp	r3, r0
 8008190:	6011      	str	r1, [r2, #0]
 8008192:	d1e0      	bne.n	8008156 <_free_r+0x22>
 8008194:	6818      	ldr	r0, [r3, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	6053      	str	r3, [r2, #4]
 800819a:	4408      	add	r0, r1
 800819c:	6010      	str	r0, [r2, #0]
 800819e:	e7da      	b.n	8008156 <_free_r+0x22>
 80081a0:	d902      	bls.n	80081a8 <_free_r+0x74>
 80081a2:	230c      	movs	r3, #12
 80081a4:	602b      	str	r3, [r5, #0]
 80081a6:	e7d6      	b.n	8008156 <_free_r+0x22>
 80081a8:	6820      	ldr	r0, [r4, #0]
 80081aa:	1821      	adds	r1, r4, r0
 80081ac:	428b      	cmp	r3, r1
 80081ae:	bf04      	itt	eq
 80081b0:	6819      	ldreq	r1, [r3, #0]
 80081b2:	685b      	ldreq	r3, [r3, #4]
 80081b4:	6063      	str	r3, [r4, #4]
 80081b6:	bf04      	itt	eq
 80081b8:	1809      	addeq	r1, r1, r0
 80081ba:	6021      	streq	r1, [r4, #0]
 80081bc:	6054      	str	r4, [r2, #4]
 80081be:	e7ca      	b.n	8008156 <_free_r+0x22>
 80081c0:	bd38      	pop	{r3, r4, r5, pc}
 80081c2:	bf00      	nop
 80081c4:	200043c8 	.word	0x200043c8

080081c8 <_init>:
 80081c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ca:	bf00      	nop
 80081cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ce:	bc08      	pop	{r3}
 80081d0:	469e      	mov	lr, r3
 80081d2:	4770      	bx	lr

080081d4 <_fini>:
 80081d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d6:	bf00      	nop
 80081d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081da:	bc08      	pop	{r3}
 80081dc:	469e      	mov	lr, r3
 80081de:	4770      	bx	lr
